
ac_power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003520  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  0800362c  0800362c  0001362c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003c14  08003c14  00013c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003c1c  08003c1c  00013c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003c20  08003c20  00013c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000518  20000000  08003c24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000064  20000518  0800413c  00020518  2**2
                  ALLOC
  8 ._user_heap_stack 00000100  2000057c  0800413c  0002057c  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00020518  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024d15  00000000  00000000  00020541  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004bd0  00000000  00000000  00045256  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000cd8  00000000  00000000  00049e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c68  00000000  00000000  0004ab00  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007ccd  00000000  00000000  0004b768  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005ac3  00000000  00000000  00053435  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00058ef8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000340c  00000000  00000000  00058f74  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    000021df  00000000  00000000  0005c380  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000003f  00000000  00000000  0005e55f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000518 	.word	0x20000518
 8000128:	00000000 	.word	0x00000000
 800012c:	08003614 	.word	0x08003614

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000051c 	.word	0x2000051c
 8000148:	08003614 	.word	0x08003614

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	60fb      	str	r3, [r7, #12]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000666:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800066a:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	791b      	ldrb	r3, [r3, #4]
 8000674:	021b      	lsls	r3, r3, #8
 8000676:	4313      	orrs	r3, r2
 8000678:	68fa      	ldr	r2, [r7, #12]
 800067a:	4313      	orrs	r3, r2
 800067c:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	605a      	str	r2, [r3, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	689b      	ldr	r3, [r3, #8]
 8000688:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
 800068a:	68fa      	ldr	r2, [r7, #12]
 800068c:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <ADC_Init+0xa0>)
 800068e:	4013      	ands	r3, r2
 8000690:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	68da      	ldr	r2, [r3, #12]
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	689b      	ldr	r3, [r3, #8]
 800069a:	431a      	orrs	r2, r3
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	795b      	ldrb	r3, [r3, #5]
 80006a0:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 80006a2:	4313      	orrs	r3, r2
 80006a4:	68fa      	ldr	r2, [r7, #12]
 80006a6:	4313      	orrs	r3, r2
 80006a8:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	68fa      	ldr	r2, [r7, #12]
 80006ae:	609a      	str	r2, [r3, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b4:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80006bc:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	7c1b      	ldrb	r3, [r3, #16]
 80006c2:	3b01      	subs	r3, #1
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	7afb      	ldrb	r3, [r7, #11]
 80006c8:	4313      	orrs	r3, r2
 80006ca:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
 80006cc:	7afb      	ldrb	r3, [r7, #11]
 80006ce:	051b      	lsls	r3, r3, #20
 80006d0:	68fa      	ldr	r2, [r7, #12]
 80006d2:	4313      	orrs	r3, r2
 80006d4:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	68fa      	ldr	r2, [r7, #12]
 80006da:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80006dc:	bf00      	nop
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	fff1f7fd 	.word	0xfff1f7fd

080006ec <ADC_StructInit>:
  * @brief  Fills each ADC_InitStruct member with its default value.
  * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2200      	movs	r2, #0
 80006fe:	711a      	strb	r2, [r3, #4]
  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2200      	movs	r2, #0
 8000704:	715a      	strb	r2, [r3, #5]
  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  /* Initialize the ADC_NbrOfChannel member */
  ADC_InitStruct->ADC_NbrOfChannel = 1;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2201      	movs	r2, #1
 8000716:	741a      	strb	r2, [r3, #16]
}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr

08000722 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000722:	b480      	push	{r7}
 8000724:	b083      	sub	sp, #12
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
 800072a:	460b      	mov	r3, r1
 800072c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800072e:	78fb      	ldrb	r3, [r7, #3]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d006      	beq.n	8000742 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	689b      	ldr	r3, [r3, #8]
 8000738:	f043 0201 	orr.w	r2, r3, #1
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
  }
}
 8000740:	e005      	b.n	800074e <ADC_Cmd+0x2c>
    ADCx->CR2 &= CR2_ADON_Reset;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	689b      	ldr	r3, [r3, #8]
 8000746:	f023 0201 	bic.w	r2, r3, #1
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	609a      	str	r2, [r3, #8]
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr

08000758 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	460b      	mov	r3, r1
 8000762:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000764:	78fb      	ldrb	r3, [r7, #3]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d006      	beq.n	8000778 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= CR2_DMA_Reset;
  }
}
 8000776:	e005      	b.n	8000784 <ADC_DMACmd+0x2c>
    ADCx->CR2 &= CR2_DMA_Reset;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	689b      	ldr	r3, [r3, #8]
 800077c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	609a      	str	r2, [r3, #8]
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr

0800078e <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
 800078e:	b480      	push	{r7}
 8000790:	b083      	sub	sp, #12
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	689b      	ldr	r3, [r3, #8]
 800079a:	f043 0204 	orr.w	r2, r3, #4
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	609a      	str	r2, [r3, #8]
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr

080007ac <ADC_SoftwareStartConvCmd>:
  * @param  NewState: new state of the selected ADC software start conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	460b      	mov	r3, r1
 80007b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007b8:	78fb      	ldrb	r3, [r7, #3]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d006      	beq.n	80007cc <ADC_SoftwareStartConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	689b      	ldr	r3, [r3, #8]
 80007c2:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	609a      	str	r2, [r3, #8]
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
  }
}
 80007ca:	e005      	b.n	80007d8 <ADC_SoftwareStartConvCmd+0x2c>
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	689b      	ldr	r3, [r3, #8]
 80007d0:	f423 02a0 	bic.w	r2, r3, #5242880	; 0x500000
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	609a      	str	r2, [r3, #8]
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr

080007e2 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80007e2:	b480      	push	{r7}
 80007e4:	b085      	sub	sp, #20
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
 80007ea:	4608      	mov	r0, r1
 80007ec:	4611      	mov	r1, r2
 80007ee:	461a      	mov	r2, r3
 80007f0:	4603      	mov	r3, r0
 80007f2:	70fb      	strb	r3, [r7, #3]
 80007f4:	460b      	mov	r3, r1
 80007f6:	70bb      	strb	r3, [r7, #2]
 80007f8:	4613      	mov	r3, r2
 80007fa:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	2300      	movs	r3, #0
 8000802:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000804:	78fb      	ldrb	r3, [r7, #3]
 8000806:	2b09      	cmp	r3, #9
 8000808:	d923      	bls.n	8000852 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	68db      	ldr	r3, [r3, #12]
 800080e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 8000810:	78fb      	ldrb	r3, [r7, #3]
 8000812:	f1a3 020a 	sub.w	r2, r3, #10
 8000816:	4613      	mov	r3, r2
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	4413      	add	r3, r2
 800081c:	2207      	movs	r2, #7
 800081e:	fa02 f303 	lsl.w	r3, r2, r3
 8000822:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	43db      	mvns	r3, r3
 8000828:	68fa      	ldr	r2, [r7, #12]
 800082a:	4013      	ands	r3, r2
 800082c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 800082e:	7879      	ldrb	r1, [r7, #1]
 8000830:	78fb      	ldrb	r3, [r7, #3]
 8000832:	f1a3 020a 	sub.w	r2, r3, #10
 8000836:	4613      	mov	r3, r2
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	4413      	add	r3, r2
 800083c:	fa01 f303 	lsl.w	r3, r1, r3
 8000840:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	4313      	orrs	r3, r2
 8000848:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	68fa      	ldr	r2, [r7, #12]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	e01e      	b.n	8000890 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	691b      	ldr	r3, [r3, #16]
 8000856:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 8000858:	78fa      	ldrb	r2, [r7, #3]
 800085a:	4613      	mov	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	4413      	add	r3, r2
 8000860:	2207      	movs	r2, #7
 8000862:	fa02 f303 	lsl.w	r3, r2, r3
 8000866:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	43db      	mvns	r3, r3
 800086c:	68fa      	ldr	r2, [r7, #12]
 800086e:	4013      	ands	r3, r2
 8000870:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000872:	7879      	ldrb	r1, [r7, #1]
 8000874:	78fa      	ldrb	r2, [r7, #3]
 8000876:	4613      	mov	r3, r2
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	4413      	add	r3, r2
 800087c:	fa01 f303 	lsl.w	r3, r1, r3
 8000880:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8000882:	68fa      	ldr	r2, [r7, #12]
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	4313      	orrs	r3, r2
 8000888:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	68fa      	ldr	r2, [r7, #12]
 800088e:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000890:	78bb      	ldrb	r3, [r7, #2]
 8000892:	2b06      	cmp	r3, #6
 8000894:	d821      	bhi.n	80008da <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800089a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 800089c:	78bb      	ldrb	r3, [r7, #2]
 800089e:	1e5a      	subs	r2, r3, #1
 80008a0:	4613      	mov	r3, r2
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	4413      	add	r3, r2
 80008a6:	221f      	movs	r2, #31
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	43db      	mvns	r3, r3
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	4013      	ands	r3, r2
 80008b6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80008b8:	78f9      	ldrb	r1, [r7, #3]
 80008ba:	78bb      	ldrb	r3, [r7, #2]
 80008bc:	1e5a      	subs	r2, r3, #1
 80008be:	4613      	mov	r3, r2
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	4413      	add	r3, r2
 80008c4:	fa01 f303 	lsl.w	r3, r1, r3
 80008c8:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80008ca:	68fa      	ldr	r2, [r7, #12]
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	4313      	orrs	r3, r2
 80008d0:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	68fa      	ldr	r2, [r7, #12]
 80008d6:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80008d8:	e047      	b.n	800096a <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 80008da:	78bb      	ldrb	r3, [r7, #2]
 80008dc:	2b0c      	cmp	r3, #12
 80008de:	d821      	bhi.n	8000924 <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e4:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 80008e6:	78bb      	ldrb	r3, [r7, #2]
 80008e8:	1fda      	subs	r2, r3, #7
 80008ea:	4613      	mov	r3, r2
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	4413      	add	r3, r2
 80008f0:	221f      	movs	r2, #31
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	43db      	mvns	r3, r3
 80008fc:	68fa      	ldr	r2, [r7, #12]
 80008fe:	4013      	ands	r3, r2
 8000900:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000902:	78f9      	ldrb	r1, [r7, #3]
 8000904:	78bb      	ldrb	r3, [r7, #2]
 8000906:	1fda      	subs	r2, r3, #7
 8000908:	4613      	mov	r3, r2
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	4413      	add	r3, r2
 800090e:	fa01 f303 	lsl.w	r3, r1, r3
 8000912:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8000914:	68fa      	ldr	r2, [r7, #12]
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	4313      	orrs	r3, r2
 800091a:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000922:	e022      	b.n	800096a <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000928:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 800092a:	78bb      	ldrb	r3, [r7, #2]
 800092c:	f1a3 020d 	sub.w	r2, r3, #13
 8000930:	4613      	mov	r3, r2
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	4413      	add	r3, r2
 8000936:	221f      	movs	r2, #31
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	43db      	mvns	r3, r3
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	4013      	ands	r3, r2
 8000946:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000948:	78f9      	ldrb	r1, [r7, #3]
 800094a:	78bb      	ldrb	r3, [r7, #2]
 800094c:	f1a3 020d 	sub.w	r2, r3, #13
 8000950:	4613      	mov	r3, r2
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	4413      	add	r3, r2
 8000956:	fa01 f303 	lsl.w	r3, r1, r3
 800095a:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 800095c:	68fa      	ldr	r2, [r7, #12]
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	4313      	orrs	r3, r2
 8000962:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800096a:	bf00      	nop
 800096c:	3714      	adds	r7, #20
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800098e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000992:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	689a      	ldr	r2, [r3, #8]
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	6a1b      	ldr	r3, [r3, #32]
 800099c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	691b      	ldr	r3, [r3, #16]
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80009a2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	695b      	ldr	r3, [r3, #20]
 80009a8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	699b      	ldr	r3, [r3, #24]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80009ae:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	69db      	ldr	r3, [r3, #28]
 80009b4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80009ba:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c0:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	68da      	ldr	r2, [r3, #12]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685a      	ldr	r2, [r3, #4]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	60da      	str	r2, [r3, #12]
}
 80009e6:	bf00      	nop
 80009e8:	3714      	adds	r7, #20
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr

080009f0 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
/*-------------- Reset DMA init structure parameters values ------------------*/
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
  /* Initialize the DMA_MemoryBaseAddr member */
  DMA_InitStruct->DMA_MemoryBaseAddr = 0;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2200      	movs	r2, #0
 8000a02:	605a      	str	r2, [r3, #4]
  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	60da      	str	r2, [r3, #12]
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	615a      	str	r2, [r3, #20]
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	619a      	str	r2, [r3, #24]
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2200      	movs	r2, #0
 8000a26:	61da      	str	r2, [r3, #28]
  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	621a      	str	r2, [r3, #32]
  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2200      	movs	r2, #0
 8000a32:	625a      	str	r2, [r3, #36]	; 0x24
  /* Initialize the DMA_M2M member */
  DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2200      	movs	r2, #0
 8000a38:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr

08000a44 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000a50:	78fb      	ldrb	r3, [r7, #3]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d006      	beq.n	8000a64 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f043 0201 	orr.w	r2, r3, #1
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 8000a62:	e006      	b.n	8000a72 <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	6013      	str	r3, [r2, #0]
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr

08000a7c <DMA_GetCurrDataCounter>:
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval The number of remaining data units in the current DMAy Channelx
  *         transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Return the number of remaining data units for DMAy Channelx */
  return ((uint16_t)(DMAy_Channelx->CNDTR));
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	b29b      	uxth	r3, r3
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr

08000a94 <DMA_GetFlagStatus>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d003      	beq.n	8000ab6 <DMA_GetFlagStatus+0x22>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <DMA_GetFlagStatus+0x48>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	e002      	b.n	8000abc <DMA_GetFlagStatus+0x28>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <DMA_GetFlagStatus+0x4c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 8000abc:	68ba      	ldr	r2, [r7, #8]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d002      	beq.n	8000acc <DMA_GetFlagStatus+0x38>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	73fb      	strb	r3, [r7, #15]
 8000aca:	e001      	b.n	8000ad0 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 8000acc:	2300      	movs	r3, #0
 8000ace:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 8000ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr
 8000adc:	40020400 	.word	0x40020400
 8000ae0:	40020000 	.word	0x40020000

08000ae4 <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d003      	beq.n	8000afe <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 8000af6:	4a06      	ldr	r2, [pc, #24]	; (8000b10 <DMA_ClearFlag+0x2c>)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
  }
}
 8000afc:	e002      	b.n	8000b04 <DMA_ClearFlag+0x20>
    DMA1->IFCR = DMAy_FLAG;
 8000afe:	4a05      	ldr	r2, [pc, #20]	; (8000b14 <DMA_ClearFlag+0x30>)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6053      	str	r3, [r2, #4]
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	40020400 	.word	0x40020400
 8000b14:	40020000 	.word	0x40020000

08000b18 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b089      	sub	sp, #36	; 0x24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61bb      	str	r3, [r7, #24]
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	78db      	ldrb	r3, [r3, #3]
 8000b3e:	f003 030f 	and.w	r3, r3, #15
 8000b42:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	78db      	ldrb	r3, [r3, #3]
 8000b48:	f003 0310 	and.w	r3, r3, #16
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d005      	beq.n	8000b5c <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	789b      	ldrb	r3, [r3, #2]
 8000b54:	461a      	mov	r2, r3
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	881b      	ldrh	r3, [r3, #0]
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d044      	beq.n	8000bf0 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61bb      	str	r3, [r7, #24]
 8000b70:	e038      	b.n	8000be4 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000b72:	2201      	movs	r2, #1
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	4013      	ands	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d126      	bne.n	8000bde <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000b96:	220f      	movs	r2, #15
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	697a      	ldr	r2, [r7, #20]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000baa:	69fa      	ldr	r2, [r7, #28]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	697a      	ldr	r2, [r7, #20]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	78db      	ldrb	r3, [r3, #3]
 8000bbc:	2b28      	cmp	r3, #40	; 0x28
 8000bbe:	d105      	bne.n	8000bcc <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	409a      	lsls	r2, r3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	615a      	str	r2, [r3, #20]
 8000bca:	e008      	b.n	8000bde <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	78db      	ldrb	r3, [r3, #3]
 8000bd0:	2b48      	cmp	r3, #72	; 0x48
 8000bd2:	d104      	bne.n	8000bde <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	409a      	lsls	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	3301      	adds	r3, #1
 8000be2:	61bb      	str	r3, [r7, #24]
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	2b07      	cmp	r3, #7
 8000be8:	d9c3      	bls.n	8000b72 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	697a      	ldr	r2, [r7, #20]
 8000bee:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	2bff      	cmp	r3, #255	; 0xff
 8000bf6:	d946      	bls.n	8000c86 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61bb      	str	r3, [r7, #24]
 8000c02:	e03a      	b.n	8000c7a <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	3308      	adds	r3, #8
 8000c08:	2201      	movs	r2, #1
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	881b      	ldrh	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d127      	bne.n	8000c74 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000c2a:	220f      	movs	r2, #15
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	43db      	mvns	r3, r3
 8000c38:	697a      	ldr	r2, [r7, #20]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000c3e:	69fa      	ldr	r2, [r7, #28]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	697a      	ldr	r2, [r7, #20]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	78db      	ldrb	r3, [r3, #3]
 8000c50:	2b28      	cmp	r3, #40	; 0x28
 8000c52:	d105      	bne.n	8000c60 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	3308      	adds	r3, #8
 8000c58:	2201      	movs	r2, #1
 8000c5a:	409a      	lsls	r2, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	78db      	ldrb	r3, [r3, #3]
 8000c64:	2b48      	cmp	r3, #72	; 0x48
 8000c66:	d105      	bne.n	8000c74 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	3308      	adds	r3, #8
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	409a      	lsls	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	3301      	adds	r3, #1
 8000c78:	61bb      	str	r3, [r7, #24]
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	2b07      	cmp	r3, #7
 8000c7e:	d9c1      	bls.n	8000c04 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	697a      	ldr	r2, [r7, #20]
 8000c84:	605a      	str	r2, [r3, #4]
  }
}
 8000c86:	bf00      	nop
 8000c88:	3724      	adds	r7, #36	; 0x24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr

08000c90 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c9e:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2204      	movs	r2, #4
 8000caa:	70da      	strb	r2, [r3, #3]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr
	...

08000cb8 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 8000cc4:	4b09      	ldr	r3, [pc, #36]	; (8000cec <RCC_ADCCLKConfig+0x34>)
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cd0:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000cda:	4a04      	ldr	r2, [pc, #16]	; (8000cec <RCC_ADCCLKConfig+0x34>)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	6053      	str	r3, [r2, #4]
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40021000 	.word	0x40021000

08000cf0 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b087      	sub	sp, #28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	2300      	movs	r3, #0
 8000d06:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000d08:	4b4c      	ldr	r3, [pc, #304]	; (8000e3c <RCC_GetClocksFreq+0x14c>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 030c 	and.w	r3, r3, #12
 8000d10:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	2b04      	cmp	r3, #4
 8000d16:	d007      	beq.n	8000d28 <RCC_GetClocksFreq+0x38>
 8000d18:	2b08      	cmp	r3, #8
 8000d1a:	d009      	beq.n	8000d30 <RCC_GetClocksFreq+0x40>
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d133      	bne.n	8000d88 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a47      	ldr	r2, [pc, #284]	; (8000e40 <RCC_GetClocksFreq+0x150>)
 8000d24:	601a      	str	r2, [r3, #0]
      break;
 8000d26:	e033      	b.n	8000d90 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a45      	ldr	r2, [pc, #276]	; (8000e40 <RCC_GetClocksFreq+0x150>)
 8000d2c:	601a      	str	r2, [r3, #0]
      break;
 8000d2e:	e02f      	b.n	8000d90 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000d30:	4b42      	ldr	r3, [pc, #264]	; (8000e3c <RCC_GetClocksFreq+0x14c>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000d38:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000d3a:	4b40      	ldr	r3, [pc, #256]	; (8000e3c <RCC_GetClocksFreq+0x14c>)
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d42:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	0c9b      	lsrs	r3, r3, #18
 8000d48:	3302      	adds	r3, #2
 8000d4a:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d106      	bne.n	8000d60 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	4a3b      	ldr	r2, [pc, #236]	; (8000e44 <RCC_GetClocksFreq+0x154>)
 8000d56:	fb02 f203 	mul.w	r2, r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000d5e:	e017      	b.n	8000d90 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8000d60:	4b36      	ldr	r3, [pc, #216]	; (8000e3c <RCC_GetClocksFreq+0x14c>)
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d006      	beq.n	8000d7a <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	4a35      	ldr	r2, [pc, #212]	; (8000e44 <RCC_GetClocksFreq+0x154>)
 8000d70:	fb02 f203 	mul.w	r2, r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	601a      	str	r2, [r3, #0]
      break;
 8000d78:	e00a      	b.n	8000d90 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	4a30      	ldr	r2, [pc, #192]	; (8000e40 <RCC_GetClocksFreq+0x150>)
 8000d7e:	fb02 f203 	mul.w	r2, r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	601a      	str	r2, [r3, #0]
      break;
 8000d86:	e003      	b.n	8000d90 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a2d      	ldr	r2, [pc, #180]	; (8000e40 <RCC_GetClocksFreq+0x150>)
 8000d8c:	601a      	str	r2, [r3, #0]
      break;
 8000d8e:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000d90:	4b2a      	ldr	r3, [pc, #168]	; (8000e3c <RCC_GetClocksFreq+0x14c>)
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d98:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	091b      	lsrs	r3, r3, #4
 8000d9e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000da0:	4a29      	ldr	r2, [pc, #164]	; (8000e48 <RCC_GetClocksFreq+0x158>)
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	4413      	add	r3, r2
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	40da      	lsrs	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000db8:	4b20      	ldr	r3, [pc, #128]	; (8000e3c <RCC_GetClocksFreq+0x14c>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000dc0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000dc8:	4a1f      	ldr	r2, [pc, #124]	; (8000e48 <RCC_GetClocksFreq+0x158>)
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	4413      	add	r3, r2
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	685a      	ldr	r2, [r3, #4]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	40da      	lsrs	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000de0:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <RCC_GetClocksFreq+0x14c>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000de8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	0adb      	lsrs	r3, r3, #11
 8000dee:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000df0:	4a15      	ldr	r2, [pc, #84]	; (8000e48 <RCC_GetClocksFreq+0x158>)
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	4413      	add	r3, r2
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685a      	ldr	r2, [r3, #4]
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	40da      	lsrs	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <RCC_GetClocksFreq+0x14c>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e10:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	0b9b      	lsrs	r3, r3, #14
 8000e16:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8000e18:	4a0c      	ldr	r2, [pc, #48]	; (8000e4c <RCC_GetClocksFreq+0x15c>)
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	68da      	ldr	r2, [r3, #12]
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	611a      	str	r2, [r3, #16]
}
 8000e32:	bf00      	nop
 8000e34:	371c      	adds	r7, #28
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	007a1200 	.word	0x007a1200
 8000e44:	003d0900 	.word	0x003d0900
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	20000010 	.word	0x20000010

08000e50 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000e5c:	78fb      	ldrb	r3, [r7, #3]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d006      	beq.n	8000e70 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000e62:	4909      	ldr	r1, [pc, #36]	; (8000e88 <RCC_AHBPeriphClockCmd+0x38>)
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <RCC_AHBPeriphClockCmd+0x38>)
 8000e66:	695a      	ldr	r2, [r3, #20]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000e6e:	e006      	b.n	8000e7e <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000e70:	4905      	ldr	r1, [pc, #20]	; (8000e88 <RCC_AHBPeriphClockCmd+0x38>)
 8000e72:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <RCC_AHBPeriphClockCmd+0x38>)
 8000e74:	695a      	ldr	r2, [r3, #20]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	614b      	str	r3, [r1, #20]
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr
 8000e88:	40021000 	.word	0x40021000

08000e8c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	460b      	mov	r3, r1
 8000e96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000e98:	78fb      	ldrb	r3, [r7, #3]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d006      	beq.n	8000eac <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000e9e:	4909      	ldr	r1, [pc, #36]	; (8000ec4 <RCC_APB2PeriphClockCmd+0x38>)
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <RCC_APB2PeriphClockCmd+0x38>)
 8000ea2:	699a      	ldr	r2, [r3, #24]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000eaa:	e006      	b.n	8000eba <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000eac:	4905      	ldr	r1, [pc, #20]	; (8000ec4 <RCC_APB2PeriphClockCmd+0x38>)
 8000eae:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <RCC_APB2PeriphClockCmd+0x38>)
 8000eb0:	699a      	ldr	r2, [r3, #24]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	618b      	str	r3, [r1, #24]
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	40021000 	.word	0x40021000

08000ec8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ed4:	78fb      	ldrb	r3, [r7, #3]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d006      	beq.n	8000ee8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000eda:	4909      	ldr	r1, [pc, #36]	; (8000f00 <RCC_APB1PeriphClockCmd+0x38>)
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <RCC_APB1PeriphClockCmd+0x38>)
 8000ede:	69da      	ldr	r2, [r3, #28]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000ee6:	e006      	b.n	8000ef6 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000ee8:	4905      	ldr	r1, [pc, #20]	; (8000f00 <RCC_APB1PeriphClockCmd+0x38>)
 8000eea:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <RCC_APB1PeriphClockCmd+0x38>)
 8000eec:	69da      	ldr	r2, [r3, #28]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61cb      	str	r3, [r1, #28]
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr
 8000f00:	40021000 	.word	0x40021000

08000f04 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000f18:	89fb      	ldrh	r3, [r7, #14]
 8000f1a:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8000f1e:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	881a      	ldrh	r2, [r3, #0]
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	885b      	ldrh	r3, [r3, #2]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000f30:	4313      	orrs	r3, r2
 8000f32:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000f40:	4313      	orrs	r3, r2
 8000f42:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000f50:	4313      	orrs	r3, r2
 8000f52:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	89fb      	ldrh	r3, [r7, #14]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	89fa      	ldrh	r2, [r7, #14]
 8000f66:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	8b9b      	ldrh	r3, [r3, #28]
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	8a1a      	ldrh	r2, [r3, #16]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	821a      	strh	r2, [r3, #16]
}
 8000f80:	bf00      	nop
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr

08000f8a <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct : pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b083      	sub	sp, #12
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	821a      	strh	r2, [r3, #16]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr

08000fd2 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b083      	sub	sp, #12
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000fde:	78fb      	ldrb	r3, [r7, #3]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d008      	beq.n	8000ff6 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 8000ff4:	e007      	b.n	8001006 <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	881b      	ldrh	r3, [r3, #0]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001000:	b29a      	uxth	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	801a      	strh	r2, [r3, #0]
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr

08001010 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI/I2S DMA transfer request.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	807b      	strh	r3, [r7, #2]
 800101c:	4613      	mov	r3, r2
 800101e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
  if (NewState != DISABLE)
 8001020:	787b      	ldrb	r3, [r7, #1]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d008      	beq.n	8001038 <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI/I2S DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	889b      	ldrh	r3, [r3, #4]
 800102a:	b29a      	uxth	r2, r3
 800102c:	887b      	ldrh	r3, [r7, #2]
 800102e:	4313      	orrs	r3, r2
 8001030:	b29a      	uxth	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI/I2S DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
  }
}
 8001036:	e009      	b.n	800104c <SPI_I2S_DMACmd+0x3c>
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	889b      	ldrh	r3, [r3, #4]
 800103c:	b29a      	uxth	r2, r3
 800103e:	887b      	ldrh	r3, [r7, #2]
 8001040:	43db      	mvns	r3, r3
 8001042:	b29b      	uxth	r3, r3
 8001044:	4013      	ands	r3, r2
 8001046:	b29a      	uxth	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	809a      	strh	r2, [r3, #4]
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr
	...

08001058 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a2e      	ldr	r2, [pc, #184]	; (8001128 <TIM_TimeBaseInit+0xd0>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d013      	beq.n	800109c <TIM_TimeBaseInit+0x44>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a2d      	ldr	r2, [pc, #180]	; (800112c <TIM_TimeBaseInit+0xd4>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d00f      	beq.n	800109c <TIM_TimeBaseInit+0x44>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001082:	d00b      	beq.n	800109c <TIM_TimeBaseInit+0x44>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a2a      	ldr	r2, [pc, #168]	; (8001130 <TIM_TimeBaseInit+0xd8>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d007      	beq.n	800109c <TIM_TimeBaseInit+0x44>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a29      	ldr	r2, [pc, #164]	; (8001134 <TIM_TimeBaseInit+0xdc>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d003      	beq.n	800109c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a28      	ldr	r2, [pc, #160]	; (8001138 <TIM_TimeBaseInit+0xe0>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d108      	bne.n	80010ae <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 800109c:	89fb      	ldrh	r3, [r7, #14]
 800109e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010a2:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	885a      	ldrh	r2, [r3, #2]
 80010a8:	89fb      	ldrh	r3, [r7, #14]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a22      	ldr	r2, [pc, #136]	; (800113c <TIM_TimeBaseInit+0xe4>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d00c      	beq.n	80010d0 <TIM_TimeBaseInit+0x78>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a21      	ldr	r2, [pc, #132]	; (8001140 <TIM_TimeBaseInit+0xe8>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d008      	beq.n	80010d0 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80010be:	89fb      	ldrh	r3, [r7, #14]
 80010c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010c4:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	88da      	ldrh	r2, [r3, #6]
 80010ca:	89fb      	ldrh	r3, [r7, #14]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	89fa      	ldrh	r2, [r7, #14]
 80010d4:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	889a      	ldrh	r2, [r3, #4]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	881a      	ldrh	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a0f      	ldr	r2, [pc, #60]	; (8001128 <TIM_TimeBaseInit+0xd0>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d00f      	beq.n	800110e <TIM_TimeBaseInit+0xb6>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a0e      	ldr	r2, [pc, #56]	; (800112c <TIM_TimeBaseInit+0xd4>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d00b      	beq.n	800110e <TIM_TimeBaseInit+0xb6>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a12      	ldr	r2, [pc, #72]	; (8001144 <TIM_TimeBaseInit+0xec>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d007      	beq.n	800110e <TIM_TimeBaseInit+0xb6>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a11      	ldr	r2, [pc, #68]	; (8001148 <TIM_TimeBaseInit+0xf0>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d003      	beq.n	800110e <TIM_TimeBaseInit+0xb6>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a10      	ldr	r2, [pc, #64]	; (800114c <TIM_TimeBaseInit+0xf4>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d104      	bne.n	8001118 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	7a1b      	ldrb	r3, [r3, #8]
 8001112:	b29a      	uxth	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2201      	movs	r2, #1
 800111c:	829a      	strh	r2, [r3, #20]
}
 800111e:	bf00      	nop
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	40012c00 	.word	0x40012c00
 800112c:	40013400 	.word	0x40013400
 8001130:	40000400 	.word	0x40000400
 8001134:	40000800 	.word	0x40000800
 8001138:	40000c00 	.word	0x40000c00
 800113c:	40001000 	.word	0x40001000
 8001140:	40001400 	.word	0x40001400
 8001144:	40014000 	.word	0x40014000
 8001148:	40014400 	.word	0x40014400
 800114c:	40014800 	.word	0x40014800

08001150 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  }
  else
  {
    assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d10f      	bne.n	8001182 <TIM_ICInit+0x32>
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	8859      	ldrh	r1, [r3, #2]
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	889a      	ldrh	r2, [r3, #4]
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	891b      	ldrh	r3, [r3, #8]
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 f94e 	bl	8001410 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	88db      	ldrh	r3, [r3, #6]
 8001178:	4619      	mov	r1, r3
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f000 f88c 	bl	8001298 <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8001180:	e036      	b.n	80011f0 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	2b04      	cmp	r3, #4
 8001188:	d10f      	bne.n	80011aa <TIM_ICInit+0x5a>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	8859      	ldrh	r1, [r3, #2]
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	889a      	ldrh	r2, [r3, #4]
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	891b      	ldrh	r3, [r3, #8]
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 f9aa 	bl	80014f0 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	88db      	ldrh	r3, [r3, #6]
 80011a0:	4619      	mov	r1, r3
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f000 f893 	bl	80012ce <TIM_SetIC2Prescaler>
}
 80011a8:	e022      	b.n	80011f0 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	2b08      	cmp	r3, #8
 80011b0:	d10f      	bne.n	80011d2 <TIM_ICInit+0x82>
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	8859      	ldrh	r1, [r3, #2]
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	889a      	ldrh	r2, [r3, #4]
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	891b      	ldrh	r3, [r3, #8]
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f000 fa10 	bl	80015e4 <TI3_Config>
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	88db      	ldrh	r3, [r3, #6]
 80011c8:	4619      	mov	r1, r3
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 f89c 	bl	8001308 <TIM_SetIC3Prescaler>
}
 80011d0:	e00e      	b.n	80011f0 <TIM_ICInit+0xa0>
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	8859      	ldrh	r1, [r3, #2]
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	889a      	ldrh	r2, [r3, #4]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	891b      	ldrh	r3, [r3, #8]
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f000 fa76 	bl	80016d0 <TI4_Config>
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	88db      	ldrh	r3, [r3, #6]
 80011e8:	4619      	mov	r1, r3
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 f8a7 	bl	800133e <TIM_SetIC4Prescaler>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001206:	809a      	strh	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	80da      	strh	r2, [r3, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	721a      	strb	r2, [r3, #8]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr

0800122a <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2201      	movs	r2, #1
 8001242:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	811a      	strh	r2, [r3, #8]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr

0800125a <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800125a:	b480      	push	{r7}
 800125c:	b083      	sub	sp, #12
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
 8001262:	460b      	mov	r3, r1
 8001264:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001266:	78fb      	ldrb	r3, [r7, #3]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d008      	beq.n	800127e <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	b29b      	uxth	r3, r3
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	b29a      	uxth	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 800127c:	e007      	b.n	800128e <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	b29b      	uxth	r3, r3
 8001284:	f023 0301 	bic.w	r3, r3, #1
 8001288:	b29a      	uxth	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	801a      	strh	r2, [r3, #0]
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	8b1b      	ldrh	r3, [r3, #24]
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	f023 030c 	bic.w	r3, r3, #12
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	831a      	strh	r2, [r3, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	8b1b      	ldrh	r3, [r3, #24]
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	887b      	ldrh	r3, [r7, #2]
 80012bc:	4313      	orrs	r3, r2
 80012be:	b29a      	uxth	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	831a      	strh	r2, [r3, #24]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr

080012ce <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	460b      	mov	r3, r1
 80012d8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	8b1b      	ldrh	r3, [r3, #24]
 80012de:	b29b      	uxth	r3, r3
 80012e0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	831a      	strh	r2, [r3, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	8b1b      	ldrh	r3, [r3, #24]
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	887b      	ldrh	r3, [r7, #2]
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	4313      	orrs	r3, r2
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	831a      	strh	r2, [r3, #24]
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	8b9b      	ldrh	r3, [r3, #28]
 8001318:	b29b      	uxth	r3, r3
 800131a:	f023 030c 	bic.w	r3, r3, #12
 800131e:	b29a      	uxth	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	839a      	strh	r2, [r3, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	8b9b      	ldrh	r3, [r3, #28]
 8001328:	b29a      	uxth	r2, r3
 800132a:	887b      	ldrh	r3, [r7, #2]
 800132c:	4313      	orrs	r3, r2
 800132e:	b29a      	uxth	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	839a      	strh	r2, [r3, #28]
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr

0800133e <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	460b      	mov	r3, r1
 8001348:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	8b9b      	ldrh	r3, [r3, #28]
 800134e:	b29b      	uxth	r3, r3
 8001350:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001354:	b29a      	uxth	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	839a      	strh	r2, [r3, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	8b9b      	ldrh	r3, [r3, #28]
 800135e:	b29a      	uxth	r2, r3
 8001360:	887b      	ldrh	r3, [r7, #2]
 8001362:	021b      	lsls	r3, r3, #8
 8001364:	b29b      	uxth	r3, r3
 8001366:	4313      	orrs	r3, r2
 8001368:	b29a      	uxth	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	839a      	strh	r2, [r3, #28]
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001384:	b29b      	uxth	r3, r3
}
 8001386:	4618      	mov	r0, r3
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <TIM_GetCapture2>:
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800139c:	b29b      	uxth	r3, r3
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80013b4:	b29b      	uxth	r3, r3
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr

080013c0 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013ce:	b29b      	uxth	r3, r3
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr

080013da <TIM_GetFlagStatus>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 80013da:	b480      	push	{r7}
 80013dc:	b085      	sub	sp, #20
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
 80013e2:	460b      	mov	r3, r1
 80013e4:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80013e6:	2300      	movs	r3, #0
 80013e8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	8a1b      	ldrh	r3, [r3, #16]
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	887b      	ldrh	r3, [r7, #2]
 80013f2:	4013      	ands	r3, r2
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d002      	beq.n	8001400 <TIM_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80013fa:	2301      	movs	r3, #1
 80013fc:	73fb      	strb	r3, [r7, #15]
 80013fe:	e001      	b.n	8001404 <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8001400:	2300      	movs	r3, #0
 8001402:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001404:	7bfb      	ldrb	r3, [r7, #15]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr

08001410 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001410:	b480      	push	{r7}
 8001412:	b087      	sub	sp, #28
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	4608      	mov	r0, r1
 800141a:	4611      	mov	r1, r2
 800141c:	461a      	mov	r2, r3
 800141e:	4603      	mov	r3, r0
 8001420:	817b      	strh	r3, [r7, #10]
 8001422:	460b      	mov	r3, r1
 8001424:	813b      	strh	r3, [r7, #8]
 8001426:	4613      	mov	r3, r2
 8001428:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	82bb      	strh	r3, [r7, #20]
 800142e:	2300      	movs	r3, #0
 8001430:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	8c1b      	ldrh	r3, [r3, #32]
 8001436:	b29b      	uxth	r3, r3
 8001438:	f023 0301 	bic.w	r3, r3, #1
 800143c:	b29a      	uxth	r2, r3
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	8b1b      	ldrh	r3, [r3, #24]
 8001446:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	8c1b      	ldrh	r3, [r3, #32]
 800144c:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 800144e:	8abb      	ldrh	r3, [r7, #20]
 8001450:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8001454:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001456:	88fb      	ldrh	r3, [r7, #6]
 8001458:	011b      	lsls	r3, r3, #4
 800145a:	b29a      	uxth	r2, r3
 800145c:	893b      	ldrh	r3, [r7, #8]
 800145e:	4313      	orrs	r3, r2
 8001460:	b29a      	uxth	r2, r3
 8001462:	8abb      	ldrh	r3, [r7, #20]
 8001464:	4313      	orrs	r3, r2
 8001466:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4a1c      	ldr	r2, [pc, #112]	; (80014dc <TI1_Config+0xcc>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d013      	beq.n	8001498 <TI1_Config+0x88>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4a1b      	ldr	r2, [pc, #108]	; (80014e0 <TI1_Config+0xd0>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d00f      	beq.n	8001498 <TI1_Config+0x88>
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800147e:	d00b      	beq.n	8001498 <TI1_Config+0x88>
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4a18      	ldr	r2, [pc, #96]	; (80014e4 <TI1_Config+0xd4>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d007      	beq.n	8001498 <TI1_Config+0x88>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4a17      	ldr	r2, [pc, #92]	; (80014e8 <TI1_Config+0xd8>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d003      	beq.n	8001498 <TI1_Config+0x88>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4a16      	ldr	r2, [pc, #88]	; (80014ec <TI1_Config+0xdc>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d10b      	bne.n	80014b0 <TI1_Config+0xa0>
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
 8001498:	8afb      	ldrh	r3, [r7, #22]
 800149a:	f023 0302 	bic.w	r3, r3, #2
 800149e:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80014a0:	897a      	ldrh	r2, [r7, #10]
 80014a2:	8afb      	ldrh	r3, [r7, #22]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	82fb      	strh	r3, [r7, #22]
 80014ae:	e00a      	b.n	80014c6 <TI1_Config+0xb6>
  }
  else
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80014b0:	8afb      	ldrh	r3, [r7, #22]
 80014b2:	f023 030a 	bic.w	r3, r3, #10
 80014b6:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80014b8:	897a      	ldrh	r2, [r7, #10]
 80014ba:	8afb      	ldrh	r3, [r7, #22]
 80014bc:	4313      	orrs	r3, r2
 80014be:	b29b      	uxth	r3, r3
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	82fb      	strh	r3, [r7, #22]
  }

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	8aba      	ldrh	r2, [r7, #20]
 80014ca:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	8afa      	ldrh	r2, [r7, #22]
 80014d0:	841a      	strh	r2, [r3, #32]
}
 80014d2:	bf00      	nop
 80014d4:	371c      	adds	r7, #28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	40012c00 	.word	0x40012c00
 80014e0:	40013400 	.word	0x40013400
 80014e4:	40000400 	.word	0x40000400
 80014e8:	40000800 	.word	0x40000800
 80014ec:	40000c00 	.word	0x40000c00

080014f0 <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b087      	sub	sp, #28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	4608      	mov	r0, r1
 80014fa:	4611      	mov	r1, r2
 80014fc:	461a      	mov	r2, r3
 80014fe:	4603      	mov	r3, r0
 8001500:	817b      	strh	r3, [r7, #10]
 8001502:	460b      	mov	r3, r1
 8001504:	813b      	strh	r3, [r7, #8]
 8001506:	4613      	mov	r3, r2
 8001508:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	82bb      	strh	r3, [r7, #20]
 800150e:	2300      	movs	r3, #0
 8001510:	82fb      	strh	r3, [r7, #22]
 8001512:	2300      	movs	r3, #0
 8001514:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	8c1b      	ldrh	r3, [r3, #32]
 800151a:	b29b      	uxth	r3, r3
 800151c:	f023 0310 	bic.w	r3, r3, #16
 8001520:	b29a      	uxth	r2, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	8b1b      	ldrh	r3, [r3, #24]
 800152a:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	8c1b      	ldrh	r3, [r3, #32]
 8001530:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8001532:	897b      	ldrh	r3, [r7, #10]
 8001534:	011b      	lsls	r3, r3, #4
 8001536:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8001538:	8abb      	ldrh	r3, [r7, #20]
 800153a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800153e:	051b      	lsls	r3, r3, #20
 8001540:	0d1b      	lsrs	r3, r3, #20
 8001542:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8001544:	88fb      	ldrh	r3, [r7, #6]
 8001546:	031b      	lsls	r3, r3, #12
 8001548:	b29a      	uxth	r2, r3
 800154a:	8abb      	ldrh	r3, [r7, #20]
 800154c:	4313      	orrs	r3, r2
 800154e:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001550:	893b      	ldrh	r3, [r7, #8]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	b29a      	uxth	r2, r3
 8001556:	8abb      	ldrh	r3, [r7, #20]
 8001558:	4313      	orrs	r3, r2
 800155a:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4a1c      	ldr	r2, [pc, #112]	; (80015d0 <TI2_Config+0xe0>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d013      	beq.n	800158c <TI2_Config+0x9c>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4a1b      	ldr	r2, [pc, #108]	; (80015d4 <TI2_Config+0xe4>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d00f      	beq.n	800158c <TI2_Config+0x9c>
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001572:	d00b      	beq.n	800158c <TI2_Config+0x9c>
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4a18      	ldr	r2, [pc, #96]	; (80015d8 <TI2_Config+0xe8>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d007      	beq.n	800158c <TI2_Config+0x9c>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4a17      	ldr	r2, [pc, #92]	; (80015dc <TI2_Config+0xec>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d003      	beq.n	800158c <TI2_Config+0x9c>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4a16      	ldr	r2, [pc, #88]	; (80015e0 <TI2_Config+0xf0>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d10b      	bne.n	80015a4 <TI2_Config+0xb4>
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
 800158c:	8afb      	ldrh	r3, [r7, #22]
 800158e:	f023 0320 	bic.w	r3, r3, #32
 8001592:	82fb      	strh	r3, [r7, #22]
    tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001594:	8a7a      	ldrh	r2, [r7, #18]
 8001596:	8afb      	ldrh	r3, [r7, #22]
 8001598:	4313      	orrs	r3, r2
 800159a:	b29b      	uxth	r3, r3
 800159c:	f043 0310 	orr.w	r3, r3, #16
 80015a0:	82fb      	strh	r3, [r7, #22]
 80015a2:	e00a      	b.n	80015ba <TI2_Config+0xca>
  }
  else
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80015a4:	8afb      	ldrh	r3, [r7, #22]
 80015a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80015aa:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
 80015ac:	897a      	ldrh	r2, [r7, #10]
 80015ae:	8afb      	ldrh	r3, [r7, #22]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	f043 0310 	orr.w	r3, r3, #16
 80015b8:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	8aba      	ldrh	r2, [r7, #20]
 80015be:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	8afa      	ldrh	r2, [r7, #22]
 80015c4:	841a      	strh	r2, [r3, #32]
}
 80015c6:	bf00      	nop
 80015c8:	371c      	adds	r7, #28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	40012c00 	.word	0x40012c00
 80015d4:	40013400 	.word	0x40013400
 80015d8:	40000400 	.word	0x40000400
 80015dc:	40000800 	.word	0x40000800
 80015e0:	40000c00 	.word	0x40000c00

080015e4 <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b087      	sub	sp, #28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	4608      	mov	r0, r1
 80015ee:	4611      	mov	r1, r2
 80015f0:	461a      	mov	r2, r3
 80015f2:	4603      	mov	r3, r0
 80015f4:	817b      	strh	r3, [r7, #10]
 80015f6:	460b      	mov	r3, r1
 80015f8:	813b      	strh	r3, [r7, #8]
 80015fa:	4613      	mov	r3, r2
 80015fc:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	82bb      	strh	r3, [r7, #20]
 8001602:	2300      	movs	r3, #0
 8001604:	82fb      	strh	r3, [r7, #22]
 8001606:	2300      	movs	r3, #0
 8001608:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	8c1b      	ldrh	r3, [r3, #32]
 800160e:	b29b      	uxth	r3, r3
 8001610:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001614:	b29a      	uxth	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	8b9b      	ldrh	r3, [r3, #28]
 800161e:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	8c1b      	ldrh	r3, [r3, #32]
 8001624:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8001626:	897b      	ldrh	r3, [r7, #10]
 8001628:	021b      	lsls	r3, r3, #8
 800162a:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 800162c:	8abb      	ldrh	r3, [r7, #20]
 800162e:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8001632:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001634:	88fb      	ldrh	r3, [r7, #6]
 8001636:	011b      	lsls	r3, r3, #4
 8001638:	b29a      	uxth	r2, r3
 800163a:	893b      	ldrh	r3, [r7, #8]
 800163c:	4313      	orrs	r3, r2
 800163e:	b29a      	uxth	r2, r3
 8001640:	8abb      	ldrh	r3, [r7, #20]
 8001642:	4313      	orrs	r3, r2
 8001644:	82bb      	strh	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	4a1c      	ldr	r2, [pc, #112]	; (80016bc <TI3_Config+0xd8>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d013      	beq.n	8001676 <TI3_Config+0x92>
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	4a1b      	ldr	r2, [pc, #108]	; (80016c0 <TI3_Config+0xdc>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d00f      	beq.n	8001676 <TI3_Config+0x92>
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800165c:	d00b      	beq.n	8001676 <TI3_Config+0x92>
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	4a18      	ldr	r2, [pc, #96]	; (80016c4 <TI3_Config+0xe0>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d007      	beq.n	8001676 <TI3_Config+0x92>
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	4a17      	ldr	r2, [pc, #92]	; (80016c8 <TI3_Config+0xe4>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d003      	beq.n	8001676 <TI3_Config+0x92>
     (TIMx == TIM4) ||(TIMx == TIM5))
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4a16      	ldr	r2, [pc, #88]	; (80016cc <TI3_Config+0xe8>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d10b      	bne.n	800168e <TI3_Config+0xaa>
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
 8001676:	8afb      	ldrh	r3, [r7, #22]
 8001678:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800167c:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 800167e:	8a7a      	ldrh	r2, [r7, #18]
 8001680:	8afb      	ldrh	r3, [r7, #22]
 8001682:	4313      	orrs	r3, r2
 8001684:	b29b      	uxth	r3, r3
 8001686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168a:	82fb      	strh	r3, [r7, #22]
 800168c:	e00a      	b.n	80016a4 <TI3_Config+0xc0>
  }
  else
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800168e:	8afb      	ldrh	r3, [r7, #22]
 8001690:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8001694:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
 8001696:	897a      	ldrh	r2, [r7, #10]
 8001698:	8afb      	ldrh	r3, [r7, #22]
 800169a:	4313      	orrs	r3, r2
 800169c:	b29b      	uxth	r3, r3
 800169e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a2:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	8aba      	ldrh	r2, [r7, #20]
 80016a8:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	8afa      	ldrh	r2, [r7, #22]
 80016ae:	841a      	strh	r2, [r3, #32]
}
 80016b0:	bf00      	nop
 80016b2:	371c      	adds	r7, #28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	40012c00 	.word	0x40012c00
 80016c0:	40013400 	.word	0x40013400
 80016c4:	40000400 	.word	0x40000400
 80016c8:	40000800 	.word	0x40000800
 80016cc:	40000c00 	.word	0x40000c00

080016d0 <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b087      	sub	sp, #28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	4608      	mov	r0, r1
 80016da:	4611      	mov	r1, r2
 80016dc:	461a      	mov	r2, r3
 80016de:	4603      	mov	r3, r0
 80016e0:	817b      	strh	r3, [r7, #10]
 80016e2:	460b      	mov	r3, r1
 80016e4:	813b      	strh	r3, [r7, #8]
 80016e6:	4613      	mov	r3, r2
 80016e8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	82bb      	strh	r3, [r7, #20]
 80016ee:	2300      	movs	r3, #0
 80016f0:	82fb      	strh	r3, [r7, #22]
 80016f2:	2300      	movs	r3, #0
 80016f4:	827b      	strh	r3, [r7, #18]

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	8c1b      	ldrh	r3, [r3, #32]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001700:	b29a      	uxth	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	8b9b      	ldrh	r3, [r3, #28]
 800170a:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8c1b      	ldrh	r3, [r3, #32]
 8001710:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8001712:	897b      	ldrh	r3, [r7, #10]
 8001714:	031b      	lsls	r3, r3, #12
 8001716:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 8001718:	8abb      	ldrh	r3, [r7, #20]
 800171a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800171e:	051b      	lsls	r3, r3, #20
 8001720:	0d1b      	lsrs	r3, r3, #20
 8001722:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8001724:	893b      	ldrh	r3, [r7, #8]
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	b29a      	uxth	r2, r3
 800172a:	8abb      	ldrh	r3, [r7, #20]
 800172c:	4313      	orrs	r3, r2
 800172e:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	031b      	lsls	r3, r3, #12
 8001734:	b29a      	uxth	r2, r3
 8001736:	8abb      	ldrh	r3, [r7, #20]
 8001738:	4313      	orrs	r3, r2
 800173a:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4a1d      	ldr	r2, [pc, #116]	; (80017b4 <TI4_Config+0xe4>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d013      	beq.n	800176c <TI4_Config+0x9c>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4a1c      	ldr	r2, [pc, #112]	; (80017b8 <TI4_Config+0xe8>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d00f      	beq.n	800176c <TI4_Config+0x9c>
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001752:	d00b      	beq.n	800176c <TI4_Config+0x9c>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4a19      	ldr	r2, [pc, #100]	; (80017bc <TI4_Config+0xec>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d007      	beq.n	800176c <TI4_Config+0x9c>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4a18      	ldr	r2, [pc, #96]	; (80017c0 <TI4_Config+0xf0>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d003      	beq.n	800176c <TI4_Config+0x9c>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4a17      	ldr	r2, [pc, #92]	; (80017c4 <TI4_Config+0xf4>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d10b      	bne.n	8001784 <TI4_Config+0xb4>
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
 800176c:	8afb      	ldrh	r3, [r7, #22]
 800176e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001772:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8001774:	8a7a      	ldrh	r2, [r7, #18]
 8001776:	8afb      	ldrh	r3, [r7, #22]
 8001778:	4313      	orrs	r3, r2
 800177a:	b29b      	uxth	r3, r3
 800177c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001780:	82fb      	strh	r3, [r7, #22]
 8001782:	e00c      	b.n	800179e <TI4_Config+0xce>
  }
  else
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
 8001784:	8afb      	ldrh	r3, [r7, #22]
 8001786:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800178a:	045b      	lsls	r3, r3, #17
 800178c:	0c5b      	lsrs	r3, r3, #17
 800178e:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
 8001790:	897a      	ldrh	r2, [r7, #10]
 8001792:	8afb      	ldrh	r3, [r7, #22]
 8001794:	4313      	orrs	r3, r2
 8001796:	b29b      	uxth	r3, r3
 8001798:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800179c:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	8aba      	ldrh	r2, [r7, #20]
 80017a2:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8afa      	ldrh	r2, [r7, #22]
 80017a8:	841a      	strh	r2, [r3, #32]
}
 80017aa:	bf00      	nop
 80017ac:	371c      	adds	r7, #28
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	40012c00 	.word	0x40012c00
 80017b8:	40013400 	.word	0x40013400
 80017bc:	40000400 	.word	0x40000400
 80017c0:	40000800 	.word	0x40000800
 80017c4:	40000c00 	.word	0x40000c00

080017c8 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08c      	sub	sp, #48	; 0x30
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80017d2:	2300      	movs	r3, #0
 80017d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017d6:	2300      	movs	r3, #0
 80017d8:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 80017da:	2300      	movs	r3, #0
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 80017de:	2300      	movs	r3, #0
 80017e0:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	8a1b      	ldrh	r3, [r3, #16]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 80017f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017f4:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 80017f8:	4013      	ands	r3, r2
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	88db      	ldrh	r3, [r3, #6]
 8001800:	461a      	mov	r2, r3
 8001802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001804:	4313      	orrs	r3, r2
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800180a:	b29a      	uxth	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	899b      	ldrh	r3, [r3, #12]
 8001814:	b29b      	uxth	r3, r3
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8001818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800181a:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 800181e:	4013      	ands	r3, r2
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	889a      	ldrh	r2, [r3, #4]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	891b      	ldrh	r3, [r3, #8]
 800182a:	4313      	orrs	r3, r2
 800182c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001832:	4313      	orrs	r3, r2
 8001834:	b29b      	uxth	r3, r3
 8001836:	461a      	mov	r2, r3
 8001838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183a:	4313      	orrs	r3, r2
 800183c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800183e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001840:	b29a      	uxth	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	8a9b      	ldrh	r3, [r3, #20]
 800184a:	b29b      	uxth	r3, r3
 800184c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 800184e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001850:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8001854:	4013      	ands	r3, r2
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	899b      	ldrh	r3, [r3, #12]
 800185c:	461a      	mov	r2, r3
 800185e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001860:	4313      	orrs	r3, r2
 8001862:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001866:	b29a      	uxth	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800186c:	f107 0308 	add.w	r3, r7, #8
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fa3d 	bl	8000cf0 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	4a2e      	ldr	r2, [pc, #184]	; (8001934 <USART_Init+0x16c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d102      	bne.n	8001884 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	62bb      	str	r3, [r7, #40]	; 0x28
 8001882:	e001      	b.n	8001888 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	899b      	ldrh	r3, [r3, #12]
 800188c:	b29b      	uxth	r3, r3
 800188e:	b21b      	sxth	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	da0c      	bge.n	80018ae <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001894:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001896:	4613      	mov	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	009a      	lsls	r2, r3, #2
 800189e:	441a      	add	r2, r3
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
 80018ac:	e00b      	b.n	80018c6 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80018ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	009a      	lsls	r2, r3, #2
 80018b8:	441a      	add	r2, r3
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	4a1b      	ldr	r2, [pc, #108]	; (8001938 <USART_Init+0x170>)
 80018ca:	fba2 2303 	umull	r2, r3, r2, r3
 80018ce:	095b      	lsrs	r3, r3, #5
 80018d0:	011b      	lsls	r3, r3, #4
 80018d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80018d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d6:	091b      	lsrs	r3, r3, #4
 80018d8:	2264      	movs	r2, #100	; 0x64
 80018da:	fb02 f303 	mul.w	r3, r2, r3
 80018de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	899b      	ldrh	r3, [r3, #12]
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	b21b      	sxth	r3, r3
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	da0c      	bge.n	800190a <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80018f0:	6a3b      	ldr	r3, [r7, #32]
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	3332      	adds	r3, #50	; 0x32
 80018f6:	4a10      	ldr	r2, [pc, #64]	; (8001938 <USART_Init+0x170>)
 80018f8:	fba2 2303 	umull	r2, r3, r2, r3
 80018fc:	095b      	lsrs	r3, r3, #5
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001904:	4313      	orrs	r3, r2
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001908:	e00b      	b.n	8001922 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800190a:	6a3b      	ldr	r3, [r7, #32]
 800190c:	011b      	lsls	r3, r3, #4
 800190e:	3332      	adds	r3, #50	; 0x32
 8001910:	4a09      	ldr	r2, [pc, #36]	; (8001938 <USART_Init+0x170>)
 8001912:	fba2 2303 	umull	r2, r3, r2, r3
 8001916:	095b      	lsrs	r3, r3, #5
 8001918:	f003 030f 	and.w	r3, r3, #15
 800191c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800191e:	4313      	orrs	r3, r2
 8001920:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8001922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001924:	b29a      	uxth	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	811a      	strh	r2, [r3, #8]
}
 800192a:	bf00      	nop
 800192c:	3730      	adds	r7, #48	; 0x30
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40013800 	.word	0x40013800
 8001938:	51eb851f 	.word	0x51eb851f

0800193c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001948:	78fb      	ldrb	r3, [r7, #3]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d008      	beq.n	8001960 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	899b      	ldrh	r3, [r3, #12]
 8001952:	b29b      	uxth	r3, r3
 8001954:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001958:	b29a      	uxth	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 800195e:	e007      	b.n	8001970 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	899b      	ldrh	r3, [r3, #12]
 8001964:	b29b      	uxth	r3, r3
 8001966:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800196a:	b29a      	uxth	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	819a      	strh	r2, [r3, #12]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr

0800197a <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	460b      	mov	r3, r1
 8001984:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001986:	887b      	ldrh	r3, [r7, #2]
 8001988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800198c:	b29a      	uxth	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	809a      	strh	r2, [r3, #4]
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	889b      	ldrh	r3, [r3, #4]
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019ae:	b29b      	uxth	r3, r3
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr

080019ba <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b085      	sub	sp, #20
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	460b      	mov	r3, r1
 80019c4:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80019c6:	2300      	movs	r3, #0
 80019c8:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	887b      	ldrh	r3, [r7, #2]
 80019d2:	4013      	ands	r3, r2
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d002      	beq.n	80019e0 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80019da:	2301      	movs	r3, #1
 80019dc:	73fb      	strb	r3, [r7, #15]
 80019de:	e001      	b.n	80019e4 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80019e0:	2300      	movs	r3, #0
 80019e2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <_ZN3DMD10WritePixelEtthh>:

/*--------------------------------------------------------------------------------------
 Set or clear a pixel at the x and y location (0,0 is the top left corner)
 --------------------------------------------------------------------------------------*/
void DMD::WritePixel(uint16_t bX, uint16_t bY, uint8_t bGraphicsMode, uint8_t bPixel)
{
 80019f0:	b4f0      	push	{r4, r5, r6, r7}
 80019f2:	f89d 5010 	ldrb.w	r5, [sp, #16]
	uint16_t uiDMDRAMPointer;

	if (bX >= (DMD_PIXELS_ACROSS * m_DisplaysWide) || bY >= (DMD_PIXELS_DOWN * m_DisplaysHigh))
 80019f6:	f890 4114 	ldrb.w	r4, [r0, #276]	; 0x114
 80019fa:	ebb1 1f44 	cmp.w	r1, r4, lsl #5
 80019fe:	da2c      	bge.n	8001a5a <_ZN3DMD10WritePixelEtthh+0x6a>
 8001a00:	f890 6115 	ldrb.w	r6, [r0, #277]	; 0x115
 8001a04:	ebb2 1f06 	cmp.w	r2, r6, lsl #4
 8001a08:	da27      	bge.n	8001a5a <_ZN3DMD10WritePixelEtthh+0x6a>
	{
		return;
	}
	uint8_t panel = (bX / DMD_PIXELS_ACROSS) + (m_DisplaysWide * (bY / DMD_PIXELS_DOWN));
 8001a0a:	f3c1 1647 	ubfx	r6, r1, #5, #8
 8001a0e:	0917      	lsrs	r7, r2, #4
 8001a10:	fb07 f404 	mul.w	r4, r7, r4
 8001a14:	b2e4      	uxtb	r4, r4
 8001a16:	4434      	add	r4, r6
 8001a18:	b2e4      	uxtb	r4, r4
	bX = (bX % DMD_PIXELS_ACROSS) + (panel << 5);
 8001a1a:	f001 011f 	and.w	r1, r1, #31
 8001a1e:	eb01 1144 	add.w	r1, r1, r4, lsl #5
	bY = bY % DMD_PIXELS_DOWN;
 8001a22:	f002 020f 	and.w	r2, r2, #15
	//set pointer to DMD RAM byte to be modified
	uiDMDRAMPointer = bX / 8 + bY * (m_DisplaysTotal << 2);
 8001a26:	f3c1 06cf 	ubfx	r6, r1, #3, #16
 8001a2a:	f890 4116 	ldrb.w	r4, [r0, #278]	; 0x116
 8001a2e:	00a4      	lsls	r4, r4, #2
 8001a30:	fb04 6202 	mla	r2, r4, r2, r6
 8001a34:	b292      	uxth	r2, r2

	uint8_t lookup = bPixelLookupTable[bX & 0x07];
 8001a36:	f001 0107 	and.w	r1, r1, #7
 8001a3a:	4401      	add	r1, r0
 8001a3c:	f891 111f 	ldrb.w	r1, [r1, #287]	; 0x11f

	switch (bGraphicsMode)
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d80a      	bhi.n	8001a5a <_ZN3DMD10WritePixelEtthh+0x6a>
 8001a44:	e8df f003 	tbb	[pc, r3]
 8001a48:	2a1d1103 	.word	0x2a1d1103
 8001a4c:	32          	.byte	0x32
 8001a4d:	00          	.byte	0x00
	{
		case GRAPHICS_NORMAL:
			if (bPixel == true) m_bDMDScreenRAM[uiDMDRAMPointer] &= ~lookup;// zero bit is pixel on
 8001a4e:	2d01      	cmp	r5, #1
 8001a50:	d005      	beq.n	8001a5e <_ZN3DMD10WritePixelEtthh+0x6e>
			else m_bDMDScreenRAM[uiDMDRAMPointer] |= lookup;	// one bit is pixel off
 8001a52:	6800      	ldr	r0, [r0, #0]
 8001a54:	5c83      	ldrb	r3, [r0, r2]
 8001a56:	4319      	orrs	r1, r3
 8001a58:	5481      	strb	r1, [r0, r2]
			if ((bPixel == true) && ((m_bDMDScreenRAM[uiDMDRAMPointer] & lookup) == 0))
				m_bDMDScreenRAM[uiDMDRAMPointer] |= lookup;	// one bit is pixel off
			break;
	}

}
 8001a5a:	bcf0      	pop	{r4, r5, r6, r7}
 8001a5c:	4770      	bx	lr
			if (bPixel == true) m_bDMDScreenRAM[uiDMDRAMPointer] &= ~lookup;// zero bit is pixel on
 8001a5e:	6800      	ldr	r0, [r0, #0]
 8001a60:	5c83      	ldrb	r3, [r0, r2]
 8001a62:	ea23 0101 	bic.w	r1, r3, r1
 8001a66:	5481      	strb	r1, [r0, r2]
 8001a68:	e7f7      	b.n	8001a5a <_ZN3DMD10WritePixelEtthh+0x6a>
			if (bPixel == false) m_bDMDScreenRAM[uiDMDRAMPointer] &= ~lookup;// zero bit is pixel on
 8001a6a:	b92d      	cbnz	r5, 8001a78 <_ZN3DMD10WritePixelEtthh+0x88>
 8001a6c:	6800      	ldr	r0, [r0, #0]
 8001a6e:	5c83      	ldrb	r3, [r0, r2]
 8001a70:	ea23 0101 	bic.w	r1, r3, r1
 8001a74:	5481      	strb	r1, [r0, r2]
 8001a76:	e7f0      	b.n	8001a5a <_ZN3DMD10WritePixelEtthh+0x6a>
			else m_bDMDScreenRAM[uiDMDRAMPointer] |= lookup;	// one bit is pixel off
 8001a78:	6800      	ldr	r0, [r0, #0]
 8001a7a:	5c83      	ldrb	r3, [r0, r2]
 8001a7c:	4319      	orrs	r1, r3
 8001a7e:	5481      	strb	r1, [r0, r2]
 8001a80:	e7eb      	b.n	8001a5a <_ZN3DMD10WritePixelEtthh+0x6a>
			if (bPixel == true)
 8001a82:	2d01      	cmp	r5, #1
 8001a84:	d1e9      	bne.n	8001a5a <_ZN3DMD10WritePixelEtthh+0x6a>
				if ((m_bDMDScreenRAM[uiDMDRAMPointer] & lookup) == 0) m_bDMDScreenRAM[uiDMDRAMPointer] |=
 8001a86:	6800      	ldr	r0, [r0, #0]
 8001a88:	5c83      	ldrb	r3, [r0, r2]
 8001a8a:	4219      	tst	r1, r3
 8001a8c:	d102      	bne.n	8001a94 <_ZN3DMD10WritePixelEtthh+0xa4>
						lookup;	// one bit is pixel off
 8001a8e:	430b      	orrs	r3, r1
				if ((m_bDMDScreenRAM[uiDMDRAMPointer] & lookup) == 0) m_bDMDScreenRAM[uiDMDRAMPointer] |=
 8001a90:	5483      	strb	r3, [r0, r2]
 8001a92:	e7e2      	b.n	8001a5a <_ZN3DMD10WritePixelEtthh+0x6a>
				else m_bDMDScreenRAM[uiDMDRAMPointer] &= ~lookup;	// one bit is pixel off
 8001a94:	ea23 0301 	bic.w	r3, r3, r1
 8001a98:	5483      	strb	r3, [r0, r2]
 8001a9a:	e7de      	b.n	8001a5a <_ZN3DMD10WritePixelEtthh+0x6a>
			if (bPixel == true) m_bDMDScreenRAM[uiDMDRAMPointer] &= ~lookup;// zero bit is pixel on
 8001a9c:	2d01      	cmp	r5, #1
 8001a9e:	d1dc      	bne.n	8001a5a <_ZN3DMD10WritePixelEtthh+0x6a>
 8001aa0:	6800      	ldr	r0, [r0, #0]
 8001aa2:	5c83      	ldrb	r3, [r0, r2]
 8001aa4:	ea23 0101 	bic.w	r1, r3, r1
 8001aa8:	5481      	strb	r1, [r0, r2]
 8001aaa:	e7d6      	b.n	8001a5a <_ZN3DMD10WritePixelEtthh+0x6a>
			if ((bPixel == true) && ((m_bDMDScreenRAM[uiDMDRAMPointer] & lookup) == 0))
 8001aac:	2d01      	cmp	r5, #1
 8001aae:	d1d4      	bne.n	8001a5a <_ZN3DMD10WritePixelEtthh+0x6a>
 8001ab0:	6803      	ldr	r3, [r0, #0]
 8001ab2:	5c98      	ldrb	r0, [r3, r2]
 8001ab4:	4201      	tst	r1, r0
 8001ab6:	d1d0      	bne.n	8001a5a <_ZN3DMD10WritePixelEtthh+0x6a>
				m_bDMDScreenRAM[uiDMDRAMPointer] |= lookup;	// one bit is pixel off
 8001ab8:	4301      	orrs	r1, r0
 8001aba:	5499      	strb	r1, [r3, r2]
 8001abc:	e7cd      	b.n	8001a5a <_ZN3DMD10WritePixelEtthh+0x6a>

08001abe <_ZN3DMD11ClearScreenEh>:

/*--------------------------------------------------------------------------------------
 Clear the screen in DMD RAM
 --------------------------------------------------------------------------------------*/
void DMD::ClearScreen(uint8_t bNormal)
{
 8001abe:	b508      	push	{r3, lr}
	if (bNormal) // clear all pixels
 8001ac0:	b939      	cbnz	r1, 8001ad2 <_ZN3DMD11ClearScreenEh+0x14>
	memset(m_bDMDScreenRAM, 0xFF, DMD_RAM_SIZE_BYTES * m_DisplaysTotal);
	else // set all pixels
	memset(m_bDMDScreenRAM, 0x00, DMD_RAM_SIZE_BYTES * m_DisplaysTotal);
 8001ac2:	f890 2116 	ldrb.w	r2, [r0, #278]	; 0x116
 8001ac6:	0192      	lsls	r2, r2, #6
 8001ac8:	2100      	movs	r1, #0
 8001aca:	6800      	ldr	r0, [r0, #0]
 8001acc:	f001 fc5c 	bl	8003388 <memset>
 8001ad0:	bd08      	pop	{r3, pc}
	memset(m_bDMDScreenRAM, 0xFF, DMD_RAM_SIZE_BYTES * m_DisplaysTotal);
 8001ad2:	f890 2116 	ldrb.w	r2, [r0, #278]	; 0x116
 8001ad6:	0192      	lsls	r2, r2, #6
 8001ad8:	21ff      	movs	r1, #255	; 0xff
 8001ada:	6800      	ldr	r0, [r0, #0]
 8001adc:	f001 fc54 	bl	8003388 <memset>
 8001ae0:	bd08      	pop	{r3, pc}
	...

08001ae4 <_ZN3DMDC1Ehh>:
DMD::DMD(uint8_t panelsWide, uint8_t panelsHigh)
 8001ae4:	b570      	push	{r4, r5, r6, lr}
 8001ae6:	4604      	mov	r4, r0
 8001ae8:	460e      	mov	r6, r1
 8001aea:	4615      	mov	r5, r2
 8001aec:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <_ZN3DMDC1Ehh+0x64>)
 8001aee:	cb03      	ldmia	r3!, {r0, r1}
 8001af0:	f8c4 011f 	str.w	r0, [r4, #287]	; 0x11f
 8001af4:	f8c4 1123 	str.w	r1, [r4, #291]	; 0x123
 8001af8:	f504 70a4 	add.w	r0, r4, #328	; 0x148
 8001afc:	f000 fe90 	bl	8002820 <_ZN8CTimeoutC1Ev>
	m_DisplaysWide = panelsWide;
 8001b00:	f884 6114 	strb.w	r6, [r4, #276]	; 0x114
	m_DisplaysHigh = panelsHigh;
 8001b04:	f884 5115 	strb.w	r5, [r4, #277]	; 0x115
	m_DisplaysTotal = m_DisplaysWide * m_DisplaysHigh;
 8001b08:	fb05 f006 	mul.w	r0, r5, r6
 8001b0c:	b2c0      	uxtb	r0, r0
 8001b0e:	f884 0116 	strb.w	r0, [r4, #278]	; 0x116
	m_row1 = m_DisplaysTotal << 4;
 8001b12:	0103      	lsls	r3, r0, #4
 8001b14:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
	m_row2 = m_DisplaysTotal << 5;
 8001b18:	0143      	lsls	r3, r0, #5
 8001b1a:	f8a4 311a 	strh.w	r3, [r4, #282]	; 0x11a
	m_row3 = ((m_DisplaysTotal << 2) * 3) << 2;
 8001b1e:	00c3      	lsls	r3, r0, #3
 8001b20:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	f8a4 311c 	strh.w	r3, [r4, #284]	; 0x11c
	m_bDMDScreenRAM = (uint8_t *)malloc(m_DisplaysTotal * DMD_RAM_SIZE_BYTES);
 8001b2a:	0180      	lsls	r0, r0, #6
 8001b2c:	f001 fa10 	bl	8002f50 <malloc>
 8001b30:	6020      	str	r0, [r4, #0]
	ClearScreen(true);
 8001b32:	2101      	movs	r1, #1
 8001b34:	4620      	mov	r0, r4
 8001b36:	f7ff ffc2 	bl	8001abe <_ZN3DMD11ClearScreenEh>
	m_bDMDByte = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
	m_State = SBuffering;
 8001b40:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
}
 8001b44:	4620      	mov	r0, r4
 8001b46:	bd70      	pop	{r4, r5, r6, pc}
 8001b48:	0800362c 	.word	0x0800362c

08001b4c <_ZN3DMD4InitEP11SPI_TypeDefP4IDmaP6ITimerP5IGpioS7_S7_S7_t>:
{
 8001b4c:	b570      	push	{r4, r5, r6, lr}
 8001b4e:	4604      	mov	r4, r0
 8001b50:	9d05      	ldr	r5, [sp, #20]
	m_pSpi = pSpi;
 8001b52:	f8c0 1138 	str.w	r1, [r0, #312]	; 0x138
	m_pDma = pDma;
 8001b56:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
	m_timer.Init(pTimer);
 8001b5a:	f500 76a4 	add.w	r6, r0, #328	; 0x148
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4630      	mov	r0, r6
 8001b62:	f000 fe38 	bl	80027d6 <_ZN8CTimeout4InitEP6ITimer>
	m_timer.SetExpiry(refreshRate);
 8001b66:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8001b6a:	4630      	mov	r0, r6
 8001b6c:	f000 fe3f 	bl	80027ee <_ZN8CTimeout9SetExpiryEt>
	m_PinSS = pSS;
 8001b70:	9b04      	ldr	r3, [sp, #16]
 8001b72:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
	m_PinA = pPinA;
 8001b76:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
	m_PinB = pPinB;
 8001b7a:	9b06      	ldr	r3, [sp, #24]
 8001b7c:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
	m_PinOE = pPinOE;
 8001b80:	9b07      	ldr	r3, [sp, #28]
 8001b82:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
	m_PinA->Clear();
 8001b86:	682b      	ldr	r3, [r5, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	4628      	mov	r0, r5
 8001b8c:	4798      	blx	r3
	m_PinB->Clear();
 8001b8e:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 8001b92:	6803      	ldr	r3, [r0, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	4798      	blx	r3
	m_PinOE->Clear();
 8001b98:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
 8001b9c:	6803      	ldr	r3, [r0, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	4798      	blx	r3
	m_pDma->SetDirection(DMA_DIR_PeripheralDST);
 8001ba2:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8001ba6:	6803      	ldr	r3, [r0, #0]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	2110      	movs	r1, #16
 8001bac:	4798      	blx	r3
	ClearScreen(true);
 8001bae:	2101      	movs	r1, #1
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	f7ff ff84 	bl	8001abe <_ZN3DMD11ClearScreenEh>
	m_bDMDByte = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
 8001bbc:	bd70      	pop	{r4, r5, r6, pc}

08001bbe <_ZN3DMD8DrawLineEssssh>:

/*--------------------------------------------------------------------------------------
 Draw or clear a line from x1,y1 to x2,y2
 --------------------------------------------------------------------------------------*/
void DMD::DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t bGraphicsMode)
{
 8001bbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bc2:	b087      	sub	sp, #28
 8001bc4:	9002      	str	r0, [sp, #8]
 8001bc6:	460c      	mov	r4, r1
 8001bc8:	4615      	mov	r5, r2
 8001bca:	469b      	mov	fp, r3
 8001bcc:	f9bd a040 	ldrsh.w	sl, [sp, #64]	; 0x40
 8001bd0:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8001bd4:	9303      	str	r3, [sp, #12]
	int16_t dy = y2 - y1;
 8001bd6:	b292      	uxth	r2, r2
 8001bd8:	ebaa 0002 	sub.w	r0, sl, r2
 8001bdc:	b280      	uxth	r0, r0
 8001bde:	b207      	sxth	r7, r0
	int16_t dx = x2 - x1;
 8001be0:	b289      	uxth	r1, r1
 8001be2:	ebab 0301 	sub.w	r3, fp, r1
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	b21e      	sxth	r6, r3
	int16_t stepx, stepy;

	if (dy < 0)
 8001bea:	2f00      	cmp	r7, #0
 8001bec:	db1b      	blt.n	8001c26 <_ZN3DMD8DrawLineEssssh+0x68>
		dy = -dy;
		stepy = -1;
	}
	else
	{
		stepy = 1;
 8001bee:	f04f 0901 	mov.w	r9, #1
	}
	if (dx < 0)
 8001bf2:	2e00      	cmp	r6, #0
 8001bf4:	db1c      	blt.n	8001c30 <_ZN3DMD8DrawLineEssssh+0x72>
		dx = -dx;
		stepx = -1;
	}
	else
	{
		stepx = 1;
 8001bf6:	f04f 0801 	mov.w	r8, #1
	}
	dy <<= 1;			// dy is now 2*dy
 8001bfa:	007f      	lsls	r7, r7, #1
 8001bfc:	b23b      	sxth	r3, r7
 8001bfe:	9304      	str	r3, [sp, #16]
	dx <<= 1;			// dx is now 2*dx
 8001c00:	0076      	lsls	r6, r6, #1
 8001c02:	b230      	sxth	r0, r6
 8001c04:	9005      	str	r0, [sp, #20]

	WritePixel(x1, y1, bGraphicsMode, true);
 8001c06:	2301      	movs	r3, #1
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	9b03      	ldr	r3, [sp, #12]
 8001c0c:	9802      	ldr	r0, [sp, #8]
 8001c0e:	f7ff feef 	bl	80019f0 <_ZN3DMD10WritePixelEtthh>
	if (dx > dy)
 8001c12:	9b04      	ldr	r3, [sp, #16]
 8001c14:	9805      	ldr	r0, [sp, #20]
 8001c16:	4283      	cmp	r3, r0
 8001c18:	da29      	bge.n	8001c6e <_ZN3DMD8DrawLineEssssh+0xb0>
	{
		int16_t fraction = dy - (dx >> 1);	// same as 2*dy - dx
 8001c1a:	b2bf      	uxth	r7, r7
 8001c1c:	eba7 0a60 	sub.w	sl, r7, r0, asr #1
 8001c20:	fa0f fa8a 	sxth.w	sl, sl
 8001c24:	e017      	b.n	8001c56 <_ZN3DMD8DrawLineEssssh+0x98>
		dy = -dy;
 8001c26:	4247      	negs	r7, r0
 8001c28:	b23f      	sxth	r7, r7
		stepy = -1;
 8001c2a:	f04f 39ff 	mov.w	r9, #4294967295
 8001c2e:	e7e0      	b.n	8001bf2 <_ZN3DMD8DrawLineEssssh+0x34>
		dx = -dx;
 8001c30:	425b      	negs	r3, r3
 8001c32:	b21e      	sxth	r6, r3
		stepx = -1;
 8001c34:	f04f 38ff 	mov.w	r8, #4294967295
 8001c38:	e7df      	b.n	8001bfa <_ZN3DMD8DrawLineEssssh+0x3c>
			if (fraction >= 0)
			{
				y1 += stepy;
				fraction -= dx;	// same as fraction -= 2*dx
			}
			x1 += stepx;
 8001c3a:	eb04 0108 	add.w	r1, r4, r8
 8001c3e:	b289      	uxth	r1, r1
 8001c40:	b20c      	sxth	r4, r1
			fraction += dy;	// same as fraction -= 2*dy
 8001c42:	44ba      	add	sl, r7
 8001c44:	fa0f fa8a 	sxth.w	sl, sl
			WritePixel(x1, y1, bGraphicsMode, true);
 8001c48:	2301      	movs	r3, #1
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	9b03      	ldr	r3, [sp, #12]
 8001c4e:	b2aa      	uxth	r2, r5
 8001c50:	9802      	ldr	r0, [sp, #8]
 8001c52:	f7ff fecd 	bl	80019f0 <_ZN3DMD10WritePixelEtthh>
		while (x1 != x2)
 8001c56:	455c      	cmp	r4, fp
 8001c58:	d026      	beq.n	8001ca8 <_ZN3DMD8DrawLineEssssh+0xea>
			if (fraction >= 0)
 8001c5a:	f1ba 0f00 	cmp.w	sl, #0
 8001c5e:	dbec      	blt.n	8001c3a <_ZN3DMD8DrawLineEssssh+0x7c>
				y1 += stepy;
 8001c60:	444d      	add	r5, r9
 8001c62:	b22d      	sxth	r5, r5
				fraction -= dx;	// same as fraction -= 2*dx
 8001c64:	ebaa 0a06 	sub.w	sl, sl, r6
 8001c68:	fa0f fa8a 	sxth.w	sl, sl
 8001c6c:	e7e5      	b.n	8001c3a <_ZN3DMD8DrawLineEssssh+0x7c>
		}
	}
	else
	{
		int16_t fraction = dx - (dy >> 1);
 8001c6e:	fa1f fb86 	uxth.w	fp, r6
 8001c72:	9b04      	ldr	r3, [sp, #16]
 8001c74:	ebab 0663 	sub.w	r6, fp, r3, asr #1
 8001c78:	b236      	sxth	r6, r6
 8001c7a:	e00c      	b.n	8001c96 <_ZN3DMD8DrawLineEssssh+0xd8>
			if (fraction >= 0)
			{
				x1 += stepx;
				fraction -= dy;
			}
			y1 += stepy;
 8001c7c:	eb05 0209 	add.w	r2, r5, r9
 8001c80:	b292      	uxth	r2, r2
 8001c82:	b215      	sxth	r5, r2
			fraction += dx;
 8001c84:	445e      	add	r6, fp
 8001c86:	b236      	sxth	r6, r6
			WritePixel(x1, y1, bGraphicsMode, true);
 8001c88:	2301      	movs	r3, #1
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	9b03      	ldr	r3, [sp, #12]
 8001c8e:	b2a1      	uxth	r1, r4
 8001c90:	9802      	ldr	r0, [sp, #8]
 8001c92:	f7ff fead 	bl	80019f0 <_ZN3DMD10WritePixelEtthh>
		while (y1 != y2)
 8001c96:	4555      	cmp	r5, sl
 8001c98:	d006      	beq.n	8001ca8 <_ZN3DMD8DrawLineEssssh+0xea>
			if (fraction >= 0)
 8001c9a:	2e00      	cmp	r6, #0
 8001c9c:	dbee      	blt.n	8001c7c <_ZN3DMD8DrawLineEssssh+0xbe>
				x1 += stepx;
 8001c9e:	4444      	add	r4, r8
 8001ca0:	b224      	sxth	r4, r4
				fraction -= dy;
 8001ca2:	1bf6      	subs	r6, r6, r7
 8001ca4:	b236      	sxth	r6, r6
 8001ca6:	e7e9      	b.n	8001c7c <_ZN3DMD8DrawLineEssssh+0xbe>
		}
	}
}
 8001ca8:	b007      	add	sp, #28
 8001caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001cae <_ZN3DMD13DrawFilledBoxEssssh>:

/*--------------------------------------------------------------------------------------
 Draw or clear a filled box(rectangle) with a single pixel border
 --------------------------------------------------------------------------------------*/
void DMD::DrawFilledBox(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t bGraphicsMode)
{
 8001cae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	4681      	mov	r9, r0
 8001cb6:	460c      	mov	r4, r1
 8001cb8:	4690      	mov	r8, r2
 8001cba:	461d      	mov	r5, r3
 8001cbc:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 8001cc0:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
	for (int16_t b = x1; b <= x2; b++)
 8001cc4:	42ac      	cmp	r4, r5
 8001cc6:	dc0a      	bgt.n	8001cde <_ZN3DMD13DrawFilledBoxEssssh+0x30>
	{
		DrawLine(b, y1, b, y2, bGraphicsMode);
 8001cc8:	9601      	str	r6, [sp, #4]
 8001cca:	9700      	str	r7, [sp, #0]
 8001ccc:	4623      	mov	r3, r4
 8001cce:	4642      	mov	r2, r8
 8001cd0:	4621      	mov	r1, r4
 8001cd2:	4648      	mov	r0, r9
 8001cd4:	f7ff ff73 	bl	8001bbe <_ZN3DMD8DrawLineEssssh>
	for (int16_t b = x1; b <= x2; b++)
 8001cd8:	3401      	adds	r4, #1
 8001cda:	b224      	sxth	r4, r4
 8001cdc:	e7f2      	b.n	8001cc4 <_ZN3DMD13DrawFilledBoxEssssh+0x16>
	}
}
 8001cde:	b003      	add	sp, #12
 8001ce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001ce4 <_ZN3DMD7ExecuteEv>:
 Scan the dot matrix LED panel display, from the RAM mirror out to the display hardware.
 Call 4 times to scan the whole display which is made up of 4 interleaved rows within the 16 total rows.
 Insert the calls to this function into the main loop for the highest call rate, or from a timer interrupt
 --------------------------------------------------------------------------------------*/
void DMD::Execute()
{
 8001ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ce6:	4604      	mov	r4, r0

	switch (m_State)
 8001ce8:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
 8001cec:	b113      	cbz	r3, 8001cf4 <_ZN3DMD7ExecuteEv+0x10>
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d06d      	beq.n	8001dce <_ZN3DMD7ExecuteEv+0xea>
 8001cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	{
		case SBuffering:
		{
			if (!m_timer.HasElapsed()) return;
 8001cf4:	f500 75a4 	add.w	r5, r0, #328	; 0x148
 8001cf8:	4628      	mov	r0, r5
 8001cfa:	f000 fd7d 	bl	80027f8 <_ZN8CTimeout10HasElapsedEv>
 8001cfe:	b900      	cbnz	r0, 8001d02 <_ZN3DMD7ExecuteEv+0x1e>
 8001d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			m_timer.SetExpiry((uint16_t)(m_refreshRate * m_brightness));
 8001d02:	f8d4 6144 	ldr.w	r6, [r4, #324]	; 0x144
 8001d06:	f8b4 0140 	ldrh.w	r0, [r4, #320]	; 0x140
 8001d0a:	f7fe fad9 	bl	80002c0 <__aeabi_i2f>
 8001d0e:	4631      	mov	r1, r6
 8001d10:	f7fe fb2a 	bl	8000368 <__aeabi_fmul>
 8001d14:	f7fe fc78 	bl	8000608 <__aeabi_f2uiz>
 8001d18:	b281      	uxth	r1, r0
 8001d1a:	4628      	mov	r0, r5
 8001d1c:	f000 fd67 	bl	80027ee <_ZN8CTimeout9SetExpiryEt>
			//SPI transfer pixels to the display hardware shift registers
			int16_t rowsize = m_DisplaysTotal << 2;
 8001d20:	f894 3116 	ldrb.w	r3, [r4, #278]	; 0x116
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	fa0f fe83 	sxth.w	lr, r3
			int16_t offset = rowsize * m_bDMDByte;
 8001d2a:	f894 711e 	ldrb.w	r7, [r4, #286]	; 0x11e
 8001d2e:	fb07 f703 	mul.w	r7, r7, r3
 8001d32:	b23f      	sxth	r7, r7

			uint16_t size = 0;
			for (int16_t i = 0; i < rowsize; i++)
 8001d34:	2300      	movs	r3, #0
			uint16_t size = 0;
 8001d36:	461d      	mov	r5, r3
			for (int16_t i = 0; i < rowsize; i++)
 8001d38:	4573      	cmp	r3, lr
 8001d3a:	da2a      	bge.n	8001d92 <_ZN3DMD7ExecuteEv+0xae>
			{
				m_dmaCache[size++] = m_bDMDScreenRAM[offset + i + m_row3];
 8001d3c:	1c6a      	adds	r2, r5, #1
 8001d3e:	b292      	uxth	r2, r2
 8001d40:	f8d4 c000 	ldr.w	ip, [r4]
 8001d44:	18fe      	adds	r6, r7, r3
 8001d46:	f9b4 111c 	ldrsh.w	r1, [r4, #284]	; 0x11c
 8001d4a:	4431      	add	r1, r6
 8001d4c:	f81c 0001 	ldrb.w	r0, [ip, r1]
 8001d50:	1961      	adds	r1, r4, r5
 8001d52:	f881 0158 	strb.w	r0, [r1, #344]	; 0x158
				m_dmaCache[size++] = m_bDMDScreenRAM[offset + i + m_row2];
 8001d56:	1ca9      	adds	r1, r5, #2
 8001d58:	b289      	uxth	r1, r1
 8001d5a:	f9b4 011a 	ldrsh.w	r0, [r4, #282]	; 0x11a
 8001d5e:	4430      	add	r0, r6
 8001d60:	f81c 0000 	ldrb.w	r0, [ip, r0]
 8001d64:	4422      	add	r2, r4
 8001d66:	f882 0158 	strb.w	r0, [r2, #344]	; 0x158
				m_dmaCache[size++] = m_bDMDScreenRAM[offset + i + m_row1];
 8001d6a:	1cea      	adds	r2, r5, #3
 8001d6c:	b292      	uxth	r2, r2
 8001d6e:	f9b4 0118 	ldrsh.w	r0, [r4, #280]	; 0x118
 8001d72:	4430      	add	r0, r6
 8001d74:	f81c 0000 	ldrb.w	r0, [ip, r0]
 8001d78:	4421      	add	r1, r4
 8001d7a:	f881 0158 	strb.w	r0, [r1, #344]	; 0x158
				m_dmaCache[size++] = m_bDMDScreenRAM[offset + i];
 8001d7e:	3504      	adds	r5, #4
 8001d80:	b2ad      	uxth	r5, r5
 8001d82:	f81c 1006 	ldrb.w	r1, [ip, r6]
 8001d86:	4422      	add	r2, r4
 8001d88:	f882 1158 	strb.w	r1, [r2, #344]	; 0x158
			for (int16_t i = 0; i < rowsize; i++)
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	b21b      	sxth	r3, r3
 8001d90:	e7d2      	b.n	8001d38 <_ZN3DMD7ExecuteEv+0x54>
			}

			m_pDma->SetAddress((uint32_t)&m_pSpi->DR, (uint32_t)m_dmaCache);
 8001d92:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8001d96:	6803      	ldr	r3, [r0, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 8001d9e:	f504 72ac 	add.w	r2, r4, #344	; 0x158
 8001da2:	310c      	adds	r1, #12
 8001da4:	4798      	blx	r3
			m_pDma->SetBufferSize(size);
 8001da6:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8001daa:	6803      	ldr	r3, [r0, #0]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	4629      	mov	r1, r5
 8001db0:	4798      	blx	r3
			m_PinSS->Clear(); // chip select low
 8001db2:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
 8001db6:	6803      	ldr	r3, [r0, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	4798      	blx	r3
			m_pDma->Start();
 8001dbc:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8001dc0:	6803      	ldr	r3, [r0, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4798      	blx	r3
			m_State = STransmitting;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
		}
			break;
 8001dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

		case STransmitting:
		{
			if (!m_timer.HasElapsed()) return;
 8001dce:	f500 75a4 	add.w	r5, r0, #328	; 0x148
 8001dd2:	4628      	mov	r0, r5
 8001dd4:	f000 fd10 	bl	80027f8 <_ZN8CTimeout10HasElapsedEv>
 8001dd8:	2800      	cmp	r0, #0
 8001dda:	d091      	beq.n	8001d00 <_ZN3DMD7ExecuteEv+0x1c>
			m_timer.SetExpiry((uint16_t)(m_refreshRate * (1 - m_brightness)));
 8001ddc:	f8b4 7140 	ldrh.w	r7, [r4, #320]	; 0x140
 8001de0:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
 8001de4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001de8:	f7fe f9b4 	bl	8000154 <__aeabi_fsub>
 8001dec:	4606      	mov	r6, r0
 8001dee:	4638      	mov	r0, r7
 8001df0:	f7fe fa66 	bl	80002c0 <__aeabi_i2f>
 8001df4:	4631      	mov	r1, r6
 8001df6:	f7fe fab7 	bl	8000368 <__aeabi_fmul>
 8001dfa:	f7fe fc05 	bl	8000608 <__aeabi_f2uiz>
 8001dfe:	b281      	uxth	r1, r0
 8001e00:	4628      	mov	r0, r5
 8001e02:	f000 fcf4 	bl	80027ee <_ZN8CTimeout9SetExpiryEt>
			if (!m_pDma->IsTransferFinished()) return;
 8001e06:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8001e0a:	6803      	ldr	r3, [r0, #0]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	4798      	blx	r3
 8001e10:	2800      	cmp	r0, #0
 8001e12:	f43f af75 	beq.w	8001d00 <_ZN3DMD7ExecuteEv+0x1c>
			m_pDma->Stop();
 8001e16:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8001e1a:	6803      	ldr	r3, [r0, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	4798      	blx	r3
			m_PinOE->Clear(); // turn off the display first
 8001e20:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
 8001e24:	6803      	ldr	r3, [r0, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	4798      	blx	r3
			m_PinSS->Set(); // latch the transfered data
 8001e2a:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
 8001e2e:	6803      	ldr	r3, [r0, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4798      	blx	r3
			switch (m_bDMDByte)
 8001e34:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b03      	cmp	r3, #3
 8001e3c:	d810      	bhi.n	8001e60 <_ZN3DMD7ExecuteEv+0x17c>
 8001e3e:	e8df f003 	tbb	[pc, r3]
 8001e42:	1802      	.short	0x1802
 8001e44:	3426      	.short	0x3426
	//DMD I/O pin macros
	inline void LIGHT_DMD_ROW_01_05_09_13()
	{
//		digitalWrite( PIN_DMD_B, LOW);
//		digitalWrite( PIN_DMD_A, LOW);
		m_PinB->Clear();
 8001e46:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 8001e4a:	6803      	ldr	r3, [r0, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	4798      	blx	r3
		m_PinA->Clear();
 8001e50:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 8001e54:	6803      	ldr	r3, [r0, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	4798      	blx	r3
			{
				case 0:			// row 1, 5, 9, 13 were clocked out
					LIGHT_DMD_ROW_01_05_09_13();
					m_bDMDByte = 1;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
				case 3:			// row 4, 8, 12, 16 were clocked out
					LIGHT_DMD_ROW_04_08_12_16();
					m_bDMDByte = 0;
					break;
			}
			m_PinOE->Set(); // turn on the display again
 8001e60:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
 8001e64:	6803      	ldr	r3, [r0, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4798      	blx	r3
			m_State = SBuffering;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
		}
			break;
 8001e70:	e746      	b.n	8001d00 <_ZN3DMD7ExecuteEv+0x1c>
	}
	inline void LIGHT_DMD_ROW_02_06_10_14()
	{
//		digitalWrite( PIN_DMD_B, LOW);
//		digitalWrite( PIN_DMD_A, HIGH);
		m_PinB->Clear();
 8001e72:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 8001e76:	6803      	ldr	r3, [r0, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	4798      	blx	r3
		m_PinA->Set();
 8001e7c:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 8001e80:	6803      	ldr	r3, [r0, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4798      	blx	r3
					m_bDMDByte = 2;
 8001e86:	2302      	movs	r3, #2
 8001e88:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
					break;
 8001e8c:	e7e8      	b.n	8001e60 <_ZN3DMD7ExecuteEv+0x17c>
	}
	inline void LIGHT_DMD_ROW_03_07_11_15()
	{
//		digitalWrite( PIN_DMD_B, HIGH);
//		digitalWrite( PIN_DMD_A, LOW);
		m_PinB->Set();
 8001e8e:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 8001e92:	6803      	ldr	r3, [r0, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4798      	blx	r3
		m_PinA->Clear();
 8001e98:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 8001e9c:	6803      	ldr	r3, [r0, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	4798      	blx	r3
					m_bDMDByte = 3;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
					break;
 8001ea8:	e7da      	b.n	8001e60 <_ZN3DMD7ExecuteEv+0x17c>
	}
	inline void LIGHT_DMD_ROW_04_08_12_16()
	{
//		digitalWrite( PIN_DMD_B, HIGH);
//		digitalWrite( PIN_DMD_A, HIGH);
		m_PinB->Set();
 8001eaa:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 8001eae:	6803      	ldr	r3, [r0, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4798      	blx	r3
		m_PinA->Set();
 8001eb4:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 8001eb8:	6803      	ldr	r3, [r0, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4798      	blx	r3
					m_bDMDByte = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
					break;
 8001ec4:	e7cc      	b.n	8001e60 <_ZN3DMD7ExecuteEv+0x17c>

08001ec6 <_ZN3DMD10SelectFontEPKh>:
	m_refreshRate = refreshRate;
}

void DMD::SelectFont(const uint8_t * font)
{
	this->m_pFont = font;
 8001ec6:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
 8001eca:	4770      	bx	lr

08001ecc <_ZN3DMD9CharWidthEh>:

int16_t DMD::CharWidth(const unsigned char letter)
{
	unsigned char c = letter;
	// Space is often not included in font so use width of 'n'
	if (c == ' ') c = 'n';
 8001ecc:	2920      	cmp	r1, #32
 8001ece:	d010      	beq.n	8001ef2 <_ZN3DMD9CharWidthEh+0x26>
	uint8_t width = 0;

	uint8_t firstChar = *(m_pFont + FONT_FIRST_CHAR);
 8001ed0:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8001ed4:	791a      	ldrb	r2, [r3, #4]
	uint8_t charCount = *(m_pFont + FONT_CHAR_COUNT);
 8001ed6:	7958      	ldrb	r0, [r3, #5]

	if (c < firstChar || c >= (firstChar + charCount))
 8001ed8:	4291      	cmp	r1, r2
 8001eda:	db10      	blt.n	8001efe <_ZN3DMD9CharWidthEh+0x32>
 8001edc:	4410      	add	r0, r2
 8001ede:	4281      	cmp	r1, r0
 8001ee0:	da0f      	bge.n	8001f02 <_ZN3DMD9CharWidthEh+0x36>
	{
		return 0;
	}
	c -= firstChar;
 8001ee2:	1a89      	subs	r1, r1, r2
 8001ee4:	b2c9      	uxtb	r1, r1

	if (*(m_pFont + FONT_LENGTH) == 0 && *(m_pFont + FONT_LENGTH + 1) == 0)
 8001ee6:	781a      	ldrb	r2, [r3, #0]
 8001ee8:	b92a      	cbnz	r2, 8001ef6 <_ZN3DMD9CharWidthEh+0x2a>
 8001eea:	785a      	ldrb	r2, [r3, #1]
 8001eec:	b91a      	cbnz	r2, 8001ef6 <_ZN3DMD9CharWidthEh+0x2a>
	{
		// zero length is flag indicating fixed width font (array does not contain width data entries)
		width = *(m_pFont + FONT_FIXED_WIDTH);
 8001eee:	7898      	ldrb	r0, [r3, #2]
 8001ef0:	e003      	b.n	8001efa <_ZN3DMD9CharWidthEh+0x2e>
	if (c == ' ') c = 'n';
 8001ef2:	216e      	movs	r1, #110	; 0x6e
 8001ef4:	e7ec      	b.n	8001ed0 <_ZN3DMD9CharWidthEh+0x4>
	}
	else
	{
		// variable width font, read width data
		width = *(m_pFont + FONT_WIDTH_TABLE + c);
 8001ef6:	3106      	adds	r1, #6
 8001ef8:	5c58      	ldrb	r0, [r3, r1]
	}
	return width;
 8001efa:	b200      	sxth	r0, r0
 8001efc:	4770      	bx	lr
		return 0;
 8001efe:	2000      	movs	r0, #0
 8001f00:	4770      	bx	lr
 8001f02:	2000      	movs	r0, #0
}
 8001f04:	4770      	bx	lr

08001f06 <_ZN3DMD8DrawCharEsshh>:
{
 8001f06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f0a:	b08b      	sub	sp, #44	; 0x2c
 8001f0c:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8001f10:	9404      	str	r4, [sp, #16]
	if (bX > (DMD_PIXELS_ACROSS * m_DisplaysWide) || bY > (DMD_PIXELS_DOWN * m_DisplaysHigh))
 8001f12:	f890 4114 	ldrb.w	r4, [r0, #276]	; 0x114
 8001f16:	ebb1 1f44 	cmp.w	r1, r4, lsl #5
 8001f1a:	f300 80c3 	bgt.w	80020a4 <_ZN3DMD8DrawCharEsshh+0x19e>
 8001f1e:	f890 4115 	ldrb.w	r4, [r0, #277]	; 0x115
 8001f22:	ebb2 1f04 	cmp.w	r2, r4, lsl #4
 8001f26:	f300 80c1 	bgt.w	80020ac <_ZN3DMD8DrawCharEsshh+0x1a6>
 8001f2a:	9203      	str	r2, [sp, #12]
 8001f2c:	9102      	str	r1, [sp, #8]
 8001f2e:	4682      	mov	sl, r0
	uint8_t height = *(m_pFont + FONT_HEIGHT);
 8001f30:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
 8001f34:	78c2      	ldrb	r2, [r0, #3]
 8001f36:	9208      	str	r2, [sp, #32]
	if (c == ' ')
 8001f38:	2b20      	cmp	r3, #32
 8001f3a:	d021      	beq.n	8001f80 <_ZN3DMD8DrawCharEsshh+0x7a>
	uint8_t bytes = (height + 7) / 8;
 8001f3c:	9a08      	ldr	r2, [sp, #32]
 8001f3e:	4690      	mov	r8, r2
 8001f40:	3207      	adds	r2, #7
 8001f42:	10d2      	asrs	r2, r2, #3
 8001f44:	9206      	str	r2, [sp, #24]
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	4615      	mov	r5, r2
 8001f4a:	9209      	str	r2, [sp, #36]	; 0x24
	uint8_t firstChar = *(m_pFont + FONT_FIRST_CHAR);
 8001f4c:	7901      	ldrb	r1, [r0, #4]
	uint8_t charCount = *(m_pFont + FONT_CHAR_COUNT);
 8001f4e:	7944      	ldrb	r4, [r0, #5]
	if (c < firstChar || c >= (firstChar + charCount)) return 0;
 8001f50:	428b      	cmp	r3, r1
 8001f52:	f2c0 80af 	blt.w	80020b4 <_ZN3DMD8DrawCharEsshh+0x1ae>
 8001f56:	1862      	adds	r2, r4, r1
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	f280 80b1 	bge.w	80020c0 <_ZN3DMD8DrawCharEsshh+0x1ba>
	c -= firstChar;
 8001f5e:	1a5b      	subs	r3, r3, r1
 8001f60:	b2d9      	uxtb	r1, r3
	if (*(m_pFont + FONT_LENGTH) == 0 && *(m_pFont + FONT_LENGTH + 1) == 0)
 8001f62:	7803      	ldrb	r3, [r0, #0]
 8001f64:	bb1b      	cbnz	r3, 8001fae <_ZN3DMD8DrawCharEsshh+0xa8>
 8001f66:	7843      	ldrb	r3, [r0, #1]
 8001f68:	bb63      	cbnz	r3, 8001fc4 <_ZN3DMD8DrawCharEsshh+0xbe>
		width = *(m_pFont + FONT_FIXED_WIDTH);
 8001f6a:	7883      	ldrb	r3, [r0, #2]
		index = c * bytes * width + FONT_WIDTH_TABLE;
 8001f6c:	462a      	mov	r2, r5
 8001f6e:	fb01 f202 	mul.w	r2, r1, r2
 8001f72:	fb02 f203 	mul.w	r2, r2, r3
 8001f76:	b292      	uxth	r2, r2
 8001f78:	3206      	adds	r2, #6
 8001f7a:	b292      	uxth	r2, r2
 8001f7c:	9207      	str	r2, [sp, #28]
 8001f7e:	e02f      	b.n	8001fe0 <_ZN3DMD8DrawCharEsshh+0xda>
		int16_t charWide = CharWidth(' ');
 8001f80:	2120      	movs	r1, #32
 8001f82:	4650      	mov	r0, sl
 8001f84:	f7ff ffa2 	bl	8001ecc <_ZN3DMD9CharWidthEh>
 8001f88:	4604      	mov	r4, r0
		this->DrawFilledBox(bX, bY, bX + charWide, bY + height, GRAPHICS_INVERSE);
 8001f8a:	9802      	ldr	r0, [sp, #8]
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	4423      	add	r3, r4
 8001f90:	9a08      	ldr	r2, [sp, #32]
 8001f92:	9d03      	ldr	r5, [sp, #12]
 8001f94:	442a      	add	r2, r5
 8001f96:	b212      	sxth	r2, r2
 8001f98:	2101      	movs	r1, #1
 8001f9a:	9101      	str	r1, [sp, #4]
 8001f9c:	9200      	str	r2, [sp, #0]
 8001f9e:	b21b      	sxth	r3, r3
 8001fa0:	462a      	mov	r2, r5
 8001fa2:	4601      	mov	r1, r0
 8001fa4:	4650      	mov	r0, sl
 8001fa6:	f7ff fe82 	bl	8001cae <_ZN3DMD13DrawFilledBoxEssssh>
		return charWide;
 8001faa:	9405      	str	r4, [sp, #20]
 8001fac:	e084      	b.n	80020b8 <_ZN3DMD8DrawCharEsshh+0x1b2>
 8001fae:	2200      	movs	r2, #0
 8001fb0:	4613      	mov	r3, r2
		for (uint8_t i = 0; i < c; i++)
 8001fb2:	428a      	cmp	r2, r1
 8001fb4:	da09      	bge.n	8001fca <_ZN3DMD8DrawCharEsshh+0xc4>
			index += *(m_pFont + FONT_WIDTH_TABLE + i);
 8001fb6:	1d95      	adds	r5, r2, #6
 8001fb8:	5d45      	ldrb	r5, [r0, r5]
 8001fba:	442b      	add	r3, r5
 8001fbc:	b29b      	uxth	r3, r3
		for (uint8_t i = 0; i < c; i++)
 8001fbe:	3201      	adds	r2, #1
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	e7f6      	b.n	8001fb2 <_ZN3DMD8DrawCharEsshh+0xac>
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	e7f3      	b.n	8001fb2 <_ZN3DMD8DrawCharEsshh+0xac>
		index = index * bytes + charCount + FONT_WIDTH_TABLE;
 8001fca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001fcc:	fb02 f303 	mul.w	r3, r2, r3
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	4423      	add	r3, r4
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	3306      	adds	r3, #6
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	9307      	str	r3, [sp, #28]
		width = *(m_pFont + FONT_WIDTH_TABLE + c);
 8001fdc:	3106      	adds	r1, #6
 8001fde:	5c43      	ldrb	r3, [r0, r1]
	if (bX < -width || bY < -height) return width;
 8001fe0:	9305      	str	r3, [sp, #20]
 8001fe2:	425b      	negs	r3, r3
 8001fe4:	9a02      	ldr	r2, [sp, #8]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	db66      	blt.n	80020b8 <_ZN3DMD8DrawCharEsshh+0x1b2>
 8001fea:	9b08      	ldr	r3, [sp, #32]
 8001fec:	425b      	negs	r3, r3
 8001fee:	9a03      	ldr	r2, [sp, #12]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	db61      	blt.n	80020b8 <_ZN3DMD8DrawCharEsshh+0x1b2>
 8001ff4:	f04f 0900 	mov.w	r9, #0
 8001ff8:	e04d      	b.n	8002096 <_ZN3DMD8DrawCharEsshh+0x190>
			if ((i == bytes - 1) && bytes > 1)
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	dd45      	ble.n	800208a <_ZN3DMD8DrawCharEsshh+0x184>
				offset = height - 8;
 8001ffe:	9b08      	ldr	r3, [sp, #32]
 8002000:	f1a3 0508 	sub.w	r5, r3, #8
 8002004:	e041      	b.n	800208a <_ZN3DMD8DrawCharEsshh+0x184>
						WritePixel(bX + j, bY + offset + k, bGraphicsMode, false);
 8002006:	9b02      	ldr	r3, [sp, #8]
 8002008:	eb09 0103 	add.w	r1, r9, r3
 800200c:	9b03      	ldr	r3, [sp, #12]
 800200e:	195a      	adds	r2, r3, r5
 8002010:	b292      	uxth	r2, r2
 8002012:	4422      	add	r2, r4
 8002014:	2300      	movs	r3, #0
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	9b04      	ldr	r3, [sp, #16]
 800201a:	b292      	uxth	r2, r2
 800201c:	b289      	uxth	r1, r1
 800201e:	4650      	mov	r0, sl
 8002020:	f7ff fce6 	bl	80019f0 <_ZN3DMD10WritePixelEtthh>
			for (uint8_t k = 0; k < 8; k++)
 8002024:	3401      	adds	r4, #1
 8002026:	b2e4      	uxtb	r4, r4
 8002028:	2c07      	cmp	r4, #7
 800202a:	dc1a      	bgt.n	8002062 <_ZN3DMD8DrawCharEsshh+0x15c>
				if ((offset + k >= i * 8) && (offset + k <= height))
 800202c:	192b      	adds	r3, r5, r4
 800202e:	ebb3 0fc7 	cmp.w	r3, r7, lsl #3
 8002032:	dbf7      	blt.n	8002024 <_ZN3DMD8DrawCharEsshh+0x11e>
 8002034:	4598      	cmp	r8, r3
 8002036:	dbf5      	blt.n	8002024 <_ZN3DMD8DrawCharEsshh+0x11e>
					if (data & (1 << k))
 8002038:	fa4b f204 	asr.w	r2, fp, r4
 800203c:	f012 0f01 	tst.w	r2, #1
 8002040:	d0e1      	beq.n	8002006 <_ZN3DMD8DrawCharEsshh+0x100>
						WritePixel(bX + j, bY + offset + k, bGraphicsMode, true);
 8002042:	9b02      	ldr	r3, [sp, #8]
 8002044:	eb09 0103 	add.w	r1, r9, r3
 8002048:	9b03      	ldr	r3, [sp, #12]
 800204a:	195a      	adds	r2, r3, r5
 800204c:	b292      	uxth	r2, r2
 800204e:	4422      	add	r2, r4
 8002050:	2301      	movs	r3, #1
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	9b04      	ldr	r3, [sp, #16]
 8002056:	b292      	uxth	r2, r2
 8002058:	b289      	uxth	r1, r1
 800205a:	4650      	mov	r0, sl
 800205c:	f7ff fcc8 	bl	80019f0 <_ZN3DMD10WritePixelEtthh>
 8002060:	e7e0      	b.n	8002024 <_ZN3DMD8DrawCharEsshh+0x11e>
		for (uint8_t i = bytes - 1; i < 254; i--)
 8002062:	3e01      	subs	r6, #1
 8002064:	b2f6      	uxtb	r6, r6
 8002066:	4637      	mov	r7, r6
 8002068:	2efd      	cmp	r6, #253	; 0xfd
 800206a:	dc10      	bgt.n	800208e <_ZN3DMD8DrawCharEsshh+0x188>
			uint8_t data = *(m_pFont + index + j + (i * width));
 800206c:	f8da 2110 	ldr.w	r2, [sl, #272]	; 0x110
 8002070:	9b07      	ldr	r3, [sp, #28]
 8002072:	444b      	add	r3, r9
 8002074:	9905      	ldr	r1, [sp, #20]
 8002076:	fb06 3301 	mla	r3, r6, r1, r3
 800207a:	f812 b003 	ldrb.w	fp, [r2, r3]
			int16_t offset = (i * 8);
 800207e:	00f5      	lsls	r5, r6, #3
 8002080:	f89d 3018 	ldrb.w	r3, [sp, #24]
			if ((i == bytes - 1) && bytes > 1)
 8002084:	1e5a      	subs	r2, r3, #1
 8002086:	4296      	cmp	r6, r2
 8002088:	d0b7      	beq.n	8001ffa <_ZN3DMD8DrawCharEsshh+0xf4>
			for (uint8_t k = 0; k < 8; k++)
 800208a:	2400      	movs	r4, #0
 800208c:	e7cc      	b.n	8002028 <_ZN3DMD8DrawCharEsshh+0x122>
	for (uint8_t j = 0; j < width; j++)
 800208e:	f109 0901 	add.w	r9, r9, #1
 8002092:	fa5f f989 	uxtb.w	r9, r9
 8002096:	9b05      	ldr	r3, [sp, #20]
 8002098:	454b      	cmp	r3, r9
 800209a:	dd0d      	ble.n	80020b8 <_ZN3DMD8DrawCharEsshh+0x1b2>
		for (uint8_t i = bytes - 1; i < 254; i--)
 800209c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800209e:	1e5e      	subs	r6, r3, #1
 80020a0:	b2f6      	uxtb	r6, r6
 80020a2:	e7e0      	b.n	8002066 <_ZN3DMD8DrawCharEsshh+0x160>
		return -1;
 80020a4:	f04f 33ff 	mov.w	r3, #4294967295
 80020a8:	9305      	str	r3, [sp, #20]
 80020aa:	e005      	b.n	80020b8 <_ZN3DMD8DrawCharEsshh+0x1b2>
 80020ac:	f04f 33ff 	mov.w	r3, #4294967295
 80020b0:	9305      	str	r3, [sp, #20]
 80020b2:	e001      	b.n	80020b8 <_ZN3DMD8DrawCharEsshh+0x1b2>
	if (c < firstChar || c >= (firstChar + charCount)) return 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	9305      	str	r3, [sp, #20]
}
 80020b8:	9805      	ldr	r0, [sp, #20]
 80020ba:	b00b      	add	sp, #44	; 0x2c
 80020bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (c < firstChar || c >= (firstChar + charCount)) return 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	9305      	str	r3, [sp, #20]
 80020c4:	e7f8      	b.n	80020b8 <_ZN3DMD8DrawCharEsshh+0x1b2>

080020c6 <_ZN3DMD10DrawStringEssPKchh>:
{
 80020c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020ca:	b087      	sub	sp, #28
 80020cc:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
 80020d0:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	if (bX >= (DMD_PIXELS_ACROSS * m_DisplaysWide) || bY >= DMD_PIXELS_DOWN * m_DisplaysHigh)
 80020d4:	f890 4114 	ldrb.w	r4, [r0, #276]	; 0x114
 80020d8:	ebb1 1f44 	cmp.w	r1, r4, lsl #5
 80020dc:	da56      	bge.n	800218c <_ZN3DMD10DrawStringEssPKchh+0xc6>
 80020de:	468b      	mov	fp, r1
 80020e0:	9203      	str	r2, [sp, #12]
 80020e2:	f890 4115 	ldrb.w	r4, [r0, #277]	; 0x115
 80020e6:	ebb2 1f04 	cmp.w	r2, r4, lsl #4
 80020ea:	da4f      	bge.n	800218c <_ZN3DMD10DrawStringEssPKchh+0xc6>
	uint8_t height = *(m_pFont + FONT_HEIGHT);
 80020ec:	f8d0 4110 	ldr.w	r4, [r0, #272]	; 0x110
 80020f0:	78e4      	ldrb	r4, [r4, #3]
	if (bY + height < 0) return;
 80020f2:	42d4      	cmn	r4, r2
 80020f4:	d44a      	bmi.n	800218c <_ZN3DMD10DrawStringEssPKchh+0xc6>
 80020f6:	461d      	mov	r5, r3
 80020f8:	9202      	str	r2, [sp, #8]
 80020fa:	4607      	mov	r7, r0
	this->DrawLine(bX - 1, bY, bX - 1, bY + height, GRAPHICS_INVERSE);
 80020fc:	fa1f f881 	uxth.w	r8, r1
 8002100:	f108 31ff 	add.w	r1, r8, #4294967295
 8002104:	b209      	sxth	r1, r1
 8002106:	4414      	add	r4, r2
 8002108:	b220      	sxth	r0, r4
 800210a:	9005      	str	r0, [sp, #20]
 800210c:	2301      	movs	r3, #1
 800210e:	9301      	str	r3, [sp, #4]
 8002110:	9000      	str	r0, [sp, #0]
 8002112:	460b      	mov	r3, r1
 8002114:	4638      	mov	r0, r7
 8002116:	f7ff fd52 	bl	8001bbe <_ZN3DMD8DrawLineEssssh>
	for (int16_t i = 0; i < length; i++)
 800211a:	2600      	movs	r6, #0
	int16_t strWidth = 0;
 800211c:	4634      	mov	r4, r6
 800211e:	f8cd a010 	str.w	sl, [sp, #16]
 8002122:	46aa      	mov	sl, r5
 8002124:	e010      	b.n	8002148 <_ZN3DMD10DrawStringEssPKchh+0x82>
		else if (charWide < 0)
 8002126:	2b00      	cmp	r3, #0
 8002128:	db30      	blt.n	800218c <_ZN3DMD10DrawStringEssPKchh+0xc6>
		if ((bX + strWidth) >= DMD_PIXELS_ACROSS * m_DisplaysWide
 800212a:	eb04 030b 	add.w	r3, r4, fp
 800212e:	f897 2114 	ldrb.w	r2, [r7, #276]	; 0x114
 8002132:	ebb3 1f42 	cmp.w	r3, r2, lsl #5
 8002136:	da29      	bge.n	800218c <_ZN3DMD10DrawStringEssPKchh+0xc6>
				|| bY >= DMD_PIXELS_DOWN * m_DisplaysHigh) return;
 8002138:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800213c:	9a03      	ldr	r2, [sp, #12]
 800213e:	ebb2 1f03 	cmp.w	r2, r3, lsl #4
 8002142:	da23      	bge.n	800218c <_ZN3DMD10DrawStringEssPKchh+0xc6>
	for (int16_t i = 0; i < length; i++)
 8002144:	3601      	adds	r6, #1
 8002146:	b236      	sxth	r6, r6
 8002148:	454e      	cmp	r6, r9
 800214a:	da1f      	bge.n	800218c <_ZN3DMD10DrawStringEssPKchh+0xc6>
		int16_t charWide = this->DrawChar(bX + strWidth, bY, bChars[i], bGraphicsMode);
 800214c:	b2a5      	uxth	r5, r4
 800214e:	eb08 0105 	add.w	r1, r8, r5
 8002152:	f81a 3006 	ldrb.w	r3, [sl, r6]
 8002156:	9a04      	ldr	r2, [sp, #16]
 8002158:	9200      	str	r2, [sp, #0]
 800215a:	9a02      	ldr	r2, [sp, #8]
 800215c:	b209      	sxth	r1, r1
 800215e:	4638      	mov	r0, r7
 8002160:	f7ff fed1 	bl	8001f06 <_ZN3DMD8DrawCharEsshh>
 8002164:	b203      	sxth	r3, r0
		if (charWide > 0)
 8002166:	2b00      	cmp	r3, #0
 8002168:	dddd      	ble.n	8002126 <_ZN3DMD10DrawStringEssPKchh+0x60>
			strWidth += charWide;
 800216a:	4405      	add	r5, r0
 800216c:	b2ad      	uxth	r5, r5
			this->DrawLine(bX + strWidth, bY, bX + strWidth, bY + height, GRAPHICS_INVERSE);
 800216e:	eb08 0105 	add.w	r1, r8, r5
 8002172:	b209      	sxth	r1, r1
 8002174:	2301      	movs	r3, #1
 8002176:	9301      	str	r3, [sp, #4]
 8002178:	9b05      	ldr	r3, [sp, #20]
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	460b      	mov	r3, r1
 800217e:	9a02      	ldr	r2, [sp, #8]
 8002180:	4638      	mov	r0, r7
 8002182:	f7ff fd1c 	bl	8001bbe <_ZN3DMD8DrawLineEssssh>
			strWidth++;
 8002186:	3501      	adds	r5, #1
 8002188:	b22c      	sxth	r4, r5
 800218a:	e7ce      	b.n	800212a <_ZN3DMD10DrawStringEssPKchh+0x64>
}
 800218c:	b007      	add	sp, #28
 800218e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002192 <_ZN3DMD11DrawMarqueeEPKchss>:
{
 8002192:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002196:	b083      	sub	sp, #12
 8002198:	4605      	mov	r5, r0
 800219a:	460f      	mov	r7, r1
 800219c:	4616      	mov	r6, r2
 800219e:	4698      	mov	r8, r3
 80021a0:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
	m_marqueeWidth = 0;
 80021a4:	2400      	movs	r4, #0
 80021a6:	f8a0 4106 	strh.w	r4, [r0, #262]	; 0x106
	for (int16_t i = 0; i < length; i++)
 80021aa:	4633      	mov	r3, r6
 80021ac:	42b4      	cmp	r4, r6
 80021ae:	da0f      	bge.n	80021d0 <_ZN3DMD11DrawMarqueeEPKchss+0x3e>
		m_marqueeText[i] = bChars[i];
 80021b0:	5d3a      	ldrb	r2, [r7, r4]
 80021b2:	192b      	adds	r3, r5, r4
 80021b4:	711a      	strb	r2, [r3, #4]
		m_marqueeWidth += CharWidth(bChars[i]) + 1;
 80021b6:	5d39      	ldrb	r1, [r7, r4]
 80021b8:	4628      	mov	r0, r5
 80021ba:	f7ff fe87 	bl	8001ecc <_ZN3DMD9CharWidthEh>
 80021be:	3001      	adds	r0, #1
 80021c0:	f8b5 3106 	ldrh.w	r3, [r5, #262]	; 0x106
 80021c4:	4418      	add	r0, r3
 80021c6:	f8a5 0106 	strh.w	r0, [r5, #262]	; 0x106
	for (int16_t i = 0; i < length; i++)
 80021ca:	3401      	adds	r4, #1
 80021cc:	b224      	sxth	r4, r4
 80021ce:	e7ec      	b.n	80021aa <_ZN3DMD11DrawMarqueeEPKchss+0x18>
	m_marqueeHeight = *(m_pFont + FONT_HEIGHT);
 80021d0:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
 80021d4:	78d2      	ldrb	r2, [r2, #3]
 80021d6:	f8a5 2108 	strh.w	r2, [r5, #264]	; 0x108
	m_marqueeText[length] = '\0';
 80021da:	442b      	add	r3, r5
 80021dc:	2200      	movs	r2, #0
 80021de:	711a      	strb	r2, [r3, #4]
	m_marqueeOffsetY = top;
 80021e0:	f8a5 910c 	strh.w	r9, [r5, #268]	; 0x10c
	m_marqueeOffsetX = left;
 80021e4:	f8a5 810a 	strh.w	r8, [r5, #266]	; 0x10a
	m_marqueeLength = length;
 80021e8:	f885 6104 	strb.w	r6, [r5, #260]	; 0x104
	DrawString(m_marqueeOffsetX, m_marqueeOffsetY, m_marqueeText, m_marqueeLength, GRAPHICS_NORMAL);
 80021ec:	9201      	str	r2, [sp, #4]
 80021ee:	9600      	str	r6, [sp, #0]
 80021f0:	1d2b      	adds	r3, r5, #4
 80021f2:	464a      	mov	r2, r9
 80021f4:	4641      	mov	r1, r8
 80021f6:	4628      	mov	r0, r5
 80021f8:	f7ff ff65 	bl	80020c6 <_ZN3DMD10DrawStringEssPKchh>
}
 80021fc:	b003      	add	sp, #12
 80021fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002202 <_ZN10CHeartBeat4InitEP5IGpioP6ITimert>:
 */

#include <HeartBeat.h>

void CHeartBeat::Init(IGpio *pIo,ITimer *pTimer,uint16_t period)
{
 8002202:	b538      	push	{r3, r4, r5, lr}
 8002204:	461d      	mov	r5, r3
	m_pIo=pIo;
 8002206:	6141      	str	r1, [r0, #20]
	m_timer.Init(pTimer);
 8002208:	1d04      	adds	r4, r0, #4
 800220a:	4611      	mov	r1, r2
 800220c:	4620      	mov	r0, r4
 800220e:	f000 fae2 	bl	80027d6 <_ZN8CTimeout4InitEP6ITimer>
	m_timer.SetExpiry(period);
 8002212:	4629      	mov	r1, r5
 8002214:	4620      	mov	r0, r4
 8002216:	f000 faea 	bl	80027ee <_ZN8CTimeout9SetExpiryEt>
 800221a:	bd38      	pop	{r3, r4, r5, pc}

0800221c <_ZN10CHeartBeat7ExecuteEv>:
}

void CHeartBeat::Execute()
{
 800221c:	b538      	push	{r3, r4, r5, lr}
 800221e:	4604      	mov	r4, r0
	if(!m_timer.HasElapsed())
 8002220:	1d05      	adds	r5, r0, #4
 8002222:	4628      	mov	r0, r5
 8002224:	f000 fae8 	bl	80027f8 <_ZN8CTimeout10HasElapsedEv>
 8002228:	b900      	cbnz	r0, 800222c <_ZN10CHeartBeat7ExecuteEv+0x10>
 800222a:	bd38      	pop	{r3, r4, r5, pc}
		return;
	m_timer.Reset();
 800222c:	4628      	mov	r0, r5
 800222e:	f000 fad4 	bl	80027da <_ZN8CTimeout5ResetEv>
	m_pIo->Toggle();
 8002232:	6964      	ldr	r4, [r4, #20]
	virtual void Set() = 0;
	virtual void Clear() = 0;
	virtual bool Get() const = 0;
	void Toggle()
	{
		if (Get()) Clear();
 8002234:	6823      	ldr	r3, [r4, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	4620      	mov	r0, r4
 800223a:	4798      	blx	r3
 800223c:	b920      	cbnz	r0, 8002248 <_ZN10CHeartBeat7ExecuteEv+0x2c>
		else Set();
 800223e:	6823      	ldr	r3, [r4, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4620      	mov	r0, r4
 8002244:	4798      	blx	r3
 8002246:	e7f0      	b.n	800222a <_ZN10CHeartBeat7ExecuteEv+0xe>
		if (Get()) Clear();
 8002248:	6823      	ldr	r3, [r4, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	4620      	mov	r0, r4
 800224e:	4798      	blx	r3
 8002250:	bd38      	pop	{r3, r4, r5, pc}
	...

08002254 <_ZN10CHeartBeatC1Ev>:

}

CHeartBeat::CHeartBeat()
 8002254:	b510      	push	{r4, lr}
 8002256:	4604      	mov	r4, r0
 8002258:	4b03      	ldr	r3, [pc, #12]	; (8002268 <_ZN10CHeartBeatC1Ev+0x14>)
 800225a:	f840 3b04 	str.w	r3, [r0], #4
 800225e:	f000 fadf 	bl	8002820 <_ZN8CTimeoutC1Ev>
{
	// TODO Auto-generated constructor stub

}
 8002262:	4620      	mov	r0, r4
 8002264:	bd10      	pop	{r4, pc}
 8002266:	bf00      	nop
 8002268:	0800363c 	.word	0x0800363c

0800226c <_ZN10CHeartBeatD1Ev>:

CHeartBeat::~CHeartBeat()
 800226c:	b510      	push	{r4, lr}
 800226e:	4604      	mov	r4, r0
 8002270:	4b03      	ldr	r3, [pc, #12]	; (8002280 <_ZN10CHeartBeatD1Ev+0x14>)
 8002272:	f840 3b04 	str.w	r3, [r0], #4
 8002276:	f000 faa7 	bl	80027c8 <_ZN8CTimeoutD1Ev>
{
	// TODO Auto-generated destructor stub
}
 800227a:	4620      	mov	r0, r4
 800227c:	bd10      	pop	{r4, pc}
 800227e:	bf00      	nop
 8002280:	0800363c 	.word	0x0800363c

08002284 <_ZN10CHeartBeatD0Ev>:
CHeartBeat::~CHeartBeat()
 8002284:	b510      	push	{r4, lr}
 8002286:	4604      	mov	r4, r0
}
 8002288:	f7ff fff0 	bl	800226c <_ZN10CHeartBeatD1Ev>
 800228c:	4620      	mov	r0, r4
 800228e:	f000 fe39 	bl	8002f04 <_ZdlPv>
 8002292:	4620      	mov	r0, r4
 8002294:	bd10      	pop	{r4, pc}

08002296 <_ZN13CSTM32F10xADC4ReadEv>:
	m_pAdcBuffer = pAdcBuffer;
}

uint16_t CSTM32F10xADC::Read()
{
	return *m_pAdcBuffer;
 8002296:	6843      	ldr	r3, [r0, #4]
}
 8002298:	8818      	ldrh	r0, [r3, #0]
 800229a:	4770      	bx	lr

0800229c <_ZN13CSTM32F10xADCD1Ev>:
}

CSTM32F10xADC::~CSTM32F10xADC()
{
	// TODO Auto-generated destructor stub
}
 800229c:	4770      	bx	lr

0800229e <_ZN13CSTM32F10xADCD0Ev>:
CSTM32F10xADC::~CSTM32F10xADC()
 800229e:	b510      	push	{r4, lr}
 80022a0:	4604      	mov	r4, r0
}
 80022a2:	f000 fe2f 	bl	8002f04 <_ZdlPv>
 80022a6:	4620      	mov	r0, r4
 80022a8:	bd10      	pop	{r4, pc}

080022aa <_ZN13CSTM32F10xADC4InitEPt>:
	m_pAdcBuffer = pAdcBuffer;
 80022aa:	6041      	str	r1, [r0, #4]
 80022ac:	4770      	bx	lr
	...

080022b0 <_ZN13CSTM32F10xADCC1Ev>:
CSTM32F10xADC::CSTM32F10xADC()
 80022b0:	4b01      	ldr	r3, [pc, #4]	; (80022b8 <_ZN13CSTM32F10xADCC1Ev+0x8>)
 80022b2:	6003      	str	r3, [r0, #0]
}
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	0800364c 	.word	0x0800364c

080022bc <_ZN13CSTM32F10xDMAD1Ev>:
}

CSTM32F10xDMA::~CSTM32F10xDMA()
{
	// TODO Auto-generated destructor stub
}
 80022bc:	4770      	bx	lr

080022be <_ZN13CSTM32F10xDMA12SetDirectionEm>:
{
 80022be:	b508      	push	{r3, lr}
	m_DmaStruct.DMA_DIR = direction;
 80022c0:	6141      	str	r1, [r0, #20]
	DMA_Init(m_pDmaChannel, &m_DmaStruct);
 80022c2:	f100 010c 	add.w	r1, r0, #12
 80022c6:	6880      	ldr	r0, [r0, #8]
 80022c8:	f7fe fb54 	bl	8000974 <DMA_Init>
 80022cc:	bd08      	pop	{r3, pc}

080022ce <_ZN13CSTM32F10xDMA10SetAddressEmm>:
{
 80022ce:	b508      	push	{r3, lr}
	m_DmaStruct.DMA_PeripheralBaseAddr = per;
 80022d0:	60c1      	str	r1, [r0, #12]
	m_DmaStruct.DMA_MemoryBaseAddr = mem;
 80022d2:	6102      	str	r2, [r0, #16]
	DMA_Init(m_pDmaChannel, &m_DmaStruct);
 80022d4:	f100 010c 	add.w	r1, r0, #12
 80022d8:	6880      	ldr	r0, [r0, #8]
 80022da:	f7fe fb4b 	bl	8000974 <DMA_Init>
 80022de:	bd08      	pop	{r3, pc}

080022e0 <_ZN13CSTM32F10xDMA13SetBufferSizeEt>:
{
 80022e0:	b508      	push	{r3, lr}
	m_DmaStruct.DMA_BufferSize = size;
 80022e2:	6181      	str	r1, [r0, #24]
	DMA_Init(m_pDmaChannel, &m_DmaStruct);
 80022e4:	f100 010c 	add.w	r1, r0, #12
 80022e8:	6880      	ldr	r0, [r0, #8]
 80022ea:	f7fe fb43 	bl	8000974 <DMA_Init>
 80022ee:	bd08      	pop	{r3, pc}

080022f0 <_ZN13CSTM32F10xDMA5StartEv>:
{
 80022f0:	b508      	push	{r3, lr}
	DMA_Cmd(m_pDmaChannel,ENABLE);
 80022f2:	2101      	movs	r1, #1
 80022f4:	6880      	ldr	r0, [r0, #8]
 80022f6:	f7fe fba5 	bl	8000a44 <DMA_Cmd>
 80022fa:	bd08      	pop	{r3, pc}

080022fc <_ZN13CSTM32F10xDMA4StopEv>:
{
 80022fc:	b508      	push	{r3, lr}
	DMA_Cmd(m_pDmaChannel,DISABLE);
 80022fe:	2100      	movs	r1, #0
 8002300:	6880      	ldr	r0, [r0, #8]
 8002302:	f7fe fb9f 	bl	8000a44 <DMA_Cmd>
 8002306:	bd08      	pop	{r3, pc}

08002308 <_ZN13CSTM32F10xDMA12GetDataIndexEv>:
{
 8002308:	b510      	push	{r4, lr}
	return m_DmaStruct.DMA_BufferSize - DMA_GetCurrDataCounter(m_pDmaChannel);
 800230a:	8b04      	ldrh	r4, [r0, #24]
 800230c:	6880      	ldr	r0, [r0, #8]
 800230e:	f7fe fbb5 	bl	8000a7c <DMA_GetCurrDataCounter>
 8002312:	1a20      	subs	r0, r4, r0
}
 8002314:	b280      	uxth	r0, r0
 8002316:	bd10      	pop	{r4, pc}

08002318 <_ZN13CSTM32F10xDMA18IsTransferFinishedEv>:
{
 8002318:	b510      	push	{r4, lr}
 800231a:	4604      	mov	r4, r0
	if(DMA_GetFlagStatus(m_DmaTCflagMask))
 800231c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800231e:	f7fe fbb9 	bl	8000a94 <DMA_GetFlagStatus>
 8002322:	b908      	cbnz	r0, 8002328 <_ZN13CSTM32F10xDMA18IsTransferFinishedEv+0x10>
	return false;
 8002324:	2000      	movs	r0, #0
}
 8002326:	bd10      	pop	{r4, pc}
		DMA_ClearFlag(m_DmaTCflagMask);
 8002328:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800232a:	f7fe fbdb 	bl	8000ae4 <DMA_ClearFlag>
		return true;
 800232e:	2001      	movs	r0, #1
 8002330:	bd10      	pop	{r4, pc}

08002332 <_ZN13CSTM32F10xDMAD0Ev>:
CSTM32F10xDMA::~CSTM32F10xDMA()
 8002332:	b510      	push	{r4, lr}
 8002334:	4604      	mov	r4, r0
}
 8002336:	f000 fde5 	bl	8002f04 <_ZdlPv>
 800233a:	4620      	mov	r0, r4
 800233c:	bd10      	pop	{r4, pc}
	...

08002340 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm>:
{
 8002340:	b510      	push	{r4, lr}
 8002342:	4604      	mov	r4, r0
	m_pDma = dma;
 8002344:	6041      	str	r1, [r0, #4]
	m_pDmaChannel = pDmaChannel;
 8002346:	6082      	str	r2, [r0, #8]
	m_DmaStruct.DMA_Mode = mode;
 8002348:	62c3      	str	r3, [r0, #44]	; 0x2c
	m_DmaStruct.DMA_Priority = priority;
 800234a:	9b02      	ldr	r3, [sp, #8]
 800234c:	6303      	str	r3, [r0, #48]	; 0x30
	m_DmaStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800234e:	2300      	movs	r3, #0
 8002350:	6283      	str	r3, [r0, #40]	; 0x28
	m_DmaStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8002352:	6243      	str	r3, [r0, #36]	; 0x24
	m_DmaStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	6203      	str	r3, [r0, #32]
	DMA_Init(m_pDmaChannel, &m_DmaStruct);
 8002358:	f100 010c 	add.w	r1, r0, #12
 800235c:	4610      	mov	r0, r2
 800235e:	f7fe fb09 	bl	8000974 <DMA_Init>
	if(m_pDmaChannel ==  DMA1_Channel1)m_DmaTCflagMask = DMA1_IT_TC1;
 8002362:	68a3      	ldr	r3, [r4, #8]
 8002364:	4a26      	ldr	r2, [pc, #152]	; (8002400 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xc0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d021      	beq.n	80023ae <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x6e>
	else if(m_pDmaChannel ==  DMA1_Channel2)m_DmaTCflagMask = DMA1_IT_TC2;
 800236a:	4a26      	ldr	r2, [pc, #152]	; (8002404 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xc4>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d021      	beq.n	80023b4 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x74>
	else if(m_pDmaChannel ==  DMA1_Channel3)m_DmaTCflagMask = DMA1_IT_TC3;
 8002370:	4a25      	ldr	r2, [pc, #148]	; (8002408 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xc8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d021      	beq.n	80023ba <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x7a>
	else if(m_pDmaChannel ==  DMA1_Channel4)m_DmaTCflagMask = DMA1_IT_TC4;
 8002376:	4a25      	ldr	r2, [pc, #148]	; (800240c <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xcc>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d022      	beq.n	80023c2 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x82>
	else if(m_pDmaChannel ==  DMA1_Channel5)m_DmaTCflagMask = DMA1_IT_TC5;
 800237c:	4a24      	ldr	r2, [pc, #144]	; (8002410 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xd0>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d023      	beq.n	80023ca <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x8a>
	else if(m_pDmaChannel ==  DMA1_Channel6)m_DmaTCflagMask = DMA1_IT_TC6;
 8002382:	4a24      	ldr	r2, [pc, #144]	; (8002414 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xd4>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d024      	beq.n	80023d2 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x92>
	else if(m_pDmaChannel ==  DMA1_Channel7)m_DmaTCflagMask = DMA1_IT_TC7;
 8002388:	4a23      	ldr	r2, [pc, #140]	; (8002418 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xd8>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d025      	beq.n	80023da <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x9a>
	else if(m_pDmaChannel ==  DMA2_Channel1)m_DmaTCflagMask = DMA2_IT_TC1;
 800238e:	4a23      	ldr	r2, [pc, #140]	; (800241c <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xdc>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d026      	beq.n	80023e2 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xa2>
	else if(m_pDmaChannel ==  DMA2_Channel2)m_DmaTCflagMask = DMA2_IT_TC2;
 8002394:	4a22      	ldr	r2, [pc, #136]	; (8002420 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xe0>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d026      	beq.n	80023e8 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xa8>
	else if(m_pDmaChannel ==  DMA2_Channel3)m_DmaTCflagMask = DMA2_IT_TC3;
 800239a:	4a22      	ldr	r2, [pc, #136]	; (8002424 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xe4>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d026      	beq.n	80023ee <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xae>
	else if(m_pDmaChannel ==  DMA2_Channel4)m_DmaTCflagMask = DMA2_IT_TC4;
 80023a0:	4a21      	ldr	r2, [pc, #132]	; (8002428 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xe8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d026      	beq.n	80023f4 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xb4>
	else if(m_pDmaChannel ==  DMA2_Channel5)m_DmaTCflagMask = DMA2_IT_TC5;
 80023a6:	4a21      	ldr	r2, [pc, #132]	; (800242c <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xec>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d026      	beq.n	80023fa <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xba>
 80023ac:	bd10      	pop	{r4, pc}
	if(m_pDmaChannel ==  DMA1_Channel1)m_DmaTCflagMask = DMA1_IT_TC1;
 80023ae:	2302      	movs	r3, #2
 80023b0:	63a3      	str	r3, [r4, #56]	; 0x38
 80023b2:	bd10      	pop	{r4, pc}
	else if(m_pDmaChannel ==  DMA1_Channel2)m_DmaTCflagMask = DMA1_IT_TC2;
 80023b4:	2320      	movs	r3, #32
 80023b6:	63a3      	str	r3, [r4, #56]	; 0x38
 80023b8:	bd10      	pop	{r4, pc}
	else if(m_pDmaChannel ==  DMA1_Channel3)m_DmaTCflagMask = DMA1_IT_TC3;
 80023ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023be:	63a3      	str	r3, [r4, #56]	; 0x38
 80023c0:	bd10      	pop	{r4, pc}
	else if(m_pDmaChannel ==  DMA1_Channel4)m_DmaTCflagMask = DMA1_IT_TC4;
 80023c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023c6:	63a3      	str	r3, [r4, #56]	; 0x38
 80023c8:	bd10      	pop	{r4, pc}
	else if(m_pDmaChannel ==  DMA1_Channel5)m_DmaTCflagMask = DMA1_IT_TC5;
 80023ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023ce:	63a3      	str	r3, [r4, #56]	; 0x38
 80023d0:	bd10      	pop	{r4, pc}
	else if(m_pDmaChannel ==  DMA1_Channel6)m_DmaTCflagMask = DMA1_IT_TC6;
 80023d2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023d6:	63a3      	str	r3, [r4, #56]	; 0x38
 80023d8:	bd10      	pop	{r4, pc}
	else if(m_pDmaChannel ==  DMA1_Channel7)m_DmaTCflagMask = DMA1_IT_TC7;
 80023da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023de:	63a3      	str	r3, [r4, #56]	; 0x38
 80023e0:	bd10      	pop	{r4, pc}
	else if(m_pDmaChannel ==  DMA2_Channel1)m_DmaTCflagMask = DMA2_IT_TC1;
 80023e2:	4b13      	ldr	r3, [pc, #76]	; (8002430 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xf0>)
 80023e4:	63a3      	str	r3, [r4, #56]	; 0x38
 80023e6:	bd10      	pop	{r4, pc}
	else if(m_pDmaChannel ==  DMA2_Channel2)m_DmaTCflagMask = DMA2_IT_TC2;
 80023e8:	4b12      	ldr	r3, [pc, #72]	; (8002434 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xf4>)
 80023ea:	63a3      	str	r3, [r4, #56]	; 0x38
 80023ec:	bd10      	pop	{r4, pc}
	else if(m_pDmaChannel ==  DMA2_Channel3)m_DmaTCflagMask = DMA2_IT_TC3;
 80023ee:	4b12      	ldr	r3, [pc, #72]	; (8002438 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xf8>)
 80023f0:	63a3      	str	r3, [r4, #56]	; 0x38
 80023f2:	bd10      	pop	{r4, pc}
	else if(m_pDmaChannel ==  DMA2_Channel4)m_DmaTCflagMask = DMA2_IT_TC4;
 80023f4:	4b11      	ldr	r3, [pc, #68]	; (800243c <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xfc>)
 80023f6:	63a3      	str	r3, [r4, #56]	; 0x38
 80023f8:	bd10      	pop	{r4, pc}
	else if(m_pDmaChannel ==  DMA2_Channel5)m_DmaTCflagMask = DMA2_IT_TC5;
 80023fa:	4b11      	ldr	r3, [pc, #68]	; (8002440 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x100>)
 80023fc:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80023fe:	e7d5      	b.n	80023ac <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x6c>
 8002400:	40020008 	.word	0x40020008
 8002404:	4002001c 	.word	0x4002001c
 8002408:	40020030 	.word	0x40020030
 800240c:	40020044 	.word	0x40020044
 8002410:	40020058 	.word	0x40020058
 8002414:	4002006c 	.word	0x4002006c
 8002418:	40020080 	.word	0x40020080
 800241c:	40020408 	.word	0x40020408
 8002420:	4002041c 	.word	0x4002041c
 8002424:	40020430 	.word	0x40020430
 8002428:	40020444 	.word	0x40020444
 800242c:	40020458 	.word	0x40020458
 8002430:	10000002 	.word	0x10000002
 8002434:	10000020 	.word	0x10000020
 8002438:	10000200 	.word	0x10000200
 800243c:	10002000 	.word	0x10002000
 8002440:	10020000 	.word	0x10020000

08002444 <_ZN13CSTM32F10xDMAC1Ev>:
CSTM32F10xDMA::CSTM32F10xDMA()
 8002444:	b510      	push	{r4, lr}
 8002446:	4604      	mov	r4, r0
 8002448:	4b04      	ldr	r3, [pc, #16]	; (800245c <_ZN13CSTM32F10xDMAC1Ev+0x18>)
 800244a:	f840 3b0c 	str.w	r3, [r0], #12
	DMA_StructInit(&m_DmaStruct);
 800244e:	f7fe facf 	bl	80009f0 <DMA_StructInit>
	m_pDma = NULL;
 8002452:	2300      	movs	r3, #0
 8002454:	6063      	str	r3, [r4, #4]
}
 8002456:	4620      	mov	r0, r4
 8002458:	bd10      	pop	{r4, pc}
 800245a:	bf00      	nop
 800245c:	08003660 	.word	0x08003660

08002460 <_ZN14CSTM32F10xGpio3SetEv>:

#include <STM32F10xGpio.h>

void CSTM32F10xGpio::Set()
{
	m_pGpio->BSRR |= m_bitMask;
 8002460:	6842      	ldr	r2, [r0, #4]
 8002462:	6913      	ldr	r3, [r2, #16]
 8002464:	6881      	ldr	r1, [r0, #8]
 8002466:	430b      	orrs	r3, r1
 8002468:	6113      	str	r3, [r2, #16]
 800246a:	4770      	bx	lr

0800246c <_ZN14CSTM32F10xGpio5ClearEv>:
}

void CSTM32F10xGpio::Clear()
{
	m_pGpio->BSRR |= m_clearBitMask;
 800246c:	6842      	ldr	r2, [r0, #4]
 800246e:	6913      	ldr	r3, [r2, #16]
 8002470:	68c1      	ldr	r1, [r0, #12]
 8002472:	430b      	orrs	r3, r1
 8002474:	6113      	str	r3, [r2, #16]
 8002476:	4770      	bx	lr

08002478 <_ZNK14CSTM32F10xGpio3GetEv>:
}

bool CSTM32F10xGpio::Get() const
{
	return m_pGpio->IDR & m_bitMask;
 8002478:	6843      	ldr	r3, [r0, #4]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	6883      	ldr	r3, [r0, #8]
 800247e:	421a      	tst	r2, r3
}
 8002480:	bf14      	ite	ne
 8002482:	2001      	movne	r0, #1
 8002484:	2000      	moveq	r0, #0
 8002486:	4770      	bx	lr

08002488 <_ZN14CSTM32F10xGpioD1Ev>:
}

CSTM32F10xGpio::~CSTM32F10xGpio()
{
	// TODO Auto-generated destructor stub
}
 8002488:	4770      	bx	lr

0800248a <_ZN14CSTM32F10xGpioD0Ev>:
CSTM32F10xGpio::~CSTM32F10xGpio()
 800248a:	b510      	push	{r4, lr}
 800248c:	4604      	mov	r4, r0
}
 800248e:	f000 fd39 	bl	8002f04 <_ZdlPv>
 8002492:	4620      	mov	r0, r4
 8002494:	bd10      	pop	{r4, pc}

08002496 <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh>:
	if (pinNumber > 15) return;
 8002496:	2a0f      	cmp	r2, #15
 8002498:	dc08      	bgt.n	80024ac <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh+0x16>
	m_pGpio = pGpio;
 800249a:	6041      	str	r1, [r0, #4]
	m_bitMask = 1 << pinNumber;
 800249c:	2301      	movs	r3, #1
 800249e:	fa03 f102 	lsl.w	r1, r3, r2
 80024a2:	6081      	str	r1, [r0, #8]
	m_clearBitMask = 1 << (pinNumber + 16);
 80024a4:	3210      	adds	r2, #16
 80024a6:	fa03 f202 	lsl.w	r2, r3, r2
 80024aa:	60c2      	str	r2, [r0, #12]
 80024ac:	4770      	bx	lr
	...

080024b0 <_ZN14CSTM32F10xGpioC1Ev>:
CSTM32F10xGpio::CSTM32F10xGpio()
 80024b0:	4a02      	ldr	r2, [pc, #8]	; (80024bc <_ZN14CSTM32F10xGpioC1Ev+0xc>)
 80024b2:	6002      	str	r2, [r0, #0]
	m_pGpio = NULL;
 80024b4:	2200      	movs	r2, #0
 80024b6:	6042      	str	r2, [r0, #4]
	m_bitMask = 0;
 80024b8:	6082      	str	r2, [r0, #8]
}
 80024ba:	4770      	bx	lr
 80024bc:	0800368c 	.word	0x0800368c

080024c0 <_ZN22CSTM32F10xInputCaptureD1Ev>:
}

CSTM32F10xInputCapture::~CSTM32F10xInputCapture()
{
	// TODO Auto-generated destructor stub
}
 80024c0:	4770      	bx	lr

080024c2 <_ZNK22CSTM32F10xInputCapture4ReadEv>:
{
 80024c2:	b508      	push	{r3, lr}
	switch (m_Channel)
 80024c4:	8903      	ldrh	r3, [r0, #8]
 80024c6:	2b0c      	cmp	r3, #12
 80024c8:	d818      	bhi.n	80024fc <_ZNK22CSTM32F10xInputCapture4ReadEv+0x3a>
 80024ca:	e8df f003 	tbb	[pc, r3]
 80024ce:	1707      	.short	0x1707
 80024d0:	170b1717 	.word	0x170b1717
 80024d4:	170f1717 	.word	0x170f1717
 80024d8:	1717      	.short	0x1717
 80024da:	13          	.byte	0x13
 80024db:	00          	.byte	0x00
			return TIM_GetCapture1(m_pTim);
 80024dc:	6840      	ldr	r0, [r0, #4]
 80024de:	f7fe ff4b 	bl	8001378 <TIM_GetCapture1>
 80024e2:	bd08      	pop	{r3, pc}
			return TIM_GetCapture2(m_pTim);
 80024e4:	6840      	ldr	r0, [r0, #4]
 80024e6:	f7fe ff53 	bl	8001390 <TIM_GetCapture2>
 80024ea:	bd08      	pop	{r3, pc}
			return TIM_GetCapture3(m_pTim);
 80024ec:	6840      	ldr	r0, [r0, #4]
 80024ee:	f7fe ff5b 	bl	80013a8 <TIM_GetCapture3>
 80024f2:	bd08      	pop	{r3, pc}
			return TIM_GetCapture4(m_pTim);
 80024f4:	6840      	ldr	r0, [r0, #4]
 80024f6:	f7fe ff63 	bl	80013c0 <TIM_GetCapture4>
 80024fa:	bd08      	pop	{r3, pc}
	return false;
 80024fc:	2000      	movs	r0, #0
}
 80024fe:	bd08      	pop	{r3, pc}

08002500 <_ZNK22CSTM32F10xInputCapture11IsTriggeredEv>:
{
 8002500:	b508      	push	{r3, lr}
	switch (m_Channel)
 8002502:	8903      	ldrh	r3, [r0, #8]
 8002504:	2b0c      	cmp	r3, #12
 8002506:	d828      	bhi.n	800255a <_ZNK22CSTM32F10xInputCapture11IsTriggeredEv+0x5a>
 8002508:	e8df f003 	tbb	[pc, r3]
 800250c:	27272707 	.word	0x27272707
 8002510:	2727270f 	.word	0x2727270f
 8002514:	27272717 	.word	0x27272717
 8002518:	1f          	.byte	0x1f
 8002519:	00          	.byte	0x00
			return TIM_GetFlagStatus(m_pTim, TIM_FLAG_CC1);
 800251a:	2102      	movs	r1, #2
 800251c:	6840      	ldr	r0, [r0, #4]
 800251e:	f7fe ff5c 	bl	80013da <TIM_GetFlagStatus>
 8002522:	3000      	adds	r0, #0
 8002524:	bf18      	it	ne
 8002526:	2001      	movne	r0, #1
 8002528:	bd08      	pop	{r3, pc}
			return TIM_GetFlagStatus(m_pTim, TIM_FLAG_CC2);
 800252a:	2104      	movs	r1, #4
 800252c:	6840      	ldr	r0, [r0, #4]
 800252e:	f7fe ff54 	bl	80013da <TIM_GetFlagStatus>
 8002532:	3000      	adds	r0, #0
 8002534:	bf18      	it	ne
 8002536:	2001      	movne	r0, #1
 8002538:	bd08      	pop	{r3, pc}
			return TIM_GetFlagStatus(m_pTim, TIM_FLAG_CC3);
 800253a:	2108      	movs	r1, #8
 800253c:	6840      	ldr	r0, [r0, #4]
 800253e:	f7fe ff4c 	bl	80013da <TIM_GetFlagStatus>
 8002542:	3000      	adds	r0, #0
 8002544:	bf18      	it	ne
 8002546:	2001      	movne	r0, #1
 8002548:	bd08      	pop	{r3, pc}
			return TIM_GetFlagStatus(m_pTim, TIM_FLAG_CC4);
 800254a:	2110      	movs	r1, #16
 800254c:	6840      	ldr	r0, [r0, #4]
 800254e:	f7fe ff44 	bl	80013da <TIM_GetFlagStatus>
 8002552:	3000      	adds	r0, #0
 8002554:	bf18      	it	ne
 8002556:	2001      	movne	r0, #1
 8002558:	bd08      	pop	{r3, pc}
	return false;
 800255a:	2000      	movs	r0, #0
}
 800255c:	bd08      	pop	{r3, pc}

0800255e <_ZN22CSTM32F10xInputCaptureD0Ev>:
CSTM32F10xInputCapture::~CSTM32F10xInputCapture()
 800255e:	b510      	push	{r4, lr}
 8002560:	4604      	mov	r4, r0
}
 8002562:	f000 fccf 	bl	8002f04 <_ZdlPv>
 8002566:	4620      	mov	r0, r4
 8002568:	bd10      	pop	{r4, pc}

0800256a <_ZN22CSTM32F10xInputCapture4InitEP11TIM_TypeDeft>:
	m_pTim = pTim;
 800256a:	6041      	str	r1, [r0, #4]
	m_Channel = channel;
 800256c:	8102      	strh	r2, [r0, #8]
 800256e:	4770      	bx	lr

08002570 <_ZN22CSTM32F10xInputCaptureC1Ev>:
CSTM32F10xInputCapture::CSTM32F10xInputCapture()
 8002570:	4b01      	ldr	r3, [pc, #4]	; (8002578 <_ZN22CSTM32F10xInputCaptureC1Ev+0x8>)
 8002572:	6003      	str	r3, [r0, #0]
}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	080036a8 	.word	0x080036a8

0800257c <_ZNK15CSTM32F10xTimer12CurrentTicksEv>:
	m_pTimer=pTimer;
}

uint16_t CSTM32F10xTimer::CurrentTicks() const
{
	return m_pTimer->CNT;
 800257c:	6843      	ldr	r3, [r0, #4]
 800257e:	8c98      	ldrh	r0, [r3, #36]	; 0x24
}
 8002580:	b280      	uxth	r0, r0
 8002582:	4770      	bx	lr

08002584 <_ZN15CSTM32F10xTimerD1Ev>:
}

CSTM32F10xTimer::~CSTM32F10xTimer()
{
	// TODO Auto-generated destructor stub
}
 8002584:	4770      	bx	lr

08002586 <_ZN15CSTM32F10xTimerD0Ev>:
CSTM32F10xTimer::~CSTM32F10xTimer()
 8002586:	b510      	push	{r4, lr}
 8002588:	4604      	mov	r4, r0
}
 800258a:	f000 fcbb 	bl	8002f04 <_ZdlPv>
 800258e:	4620      	mov	r0, r4
 8002590:	bd10      	pop	{r4, pc}

08002592 <_ZN15CSTM32F10xTimer4InitEP11TIM_TypeDef>:
	m_pTimer=pTimer;
 8002592:	6041      	str	r1, [r0, #4]
 8002594:	4770      	bx	lr
	...

08002598 <_ZN15CSTM32F10xTimerC1Ev>:
CSTM32F10xTimer::CSTM32F10xTimer()
 8002598:	4b01      	ldr	r3, [pc, #4]	; (80025a0 <_ZN15CSTM32F10xTimerC1Ev+0x8>)
 800259a:	6003      	str	r3, [r0, #0]
}
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	080036c0 	.word	0x080036c0

080025a4 <_ZN15CSTM32F10xUSART4ReadEPhPt>:
bool CSTM32F10xUSART::Read(unsigned char* pData, uint16_t* pLength)
{
//	for(uint16_t i=0;i<)
//	pData
	return false;
}
 80025a4:	2000      	movs	r0, #0
 80025a6:	4770      	bx	lr

080025a8 <_ZN15CSTM32F10xUSARTD1Ev>:
}

CSTM32F10xUSART::~CSTM32F10xUSART()
{
	// TODO Auto-generated destructor stub
}
 80025a8:	4770      	bx	lr

080025aa <_ZN13CCircularFifoIcLj322EED1Ev>:
	{
		Capacity = Size + 1
	};

	CCircularFifo() : m_Tail(0), m_Head(0) {}
	virtual ~CCircularFifo() {}
 80025aa:	4770      	bx	lr

080025ac <_ZN13CCircularFifoIcLj322EED0Ev>:
 80025ac:	b510      	push	{r4, lr}
 80025ae:	4604      	mov	r4, r0
 80025b0:	f000 fca8 	bl	8002f04 <_ZdlPv>
 80025b4:	4620      	mov	r0, r4
 80025b6:	bd10      	pop	{r4, pc}

080025b8 <_ZN15CSTM32F10xUSARTD0Ev>:
CSTM32F10xUSART::~CSTM32F10xUSART()
 80025b8:	b510      	push	{r4, lr}
 80025ba:	4604      	mov	r4, r0
}
 80025bc:	f000 fca2 	bl	8002f04 <_ZdlPv>
 80025c0:	4620      	mov	r0, r4
 80025c2:	bd10      	pop	{r4, pc}

080025c4 <_ZN15CSTM32F10xUSART4InitEP13USART_TypeDef>:
	m_pUsart = pUsart;
 80025c4:	6041      	str	r1, [r0, #4]
 80025c6:	4770      	bx	lr

080025c8 <_ZN15CSTM32F10xUSARTC1Ev>:
CSTM32F10xUSART::CSTM32F10xUSART()
 80025c8:	4a07      	ldr	r2, [pc, #28]	; (80025e8 <_ZN15CSTM32F10xUSARTC1Ev+0x20>)
 80025ca:	6002      	str	r2, [r0, #0]
	CCircularFifo() : m_Tail(0), m_Head(0) {}
 80025cc:	4907      	ldr	r1, [pc, #28]	; (80025ec <_ZN15CSTM32F10xUSARTC1Ev+0x24>)
 80025ce:	6081      	str	r1, [r0, #8]
 80025d0:	2200      	movs	r2, #0
 80025d2:	60c2      	str	r2, [r0, #12]
 80025d4:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
 80025d8:	f8c0 1158 	str.w	r1, [r0, #344]	; 0x158
 80025dc:	f8c0 215c 	str.w	r2, [r0, #348]	; 0x15c
 80025e0:	f8c0 22a4 	str.w	r2, [r0, #676]	; 0x2a4
}
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	080036e4 	.word	0x080036e4
 80025ec:	080036d4 	.word	0x080036d4

080025f0 <_ZNK13CCircularFifoIcLj322EE7IsEmptyEv>:
 *
 * \return true if circular buffer is empty */
template<typename Element, unsigned int Size>
bool CCircularFifo<Element, Size>::IsEmpty() const
{
	return (m_Head == m_Tail);
 80025f0:	f8d0 214c 	ldr.w	r2, [r0, #332]	; 0x14c
 80025f4:	6840      	ldr	r0, [r0, #4]
}
 80025f6:	4282      	cmp	r2, r0
 80025f8:	bf14      	ite	ne
 80025fa:	2000      	movne	r0, #0
 80025fc:	2001      	moveq	r0, #1
 80025fe:	4770      	bx	lr

08002600 <_ZN15CSTM32F10xUSART7HasDataEv>:
{
 8002600:	b508      	push	{r3, lr}
	return !m_RxBuffer.IsEmpty();
 8002602:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 8002606:	f7ff fff3 	bl	80025f0 <_ZNK13CCircularFifoIcLj322EE7IsEmptyEv>
 800260a:	f080 0001 	eor.w	r0, r0, #1
}
 800260e:	b2c0      	uxtb	r0, r0
 8002610:	bd08      	pop	{r3, pc}
	...

08002614 <_ZNK13CCircularFifoIcLj322EE9incrementEj>:
	//    index++;
	//    if(index == array.lenght) -> index = 0;
	//
	//or as written below:
	//    index = (index+1) % array.length
	idx_ = (idx_ + 1) % Capacity;
 8002614:	3101      	adds	r1, #1
 8002616:	4b06      	ldr	r3, [pc, #24]	; (8002630 <_ZNK13CCircularFifoIcLj322EE9incrementEj+0x1c>)
 8002618:	fba3 2301 	umull	r2, r3, r3, r1
 800261c:	1ac8      	subs	r0, r1, r3
 800261e:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8002622:	0a1b      	lsrs	r3, r3, #8
	return idx_;
}
 8002624:	f240 1043 	movw	r0, #323	; 0x143
 8002628:	fb00 1013 	mls	r0, r0, r3, r1
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	95cbb0bf 	.word	0x95cbb0bf

08002634 <_ZN13CCircularFifoIcLj322EE4PushERc>:
bool CCircularFifo<Element, Size>::Push(Element& item_)
 8002634:	b538      	push	{r3, r4, r5, lr}
 8002636:	4604      	mov	r4, r0
 8002638:	460d      	mov	r5, r1
	unsigned int nextTail = increment(m_Tail);
 800263a:	6841      	ldr	r1, [r0, #4]
 800263c:	f7ff ffea 	bl	8002614 <_ZNK13CCircularFifoIcLj322EE9incrementEj>
	if (nextTail != m_Head)
 8002640:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
 8002644:	4298      	cmp	r0, r3
 8002646:	d006      	beq.n	8002656 <_ZN13CCircularFifoIcLj322EE4PushERc+0x22>
		m_Array[m_Tail] = item_;
 8002648:	6863      	ldr	r3, [r4, #4]
 800264a:	782a      	ldrb	r2, [r5, #0]
 800264c:	4423      	add	r3, r4
 800264e:	721a      	strb	r2, [r3, #8]
		m_Tail = nextTail;
 8002650:	6060      	str	r0, [r4, #4]
		return true;
 8002652:	2001      	movs	r0, #1
 8002654:	bd38      	pop	{r3, r4, r5, pc}
	return false;
 8002656:	2000      	movs	r0, #0
}
 8002658:	bd38      	pop	{r3, r4, r5, pc}

0800265a <_ZN15CSTM32F10xUSART5WriteEPKct>:
{
 800265a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800265c:	b083      	sub	sp, #12
 800265e:	4607      	mov	r7, r0
 8002660:	4616      	mov	r6, r2
	for (i = 0; i < length; i++)
 8002662:	2400      	movs	r4, #0
 8002664:	42b4      	cmp	r4, r6
 8002666:	da0d      	bge.n	8002684 <_ZN15CSTM32F10xUSART5WriteEPKct+0x2a>
		txData = *data++;
 8002668:	1c4d      	adds	r5, r1, #1
 800266a:	780b      	ldrb	r3, [r1, #0]
 800266c:	a902      	add	r1, sp, #8
 800266e:	f801 3d01 	strb.w	r3, [r1, #-1]!
		if (!m_TxBuffer.Push(txData)) break;
 8002672:	f107 0008 	add.w	r0, r7, #8
 8002676:	f7ff ffdd 	bl	8002634 <_ZN13CCircularFifoIcLj322EE4PushERc>
 800267a:	b118      	cbz	r0, 8002684 <_ZN15CSTM32F10xUSART5WriteEPKct+0x2a>
	for (i = 0; i < length; i++)
 800267c:	3401      	adds	r4, #1
 800267e:	b2a4      	uxth	r4, r4
		txData = *data++;
 8002680:	4629      	mov	r1, r5
	for (i = 0; i < length; i++)
 8002682:	e7ef      	b.n	8002664 <_ZN15CSTM32F10xUSART5WriteEPKct+0xa>
}
 8002684:	4620      	mov	r0, r4
 8002686:	b003      	add	sp, #12
 8002688:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800268a <_ZN15CSTM32F10xUSART5WriteEPKc>:
{
 800268a:	b570      	push	{r4, r5, r6, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	4606      	mov	r6, r0
 8002690:	460d      	mov	r5, r1
	uint16_t dataSend = 0;
 8002692:	2400      	movs	r4, #0
	while (*data)
 8002694:	782b      	ldrb	r3, [r5, #0]
 8002696:	b15b      	cbz	r3, 80026b0 <_ZN15CSTM32F10xUSART5WriteEPKc+0x26>
		txData = *data++;
 8002698:	3501      	adds	r5, #1
 800269a:	a902      	add	r1, sp, #8
 800269c:	f801 3d01 	strb.w	r3, [r1, #-1]!
		if (m_TxBuffer.Push(txData)) dataSend++;
 80026a0:	f106 0008 	add.w	r0, r6, #8
 80026a4:	f7ff ffc6 	bl	8002634 <_ZN13CCircularFifoIcLj322EE4PushERc>
 80026a8:	b110      	cbz	r0, 80026b0 <_ZN15CSTM32F10xUSART5WriteEPKc+0x26>
 80026aa:	3401      	adds	r4, #1
 80026ac:	b2a4      	uxth	r4, r4
	while (*data)
 80026ae:	e7f1      	b.n	8002694 <_ZN15CSTM32F10xUSART5WriteEPKc+0xa>
}
 80026b0:	4620      	mov	r0, r4
 80026b2:	b002      	add	sp, #8
 80026b4:	bd70      	pop	{r4, r5, r6, pc}

080026b6 <_ZN15CSTM32F10xUSART9executeRxEv>:
{
 80026b6:	b510      	push	{r4, lr}
 80026b8:	b082      	sub	sp, #8
 80026ba:	4604      	mov	r4, r0
	if (!USART_GetFlagStatus(m_pUsart, USART_FLAG_RXNE)) return;
 80026bc:	2120      	movs	r1, #32
 80026be:	6840      	ldr	r0, [r0, #4]
 80026c0:	f7ff f97b 	bl	80019ba <USART_GetFlagStatus>
 80026c4:	b908      	cbnz	r0, 80026ca <_ZN15CSTM32F10xUSART9executeRxEv+0x14>
}
 80026c6:	b002      	add	sp, #8
 80026c8:	bd10      	pop	{r4, pc}
	char data = USART_ReceiveData(m_pUsart);
 80026ca:	6860      	ldr	r0, [r4, #4]
 80026cc:	f7ff f966 	bl	800199c <USART_ReceiveData>
 80026d0:	a902      	add	r1, sp, #8
 80026d2:	f801 0d01 	strb.w	r0, [r1, #-1]!
	m_RxBuffer.Push(data);
 80026d6:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 80026da:	f7ff ffab 	bl	8002634 <_ZN13CCircularFifoIcLj322EE4PushERc>
 80026de:	e7f2      	b.n	80026c6 <_ZN15CSTM32F10xUSART9executeRxEv+0x10>

080026e0 <_ZN13CCircularFifoIcLj322EE3PopERc>:
	if (m_Head == m_Tail) return false;  // empty queue
 80026e0:	f8d0 214c 	ldr.w	r2, [r0, #332]	; 0x14c
 80026e4:	6843      	ldr	r3, [r0, #4]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d00e      	beq.n	8002708 <_ZN13CCircularFifoIcLj322EE3PopERc+0x28>
bool CCircularFifo<Element, Size>::Pop(Element& item_)
 80026ea:	b510      	push	{r4, lr}
 80026ec:	4604      	mov	r4, r0
	item_ = m_Array[m_Head];
 80026ee:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80026f2:	4403      	add	r3, r0
 80026f4:	7a1b      	ldrb	r3, [r3, #8]
 80026f6:	700b      	strb	r3, [r1, #0]
	m_Head = increment(m_Head);
 80026f8:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
 80026fc:	f7ff ff8a 	bl	8002614 <_ZNK13CCircularFifoIcLj322EE9incrementEj>
 8002700:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
	return true;
 8002704:	2001      	movs	r0, #1
 8002706:	bd10      	pop	{r4, pc}
	if (m_Head == m_Tail) return false;  // empty queue
 8002708:	2000      	movs	r0, #0
 800270a:	4770      	bx	lr

0800270c <_ZN15CSTM32F10xUSART8ReadByteEv>:
{
 800270c:	b500      	push	{lr}
 800270e:	b083      	sub	sp, #12
	m_RxBuffer.Pop(data);
 8002710:	f10d 0107 	add.w	r1, sp, #7
 8002714:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 8002718:	f7ff ffe2 	bl	80026e0 <_ZN13CCircularFifoIcLj322EE3PopERc>
}
 800271c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002720:	b003      	add	sp, #12
 8002722:	f85d fb04 	ldr.w	pc, [sp], #4

08002726 <_ZN15CSTM32F10xUSART9executeTxEv>:
{
 8002726:	b530      	push	{r4, r5, lr}
 8002728:	b083      	sub	sp, #12
 800272a:	4604      	mov	r4, r0
	if (m_TxBuffer.IsEmpty()) return;
 800272c:	f100 0508 	add.w	r5, r0, #8
 8002730:	4628      	mov	r0, r5
 8002732:	f7ff ff5d 	bl	80025f0 <_ZNK13CCircularFifoIcLj322EE7IsEmptyEv>
 8002736:	b108      	cbz	r0, 800273c <_ZN15CSTM32F10xUSART9executeTxEv+0x16>
}
 8002738:	b003      	add	sp, #12
 800273a:	bd30      	pop	{r4, r5, pc}
	if (!USART_GetFlagStatus(m_pUsart, USART_FLAG_TXE)) return;
 800273c:	2180      	movs	r1, #128	; 0x80
 800273e:	6860      	ldr	r0, [r4, #4]
 8002740:	f7ff f93b 	bl	80019ba <USART_GetFlagStatus>
 8002744:	2800      	cmp	r0, #0
 8002746:	d0f7      	beq.n	8002738 <_ZN15CSTM32F10xUSART9executeTxEv+0x12>
	m_TxBuffer.Pop(data);
 8002748:	f10d 0107 	add.w	r1, sp, #7
 800274c:	4628      	mov	r0, r5
 800274e:	f7ff ffc7 	bl	80026e0 <_ZN13CCircularFifoIcLj322EE3PopERc>
	USART_SendData(m_pUsart, data);
 8002752:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8002756:	6860      	ldr	r0, [r4, #4]
 8002758:	f7ff f90f 	bl	800197a <USART_SendData>
 800275c:	e7ec      	b.n	8002738 <_ZN15CSTM32F10xUSART9executeTxEv+0x12>

0800275e <_ZN15CSTM32F10xUSART7ExecuteEv>:
{
 800275e:	b510      	push	{r4, lr}
 8002760:	4604      	mov	r4, r0
	executeTx();
 8002762:	f7ff ffe0 	bl	8002726 <_ZN15CSTM32F10xUSART9executeTxEv>
	executeRx();
 8002766:	4620      	mov	r0, r4
 8002768:	f7ff ffa5 	bl	80026b6 <_ZN15CSTM32F10xUSART9executeRxEv>
 800276c:	bd10      	pop	{r4, pc}

0800276e <_ZN17CACFrequencyMeterD1Ev>:
}

CACFrequencyMeter::~CACFrequencyMeter()
{
	// TODO Auto-generated destructor stub
}
 800276e:	4770      	bx	lr

08002770 <_ZN17CACFrequencyMeterD0Ev>:
CACFrequencyMeter::~CACFrequencyMeter()
 8002770:	b510      	push	{r4, lr}
 8002772:	4604      	mov	r4, r0
}
 8002774:	f000 fbc6 	bl	8002f04 <_ZdlPv>
 8002778:	4620      	mov	r0, r4
 800277a:	bd10      	pop	{r4, pc}

0800277c <_ZN17CACFrequencyMeter4InitEP13IInputCapture>:
	m_pIc = pIc;
 800277c:	6041      	str	r1, [r0, #4]
 800277e:	4770      	bx	lr

08002780 <_ZN17CACFrequencyMeter7ExecuteEv>:
{
 8002780:	b538      	push	{r3, r4, r5, lr}
 8002782:	4604      	mov	r4, r0
	if (!m_pIc->IsTriggered()) return;
 8002784:	6840      	ldr	r0, [r0, #4]
 8002786:	6803      	ldr	r3, [r0, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4798      	blx	r3
 800278c:	b900      	cbnz	r0, 8002790 <_ZN17CACFrequencyMeter7ExecuteEv+0x10>
 800278e:	bd38      	pop	{r3, r4, r5, pc}
	m_CurrentTimeStamp = m_pIc->Read();
 8002790:	6860      	ldr	r0, [r4, #4]
 8002792:	6803      	ldr	r3, [r0, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	4798      	blx	r3
 8002798:	4605      	mov	r5, r0
 800279a:	8160      	strh	r0, [r4, #10]
	m_Freq = 1000.0f / (uint16_t)(m_CurrentTimeStamp - m_PrevTimeStamp);
 800279c:	8920      	ldrh	r0, [r4, #8]
 800279e:	1a28      	subs	r0, r5, r0
 80027a0:	b280      	uxth	r0, r0
 80027a2:	f7fd fd8d 	bl	80002c0 <__aeabi_i2f>
 80027a6:	4601      	mov	r1, r0
 80027a8:	4802      	ldr	r0, [pc, #8]	; (80027b4 <_ZN17CACFrequencyMeter7ExecuteEv+0x34>)
 80027aa:	f7fd fe91 	bl	80004d0 <__aeabi_fdiv>
 80027ae:	60e0      	str	r0, [r4, #12]
	m_PrevTimeStamp = m_CurrentTimeStamp;
 80027b0:	8125      	strh	r5, [r4, #8]
 80027b2:	e7ec      	b.n	800278e <_ZN17CACFrequencyMeter7ExecuteEv+0xe>
 80027b4:	447a0000 	.word	0x447a0000

080027b8 <_ZN17CACFrequencyMeterC1Ev>:
CACFrequencyMeter::CACFrequencyMeter()
 80027b8:	4a02      	ldr	r2, [pc, #8]	; (80027c4 <_ZN17CACFrequencyMeterC1Ev+0xc>)
 80027ba:	6002      	str	r2, [r0, #0]
	m_Freq = 0;
 80027bc:	2200      	movs	r2, #0
 80027be:	60c2      	str	r2, [r0, #12]
}
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	08003708 	.word	0x08003708

080027c8 <_ZN8CTimeoutD1Ev>:
}

CTimeout::~CTimeout()
{
	// TODO Auto-generated destructor stub
}
 80027c8:	4770      	bx	lr

080027ca <_ZN8CTimeoutD0Ev>:
CTimeout::~CTimeout()
 80027ca:	b510      	push	{r4, lr}
 80027cc:	4604      	mov	r4, r0
}
 80027ce:	f000 fb99 	bl	8002f04 <_ZdlPv>
 80027d2:	4620      	mov	r0, r4
 80027d4:	bd10      	pop	{r4, pc}

080027d6 <_ZN8CTimeout4InitEP6ITimer>:
	m_timer = pTimer;
 80027d6:	6041      	str	r1, [r0, #4]
 80027d8:	4770      	bx	lr

080027da <_ZN8CTimeout5ResetEv>:
{
 80027da:	b510      	push	{r4, lr}
 80027dc:	4604      	mov	r4, r0
	m_prevTimer = m_timer->CurrentTicks();
 80027de:	6840      	ldr	r0, [r0, #4]
 80027e0:	6803      	ldr	r3, [r0, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4798      	blx	r3
 80027e6:	8160      	strh	r0, [r4, #10]
	m_hasElapsed = false;
 80027e8:	2300      	movs	r3, #0
 80027ea:	7323      	strb	r3, [r4, #12]
 80027ec:	bd10      	pop	{r4, pc}

080027ee <_ZN8CTimeout9SetExpiryEt>:
{
 80027ee:	b508      	push	{r3, lr}
	m_expiry = tick;
 80027f0:	8101      	strh	r1, [r0, #8]
	Reset();
 80027f2:	f7ff fff2 	bl	80027da <_ZN8CTimeout5ResetEv>
 80027f6:	bd08      	pop	{r3, pc}

080027f8 <_ZN8CTimeout10HasElapsedEv>:
{
 80027f8:	b510      	push	{r4, lr}
 80027fa:	4604      	mov	r4, r0
	if (!m_hasElapsed)
 80027fc:	7b03      	ldrb	r3, [r0, #12]
 80027fe:	b10b      	cbz	r3, 8002804 <_ZN8CTimeout10HasElapsedEv+0xc>
}
 8002800:	7b20      	ldrb	r0, [r4, #12]
 8002802:	bd10      	pop	{r4, pc}
		if ((uint16_t)(m_timer->CurrentTicks() - m_prevTimer) >= m_expiry) m_hasElapsed = true;
 8002804:	6840      	ldr	r0, [r0, #4]
 8002806:	6803      	ldr	r3, [r0, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4798      	blx	r3
 800280c:	8963      	ldrh	r3, [r4, #10]
 800280e:	1ac0      	subs	r0, r0, r3
 8002810:	b280      	uxth	r0, r0
 8002812:	8923      	ldrh	r3, [r4, #8]
 8002814:	4298      	cmp	r0, r3
 8002816:	dbf3      	blt.n	8002800 <_ZN8CTimeout10HasElapsedEv+0x8>
 8002818:	2301      	movs	r3, #1
 800281a:	7323      	strb	r3, [r4, #12]
 800281c:	e7f0      	b.n	8002800 <_ZN8CTimeout10HasElapsedEv+0x8>
	...

08002820 <_ZN8CTimeoutC1Ev>:
CTimeout::CTimeout()
 8002820:	4b01      	ldr	r3, [pc, #4]	; (8002828 <_ZN8CTimeoutC1Ev+0x8>)
 8002822:	6003      	str	r3, [r0, #0]
}
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	08003718 	.word	0x08003718

0800282c <_ZN12CAnalogInputD1Ev>:
}

inline CAnalogInput::~CAnalogInput()
{

}
 800282c:	4770      	bx	lr

0800282e <_ZN12CAnalogInputD0Ev>:
inline CAnalogInput::~CAnalogInput()
 800282e:	b510      	push	{r4, lr}
 8002830:	4604      	mov	r4, r0
}
 8002832:	f000 fb67 	bl	8002f04 <_ZdlPv>
 8002836:	4620      	mov	r0, r4
 8002838:	bd10      	pop	{r4, pc}
	...

0800283c <main>:
#include <ACFrequencyMeter.h>
#include <AnalogInput.h>
#include <HeartBeat.h>

int main(void)
{
 800283c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002840:	f2ad 5dcc 	subw	sp, sp, #1484	; 0x5cc
	// ----------------- INIT BASIC ---------------------------------------
	// all 72MHz clock and flash init
	SystemInit();
 8002844:	f000 faa4 	bl	8002d90 <SystemInit>
	RCC_ADCCLKConfig(RCC_PCLK2_Div8);
 8002848:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 800284c:	f7fe fa34 	bl	8000cb8 <RCC_ADCCLKConfig>
	// peripheral clock enable
	uint32_t apb1Enable = RCC_APB1Periph_SPI2 | RCC_APB1Periph_TIM3 | RCC_APB1Periph_TIM2
			| RCC_APB1Periph_USART3;
	RCC_APB1PeriphClockCmd(apb1Enable, ENABLE);
 8002850:	2101      	movs	r1, #1
 8002852:	4860      	ldr	r0, [pc, #384]	; (80029d4 <main+0x198>)
 8002854:	f7fe fb38 	bl	8000ec8 <RCC_APB1PeriphClockCmd>
	uint32_t apb2Enable = RCC_APB2Periph_ADC1 | RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB
			| RCC_APB2Periph_GPIOC;
	RCC_APB2PeriphClockCmd(apb2Enable, ENABLE);
 8002858:	2101      	movs	r1, #1
 800285a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800285e:	f7fe fb15 	bl	8000e8c <RCC_APB2PeriphClockCmd>
	uint32_t ahbEnable = RCC_AHBPeriph_DMA1;
	RCC_AHBPeriphClockCmd(ahbEnable, ENABLE);
 8002862:	2101      	movs	r1, #1
 8002864:	4608      	mov	r0, r1
 8002866:	f7fe faf3 	bl	8000e50 <RCC_AHBPeriphClockCmd>

	// frequency meter timer init
	TIM_TimeBaseInitTypeDef timer;
	TIM_TimeBaseStructInit(&timer);
 800286a:	f20d 50bc 	addw	r0, sp, #1468	; 0x5bc
 800286e:	f7fe fcc3 	bl	80011f8 <TIM_TimeBaseStructInit>
	timer.TIM_Period = 0xffff;
 8002872:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002876:	f8ad 45c0 	strh.w	r4, [sp, #1472]	; 0x5c0
	timer.TIM_Prescaler = 719; // 10us timer period!
 800287a:	f240 23cf 	movw	r3, #719	; 0x2cf
 800287e:	f8ad 35bc 	strh.w	r3, [sp, #1468]	; 0x5bc
	TIM_TimeBaseInit(TIM3, &timer);
 8002882:	4d55      	ldr	r5, [pc, #340]	; (80029d8 <main+0x19c>)
 8002884:	f20d 51bc 	addw	r1, sp, #1468	; 0x5bc
 8002888:	4628      	mov	r0, r5
 800288a:	f7fe fbe5 	bl	8001058 <TIM_TimeBaseInit>
	TIM_Cmd(TIM3, ENABLE);
 800288e:	2101      	movs	r1, #1
 8002890:	4628      	mov	r0, r5
 8002892:	f7fe fce2 	bl	800125a <TIM_Cmd>

	// main timer init
	TIM_TimeBaseStructInit(&timer);
 8002896:	f20d 50bc 	addw	r0, sp, #1468	; 0x5bc
 800289a:	f7fe fcad 	bl	80011f8 <TIM_TimeBaseStructInit>
	timer.TIM_Period = 0xffff;
 800289e:	f8ad 45c0 	strh.w	r4, [sp, #1472]	; 0x5c0
	timer.TIM_Prescaler = 7199; // 100us timer period!
 80028a2:	f641 431f 	movw	r3, #7199	; 0x1c1f
 80028a6:	f8ad 35bc 	strh.w	r3, [sp, #1468]	; 0x5bc
	TIM_TimeBaseInit(TIM2, &timer);
 80028aa:	f20d 51bc 	addw	r1, sp, #1468	; 0x5bc
 80028ae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80028b2:	f7fe fbd1 	bl	8001058 <TIM_TimeBaseInit>
	TIM_Cmd(TIM2, ENABLE);
 80028b6:	2101      	movs	r1, #1
 80028b8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80028bc:	f7fe fccd 	bl	800125a <TIM_Cmd>

	GPIO_InitTypeDef sGpio;
	// heartbeat
	sGpio.GPIO_Pin = GPIO_Pin_13;
 80028c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028c4:	f8ad 35b8 	strh.w	r3, [sp, #1464]	; 0x5b8
	sGpio.GPIO_Speed = GPIO_Speed_2MHz;
 80028c8:	2402      	movs	r4, #2
 80028ca:	f88d 45ba 	strb.w	r4, [sp, #1466]	; 0x5ba
	sGpio.GPIO_Mode = GPIO_Mode_Out_OD;
 80028ce:	2314      	movs	r3, #20
 80028d0:	f88d 35bb 	strb.w	r3, [sp, #1467]	; 0x5bb
	GPIO_Init(GPIOC, &sGpio); // pc13
 80028d4:	f505 3586 	add.w	r5, r5, #68608	; 0x10c00
 80028d8:	f50d 61b7 	add.w	r1, sp, #1464	; 0x5b8
 80028dc:	4628      	mov	r0, r5
 80028de:	f7fe f91b 	bl	8000b18 <GPIO_Init>

	CSTM32F10xTimer MainTimer;
 80028e2:	f50d 60b6 	add.w	r0, sp, #1456	; 0x5b0
 80028e6:	f7ff fe57 	bl	8002598 <_ZN15CSTM32F10xTimerC1Ev>
	MainTimer.Init(TIM2);
 80028ea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80028ee:	f50d 60b6 	add.w	r0, sp, #1456	; 0x5b0
 80028f2:	f7ff fe4e 	bl	8002592 <_ZN15CSTM32F10xTimer4InitEP11TIM_TypeDef>
	CSTM32F10xGpio GpioHeartBeat;
 80028f6:	f50d 60b4 	add.w	r0, sp, #1440	; 0x5a0
 80028fa:	f7ff fdd9 	bl	80024b0 <_ZN14CSTM32F10xGpioC1Ev>
	GpioHeartBeat.Init(GPIOC, 13);
 80028fe:	220d      	movs	r2, #13
 8002900:	4629      	mov	r1, r5
 8002902:	f50d 60b4 	add.w	r0, sp, #1440	; 0x5a0
 8002906:	f7ff fdc6 	bl	8002496 <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh>
	CHeartBeat HeartBeat;
 800290a:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
 800290e:	f7ff fca1 	bl	8002254 <_ZN10CHeartBeatC1Ev>
	HeartBeat.Init(&GpioHeartBeat, &MainTimer, 5000);
 8002912:	f241 3388 	movw	r3, #5000	; 0x1388
 8002916:	f50d 62b6 	add.w	r2, sp, #1456	; 0x5b0
 800291a:	f50d 61b4 	add.w	r1, sp, #1440	; 0x5a0
 800291e:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
 8002922:	f7ff fc6e 	bl	8002202 <_ZN10CHeartBeat4InitEP5IGpioP6ITimert>
//	GPIO_Init(GPIOB, &sGpio);

	// --------------------------------------------------------------------

	// --------------- UART Initialization -----------------------------
	sGpio.GPIO_Pin = GPIO_Pin_11; // rx3
 8002926:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800292a:	f8ad 35b8 	strh.w	r3, [sp, #1464]	; 0x5b8
	sGpio.GPIO_Speed = GPIO_Speed_2MHz;
 800292e:	f88d 45ba 	strb.w	r4, [sp, #1466]	; 0x5ba
	sGpio.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8002932:	2304      	movs	r3, #4
 8002934:	f88d 35bb 	strb.w	r3, [sp, #1467]	; 0x5bb
	GPIO_Init(GPIOB, &sGpio);
 8002938:	f5a5 6580 	sub.w	r5, r5, #1024	; 0x400
 800293c:	f50d 61b7 	add.w	r1, sp, #1464	; 0x5b8
 8002940:	4628      	mov	r0, r5
 8002942:	f7fe f8e9 	bl	8000b18 <GPIO_Init>
	sGpio.GPIO_Pin = GPIO_Pin_10; // tx3
 8002946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800294a:	f8ad 35b8 	strh.w	r3, [sp, #1464]	; 0x5b8
	sGpio.GPIO_Speed = GPIO_Speed_2MHz;
 800294e:	f88d 45ba 	strb.w	r4, [sp, #1466]	; 0x5ba
	sGpio.GPIO_Mode = GPIO_Mode_AF_PP;
 8002952:	2318      	movs	r3, #24
 8002954:	f88d 35bb 	strb.w	r3, [sp, #1467]	; 0x5bb
	GPIO_Init(GPIOB, &sGpio);
 8002958:	f50d 61b7 	add.w	r1, sp, #1464	; 0x5b8
 800295c:	4628      	mov	r0, r5
 800295e:	f7fe f8db 	bl	8000b18 <GPIO_Init>

	USART_InitTypeDef usart;
	usart.USART_BaudRate = 9600;
 8002962:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002966:	f8cd 3578 	str.w	r3, [sp, #1400]	; 0x578
	usart.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800296a:	2300      	movs	r3, #0
 800296c:	f8ad 3584 	strh.w	r3, [sp, #1412]	; 0x584
	usart.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002970:	220c      	movs	r2, #12
 8002972:	f8ad 2582 	strh.w	r2, [sp, #1410]	; 0x582
	usart.USART_Parity = USART_Parity_No;
 8002976:	f8ad 3580 	strh.w	r3, [sp, #1408]	; 0x580
	usart.USART_StopBits = USART_StopBits_1;
 800297a:	f8ad 357e 	strh.w	r3, [sp, #1406]	; 0x57e
	usart.USART_WordLength = USART_WordLength_8b;
 800297e:	f8ad 357c 	strh.w	r3, [sp, #1404]	; 0x57c
	USART_Init(USART3, &usart);
 8002982:	4c16      	ldr	r4, [pc, #88]	; (80029dc <main+0x1a0>)
 8002984:	f50d 61af 	add.w	r1, sp, #1400	; 0x578
 8002988:	4620      	mov	r0, r4
 800298a:	f7fe ff1d 	bl	80017c8 <USART_Init>
	USART_Cmd(USART3, ENABLE);
 800298e:	2101      	movs	r1, #1
 8002990:	4620      	mov	r0, r4
 8002992:	f7fe ffd3 	bl	800193c <USART_Cmd>
	CSTM32F10xUSART Uart;
 8002996:	a8b4      	add	r0, sp, #720	; 0x2d0
 8002998:	f7ff fe16 	bl	80025c8 <_ZN15CSTM32F10xUSARTC1Ev>
	Uart.Init(USART3);
 800299c:	4621      	mov	r1, r4
 800299e:	a8b4      	add	r0, sp, #720	; 0x2d0
 80029a0:	f7ff fe10 	bl	80025c4 <_ZN15CSTM32F10xUSART4InitEP13USART_TypeDef>
	// -----------------------------------------------------------------

	// ------------------------- Init ADC ------------------------------
	CSTM32F10xADC Adc[2];
 80029a4:	2501      	movs	r5, #1
 80029a6:	acb0      	add	r4, sp, #704	; 0x2c0
 80029a8:	2d00      	cmp	r5, #0
 80029aa:	db05      	blt.n	80029b8 <main+0x17c>
 80029ac:	4620      	mov	r0, r4
 80029ae:	f7ff fc7f 	bl	80022b0 <_ZN13CSTM32F10xADCC1Ev>
 80029b2:	3408      	adds	r4, #8
 80029b4:	3d01      	subs	r5, #1
 80029b6:	e7f7      	b.n	80029a8 <main+0x16c>
 80029b8:	2400      	movs	r4, #0
	uint16_t adcBuffer[2];
	for (uint16_t i = 0; i < 2; i++)
 80029ba:	2c01      	cmp	r4, #1
 80029bc:	dc10      	bgt.n	80029e0 <main+0x1a4>
	{
		Adc[i].Init(&adcBuffer[i]);
 80029be:	abaf      	add	r3, sp, #700	; 0x2bc
 80029c0:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 80029c4:	abb0      	add	r3, sp, #704	; 0x2c0
 80029c6:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
 80029ca:	f7ff fc6e 	bl	80022aa <_ZN13CSTM32F10xADC4InitEPt>
	for (uint16_t i = 0; i < 2; i++)
 80029ce:	3401      	adds	r4, #1
 80029d0:	b2a4      	uxth	r4, r4
 80029d2:	e7f2      	b.n	80029ba <main+0x17e>
 80029d4:	00044003 	.word	0x00044003
 80029d8:	40000400 	.word	0x40000400
 80029dc:	40004800 	.word	0x40004800
	}
//	 adc io init
	GPIO_StructInit(&sGpio);
 80029e0:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
 80029e4:	f7fe f954 	bl	8000c90 <GPIO_StructInit>
	sGpio.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1; // adc0 adc1
 80029e8:	f04f 0803 	mov.w	r8, #3
 80029ec:	f8ad 85b8 	strh.w	r8, [sp, #1464]	; 0x5b8
	sGpio.GPIO_Mode = GPIO_Mode_AIN;
 80029f0:	2500      	movs	r5, #0
 80029f2:	f88d 55bb 	strb.w	r5, [sp, #1467]	; 0x5bb
	GPIO_Init(GPIOA, &sGpio);
 80029f6:	4fb1      	ldr	r7, [pc, #708]	; (8002cbc <main+0x480>)
 80029f8:	f50d 61b7 	add.w	r1, sp, #1464	; 0x5b8
 80029fc:	4638      	mov	r0, r7
 80029fe:	f7fe f88b 	bl	8000b18 <GPIO_Init>

	// adc dma init
	DMA_InitTypeDef dma;
	DMA_StructInit(&dma);
 8002a02:	a8a4      	add	r0, sp, #656	; 0x290
 8002a04:	f7fd fff4 	bl	80009f0 <DMA_StructInit>
	dma.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8002a08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a0c:	93ab      	str	r3, [sp, #684]	; 0x2ac
	dma.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8002a0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a12:	93aa      	str	r3, [sp, #680]	; 0x2a8
	dma.DMA_DIR = DMA_DIR_PeripheralSRC;
 8002a14:	95a6      	str	r5, [sp, #664]	; 0x298
	dma.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8002a16:	2380      	movs	r3, #128	; 0x80
 8002a18:	93a9      	str	r3, [sp, #676]	; 0x2a4
	dma.DMA_Mode = DMA_Mode_Circular;
 8002a1a:	2320      	movs	r3, #32
 8002a1c:	93ac      	str	r3, [sp, #688]	; 0x2b0
	dma.DMA_BufferSize = 2;
 8002a1e:	2602      	movs	r6, #2
 8002a20:	96a7      	str	r6, [sp, #668]	; 0x29c
	dma.DMA_Priority = DMA_Priority_Low;
 8002a22:	95ad      	str	r5, [sp, #692]	; 0x2b4
	dma.DMA_MemoryBaseAddr = (uint32_t)adcBuffer;
 8002a24:	abaf      	add	r3, sp, #700	; 0x2bc
 8002a26:	93a5      	str	r3, [sp, #660]	; 0x294
	dma.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
 8002a28:	4ba5      	ldr	r3, [pc, #660]	; (8002cc0 <main+0x484>)
 8002a2a:	93a4      	str	r3, [sp, #656]	; 0x290
	DMA_Init(DMA1_Channel1, &dma);
 8002a2c:	4ca5      	ldr	r4, [pc, #660]	; (8002cc4 <main+0x488>)
 8002a2e:	a9a4      	add	r1, sp, #656	; 0x290
 8002a30:	4620      	mov	r0, r4
 8002a32:	f7fd ff9f 	bl	8000974 <DMA_Init>
	DMA_Cmd(DMA1_Channel1, ENABLE);
 8002a36:	2101      	movs	r1, #1
 8002a38:	4620      	mov	r0, r4
 8002a3a:	f7fe f803 	bl	8000a44 <DMA_Cmd>

	// adc peripheral init
	ADC_InitTypeDef adc;
	ADC_StructInit(&adc);
 8002a3e:	a89f      	add	r0, sp, #636	; 0x27c
 8002a40:	f7fd fe54 	bl	80006ec <ADC_StructInit>
	adc.ADC_ContinuousConvMode = ENABLE;
 8002a44:	2401      	movs	r4, #1
 8002a46:	f88d 4281 	strb.w	r4, [sp, #641]	; 0x281
	adc.ADC_NbrOfChannel = 2;
 8002a4a:	f88d 628c 	strb.w	r6, [sp, #652]	; 0x28c
	adc.ADC_ScanConvMode = ENABLE;
 8002a4e:	f88d 4280 	strb.w	r4, [sp, #640]	; 0x280
	ADC_Init(ADC1, &adc);
 8002a52:	f8df 9290 	ldr.w	r9, [pc, #656]	; 8002ce4 <main+0x4a8>
 8002a56:	a99f      	add	r1, sp, #636	; 0x27c
 8002a58:	4648      	mov	r0, r9
 8002a5a:	f7fd fdf5 	bl	8000648 <ADC_Init>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_239Cycles5);
 8002a5e:	2307      	movs	r3, #7
 8002a60:	4622      	mov	r2, r4
 8002a62:	4629      	mov	r1, r5
 8002a64:	4648      	mov	r0, r9
 8002a66:	f7fd febc 	bl	80007e2 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 2, ADC_SampleTime_239Cycles5);
 8002a6a:	2307      	movs	r3, #7
 8002a6c:	4632      	mov	r2, r6
 8002a6e:	4621      	mov	r1, r4
 8002a70:	4648      	mov	r0, r9
 8002a72:	f7fd feb6 	bl	80007e2 <ADC_RegularChannelConfig>
	ADC1->CR2 |= 7 << 17; // external trigger on software, NO SPL IMPLEMENTATION, WTF !!!
 8002a76:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8002a7a:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8002a7e:	f8c9 3008 	str.w	r3, [r9, #8]
	ADC_DMACmd(ADC1, ENABLE);
 8002a82:	4621      	mov	r1, r4
 8002a84:	4648      	mov	r0, r9
 8002a86:	f7fd fe67 	bl	8000758 <ADC_DMACmd>
	ADC_Cmd(ADC1, ENABLE);
 8002a8a:	4621      	mov	r1, r4
 8002a8c:	4648      	mov	r0, r9
 8002a8e:	f7fd fe48 	bl	8000722 <ADC_Cmd>
	ADC_SoftwareStartConvCmd(ADC1, ENABLE);
 8002a92:	4621      	mov	r1, r4
 8002a94:	4648      	mov	r0, r9
 8002a96:	f7fd fe89 	bl	80007ac <ADC_SoftwareStartConvCmd>
	ADC_StartCalibration(ADC1);
 8002a9a:	4648      	mov	r0, r9
 8002a9c:	f7fd fe77 	bl	800078e <ADC_StartCalibration>

	// -----------------------------------------------------------------

	// ------------------------- Init input capture ------------------------------
	GPIO_StructInit(&sGpio);
 8002aa0:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
 8002aa4:	f7fe f8f4 	bl	8000c90 <GPIO_StructInit>
	sGpio.GPIO_Pin = GPIO_Pin_6; // tim3 channel 1
 8002aa8:	2340      	movs	r3, #64	; 0x40
 8002aaa:	f8ad 35b8 	strh.w	r3, [sp, #1464]	; 0x5b8
	sGpio.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8002aae:	2304      	movs	r3, #4
 8002ab0:	f88d 35bb 	strb.w	r3, [sp, #1467]	; 0x5bb
	sGpio.GPIO_Speed = GPIO_Speed_2MHz;
 8002ab4:	f88d 65ba 	strb.w	r6, [sp, #1466]	; 0x5ba
	GPIO_Init(GPIOA, &sGpio);
 8002ab8:	f50d 61b7 	add.w	r1, sp, #1464	; 0x5b8
 8002abc:	4638      	mov	r0, r7
 8002abe:	f7fe f82b 	bl	8000b18 <GPIO_Init>

	TIM_ICInitTypeDef sInputCapture;
	TIM_ICStructInit(&sInputCapture);
 8002ac2:	a89c      	add	r0, sp, #624	; 0x270
 8002ac4:	f7fe fbb1 	bl	800122a <TIM_ICStructInit>
	sInputCapture.TIM_Channel = TIM_Channel_1;
 8002ac8:	f8ad 5270 	strh.w	r5, [sp, #624]	; 0x270
	sInputCapture.TIM_ICSelection = TIM_ICSelection_DirectTI;
 8002acc:	f8ad 4274 	strh.w	r4, [sp, #628]	; 0x274
	sInputCapture.TIM_ICPolarity = TIM_ICPolarity_Falling;
 8002ad0:	f8ad 6272 	strh.w	r6, [sp, #626]	; 0x272
	sInputCapture.TIM_ICFilter = 0x9;
 8002ad4:	f04f 0a09 	mov.w	sl, #9
 8002ad8:	f8ad a278 	strh.w	sl, [sp, #632]	; 0x278
	TIM_ICInit(TIM3, &sInputCapture);
 8002adc:	f5a9 3990 	sub.w	r9, r9, #73728	; 0x12000
 8002ae0:	a99c      	add	r1, sp, #624	; 0x270
 8002ae2:	4648      	mov	r0, r9
 8002ae4:	f7fe fb34 	bl	8001150 <TIM_ICInit>
	CSTM32F10xInputCapture InputCapture;
 8002ae8:	a899      	add	r0, sp, #612	; 0x264
 8002aea:	f7ff fd41 	bl	8002570 <_ZN22CSTM32F10xInputCaptureC1Ev>
	InputCapture.Init(TIM3, TIM_Channel_1);
 8002aee:	462a      	mov	r2, r5
 8002af0:	4649      	mov	r1, r9
 8002af2:	a899      	add	r0, sp, #612	; 0x264
 8002af4:	f7ff fd39 	bl	800256a <_ZN22CSTM32F10xInputCapture4InitEP11TIM_TypeDeft>

	// ------------------------- Init p10 ------------------------------
	// spi init
	GPIO_StructInit(&sGpio);
 8002af8:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
 8002afc:	f7fe f8c8 	bl	8000c90 <GPIO_StructInit>
	sGpio.GPIO_Pin = GPIO_Pin_15 | GPIO_Pin_13; // mosi2 sck2
 8002b00:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002b04:	f8ad 35b8 	strh.w	r3, [sp, #1464]	; 0x5b8
	sGpio.GPIO_Speed = GPIO_Speed_50MHz;
 8002b08:	f88d 85ba 	strb.w	r8, [sp, #1466]	; 0x5ba
	sGpio.GPIO_Mode = GPIO_Mode_AF_PP;
 8002b0c:	f04f 0918 	mov.w	r9, #24
 8002b10:	f88d 95bb 	strb.w	r9, [sp, #1467]	; 0x5bb
	GPIO_Init(GPIOB, &sGpio);
 8002b14:	f50d 61b7 	add.w	r1, sp, #1464	; 0x5b8
 8002b18:	486b      	ldr	r0, [pc, #428]	; (8002cc8 <main+0x48c>)
 8002b1a:	f7fd fffd 	bl	8000b18 <GPIO_Init>

	// output enable and chip select (SCLK)
	GPIO_StructInit(&sGpio);
 8002b1e:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
 8002b22:	f7fe f8b5 	bl	8000c90 <GPIO_StructInit>
	sGpio.GPIO_Pin = GPIO_Pin_14 | GPIO_Pin_12;
 8002b26:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002b2a:	f8ad 35b8 	strh.w	r3, [sp, #1464]	; 0x5b8
	sGpio.GPIO_Speed = GPIO_Speed_50MHz;
 8002b2e:	f88d 85ba 	strb.w	r8, [sp, #1466]	; 0x5ba
	sGpio.GPIO_Mode = GPIO_Mode_Out_PP;
 8002b32:	f04f 0b10 	mov.w	fp, #16
 8002b36:	f88d b5bb 	strb.w	fp, [sp, #1467]	; 0x5bb
	GPIO_Init(GPIOB, &sGpio);
 8002b3a:	f50d 61b7 	add.w	r1, sp, #1464	; 0x5b8
 8002b3e:	4862      	ldr	r0, [pc, #392]	; (8002cc8 <main+0x48c>)
 8002b40:	f7fd ffea 	bl	8000b18 <GPIO_Init>
	CSTM32F10xGpio pOE;
 8002b44:	a895      	add	r0, sp, #596	; 0x254
 8002b46:	f7ff fcb3 	bl	80024b0 <_ZN14CSTM32F10xGpioC1Ev>
	pOE.Init(GPIOB, 14);
 8002b4a:	220e      	movs	r2, #14
 8002b4c:	495e      	ldr	r1, [pc, #376]	; (8002cc8 <main+0x48c>)
 8002b4e:	a895      	add	r0, sp, #596	; 0x254
 8002b50:	f7ff fca1 	bl	8002496 <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh>
	CSTM32F10xGpio pSS;
 8002b54:	a891      	add	r0, sp, #580	; 0x244
 8002b56:	f7ff fcab 	bl	80024b0 <_ZN14CSTM32F10xGpioC1Ev>
	pSS.Init(GPIOB, 12);
 8002b5a:	220c      	movs	r2, #12
 8002b5c:	495a      	ldr	r1, [pc, #360]	; (8002cc8 <main+0x48c>)
 8002b5e:	a891      	add	r0, sp, #580	; 0x244
 8002b60:	f7ff fc99 	bl	8002496 <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh>

	// a pa9 , b pa8
	GPIO_StructInit(&sGpio);
 8002b64:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
 8002b68:	f7fe f892 	bl	8000c90 <GPIO_StructInit>
	sGpio.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_8;
 8002b6c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b70:	f8ad 35b8 	strh.w	r3, [sp, #1464]	; 0x5b8
	sGpio.GPIO_Speed = GPIO_Speed_50MHz;
 8002b74:	f88d 85ba 	strb.w	r8, [sp, #1466]	; 0x5ba
	sGpio.GPIO_Mode = GPIO_Mode_Out_PP;
 8002b78:	f88d b5bb 	strb.w	fp, [sp, #1467]	; 0x5bb
	GPIO_Init(GPIOA, &sGpio);
 8002b7c:	f50d 61b7 	add.w	r1, sp, #1464	; 0x5b8
 8002b80:	4638      	mov	r0, r7
 8002b82:	f7fd ffc9 	bl	8000b18 <GPIO_Init>
	CSTM32F10xGpio pA;
 8002b86:	a88d      	add	r0, sp, #564	; 0x234
 8002b88:	f7ff fc92 	bl	80024b0 <_ZN14CSTM32F10xGpioC1Ev>
	pA.Init(GPIOA, 9);
 8002b8c:	4652      	mov	r2, sl
 8002b8e:	4639      	mov	r1, r7
 8002b90:	a88d      	add	r0, sp, #564	; 0x234
 8002b92:	f7ff fc80 	bl	8002496 <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh>
	CSTM32F10xGpio pB;
 8002b96:	a889      	add	r0, sp, #548	; 0x224
 8002b98:	f7ff fc8a 	bl	80024b0 <_ZN14CSTM32F10xGpioC1Ev>
	pB.Init(GPIOA, 8);
 8002b9c:	2208      	movs	r2, #8
 8002b9e:	4639      	mov	r1, r7
 8002ba0:	a889      	add	r0, sp, #548	; 0x224
 8002ba2:	f7ff fc78 	bl	8002496 <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh>

	// spi DMA init
	CSTM32F10xDMA SpiDma;
 8002ba6:	a87a      	add	r0, sp, #488	; 0x1e8
 8002ba8:	f7ff fc4c 	bl	8002444 <_ZN13CSTM32F10xDMAC1Ev>
	SpiDma.Init(DMA1, DMA1_Channel5, DMA_Mode_Normal, DMA_Priority_VeryHigh);
 8002bac:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	462b      	mov	r3, r5
 8002bb4:	4a45      	ldr	r2, [pc, #276]	; (8002ccc <main+0x490>)
 8002bb6:	4946      	ldr	r1, [pc, #280]	; (8002cd0 <main+0x494>)
 8002bb8:	a87a      	add	r0, sp, #488	; 0x1e8
 8002bba:	f7ff fbc1 	bl	8002340 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm>

	// spi init
	SPI_InitTypeDef spiStruct;
	SPI_StructInit(&spiStruct);
 8002bbe:	a875      	add	r0, sp, #468	; 0x1d4
 8002bc0:	f7fe f9e3 	bl	8000f8a <SPI_StructInit>
	spiStruct.SPI_Mode = SPI_Mode_Master;
 8002bc4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002bc8:	f8ad 31d6 	strh.w	r3, [sp, #470]	; 0x1d6
	spiStruct.SPI_Direction = SPI_Direction_1Line_Tx;
 8002bcc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002bd0:	f8ad 31d4 	strh.w	r3, [sp, #468]	; 0x1d4
	spiStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 8002bd4:	f8ad 91e0 	strh.w	r9, [sp, #480]	; 0x1e0
	spiStruct.SPI_NSS = SPI_NSS_Soft;
 8002bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bdc:	f8ad 31de 	strh.w	r3, [sp, #478]	; 0x1de
	SPI_Init(SPI2, &spiStruct);
 8002be0:	4d3c      	ldr	r5, [pc, #240]	; (8002cd4 <main+0x498>)
 8002be2:	a975      	add	r1, sp, #468	; 0x1d4
 8002be4:	4628      	mov	r0, r5
 8002be6:	f7fe f98d 	bl	8000f04 <SPI_Init>
	SPI_I2S_DMACmd(SPI2, SPI_I2S_DMAReq_Tx, ENABLE);
 8002bea:	4622      	mov	r2, r4
 8002bec:	4631      	mov	r1, r6
 8002bee:	4628      	mov	r0, r5
 8002bf0:	f7fe fa0e 	bl	8001010 <SPI_I2S_DMACmd>
	SPI_Cmd(SPI2, ENABLE);
 8002bf4:	4621      	mov	r1, r4
 8002bf6:	4628      	mov	r0, r5
 8002bf8:	f7fe f9eb 	bl	8000fd2 <SPI_Cmd>

	// ----------------------------------------------------------------

	// init our basic need !
	// frequency meter
	CACFrequencyMeter ACFrequencyMeter;
 8002bfc:	a871      	add	r0, sp, #452	; 0x1c4
 8002bfe:	f7ff fddb 	bl	80027b8 <_ZN17CACFrequencyMeterC1Ev>
	ACFrequencyMeter.Init(&InputCapture);
 8002c02:	a999      	add	r1, sp, #612	; 0x264
 8002c04:	a871      	add	r0, sp, #452	; 0x1c4
 8002c06:	f7ff fdb9 	bl	800277c <_ZN17CACFrequencyMeter4InitEP13IInputCapture>
	// voltage and current measurement
	CAnalogInput AnalogInput[2];
 8002c0a:	ab69      	add	r3, sp, #420	; 0x1a4
 8002c0c:	2c00      	cmp	r4, #0
 8002c0e:	db0b      	blt.n	8002c28 <main+0x3ec>
inline CAnalogInput::CAnalogInput()
 8002c10:	4a31      	ldr	r2, [pc, #196]	; (8002cd8 <main+0x49c>)
 8002c12:	601a      	str	r2, [r3, #0]
	m_pAdc = NULL;
 8002c14:	2200      	movs	r2, #0
 8002c16:	60da      	str	r2, [r3, #12]
	m_Scale = 1;
 8002c18:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002c1c:	605a      	str	r2, [r3, #4]
	m_Offset = 0;
 8002c1e:	2200      	movs	r2, #0
 8002c20:	609a      	str	r2, [r3, #8]
 8002c22:	3310      	adds	r3, #16
 8002c24:	3c01      	subs	r4, #1
 8002c26:	e7f1      	b.n	8002c0c <main+0x3d0>

	DMD Dmd(2, 1);
 8002c28:	2201      	movs	r2, #1
 8002c2a:	2102      	movs	r1, #2
 8002c2c:	a80a      	add	r0, sp, #40	; 0x28
 8002c2e:	f7fe ff59 	bl	8001ae4 <_ZN3DMDC1Ehh>
	Dmd.SelectFont(Arial_14);
 8002c32:	492a      	ldr	r1, [pc, #168]	; (8002cdc <main+0x4a0>)
 8002c34:	a80a      	add	r0, sp, #40	; 0x28
 8002c36:	f7ff f946 	bl	8001ec6 <_ZN3DMD10SelectFontEPKh>
	Dmd.Init(SPI2, &SpiDma, &MainTimer, &pSS, &pA, &pB, &pOE);
 8002c3a:	230a      	movs	r3, #10
 8002c3c:	9304      	str	r3, [sp, #16]
 8002c3e:	ab95      	add	r3, sp, #596	; 0x254
 8002c40:	9303      	str	r3, [sp, #12]
 8002c42:	ab89      	add	r3, sp, #548	; 0x224
 8002c44:	9302      	str	r3, [sp, #8]
 8002c46:	ab8d      	add	r3, sp, #564	; 0x234
 8002c48:	9301      	str	r3, [sp, #4]
 8002c4a:	ab91      	add	r3, sp, #580	; 0x244
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	f50d 63b6 	add.w	r3, sp, #1456	; 0x5b0
 8002c52:	aa7a      	add	r2, sp, #488	; 0x1e8
 8002c54:	491f      	ldr	r1, [pc, #124]	; (8002cd4 <main+0x498>)
 8002c56:	a80a      	add	r0, sp, #40	; 0x28
 8002c58:	f7fe ff78 	bl	8001b4c <_ZN3DMD4InitEP11SPI_TypeDefP4IDmaP6ITimerP5IGpioS7_S7_S7_t>
	for (uint16_t i = 0; i < 2; i++)
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	dc09      	bgt.n	8002c76 <main+0x43a>
	{
		AnalogInput[i].Initialize(&Adc[i]);
 8002c62:	aab0      	add	r2, sp, #704	; 0x2c0
 8002c64:	eb02 01c3 	add.w	r1, r2, r3, lsl #3

inline void CAnalogInput::Initialize(IAdc* pAdc)
{
	m_pAdc = pAdc;
 8002c68:	aa69      	add	r2, sp, #420	; 0x1a4
 8002c6a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8002c6e:	60d1      	str	r1, [r2, #12]
	for (uint16_t i = 0; i < 2; i++)
 8002c70:	3301      	adds	r3, #1
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	e7f3      	b.n	8002c5e <main+0x422>
	}
	CTimeout timeout;
 8002c76:	a806      	add	r0, sp, #24
 8002c78:	f7ff fdd2 	bl	8002820 <_ZN8CTimeoutC1Ev>
	timeout.Init(&MainTimer);
 8002c7c:	f50d 61b6 	add.w	r1, sp, #1456	; 0x5b0
 8002c80:	a806      	add	r0, sp, #24
 8002c82:	f7ff fda8 	bl	80027d6 <_ZN8CTimeout4InitEP6ITimer>
	timeout.SetExpiry(500);
 8002c86:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002c8a:	a806      	add	r0, sp, #24
 8002c8c:	f7ff fdaf 	bl	80027ee <_ZN8CTimeout9SetExpiryEt>
	const char *text = "https://github.com/ariefismail/ac_power_meter.git";
	Dmd.DrawMarquee(text,strlen(text),0,0);
 8002c90:	2300      	movs	r3, #0
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	2231      	movs	r2, #49	; 0x31
 8002c96:	4912      	ldr	r1, [pc, #72]	; (8002ce0 <main+0x4a4>)
 8002c98:	a80a      	add	r0, sp, #40	; 0x28
 8002c9a:	f7ff fa7a 	bl	8002192 <_ZN3DMD11DrawMarqueeEPKchss>

	while (1)
	{
		ACFrequencyMeter.Execute();
 8002c9e:	a871      	add	r0, sp, #452	; 0x1c4
 8002ca0:	f7ff fd6e 	bl	8002780 <_ZN17CACFrequencyMeter7ExecuteEv>
		Dmd.Execute();
 8002ca4:	a80a      	add	r0, sp, #40	; 0x28
 8002ca6:	f7ff f81d 	bl	8001ce4 <_ZN3DMD7ExecuteEv>
		HeartBeat.Execute();
 8002caa:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
 8002cae:	f7ff fab5 	bl	800221c <_ZN10CHeartBeat7ExecuteEv>
		Uart.Execute();
 8002cb2:	a8b4      	add	r0, sp, #720	; 0x2d0
 8002cb4:	f7ff fd53 	bl	800275e <_ZN15CSTM32F10xUSART7ExecuteEv>
 8002cb8:	e7f1      	b.n	8002c9e <main+0x462>
 8002cba:	bf00      	nop
 8002cbc:	40010800 	.word	0x40010800
 8002cc0:	4001244c 	.word	0x4001244c
 8002cc4:	40020008 	.word	0x40020008
 8002cc8:	40010c00 	.word	0x40010c00
 8002ccc:	40020058 	.word	0x40020058
 8002cd0:	40020000 	.word	0x40020000
 8002cd4:	40003800 	.word	0x40003800
 8002cd8:	08003728 	.word	0x08003728
 8002cdc:	08003730 	.word	0x08003730
 8002ce0:	08003be0 	.word	0x08003be0
 8002ce4:	40012400 	.word	0x40012400

08002ce8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ce8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d20 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002cec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002cee:	e003      	b.n	8002cf8 <LoopCopyDataInit>

08002cf0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	; (8002d24 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8002cf2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002cf4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002cf6:	3104      	adds	r1, #4

08002cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002cf8:	480b      	ldr	r0, [pc, #44]	; (8002d28 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8002cfa:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8002cfc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002cfe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002d00:	d3f6      	bcc.n	8002cf0 <CopyDataInit>
	ldr	r2, =_sbss
 8002d02:	4a0b      	ldr	r2, [pc, #44]	; (8002d30 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8002d04:	e002      	b.n	8002d0c <LoopFillZerobss>

08002d06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002d06:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002d08:	f842 3b04 	str.w	r3, [r2], #4

08002d0c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002d0c:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8002d0e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002d10:	d3f9      	bcc.n	8002d06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d12:	f000 f83d 	bl	8002d90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d16:	f000 f8f7 	bl	8002f08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d1a:	f7ff fd8f 	bl	800283c <main>
	bx	lr
 8002d1e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d20:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8002d24:	08003c24 	.word	0x08003c24
	ldr	r0, =_sdata
 8002d28:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002d2c:	20000518 	.word	0x20000518
	ldr	r2, =_sbss
 8002d30:	20000518 	.word	0x20000518
	ldr	r3, = _ebss
 8002d34:	2000057c 	.word	0x2000057c

08002d38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d38:	e7fe      	b.n	8002d38 <ADC1_2_IRQHandler>

08002d3a <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	af00      	add	r7, sp, #0
}
 8002d3e:	bf00      	nop
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bc80      	pop	{r7}
 8002d44:	4770      	bx	lr

08002d46 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002d46:	b480      	push	{r7}
 8002d48:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002d4a:	e7fe      	b.n	8002d4a <HardFault_Handler+0x4>

08002d4c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002d50:	e7fe      	b.n	8002d50 <MemManage_Handler+0x4>

08002d52 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002d52:	b480      	push	{r7}
 8002d54:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002d56:	e7fe      	b.n	8002d56 <BusFault_Handler+0x4>

08002d58 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002d5c:	e7fe      	b.n	8002d5c <UsageFault_Handler+0x4>

08002d5e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	af00      	add	r7, sp, #0
}
 8002d62:	bf00      	nop
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr

08002d6a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	af00      	add	r7, sp, #0
}
 8002d6e:	bf00      	nop
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr

08002d76 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002d76:	b480      	push	{r7}
 8002d78:	af00      	add	r7, sp, #0
}
 8002d7a:	bf00      	nop
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr

08002d82 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8002d82:	b480      	push	{r7}
 8002d84:	af00      	add	r7, sp, #0
}
 8002d86:	bf00      	nop
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr
	...

08002d90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002d94:	4a15      	ldr	r2, [pc, #84]	; (8002dec <SystemInit+0x5c>)
 8002d96:	4b15      	ldr	r3, [pc, #84]	; (8002dec <SystemInit+0x5c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f043 0301 	orr.w	r3, r3, #1
 8002d9e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8002da0:	4912      	ldr	r1, [pc, #72]	; (8002dec <SystemInit+0x5c>)
 8002da2:	4b12      	ldr	r3, [pc, #72]	; (8002dec <SystemInit+0x5c>)
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <SystemInit+0x60>)
 8002da8:	4013      	ands	r3, r2
 8002daa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002dac:	4a0f      	ldr	r2, [pc, #60]	; (8002dec <SystemInit+0x5c>)
 8002dae:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <SystemInit+0x5c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002dbc:	4a0b      	ldr	r2, [pc, #44]	; (8002dec <SystemInit+0x5c>)
 8002dbe:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <SystemInit+0x5c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dc6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002dc8:	4a08      	ldr	r2, [pc, #32]	; (8002dec <SystemInit+0x5c>)
 8002dca:	4b08      	ldr	r3, [pc, #32]	; (8002dec <SystemInit+0x5c>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002dd2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8002dd4:	4b05      	ldr	r3, [pc, #20]	; (8002dec <SystemInit+0x5c>)
 8002dd6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002dda:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8002ddc:	f000 f80c 	bl	8002df8 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002de0:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <SystemInit+0x64>)
 8002de2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002de6:	609a      	str	r2, [r3, #8]
#endif 
}
 8002de8:	bf00      	nop
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40021000 	.word	0x40021000
 8002df0:	f8ff0000 	.word	0xf8ff0000
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8002dfc:	f000 f802 	bl	8002e04 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8002e00:	bf00      	nop
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	607b      	str	r3, [r7, #4]
 8002e0e:	2300      	movs	r3, #0
 8002e10:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002e12:	4a3a      	ldr	r2, [pc, #232]	; (8002efc <SetSysClockTo72+0xf8>)
 8002e14:	4b39      	ldr	r3, [pc, #228]	; (8002efc <SetSysClockTo72+0xf8>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e1c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002e1e:	4b37      	ldr	r3, [pc, #220]	; (8002efc <SetSysClockTo72+0xf8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e26:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d103      	bne.n	8002e3c <SetSysClockTo72+0x38>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002e3a:	d1f0      	bne.n	8002e1e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002e3c:	4b2f      	ldr	r3, [pc, #188]	; (8002efc <SetSysClockTo72+0xf8>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	e001      	b.n	8002e52 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d14b      	bne.n	8002ef0 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8002e58:	4a29      	ldr	r2, [pc, #164]	; (8002f00 <SetSysClockTo72+0xfc>)
 8002e5a:	4b29      	ldr	r3, [pc, #164]	; (8002f00 <SetSysClockTo72+0xfc>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f043 0310 	orr.w	r3, r3, #16
 8002e62:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8002e64:	4a26      	ldr	r2, [pc, #152]	; (8002f00 <SetSysClockTo72+0xfc>)
 8002e66:	4b26      	ldr	r3, [pc, #152]	; (8002f00 <SetSysClockTo72+0xfc>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f023 0303 	bic.w	r3, r3, #3
 8002e6e:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8002e70:	4a23      	ldr	r2, [pc, #140]	; (8002f00 <SetSysClockTo72+0xfc>)
 8002e72:	4b23      	ldr	r3, [pc, #140]	; (8002f00 <SetSysClockTo72+0xfc>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f043 0302 	orr.w	r3, r3, #2
 8002e7a:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002e7c:	4a1f      	ldr	r2, [pc, #124]	; (8002efc <SetSysClockTo72+0xf8>)
 8002e7e:	4b1f      	ldr	r3, [pc, #124]	; (8002efc <SetSysClockTo72+0xf8>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002e84:	4a1d      	ldr	r2, [pc, #116]	; (8002efc <SetSysClockTo72+0xf8>)
 8002e86:	4b1d      	ldr	r3, [pc, #116]	; (8002efc <SetSysClockTo72+0xf8>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8002e8c:	4a1b      	ldr	r2, [pc, #108]	; (8002efc <SetSysClockTo72+0xf8>)
 8002e8e:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <SetSysClockTo72+0xf8>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e96:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8002e98:	4a18      	ldr	r2, [pc, #96]	; (8002efc <SetSysClockTo72+0xf8>)
 8002e9a:	4b18      	ldr	r3, [pc, #96]	; (8002efc <SetSysClockTo72+0xf8>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002ea2:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8002ea4:	4a15      	ldr	r2, [pc, #84]	; (8002efc <SetSysClockTo72+0xf8>)
 8002ea6:	4b15      	ldr	r3, [pc, #84]	; (8002efc <SetSysClockTo72+0xf8>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8002eae:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002eb0:	4a12      	ldr	r2, [pc, #72]	; (8002efc <SetSysClockTo72+0xf8>)
 8002eb2:	4b12      	ldr	r3, [pc, #72]	; (8002efc <SetSysClockTo72+0xf8>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eba:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002ebc:	bf00      	nop
 8002ebe:	4b0f      	ldr	r3, [pc, #60]	; (8002efc <SetSysClockTo72+0xf8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f9      	beq.n	8002ebe <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002eca:	4a0c      	ldr	r2, [pc, #48]	; (8002efc <SetSysClockTo72+0xf8>)
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <SetSysClockTo72+0xf8>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f023 0303 	bic.w	r3, r3, #3
 8002ed4:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8002ed6:	4a09      	ldr	r2, [pc, #36]	; (8002efc <SetSysClockTo72+0xf8>)
 8002ed8:	4b08      	ldr	r3, [pc, #32]	; (8002efc <SetSysClockTo72+0xf8>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f043 0302 	orr.w	r3, r3, #2
 8002ee0:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8002ee2:	bf00      	nop
 8002ee4:	4b05      	ldr	r3, [pc, #20]	; (8002efc <SetSysClockTo72+0xf8>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f003 030c 	and.w	r3, r3, #12
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d1f9      	bne.n	8002ee4 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40022000 	.word	0x40022000

08002f04 <_ZdlPv>:
 8002f04:	f000 b82c 	b.w	8002f60 <free>

08002f08 <__libc_init_array>:
 8002f08:	b570      	push	{r4, r5, r6, lr}
 8002f0a:	2500      	movs	r5, #0
 8002f0c:	4e0c      	ldr	r6, [pc, #48]	; (8002f40 <__libc_init_array+0x38>)
 8002f0e:	4c0d      	ldr	r4, [pc, #52]	; (8002f44 <__libc_init_array+0x3c>)
 8002f10:	1ba4      	subs	r4, r4, r6
 8002f12:	10a4      	asrs	r4, r4, #2
 8002f14:	42a5      	cmp	r5, r4
 8002f16:	d109      	bne.n	8002f2c <__libc_init_array+0x24>
 8002f18:	f000 fb7c 	bl	8003614 <_init>
 8002f1c:	2500      	movs	r5, #0
 8002f1e:	4e0a      	ldr	r6, [pc, #40]	; (8002f48 <__libc_init_array+0x40>)
 8002f20:	4c0a      	ldr	r4, [pc, #40]	; (8002f4c <__libc_init_array+0x44>)
 8002f22:	1ba4      	subs	r4, r4, r6
 8002f24:	10a4      	asrs	r4, r4, #2
 8002f26:	42a5      	cmp	r5, r4
 8002f28:	d105      	bne.n	8002f36 <__libc_init_array+0x2e>
 8002f2a:	bd70      	pop	{r4, r5, r6, pc}
 8002f2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f30:	4798      	blx	r3
 8002f32:	3501      	adds	r5, #1
 8002f34:	e7ee      	b.n	8002f14 <__libc_init_array+0xc>
 8002f36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f3a:	4798      	blx	r3
 8002f3c:	3501      	adds	r5, #1
 8002f3e:	e7f2      	b.n	8002f26 <__libc_init_array+0x1e>
 8002f40:	08003c1c 	.word	0x08003c1c
 8002f44:	08003c1c 	.word	0x08003c1c
 8002f48:	08003c1c 	.word	0x08003c1c
 8002f4c:	08003c20 	.word	0x08003c20

08002f50 <malloc>:
 8002f50:	4b02      	ldr	r3, [pc, #8]	; (8002f5c <malloc+0xc>)
 8002f52:	4601      	mov	r1, r0
 8002f54:	6818      	ldr	r0, [r3, #0]
 8002f56:	f000 b80b 	b.w	8002f70 <_malloc_r>
 8002f5a:	bf00      	nop
 8002f5c:	20000424 	.word	0x20000424

08002f60 <free>:
 8002f60:	4b02      	ldr	r3, [pc, #8]	; (8002f6c <free+0xc>)
 8002f62:	4601      	mov	r1, r0
 8002f64:	6818      	ldr	r0, [r3, #0]
 8002f66:	f000 ba89 	b.w	800347c <_free_r>
 8002f6a:	bf00      	nop
 8002f6c:	20000424 	.word	0x20000424

08002f70 <_malloc_r>:
 8002f70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f74:	f101 040b 	add.w	r4, r1, #11
 8002f78:	2c16      	cmp	r4, #22
 8002f7a:	4681      	mov	r9, r0
 8002f7c:	d907      	bls.n	8002f8e <_malloc_r+0x1e>
 8002f7e:	f034 0407 	bics.w	r4, r4, #7
 8002f82:	d505      	bpl.n	8002f90 <_malloc_r+0x20>
 8002f84:	230c      	movs	r3, #12
 8002f86:	f8c9 3000 	str.w	r3, [r9]
 8002f8a:	2600      	movs	r6, #0
 8002f8c:	e131      	b.n	80031f2 <_malloc_r+0x282>
 8002f8e:	2410      	movs	r4, #16
 8002f90:	428c      	cmp	r4, r1
 8002f92:	d3f7      	bcc.n	8002f84 <_malloc_r+0x14>
 8002f94:	4648      	mov	r0, r9
 8002f96:	f000 f9ff 	bl	8003398 <__malloc_lock>
 8002f9a:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8002f9e:	4d9b      	ldr	r5, [pc, #620]	; (800320c <_malloc_r+0x29c>)
 8002fa0:	d236      	bcs.n	8003010 <_malloc_r+0xa0>
 8002fa2:	f104 0208 	add.w	r2, r4, #8
 8002fa6:	442a      	add	r2, r5
 8002fa8:	6856      	ldr	r6, [r2, #4]
 8002faa:	f1a2 0108 	sub.w	r1, r2, #8
 8002fae:	428e      	cmp	r6, r1
 8002fb0:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8002fb4:	d102      	bne.n	8002fbc <_malloc_r+0x4c>
 8002fb6:	68d6      	ldr	r6, [r2, #12]
 8002fb8:	42b2      	cmp	r2, r6
 8002fba:	d010      	beq.n	8002fde <_malloc_r+0x6e>
 8002fbc:	6873      	ldr	r3, [r6, #4]
 8002fbe:	68f2      	ldr	r2, [r6, #12]
 8002fc0:	68b1      	ldr	r1, [r6, #8]
 8002fc2:	f023 0303 	bic.w	r3, r3, #3
 8002fc6:	60ca      	str	r2, [r1, #12]
 8002fc8:	4433      	add	r3, r6
 8002fca:	6091      	str	r1, [r2, #8]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	605a      	str	r2, [r3, #4]
 8002fd4:	4648      	mov	r0, r9
 8002fd6:	f000 f9e5 	bl	80033a4 <__malloc_unlock>
 8002fda:	3608      	adds	r6, #8
 8002fdc:	e109      	b.n	80031f2 <_malloc_r+0x282>
 8002fde:	3302      	adds	r3, #2
 8002fe0:	4a8b      	ldr	r2, [pc, #556]	; (8003210 <_malloc_r+0x2a0>)
 8002fe2:	692e      	ldr	r6, [r5, #16]
 8002fe4:	4611      	mov	r1, r2
 8002fe6:	4296      	cmp	r6, r2
 8002fe8:	d06d      	beq.n	80030c6 <_malloc_r+0x156>
 8002fea:	6870      	ldr	r0, [r6, #4]
 8002fec:	f020 0003 	bic.w	r0, r0, #3
 8002ff0:	1b07      	subs	r7, r0, r4
 8002ff2:	2f0f      	cmp	r7, #15
 8002ff4:	dd47      	ble.n	8003086 <_malloc_r+0x116>
 8002ff6:	1933      	adds	r3, r6, r4
 8002ff8:	f044 0401 	orr.w	r4, r4, #1
 8002ffc:	6074      	str	r4, [r6, #4]
 8002ffe:	616b      	str	r3, [r5, #20]
 8003000:	612b      	str	r3, [r5, #16]
 8003002:	60da      	str	r2, [r3, #12]
 8003004:	609a      	str	r2, [r3, #8]
 8003006:	f047 0201 	orr.w	r2, r7, #1
 800300a:	605a      	str	r2, [r3, #4]
 800300c:	5037      	str	r7, [r6, r0]
 800300e:	e7e1      	b.n	8002fd4 <_malloc_r+0x64>
 8003010:	0a63      	lsrs	r3, r4, #9
 8003012:	d02a      	beq.n	800306a <_malloc_r+0xfa>
 8003014:	2b04      	cmp	r3, #4
 8003016:	d812      	bhi.n	800303e <_malloc_r+0xce>
 8003018:	09a3      	lsrs	r3, r4, #6
 800301a:	3338      	adds	r3, #56	; 0x38
 800301c:	1c5a      	adds	r2, r3, #1
 800301e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003022:	6856      	ldr	r6, [r2, #4]
 8003024:	f1a2 0008 	sub.w	r0, r2, #8
 8003028:	4286      	cmp	r6, r0
 800302a:	d006      	beq.n	800303a <_malloc_r+0xca>
 800302c:	6872      	ldr	r2, [r6, #4]
 800302e:	f022 0203 	bic.w	r2, r2, #3
 8003032:	1b11      	subs	r1, r2, r4
 8003034:	290f      	cmp	r1, #15
 8003036:	dd1c      	ble.n	8003072 <_malloc_r+0x102>
 8003038:	3b01      	subs	r3, #1
 800303a:	3301      	adds	r3, #1
 800303c:	e7d0      	b.n	8002fe0 <_malloc_r+0x70>
 800303e:	2b14      	cmp	r3, #20
 8003040:	d801      	bhi.n	8003046 <_malloc_r+0xd6>
 8003042:	335b      	adds	r3, #91	; 0x5b
 8003044:	e7ea      	b.n	800301c <_malloc_r+0xac>
 8003046:	2b54      	cmp	r3, #84	; 0x54
 8003048:	d802      	bhi.n	8003050 <_malloc_r+0xe0>
 800304a:	0b23      	lsrs	r3, r4, #12
 800304c:	336e      	adds	r3, #110	; 0x6e
 800304e:	e7e5      	b.n	800301c <_malloc_r+0xac>
 8003050:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8003054:	d802      	bhi.n	800305c <_malloc_r+0xec>
 8003056:	0be3      	lsrs	r3, r4, #15
 8003058:	3377      	adds	r3, #119	; 0x77
 800305a:	e7df      	b.n	800301c <_malloc_r+0xac>
 800305c:	f240 5254 	movw	r2, #1364	; 0x554
 8003060:	4293      	cmp	r3, r2
 8003062:	d804      	bhi.n	800306e <_malloc_r+0xfe>
 8003064:	0ca3      	lsrs	r3, r4, #18
 8003066:	337c      	adds	r3, #124	; 0x7c
 8003068:	e7d8      	b.n	800301c <_malloc_r+0xac>
 800306a:	233f      	movs	r3, #63	; 0x3f
 800306c:	e7d6      	b.n	800301c <_malloc_r+0xac>
 800306e:	237e      	movs	r3, #126	; 0x7e
 8003070:	e7d4      	b.n	800301c <_malloc_r+0xac>
 8003072:	2900      	cmp	r1, #0
 8003074:	68f1      	ldr	r1, [r6, #12]
 8003076:	db04      	blt.n	8003082 <_malloc_r+0x112>
 8003078:	68b3      	ldr	r3, [r6, #8]
 800307a:	60d9      	str	r1, [r3, #12]
 800307c:	608b      	str	r3, [r1, #8]
 800307e:	18b3      	adds	r3, r6, r2
 8003080:	e7a4      	b.n	8002fcc <_malloc_r+0x5c>
 8003082:	460e      	mov	r6, r1
 8003084:	e7d0      	b.n	8003028 <_malloc_r+0xb8>
 8003086:	2f00      	cmp	r7, #0
 8003088:	616a      	str	r2, [r5, #20]
 800308a:	612a      	str	r2, [r5, #16]
 800308c:	db05      	blt.n	800309a <_malloc_r+0x12a>
 800308e:	4430      	add	r0, r6
 8003090:	6843      	ldr	r3, [r0, #4]
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	6043      	str	r3, [r0, #4]
 8003098:	e79c      	b.n	8002fd4 <_malloc_r+0x64>
 800309a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800309e:	d244      	bcs.n	800312a <_malloc_r+0x1ba>
 80030a0:	2201      	movs	r2, #1
 80030a2:	08c0      	lsrs	r0, r0, #3
 80030a4:	1087      	asrs	r7, r0, #2
 80030a6:	fa02 f707 	lsl.w	r7, r2, r7
 80030aa:	686a      	ldr	r2, [r5, #4]
 80030ac:	3001      	adds	r0, #1
 80030ae:	433a      	orrs	r2, r7
 80030b0:	606a      	str	r2, [r5, #4]
 80030b2:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 80030b6:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80030ba:	3a08      	subs	r2, #8
 80030bc:	60f2      	str	r2, [r6, #12]
 80030be:	60b7      	str	r7, [r6, #8]
 80030c0:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 80030c4:	60fe      	str	r6, [r7, #12]
 80030c6:	2001      	movs	r0, #1
 80030c8:	109a      	asrs	r2, r3, #2
 80030ca:	fa00 f202 	lsl.w	r2, r0, r2
 80030ce:	6868      	ldr	r0, [r5, #4]
 80030d0:	4282      	cmp	r2, r0
 80030d2:	f200 809f 	bhi.w	8003214 <_malloc_r+0x2a4>
 80030d6:	4202      	tst	r2, r0
 80030d8:	d106      	bne.n	80030e8 <_malloc_r+0x178>
 80030da:	f023 0303 	bic.w	r3, r3, #3
 80030de:	0052      	lsls	r2, r2, #1
 80030e0:	4202      	tst	r2, r0
 80030e2:	f103 0304 	add.w	r3, r3, #4
 80030e6:	d0fa      	beq.n	80030de <_malloc_r+0x16e>
 80030e8:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 80030ec:	46e0      	mov	r8, ip
 80030ee:	469e      	mov	lr, r3
 80030f0:	f8d8 600c 	ldr.w	r6, [r8, #12]
 80030f4:	4546      	cmp	r6, r8
 80030f6:	d153      	bne.n	80031a0 <_malloc_r+0x230>
 80030f8:	f10e 0e01 	add.w	lr, lr, #1
 80030fc:	f01e 0f03 	tst.w	lr, #3
 8003100:	f108 0808 	add.w	r8, r8, #8
 8003104:	d1f4      	bne.n	80030f0 <_malloc_r+0x180>
 8003106:	0798      	lsls	r0, r3, #30
 8003108:	d179      	bne.n	80031fe <_malloc_r+0x28e>
 800310a:	686b      	ldr	r3, [r5, #4]
 800310c:	ea23 0302 	bic.w	r3, r3, r2
 8003110:	606b      	str	r3, [r5, #4]
 8003112:	6868      	ldr	r0, [r5, #4]
 8003114:	0052      	lsls	r2, r2, #1
 8003116:	4282      	cmp	r2, r0
 8003118:	d87c      	bhi.n	8003214 <_malloc_r+0x2a4>
 800311a:	2a00      	cmp	r2, #0
 800311c:	d07a      	beq.n	8003214 <_malloc_r+0x2a4>
 800311e:	4673      	mov	r3, lr
 8003120:	4202      	tst	r2, r0
 8003122:	d1e1      	bne.n	80030e8 <_malloc_r+0x178>
 8003124:	3304      	adds	r3, #4
 8003126:	0052      	lsls	r2, r2, #1
 8003128:	e7fa      	b.n	8003120 <_malloc_r+0x1b0>
 800312a:	0a42      	lsrs	r2, r0, #9
 800312c:	2a04      	cmp	r2, #4
 800312e:	d815      	bhi.n	800315c <_malloc_r+0x1ec>
 8003130:	0982      	lsrs	r2, r0, #6
 8003132:	3238      	adds	r2, #56	; 0x38
 8003134:	1c57      	adds	r7, r2, #1
 8003136:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800313a:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800313e:	45be      	cmp	lr, r7
 8003140:	d126      	bne.n	8003190 <_malloc_r+0x220>
 8003142:	2001      	movs	r0, #1
 8003144:	1092      	asrs	r2, r2, #2
 8003146:	fa00 f202 	lsl.w	r2, r0, r2
 800314a:	6868      	ldr	r0, [r5, #4]
 800314c:	4310      	orrs	r0, r2
 800314e:	6068      	str	r0, [r5, #4]
 8003150:	f8c6 e00c 	str.w	lr, [r6, #12]
 8003154:	60b7      	str	r7, [r6, #8]
 8003156:	f8ce 6008 	str.w	r6, [lr, #8]
 800315a:	e7b3      	b.n	80030c4 <_malloc_r+0x154>
 800315c:	2a14      	cmp	r2, #20
 800315e:	d801      	bhi.n	8003164 <_malloc_r+0x1f4>
 8003160:	325b      	adds	r2, #91	; 0x5b
 8003162:	e7e7      	b.n	8003134 <_malloc_r+0x1c4>
 8003164:	2a54      	cmp	r2, #84	; 0x54
 8003166:	d802      	bhi.n	800316e <_malloc_r+0x1fe>
 8003168:	0b02      	lsrs	r2, r0, #12
 800316a:	326e      	adds	r2, #110	; 0x6e
 800316c:	e7e2      	b.n	8003134 <_malloc_r+0x1c4>
 800316e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8003172:	d802      	bhi.n	800317a <_malloc_r+0x20a>
 8003174:	0bc2      	lsrs	r2, r0, #15
 8003176:	3277      	adds	r2, #119	; 0x77
 8003178:	e7dc      	b.n	8003134 <_malloc_r+0x1c4>
 800317a:	f240 5754 	movw	r7, #1364	; 0x554
 800317e:	42ba      	cmp	r2, r7
 8003180:	bf9a      	itte	ls
 8003182:	0c82      	lsrls	r2, r0, #18
 8003184:	327c      	addls	r2, #124	; 0x7c
 8003186:	227e      	movhi	r2, #126	; 0x7e
 8003188:	e7d4      	b.n	8003134 <_malloc_r+0x1c4>
 800318a:	68bf      	ldr	r7, [r7, #8]
 800318c:	45be      	cmp	lr, r7
 800318e:	d004      	beq.n	800319a <_malloc_r+0x22a>
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	f022 0203 	bic.w	r2, r2, #3
 8003196:	4290      	cmp	r0, r2
 8003198:	d3f7      	bcc.n	800318a <_malloc_r+0x21a>
 800319a:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800319e:	e7d7      	b.n	8003150 <_malloc_r+0x1e0>
 80031a0:	6870      	ldr	r0, [r6, #4]
 80031a2:	68f7      	ldr	r7, [r6, #12]
 80031a4:	f020 0003 	bic.w	r0, r0, #3
 80031a8:	eba0 0a04 	sub.w	sl, r0, r4
 80031ac:	f1ba 0f0f 	cmp.w	sl, #15
 80031b0:	dd10      	ble.n	80031d4 <_malloc_r+0x264>
 80031b2:	68b2      	ldr	r2, [r6, #8]
 80031b4:	1933      	adds	r3, r6, r4
 80031b6:	f044 0401 	orr.w	r4, r4, #1
 80031ba:	6074      	str	r4, [r6, #4]
 80031bc:	60d7      	str	r7, [r2, #12]
 80031be:	60ba      	str	r2, [r7, #8]
 80031c0:	f04a 0201 	orr.w	r2, sl, #1
 80031c4:	616b      	str	r3, [r5, #20]
 80031c6:	612b      	str	r3, [r5, #16]
 80031c8:	60d9      	str	r1, [r3, #12]
 80031ca:	6099      	str	r1, [r3, #8]
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	f846 a000 	str.w	sl, [r6, r0]
 80031d2:	e6ff      	b.n	8002fd4 <_malloc_r+0x64>
 80031d4:	f1ba 0f00 	cmp.w	sl, #0
 80031d8:	db0f      	blt.n	80031fa <_malloc_r+0x28a>
 80031da:	4430      	add	r0, r6
 80031dc:	6843      	ldr	r3, [r0, #4]
 80031de:	f043 0301 	orr.w	r3, r3, #1
 80031e2:	6043      	str	r3, [r0, #4]
 80031e4:	f856 3f08 	ldr.w	r3, [r6, #8]!
 80031e8:	4648      	mov	r0, r9
 80031ea:	60df      	str	r7, [r3, #12]
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	f000 f8d9 	bl	80033a4 <__malloc_unlock>
 80031f2:	4630      	mov	r0, r6
 80031f4:	b003      	add	sp, #12
 80031f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031fa:	463e      	mov	r6, r7
 80031fc:	e77a      	b.n	80030f4 <_malloc_r+0x184>
 80031fe:	f85c 0908 	ldr.w	r0, [ip], #-8
 8003202:	3b01      	subs	r3, #1
 8003204:	4584      	cmp	ip, r0
 8003206:	f43f af7e 	beq.w	8003106 <_malloc_r+0x196>
 800320a:	e782      	b.n	8003112 <_malloc_r+0x1a2>
 800320c:	20000014 	.word	0x20000014
 8003210:	2000001c 	.word	0x2000001c
 8003214:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8003218:	f8db 6004 	ldr.w	r6, [fp, #4]
 800321c:	f026 0603 	bic.w	r6, r6, #3
 8003220:	42b4      	cmp	r4, r6
 8003222:	d803      	bhi.n	800322c <_malloc_r+0x2bc>
 8003224:	1b33      	subs	r3, r6, r4
 8003226:	2b0f      	cmp	r3, #15
 8003228:	f300 8095 	bgt.w	8003356 <_malloc_r+0x3e6>
 800322c:	4a4f      	ldr	r2, [pc, #316]	; (800336c <_malloc_r+0x3fc>)
 800322e:	eb0b 0306 	add.w	r3, fp, r6
 8003232:	6817      	ldr	r7, [r2, #0]
 8003234:	4a4e      	ldr	r2, [pc, #312]	; (8003370 <_malloc_r+0x400>)
 8003236:	3710      	adds	r7, #16
 8003238:	6811      	ldr	r1, [r2, #0]
 800323a:	4427      	add	r7, r4
 800323c:	3101      	adds	r1, #1
 800323e:	d005      	beq.n	800324c <_malloc_r+0x2dc>
 8003240:	494c      	ldr	r1, [pc, #304]	; (8003374 <_malloc_r+0x404>)
 8003242:	3901      	subs	r1, #1
 8003244:	440f      	add	r7, r1
 8003246:	3101      	adds	r1, #1
 8003248:	4249      	negs	r1, r1
 800324a:	400f      	ands	r7, r1
 800324c:	4639      	mov	r1, r7
 800324e:	4648      	mov	r0, r9
 8003250:	9201      	str	r2, [sp, #4]
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	f000 f8ac 	bl	80033b0 <_sbrk_r>
 8003258:	f1b0 3fff 	cmp.w	r0, #4294967295
 800325c:	4680      	mov	r8, r0
 800325e:	d055      	beq.n	800330c <_malloc_r+0x39c>
 8003260:	9b00      	ldr	r3, [sp, #0]
 8003262:	9a01      	ldr	r2, [sp, #4]
 8003264:	4283      	cmp	r3, r0
 8003266:	d901      	bls.n	800326c <_malloc_r+0x2fc>
 8003268:	45ab      	cmp	fp, r5
 800326a:	d14f      	bne.n	800330c <_malloc_r+0x39c>
 800326c:	4842      	ldr	r0, [pc, #264]	; (8003378 <_malloc_r+0x408>)
 800326e:	4543      	cmp	r3, r8
 8003270:	6801      	ldr	r1, [r0, #0]
 8003272:	4682      	mov	sl, r0
 8003274:	eb07 0e01 	add.w	lr, r7, r1
 8003278:	f8c0 e000 	str.w	lr, [r0]
 800327c:	493f      	ldr	r1, [pc, #252]	; (800337c <_malloc_r+0x40c>)
 800327e:	d113      	bne.n	80032a8 <_malloc_r+0x338>
 8003280:	420b      	tst	r3, r1
 8003282:	d111      	bne.n	80032a8 <_malloc_r+0x338>
 8003284:	68ab      	ldr	r3, [r5, #8]
 8003286:	443e      	add	r6, r7
 8003288:	f046 0601 	orr.w	r6, r6, #1
 800328c:	605e      	str	r6, [r3, #4]
 800328e:	4a3c      	ldr	r2, [pc, #240]	; (8003380 <_malloc_r+0x410>)
 8003290:	f8da 3000 	ldr.w	r3, [sl]
 8003294:	6811      	ldr	r1, [r2, #0]
 8003296:	428b      	cmp	r3, r1
 8003298:	bf88      	it	hi
 800329a:	6013      	strhi	r3, [r2, #0]
 800329c:	4a39      	ldr	r2, [pc, #228]	; (8003384 <_malloc_r+0x414>)
 800329e:	6811      	ldr	r1, [r2, #0]
 80032a0:	428b      	cmp	r3, r1
 80032a2:	bf88      	it	hi
 80032a4:	6013      	strhi	r3, [r2, #0]
 80032a6:	e031      	b.n	800330c <_malloc_r+0x39c>
 80032a8:	6810      	ldr	r0, [r2, #0]
 80032aa:	3001      	adds	r0, #1
 80032ac:	bf1b      	ittet	ne
 80032ae:	eba8 0303 	subne.w	r3, r8, r3
 80032b2:	4473      	addne	r3, lr
 80032b4:	f8c2 8000 	streq.w	r8, [r2]
 80032b8:	f8ca 3000 	strne.w	r3, [sl]
 80032bc:	f018 0007 	ands.w	r0, r8, #7
 80032c0:	bf1c      	itt	ne
 80032c2:	f1c0 0008 	rsbne	r0, r0, #8
 80032c6:	4480      	addne	r8, r0
 80032c8:	4b2a      	ldr	r3, [pc, #168]	; (8003374 <_malloc_r+0x404>)
 80032ca:	4447      	add	r7, r8
 80032cc:	4418      	add	r0, r3
 80032ce:	400f      	ands	r7, r1
 80032d0:	1bc7      	subs	r7, r0, r7
 80032d2:	4639      	mov	r1, r7
 80032d4:	4648      	mov	r0, r9
 80032d6:	f000 f86b 	bl	80033b0 <_sbrk_r>
 80032da:	1c43      	adds	r3, r0, #1
 80032dc:	bf04      	itt	eq
 80032de:	4640      	moveq	r0, r8
 80032e0:	2700      	moveq	r7, #0
 80032e2:	f8da 3000 	ldr.w	r3, [sl]
 80032e6:	eba0 0008 	sub.w	r0, r0, r8
 80032ea:	443b      	add	r3, r7
 80032ec:	4407      	add	r7, r0
 80032ee:	f047 0701 	orr.w	r7, r7, #1
 80032f2:	45ab      	cmp	fp, r5
 80032f4:	f8c5 8008 	str.w	r8, [r5, #8]
 80032f8:	f8ca 3000 	str.w	r3, [sl]
 80032fc:	f8c8 7004 	str.w	r7, [r8, #4]
 8003300:	d0c5      	beq.n	800328e <_malloc_r+0x31e>
 8003302:	2e0f      	cmp	r6, #15
 8003304:	d810      	bhi.n	8003328 <_malloc_r+0x3b8>
 8003306:	2301      	movs	r3, #1
 8003308:	f8c8 3004 	str.w	r3, [r8, #4]
 800330c:	68ab      	ldr	r3, [r5, #8]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	f022 0203 	bic.w	r2, r2, #3
 8003314:	4294      	cmp	r4, r2
 8003316:	eba2 0304 	sub.w	r3, r2, r4
 800331a:	d801      	bhi.n	8003320 <_malloc_r+0x3b0>
 800331c:	2b0f      	cmp	r3, #15
 800331e:	dc1a      	bgt.n	8003356 <_malloc_r+0x3e6>
 8003320:	4648      	mov	r0, r9
 8003322:	f000 f83f 	bl	80033a4 <__malloc_unlock>
 8003326:	e630      	b.n	8002f8a <_malloc_r+0x1a>
 8003328:	2205      	movs	r2, #5
 800332a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800332e:	3e0c      	subs	r6, #12
 8003330:	f026 0607 	bic.w	r6, r6, #7
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	4333      	orrs	r3, r6
 800333a:	f8cb 3004 	str.w	r3, [fp, #4]
 800333e:	2e0f      	cmp	r6, #15
 8003340:	eb0b 0306 	add.w	r3, fp, r6
 8003344:	605a      	str	r2, [r3, #4]
 8003346:	609a      	str	r2, [r3, #8]
 8003348:	d9a1      	bls.n	800328e <_malloc_r+0x31e>
 800334a:	f10b 0108 	add.w	r1, fp, #8
 800334e:	4648      	mov	r0, r9
 8003350:	f000 f894 	bl	800347c <_free_r>
 8003354:	e79b      	b.n	800328e <_malloc_r+0x31e>
 8003356:	68ae      	ldr	r6, [r5, #8]
 8003358:	f044 0201 	orr.w	r2, r4, #1
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	4434      	add	r4, r6
 8003362:	6072      	str	r2, [r6, #4]
 8003364:	60ac      	str	r4, [r5, #8]
 8003366:	6063      	str	r3, [r4, #4]
 8003368:	e634      	b.n	8002fd4 <_malloc_r+0x64>
 800336a:	bf00      	nop
 800336c:	20000564 	.word	0x20000564
 8003370:	2000041c 	.word	0x2000041c
 8003374:	00000080 	.word	0x00000080
 8003378:	20000534 	.word	0x20000534
 800337c:	0000007f 	.word	0x0000007f
 8003380:	2000055c 	.word	0x2000055c
 8003384:	20000560 	.word	0x20000560

08003388 <memset>:
 8003388:	4603      	mov	r3, r0
 800338a:	4402      	add	r2, r0
 800338c:	4293      	cmp	r3, r2
 800338e:	d100      	bne.n	8003392 <memset+0xa>
 8003390:	4770      	bx	lr
 8003392:	f803 1b01 	strb.w	r1, [r3], #1
 8003396:	e7f9      	b.n	800338c <memset+0x4>

08003398 <__malloc_lock>:
 8003398:	4801      	ldr	r0, [pc, #4]	; (80033a0 <__malloc_lock+0x8>)
 800339a:	f000 b92b 	b.w	80035f4 <__retarget_lock_acquire_recursive>
 800339e:	bf00      	nop
 80033a0:	20000570 	.word	0x20000570

080033a4 <__malloc_unlock>:
 80033a4:	4801      	ldr	r0, [pc, #4]	; (80033ac <__malloc_unlock+0x8>)
 80033a6:	f000 b926 	b.w	80035f6 <__retarget_lock_release_recursive>
 80033aa:	bf00      	nop
 80033ac:	20000570 	.word	0x20000570

080033b0 <_sbrk_r>:
 80033b0:	b538      	push	{r3, r4, r5, lr}
 80033b2:	2300      	movs	r3, #0
 80033b4:	4c05      	ldr	r4, [pc, #20]	; (80033cc <_sbrk_r+0x1c>)
 80033b6:	4605      	mov	r5, r0
 80033b8:	4608      	mov	r0, r1
 80033ba:	6023      	str	r3, [r4, #0]
 80033bc:	f000 f91c 	bl	80035f8 <_sbrk>
 80033c0:	1c43      	adds	r3, r0, #1
 80033c2:	d102      	bne.n	80033ca <_sbrk_r+0x1a>
 80033c4:	6823      	ldr	r3, [r4, #0]
 80033c6:	b103      	cbz	r3, 80033ca <_sbrk_r+0x1a>
 80033c8:	602b      	str	r3, [r5, #0]
 80033ca:	bd38      	pop	{r3, r4, r5, pc}
 80033cc:	20000578 	.word	0x20000578

080033d0 <_malloc_trim_r>:
 80033d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033d4:	4689      	mov	r9, r1
 80033d6:	4f25      	ldr	r7, [pc, #148]	; (800346c <_malloc_trim_r+0x9c>)
 80033d8:	4606      	mov	r6, r0
 80033da:	f7ff ffdd 	bl	8003398 <__malloc_lock>
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8003478 <_malloc_trim_r+0xa8>
 80033e4:	685d      	ldr	r5, [r3, #4]
 80033e6:	f1a8 0411 	sub.w	r4, r8, #17
 80033ea:	f025 0503 	bic.w	r5, r5, #3
 80033ee:	eba4 0409 	sub.w	r4, r4, r9
 80033f2:	442c      	add	r4, r5
 80033f4:	fbb4 f4f8 	udiv	r4, r4, r8
 80033f8:	3c01      	subs	r4, #1
 80033fa:	fb08 f404 	mul.w	r4, r8, r4
 80033fe:	4544      	cmp	r4, r8
 8003400:	da05      	bge.n	800340e <_malloc_trim_r+0x3e>
 8003402:	4630      	mov	r0, r6
 8003404:	f7ff ffce 	bl	80033a4 <__malloc_unlock>
 8003408:	2000      	movs	r0, #0
 800340a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800340e:	2100      	movs	r1, #0
 8003410:	4630      	mov	r0, r6
 8003412:	f7ff ffcd 	bl	80033b0 <_sbrk_r>
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	442b      	add	r3, r5
 800341a:	4298      	cmp	r0, r3
 800341c:	d1f1      	bne.n	8003402 <_malloc_trim_r+0x32>
 800341e:	4261      	negs	r1, r4
 8003420:	4630      	mov	r0, r6
 8003422:	f7ff ffc5 	bl	80033b0 <_sbrk_r>
 8003426:	3001      	adds	r0, #1
 8003428:	d110      	bne.n	800344c <_malloc_trim_r+0x7c>
 800342a:	2100      	movs	r1, #0
 800342c:	4630      	mov	r0, r6
 800342e:	f7ff ffbf 	bl	80033b0 <_sbrk_r>
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	1a83      	subs	r3, r0, r2
 8003436:	2b0f      	cmp	r3, #15
 8003438:	dde3      	ble.n	8003402 <_malloc_trim_r+0x32>
 800343a:	490d      	ldr	r1, [pc, #52]	; (8003470 <_malloc_trim_r+0xa0>)
 800343c:	f043 0301 	orr.w	r3, r3, #1
 8003440:	6809      	ldr	r1, [r1, #0]
 8003442:	6053      	str	r3, [r2, #4]
 8003444:	1a40      	subs	r0, r0, r1
 8003446:	490b      	ldr	r1, [pc, #44]	; (8003474 <_malloc_trim_r+0xa4>)
 8003448:	6008      	str	r0, [r1, #0]
 800344a:	e7da      	b.n	8003402 <_malloc_trim_r+0x32>
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	4a09      	ldr	r2, [pc, #36]	; (8003474 <_malloc_trim_r+0xa4>)
 8003450:	1b2d      	subs	r5, r5, r4
 8003452:	f045 0501 	orr.w	r5, r5, #1
 8003456:	605d      	str	r5, [r3, #4]
 8003458:	6813      	ldr	r3, [r2, #0]
 800345a:	4630      	mov	r0, r6
 800345c:	1b1c      	subs	r4, r3, r4
 800345e:	6014      	str	r4, [r2, #0]
 8003460:	f7ff ffa0 	bl	80033a4 <__malloc_unlock>
 8003464:	2001      	movs	r0, #1
 8003466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800346a:	bf00      	nop
 800346c:	20000014 	.word	0x20000014
 8003470:	2000041c 	.word	0x2000041c
 8003474:	20000534 	.word	0x20000534
 8003478:	00000080 	.word	0x00000080

0800347c <_free_r>:
 800347c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003480:	4604      	mov	r4, r0
 8003482:	4688      	mov	r8, r1
 8003484:	2900      	cmp	r1, #0
 8003486:	f000 80ab 	beq.w	80035e0 <_free_r+0x164>
 800348a:	f7ff ff85 	bl	8003398 <__malloc_lock>
 800348e:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8003492:	4d54      	ldr	r5, [pc, #336]	; (80035e4 <_free_r+0x168>)
 8003494:	f022 0001 	bic.w	r0, r2, #1
 8003498:	f1a8 0308 	sub.w	r3, r8, #8
 800349c:	181f      	adds	r7, r3, r0
 800349e:	68a9      	ldr	r1, [r5, #8]
 80034a0:	687e      	ldr	r6, [r7, #4]
 80034a2:	428f      	cmp	r7, r1
 80034a4:	f026 0603 	bic.w	r6, r6, #3
 80034a8:	f002 0201 	and.w	r2, r2, #1
 80034ac:	d11b      	bne.n	80034e6 <_free_r+0x6a>
 80034ae:	4430      	add	r0, r6
 80034b0:	b93a      	cbnz	r2, 80034c2 <_free_r+0x46>
 80034b2:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	6899      	ldr	r1, [r3, #8]
 80034ba:	4410      	add	r0, r2
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	60ca      	str	r2, [r1, #12]
 80034c0:	6091      	str	r1, [r2, #8]
 80034c2:	f040 0201 	orr.w	r2, r0, #1
 80034c6:	605a      	str	r2, [r3, #4]
 80034c8:	60ab      	str	r3, [r5, #8]
 80034ca:	4b47      	ldr	r3, [pc, #284]	; (80035e8 <_free_r+0x16c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4298      	cmp	r0, r3
 80034d0:	d304      	bcc.n	80034dc <_free_r+0x60>
 80034d2:	4b46      	ldr	r3, [pc, #280]	; (80035ec <_free_r+0x170>)
 80034d4:	4620      	mov	r0, r4
 80034d6:	6819      	ldr	r1, [r3, #0]
 80034d8:	f7ff ff7a 	bl	80033d0 <_malloc_trim_r>
 80034dc:	4620      	mov	r0, r4
 80034de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034e2:	f7ff bf5f 	b.w	80033a4 <__malloc_unlock>
 80034e6:	607e      	str	r6, [r7, #4]
 80034e8:	2a00      	cmp	r2, #0
 80034ea:	d139      	bne.n	8003560 <_free_r+0xe4>
 80034ec:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80034f0:	f105 0e08 	add.w	lr, r5, #8
 80034f4:	1a5b      	subs	r3, r3, r1
 80034f6:	4408      	add	r0, r1
 80034f8:	6899      	ldr	r1, [r3, #8]
 80034fa:	4571      	cmp	r1, lr
 80034fc:	d032      	beq.n	8003564 <_free_r+0xe8>
 80034fe:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8003502:	f8c1 e00c 	str.w	lr, [r1, #12]
 8003506:	f8ce 1008 	str.w	r1, [lr, #8]
 800350a:	19b9      	adds	r1, r7, r6
 800350c:	6849      	ldr	r1, [r1, #4]
 800350e:	07c9      	lsls	r1, r1, #31
 8003510:	d40a      	bmi.n	8003528 <_free_r+0xac>
 8003512:	4430      	add	r0, r6
 8003514:	68b9      	ldr	r1, [r7, #8]
 8003516:	bb3a      	cbnz	r2, 8003568 <_free_r+0xec>
 8003518:	4e35      	ldr	r6, [pc, #212]	; (80035f0 <_free_r+0x174>)
 800351a:	42b1      	cmp	r1, r6
 800351c:	d124      	bne.n	8003568 <_free_r+0xec>
 800351e:	2201      	movs	r2, #1
 8003520:	616b      	str	r3, [r5, #20]
 8003522:	612b      	str	r3, [r5, #16]
 8003524:	60d9      	str	r1, [r3, #12]
 8003526:	6099      	str	r1, [r3, #8]
 8003528:	f040 0101 	orr.w	r1, r0, #1
 800352c:	6059      	str	r1, [r3, #4]
 800352e:	5018      	str	r0, [r3, r0]
 8003530:	2a00      	cmp	r2, #0
 8003532:	d1d3      	bne.n	80034dc <_free_r+0x60>
 8003534:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003538:	d21a      	bcs.n	8003570 <_free_r+0xf4>
 800353a:	2201      	movs	r2, #1
 800353c:	08c0      	lsrs	r0, r0, #3
 800353e:	1081      	asrs	r1, r0, #2
 8003540:	408a      	lsls	r2, r1
 8003542:	6869      	ldr	r1, [r5, #4]
 8003544:	3001      	adds	r0, #1
 8003546:	430a      	orrs	r2, r1
 8003548:	606a      	str	r2, [r5, #4]
 800354a:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800354e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8003552:	3a08      	subs	r2, #8
 8003554:	60da      	str	r2, [r3, #12]
 8003556:	6099      	str	r1, [r3, #8]
 8003558:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800355c:	60cb      	str	r3, [r1, #12]
 800355e:	e7bd      	b.n	80034dc <_free_r+0x60>
 8003560:	2200      	movs	r2, #0
 8003562:	e7d2      	b.n	800350a <_free_r+0x8e>
 8003564:	2201      	movs	r2, #1
 8003566:	e7d0      	b.n	800350a <_free_r+0x8e>
 8003568:	68fe      	ldr	r6, [r7, #12]
 800356a:	60ce      	str	r6, [r1, #12]
 800356c:	60b1      	str	r1, [r6, #8]
 800356e:	e7db      	b.n	8003528 <_free_r+0xac>
 8003570:	0a42      	lsrs	r2, r0, #9
 8003572:	2a04      	cmp	r2, #4
 8003574:	d813      	bhi.n	800359e <_free_r+0x122>
 8003576:	0982      	lsrs	r2, r0, #6
 8003578:	3238      	adds	r2, #56	; 0x38
 800357a:	1c51      	adds	r1, r2, #1
 800357c:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8003580:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8003584:	428e      	cmp	r6, r1
 8003586:	d124      	bne.n	80035d2 <_free_r+0x156>
 8003588:	2001      	movs	r0, #1
 800358a:	1092      	asrs	r2, r2, #2
 800358c:	fa00 f202 	lsl.w	r2, r0, r2
 8003590:	6868      	ldr	r0, [r5, #4]
 8003592:	4302      	orrs	r2, r0
 8003594:	606a      	str	r2, [r5, #4]
 8003596:	60de      	str	r6, [r3, #12]
 8003598:	6099      	str	r1, [r3, #8]
 800359a:	60b3      	str	r3, [r6, #8]
 800359c:	e7de      	b.n	800355c <_free_r+0xe0>
 800359e:	2a14      	cmp	r2, #20
 80035a0:	d801      	bhi.n	80035a6 <_free_r+0x12a>
 80035a2:	325b      	adds	r2, #91	; 0x5b
 80035a4:	e7e9      	b.n	800357a <_free_r+0xfe>
 80035a6:	2a54      	cmp	r2, #84	; 0x54
 80035a8:	d802      	bhi.n	80035b0 <_free_r+0x134>
 80035aa:	0b02      	lsrs	r2, r0, #12
 80035ac:	326e      	adds	r2, #110	; 0x6e
 80035ae:	e7e4      	b.n	800357a <_free_r+0xfe>
 80035b0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80035b4:	d802      	bhi.n	80035bc <_free_r+0x140>
 80035b6:	0bc2      	lsrs	r2, r0, #15
 80035b8:	3277      	adds	r2, #119	; 0x77
 80035ba:	e7de      	b.n	800357a <_free_r+0xfe>
 80035bc:	f240 5154 	movw	r1, #1364	; 0x554
 80035c0:	428a      	cmp	r2, r1
 80035c2:	bf9a      	itte	ls
 80035c4:	0c82      	lsrls	r2, r0, #18
 80035c6:	327c      	addls	r2, #124	; 0x7c
 80035c8:	227e      	movhi	r2, #126	; 0x7e
 80035ca:	e7d6      	b.n	800357a <_free_r+0xfe>
 80035cc:	6889      	ldr	r1, [r1, #8]
 80035ce:	428e      	cmp	r6, r1
 80035d0:	d004      	beq.n	80035dc <_free_r+0x160>
 80035d2:	684a      	ldr	r2, [r1, #4]
 80035d4:	f022 0203 	bic.w	r2, r2, #3
 80035d8:	4290      	cmp	r0, r2
 80035da:	d3f7      	bcc.n	80035cc <_free_r+0x150>
 80035dc:	68ce      	ldr	r6, [r1, #12]
 80035de:	e7da      	b.n	8003596 <_free_r+0x11a>
 80035e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035e4:	20000014 	.word	0x20000014
 80035e8:	20000420 	.word	0x20000420
 80035ec:	20000564 	.word	0x20000564
 80035f0:	2000001c 	.word	0x2000001c

080035f4 <__retarget_lock_acquire_recursive>:
 80035f4:	4770      	bx	lr

080035f6 <__retarget_lock_release_recursive>:
 80035f6:	4770      	bx	lr

080035f8 <_sbrk>:
 80035f8:	4b04      	ldr	r3, [pc, #16]	; (800360c <_sbrk+0x14>)
 80035fa:	4602      	mov	r2, r0
 80035fc:	6819      	ldr	r1, [r3, #0]
 80035fe:	b909      	cbnz	r1, 8003604 <_sbrk+0xc>
 8003600:	4903      	ldr	r1, [pc, #12]	; (8003610 <_sbrk+0x18>)
 8003602:	6019      	str	r1, [r3, #0]
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	4402      	add	r2, r0
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	4770      	bx	lr
 800360c:	20000568 	.word	0x20000568
 8003610:	2000057c 	.word	0x2000057c

08003614 <_init>:
 8003614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003616:	bf00      	nop
 8003618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800361a:	bc08      	pop	{r3}
 800361c:	469e      	mov	lr, r3
 800361e:	4770      	bx	lr

08003620 <_fini>:
 8003620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003622:	bf00      	nop
 8003624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003626:	bc08      	pop	{r3}
 8003628:	469e      	mov	lr, r3
 800362a:	4770      	bx	lr

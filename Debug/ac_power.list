
ac_power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000652c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000870  08006640  08006640  00016640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006eb0  08006eb0  00016eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08006eb8  08006eb8  00016eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006ec0  08006ec0  00016ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000068c  20000000  08006ec4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003dc  2000068c  08007550  0002068c  2**2
                  ALLOC
  8 ._user_heap_stack 00000100  20000a68  08007550  00020a68  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  0002068c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002fa6f  00000000  00000000  000206b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000621d  00000000  00000000  00050124  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000e60  00000000  00000000  00056348  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000de0  00000000  00000000  000571a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00009674  00000000  00000000  00057f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005f9d  00000000  00000000  000615fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00067599  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000042ec  00000000  00000000  00067618  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00002a81  00000000  00000000  0006b904  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000003f  00000000  00000000  0006e385  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000068c 	.word	0x2000068c
 800012c:	00000000 	.word	0x00000000
 8000130:	08006624 	.word	0x08006624

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000690 	.word	0x20000690
 800014c:	08006624 	.word	0x08006624

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2iz>:
 8000a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a0c:	d215      	bcs.n	8000a3a <__aeabi_d2iz+0x36>
 8000a0e:	d511      	bpl.n	8000a34 <__aeabi_d2iz+0x30>
 8000a10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a18:	d912      	bls.n	8000a40 <__aeabi_d2iz+0x3c>
 8000a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a2e:	bf18      	it	ne
 8000a30:	4240      	negne	r0, r0
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d105      	bne.n	8000a4c <__aeabi_d2iz+0x48>
 8000a40:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a44:	bf08      	it	eq
 8000a46:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_d2uiz>:
 8000a54:	004a      	lsls	r2, r1, #1
 8000a56:	d211      	bcs.n	8000a7c <__aeabi_d2uiz+0x28>
 8000a58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a5c:	d211      	bcs.n	8000a82 <__aeabi_d2uiz+0x2e>
 8000a5e:	d50d      	bpl.n	8000a7c <__aeabi_d2uiz+0x28>
 8000a60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a68:	d40e      	bmi.n	8000a88 <__aeabi_d2uiz+0x34>
 8000a6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a76:	fa23 f002 	lsr.w	r0, r3, r2
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d102      	bne.n	8000a8e <__aeabi_d2uiz+0x3a>
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8c:	4770      	bx	lr
 8000a8e:	f04f 0000 	mov.w	r0, #0
 8000a92:	4770      	bx	lr

08000a94 <__aeabi_d2f>:
 8000a94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a98:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a9c:	bf24      	itt	cs
 8000a9e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aa2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aa6:	d90d      	bls.n	8000ac4 <__aeabi_d2f+0x30>
 8000aa8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ab4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000abc:	bf08      	it	eq
 8000abe:	f020 0001 	biceq.w	r0, r0, #1
 8000ac2:	4770      	bx	lr
 8000ac4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac8:	d121      	bne.n	8000b0e <__aeabi_d2f+0x7a>
 8000aca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ace:	bfbc      	itt	lt
 8000ad0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ad4:	4770      	bxlt	lr
 8000ad6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ada:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ade:	f1c2 0218 	rsb	r2, r2, #24
 8000ae2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ae6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aea:	fa20 f002 	lsr.w	r0, r0, r2
 8000aee:	bf18      	it	ne
 8000af0:	f040 0001 	orrne.w	r0, r0, #1
 8000af4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000afc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b00:	ea40 000c 	orr.w	r0, r0, ip
 8000b04:	fa23 f302 	lsr.w	r3, r3, r2
 8000b08:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b0c:	e7cc      	b.n	8000aa8 <__aeabi_d2f+0x14>
 8000b0e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b12:	d107      	bne.n	8000b24 <__aeabi_d2f+0x90>
 8000b14:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b18:	bf1e      	ittt	ne
 8000b1a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b1e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b22:	4770      	bxne	lr
 8000b24:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__aeabi_frsub>:
 8000b34:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b38:	e002      	b.n	8000b40 <__addsf3>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_fsub>:
 8000b3c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b40 <__addsf3>:
 8000b40:	0042      	lsls	r2, r0, #1
 8000b42:	bf1f      	itttt	ne
 8000b44:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b48:	ea92 0f03 	teqne	r2, r3
 8000b4c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b50:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b54:	d06a      	beq.n	8000c2c <__addsf3+0xec>
 8000b56:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b5a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b5e:	bfc1      	itttt	gt
 8000b60:	18d2      	addgt	r2, r2, r3
 8000b62:	4041      	eorgt	r1, r0
 8000b64:	4048      	eorgt	r0, r1
 8000b66:	4041      	eorgt	r1, r0
 8000b68:	bfb8      	it	lt
 8000b6a:	425b      	neglt	r3, r3
 8000b6c:	2b19      	cmp	r3, #25
 8000b6e:	bf88      	it	hi
 8000b70:	4770      	bxhi	lr
 8000b72:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4240      	negne	r0, r0
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b8a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b8e:	bf18      	it	ne
 8000b90:	4249      	negne	r1, r1
 8000b92:	ea92 0f03 	teq	r2, r3
 8000b96:	d03f      	beq.n	8000c18 <__addsf3+0xd8>
 8000b98:	f1a2 0201 	sub.w	r2, r2, #1
 8000b9c:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba0:	eb10 000c 	adds.w	r0, r0, ip
 8000ba4:	f1c3 0320 	rsb	r3, r3, #32
 8000ba8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb0:	d502      	bpl.n	8000bb8 <__addsf3+0x78>
 8000bb2:	4249      	negs	r1, r1
 8000bb4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bbc:	d313      	bcc.n	8000be6 <__addsf3+0xa6>
 8000bbe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bc2:	d306      	bcc.n	8000bd2 <__addsf3+0x92>
 8000bc4:	0840      	lsrs	r0, r0, #1
 8000bc6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bca:	f102 0201 	add.w	r2, r2, #1
 8000bce:	2afe      	cmp	r2, #254	; 0xfe
 8000bd0:	d251      	bcs.n	8000c76 <__addsf3+0x136>
 8000bd2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bda:	bf08      	it	eq
 8000bdc:	f020 0001 	biceq.w	r0, r0, #1
 8000be0:	ea40 0003 	orr.w	r0, r0, r3
 8000be4:	4770      	bx	lr
 8000be6:	0049      	lsls	r1, r1, #1
 8000be8:	eb40 0000 	adc.w	r0, r0, r0
 8000bec:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bf0:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf4:	d1ed      	bne.n	8000bd2 <__addsf3+0x92>
 8000bf6:	fab0 fc80 	clz	ip, r0
 8000bfa:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bfe:	ebb2 020c 	subs.w	r2, r2, ip
 8000c02:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c06:	bfaa      	itet	ge
 8000c08:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c0c:	4252      	neglt	r2, r2
 8000c0e:	4318      	orrge	r0, r3
 8000c10:	bfbc      	itt	lt
 8000c12:	40d0      	lsrlt	r0, r2
 8000c14:	4318      	orrlt	r0, r3
 8000c16:	4770      	bx	lr
 8000c18:	f092 0f00 	teq	r2, #0
 8000c1c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c20:	bf06      	itte	eq
 8000c22:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c26:	3201      	addeq	r2, #1
 8000c28:	3b01      	subne	r3, #1
 8000c2a:	e7b5      	b.n	8000b98 <__addsf3+0x58>
 8000c2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c34:	bf18      	it	ne
 8000c36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c3a:	d021      	beq.n	8000c80 <__addsf3+0x140>
 8000c3c:	ea92 0f03 	teq	r2, r3
 8000c40:	d004      	beq.n	8000c4c <__addsf3+0x10c>
 8000c42:	f092 0f00 	teq	r2, #0
 8000c46:	bf08      	it	eq
 8000c48:	4608      	moveq	r0, r1
 8000c4a:	4770      	bx	lr
 8000c4c:	ea90 0f01 	teq	r0, r1
 8000c50:	bf1c      	itt	ne
 8000c52:	2000      	movne	r0, #0
 8000c54:	4770      	bxne	lr
 8000c56:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c5a:	d104      	bne.n	8000c66 <__addsf3+0x126>
 8000c5c:	0040      	lsls	r0, r0, #1
 8000c5e:	bf28      	it	cs
 8000c60:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c64:	4770      	bx	lr
 8000c66:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c6a:	bf3c      	itt	cc
 8000c6c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c70:	4770      	bxcc	lr
 8000c72:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c76:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7e:	4770      	bx	lr
 8000c80:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c84:	bf16      	itet	ne
 8000c86:	4608      	movne	r0, r1
 8000c88:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c8c:	4601      	movne	r1, r0
 8000c8e:	0242      	lsls	r2, r0, #9
 8000c90:	bf06      	itte	eq
 8000c92:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c96:	ea90 0f01 	teqeq	r0, r1
 8000c9a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c9e:	4770      	bx	lr

08000ca0 <__aeabi_ui2f>:
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e004      	b.n	8000cb0 <__aeabi_i2f+0x8>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_i2f>:
 8000ca8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cac:	bf48      	it	mi
 8000cae:	4240      	negmi	r0, r0
 8000cb0:	ea5f 0c00 	movs.w	ip, r0
 8000cb4:	bf08      	it	eq
 8000cb6:	4770      	bxeq	lr
 8000cb8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cbc:	4601      	mov	r1, r0
 8000cbe:	f04f 0000 	mov.w	r0, #0
 8000cc2:	e01c      	b.n	8000cfe <__aeabi_l2f+0x2a>

08000cc4 <__aeabi_ul2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e00a      	b.n	8000ce8 <__aeabi_l2f+0x14>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_l2f>:
 8000cd4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce0:	d502      	bpl.n	8000ce8 <__aeabi_l2f+0x14>
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	ea5f 0c01 	movs.w	ip, r1
 8000cec:	bf02      	ittt	eq
 8000cee:	4684      	moveq	ip, r0
 8000cf0:	4601      	moveq	r1, r0
 8000cf2:	2000      	moveq	r0, #0
 8000cf4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cf8:	bf08      	it	eq
 8000cfa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cfe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d02:	fabc f28c 	clz	r2, ip
 8000d06:	3a08      	subs	r2, #8
 8000d08:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d0c:	db10      	blt.n	8000d30 <__aeabi_l2f+0x5c>
 8000d0e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d12:	4463      	add	r3, ip
 8000d14:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d18:	f1c2 0220 	rsb	r2, r2, #32
 8000d1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d20:	fa20 f202 	lsr.w	r2, r0, r2
 8000d24:	eb43 0002 	adc.w	r0, r3, r2
 8000d28:	bf08      	it	eq
 8000d2a:	f020 0001 	biceq.w	r0, r0, #1
 8000d2e:	4770      	bx	lr
 8000d30:	f102 0220 	add.w	r2, r2, #32
 8000d34:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d38:	f1c2 0220 	rsb	r2, r2, #32
 8000d3c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d40:	fa21 f202 	lsr.w	r2, r1, r2
 8000d44:	eb43 0002 	adc.w	r0, r3, r2
 8000d48:	bf08      	it	eq
 8000d4a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d4e:	4770      	bx	lr

08000d50 <__aeabi_fmul>:
 8000d50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d58:	bf1e      	ittt	ne
 8000d5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d5e:	ea92 0f0c 	teqne	r2, ip
 8000d62:	ea93 0f0c 	teqne	r3, ip
 8000d66:	d06f      	beq.n	8000e48 <__aeabi_fmul+0xf8>
 8000d68:	441a      	add	r2, r3
 8000d6a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d6e:	0240      	lsls	r0, r0, #9
 8000d70:	bf18      	it	ne
 8000d72:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d76:	d01e      	beq.n	8000db6 <__aeabi_fmul+0x66>
 8000d78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d7c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d80:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d84:	fba0 3101 	umull	r3, r1, r0, r1
 8000d88:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d8c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d90:	bf3e      	ittt	cc
 8000d92:	0049      	lslcc	r1, r1, #1
 8000d94:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d98:	005b      	lslcc	r3, r3, #1
 8000d9a:	ea40 0001 	orr.w	r0, r0, r1
 8000d9e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000da2:	2afd      	cmp	r2, #253	; 0xfd
 8000da4:	d81d      	bhi.n	8000de2 <__aeabi_fmul+0x92>
 8000da6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000daa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dae:	bf08      	it	eq
 8000db0:	f020 0001 	biceq.w	r0, r0, #1
 8000db4:	4770      	bx	lr
 8000db6:	f090 0f00 	teq	r0, #0
 8000dba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dbe:	bf08      	it	eq
 8000dc0:	0249      	lsleq	r1, r1, #9
 8000dc2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dca:	3a7f      	subs	r2, #127	; 0x7f
 8000dcc:	bfc2      	ittt	gt
 8000dce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dd2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dd6:	4770      	bxgt	lr
 8000dd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ddc:	f04f 0300 	mov.w	r3, #0
 8000de0:	3a01      	subs	r2, #1
 8000de2:	dc5d      	bgt.n	8000ea0 <__aeabi_fmul+0x150>
 8000de4:	f112 0f19 	cmn.w	r2, #25
 8000de8:	bfdc      	itt	le
 8000dea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dee:	4770      	bxle	lr
 8000df0:	f1c2 0200 	rsb	r2, r2, #0
 8000df4:	0041      	lsls	r1, r0, #1
 8000df6:	fa21 f102 	lsr.w	r1, r1, r2
 8000dfa:	f1c2 0220 	rsb	r2, r2, #32
 8000dfe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e02:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e06:	f140 0000 	adc.w	r0, r0, #0
 8000e0a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e0e:	bf08      	it	eq
 8000e10:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e14:	4770      	bx	lr
 8000e16:	f092 0f00 	teq	r2, #0
 8000e1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e1e:	bf02      	ittt	eq
 8000e20:	0040      	lsleq	r0, r0, #1
 8000e22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e26:	3a01      	subeq	r2, #1
 8000e28:	d0f9      	beq.n	8000e1e <__aeabi_fmul+0xce>
 8000e2a:	ea40 000c 	orr.w	r0, r0, ip
 8000e2e:	f093 0f00 	teq	r3, #0
 8000e32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e36:	bf02      	ittt	eq
 8000e38:	0049      	lsleq	r1, r1, #1
 8000e3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e3e:	3b01      	subeq	r3, #1
 8000e40:	d0f9      	beq.n	8000e36 <__aeabi_fmul+0xe6>
 8000e42:	ea41 010c 	orr.w	r1, r1, ip
 8000e46:	e78f      	b.n	8000d68 <__aeabi_fmul+0x18>
 8000e48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e4c:	ea92 0f0c 	teq	r2, ip
 8000e50:	bf18      	it	ne
 8000e52:	ea93 0f0c 	teqne	r3, ip
 8000e56:	d00a      	beq.n	8000e6e <__aeabi_fmul+0x11e>
 8000e58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e5c:	bf18      	it	ne
 8000e5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e62:	d1d8      	bne.n	8000e16 <__aeabi_fmul+0xc6>
 8000e64:	ea80 0001 	eor.w	r0, r0, r1
 8000e68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e6c:	4770      	bx	lr
 8000e6e:	f090 0f00 	teq	r0, #0
 8000e72:	bf17      	itett	ne
 8000e74:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e78:	4608      	moveq	r0, r1
 8000e7a:	f091 0f00 	teqne	r1, #0
 8000e7e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e82:	d014      	beq.n	8000eae <__aeabi_fmul+0x15e>
 8000e84:	ea92 0f0c 	teq	r2, ip
 8000e88:	d101      	bne.n	8000e8e <__aeabi_fmul+0x13e>
 8000e8a:	0242      	lsls	r2, r0, #9
 8000e8c:	d10f      	bne.n	8000eae <__aeabi_fmul+0x15e>
 8000e8e:	ea93 0f0c 	teq	r3, ip
 8000e92:	d103      	bne.n	8000e9c <__aeabi_fmul+0x14c>
 8000e94:	024b      	lsls	r3, r1, #9
 8000e96:	bf18      	it	ne
 8000e98:	4608      	movne	r0, r1
 8000e9a:	d108      	bne.n	8000eae <__aeabi_fmul+0x15e>
 8000e9c:	ea80 0001 	eor.w	r0, r0, r1
 8000ea0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eac:	4770      	bx	lr
 8000eae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eb2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eb6:	4770      	bx	lr

08000eb8 <__aeabi_fdiv>:
 8000eb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ebc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec0:	bf1e      	ittt	ne
 8000ec2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ec6:	ea92 0f0c 	teqne	r2, ip
 8000eca:	ea93 0f0c 	teqne	r3, ip
 8000ece:	d069      	beq.n	8000fa4 <__aeabi_fdiv+0xec>
 8000ed0:	eba2 0203 	sub.w	r2, r2, r3
 8000ed4:	ea80 0c01 	eor.w	ip, r0, r1
 8000ed8:	0249      	lsls	r1, r1, #9
 8000eda:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ede:	d037      	beq.n	8000f50 <__aeabi_fdiv+0x98>
 8000ee0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ee4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ee8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000eec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	bf38      	it	cc
 8000ef4:	005b      	lslcc	r3, r3, #1
 8000ef6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000efa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000efe:	428b      	cmp	r3, r1
 8000f00:	bf24      	itt	cs
 8000f02:	1a5b      	subcs	r3, r3, r1
 8000f04:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f08:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f12:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f16:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f1a:	bf24      	itt	cs
 8000f1c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f20:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f24:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f28:	bf24      	itt	cs
 8000f2a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f2e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f32:	011b      	lsls	r3, r3, #4
 8000f34:	bf18      	it	ne
 8000f36:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f3a:	d1e0      	bne.n	8000efe <__aeabi_fdiv+0x46>
 8000f3c:	2afd      	cmp	r2, #253	; 0xfd
 8000f3e:	f63f af50 	bhi.w	8000de2 <__aeabi_fmul+0x92>
 8000f42:	428b      	cmp	r3, r1
 8000f44:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f48:	bf08      	it	eq
 8000f4a:	f020 0001 	biceq.w	r0, r0, #1
 8000f4e:	4770      	bx	lr
 8000f50:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f54:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f58:	327f      	adds	r2, #127	; 0x7f
 8000f5a:	bfc2      	ittt	gt
 8000f5c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f60:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f64:	4770      	bxgt	lr
 8000f66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f6a:	f04f 0300 	mov.w	r3, #0
 8000f6e:	3a01      	subs	r2, #1
 8000f70:	e737      	b.n	8000de2 <__aeabi_fmul+0x92>
 8000f72:	f092 0f00 	teq	r2, #0
 8000f76:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f7a:	bf02      	ittt	eq
 8000f7c:	0040      	lsleq	r0, r0, #1
 8000f7e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f82:	3a01      	subeq	r2, #1
 8000f84:	d0f9      	beq.n	8000f7a <__aeabi_fdiv+0xc2>
 8000f86:	ea40 000c 	orr.w	r0, r0, ip
 8000f8a:	f093 0f00 	teq	r3, #0
 8000f8e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	bf02      	ittt	eq
 8000f94:	0049      	lsleq	r1, r1, #1
 8000f96:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f9a:	3b01      	subeq	r3, #1
 8000f9c:	d0f9      	beq.n	8000f92 <__aeabi_fdiv+0xda>
 8000f9e:	ea41 010c 	orr.w	r1, r1, ip
 8000fa2:	e795      	b.n	8000ed0 <__aeabi_fdiv+0x18>
 8000fa4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fa8:	ea92 0f0c 	teq	r2, ip
 8000fac:	d108      	bne.n	8000fc0 <__aeabi_fdiv+0x108>
 8000fae:	0242      	lsls	r2, r0, #9
 8000fb0:	f47f af7d 	bne.w	8000eae <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	f47f af70 	bne.w	8000e9c <__aeabi_fmul+0x14c>
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	e776      	b.n	8000eae <__aeabi_fmul+0x15e>
 8000fc0:	ea93 0f0c 	teq	r3, ip
 8000fc4:	d104      	bne.n	8000fd0 <__aeabi_fdiv+0x118>
 8000fc6:	024b      	lsls	r3, r1, #9
 8000fc8:	f43f af4c 	beq.w	8000e64 <__aeabi_fmul+0x114>
 8000fcc:	4608      	mov	r0, r1
 8000fce:	e76e      	b.n	8000eae <__aeabi_fmul+0x15e>
 8000fd0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fd4:	bf18      	it	ne
 8000fd6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	d1ca      	bne.n	8000f72 <__aeabi_fdiv+0xba>
 8000fdc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fe0:	f47f af5c 	bne.w	8000e9c <__aeabi_fmul+0x14c>
 8000fe4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fe8:	f47f af3c 	bne.w	8000e64 <__aeabi_fmul+0x114>
 8000fec:	e75f      	b.n	8000eae <__aeabi_fmul+0x15e>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_f2uiz>:
 8000ff0:	0042      	lsls	r2, r0, #1
 8000ff2:	d20e      	bcs.n	8001012 <__aeabi_f2uiz+0x22>
 8000ff4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ff8:	d30b      	bcc.n	8001012 <__aeabi_f2uiz+0x22>
 8000ffa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ffe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001002:	d409      	bmi.n	8001018 <__aeabi_f2uiz+0x28>
 8001004:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001008:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800100c:	fa23 f002 	lsr.w	r0, r3, r2
 8001010:	4770      	bx	lr
 8001012:	f04f 0000 	mov.w	r0, #0
 8001016:	4770      	bx	lr
 8001018:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800101c:	d101      	bne.n	8001022 <__aeabi_f2uiz+0x32>
 800101e:	0242      	lsls	r2, r0, #9
 8001020:	d102      	bne.n	8001028 <__aeabi_f2uiz+0x38>
 8001022:	f04f 30ff 	mov.w	r0, #4294967295
 8001026:	4770      	bx	lr
 8001028:	f04f 0000 	mov.w	r0, #0
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	60fb      	str	r3, [r7, #12]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800104e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001052:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	791b      	ldrb	r3, [r3, #4]
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	4313      	orrs	r3, r2
 8001060:	68fa      	ldr	r2, [r7, #12]
 8001062:	4313      	orrs	r3, r2
 8001064:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	605a      	str	r2, [r3, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <ADC_Init+0xa0>)
 8001076:	4013      	ands	r3, r2
 8001078:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	68da      	ldr	r2, [r3, #12]
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	431a      	orrs	r2, r3
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	795b      	ldrb	r3, [r3, #5]
 8001088:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 800108a:	4313      	orrs	r3, r2
 800108c:	68fa      	ldr	r2, [r7, #12]
 800108e:	4313      	orrs	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	609a      	str	r2, [r3, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109c:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80010a4:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	7c1b      	ldrb	r3, [r3, #16]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	7afb      	ldrb	r3, [r7, #11]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
 80010b4:	7afb      	ldrb	r3, [r7, #11]
 80010b6:	051b      	lsls	r3, r3, #20
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68fa      	ldr	r2, [r7, #12]
 80010c2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	fff1f7fd 	.word	0xfff1f7fd

080010d4 <ADC_StructInit>:
  * @brief  Fills each ADC_InitStruct member with its default value.
  * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	711a      	strb	r2, [r3, #4]
  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	715a      	strb	r2, [r3, #5]
  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
  /* Initialize the ADC_NbrOfChannel member */
  ADC_InitStruct->ADC_NbrOfChannel = 1;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2201      	movs	r2, #1
 80010fe:	741a      	strb	r2, [r3, #16]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr

0800110a <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
 8001112:	460b      	mov	r3, r1
 8001114:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001116:	78fb      	ldrb	r3, [r7, #3]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d006      	beq.n	800112a <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f043 0201 	orr.w	r2, r3, #1
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
  }
}
 8001128:	e005      	b.n	8001136 <ADC_Cmd+0x2c>
    ADCx->CR2 &= CR2_ADON_Reset;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f023 0201 	bic.w	r2, r3, #1
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	609a      	str	r2, [r3, #8]
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800114c:	78fb      	ldrb	r3, [r7, #3]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d006      	beq.n	8001160 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= CR2_DMA_Reset;
  }
}
 800115e:	e005      	b.n	800116c <ADC_DMACmd+0x2c>
    ADCx->CR2 &= CR2_DMA_Reset;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	609a      	str	r2, [r3, #8]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr

08001176 <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f043 0204 	orr.w	r2, r3, #4
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	609a      	str	r2, [r3, #8]
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr

08001194 <ADC_SoftwareStartConvCmd>:
  * @param  NewState: new state of the selected ADC software start conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011a0:	78fb      	ldrb	r3, [r7, #3]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d006      	beq.n	80011b4 <ADC_SoftwareStartConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	609a      	str	r2, [r3, #8]
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
  }
}
 80011b2:	e005      	b.n	80011c0 <ADC_SoftwareStartConvCmd+0x2c>
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f423 02a0 	bic.w	r2, r3, #5242880	; 0x500000
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	609a      	str	r2, [r3, #8]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr

080011ca <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b085      	sub	sp, #20
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	4608      	mov	r0, r1
 80011d4:	4611      	mov	r1, r2
 80011d6:	461a      	mov	r2, r3
 80011d8:	4603      	mov	r3, r0
 80011da:	70fb      	strb	r3, [r7, #3]
 80011dc:	460b      	mov	r3, r1
 80011de:	70bb      	strb	r3, [r7, #2]
 80011e0:	4613      	mov	r3, r2
 80011e2:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	2300      	movs	r3, #0
 80011ea:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80011ec:	78fb      	ldrb	r3, [r7, #3]
 80011ee:	2b09      	cmp	r3, #9
 80011f0:	d923      	bls.n	800123a <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 80011f8:	78fb      	ldrb	r3, [r7, #3]
 80011fa:	f1a3 020a 	sub.w	r2, r3, #10
 80011fe:	4613      	mov	r3, r2
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	4413      	add	r3, r2
 8001204:	2207      	movs	r2, #7
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	43db      	mvns	r3, r3
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	4013      	ands	r3, r2
 8001214:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8001216:	7879      	ldrb	r1, [r7, #1]
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	f1a3 020a 	sub.w	r2, r3, #10
 800121e:	4613      	mov	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4413      	add	r3, r2
 8001224:	fa01 f303 	lsl.w	r3, r1, r3
 8001228:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	4313      	orrs	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68fa      	ldr	r2, [r7, #12]
 8001236:	60da      	str	r2, [r3, #12]
 8001238:	e01e      	b.n	8001278 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 8001240:	78fa      	ldrb	r2, [r7, #3]
 8001242:	4613      	mov	r3, r2
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	4413      	add	r3, r2
 8001248:	2207      	movs	r2, #7
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	43db      	mvns	r3, r3
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	4013      	ands	r3, r2
 8001258:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 800125a:	7879      	ldrb	r1, [r7, #1]
 800125c:	78fa      	ldrb	r2, [r7, #3]
 800125e:	4613      	mov	r3, r2
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	4413      	add	r3, r2
 8001264:	fa01 f303 	lsl.w	r3, r1, r3
 8001268:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	4313      	orrs	r3, r2
 8001270:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8001278:	78bb      	ldrb	r3, [r7, #2]
 800127a:	2b06      	cmp	r3, #6
 800127c:	d821      	bhi.n	80012c2 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001282:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 8001284:	78bb      	ldrb	r3, [r7, #2]
 8001286:	1e5a      	subs	r2, r3, #1
 8001288:	4613      	mov	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4413      	add	r3, r2
 800128e:	221f      	movs	r2, #31
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	43db      	mvns	r3, r3
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	4013      	ands	r3, r2
 800129e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80012a0:	78f9      	ldrb	r1, [r7, #3]
 80012a2:	78bb      	ldrb	r3, [r7, #2]
 80012a4:	1e5a      	subs	r2, r3, #1
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	fa01 f303 	lsl.w	r3, r1, r3
 80012b0:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68fa      	ldr	r2, [r7, #12]
 80012be:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80012c0:	e047      	b.n	8001352 <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 80012c2:	78bb      	ldrb	r3, [r7, #2]
 80012c4:	2b0c      	cmp	r3, #12
 80012c6:	d821      	bhi.n	800130c <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 80012ce:	78bb      	ldrb	r3, [r7, #2]
 80012d0:	1fda      	subs	r2, r3, #7
 80012d2:	4613      	mov	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	221f      	movs	r2, #31
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	4013      	ands	r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 80012ea:	78f9      	ldrb	r1, [r7, #3]
 80012ec:	78bb      	ldrb	r3, [r7, #2]
 80012ee:	1fda      	subs	r2, r3, #7
 80012f0:	4613      	mov	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	fa01 f303 	lsl.w	r3, r1, r3
 80012fa:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	4313      	orrs	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	631a      	str	r2, [r3, #48]	; 0x30
}
 800130a:	e022      	b.n	8001352 <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001310:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 8001312:	78bb      	ldrb	r3, [r7, #2]
 8001314:	f1a3 020d 	sub.w	r2, r3, #13
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	221f      	movs	r2, #31
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	43db      	mvns	r3, r3
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	4013      	ands	r3, r2
 800132e:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8001330:	78f9      	ldrb	r1, [r7, #3]
 8001332:	78bb      	ldrb	r3, [r7, #2]
 8001334:	f1a3 020d 	sub.w	r2, r3, #13
 8001338:	4613      	mov	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	fa01 f303 	lsl.w	r3, r1, r3
 8001342:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8001344:	68fa      	ldr	r2, [r7, #12]
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	4313      	orrs	r3, r2
 800134a:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001352:	bf00      	nop
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr

0800135c <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800137a:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	691b      	ldr	r3, [r3, #16]
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 800138a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	695b      	ldr	r3, [r3, #20]
 8001390:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	699b      	ldr	r3, [r3, #24]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001396:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80013a2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a8:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	68da      	ldr	r2, [r3, #12]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685a      	ldr	r2, [r3, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	60da      	str	r2, [r3, #12]
}
 80013ce:	bf00      	nop
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr

080013d8 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
/*-------------- Reset DMA init structure parameters values ------------------*/
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
  /* Initialize the DMA_MemoryBaseAddr member */
  DMA_InitStruct->DMA_MemoryBaseAddr = 0;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	605a      	str	r2, [r3, #4]
  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	60da      	str	r2, [r3, #12]
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	619a      	str	r2, [r3, #24]
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	61da      	str	r2, [r3, #28]
  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	621a      	str	r2, [r3, #32]
  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Initialize the DMA_M2M member */
  DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001438:	78fb      	ldrb	r3, [r7, #3]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d006      	beq.n	800144c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f043 0201 	orr.w	r2, r3, #1
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 800144a:	e006      	b.n	800145a <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001454:	4013      	ands	r3, r2
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	6013      	str	r3, [r2, #0]
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <DMA_GetCurrDataCounter>:
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval The number of remaining data units in the current DMAy Channelx
  *         transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Return the number of remaining data units for DMAy Channelx */
  return ((uint16_t)(DMAy_Channelx->CNDTR));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	b29b      	uxth	r3, r3
}
 8001472:	4618      	mov	r0, r3
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <DMA_GetFlagStatus>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8001484:	2300      	movs	r3, #0
 8001486:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <DMA_GetFlagStatus+0x22>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <DMA_GetFlagStatus+0x48>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	e002      	b.n	80014a4 <DMA_GetFlagStatus+0x28>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 800149e:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <DMA_GetFlagStatus+0x4c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 80014a4:	68ba      	ldr	r2, [r7, #8]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4013      	ands	r3, r2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d002      	beq.n	80014b4 <DMA_GetFlagStatus+0x38>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 80014ae:	2301      	movs	r3, #1
 80014b0:	73fb      	strb	r3, [r7, #15]
 80014b2:	e001      	b.n	80014b8 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 80014b4:	2300      	movs	r3, #0
 80014b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3714      	adds	r7, #20
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr
 80014c4:	40020400 	.word	0x40020400
 80014c8:	40020000 	.word	0x40020000

080014cc <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 80014de:	4a06      	ldr	r2, [pc, #24]	; (80014f8 <DMA_ClearFlag+0x2c>)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
  }
}
 80014e4:	e002      	b.n	80014ec <DMA_ClearFlag+0x20>
    DMA1->IFCR = DMAy_FLAG;
 80014e6:	4a05      	ldr	r2, [pc, #20]	; (80014fc <DMA_ClearFlag+0x30>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6053      	str	r3, [r2, #4]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40020400 	.word	0x40020400
 80014fc:	40020000 	.word	0x40020000

08001500 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001500:	b480      	push	{r7}
 8001502:	b089      	sub	sp, #36	; 0x24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	2300      	movs	r3, #0
 8001514:	61bb      	str	r3, [r7, #24]
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	78db      	ldrb	r3, [r3, #3]
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	78db      	ldrb	r3, [r3, #3]
 8001530:	f003 0310 	and.w	r3, r3, #16
 8001534:	2b00      	cmp	r3, #0
 8001536:	d005      	beq.n	8001544 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	789b      	ldrb	r3, [r3, #2]
 800153c:	461a      	mov	r2, r3
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	4313      	orrs	r3, r2
 8001542:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d044      	beq.n	80015d8 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001554:	2300      	movs	r3, #0
 8001556:	61bb      	str	r3, [r7, #24]
 8001558:	e038      	b.n	80015cc <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800155a:	2201      	movs	r2, #1
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4013      	ands	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	429a      	cmp	r2, r3
 8001576:	d126      	bne.n	80015c6 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800157e:	220f      	movs	r2, #15
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	43db      	mvns	r3, r3
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	4013      	ands	r3, r2
 8001590:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001592:	69fa      	ldr	r2, [r7, #28]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	4313      	orrs	r3, r2
 800159e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	78db      	ldrb	r3, [r3, #3]
 80015a4:	2b28      	cmp	r3, #40	; 0x28
 80015a6:	d105      	bne.n	80015b4 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80015a8:	2201      	movs	r2, #1
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	409a      	lsls	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	615a      	str	r2, [r3, #20]
 80015b2:	e008      	b.n	80015c6 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	78db      	ldrb	r3, [r3, #3]
 80015b8:	2b48      	cmp	r3, #72	; 0x48
 80015ba:	d104      	bne.n	80015c6 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80015bc:	2201      	movs	r2, #1
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	409a      	lsls	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	3301      	adds	r3, #1
 80015ca:	61bb      	str	r3, [r7, #24]
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	2b07      	cmp	r3, #7
 80015d0:	d9c3      	bls.n	800155a <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	2bff      	cmp	r3, #255	; 0xff
 80015de:	d946      	bls.n	800166e <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80015e6:	2300      	movs	r3, #0
 80015e8:	61bb      	str	r3, [r7, #24]
 80015ea:	e03a      	b.n	8001662 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	3308      	adds	r3, #8
 80015f0:	2201      	movs	r2, #1
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	429a      	cmp	r2, r3
 800160a:	d127      	bne.n	800165c <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8001612:	220f      	movs	r2, #15
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	43db      	mvns	r3, r3
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	4013      	ands	r3, r2
 8001624:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001626:	69fa      	ldr	r2, [r7, #28]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	4313      	orrs	r3, r2
 8001632:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	78db      	ldrb	r3, [r3, #3]
 8001638:	2b28      	cmp	r3, #40	; 0x28
 800163a:	d105      	bne.n	8001648 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	3308      	adds	r3, #8
 8001640:	2201      	movs	r2, #1
 8001642:	409a      	lsls	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	78db      	ldrb	r3, [r3, #3]
 800164c:	2b48      	cmp	r3, #72	; 0x48
 800164e:	d105      	bne.n	800165c <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	3308      	adds	r3, #8
 8001654:	2201      	movs	r2, #1
 8001656:	409a      	lsls	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	3301      	adds	r3, #1
 8001660:	61bb      	str	r3, [r7, #24]
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	2b07      	cmp	r3, #7
 8001666:	d9c1      	bls.n	80015ec <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	605a      	str	r2, [r3, #4]
  }
}
 800166e:	bf00      	nop
 8001670:	3724      	adds	r7, #36	; 0x24
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr

08001678 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001686:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2202      	movs	r2, #2
 800168c:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2204      	movs	r2, #4
 8001692:	70da      	strb	r2, [r3, #3]
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr
	...

080016a0 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 80016ac:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <RCC_ADCCLKConfig+0x34>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016b8:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4313      	orrs	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80016c2:	4a04      	ldr	r2, [pc, #16]	; (80016d4 <RCC_ADCCLKConfig+0x34>)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6053      	str	r3, [r2, #4]
}
 80016c8:	bf00      	nop
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	40021000 	.word	0x40021000

080016d8 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80016d8:	b480      	push	{r7}
 80016da:	b087      	sub	sp, #28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	2300      	movs	r3, #0
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	2300      	movs	r3, #0
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	2300      	movs	r3, #0
 80016ee:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80016f0:	4b4c      	ldr	r3, [pc, #304]	; (8001824 <RCC_GetClocksFreq+0x14c>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 030c 	and.w	r3, r3, #12
 80016f8:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	2b04      	cmp	r3, #4
 80016fe:	d007      	beq.n	8001710 <RCC_GetClocksFreq+0x38>
 8001700:	2b08      	cmp	r3, #8
 8001702:	d009      	beq.n	8001718 <RCC_GetClocksFreq+0x40>
 8001704:	2b00      	cmp	r3, #0
 8001706:	d133      	bne.n	8001770 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a47      	ldr	r2, [pc, #284]	; (8001828 <RCC_GetClocksFreq+0x150>)
 800170c:	601a      	str	r2, [r3, #0]
      break;
 800170e:	e033      	b.n	8001778 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a45      	ldr	r2, [pc, #276]	; (8001828 <RCC_GetClocksFreq+0x150>)
 8001714:	601a      	str	r2, [r3, #0]
      break;
 8001716:	e02f      	b.n	8001778 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8001718:	4b42      	ldr	r3, [pc, #264]	; (8001824 <RCC_GetClocksFreq+0x14c>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001720:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8001722:	4b40      	ldr	r3, [pc, #256]	; (8001824 <RCC_GetClocksFreq+0x14c>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800172a:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	0c9b      	lsrs	r3, r3, #18
 8001730:	3302      	adds	r3, #2
 8001732:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d106      	bne.n	8001748 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	4a3b      	ldr	r2, [pc, #236]	; (800182c <RCC_GetClocksFreq+0x154>)
 800173e:	fb02 f203 	mul.w	r2, r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8001746:	e017      	b.n	8001778 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8001748:	4b36      	ldr	r3, [pc, #216]	; (8001824 <RCC_GetClocksFreq+0x14c>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d006      	beq.n	8001762 <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	4a35      	ldr	r2, [pc, #212]	; (800182c <RCC_GetClocksFreq+0x154>)
 8001758:	fb02 f203 	mul.w	r2, r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	601a      	str	r2, [r3, #0]
      break;
 8001760:	e00a      	b.n	8001778 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4a30      	ldr	r2, [pc, #192]	; (8001828 <RCC_GetClocksFreq+0x150>)
 8001766:	fb02 f203 	mul.w	r2, r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	601a      	str	r2, [r3, #0]
      break;
 800176e:	e003      	b.n	8001778 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a2d      	ldr	r2, [pc, #180]	; (8001828 <RCC_GetClocksFreq+0x150>)
 8001774:	601a      	str	r2, [r3, #0]
      break;
 8001776:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8001778:	4b2a      	ldr	r3, [pc, #168]	; (8001824 <RCC_GetClocksFreq+0x14c>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001780:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	091b      	lsrs	r3, r3, #4
 8001786:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001788:	4a29      	ldr	r2, [pc, #164]	; (8001830 <RCC_GetClocksFreq+0x158>)
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	4413      	add	r3, r2
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	40da      	lsrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 80017a0:	4b20      	ldr	r3, [pc, #128]	; (8001824 <RCC_GetClocksFreq+0x14c>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80017a8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	0a1b      	lsrs	r3, r3, #8
 80017ae:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80017b0:	4a1f      	ldr	r2, [pc, #124]	; (8001830 <RCC_GetClocksFreq+0x158>)
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	4413      	add	r3, r2
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	40da      	lsrs	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 80017c8:	4b16      	ldr	r3, [pc, #88]	; (8001824 <RCC_GetClocksFreq+0x14c>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80017d0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	0adb      	lsrs	r3, r3, #11
 80017d6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80017d8:	4a15      	ldr	r2, [pc, #84]	; (8001830 <RCC_GetClocksFreq+0x158>)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	4413      	add	r3, r2
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	40da      	lsrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <RCC_GetClocksFreq+0x14c>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017f8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	0b9b      	lsrs	r3, r3, #14
 80017fe:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8001800:	4a0c      	ldr	r2, [pc, #48]	; (8001834 <RCC_GetClocksFreq+0x15c>)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	4413      	add	r3, r2
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68da      	ldr	r2, [r3, #12]
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	fbb2 f2f3 	udiv	r2, r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	611a      	str	r2, [r3, #16]
}
 800181a:	bf00      	nop
 800181c:	371c      	adds	r7, #28
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	40021000 	.word	0x40021000
 8001828:	007a1200 	.word	0x007a1200
 800182c:	003d0900 	.word	0x003d0900
 8001830:	20000004 	.word	0x20000004
 8001834:	20000014 	.word	0x20000014

08001838 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001844:	78fb      	ldrb	r3, [r7, #3]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d006      	beq.n	8001858 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800184a:	4909      	ldr	r1, [pc, #36]	; (8001870 <RCC_AHBPeriphClockCmd+0x38>)
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <RCC_AHBPeriphClockCmd+0x38>)
 800184e:	695a      	ldr	r2, [r3, #20]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4313      	orrs	r3, r2
 8001854:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8001856:	e006      	b.n	8001866 <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001858:	4905      	ldr	r1, [pc, #20]	; (8001870 <RCC_AHBPeriphClockCmd+0x38>)
 800185a:	4b05      	ldr	r3, [pc, #20]	; (8001870 <RCC_AHBPeriphClockCmd+0x38>)
 800185c:	695a      	ldr	r2, [r3, #20]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	43db      	mvns	r3, r3
 8001862:	4013      	ands	r3, r2
 8001864:	614b      	str	r3, [r1, #20]
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	40021000 	.word	0x40021000

08001874 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001880:	78fb      	ldrb	r3, [r7, #3]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d006      	beq.n	8001894 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001886:	4909      	ldr	r1, [pc, #36]	; (80018ac <RCC_APB2PeriphClockCmd+0x38>)
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <RCC_APB2PeriphClockCmd+0x38>)
 800188a:	699a      	ldr	r2, [r3, #24]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4313      	orrs	r3, r2
 8001890:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001892:	e006      	b.n	80018a2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001894:	4905      	ldr	r1, [pc, #20]	; (80018ac <RCC_APB2PeriphClockCmd+0x38>)
 8001896:	4b05      	ldr	r3, [pc, #20]	; (80018ac <RCC_APB2PeriphClockCmd+0x38>)
 8001898:	699a      	ldr	r2, [r3, #24]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	43db      	mvns	r3, r3
 800189e:	4013      	ands	r3, r2
 80018a0:	618b      	str	r3, [r1, #24]
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	40021000 	.word	0x40021000

080018b0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80018bc:	78fb      	ldrb	r3, [r7, #3]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d006      	beq.n	80018d0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80018c2:	4909      	ldr	r1, [pc, #36]	; (80018e8 <RCC_APB1PeriphClockCmd+0x38>)
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <RCC_APB1PeriphClockCmd+0x38>)
 80018c6:	69da      	ldr	r2, [r3, #28]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80018ce:	e006      	b.n	80018de <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80018d0:	4905      	ldr	r1, [pc, #20]	; (80018e8 <RCC_APB1PeriphClockCmd+0x38>)
 80018d2:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <RCC_APB1PeriphClockCmd+0x38>)
 80018d4:	69da      	ldr	r2, [r3, #28]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	43db      	mvns	r3, r3
 80018da:	4013      	ands	r3, r2
 80018dc:	61cb      	str	r3, [r1, #28]
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr
 80018e8:	40021000 	.word	0x40021000

080018ec <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8001900:	89fb      	ldrh	r3, [r7, #14]
 8001902:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8001906:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	881a      	ldrh	r2, [r3, #0]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	885b      	ldrh	r3, [r3, #2]
 8001910:	4313      	orrs	r3, r2
 8001912:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001918:	4313      	orrs	r3, r2
 800191a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001920:	4313      	orrs	r3, r2
 8001922:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001928:	4313      	orrs	r3, r2
 800192a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001930:	4313      	orrs	r3, r2
 8001932:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001938:	4313      	orrs	r3, r2
 800193a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001940:	4313      	orrs	r3, r2
 8001942:	b29a      	uxth	r2, r3
 8001944:	89fb      	ldrh	r3, [r7, #14]
 8001946:	4313      	orrs	r3, r2
 8001948:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	89fa      	ldrh	r2, [r7, #14]
 800194e:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	8b9b      	ldrh	r3, [r3, #28]
 8001954:	b29b      	uxth	r3, r3
 8001956:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800195a:	b29a      	uxth	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	8a1a      	ldrh	r2, [r3, #16]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	821a      	strh	r2, [r3, #16]
}
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr

08001972 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct : pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2207      	movs	r2, #7
 80019ae:	821a      	strh	r2, [r3, #16]
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr

080019ba <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	460b      	mov	r3, r1
 80019c4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80019c6:	78fb      	ldrb	r3, [r7, #3]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d008      	beq.n	80019de <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 80019dc:	e007      	b.n	80019ee <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	801a      	strh	r2, [r3, #0]
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI/I2S DMA transfer request.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	807b      	strh	r3, [r7, #2]
 8001a04:	4613      	mov	r3, r2
 8001a06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
  if (NewState != DISABLE)
 8001a08:	787b      	ldrb	r3, [r7, #1]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d008      	beq.n	8001a20 <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI/I2S DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	889b      	ldrh	r3, [r3, #4]
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	887b      	ldrh	r3, [r7, #2]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI/I2S DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
  }
}
 8001a1e:	e009      	b.n	8001a34 <SPI_I2S_DMACmd+0x3c>
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	889b      	ldrh	r3, [r3, #4]
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	887b      	ldrh	r3, [r7, #2]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	809a      	strh	r2, [r3, #4]
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr
	...

08001a40 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a2e      	ldr	r2, [pc, #184]	; (8001b10 <TIM_TimeBaseInit+0xd0>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d013      	beq.n	8001a84 <TIM_TimeBaseInit+0x44>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a2d      	ldr	r2, [pc, #180]	; (8001b14 <TIM_TimeBaseInit+0xd4>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d00f      	beq.n	8001a84 <TIM_TimeBaseInit+0x44>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a6a:	d00b      	beq.n	8001a84 <TIM_TimeBaseInit+0x44>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a2a      	ldr	r2, [pc, #168]	; (8001b18 <TIM_TimeBaseInit+0xd8>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d007      	beq.n	8001a84 <TIM_TimeBaseInit+0x44>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a29      	ldr	r2, [pc, #164]	; (8001b1c <TIM_TimeBaseInit+0xdc>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d003      	beq.n	8001a84 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a28      	ldr	r2, [pc, #160]	; (8001b20 <TIM_TimeBaseInit+0xe0>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d108      	bne.n	8001a96 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8001a84:	89fb      	ldrh	r3, [r7, #14]
 8001a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a8a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	885a      	ldrh	r2, [r3, #2]
 8001a90:	89fb      	ldrh	r3, [r7, #14]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a22      	ldr	r2, [pc, #136]	; (8001b24 <TIM_TimeBaseInit+0xe4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d00c      	beq.n	8001ab8 <TIM_TimeBaseInit+0x78>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a21      	ldr	r2, [pc, #132]	; (8001b28 <TIM_TimeBaseInit+0xe8>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d008      	beq.n	8001ab8 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8001aa6:	89fb      	ldrh	r3, [r7, #14]
 8001aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001aac:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	88da      	ldrh	r2, [r3, #6]
 8001ab2:	89fb      	ldrh	r3, [r7, #14]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	89fa      	ldrh	r2, [r7, #14]
 8001abc:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	889a      	ldrh	r2, [r3, #4]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	881a      	ldrh	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a0f      	ldr	r2, [pc, #60]	; (8001b10 <TIM_TimeBaseInit+0xd0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d00f      	beq.n	8001af6 <TIM_TimeBaseInit+0xb6>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a0e      	ldr	r2, [pc, #56]	; (8001b14 <TIM_TimeBaseInit+0xd4>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d00b      	beq.n	8001af6 <TIM_TimeBaseInit+0xb6>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <TIM_TimeBaseInit+0xec>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d007      	beq.n	8001af6 <TIM_TimeBaseInit+0xb6>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a11      	ldr	r2, [pc, #68]	; (8001b30 <TIM_TimeBaseInit+0xf0>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d003      	beq.n	8001af6 <TIM_TimeBaseInit+0xb6>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a10      	ldr	r2, [pc, #64]	; (8001b34 <TIM_TimeBaseInit+0xf4>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d104      	bne.n	8001b00 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	7a1b      	ldrb	r3, [r3, #8]
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	829a      	strh	r2, [r3, #20]
}
 8001b06:	bf00      	nop
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr
 8001b10:	40012c00 	.word	0x40012c00
 8001b14:	40013400 	.word	0x40013400
 8001b18:	40000400 	.word	0x40000400
 8001b1c:	40000800 	.word	0x40000800
 8001b20:	40000c00 	.word	0x40000c00
 8001b24:	40001000 	.word	0x40001000
 8001b28:	40001400 	.word	0x40001400
 8001b2c:	40014000 	.word	0x40014000
 8001b30:	40014400 	.word	0x40014400
 8001b34:	40014800 	.word	0x40014800

08001b38 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  }
  else
  {
    assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10f      	bne.n	8001b6a <TIM_ICInit+0x32>
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	8859      	ldrh	r1, [r3, #2]
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	889a      	ldrh	r2, [r3, #4]
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	891b      	ldrh	r3, [r3, #8]
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f94e 	bl	8001df8 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	88db      	ldrh	r3, [r3, #6]
 8001b60:	4619      	mov	r1, r3
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f88c 	bl	8001c80 <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8001b68:	e036      	b.n	8001bd8 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d10f      	bne.n	8001b92 <TIM_ICInit+0x5a>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	8859      	ldrh	r1, [r3, #2]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	889a      	ldrh	r2, [r3, #4]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	891b      	ldrh	r3, [r3, #8]
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 f9aa 	bl	8001ed8 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	88db      	ldrh	r3, [r3, #6]
 8001b88:	4619      	mov	r1, r3
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f893 	bl	8001cb6 <TIM_SetIC2Prescaler>
}
 8001b90:	e022      	b.n	8001bd8 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	2b08      	cmp	r3, #8
 8001b98:	d10f      	bne.n	8001bba <TIM_ICInit+0x82>
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	8859      	ldrh	r1, [r3, #2]
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	889a      	ldrh	r2, [r3, #4]
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	891b      	ldrh	r3, [r3, #8]
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 fa10 	bl	8001fcc <TI3_Config>
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	88db      	ldrh	r3, [r3, #6]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f89c 	bl	8001cf0 <TIM_SetIC3Prescaler>
}
 8001bb8:	e00e      	b.n	8001bd8 <TIM_ICInit+0xa0>
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	8859      	ldrh	r1, [r3, #2]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	889a      	ldrh	r2, [r3, #4]
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	891b      	ldrh	r3, [r3, #8]
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 fa76 	bl	80020b8 <TI4_Config>
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	88db      	ldrh	r3, [r3, #6]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f8a7 	bl	8001d26 <TIM_SetIC4Prescaler>
}
 8001bd8:	bf00      	nop
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bee:	809a      	strh	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	80da      	strh	r2, [r3, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	721a      	strb	r2, [r3, #8]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr

08001c12 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	811a      	strh	r2, [r3, #8]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr

08001c42 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001c4e:	78fb      	ldrb	r3, [r7, #3]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d008      	beq.n	8001c66 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8001c64:	e007      	b.n	8001c76 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	f023 0301 	bic.w	r3, r3, #1
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	801a      	strh	r2, [r3, #0]
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	8b1b      	ldrh	r3, [r3, #24]
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	f023 030c 	bic.w	r3, r3, #12
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	831a      	strh	r2, [r3, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	8b1b      	ldrh	r3, [r3, #24]
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	887b      	ldrh	r3, [r7, #2]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	831a      	strh	r2, [r3, #24]
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr

08001cb6 <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	8b1b      	ldrh	r3, [r3, #24]
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	831a      	strh	r2, [r3, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	8b1b      	ldrh	r3, [r3, #24]
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	887b      	ldrh	r3, [r7, #2]
 8001cda:	021b      	lsls	r3, r3, #8
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	831a      	strh	r2, [r3, #24]
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	8b9b      	ldrh	r3, [r3, #28]
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	f023 030c 	bic.w	r3, r3, #12
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	839a      	strh	r2, [r3, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	8b9b      	ldrh	r3, [r3, #28]
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	887b      	ldrh	r3, [r7, #2]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	839a      	strh	r2, [r3, #28]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	8b9b      	ldrh	r3, [r3, #28]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	839a      	strh	r2, [r3, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	8b9b      	ldrh	r3, [r3, #28]
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	887b      	ldrh	r3, [r7, #2]
 8001d4a:	021b      	lsls	r3, r3, #8
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	839a      	strh	r2, [r3, #28]
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr

08001d60 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001d6c:	b29b      	uxth	r3, r3
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr

08001d78 <TIM_GetCapture2>:
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001d84:	b29b      	uxth	r3, r3
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001d9c:	b29b      	uxth	r3, r3
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr

08001da8 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001db6:	b29b      	uxth	r3, r3
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr

08001dc2 <TIM_GetFlagStatus>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 8001dc2:	b480      	push	{r7}
 8001dc4:	b085      	sub	sp, #20
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	460b      	mov	r3, r1
 8001dcc:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8001dce:	2300      	movs	r3, #0
 8001dd0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	8a1b      	ldrh	r3, [r3, #16]
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	887b      	ldrh	r3, [r7, #2]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d002      	beq.n	8001de8 <TIM_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8001de2:	2301      	movs	r3, #1
 8001de4:	73fb      	strb	r3, [r7, #15]
 8001de6:	e001      	b.n	8001dec <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8001de8:	2300      	movs	r3, #0
 8001dea:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b087      	sub	sp, #28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	4608      	mov	r0, r1
 8001e02:	4611      	mov	r1, r2
 8001e04:	461a      	mov	r2, r3
 8001e06:	4603      	mov	r3, r0
 8001e08:	817b      	strh	r3, [r7, #10]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	813b      	strh	r3, [r7, #8]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	82bb      	strh	r3, [r7, #20]
 8001e16:	2300      	movs	r3, #0
 8001e18:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	8c1b      	ldrh	r3, [r3, #32]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	f023 0301 	bic.w	r3, r3, #1
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	8b1b      	ldrh	r3, [r3, #24]
 8001e2e:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8c1b      	ldrh	r3, [r3, #32]
 8001e34:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 8001e36:	8abb      	ldrh	r3, [r7, #20]
 8001e38:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8001e3c:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001e3e:	88fb      	ldrh	r3, [r7, #6]
 8001e40:	011b      	lsls	r3, r3, #4
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	893b      	ldrh	r3, [r7, #8]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	8abb      	ldrh	r3, [r7, #20]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4a1c      	ldr	r2, [pc, #112]	; (8001ec4 <TI1_Config+0xcc>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d013      	beq.n	8001e80 <TI1_Config+0x88>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4a1b      	ldr	r2, [pc, #108]	; (8001ec8 <TI1_Config+0xd0>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d00f      	beq.n	8001e80 <TI1_Config+0x88>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e66:	d00b      	beq.n	8001e80 <TI1_Config+0x88>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4a18      	ldr	r2, [pc, #96]	; (8001ecc <TI1_Config+0xd4>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d007      	beq.n	8001e80 <TI1_Config+0x88>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4a17      	ldr	r2, [pc, #92]	; (8001ed0 <TI1_Config+0xd8>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d003      	beq.n	8001e80 <TI1_Config+0x88>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4a16      	ldr	r2, [pc, #88]	; (8001ed4 <TI1_Config+0xdc>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d10b      	bne.n	8001e98 <TI1_Config+0xa0>
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
 8001e80:	8afb      	ldrh	r3, [r7, #22]
 8001e82:	f023 0302 	bic.w	r3, r3, #2
 8001e86:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001e88:	897a      	ldrh	r2, [r7, #10]
 8001e8a:	8afb      	ldrh	r3, [r7, #22]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	82fb      	strh	r3, [r7, #22]
 8001e96:	e00a      	b.n	8001eae <TI1_Config+0xb6>
  }
  else
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001e98:	8afb      	ldrh	r3, [r7, #22]
 8001e9a:	f023 030a 	bic.w	r3, r3, #10
 8001e9e:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001ea0:	897a      	ldrh	r2, [r7, #10]
 8001ea2:	8afb      	ldrh	r3, [r7, #22]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	82fb      	strh	r3, [r7, #22]
  }

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8aba      	ldrh	r2, [r7, #20]
 8001eb2:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8afa      	ldrh	r2, [r7, #22]
 8001eb8:	841a      	strh	r2, [r3, #32]
}
 8001eba:	bf00      	nop
 8001ebc:	371c      	adds	r7, #28
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	40012c00 	.word	0x40012c00
 8001ec8:	40013400 	.word	0x40013400
 8001ecc:	40000400 	.word	0x40000400
 8001ed0:	40000800 	.word	0x40000800
 8001ed4:	40000c00 	.word	0x40000c00

08001ed8 <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b087      	sub	sp, #28
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	4608      	mov	r0, r1
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	817b      	strh	r3, [r7, #10]
 8001eea:	460b      	mov	r3, r1
 8001eec:	813b      	strh	r3, [r7, #8]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	82bb      	strh	r3, [r7, #20]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	82fb      	strh	r3, [r7, #22]
 8001efa:	2300      	movs	r3, #0
 8001efc:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8c1b      	ldrh	r3, [r3, #32]
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	f023 0310 	bic.w	r3, r3, #16
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	8b1b      	ldrh	r3, [r3, #24]
 8001f12:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8c1b      	ldrh	r3, [r3, #32]
 8001f18:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8001f1a:	897b      	ldrh	r3, [r7, #10]
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8001f20:	8abb      	ldrh	r3, [r7, #20]
 8001f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f26:	051b      	lsls	r3, r3, #20
 8001f28:	0d1b      	lsrs	r3, r3, #20
 8001f2a:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	031b      	lsls	r3, r3, #12
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	8abb      	ldrh	r3, [r7, #20]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001f38:	893b      	ldrh	r3, [r7, #8]
 8001f3a:	021b      	lsls	r3, r3, #8
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	8abb      	ldrh	r3, [r7, #20]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4a1c      	ldr	r2, [pc, #112]	; (8001fb8 <TI2_Config+0xe0>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d013      	beq.n	8001f74 <TI2_Config+0x9c>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4a1b      	ldr	r2, [pc, #108]	; (8001fbc <TI2_Config+0xe4>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d00f      	beq.n	8001f74 <TI2_Config+0x9c>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f5a:	d00b      	beq.n	8001f74 <TI2_Config+0x9c>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4a18      	ldr	r2, [pc, #96]	; (8001fc0 <TI2_Config+0xe8>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d007      	beq.n	8001f74 <TI2_Config+0x9c>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4a17      	ldr	r2, [pc, #92]	; (8001fc4 <TI2_Config+0xec>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d003      	beq.n	8001f74 <TI2_Config+0x9c>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4a16      	ldr	r2, [pc, #88]	; (8001fc8 <TI2_Config+0xf0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d10b      	bne.n	8001f8c <TI2_Config+0xb4>
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
 8001f74:	8afb      	ldrh	r3, [r7, #22]
 8001f76:	f023 0320 	bic.w	r3, r3, #32
 8001f7a:	82fb      	strh	r3, [r7, #22]
    tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001f7c:	8a7a      	ldrh	r2, [r7, #18]
 8001f7e:	8afb      	ldrh	r3, [r7, #22]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	f043 0310 	orr.w	r3, r3, #16
 8001f88:	82fb      	strh	r3, [r7, #22]
 8001f8a:	e00a      	b.n	8001fa2 <TI2_Config+0xca>
  }
  else
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001f8c:	8afb      	ldrh	r3, [r7, #22]
 8001f8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001f92:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
 8001f94:	897a      	ldrh	r2, [r7, #10]
 8001f96:	8afb      	ldrh	r3, [r7, #22]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	f043 0310 	orr.w	r3, r3, #16
 8001fa0:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	8aba      	ldrh	r2, [r7, #20]
 8001fa6:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8afa      	ldrh	r2, [r7, #22]
 8001fac:	841a      	strh	r2, [r3, #32]
}
 8001fae:	bf00      	nop
 8001fb0:	371c      	adds	r7, #28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr
 8001fb8:	40012c00 	.word	0x40012c00
 8001fbc:	40013400 	.word	0x40013400
 8001fc0:	40000400 	.word	0x40000400
 8001fc4:	40000800 	.word	0x40000800
 8001fc8:	40000c00 	.word	0x40000c00

08001fcc <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b087      	sub	sp, #28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	4608      	mov	r0, r1
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4603      	mov	r3, r0
 8001fdc:	817b      	strh	r3, [r7, #10]
 8001fde:	460b      	mov	r3, r1
 8001fe0:	813b      	strh	r3, [r7, #8]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	82bb      	strh	r3, [r7, #20]
 8001fea:	2300      	movs	r3, #0
 8001fec:	82fb      	strh	r3, [r7, #22]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8c1b      	ldrh	r3, [r3, #32]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8b9b      	ldrh	r3, [r3, #28]
 8002006:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8c1b      	ldrh	r3, [r3, #32]
 800200c:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 800200e:	897b      	ldrh	r3, [r7, #10]
 8002010:	021b      	lsls	r3, r3, #8
 8002012:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 8002014:	8abb      	ldrh	r3, [r7, #20]
 8002016:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 800201a:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800201c:	88fb      	ldrh	r3, [r7, #6]
 800201e:	011b      	lsls	r3, r3, #4
 8002020:	b29a      	uxth	r2, r3
 8002022:	893b      	ldrh	r3, [r7, #8]
 8002024:	4313      	orrs	r3, r2
 8002026:	b29a      	uxth	r2, r3
 8002028:	8abb      	ldrh	r3, [r7, #20]
 800202a:	4313      	orrs	r3, r2
 800202c:	82bb      	strh	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4a1c      	ldr	r2, [pc, #112]	; (80020a4 <TI3_Config+0xd8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d013      	beq.n	800205e <TI3_Config+0x92>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	4a1b      	ldr	r2, [pc, #108]	; (80020a8 <TI3_Config+0xdc>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00f      	beq.n	800205e <TI3_Config+0x92>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002044:	d00b      	beq.n	800205e <TI3_Config+0x92>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	4a18      	ldr	r2, [pc, #96]	; (80020ac <TI3_Config+0xe0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d007      	beq.n	800205e <TI3_Config+0x92>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	4a17      	ldr	r2, [pc, #92]	; (80020b0 <TI3_Config+0xe4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d003      	beq.n	800205e <TI3_Config+0x92>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4a16      	ldr	r2, [pc, #88]	; (80020b4 <TI3_Config+0xe8>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d10b      	bne.n	8002076 <TI3_Config+0xaa>
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
 800205e:	8afb      	ldrh	r3, [r7, #22]
 8002060:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002064:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8002066:	8a7a      	ldrh	r2, [r7, #18]
 8002068:	8afb      	ldrh	r3, [r7, #22]
 800206a:	4313      	orrs	r3, r2
 800206c:	b29b      	uxth	r3, r3
 800206e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002072:	82fb      	strh	r3, [r7, #22]
 8002074:	e00a      	b.n	800208c <TI3_Config+0xc0>
  }
  else
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002076:	8afb      	ldrh	r3, [r7, #22]
 8002078:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800207c:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
 800207e:	897a      	ldrh	r2, [r7, #10]
 8002080:	8afb      	ldrh	r3, [r7, #22]
 8002082:	4313      	orrs	r3, r2
 8002084:	b29b      	uxth	r3, r3
 8002086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208a:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8aba      	ldrh	r2, [r7, #20]
 8002090:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8afa      	ldrh	r2, [r7, #22]
 8002096:	841a      	strh	r2, [r3, #32]
}
 8002098:	bf00      	nop
 800209a:	371c      	adds	r7, #28
 800209c:	46bd      	mov	sp, r7
 800209e:	bc80      	pop	{r7}
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40012c00 	.word	0x40012c00
 80020a8:	40013400 	.word	0x40013400
 80020ac:	40000400 	.word	0x40000400
 80020b0:	40000800 	.word	0x40000800
 80020b4:	40000c00 	.word	0x40000c00

080020b8 <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	4608      	mov	r0, r1
 80020c2:	4611      	mov	r1, r2
 80020c4:	461a      	mov	r2, r3
 80020c6:	4603      	mov	r3, r0
 80020c8:	817b      	strh	r3, [r7, #10]
 80020ca:	460b      	mov	r3, r1
 80020cc:	813b      	strh	r3, [r7, #8]
 80020ce:	4613      	mov	r3, r2
 80020d0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	82bb      	strh	r3, [r7, #20]
 80020d6:	2300      	movs	r3, #0
 80020d8:	82fb      	strh	r3, [r7, #22]
 80020da:	2300      	movs	r3, #0
 80020dc:	827b      	strh	r3, [r7, #18]

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	8c1b      	ldrh	r3, [r3, #32]
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8b9b      	ldrh	r3, [r3, #28]
 80020f2:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8c1b      	ldrh	r3, [r3, #32]
 80020f8:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 80020fa:	897b      	ldrh	r3, [r7, #10]
 80020fc:	031b      	lsls	r3, r3, #12
 80020fe:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 8002100:	8abb      	ldrh	r3, [r7, #20]
 8002102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002106:	051b      	lsls	r3, r3, #20
 8002108:	0d1b      	lsrs	r3, r3, #20
 800210a:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 800210c:	893b      	ldrh	r3, [r7, #8]
 800210e:	021b      	lsls	r3, r3, #8
 8002110:	b29a      	uxth	r2, r3
 8002112:	8abb      	ldrh	r3, [r7, #20]
 8002114:	4313      	orrs	r3, r2
 8002116:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8002118:	88fb      	ldrh	r3, [r7, #6]
 800211a:	031b      	lsls	r3, r3, #12
 800211c:	b29a      	uxth	r2, r3
 800211e:	8abb      	ldrh	r3, [r7, #20]
 8002120:	4313      	orrs	r3, r2
 8002122:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4a1d      	ldr	r2, [pc, #116]	; (800219c <TI4_Config+0xe4>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d013      	beq.n	8002154 <TI4_Config+0x9c>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4a1c      	ldr	r2, [pc, #112]	; (80021a0 <TI4_Config+0xe8>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d00f      	beq.n	8002154 <TI4_Config+0x9c>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800213a:	d00b      	beq.n	8002154 <TI4_Config+0x9c>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4a19      	ldr	r2, [pc, #100]	; (80021a4 <TI4_Config+0xec>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d007      	beq.n	8002154 <TI4_Config+0x9c>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4a18      	ldr	r2, [pc, #96]	; (80021a8 <TI4_Config+0xf0>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d003      	beq.n	8002154 <TI4_Config+0x9c>
     (TIMx == TIM4) ||(TIMx == TIM5))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4a17      	ldr	r2, [pc, #92]	; (80021ac <TI4_Config+0xf4>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d10b      	bne.n	800216c <TI4_Config+0xb4>
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
 8002154:	8afb      	ldrh	r3, [r7, #22]
 8002156:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800215a:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 800215c:	8a7a      	ldrh	r2, [r7, #18]
 800215e:	8afb      	ldrh	r3, [r7, #22]
 8002160:	4313      	orrs	r3, r2
 8002162:	b29b      	uxth	r3, r3
 8002164:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002168:	82fb      	strh	r3, [r7, #22]
 800216a:	e00c      	b.n	8002186 <TI4_Config+0xce>
  }
  else
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
 800216c:	8afb      	ldrh	r3, [r7, #22]
 800216e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002172:	045b      	lsls	r3, r3, #17
 8002174:	0c5b      	lsrs	r3, r3, #17
 8002176:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
 8002178:	897a      	ldrh	r2, [r7, #10]
 800217a:	8afb      	ldrh	r3, [r7, #22]
 800217c:	4313      	orrs	r3, r2
 800217e:	b29b      	uxth	r3, r3
 8002180:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002184:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8aba      	ldrh	r2, [r7, #20]
 800218a:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8afa      	ldrh	r2, [r7, #22]
 8002190:	841a      	strh	r2, [r3, #32]
}
 8002192:	bf00      	nop
 8002194:	371c      	adds	r7, #28
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr
 800219c:	40012c00 	.word	0x40012c00
 80021a0:	40013400 	.word	0x40013400
 80021a4:	40000400 	.word	0x40000400
 80021a8:	40000800 	.word	0x40000800
 80021ac:	40000c00 	.word	0x40000c00

080021b0 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08c      	sub	sp, #48	; 0x30
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80021ba:	2300      	movs	r3, #0
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021be:	2300      	movs	r3, #0
 80021c0:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 80021c2:	2300      	movs	r3, #0
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 80021c6:	2300      	movs	r3, #0
 80021c8:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	8a1b      	ldrh	r3, [r3, #16]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 80021da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021dc:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 80021e0:	4013      	ands	r3, r2
 80021e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	88db      	ldrh	r3, [r3, #6]
 80021e8:	461a      	mov	r2, r3
 80021ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ec:	4313      	orrs	r3, r2
 80021ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80021f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	899b      	ldrh	r3, [r3, #12]
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8002200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002202:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8002206:	4013      	ands	r3, r2
 8002208:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	889a      	ldrh	r2, [r3, #4]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	891b      	ldrh	r3, [r3, #8]
 8002212:	4313      	orrs	r3, r2
 8002214:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800221a:	4313      	orrs	r3, r2
 800221c:	b29b      	uxth	r3, r3
 800221e:	461a      	mov	r2, r3
 8002220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002222:	4313      	orrs	r3, r2
 8002224:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8002226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002228:	b29a      	uxth	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	8a9b      	ldrh	r3, [r3, #20]
 8002232:	b29b      	uxth	r3, r3
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8002236:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002238:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 800223c:	4013      	ands	r3, r2
 800223e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	899b      	ldrh	r3, [r3, #12]
 8002244:	461a      	mov	r2, r3
 8002246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002248:	4313      	orrs	r3, r2
 800224a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800224c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800224e:	b29a      	uxth	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8002254:	f107 0308 	add.w	r3, r7, #8
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff fa3d 	bl	80016d8 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	4a2e      	ldr	r2, [pc, #184]	; (800231c <USART_Init+0x16c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d102      	bne.n	800226c <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	62bb      	str	r3, [r7, #40]	; 0x28
 800226a:	e001      	b.n	8002270 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	899b      	ldrh	r3, [r3, #12]
 8002274:	b29b      	uxth	r3, r3
 8002276:	b21b      	sxth	r3, r3
 8002278:	2b00      	cmp	r3, #0
 800227a:	da0c      	bge.n	8002296 <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800227c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800227e:	4613      	mov	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	009a      	lsls	r2, r3, #2
 8002286:	441a      	add	r2, r3
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
 8002294:	e00b      	b.n	80022ae <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002296:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	009a      	lsls	r2, r3, #2
 80022a0:	441a      	add	r2, r3
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	4a1b      	ldr	r2, [pc, #108]	; (8002320 <USART_Init+0x170>)
 80022b2:	fba2 2303 	umull	r2, r3, r2, r3
 80022b6:	095b      	lsrs	r3, r3, #5
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80022bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022be:	091b      	lsrs	r3, r3, #4
 80022c0:	2264      	movs	r2, #100	; 0x64
 80022c2:	fb02 f303 	mul.w	r3, r2, r3
 80022c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	899b      	ldrh	r3, [r3, #12]
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	b21b      	sxth	r3, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	da0c      	bge.n	80022f2 <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80022d8:	6a3b      	ldr	r3, [r7, #32]
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	3332      	adds	r3, #50	; 0x32
 80022de:	4a10      	ldr	r2, [pc, #64]	; (8002320 <USART_Init+0x170>)
 80022e0:	fba2 2303 	umull	r2, r3, r2, r3
 80022e4:	095b      	lsrs	r3, r3, #5
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022ec:	4313      	orrs	r3, r2
 80022ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022f0:	e00b      	b.n	800230a <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	3332      	adds	r3, #50	; 0x32
 80022f8:	4a09      	ldr	r2, [pc, #36]	; (8002320 <USART_Init+0x170>)
 80022fa:	fba2 2303 	umull	r2, r3, r2, r3
 80022fe:	095b      	lsrs	r3, r3, #5
 8002300:	f003 030f 	and.w	r3, r3, #15
 8002304:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002306:	4313      	orrs	r3, r2
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 800230a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230c:	b29a      	uxth	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	811a      	strh	r2, [r3, #8]
}
 8002312:	bf00      	nop
 8002314:	3730      	adds	r7, #48	; 0x30
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40013800 	.word	0x40013800
 8002320:	51eb851f 	.word	0x51eb851f

08002324 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002330:	78fb      	ldrb	r3, [r7, #3]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d008      	beq.n	8002348 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	899b      	ldrh	r3, [r3, #12]
 800233a:	b29b      	uxth	r3, r3
 800233c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002340:	b29a      	uxth	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8002346:	e007      	b.n	8002358 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	899b      	ldrh	r3, [r3, #12]
 800234c:	b29b      	uxth	r3, r3
 800234e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002352:	b29a      	uxth	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	819a      	strh	r2, [r3, #12]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr

08002362 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
 800236a:	460b      	mov	r3, r1
 800236c:	807b      	strh	r3, [r7, #2]
 800236e:	4613      	mov	r3, r2
 8002370:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
 8002372:	787b      	ldrb	r3, [r7, #1]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d008      	beq.n	800238a <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	8a9b      	ldrh	r3, [r3, #20]
 800237c:	b29a      	uxth	r2, r3
 800237e:	887b      	ldrh	r3, [r7, #2]
 8002380:	4313      	orrs	r3, r2
 8002382:	b29a      	uxth	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
 8002388:	e009      	b.n	800239e <USART_DMACmd+0x3c>
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	8a9b      	ldrh	r3, [r3, #20]
 800238e:	b29a      	uxth	r2, r3
 8002390:	887b      	ldrh	r3, [r7, #2]
 8002392:	43db      	mvns	r3, r3
 8002394:	b29b      	uxth	r3, r3
 8002396:	4013      	ands	r3, r2
 8002398:	b29a      	uxth	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	829a      	strh	r2, [r3, #20]
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr

080023a8 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80023b4:	887b      	ldrh	r3, [r7, #2]
 80023b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	809a      	strh	r2, [r3, #4]
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr

080023ca <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b085      	sub	sp, #20
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	460b      	mov	r3, r1
 80023d4:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80023d6:	2300      	movs	r3, #0
 80023d8:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	b29a      	uxth	r2, r3
 80023e0:	887b      	ldrh	r3, [r7, #2]
 80023e2:	4013      	ands	r3, r2
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80023ea:	2301      	movs	r3, #1
 80023ec:	73fb      	strb	r3, [r7, #15]
 80023ee:	e001      	b.n	80023f4 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80023f0:	2300      	movs	r3, #0
 80023f2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr

08002400 <_ZN11CSerialPort4InitEP6IUsartP6ITimer>:
 */

#include <Communication/SerialPort.h>

void CSerialPort::Init(IUsart *pUart,ITimer *pTimer)
{
 8002400:	b510      	push	{r4, lr}
	m_pUart = pUart;
 8002402:	f8c0 1174 	str.w	r1, [r0, #372]	; 0x174
	m_Timeout.Init(pTimer);
 8002406:	f500 74bc 	add.w	r4, r0, #376	; 0x178
 800240a:	4611      	mov	r1, r2
 800240c:	4620      	mov	r0, r4
 800240e:	f001 f8ca 	bl	80035a6 <_ZN8CTimeout4InitEP6ITimer>
	m_Timeout.SetExpiry(5000);
 8002412:	f241 3188 	movw	r1, #5000	; 0x1388
 8002416:	4620      	mov	r0, r4
 8002418:	f001 f8d1 	bl	80035be <_ZN8CTimeout9SetExpiryEt>
 800241c:	bd10      	pop	{r4, pc}

0800241e <_ZN11CSerialPort11AddFunctionEhPFvPcS0_E>:
}

void CSerialPort::AddFunction(uint8_t opcode, void (*pFunc)(char*, char*))
{
	if (opcode > MAX_OPCODE) return;
 800241e:	290a      	cmp	r1, #10
 8002420:	dc03      	bgt.n	800242a <_ZN11CSerialPort11AddFunctionEhPFvPcS0_E+0xc>
	m_pFunc[opcode] = pFunc;
 8002422:	3152      	adds	r1, #82	; 0x52
 8002424:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8002428:	604a      	str	r2, [r1, #4]
 800242a:	4770      	bx	lr

0800242c <_ZN11CSerialPort7ExecuteEv>:
}

void CSerialPort::Execute()
{
 800242c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800242e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8002432:	4604      	mov	r4, r0
	// reset the index if the '\n' is taking too long
	if(m_Timeout.HasElapsed() && m_index>0)
 8002434:	f500 75bc 	add.w	r5, r0, #376	; 0x178
 8002438:	4628      	mov	r0, r5
 800243a:	f001 f8c5 	bl	80035c8 <_ZN8CTimeout10HasElapsedEv>
 800243e:	b128      	cbz	r0, 800244c <_ZN11CSerialPort7ExecuteEv+0x20>
 8002440:	4603      	mov	r3, r0
 8002442:	f8b4 2148 	ldrh.w	r2, [r4, #328]	; 0x148
 8002446:	b912      	cbnz	r2, 800244e <_ZN11CSerialPort7ExecuteEv+0x22>
 8002448:	2300      	movs	r3, #0
 800244a:	e000      	b.n	800244e <_ZN11CSerialPort7ExecuteEv+0x22>
 800244c:	2300      	movs	r3, #0
 800244e:	b113      	cbz	r3, 8002456 <_ZN11CSerialPort7ExecuteEv+0x2a>
		m_index = 0;
 8002450:	2300      	movs	r3, #0
 8002452:	f8a4 3148 	strh.w	r3, [r4, #328]	; 0x148

	if (!m_pUart->HasData()) return;
 8002456:	f8d4 0174 	ldr.w	r0, [r4, #372]	; 0x174
 800245a:	6803      	ldr	r3, [r0, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	4798      	blx	r3
 8002460:	b910      	cbnz	r0, 8002468 <_ZN11CSerialPort7ExecuteEv+0x3c>
	else
	{
		m_index++;
		if (m_index > MAX_BUFFER) m_index = 0;
	}
}
 8002462:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8002466:	bdf0      	pop	{r4, r5, r6, r7, pc}
	m_buffer[m_index] = m_pUart->ReadByte();
 8002468:	f8b4 6148 	ldrh.w	r6, [r4, #328]	; 0x148
 800246c:	f8d4 0174 	ldr.w	r0, [r4, #372]	; 0x174
 8002470:	6803      	ldr	r3, [r0, #0]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	4798      	blx	r3
 8002476:	4426      	add	r6, r4
 8002478:	71b0      	strb	r0, [r6, #6]
	m_Timeout.Reset();
 800247a:	4628      	mov	r0, r5
 800247c:	f001 f895 	bl	80035aa <_ZN8CTimeout5ResetEv>
	if (m_buffer[m_index] == '\n')
 8002480:	f8b4 3148 	ldrh.w	r3, [r4, #328]	; 0x148
 8002484:	18e2      	adds	r2, r4, r3
 8002486:	7992      	ldrb	r2, [r2, #6]
 8002488:	2a0a      	cmp	r2, #10
 800248a:	d00a      	beq.n	80024a2 <_ZN11CSerialPort7ExecuteEv+0x76>
		m_index++;
 800248c:	3301      	adds	r3, #1
 800248e:	b29b      	uxth	r3, r3
 8002490:	f8a4 3148 	strh.w	r3, [r4, #328]	; 0x148
		if (m_index > MAX_BUFFER) m_index = 0;
 8002494:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 8002498:	dde3      	ble.n	8002462 <_ZN11CSerialPort7ExecuteEv+0x36>
 800249a:	2300      	movs	r3, #0
 800249c:	f8a4 3148 	strh.w	r3, [r4, #328]	; 0x148
 80024a0:	e7df      	b.n	8002462 <_ZN11CSerialPort7ExecuteEv+0x36>
		memset(returnString, 0, sizeof(returnString));
 80024a2:	f44f 72a1 	mov.w	r2, #322	; 0x142
 80024a6:	2100      	movs	r1, #0
 80024a8:	4668      	mov	r0, sp
 80024aa:	f002 f861 	bl	8004570 <memset>
		token = strtok(m_buffer, DELIMITER);
 80024ae:	1da6      	adds	r6, r4, #6
 80024b0:	1d21      	adds	r1, r4, #4
 80024b2:	4630      	mov	r0, r6
 80024b4:	f002 feba 	bl	800522c <strtok>
		uint16_t opcode = std::atoi(token);
 80024b8:	f001 fe0f 	bl	80040da <atoi>
 80024bc:	b287      	uxth	r7, r0
		if (!m_pFunc[opcode])
 80024be:	f107 0352 	add.w	r3, r7, #82	; 0x52
 80024c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80024c6:	685d      	ldr	r5, [r3, #4]
 80024c8:	b175      	cbz	r5, 80024e8 <_ZN11CSerialPort7ExecuteEv+0xbc>
		m_pFunc[opcode](&m_buffer[strlen(m_buffer)+1], returnString);
 80024ca:	4630      	mov	r0, r6
 80024cc:	f7fd fe40 	bl	8000150 <strlen>
 80024d0:	3001      	adds	r0, #1
 80024d2:	4420      	add	r0, r4
 80024d4:	4669      	mov	r1, sp
 80024d6:	3006      	adds	r0, #6
 80024d8:	47a8      	blx	r5
		if(strlen(returnString)>0)
 80024da:	f89d 3000 	ldrb.w	r3, [sp]
 80024de:	b93b      	cbnz	r3, 80024f0 <_ZN11CSerialPort7ExecuteEv+0xc4>
		m_index = 0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	f8a4 3148 	strh.w	r3, [r4, #328]	; 0x148
 80024e6:	e7bc      	b.n	8002462 <_ZN11CSerialPort7ExecuteEv+0x36>
			m_index = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	f8a4 3148 	strh.w	r3, [r4, #328]	; 0x148
 80024ee:	e7b8      	b.n	8002462 <_ZN11CSerialPort7ExecuteEv+0x36>
			sprintf(buf,"%d,",opcode);
 80024f0:	463a      	mov	r2, r7
 80024f2:	4907      	ldr	r1, [pc, #28]	; (8002510 <_ZN11CSerialPort7ExecuteEv+0xe4>)
 80024f4:	a851      	add	r0, sp, #324	; 0x144
 80024f6:	f001 fdce 	bl	8004096 <siprintf>
			strcat(buf,returnString);
 80024fa:	4669      	mov	r1, sp
 80024fc:	a851      	add	r0, sp, #324	; 0x144
 80024fe:	f002 f85b 	bl	80045b8 <strcat>
			m_pUart->Write(buf);
 8002502:	f8d4 0174 	ldr.w	r0, [r4, #372]	; 0x174
 8002506:	6803      	ldr	r3, [r0, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	a951      	add	r1, sp, #324	; 0x144
 800250c:	4798      	blx	r3
 800250e:	e7e7      	b.n	80024e0 <_ZN11CSerialPort7ExecuteEv+0xb4>
 8002510:	08006648 	.word	0x08006648

08002514 <_ZN11CSerialPortC1Ev>:

CSerialPort::CSerialPort()
 8002514:	b510      	push	{r4, lr}
 8002516:	4604      	mov	r4, r0
 8002518:	4b07      	ldr	r3, [pc, #28]	; (8002538 <_ZN11CSerialPortC1Ev+0x24>)
 800251a:	6003      	str	r3, [r0, #0]
 800251c:	232c      	movs	r3, #44	; 0x2c
 800251e:	8083      	strh	r3, [r0, #4]
 8002520:	f500 70bc 	add.w	r0, r0, #376	; 0x178
 8002524:	f001 f864 	bl	80035f0 <_ZN8CTimeoutC1Ev>
{
// TODO Auto-generated constructor stub
	m_index = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	f8a4 3148 	strh.w	r3, [r4, #328]	; 0x148
	m_pUart = NULL;
 800252e:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174

}
 8002532:	4620      	mov	r0, r4
 8002534:	bd10      	pop	{r4, pc}
 8002536:	bf00      	nop
 8002538:	08006654 	.word	0x08006654

0800253c <_ZN11CSerialPortD1Ev>:

CSerialPort::~CSerialPort()
 800253c:	b510      	push	{r4, lr}
 800253e:	4604      	mov	r4, r0
 8002540:	4b03      	ldr	r3, [pc, #12]	; (8002550 <_ZN11CSerialPortD1Ev+0x14>)
 8002542:	6003      	str	r3, [r0, #0]
 8002544:	f500 70bc 	add.w	r0, r0, #376	; 0x178
 8002548:	f001 f826 	bl	8003598 <_ZN8CTimeoutD1Ev>
{
// TODO Auto-generated destructor stub
}
 800254c:	4620      	mov	r0, r4
 800254e:	bd10      	pop	{r4, pc}
 8002550:	08006654 	.word	0x08006654

08002554 <_ZN11CSerialPortD0Ev>:
CSerialPort::~CSerialPort()
 8002554:	b510      	push	{r4, lr}
 8002556:	4604      	mov	r4, r0
}
 8002558:	f7ff fff0 	bl	800253c <_ZN11CSerialPortD1Ev>
 800255c:	4620      	mov	r0, r4
 800255e:	f001 fdb1 	bl	80040c4 <_ZdlPv>
 8002562:	4620      	mov	r0, r4
 8002564:	bd10      	pop	{r4, pc}

08002566 <_ZN3DMD10WritePixelEtthh>:

/*--------------------------------------------------------------------------------------
 Set or clear a pixel at the x and y location (0,0 is the top left corner)
 --------------------------------------------------------------------------------------*/
void DMD::WritePixel(uint16_t bX, uint16_t bY, uint8_t bGraphicsMode, uint8_t bPixel)
{
 8002566:	b4f0      	push	{r4, r5, r6, r7}
 8002568:	f89d 5010 	ldrb.w	r5, [sp, #16]
	uint16_t uiDMDRAMPointer;

	if (bX >= (DMD_PIXELS_ACROSS * m_DisplaysWide) || bY >= (DMD_PIXELS_DOWN * m_DisplaysHigh))
 800256c:	f890 4114 	ldrb.w	r4, [r0, #276]	; 0x114
 8002570:	ebb1 1f44 	cmp.w	r1, r4, lsl #5
 8002574:	da2c      	bge.n	80025d0 <_ZN3DMD10WritePixelEtthh+0x6a>
 8002576:	f890 6115 	ldrb.w	r6, [r0, #277]	; 0x115
 800257a:	ebb2 1f06 	cmp.w	r2, r6, lsl #4
 800257e:	da27      	bge.n	80025d0 <_ZN3DMD10WritePixelEtthh+0x6a>
	{
		return;
	}
	uint8_t panel = (bX / DMD_PIXELS_ACROSS) + (m_DisplaysWide * (bY / DMD_PIXELS_DOWN));
 8002580:	f3c1 1647 	ubfx	r6, r1, #5, #8
 8002584:	0917      	lsrs	r7, r2, #4
 8002586:	fb07 f404 	mul.w	r4, r7, r4
 800258a:	b2e4      	uxtb	r4, r4
 800258c:	4434      	add	r4, r6
 800258e:	b2e4      	uxtb	r4, r4
	bX = (bX % DMD_PIXELS_ACROSS) + (panel << 5);
 8002590:	f001 011f 	and.w	r1, r1, #31
 8002594:	eb01 1144 	add.w	r1, r1, r4, lsl #5
	bY = bY % DMD_PIXELS_DOWN;
 8002598:	f002 020f 	and.w	r2, r2, #15
	//set pointer to DMD RAM byte to be modified
	uiDMDRAMPointer = bX / 8 + bY * (m_DisplaysTotal << 2);
 800259c:	f3c1 06cf 	ubfx	r6, r1, #3, #16
 80025a0:	f890 4116 	ldrb.w	r4, [r0, #278]	; 0x116
 80025a4:	00a4      	lsls	r4, r4, #2
 80025a6:	fb04 6202 	mla	r2, r4, r2, r6
 80025aa:	b292      	uxth	r2, r2

	uint8_t lookup = bPixelLookupTable[bX & 0x07];
 80025ac:	f001 0107 	and.w	r1, r1, #7
 80025b0:	4401      	add	r1, r0
 80025b2:	f891 111f 	ldrb.w	r1, [r1, #287]	; 0x11f

	switch (bGraphicsMode)
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d80a      	bhi.n	80025d0 <_ZN3DMD10WritePixelEtthh+0x6a>
 80025ba:	e8df f003 	tbb	[pc, r3]
 80025be:	1103      	.short	0x1103
 80025c0:	2a1d      	.short	0x2a1d
 80025c2:	32          	.byte	0x32
 80025c3:	00          	.byte	0x00
	{
		case GRAPHICS_NORMAL:
			if (bPixel == true) m_bDMDScreenRAM[uiDMDRAMPointer] &= ~lookup;// zero bit is pixel on
 80025c4:	2d01      	cmp	r5, #1
 80025c6:	d005      	beq.n	80025d4 <_ZN3DMD10WritePixelEtthh+0x6e>
			else m_bDMDScreenRAM[uiDMDRAMPointer] |= lookup;	// one bit is pixel off
 80025c8:	6800      	ldr	r0, [r0, #0]
 80025ca:	5c83      	ldrb	r3, [r0, r2]
 80025cc:	4319      	orrs	r1, r3
 80025ce:	5481      	strb	r1, [r0, r2]
			if ((bPixel == true) && ((m_bDMDScreenRAM[uiDMDRAMPointer] & lookup) == 0))
				m_bDMDScreenRAM[uiDMDRAMPointer] |= lookup;	// one bit is pixel off
			break;
	}

}
 80025d0:	bcf0      	pop	{r4, r5, r6, r7}
 80025d2:	4770      	bx	lr
			if (bPixel == true) m_bDMDScreenRAM[uiDMDRAMPointer] &= ~lookup;// zero bit is pixel on
 80025d4:	6800      	ldr	r0, [r0, #0]
 80025d6:	5c83      	ldrb	r3, [r0, r2]
 80025d8:	ea23 0101 	bic.w	r1, r3, r1
 80025dc:	5481      	strb	r1, [r0, r2]
 80025de:	e7f7      	b.n	80025d0 <_ZN3DMD10WritePixelEtthh+0x6a>
			if (bPixel == false) m_bDMDScreenRAM[uiDMDRAMPointer] &= ~lookup;// zero bit is pixel on
 80025e0:	b92d      	cbnz	r5, 80025ee <_ZN3DMD10WritePixelEtthh+0x88>
 80025e2:	6800      	ldr	r0, [r0, #0]
 80025e4:	5c83      	ldrb	r3, [r0, r2]
 80025e6:	ea23 0101 	bic.w	r1, r3, r1
 80025ea:	5481      	strb	r1, [r0, r2]
 80025ec:	e7f0      	b.n	80025d0 <_ZN3DMD10WritePixelEtthh+0x6a>
			else m_bDMDScreenRAM[uiDMDRAMPointer] |= lookup;	// one bit is pixel off
 80025ee:	6800      	ldr	r0, [r0, #0]
 80025f0:	5c83      	ldrb	r3, [r0, r2]
 80025f2:	4319      	orrs	r1, r3
 80025f4:	5481      	strb	r1, [r0, r2]
 80025f6:	e7eb      	b.n	80025d0 <_ZN3DMD10WritePixelEtthh+0x6a>
			if (bPixel == true)
 80025f8:	2d01      	cmp	r5, #1
 80025fa:	d1e9      	bne.n	80025d0 <_ZN3DMD10WritePixelEtthh+0x6a>
				if ((m_bDMDScreenRAM[uiDMDRAMPointer] & lookup) == 0) m_bDMDScreenRAM[uiDMDRAMPointer] |=
 80025fc:	6800      	ldr	r0, [r0, #0]
 80025fe:	5c83      	ldrb	r3, [r0, r2]
 8002600:	4219      	tst	r1, r3
 8002602:	d102      	bne.n	800260a <_ZN3DMD10WritePixelEtthh+0xa4>
						lookup;	// one bit is pixel off
 8002604:	430b      	orrs	r3, r1
				if ((m_bDMDScreenRAM[uiDMDRAMPointer] & lookup) == 0) m_bDMDScreenRAM[uiDMDRAMPointer] |=
 8002606:	5483      	strb	r3, [r0, r2]
 8002608:	e7e2      	b.n	80025d0 <_ZN3DMD10WritePixelEtthh+0x6a>
				else m_bDMDScreenRAM[uiDMDRAMPointer] &= ~lookup;	// one bit is pixel off
 800260a:	ea23 0301 	bic.w	r3, r3, r1
 800260e:	5483      	strb	r3, [r0, r2]
 8002610:	e7de      	b.n	80025d0 <_ZN3DMD10WritePixelEtthh+0x6a>
			if (bPixel == true) m_bDMDScreenRAM[uiDMDRAMPointer] &= ~lookup;// zero bit is pixel on
 8002612:	2d01      	cmp	r5, #1
 8002614:	d1dc      	bne.n	80025d0 <_ZN3DMD10WritePixelEtthh+0x6a>
 8002616:	6800      	ldr	r0, [r0, #0]
 8002618:	5c83      	ldrb	r3, [r0, r2]
 800261a:	ea23 0101 	bic.w	r1, r3, r1
 800261e:	5481      	strb	r1, [r0, r2]
 8002620:	e7d6      	b.n	80025d0 <_ZN3DMD10WritePixelEtthh+0x6a>
			if ((bPixel == true) && ((m_bDMDScreenRAM[uiDMDRAMPointer] & lookup) == 0))
 8002622:	2d01      	cmp	r5, #1
 8002624:	d1d4      	bne.n	80025d0 <_ZN3DMD10WritePixelEtthh+0x6a>
 8002626:	6803      	ldr	r3, [r0, #0]
 8002628:	5c98      	ldrb	r0, [r3, r2]
 800262a:	4201      	tst	r1, r0
 800262c:	d1d0      	bne.n	80025d0 <_ZN3DMD10WritePixelEtthh+0x6a>
				m_bDMDScreenRAM[uiDMDRAMPointer] |= lookup;	// one bit is pixel off
 800262e:	4301      	orrs	r1, r0
 8002630:	5499      	strb	r1, [r3, r2]
 8002632:	e7cd      	b.n	80025d0 <_ZN3DMD10WritePixelEtthh+0x6a>

08002634 <_ZN3DMD11ClearScreenEh>:

/*--------------------------------------------------------------------------------------
 Clear the screen in DMD RAM
 --------------------------------------------------------------------------------------*/
void DMD::ClearScreen(uint8_t bNormal)
{
 8002634:	b508      	push	{r3, lr}
	if (bNormal) // clear all pixels
 8002636:	b939      	cbnz	r1, 8002648 <_ZN3DMD11ClearScreenEh+0x14>
	memset(m_bDMDScreenRAM, 0xFF, DMD_RAM_SIZE_BYTES * m_DisplaysTotal);
	else // set all pixels
	memset(m_bDMDScreenRAM, 0x00, DMD_RAM_SIZE_BYTES * m_DisplaysTotal);
 8002638:	f890 2116 	ldrb.w	r2, [r0, #278]	; 0x116
 800263c:	0192      	lsls	r2, r2, #6
 800263e:	2100      	movs	r1, #0
 8002640:	6800      	ldr	r0, [r0, #0]
 8002642:	f001 ff95 	bl	8004570 <memset>
 8002646:	bd08      	pop	{r3, pc}
	memset(m_bDMDScreenRAM, 0xFF, DMD_RAM_SIZE_BYTES * m_DisplaysTotal);
 8002648:	f890 2116 	ldrb.w	r2, [r0, #278]	; 0x116
 800264c:	0192      	lsls	r2, r2, #6
 800264e:	21ff      	movs	r1, #255	; 0xff
 8002650:	6800      	ldr	r0, [r0, #0]
 8002652:	f001 ff8d 	bl	8004570 <memset>
 8002656:	bd08      	pop	{r3, pc}

08002658 <_ZN3DMDC1Ehh>:
DMD::DMD(uint8_t panelsWide, uint8_t panelsHigh)
 8002658:	b570      	push	{r4, r5, r6, lr}
 800265a:	4604      	mov	r4, r0
 800265c:	460e      	mov	r6, r1
 800265e:	4615      	mov	r5, r2
 8002660:	4b16      	ldr	r3, [pc, #88]	; (80026bc <_ZN3DMDC1Ehh+0x64>)
 8002662:	cb03      	ldmia	r3!, {r0, r1}
 8002664:	f8c4 011f 	str.w	r0, [r4, #287]	; 0x11f
 8002668:	f8c4 1123 	str.w	r1, [r4, #291]	; 0x123
 800266c:	f504 70a4 	add.w	r0, r4, #328	; 0x148
 8002670:	f000 ffbe 	bl	80035f0 <_ZN8CTimeoutC1Ev>
	m_DisplaysWide = panelsWide;
 8002674:	f884 6114 	strb.w	r6, [r4, #276]	; 0x114
	m_DisplaysHigh = panelsHigh;
 8002678:	f884 5115 	strb.w	r5, [r4, #277]	; 0x115
	m_DisplaysTotal = m_DisplaysWide * m_DisplaysHigh;
 800267c:	fb05 f006 	mul.w	r0, r5, r6
 8002680:	b2c0      	uxtb	r0, r0
 8002682:	f884 0116 	strb.w	r0, [r4, #278]	; 0x116
	m_row1 = m_DisplaysTotal << 4;
 8002686:	0103      	lsls	r3, r0, #4
 8002688:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
	m_row2 = m_DisplaysTotal << 5;
 800268c:	0143      	lsls	r3, r0, #5
 800268e:	f8a4 311a 	strh.w	r3, [r4, #282]	; 0x11a
	m_row3 = ((m_DisplaysTotal << 2) * 3) << 2;
 8002692:	00c3      	lsls	r3, r0, #3
 8002694:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	f8a4 311c 	strh.w	r3, [r4, #284]	; 0x11c
	m_bDMDScreenRAM = (uint8_t *)malloc(m_DisplaysTotal * DMD_RAM_SIZE_BYTES);
 800269e:	0180      	lsls	r0, r0, #6
 80026a0:	f001 fd4a 	bl	8004138 <malloc>
 80026a4:	6020      	str	r0, [r4, #0]
	ClearScreen(true);
 80026a6:	2101      	movs	r1, #1
 80026a8:	4620      	mov	r0, r4
 80026aa:	f7ff ffc3 	bl	8002634 <_ZN3DMD11ClearScreenEh>
	m_bDMDByte = 0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
	m_State = SBuffering;
 80026b4:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
}
 80026b8:	4620      	mov	r0, r4
 80026ba:	bd70      	pop	{r4, r5, r6, pc}
 80026bc:	08006640 	.word	0x08006640

080026c0 <_ZN3DMD4InitEP11SPI_TypeDefP4IDmaP6ITimerP5IGpioS7_S7_S7_t>:
{
 80026c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026c2:	4604      	mov	r4, r0
 80026c4:	9d07      	ldr	r5, [sp, #28]
 80026c6:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	m_pSpi = pSpi;
 80026ca:	f8c0 1138 	str.w	r1, [r0, #312]	; 0x138
	m_pDma = pDma;
 80026ce:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
	m_timer.Init(pTimer);
 80026d2:	f500 77a4 	add.w	r7, r0, #328	; 0x148
 80026d6:	4619      	mov	r1, r3
 80026d8:	4638      	mov	r0, r7
 80026da:	f000 ff64 	bl	80035a6 <_ZN8CTimeout4InitEP6ITimer>
	m_timer.SetExpiry(refreshRate);
 80026de:	4631      	mov	r1, r6
 80026e0:	4638      	mov	r0, r7
 80026e2:	f000 ff6c 	bl	80035be <_ZN8CTimeout9SetExpiryEt>
	m_refreshRate = refreshRate;
 80026e6:	f8a4 6140 	strh.w	r6, [r4, #320]	; 0x140
	m_PinSS = pSS;
 80026ea:	9b06      	ldr	r3, [sp, #24]
 80026ec:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
	m_PinA = pPinA;
 80026f0:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
	m_PinB = pPinB;
 80026f4:	9b08      	ldr	r3, [sp, #32]
 80026f6:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
	m_PinOE = pPinOE;
 80026fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026fc:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
	m_PinA->Clear();
 8002700:	682b      	ldr	r3, [r5, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	4628      	mov	r0, r5
 8002706:	4798      	blx	r3
	m_PinB->Clear();
 8002708:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 800270c:	6803      	ldr	r3, [r0, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	4798      	blx	r3
	m_PinOE->Clear();
 8002712:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
 8002716:	6803      	ldr	r3, [r0, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4798      	blx	r3
	m_pDma->SetDirection(DMA_DIR_PeripheralDST);
 800271c:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8002720:	6803      	ldr	r3, [r0, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2110      	movs	r1, #16
 8002726:	4798      	blx	r3
	ClearScreen(true);
 8002728:	2101      	movs	r1, #1
 800272a:	4620      	mov	r0, r4
 800272c:	f7ff ff82 	bl	8002634 <_ZN3DMD11ClearScreenEh>
	m_bDMDByte = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
 8002736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002738 <_ZN3DMD8DrawLineEssssh>:

/*--------------------------------------------------------------------------------------
 Draw or clear a line from x1,y1 to x2,y2
 --------------------------------------------------------------------------------------*/
void DMD::DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t bGraphicsMode)
{
 8002738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800273c:	b087      	sub	sp, #28
 800273e:	9002      	str	r0, [sp, #8]
 8002740:	460c      	mov	r4, r1
 8002742:	4615      	mov	r5, r2
 8002744:	469b      	mov	fp, r3
 8002746:	f9bd a040 	ldrsh.w	sl, [sp, #64]	; 0x40
 800274a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800274e:	9303      	str	r3, [sp, #12]
	int16_t dy = y2 - y1;
 8002750:	b292      	uxth	r2, r2
 8002752:	ebaa 0002 	sub.w	r0, sl, r2
 8002756:	b280      	uxth	r0, r0
 8002758:	b207      	sxth	r7, r0
	int16_t dx = x2 - x1;
 800275a:	b289      	uxth	r1, r1
 800275c:	ebab 0301 	sub.w	r3, fp, r1
 8002760:	b29b      	uxth	r3, r3
 8002762:	b21e      	sxth	r6, r3
	int16_t stepx, stepy;

	if (dy < 0)
 8002764:	2f00      	cmp	r7, #0
 8002766:	db1b      	blt.n	80027a0 <_ZN3DMD8DrawLineEssssh+0x68>
		dy = -dy;
		stepy = -1;
	}
	else
	{
		stepy = 1;
 8002768:	f04f 0901 	mov.w	r9, #1
	}
	if (dx < 0)
 800276c:	2e00      	cmp	r6, #0
 800276e:	db1c      	blt.n	80027aa <_ZN3DMD8DrawLineEssssh+0x72>
		dx = -dx;
		stepx = -1;
	}
	else
	{
		stepx = 1;
 8002770:	f04f 0801 	mov.w	r8, #1
	}
	dy <<= 1;			// dy is now 2*dy
 8002774:	007f      	lsls	r7, r7, #1
 8002776:	b23b      	sxth	r3, r7
 8002778:	9304      	str	r3, [sp, #16]
	dx <<= 1;			// dx is now 2*dx
 800277a:	0076      	lsls	r6, r6, #1
 800277c:	b230      	sxth	r0, r6
 800277e:	9005      	str	r0, [sp, #20]

	WritePixel(x1, y1, bGraphicsMode, true);
 8002780:	2301      	movs	r3, #1
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	9b03      	ldr	r3, [sp, #12]
 8002786:	9802      	ldr	r0, [sp, #8]
 8002788:	f7ff feed 	bl	8002566 <_ZN3DMD10WritePixelEtthh>
	if (dx > dy)
 800278c:	9b04      	ldr	r3, [sp, #16]
 800278e:	9805      	ldr	r0, [sp, #20]
 8002790:	4283      	cmp	r3, r0
 8002792:	da29      	bge.n	80027e8 <_ZN3DMD8DrawLineEssssh+0xb0>
	{
		int16_t fraction = dy - (dx >> 1);	// same as 2*dy - dx
 8002794:	b2bf      	uxth	r7, r7
 8002796:	eba7 0a60 	sub.w	sl, r7, r0, asr #1
 800279a:	fa0f fa8a 	sxth.w	sl, sl
 800279e:	e017      	b.n	80027d0 <_ZN3DMD8DrawLineEssssh+0x98>
		dy = -dy;
 80027a0:	4247      	negs	r7, r0
 80027a2:	b23f      	sxth	r7, r7
		stepy = -1;
 80027a4:	f04f 39ff 	mov.w	r9, #4294967295
 80027a8:	e7e0      	b.n	800276c <_ZN3DMD8DrawLineEssssh+0x34>
		dx = -dx;
 80027aa:	425b      	negs	r3, r3
 80027ac:	b21e      	sxth	r6, r3
		stepx = -1;
 80027ae:	f04f 38ff 	mov.w	r8, #4294967295
 80027b2:	e7df      	b.n	8002774 <_ZN3DMD8DrawLineEssssh+0x3c>
			if (fraction >= 0)
			{
				y1 += stepy;
				fraction -= dx;	// same as fraction -= 2*dx
			}
			x1 += stepx;
 80027b4:	eb04 0108 	add.w	r1, r4, r8
 80027b8:	b289      	uxth	r1, r1
 80027ba:	b20c      	sxth	r4, r1
			fraction += dy;	// same as fraction -= 2*dy
 80027bc:	44ba      	add	sl, r7
 80027be:	fa0f fa8a 	sxth.w	sl, sl
			WritePixel(x1, y1, bGraphicsMode, true);
 80027c2:	2301      	movs	r3, #1
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	9b03      	ldr	r3, [sp, #12]
 80027c8:	b2aa      	uxth	r2, r5
 80027ca:	9802      	ldr	r0, [sp, #8]
 80027cc:	f7ff fecb 	bl	8002566 <_ZN3DMD10WritePixelEtthh>
		while (x1 != x2)
 80027d0:	455c      	cmp	r4, fp
 80027d2:	d026      	beq.n	8002822 <_ZN3DMD8DrawLineEssssh+0xea>
			if (fraction >= 0)
 80027d4:	f1ba 0f00 	cmp.w	sl, #0
 80027d8:	dbec      	blt.n	80027b4 <_ZN3DMD8DrawLineEssssh+0x7c>
				y1 += stepy;
 80027da:	444d      	add	r5, r9
 80027dc:	b22d      	sxth	r5, r5
				fraction -= dx;	// same as fraction -= 2*dx
 80027de:	ebaa 0a06 	sub.w	sl, sl, r6
 80027e2:	fa0f fa8a 	sxth.w	sl, sl
 80027e6:	e7e5      	b.n	80027b4 <_ZN3DMD8DrawLineEssssh+0x7c>
		}
	}
	else
	{
		int16_t fraction = dx - (dy >> 1);
 80027e8:	fa1f fb86 	uxth.w	fp, r6
 80027ec:	9b04      	ldr	r3, [sp, #16]
 80027ee:	ebab 0663 	sub.w	r6, fp, r3, asr #1
 80027f2:	b236      	sxth	r6, r6
 80027f4:	e00c      	b.n	8002810 <_ZN3DMD8DrawLineEssssh+0xd8>
			if (fraction >= 0)
			{
				x1 += stepx;
				fraction -= dy;
			}
			y1 += stepy;
 80027f6:	eb05 0209 	add.w	r2, r5, r9
 80027fa:	b292      	uxth	r2, r2
 80027fc:	b215      	sxth	r5, r2
			fraction += dx;
 80027fe:	445e      	add	r6, fp
 8002800:	b236      	sxth	r6, r6
			WritePixel(x1, y1, bGraphicsMode, true);
 8002802:	2301      	movs	r3, #1
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	9b03      	ldr	r3, [sp, #12]
 8002808:	b2a1      	uxth	r1, r4
 800280a:	9802      	ldr	r0, [sp, #8]
 800280c:	f7ff feab 	bl	8002566 <_ZN3DMD10WritePixelEtthh>
		while (y1 != y2)
 8002810:	4555      	cmp	r5, sl
 8002812:	d006      	beq.n	8002822 <_ZN3DMD8DrawLineEssssh+0xea>
			if (fraction >= 0)
 8002814:	2e00      	cmp	r6, #0
 8002816:	dbee      	blt.n	80027f6 <_ZN3DMD8DrawLineEssssh+0xbe>
				x1 += stepx;
 8002818:	4444      	add	r4, r8
 800281a:	b224      	sxth	r4, r4
				fraction -= dy;
 800281c:	1bf6      	subs	r6, r6, r7
 800281e:	b236      	sxth	r6, r6
 8002820:	e7e9      	b.n	80027f6 <_ZN3DMD8DrawLineEssssh+0xbe>
		}
	}
}
 8002822:	b007      	add	sp, #28
 8002824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002828 <_ZN3DMD13DrawFilledBoxEssssh>:

/*--------------------------------------------------------------------------------------
 Draw or clear a filled box(rectangle) with a single pixel border
 --------------------------------------------------------------------------------------*/
void DMD::DrawFilledBox(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t bGraphicsMode)
{
 8002828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800282c:	b083      	sub	sp, #12
 800282e:	4681      	mov	r9, r0
 8002830:	460c      	mov	r4, r1
 8002832:	4690      	mov	r8, r2
 8002834:	461d      	mov	r5, r3
 8002836:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 800283a:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
	for (int16_t b = x1; b <= x2; b++)
 800283e:	42ac      	cmp	r4, r5
 8002840:	dc0a      	bgt.n	8002858 <_ZN3DMD13DrawFilledBoxEssssh+0x30>
	{
		DrawLine(b, y1, b, y2, bGraphicsMode);
 8002842:	9601      	str	r6, [sp, #4]
 8002844:	9700      	str	r7, [sp, #0]
 8002846:	4623      	mov	r3, r4
 8002848:	4642      	mov	r2, r8
 800284a:	4621      	mov	r1, r4
 800284c:	4648      	mov	r0, r9
 800284e:	f7ff ff73 	bl	8002738 <_ZN3DMD8DrawLineEssssh>
	for (int16_t b = x1; b <= x2; b++)
 8002852:	3401      	adds	r4, #1
 8002854:	b224      	sxth	r4, r4
 8002856:	e7f2      	b.n	800283e <_ZN3DMD13DrawFilledBoxEssssh+0x16>
	}
}
 8002858:	b003      	add	sp, #12
 800285a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800285e <_ZN3DMD7ExecuteEv>:
 Scan the dot matrix LED panel display, from the RAM mirror out to the display hardware.
 Call 4 times to scan the whole display which is made up of 4 interleaved rows within the 16 total rows.
 Insert the calls to this function into the main loop for the highest call rate, or from a timer interrupt
 --------------------------------------------------------------------------------------*/
void DMD::Execute()
{
 800285e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002860:	4604      	mov	r4, r0

	switch (m_State)
 8002862:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
 8002866:	b113      	cbz	r3, 800286e <_ZN3DMD7ExecuteEv+0x10>
 8002868:	2b01      	cmp	r3, #1
 800286a:	d06d      	beq.n	8002948 <_ZN3DMD7ExecuteEv+0xea>
 800286c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	{
		case SBuffering:
		{
			if (!m_timer.HasElapsed()) return;
 800286e:	f500 75a4 	add.w	r5, r0, #328	; 0x148
 8002872:	4628      	mov	r0, r5
 8002874:	f000 fea8 	bl	80035c8 <_ZN8CTimeout10HasElapsedEv>
 8002878:	b900      	cbnz	r0, 800287c <_ZN3DMD7ExecuteEv+0x1e>
 800287a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			m_timer.SetExpiry((uint16_t)(m_refreshRate * m_brightness));
 800287c:	f8d4 6144 	ldr.w	r6, [r4, #324]	; 0x144
 8002880:	f8b4 0140 	ldrh.w	r0, [r4, #320]	; 0x140
 8002884:	f7fe fa10 	bl	8000ca8 <__aeabi_i2f>
 8002888:	4631      	mov	r1, r6
 800288a:	f7fe fa61 	bl	8000d50 <__aeabi_fmul>
 800288e:	f7fe fbaf 	bl	8000ff0 <__aeabi_f2uiz>
 8002892:	b281      	uxth	r1, r0
 8002894:	4628      	mov	r0, r5
 8002896:	f000 fe92 	bl	80035be <_ZN8CTimeout9SetExpiryEt>
			//SPI transfer pixels to the display hardware shift registers
			int16_t rowsize = m_DisplaysTotal << 2;
 800289a:	f894 3116 	ldrb.w	r3, [r4, #278]	; 0x116
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	fa0f fe83 	sxth.w	lr, r3
			int16_t offset = rowsize * m_bDMDByte;
 80028a4:	f894 711e 	ldrb.w	r7, [r4, #286]	; 0x11e
 80028a8:	fb07 f703 	mul.w	r7, r7, r3
 80028ac:	b23f      	sxth	r7, r7

			uint16_t size = 0;
			for (int16_t i = 0; i < rowsize; i++)
 80028ae:	2300      	movs	r3, #0
			uint16_t size = 0;
 80028b0:	461d      	mov	r5, r3
			for (int16_t i = 0; i < rowsize; i++)
 80028b2:	4573      	cmp	r3, lr
 80028b4:	da2a      	bge.n	800290c <_ZN3DMD7ExecuteEv+0xae>
			{
				m_dmaCache[size++] = m_bDMDScreenRAM[offset + i + m_row3];
 80028b6:	1c6a      	adds	r2, r5, #1
 80028b8:	b292      	uxth	r2, r2
 80028ba:	f8d4 c000 	ldr.w	ip, [r4]
 80028be:	18fe      	adds	r6, r7, r3
 80028c0:	f9b4 111c 	ldrsh.w	r1, [r4, #284]	; 0x11c
 80028c4:	4431      	add	r1, r6
 80028c6:	f81c 0001 	ldrb.w	r0, [ip, r1]
 80028ca:	1961      	adds	r1, r4, r5
 80028cc:	f881 0158 	strb.w	r0, [r1, #344]	; 0x158
				m_dmaCache[size++] = m_bDMDScreenRAM[offset + i + m_row2];
 80028d0:	1ca9      	adds	r1, r5, #2
 80028d2:	b289      	uxth	r1, r1
 80028d4:	f9b4 011a 	ldrsh.w	r0, [r4, #282]	; 0x11a
 80028d8:	4430      	add	r0, r6
 80028da:	f81c 0000 	ldrb.w	r0, [ip, r0]
 80028de:	4422      	add	r2, r4
 80028e0:	f882 0158 	strb.w	r0, [r2, #344]	; 0x158
				m_dmaCache[size++] = m_bDMDScreenRAM[offset + i + m_row1];
 80028e4:	1cea      	adds	r2, r5, #3
 80028e6:	b292      	uxth	r2, r2
 80028e8:	f9b4 0118 	ldrsh.w	r0, [r4, #280]	; 0x118
 80028ec:	4430      	add	r0, r6
 80028ee:	f81c 0000 	ldrb.w	r0, [ip, r0]
 80028f2:	4421      	add	r1, r4
 80028f4:	f881 0158 	strb.w	r0, [r1, #344]	; 0x158
				m_dmaCache[size++] = m_bDMDScreenRAM[offset + i];
 80028f8:	3504      	adds	r5, #4
 80028fa:	b2ad      	uxth	r5, r5
 80028fc:	f81c 1006 	ldrb.w	r1, [ip, r6]
 8002900:	4422      	add	r2, r4
 8002902:	f882 1158 	strb.w	r1, [r2, #344]	; 0x158
			for (int16_t i = 0; i < rowsize; i++)
 8002906:	3301      	adds	r3, #1
 8002908:	b21b      	sxth	r3, r3
 800290a:	e7d2      	b.n	80028b2 <_ZN3DMD7ExecuteEv+0x54>
			}

			m_pDma->SetAddress((uint32_t)&m_pSpi->DR, (uint32_t)m_dmaCache);
 800290c:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8002910:	6803      	ldr	r3, [r0, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 8002918:	f504 72ac 	add.w	r2, r4, #344	; 0x158
 800291c:	310c      	adds	r1, #12
 800291e:	4798      	blx	r3
			m_pDma->SetBufferSize(size);
 8002920:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8002924:	6803      	ldr	r3, [r0, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	4629      	mov	r1, r5
 800292a:	4798      	blx	r3
			m_PinSS->Clear(); // chip select low
 800292c:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
 8002930:	6803      	ldr	r3, [r0, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	4798      	blx	r3
			m_pDma->Start();
 8002936:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 800293a:	6803      	ldr	r3, [r0, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4798      	blx	r3
			m_State = STransmitting;
 8002940:	2301      	movs	r3, #1
 8002942:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
		}
			break;
 8002946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

		case STransmitting:
		{
			if (!m_timer.HasElapsed()) return;
 8002948:	f500 75a4 	add.w	r5, r0, #328	; 0x148
 800294c:	4628      	mov	r0, r5
 800294e:	f000 fe3b 	bl	80035c8 <_ZN8CTimeout10HasElapsedEv>
 8002952:	2800      	cmp	r0, #0
 8002954:	d091      	beq.n	800287a <_ZN3DMD7ExecuteEv+0x1c>
			m_timer.SetExpiry((uint16_t)(m_refreshRate * (1 - m_brightness)));
 8002956:	f8b4 7140 	ldrh.w	r7, [r4, #320]	; 0x140
 800295a:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
 800295e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002962:	f7fe f8eb 	bl	8000b3c <__aeabi_fsub>
 8002966:	4606      	mov	r6, r0
 8002968:	4638      	mov	r0, r7
 800296a:	f7fe f99d 	bl	8000ca8 <__aeabi_i2f>
 800296e:	4631      	mov	r1, r6
 8002970:	f7fe f9ee 	bl	8000d50 <__aeabi_fmul>
 8002974:	f7fe fb3c 	bl	8000ff0 <__aeabi_f2uiz>
 8002978:	b281      	uxth	r1, r0
 800297a:	4628      	mov	r0, r5
 800297c:	f000 fe1f 	bl	80035be <_ZN8CTimeout9SetExpiryEt>
			if (!m_pDma->IsTransferFinished()) return;
 8002980:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8002984:	6803      	ldr	r3, [r0, #0]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	4798      	blx	r3
 800298a:	2800      	cmp	r0, #0
 800298c:	f43f af75 	beq.w	800287a <_ZN3DMD7ExecuteEv+0x1c>
			m_pDma->Stop();
 8002990:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8002994:	6803      	ldr	r3, [r0, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	4798      	blx	r3
			m_PinOE->Clear(); // turn off the display first
 800299a:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
 800299e:	6803      	ldr	r3, [r0, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	4798      	blx	r3
			m_PinSS->Set(); // latch the transfered data
 80029a4:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
 80029a8:	6803      	ldr	r3, [r0, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4798      	blx	r3
			switch (m_bDMDByte)
 80029ae:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d810      	bhi.n	80029da <_ZN3DMD7ExecuteEv+0x17c>
 80029b8:	e8df f003 	tbb	[pc, r3]
 80029bc:	34261802 	.word	0x34261802
	//DMD I/O pin macros
	inline void LIGHT_DMD_ROW_01_05_09_13()
	{
//		digitalWrite( PIN_DMD_B, LOW);
//		digitalWrite( PIN_DMD_A, LOW);
		m_PinB->Clear();
 80029c0:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 80029c4:	6803      	ldr	r3, [r0, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	4798      	blx	r3
		m_PinA->Clear();
 80029ca:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 80029ce:	6803      	ldr	r3, [r0, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	4798      	blx	r3
			{
				case 0:			// row 1, 5, 9, 13 were clocked out
					LIGHT_DMD_ROW_01_05_09_13();
					m_bDMDByte = 1;
 80029d4:	2301      	movs	r3, #1
 80029d6:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
				case 3:			// row 4, 8, 12, 16 were clocked out
					LIGHT_DMD_ROW_04_08_12_16();
					m_bDMDByte = 0;
					break;
			}
			m_PinOE->Set(); // turn on the display again
 80029da:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
 80029de:	6803      	ldr	r3, [r0, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4798      	blx	r3
			m_State = SBuffering;
 80029e4:	2300      	movs	r3, #0
 80029e6:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
		}
			break;
 80029ea:	e746      	b.n	800287a <_ZN3DMD7ExecuteEv+0x1c>
	}
	inline void LIGHT_DMD_ROW_02_06_10_14()
	{
//		digitalWrite( PIN_DMD_B, LOW);
//		digitalWrite( PIN_DMD_A, HIGH);
		m_PinB->Clear();
 80029ec:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 80029f0:	6803      	ldr	r3, [r0, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	4798      	blx	r3
		m_PinA->Set();
 80029f6:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 80029fa:	6803      	ldr	r3, [r0, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4798      	blx	r3
					m_bDMDByte = 2;
 8002a00:	2302      	movs	r3, #2
 8002a02:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
					break;
 8002a06:	e7e8      	b.n	80029da <_ZN3DMD7ExecuteEv+0x17c>
	}
	inline void LIGHT_DMD_ROW_03_07_11_15()
	{
//		digitalWrite( PIN_DMD_B, HIGH);
//		digitalWrite( PIN_DMD_A, LOW);
		m_PinB->Set();
 8002a08:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 8002a0c:	6803      	ldr	r3, [r0, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4798      	blx	r3
		m_PinA->Clear();
 8002a12:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 8002a16:	6803      	ldr	r3, [r0, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	4798      	blx	r3
					m_bDMDByte = 3;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
					break;
 8002a22:	e7da      	b.n	80029da <_ZN3DMD7ExecuteEv+0x17c>
	}
	inline void LIGHT_DMD_ROW_04_08_12_16()
	{
//		digitalWrite( PIN_DMD_B, HIGH);
//		digitalWrite( PIN_DMD_A, HIGH);
		m_PinB->Set();
 8002a24:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 8002a28:	6803      	ldr	r3, [r0, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4798      	blx	r3
		m_PinA->Set();
 8002a2e:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 8002a32:	6803      	ldr	r3, [r0, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4798      	blx	r3
					m_bDMDByte = 0;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
					break;
 8002a3e:	e7cc      	b.n	80029da <_ZN3DMD7ExecuteEv+0x17c>

08002a40 <_ZN3DMD10SelectFontEPKh>:
	m_refreshRate = refreshRate;
}

void DMD::SelectFont(const uint8_t * font)
{
	this->m_pFont = font;
 8002a40:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
 8002a44:	4770      	bx	lr

08002a46 <_ZN3DMD9CharWidthEh>:

int16_t DMD::CharWidth(const unsigned char letter)
{
	unsigned char c = letter;
	// Space is often not included in font so use width of 'n'
	if (c == ' ') c = 'n';
 8002a46:	2920      	cmp	r1, #32
 8002a48:	d010      	beq.n	8002a6c <_ZN3DMD9CharWidthEh+0x26>
	uint8_t width = 0;

	uint8_t firstChar = *(m_pFont + FONT_FIRST_CHAR);
 8002a4a:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8002a4e:	791a      	ldrb	r2, [r3, #4]
	uint8_t charCount = *(m_pFont + FONT_CHAR_COUNT);
 8002a50:	7958      	ldrb	r0, [r3, #5]

	if (c < firstChar || c >= (firstChar + charCount))
 8002a52:	4291      	cmp	r1, r2
 8002a54:	db10      	blt.n	8002a78 <_ZN3DMD9CharWidthEh+0x32>
 8002a56:	4410      	add	r0, r2
 8002a58:	4281      	cmp	r1, r0
 8002a5a:	da0f      	bge.n	8002a7c <_ZN3DMD9CharWidthEh+0x36>
	{
		return 0;
	}
	c -= firstChar;
 8002a5c:	1a89      	subs	r1, r1, r2
 8002a5e:	b2c9      	uxtb	r1, r1

	if (*(m_pFont + FONT_LENGTH) == 0 && *(m_pFont + FONT_LENGTH + 1) == 0)
 8002a60:	781a      	ldrb	r2, [r3, #0]
 8002a62:	b92a      	cbnz	r2, 8002a70 <_ZN3DMD9CharWidthEh+0x2a>
 8002a64:	785a      	ldrb	r2, [r3, #1]
 8002a66:	b91a      	cbnz	r2, 8002a70 <_ZN3DMD9CharWidthEh+0x2a>
	{
		// zero length is flag indicating fixed width font (array does not contain width data entries)
		width = *(m_pFont + FONT_FIXED_WIDTH);
 8002a68:	7898      	ldrb	r0, [r3, #2]
 8002a6a:	e003      	b.n	8002a74 <_ZN3DMD9CharWidthEh+0x2e>
	if (c == ' ') c = 'n';
 8002a6c:	216e      	movs	r1, #110	; 0x6e
 8002a6e:	e7ec      	b.n	8002a4a <_ZN3DMD9CharWidthEh+0x4>
	}
	else
	{
		// variable width font, read width data
		width = *(m_pFont + FONT_WIDTH_TABLE + c);
 8002a70:	3106      	adds	r1, #6
 8002a72:	5c58      	ldrb	r0, [r3, r1]
	}
	return width;
 8002a74:	b200      	sxth	r0, r0
 8002a76:	4770      	bx	lr
		return 0;
 8002a78:	2000      	movs	r0, #0
 8002a7a:	4770      	bx	lr
 8002a7c:	2000      	movs	r0, #0
}
 8002a7e:	4770      	bx	lr

08002a80 <_ZN3DMD8DrawCharEsshh>:
{
 8002a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a84:	b08b      	sub	sp, #44	; 0x2c
 8002a86:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8002a8a:	9404      	str	r4, [sp, #16]
	if (bX > (DMD_PIXELS_ACROSS * m_DisplaysWide) || bY > (DMD_PIXELS_DOWN * m_DisplaysHigh))
 8002a8c:	f890 4114 	ldrb.w	r4, [r0, #276]	; 0x114
 8002a90:	ebb1 1f44 	cmp.w	r1, r4, lsl #5
 8002a94:	f300 80c3 	bgt.w	8002c1e <_ZN3DMD8DrawCharEsshh+0x19e>
 8002a98:	f890 4115 	ldrb.w	r4, [r0, #277]	; 0x115
 8002a9c:	ebb2 1f04 	cmp.w	r2, r4, lsl #4
 8002aa0:	f300 80c1 	bgt.w	8002c26 <_ZN3DMD8DrawCharEsshh+0x1a6>
 8002aa4:	9203      	str	r2, [sp, #12]
 8002aa6:	9102      	str	r1, [sp, #8]
 8002aa8:	4682      	mov	sl, r0
	uint8_t height = *(m_pFont + FONT_HEIGHT);
 8002aaa:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
 8002aae:	78c2      	ldrb	r2, [r0, #3]
 8002ab0:	9208      	str	r2, [sp, #32]
	if (c == ' ')
 8002ab2:	2b20      	cmp	r3, #32
 8002ab4:	d021      	beq.n	8002afa <_ZN3DMD8DrawCharEsshh+0x7a>
	uint8_t bytes = (height + 7) / 8;
 8002ab6:	9a08      	ldr	r2, [sp, #32]
 8002ab8:	4690      	mov	r8, r2
 8002aba:	3207      	adds	r2, #7
 8002abc:	10d2      	asrs	r2, r2, #3
 8002abe:	9206      	str	r2, [sp, #24]
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	4615      	mov	r5, r2
 8002ac4:	9209      	str	r2, [sp, #36]	; 0x24
	uint8_t firstChar = *(m_pFont + FONT_FIRST_CHAR);
 8002ac6:	7901      	ldrb	r1, [r0, #4]
	uint8_t charCount = *(m_pFont + FONT_CHAR_COUNT);
 8002ac8:	7944      	ldrb	r4, [r0, #5]
	if (c < firstChar || c >= (firstChar + charCount)) return 0;
 8002aca:	428b      	cmp	r3, r1
 8002acc:	f2c0 80af 	blt.w	8002c2e <_ZN3DMD8DrawCharEsshh+0x1ae>
 8002ad0:	1862      	adds	r2, r4, r1
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	f280 80b1 	bge.w	8002c3a <_ZN3DMD8DrawCharEsshh+0x1ba>
	c -= firstChar;
 8002ad8:	1a5b      	subs	r3, r3, r1
 8002ada:	b2d9      	uxtb	r1, r3
	if (*(m_pFont + FONT_LENGTH) == 0 && *(m_pFont + FONT_LENGTH + 1) == 0)
 8002adc:	7803      	ldrb	r3, [r0, #0]
 8002ade:	bb1b      	cbnz	r3, 8002b28 <_ZN3DMD8DrawCharEsshh+0xa8>
 8002ae0:	7843      	ldrb	r3, [r0, #1]
 8002ae2:	bb63      	cbnz	r3, 8002b3e <_ZN3DMD8DrawCharEsshh+0xbe>
		width = *(m_pFont + FONT_FIXED_WIDTH);
 8002ae4:	7883      	ldrb	r3, [r0, #2]
		index = c * bytes * width + FONT_WIDTH_TABLE;
 8002ae6:	462a      	mov	r2, r5
 8002ae8:	fb01 f202 	mul.w	r2, r1, r2
 8002aec:	fb02 f203 	mul.w	r2, r2, r3
 8002af0:	b292      	uxth	r2, r2
 8002af2:	3206      	adds	r2, #6
 8002af4:	b292      	uxth	r2, r2
 8002af6:	9207      	str	r2, [sp, #28]
 8002af8:	e02f      	b.n	8002b5a <_ZN3DMD8DrawCharEsshh+0xda>
		int16_t charWide = CharWidth(' ');
 8002afa:	2120      	movs	r1, #32
 8002afc:	4650      	mov	r0, sl
 8002afe:	f7ff ffa2 	bl	8002a46 <_ZN3DMD9CharWidthEh>
 8002b02:	4604      	mov	r4, r0
		this->DrawFilledBox(bX, bY, bX + charWide, bY + height, GRAPHICS_INVERSE);
 8002b04:	9802      	ldr	r0, [sp, #8]
 8002b06:	4603      	mov	r3, r0
 8002b08:	4423      	add	r3, r4
 8002b0a:	9a08      	ldr	r2, [sp, #32]
 8002b0c:	9d03      	ldr	r5, [sp, #12]
 8002b0e:	442a      	add	r2, r5
 8002b10:	b212      	sxth	r2, r2
 8002b12:	2101      	movs	r1, #1
 8002b14:	9101      	str	r1, [sp, #4]
 8002b16:	9200      	str	r2, [sp, #0]
 8002b18:	b21b      	sxth	r3, r3
 8002b1a:	462a      	mov	r2, r5
 8002b1c:	4601      	mov	r1, r0
 8002b1e:	4650      	mov	r0, sl
 8002b20:	f7ff fe82 	bl	8002828 <_ZN3DMD13DrawFilledBoxEssssh>
		return charWide;
 8002b24:	9405      	str	r4, [sp, #20]
 8002b26:	e084      	b.n	8002c32 <_ZN3DMD8DrawCharEsshh+0x1b2>
 8002b28:	2200      	movs	r2, #0
 8002b2a:	4613      	mov	r3, r2
		for (uint8_t i = 0; i < c; i++)
 8002b2c:	428a      	cmp	r2, r1
 8002b2e:	da09      	bge.n	8002b44 <_ZN3DMD8DrawCharEsshh+0xc4>
			index += *(m_pFont + FONT_WIDTH_TABLE + i);
 8002b30:	1d95      	adds	r5, r2, #6
 8002b32:	5d45      	ldrb	r5, [r0, r5]
 8002b34:	442b      	add	r3, r5
 8002b36:	b29b      	uxth	r3, r3
		for (uint8_t i = 0; i < c; i++)
 8002b38:	3201      	adds	r2, #1
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	e7f6      	b.n	8002b2c <_ZN3DMD8DrawCharEsshh+0xac>
 8002b3e:	2200      	movs	r2, #0
 8002b40:	4613      	mov	r3, r2
 8002b42:	e7f3      	b.n	8002b2c <_ZN3DMD8DrawCharEsshh+0xac>
		index = index * bytes + charCount + FONT_WIDTH_TABLE;
 8002b44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b46:	fb02 f303 	mul.w	r3, r2, r3
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	4423      	add	r3, r4
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	3306      	adds	r3, #6
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	9307      	str	r3, [sp, #28]
		width = *(m_pFont + FONT_WIDTH_TABLE + c);
 8002b56:	3106      	adds	r1, #6
 8002b58:	5c43      	ldrb	r3, [r0, r1]
	if (bX < -width || bY < -height) return width;
 8002b5a:	9305      	str	r3, [sp, #20]
 8002b5c:	425b      	negs	r3, r3
 8002b5e:	9a02      	ldr	r2, [sp, #8]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	db66      	blt.n	8002c32 <_ZN3DMD8DrawCharEsshh+0x1b2>
 8002b64:	9b08      	ldr	r3, [sp, #32]
 8002b66:	425b      	negs	r3, r3
 8002b68:	9a03      	ldr	r2, [sp, #12]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	db61      	blt.n	8002c32 <_ZN3DMD8DrawCharEsshh+0x1b2>
 8002b6e:	f04f 0900 	mov.w	r9, #0
 8002b72:	e04d      	b.n	8002c10 <_ZN3DMD8DrawCharEsshh+0x190>
			if ((i == bytes - 1) && bytes > 1)
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	dd45      	ble.n	8002c04 <_ZN3DMD8DrawCharEsshh+0x184>
				offset = height - 8;
 8002b78:	9b08      	ldr	r3, [sp, #32]
 8002b7a:	f1a3 0508 	sub.w	r5, r3, #8
 8002b7e:	e041      	b.n	8002c04 <_ZN3DMD8DrawCharEsshh+0x184>
						WritePixel(bX + j, bY + offset + k, bGraphicsMode, false);
 8002b80:	9b02      	ldr	r3, [sp, #8]
 8002b82:	eb09 0103 	add.w	r1, r9, r3
 8002b86:	9b03      	ldr	r3, [sp, #12]
 8002b88:	195a      	adds	r2, r3, r5
 8002b8a:	b292      	uxth	r2, r2
 8002b8c:	4422      	add	r2, r4
 8002b8e:	2300      	movs	r3, #0
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	9b04      	ldr	r3, [sp, #16]
 8002b94:	b292      	uxth	r2, r2
 8002b96:	b289      	uxth	r1, r1
 8002b98:	4650      	mov	r0, sl
 8002b9a:	f7ff fce4 	bl	8002566 <_ZN3DMD10WritePixelEtthh>
			for (uint8_t k = 0; k < 8; k++)
 8002b9e:	3401      	adds	r4, #1
 8002ba0:	b2e4      	uxtb	r4, r4
 8002ba2:	2c07      	cmp	r4, #7
 8002ba4:	dc1a      	bgt.n	8002bdc <_ZN3DMD8DrawCharEsshh+0x15c>
				if ((offset + k >= i * 8) && (offset + k <= height))
 8002ba6:	192b      	adds	r3, r5, r4
 8002ba8:	ebb3 0fc7 	cmp.w	r3, r7, lsl #3
 8002bac:	dbf7      	blt.n	8002b9e <_ZN3DMD8DrawCharEsshh+0x11e>
 8002bae:	4598      	cmp	r8, r3
 8002bb0:	dbf5      	blt.n	8002b9e <_ZN3DMD8DrawCharEsshh+0x11e>
					if (data & (1 << k))
 8002bb2:	fa4b f204 	asr.w	r2, fp, r4
 8002bb6:	f012 0f01 	tst.w	r2, #1
 8002bba:	d0e1      	beq.n	8002b80 <_ZN3DMD8DrawCharEsshh+0x100>
						WritePixel(bX + j, bY + offset + k, bGraphicsMode, true);
 8002bbc:	9b02      	ldr	r3, [sp, #8]
 8002bbe:	eb09 0103 	add.w	r1, r9, r3
 8002bc2:	9b03      	ldr	r3, [sp, #12]
 8002bc4:	195a      	adds	r2, r3, r5
 8002bc6:	b292      	uxth	r2, r2
 8002bc8:	4422      	add	r2, r4
 8002bca:	2301      	movs	r3, #1
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	9b04      	ldr	r3, [sp, #16]
 8002bd0:	b292      	uxth	r2, r2
 8002bd2:	b289      	uxth	r1, r1
 8002bd4:	4650      	mov	r0, sl
 8002bd6:	f7ff fcc6 	bl	8002566 <_ZN3DMD10WritePixelEtthh>
 8002bda:	e7e0      	b.n	8002b9e <_ZN3DMD8DrawCharEsshh+0x11e>
		for (uint8_t i = bytes - 1; i < 254; i--)
 8002bdc:	3e01      	subs	r6, #1
 8002bde:	b2f6      	uxtb	r6, r6
 8002be0:	4637      	mov	r7, r6
 8002be2:	2efd      	cmp	r6, #253	; 0xfd
 8002be4:	dc10      	bgt.n	8002c08 <_ZN3DMD8DrawCharEsshh+0x188>
			uint8_t data = *(m_pFont + index + j + (i * width));
 8002be6:	f8da 2110 	ldr.w	r2, [sl, #272]	; 0x110
 8002bea:	9b07      	ldr	r3, [sp, #28]
 8002bec:	444b      	add	r3, r9
 8002bee:	9905      	ldr	r1, [sp, #20]
 8002bf0:	fb06 3301 	mla	r3, r6, r1, r3
 8002bf4:	f812 b003 	ldrb.w	fp, [r2, r3]
			int16_t offset = (i * 8);
 8002bf8:	00f5      	lsls	r5, r6, #3
 8002bfa:	f89d 3018 	ldrb.w	r3, [sp, #24]
			if ((i == bytes - 1) && bytes > 1)
 8002bfe:	1e5a      	subs	r2, r3, #1
 8002c00:	4296      	cmp	r6, r2
 8002c02:	d0b7      	beq.n	8002b74 <_ZN3DMD8DrawCharEsshh+0xf4>
			for (uint8_t k = 0; k < 8; k++)
 8002c04:	2400      	movs	r4, #0
 8002c06:	e7cc      	b.n	8002ba2 <_ZN3DMD8DrawCharEsshh+0x122>
	for (uint8_t j = 0; j < width; j++)
 8002c08:	f109 0901 	add.w	r9, r9, #1
 8002c0c:	fa5f f989 	uxtb.w	r9, r9
 8002c10:	9b05      	ldr	r3, [sp, #20]
 8002c12:	454b      	cmp	r3, r9
 8002c14:	dd0d      	ble.n	8002c32 <_ZN3DMD8DrawCharEsshh+0x1b2>
		for (uint8_t i = bytes - 1; i < 254; i--)
 8002c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c18:	1e5e      	subs	r6, r3, #1
 8002c1a:	b2f6      	uxtb	r6, r6
 8002c1c:	e7e0      	b.n	8002be0 <_ZN3DMD8DrawCharEsshh+0x160>
		return -1;
 8002c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c22:	9305      	str	r3, [sp, #20]
 8002c24:	e005      	b.n	8002c32 <_ZN3DMD8DrawCharEsshh+0x1b2>
 8002c26:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2a:	9305      	str	r3, [sp, #20]
 8002c2c:	e001      	b.n	8002c32 <_ZN3DMD8DrawCharEsshh+0x1b2>
	if (c < firstChar || c >= (firstChar + charCount)) return 0;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	9305      	str	r3, [sp, #20]
}
 8002c32:	9805      	ldr	r0, [sp, #20]
 8002c34:	b00b      	add	sp, #44	; 0x2c
 8002c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (c < firstChar || c >= (firstChar + charCount)) return 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	9305      	str	r3, [sp, #20]
 8002c3e:	e7f8      	b.n	8002c32 <_ZN3DMD8DrawCharEsshh+0x1b2>

08002c40 <_ZN3DMD10DrawStringEssPKchh>:
{
 8002c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c44:	b087      	sub	sp, #28
 8002c46:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
 8002c4a:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	if (bX >= (DMD_PIXELS_ACROSS * m_DisplaysWide) || bY >= DMD_PIXELS_DOWN * m_DisplaysHigh)
 8002c4e:	f890 4114 	ldrb.w	r4, [r0, #276]	; 0x114
 8002c52:	ebb1 1f44 	cmp.w	r1, r4, lsl #5
 8002c56:	da56      	bge.n	8002d06 <_ZN3DMD10DrawStringEssPKchh+0xc6>
 8002c58:	468b      	mov	fp, r1
 8002c5a:	9203      	str	r2, [sp, #12]
 8002c5c:	f890 4115 	ldrb.w	r4, [r0, #277]	; 0x115
 8002c60:	ebb2 1f04 	cmp.w	r2, r4, lsl #4
 8002c64:	da4f      	bge.n	8002d06 <_ZN3DMD10DrawStringEssPKchh+0xc6>
	uint8_t height = *(m_pFont + FONT_HEIGHT);
 8002c66:	f8d0 4110 	ldr.w	r4, [r0, #272]	; 0x110
 8002c6a:	78e4      	ldrb	r4, [r4, #3]
	if (bY + height < 0) return;
 8002c6c:	42d4      	cmn	r4, r2
 8002c6e:	d44a      	bmi.n	8002d06 <_ZN3DMD10DrawStringEssPKchh+0xc6>
 8002c70:	461d      	mov	r5, r3
 8002c72:	9202      	str	r2, [sp, #8]
 8002c74:	4607      	mov	r7, r0
	this->DrawLine(bX - 1, bY, bX - 1, bY + height, GRAPHICS_INVERSE);
 8002c76:	fa1f f881 	uxth.w	r8, r1
 8002c7a:	f108 31ff 	add.w	r1, r8, #4294967295
 8002c7e:	b209      	sxth	r1, r1
 8002c80:	4414      	add	r4, r2
 8002c82:	b220      	sxth	r0, r4
 8002c84:	9005      	str	r0, [sp, #20]
 8002c86:	2301      	movs	r3, #1
 8002c88:	9301      	str	r3, [sp, #4]
 8002c8a:	9000      	str	r0, [sp, #0]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4638      	mov	r0, r7
 8002c90:	f7ff fd52 	bl	8002738 <_ZN3DMD8DrawLineEssssh>
	for (int16_t i = 0; i < length; i++)
 8002c94:	2600      	movs	r6, #0
	int16_t strWidth = 0;
 8002c96:	4634      	mov	r4, r6
 8002c98:	f8cd a010 	str.w	sl, [sp, #16]
 8002c9c:	46aa      	mov	sl, r5
 8002c9e:	e010      	b.n	8002cc2 <_ZN3DMD10DrawStringEssPKchh+0x82>
		else if (charWide < 0)
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	db30      	blt.n	8002d06 <_ZN3DMD10DrawStringEssPKchh+0xc6>
		if ((bX + strWidth) >= DMD_PIXELS_ACROSS * m_DisplaysWide
 8002ca4:	eb04 030b 	add.w	r3, r4, fp
 8002ca8:	f897 2114 	ldrb.w	r2, [r7, #276]	; 0x114
 8002cac:	ebb3 1f42 	cmp.w	r3, r2, lsl #5
 8002cb0:	da29      	bge.n	8002d06 <_ZN3DMD10DrawStringEssPKchh+0xc6>
				|| bY >= DMD_PIXELS_DOWN * m_DisplaysHigh) return;
 8002cb2:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8002cb6:	9a03      	ldr	r2, [sp, #12]
 8002cb8:	ebb2 1f03 	cmp.w	r2, r3, lsl #4
 8002cbc:	da23      	bge.n	8002d06 <_ZN3DMD10DrawStringEssPKchh+0xc6>
	for (int16_t i = 0; i < length; i++)
 8002cbe:	3601      	adds	r6, #1
 8002cc0:	b236      	sxth	r6, r6
 8002cc2:	454e      	cmp	r6, r9
 8002cc4:	da1f      	bge.n	8002d06 <_ZN3DMD10DrawStringEssPKchh+0xc6>
		int16_t charWide = this->DrawChar(bX + strWidth, bY, bChars[i], bGraphicsMode);
 8002cc6:	b2a5      	uxth	r5, r4
 8002cc8:	eb08 0105 	add.w	r1, r8, r5
 8002ccc:	f81a 3006 	ldrb.w	r3, [sl, r6]
 8002cd0:	9a04      	ldr	r2, [sp, #16]
 8002cd2:	9200      	str	r2, [sp, #0]
 8002cd4:	9a02      	ldr	r2, [sp, #8]
 8002cd6:	b209      	sxth	r1, r1
 8002cd8:	4638      	mov	r0, r7
 8002cda:	f7ff fed1 	bl	8002a80 <_ZN3DMD8DrawCharEsshh>
 8002cde:	b203      	sxth	r3, r0
		if (charWide > 0)
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	dddd      	ble.n	8002ca0 <_ZN3DMD10DrawStringEssPKchh+0x60>
			strWidth += charWide;
 8002ce4:	4405      	add	r5, r0
 8002ce6:	b2ad      	uxth	r5, r5
			this->DrawLine(bX + strWidth, bY, bX + strWidth, bY + height, GRAPHICS_INVERSE);
 8002ce8:	eb08 0105 	add.w	r1, r8, r5
 8002cec:	b209      	sxth	r1, r1
 8002cee:	2301      	movs	r3, #1
 8002cf0:	9301      	str	r3, [sp, #4]
 8002cf2:	9b05      	ldr	r3, [sp, #20]
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	9a02      	ldr	r2, [sp, #8]
 8002cfa:	4638      	mov	r0, r7
 8002cfc:	f7ff fd1c 	bl	8002738 <_ZN3DMD8DrawLineEssssh>
			strWidth++;
 8002d00:	3501      	adds	r5, #1
 8002d02:	b22c      	sxth	r4, r5
 8002d04:	e7ce      	b.n	8002ca4 <_ZN3DMD10DrawStringEssPKchh+0x64>
}
 8002d06:	b007      	add	sp, #28
 8002d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002d0c <_ZN13CACDisplayDmd4InitEP17CACFrequencyMeterP12CAnalogInputP3DMDP6ITimer>:

#include <ACDisplayDmd.h>

void CACDisplayDmd::Init(CACFrequencyMeter *pAcFreqMeter, CAnalogInput *pAcVoltage, DMD *pDmd,
		ITimer *pTimer)
{
 8002d0c:	b508      	push	{r3, lr}
	m_pAcFreqMeter = pAcFreqMeter;
 8002d0e:	6141      	str	r1, [r0, #20]
	m_pAcVoltage = pAcVoltage;
 8002d10:	6182      	str	r2, [r0, #24]
	m_pDmd = pDmd;
 8002d12:	61c3      	str	r3, [r0, #28]
	m_timeout.Init(pTimer);
 8002d14:	9902      	ldr	r1, [sp, #8]
 8002d16:	3004      	adds	r0, #4
 8002d18:	f000 fc45 	bl	80035a6 <_ZN8CTimeout4InitEP6ITimer>
 8002d1c:	bd08      	pop	{r3, pc}
	...

08002d20 <_ZN13CACDisplayDmdC1Ev>:
	m_pDmd->ClearScreen(1);
	m_pDmd->DrawString(0,0,freqDisplay,strlen(freqDisplay),1);
	m_pDmd->DrawString(0,15,acVoltageDisplay,strlen(acVoltageDisplay),1);
}

CACDisplayDmd::CACDisplayDmd()
 8002d20:	b510      	push	{r4, lr}
 8002d22:	4604      	mov	r4, r0
 8002d24:	4b03      	ldr	r3, [pc, #12]	; (8002d34 <_ZN13CACDisplayDmdC1Ev+0x14>)
 8002d26:	f840 3b04 	str.w	r3, [r0], #4
 8002d2a:	f000 fc61 	bl	80035f0 <_ZN8CTimeoutC1Ev>
{
	// TODO Auto-generated constructor stub

}
 8002d2e:	4620      	mov	r0, r4
 8002d30:	bd10      	pop	{r4, pc}
 8002d32:	bf00      	nop
 8002d34:	0800666c 	.word	0x0800666c

08002d38 <_ZNK15CCircularBufferItLt20EE5CountEv>:
}

template<class ELEMTYPE, uint16_t BUFFSIZE>
uint16_t CCircularBuffer<ELEMTYPE,BUFFSIZE>::Count(void) const
{
	if(m_IsFull)
 8002d38:	7883      	ldrb	r3, [r0, #2]
 8002d3a:	b90b      	cbnz	r3, 8002d40 <_ZNK15CCircularBufferItLt20EE5CountEv+0x8>
	{
		return m_Size;
	}
	else
	{
		return m_Head;
 8002d3c:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
	}
}
 8002d3e:	4770      	bx	lr
		return m_Size;
 8002d40:	8800      	ldrh	r0, [r0, #0]
 8002d42:	4770      	bx	lr

08002d44 <_ZN13CACDisplayDmd7ExecuteEv>:
{
 8002d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d48:	b08d      	sub	sp, #52	; 0x34
 8002d4a:	4604      	mov	r4, r0
	if (!m_timeout.HasElapsed()) return;
 8002d4c:	1d05      	adds	r5, r0, #4
 8002d4e:	4628      	mov	r0, r5
 8002d50:	f000 fc3a 	bl	80035c8 <_ZN8CTimeout10HasElapsedEv>
 8002d54:	b910      	cbnz	r0, 8002d5c <_ZN13CACDisplayDmd7ExecuteEv+0x18>
}
 8002d56:	b00d      	add	sp, #52	; 0x34
 8002d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	m_timeout.Reset();
 8002d5c:	4628      	mov	r0, r5
 8002d5e:	f000 fc24 	bl	80035aa <_ZN8CTimeout5ResetEv>
	uint16_t freq = (uint16_t)(m_pAcFreqMeter->ReadFrequency()*100.0);
 8002d62:	6960      	ldr	r0, [r4, #20]
 8002d64:	f000 fc0e 	bl	8003584 <_ZN17CACFrequencyMeter13ReadFrequencyEv>
 8002d68:	f7fd fb5e 	bl	8000428 <__aeabi_f2d>
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	4b35      	ldr	r3, [pc, #212]	; (8002e44 <_ZN13CACDisplayDmd7ExecuteEv+0x100>)
 8002d70:	f7fd fbae 	bl	80004d0 <__aeabi_dmul>
 8002d74:	f7fd fe6e 	bl	8000a54 <__aeabi_d2uiz>
 8002d78:	b280      	uxth	r0, r0
	uint16_t freqHigh = freq / 100;
 8002d7a:	4e33      	ldr	r6, [pc, #204]	; (8002e48 <_ZN13CACDisplayDmd7ExecuteEv+0x104>)
 8002d7c:	fba6 3200 	umull	r3, r2, r6, r0
 8002d80:	0952      	lsrs	r2, r2, #5
	uint16_t freqLow = freq % 100;
 8002d82:	2764      	movs	r7, #100	; 0x64
 8002d84:	fb07 0312 	mls	r3, r7, r2, r0
	memset(freqDisplay,0,sizeof(freqDisplay));
 8002d88:	2500      	movs	r5, #0
 8002d8a:	9507      	str	r5, [sp, #28]
 8002d8c:	9508      	str	r5, [sp, #32]
 8002d8e:	9509      	str	r5, [sp, #36]	; 0x24
 8002d90:	950a      	str	r5, [sp, #40]	; 0x28
 8002d92:	950b      	str	r5, [sp, #44]	; 0x2c
	sprintf(freqDisplay,"%d.%dHz",freqHigh,freqLow);
 8002d94:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8002e50 <_ZN13CACDisplayDmd7ExecuteEv+0x10c>
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	4641      	mov	r1, r8
 8002d9c:	a807      	add	r0, sp, #28
 8002d9e:	f001 f97a 	bl	8004096 <siprintf>
	uint16_t acVoltage = (uint16_t)(m_pAcVoltage->ReadFiltered()*100);
 8002da2:	f8d4 9018 	ldr.w	r9, [r4, #24]
	return m_pAdc->Read();
}

inline float CAnalogInput::ReadFiltered()
{
	return m_Scale * m_adcDataBuffer.Average() + m_Offset;
 8002da6:	f8d9 a004 	ldr.w	sl, [r9, #4]
}

template<class ELEMTYPE, class SUMTYPE, uint16_t BUFFSIZE>
inline float CMovAvgBuffer<ELEMTYPE, SUMTYPE, BUFFSIZE>::Average(void) const
{
	return (float)m_Sum / (float)this->Count();
 8002daa:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
 8002dae:	f7fd ff77 	bl	8000ca0 <__aeabi_ui2f>
 8002db2:	4683      	mov	fp, r0
}

template<class ELEMTYPE, class SUMTYPE, uint16_t BUFFSIZE>
inline uint16_t CMovAvgBuffer<ELEMTYPE, SUMTYPE, BUFFSIZE>::Count(void) const
{
	return m_Buffer.Count();
 8002db4:	f109 002a 	add.w	r0, r9, #42	; 0x2a
 8002db8:	f7ff ffbe 	bl	8002d38 <_ZNK15CCircularBufferItLt20EE5CountEv>
	return (float)m_Sum / (float)this->Count();
 8002dbc:	f7fd ff70 	bl	8000ca0 <__aeabi_ui2f>
 8002dc0:	4601      	mov	r1, r0
 8002dc2:	4658      	mov	r0, fp
 8002dc4:	f7fe f878 	bl	8000eb8 <__aeabi_fdiv>
 8002dc8:	4601      	mov	r1, r0
 8002dca:	4650      	mov	r0, sl
 8002dcc:	f7fd ffc0 	bl	8000d50 <__aeabi_fmul>
 8002dd0:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8002dd4:	f7fd feb4 	bl	8000b40 <__addsf3>
 8002dd8:	491c      	ldr	r1, [pc, #112]	; (8002e4c <_ZN13CACDisplayDmd7ExecuteEv+0x108>)
 8002dda:	f7fd ffb9 	bl	8000d50 <__aeabi_fmul>
 8002dde:	f7fe f907 	bl	8000ff0 <__aeabi_f2uiz>
 8002de2:	b283      	uxth	r3, r0
	uint16_t acVoltageHigh = acVoltage / 100;
 8002de4:	fba6 1203 	umull	r1, r2, r6, r3
 8002de8:	0952      	lsrs	r2, r2, #5
	uint16_t acVoltageLow = acVoltage % 100;
 8002dea:	fb07 3312 	mls	r3, r7, r2, r3
	memset(acVoltageDisplay,0,sizeof(acVoltageDisplay));
 8002dee:	9502      	str	r5, [sp, #8]
 8002df0:	9503      	str	r5, [sp, #12]
 8002df2:	9504      	str	r5, [sp, #16]
 8002df4:	9505      	str	r5, [sp, #20]
 8002df6:	9506      	str	r5, [sp, #24]
	sprintf(acVoltageDisplay,"%d.%dHz",acVoltageHigh,acVoltageLow);
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	4641      	mov	r1, r8
 8002dfc:	a802      	add	r0, sp, #8
 8002dfe:	f001 f94a 	bl	8004096 <siprintf>
	m_pDmd->ClearScreen(1);
 8002e02:	2101      	movs	r1, #1
 8002e04:	69e0      	ldr	r0, [r4, #28]
 8002e06:	f7ff fc15 	bl	8002634 <_ZN3DMD11ClearScreenEh>
	m_pDmd->DrawString(0,0,freqDisplay,strlen(freqDisplay),1);
 8002e0a:	69e7      	ldr	r7, [r4, #28]
 8002e0c:	a807      	add	r0, sp, #28
 8002e0e:	f7fd f99f 	bl	8000150 <strlen>
 8002e12:	b2c0      	uxtb	r0, r0
 8002e14:	2601      	movs	r6, #1
 8002e16:	9601      	str	r6, [sp, #4]
 8002e18:	9000      	str	r0, [sp, #0]
 8002e1a:	ab07      	add	r3, sp, #28
 8002e1c:	462a      	mov	r2, r5
 8002e1e:	4629      	mov	r1, r5
 8002e20:	4638      	mov	r0, r7
 8002e22:	f7ff ff0d 	bl	8002c40 <_ZN3DMD10DrawStringEssPKchh>
	m_pDmd->DrawString(0,15,acVoltageDisplay,strlen(acVoltageDisplay),1);
 8002e26:	69e4      	ldr	r4, [r4, #28]
 8002e28:	a802      	add	r0, sp, #8
 8002e2a:	f7fd f991 	bl	8000150 <strlen>
 8002e2e:	b2c0      	uxtb	r0, r0
 8002e30:	9601      	str	r6, [sp, #4]
 8002e32:	9000      	str	r0, [sp, #0]
 8002e34:	ab02      	add	r3, sp, #8
 8002e36:	220f      	movs	r2, #15
 8002e38:	4629      	mov	r1, r5
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	f7ff ff00 	bl	8002c40 <_ZN3DMD10DrawStringEssPKchh>
 8002e40:	e789      	b.n	8002d56 <_ZN13CACDisplayDmd7ExecuteEv+0x12>
 8002e42:	bf00      	nop
 8002e44:	40590000 	.word	0x40590000
 8002e48:	51eb851f 	.word	0x51eb851f
 8002e4c:	42c80000 	.word	0x42c80000
 8002e50:	0800665c 	.word	0x0800665c

08002e54 <_ZN13CACDisplayDmdD1Ev>:

CACDisplayDmd::~CACDisplayDmd()
 8002e54:	b510      	push	{r4, lr}
 8002e56:	4604      	mov	r4, r0
 8002e58:	4b03      	ldr	r3, [pc, #12]	; (8002e68 <_ZN13CACDisplayDmdD1Ev+0x14>)
 8002e5a:	f840 3b04 	str.w	r3, [r0], #4
 8002e5e:	f000 fb9b 	bl	8003598 <_ZN8CTimeoutD1Ev>
{
	// TODO Auto-generated destructor stub
}
 8002e62:	4620      	mov	r0, r4
 8002e64:	bd10      	pop	{r4, pc}
 8002e66:	bf00      	nop
 8002e68:	0800666c 	.word	0x0800666c

08002e6c <_ZN13CACDisplayDmdD0Ev>:
CACDisplayDmd::~CACDisplayDmd()
 8002e6c:	b510      	push	{r4, lr}
 8002e6e:	4604      	mov	r4, r0
}
 8002e70:	f7ff fff0 	bl	8002e54 <_ZN13CACDisplayDmdD1Ev>
 8002e74:	4620      	mov	r0, r4
 8002e76:	f001 f925 	bl	80040c4 <_ZdlPv>
 8002e7a:	4620      	mov	r0, r4
 8002e7c:	bd10      	pop	{r4, pc}

08002e7e <_ZN10CHeartBeat4InitEP5IGpioP6ITimert>:
 */

#include <HeartBeat.h>

void CHeartBeat::Init(IGpio *pIo,ITimer *pTimer,uint16_t period)
{
 8002e7e:	b538      	push	{r3, r4, r5, lr}
 8002e80:	461d      	mov	r5, r3
	m_pIo=pIo;
 8002e82:	6141      	str	r1, [r0, #20]
	m_timer.Init(pTimer);
 8002e84:	1d04      	adds	r4, r0, #4
 8002e86:	4611      	mov	r1, r2
 8002e88:	4620      	mov	r0, r4
 8002e8a:	f000 fb8c 	bl	80035a6 <_ZN8CTimeout4InitEP6ITimer>
	m_timer.SetExpiry(period);
 8002e8e:	4629      	mov	r1, r5
 8002e90:	4620      	mov	r0, r4
 8002e92:	f000 fb94 	bl	80035be <_ZN8CTimeout9SetExpiryEt>
 8002e96:	bd38      	pop	{r3, r4, r5, pc}

08002e98 <_ZN10CHeartBeat7ExecuteEv>:
}

void CHeartBeat::Execute()
{
 8002e98:	b538      	push	{r3, r4, r5, lr}
 8002e9a:	4604      	mov	r4, r0
	if(!m_timer.HasElapsed())
 8002e9c:	1d05      	adds	r5, r0, #4
 8002e9e:	4628      	mov	r0, r5
 8002ea0:	f000 fb92 	bl	80035c8 <_ZN8CTimeout10HasElapsedEv>
 8002ea4:	b900      	cbnz	r0, 8002ea8 <_ZN10CHeartBeat7ExecuteEv+0x10>
 8002ea6:	bd38      	pop	{r3, r4, r5, pc}
		return;
	m_timer.Reset();
 8002ea8:	4628      	mov	r0, r5
 8002eaa:	f000 fb7e 	bl	80035aa <_ZN8CTimeout5ResetEv>
	m_pIo->Toggle();
 8002eae:	6964      	ldr	r4, [r4, #20]
	virtual void Set() = 0;
	virtual void Clear() = 0;
	virtual bool Get() const = 0;
	void Toggle()
	{
		if (Get()) Clear();
 8002eb0:	6823      	ldr	r3, [r4, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	4620      	mov	r0, r4
 8002eb6:	4798      	blx	r3
 8002eb8:	b920      	cbnz	r0, 8002ec4 <_ZN10CHeartBeat7ExecuteEv+0x2c>
		else Set();
 8002eba:	6823      	ldr	r3, [r4, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	4798      	blx	r3
 8002ec2:	e7f0      	b.n	8002ea6 <_ZN10CHeartBeat7ExecuteEv+0xe>
		if (Get()) Clear();
 8002ec4:	6823      	ldr	r3, [r4, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	4620      	mov	r0, r4
 8002eca:	4798      	blx	r3
 8002ecc:	bd38      	pop	{r3, r4, r5, pc}
	...

08002ed0 <_ZN10CHeartBeatC1Ev>:

}

CHeartBeat::CHeartBeat()
 8002ed0:	b510      	push	{r4, lr}
 8002ed2:	4604      	mov	r4, r0
 8002ed4:	4b03      	ldr	r3, [pc, #12]	; (8002ee4 <_ZN10CHeartBeatC1Ev+0x14>)
 8002ed6:	f840 3b04 	str.w	r3, [r0], #4
 8002eda:	f000 fb89 	bl	80035f0 <_ZN8CTimeoutC1Ev>
{
	// TODO Auto-generated constructor stub

}
 8002ede:	4620      	mov	r0, r4
 8002ee0:	bd10      	pop	{r4, pc}
 8002ee2:	bf00      	nop
 8002ee4:	0800667c 	.word	0x0800667c

08002ee8 <_ZN10CHeartBeatD1Ev>:

CHeartBeat::~CHeartBeat()
 8002ee8:	b510      	push	{r4, lr}
 8002eea:	4604      	mov	r4, r0
 8002eec:	4b03      	ldr	r3, [pc, #12]	; (8002efc <_ZN10CHeartBeatD1Ev+0x14>)
 8002eee:	f840 3b04 	str.w	r3, [r0], #4
 8002ef2:	f000 fb51 	bl	8003598 <_ZN8CTimeoutD1Ev>
{
	// TODO Auto-generated destructor stub
}
 8002ef6:	4620      	mov	r0, r4
 8002ef8:	bd10      	pop	{r4, pc}
 8002efa:	bf00      	nop
 8002efc:	0800667c 	.word	0x0800667c

08002f00 <_ZN10CHeartBeatD0Ev>:
CHeartBeat::~CHeartBeat()
 8002f00:	b510      	push	{r4, lr}
 8002f02:	4604      	mov	r4, r0
}
 8002f04:	f7ff fff0 	bl	8002ee8 <_ZN10CHeartBeatD1Ev>
 8002f08:	4620      	mov	r0, r4
 8002f0a:	f001 f8db 	bl	80040c4 <_ZdlPv>
 8002f0e:	4620      	mov	r0, r4
 8002f10:	bd10      	pop	{r4, pc}

08002f12 <_ZN15CCircularBufferItLt20EE5ClearEv>:
}

template<class ELEMTYPE, uint16_t BUFFSIZE>
void CCircularBuffer<ELEMTYPE,BUFFSIZE>::Clear(void)
{
	m_IsFull = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	7083      	strb	r3, [r0, #2]
	m_Head = 0;
 8002f16:	8583      	strh	r3, [r0, #44]	; 0x2c
 8002f18:	4770      	bx	lr

08002f1a <_ZN13CMovAvgBufferIttLt20EE5ClearEv>:
void CMovAvgBuffer<ELEMTYPE, SUMTYPE, BUFFSIZE>::Clear(void)
 8002f1a:	b510      	push	{r4, lr}
 8002f1c:	4604      	mov	r4, r0
	m_Buffer.Clear();
 8002f1e:	3006      	adds	r0, #6
 8002f20:	f7ff fff7 	bl	8002f12 <_ZN15CCircularBufferItLt20EE5ClearEv>
	m_Average = 0.0;
 8002f24:	2300      	movs	r3, #0
 8002f26:	6023      	str	r3, [r4, #0]
	m_Sum = 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	80a3      	strh	r3, [r4, #4]
 8002f2c:	bd10      	pop	{r4, pc}

08002f2e <_ZN13CMovAvgBufferIttLt20EEC1Ev>:
CMovAvgBuffer<ELEMTYPE, SUMTYPE, BUFFSIZE>::CMovAvgBuffer(void)
 8002f2e:	b510      	push	{r4, lr}
 8002f30:	4604      	mov	r4, r0
		m_Size(BUFFSIZE)
 8002f32:	2314      	movs	r3, #20
 8002f34:	80c3      	strh	r3, [r0, #6]
		m_IsFull = 0;
 8002f36:	2300      	movs	r3, #0
 8002f38:	7203      	strb	r3, [r0, #8]
		m_Head = 0;
 8002f3a:	8643      	strh	r3, [r0, #50]	; 0x32
		this->Clear();
 8002f3c:	3006      	adds	r0, #6
 8002f3e:	f7ff ffe8 	bl	8002f12 <_ZN15CCircularBufferItLt20EE5ClearEv>
	this->Clear();
 8002f42:	4620      	mov	r0, r4
 8002f44:	f7ff ffe9 	bl	8002f1a <_ZN13CMovAvgBufferIttLt20EE5ClearEv>
}
 8002f48:	4620      	mov	r0, r4
 8002f4a:	bd10      	pop	{r4, pc}

08002f4c <_Z41__static_initialization_and_destruction_0ii>:
 *      Author: Formulatrix
 */

#include <Device.h>

SDevice Dev;
 8002f4c:	2801      	cmp	r0, #1
 8002f4e:	d000      	beq.n	8002f52 <_Z41__static_initialization_and_destruction_0ii+0x6>
 8002f50:	4770      	bx	lr
 8002f52:	b538      	push	{r3, r4, r5, lr}
 8002f54:	4604      	mov	r4, r0
 8002f56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f5a:	4299      	cmp	r1, r3
 8002f5c:	d000      	beq.n	8002f60 <_Z41__static_initialization_and_destruction_0ii+0x14>
 8002f5e:	bd38      	pop	{r3, r4, r5, pc}
#include <ACFrequencyMeter.h>
#include <AnalogInput.h>
#include <ACDisplayDmd.h>
#include <Communication/SerialPort.h>

class SDevice
 8002f60:	4d15      	ldr	r5, [pc, #84]	; (8002fb8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002f62:	4628      	mov	r0, r5
 8002f64:	f7ff ffb4 	bl	8002ed0 <_ZN10CHeartBeatC1Ev>
 8002f68:	3518      	adds	r5, #24
 8002f6a:	2c00      	cmp	r4, #0
 8002f6c:	db14      	blt.n	8002f98 <_Z41__static_initialization_and_destruction_0ii+0x4c>
inline CAnalogInput::CAnalogInput()
 8002f6e:	4628      	mov	r0, r5
 8002f70:	4b12      	ldr	r3, [pc, #72]	; (8002fbc <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002f72:	f840 3b0c 	str.w	r3, [r0], #12
 8002f76:	f000 fb3b 	bl	80035f0 <_ZN8CTimeoutC1Ev>
 8002f7a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002f7e:	f7ff ffd6 	bl	8002f2e <_ZN13CMovAvgBufferIttLt20EEC1Ev>
	m_pAdc = NULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	622b      	str	r3, [r5, #32]
	m_Scale = 1;
 8002f86:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f8a:	606a      	str	r2, [r5, #4]
	m_Offset = 0;
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	60aa      	str	r2, [r5, #8]
	m_pTimer = NULL;
 8002f90:	61eb      	str	r3, [r5, #28]
 8002f92:	3558      	adds	r5, #88	; 0x58
 8002f94:	3c01      	subs	r4, #1
 8002f96:	e7e8      	b.n	8002f6a <_Z41__static_initialization_and_destruction_0ii+0x1e>
 8002f98:	4c07      	ldr	r4, [pc, #28]	; (8002fb8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002f9a:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
 8002f9e:	f7ff febf 	bl	8002d20 <_ZN13CACDisplayDmdC1Ev>
 8002fa2:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8002fa6:	f7ff fab5 	bl	8002514 <_ZN11CSerialPortC1Ev>
 8002faa:	4a05      	ldr	r2, [pc, #20]	; (8002fc0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8002fac:	4905      	ldr	r1, [pc, #20]	; (8002fc4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8002fae:	4620      	mov	r0, r4
 8002fb0:	f001 f88a 	bl	80040c8 <__aeabi_atexit>
 8002fb4:	e7d3      	b.n	8002f5e <_Z41__static_initialization_and_destruction_0ii+0x12>
 8002fb6:	bf00      	nop
 8002fb8:	200006a8 	.word	0x200006a8
 8002fbc:	0800668c 	.word	0x0800668c
 8002fc0:	20000000 	.word	0x20000000
 8002fc4:	08002fd7 	.word	0x08002fd7

08002fc8 <_GLOBAL__sub_I_Dev>:
 8002fc8:	b508      	push	{r3, lr}
 8002fca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002fce:	2001      	movs	r0, #1
 8002fd0:	f7ff ffbc 	bl	8002f4c <_Z41__static_initialization_and_destruction_0ii>
 8002fd4:	bd08      	pop	{r3, pc}

08002fd6 <_ZN7SDeviceD1Ev>:
 8002fd6:	b570      	push	{r4, r5, r6, lr}
 8002fd8:	4606      	mov	r6, r0
 8002fda:	30e8      	adds	r0, #232	; 0xe8
 8002fdc:	f7ff faae 	bl	800253c <_ZN11CSerialPortD1Ev>
 8002fe0:	f106 04c8 	add.w	r4, r6, #200	; 0xc8
 8002fe4:	4620      	mov	r0, r4
 8002fe6:	f7ff ff35 	bl	8002e54 <_ZN13CACDisplayDmdD1Ev>
 8002fea:	f116 0518 	adds.w	r5, r6, #24
 8002fee:	d007      	beq.n	8003000 <_ZN7SDeviceD1Ev+0x2a>
 8002ff0:	42ac      	cmp	r4, r5
 8002ff2:	d005      	beq.n	8003000 <_ZN7SDeviceD1Ev+0x2a>
 8002ff4:	f854 3d58 	ldr.w	r3, [r4, #-88]!
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	4798      	blx	r3
 8002ffe:	e7f7      	b.n	8002ff0 <_ZN7SDeviceD1Ev+0x1a>
 8003000:	4630      	mov	r0, r6
 8003002:	f7ff ff71 	bl	8002ee8 <_ZN10CHeartBeatD1Ev>
 8003006:	4630      	mov	r0, r6
 8003008:	bd70      	pop	{r4, r5, r6, pc}
	...

0800300c <_ZN12CAnalogInputD1Ev>:
inline CAnalogInput::~CAnalogInput()
 800300c:	b510      	push	{r4, lr}
 800300e:	4604      	mov	r4, r0
 8003010:	4b03      	ldr	r3, [pc, #12]	; (8003020 <_ZN12CAnalogInputD1Ev+0x14>)
 8003012:	f840 3b0c 	str.w	r3, [r0], #12
 8003016:	f000 fabf 	bl	8003598 <_ZN8CTimeoutD1Ev>
}
 800301a:	4620      	mov	r0, r4
 800301c:	bd10      	pop	{r4, pc}
 800301e:	bf00      	nop
 8003020:	0800668c 	.word	0x0800668c

08003024 <_ZN12CAnalogInputD0Ev>:
inline CAnalogInput::~CAnalogInput()
 8003024:	b510      	push	{r4, lr}
 8003026:	4604      	mov	r4, r0
 8003028:	4b04      	ldr	r3, [pc, #16]	; (800303c <_ZN12CAnalogInputD0Ev+0x18>)
 800302a:	f840 3b0c 	str.w	r3, [r0], #12
 800302e:	f000 fab3 	bl	8003598 <_ZN8CTimeoutD1Ev>
}
 8003032:	4620      	mov	r0, r4
 8003034:	f001 f846 	bl	80040c4 <_ZdlPv>
 8003038:	4620      	mov	r0, r4
 800303a:	bd10      	pop	{r4, pc}
 800303c:	0800668c 	.word	0x0800668c

08003040 <_ZN13CSTM32F10xADC4ReadEv>:
	m_pAdcBuffer = pAdcBuffer;
}

uint16_t CSTM32F10xADC::Read()
{
	return *m_pAdcBuffer;
 8003040:	6843      	ldr	r3, [r0, #4]
}
 8003042:	8818      	ldrh	r0, [r3, #0]
 8003044:	4770      	bx	lr

08003046 <_ZN13CSTM32F10xADCD1Ev>:
}

CSTM32F10xADC::~CSTM32F10xADC()
{
	// TODO Auto-generated destructor stub
}
 8003046:	4770      	bx	lr

08003048 <_ZN13CSTM32F10xADCD0Ev>:
CSTM32F10xADC::~CSTM32F10xADC()
 8003048:	b510      	push	{r4, lr}
 800304a:	4604      	mov	r4, r0
}
 800304c:	f001 f83a 	bl	80040c4 <_ZdlPv>
 8003050:	4620      	mov	r0, r4
 8003052:	bd10      	pop	{r4, pc}

08003054 <_ZN13CSTM32F10xADC4InitEPt>:
	m_pAdcBuffer = pAdcBuffer;
 8003054:	6041      	str	r1, [r0, #4]
 8003056:	4770      	bx	lr

08003058 <_ZN13CSTM32F10xADCC1Ev>:
CSTM32F10xADC::CSTM32F10xADC()
 8003058:	4b01      	ldr	r3, [pc, #4]	; (8003060 <_ZN13CSTM32F10xADCC1Ev+0x8>)
 800305a:	6003      	str	r3, [r0, #0]
}
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	0800669c 	.word	0x0800669c

08003064 <_ZN13CSTM32F10xDMAD1Ev>:
}

CSTM32F10xDMA::~CSTM32F10xDMA()
{
	// TODO Auto-generated destructor stub
}
 8003064:	4770      	bx	lr

08003066 <_ZN13CSTM32F10xDMA12SetDirectionEm>:
{
 8003066:	b508      	push	{r3, lr}
	m_DmaStruct.DMA_DIR = direction;
 8003068:	6141      	str	r1, [r0, #20]
	DMA_Init(m_pDmaChannel, &m_DmaStruct);
 800306a:	f100 010c 	add.w	r1, r0, #12
 800306e:	6880      	ldr	r0, [r0, #8]
 8003070:	f7fe f974 	bl	800135c <DMA_Init>
 8003074:	bd08      	pop	{r3, pc}

08003076 <_ZN13CSTM32F10xDMA10SetAddressEmm>:
{
 8003076:	b508      	push	{r3, lr}
	m_DmaStruct.DMA_PeripheralBaseAddr = per;
 8003078:	60c1      	str	r1, [r0, #12]
	m_DmaStruct.DMA_MemoryBaseAddr = mem;
 800307a:	6102      	str	r2, [r0, #16]
	DMA_Init(m_pDmaChannel, &m_DmaStruct);
 800307c:	f100 010c 	add.w	r1, r0, #12
 8003080:	6880      	ldr	r0, [r0, #8]
 8003082:	f7fe f96b 	bl	800135c <DMA_Init>
 8003086:	bd08      	pop	{r3, pc}

08003088 <_ZN13CSTM32F10xDMA13SetBufferSizeEt>:
{
 8003088:	b508      	push	{r3, lr}
	m_DmaStruct.DMA_BufferSize = size;
 800308a:	6181      	str	r1, [r0, #24]
	DMA_Init(m_pDmaChannel, &m_DmaStruct);
 800308c:	f100 010c 	add.w	r1, r0, #12
 8003090:	6880      	ldr	r0, [r0, #8]
 8003092:	f7fe f963 	bl	800135c <DMA_Init>
 8003096:	bd08      	pop	{r3, pc}

08003098 <_ZN13CSTM32F10xDMA5StartEv>:
{
 8003098:	b508      	push	{r3, lr}
	DMA_Cmd(m_pDmaChannel,ENABLE);
 800309a:	2101      	movs	r1, #1
 800309c:	6880      	ldr	r0, [r0, #8]
 800309e:	f7fe f9c5 	bl	800142c <DMA_Cmd>
 80030a2:	bd08      	pop	{r3, pc}

080030a4 <_ZN13CSTM32F10xDMA4StopEv>:
{
 80030a4:	b508      	push	{r3, lr}
	DMA_Cmd(m_pDmaChannel,DISABLE);
 80030a6:	2100      	movs	r1, #0
 80030a8:	6880      	ldr	r0, [r0, #8]
 80030aa:	f7fe f9bf 	bl	800142c <DMA_Cmd>
 80030ae:	bd08      	pop	{r3, pc}

080030b0 <_ZN13CSTM32F10xDMA12GetDataIndexEv>:
{
 80030b0:	b510      	push	{r4, lr}
	return m_DmaStruct.DMA_BufferSize - DMA_GetCurrDataCounter(m_pDmaChannel);
 80030b2:	8b04      	ldrh	r4, [r0, #24]
 80030b4:	6880      	ldr	r0, [r0, #8]
 80030b6:	f7fe f9d5 	bl	8001464 <DMA_GetCurrDataCounter>
 80030ba:	1a20      	subs	r0, r4, r0
}
 80030bc:	b280      	uxth	r0, r0
 80030be:	bd10      	pop	{r4, pc}

080030c0 <_ZN13CSTM32F10xDMA18IsTransferFinishedEv>:
{
 80030c0:	b510      	push	{r4, lr}
 80030c2:	4604      	mov	r4, r0
	if(DMA_GetFlagStatus(m_DmaTCflagMask))
 80030c4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80030c6:	f7fe f9d9 	bl	800147c <DMA_GetFlagStatus>
 80030ca:	b908      	cbnz	r0, 80030d0 <_ZN13CSTM32F10xDMA18IsTransferFinishedEv+0x10>
	return false;
 80030cc:	2000      	movs	r0, #0
}
 80030ce:	bd10      	pop	{r4, pc}
		DMA_ClearFlag(m_DmaTCflagMask);
 80030d0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80030d2:	f7fe f9fb 	bl	80014cc <DMA_ClearFlag>
		return true;
 80030d6:	2001      	movs	r0, #1
 80030d8:	bd10      	pop	{r4, pc}

080030da <_ZN13CSTM32F10xDMAD0Ev>:
CSTM32F10xDMA::~CSTM32F10xDMA()
 80030da:	b510      	push	{r4, lr}
 80030dc:	4604      	mov	r4, r0
}
 80030de:	f000 fff1 	bl	80040c4 <_ZdlPv>
 80030e2:	4620      	mov	r0, r4
 80030e4:	bd10      	pop	{r4, pc}
	...

080030e8 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm>:
{
 80030e8:	b510      	push	{r4, lr}
 80030ea:	4604      	mov	r4, r0
	m_pDma = dma;
 80030ec:	6041      	str	r1, [r0, #4]
	m_pDmaChannel = pDmaChannel;
 80030ee:	6082      	str	r2, [r0, #8]
	m_DmaStruct.DMA_Mode = mode;
 80030f0:	62c3      	str	r3, [r0, #44]	; 0x2c
	m_DmaStruct.DMA_Priority = priority;
 80030f2:	9b02      	ldr	r3, [sp, #8]
 80030f4:	6303      	str	r3, [r0, #48]	; 0x30
	m_DmaStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80030f6:	2300      	movs	r3, #0
 80030f8:	6283      	str	r3, [r0, #40]	; 0x28
	m_DmaStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80030fa:	6243      	str	r3, [r0, #36]	; 0x24
	m_DmaStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80030fc:	2380      	movs	r3, #128	; 0x80
 80030fe:	6203      	str	r3, [r0, #32]
	DMA_Init(m_pDmaChannel, &m_DmaStruct);
 8003100:	f100 010c 	add.w	r1, r0, #12
 8003104:	4610      	mov	r0, r2
 8003106:	f7fe f929 	bl	800135c <DMA_Init>
	if(m_pDmaChannel ==  DMA1_Channel1)m_DmaTCflagMask = DMA1_IT_TC1;
 800310a:	68a3      	ldr	r3, [r4, #8]
 800310c:	4a26      	ldr	r2, [pc, #152]	; (80031a8 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xc0>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d021      	beq.n	8003156 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x6e>
	else if(m_pDmaChannel ==  DMA1_Channel2)m_DmaTCflagMask = DMA1_IT_TC2;
 8003112:	4a26      	ldr	r2, [pc, #152]	; (80031ac <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xc4>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d021      	beq.n	800315c <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x74>
	else if(m_pDmaChannel ==  DMA1_Channel3)m_DmaTCflagMask = DMA1_IT_TC3;
 8003118:	4a25      	ldr	r2, [pc, #148]	; (80031b0 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xc8>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d021      	beq.n	8003162 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x7a>
	else if(m_pDmaChannel ==  DMA1_Channel4)m_DmaTCflagMask = DMA1_IT_TC4;
 800311e:	4a25      	ldr	r2, [pc, #148]	; (80031b4 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xcc>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d022      	beq.n	800316a <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x82>
	else if(m_pDmaChannel ==  DMA1_Channel5)m_DmaTCflagMask = DMA1_IT_TC5;
 8003124:	4a24      	ldr	r2, [pc, #144]	; (80031b8 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xd0>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d023      	beq.n	8003172 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x8a>
	else if(m_pDmaChannel ==  DMA1_Channel6)m_DmaTCflagMask = DMA1_IT_TC6;
 800312a:	4a24      	ldr	r2, [pc, #144]	; (80031bc <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xd4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d024      	beq.n	800317a <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x92>
	else if(m_pDmaChannel ==  DMA1_Channel7)m_DmaTCflagMask = DMA1_IT_TC7;
 8003130:	4a23      	ldr	r2, [pc, #140]	; (80031c0 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xd8>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d025      	beq.n	8003182 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x9a>
	else if(m_pDmaChannel ==  DMA2_Channel1)m_DmaTCflagMask = DMA2_IT_TC1;
 8003136:	4a23      	ldr	r2, [pc, #140]	; (80031c4 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xdc>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d026      	beq.n	800318a <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xa2>
	else if(m_pDmaChannel ==  DMA2_Channel2)m_DmaTCflagMask = DMA2_IT_TC2;
 800313c:	4a22      	ldr	r2, [pc, #136]	; (80031c8 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xe0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d026      	beq.n	8003190 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xa8>
	else if(m_pDmaChannel ==  DMA2_Channel3)m_DmaTCflagMask = DMA2_IT_TC3;
 8003142:	4a22      	ldr	r2, [pc, #136]	; (80031cc <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xe4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d026      	beq.n	8003196 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xae>
	else if(m_pDmaChannel ==  DMA2_Channel4)m_DmaTCflagMask = DMA2_IT_TC4;
 8003148:	4a21      	ldr	r2, [pc, #132]	; (80031d0 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xe8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d026      	beq.n	800319c <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xb4>
	else if(m_pDmaChannel ==  DMA2_Channel5)m_DmaTCflagMask = DMA2_IT_TC5;
 800314e:	4a21      	ldr	r2, [pc, #132]	; (80031d4 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xec>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d026      	beq.n	80031a2 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xba>
 8003154:	bd10      	pop	{r4, pc}
	if(m_pDmaChannel ==  DMA1_Channel1)m_DmaTCflagMask = DMA1_IT_TC1;
 8003156:	2302      	movs	r3, #2
 8003158:	63a3      	str	r3, [r4, #56]	; 0x38
 800315a:	bd10      	pop	{r4, pc}
	else if(m_pDmaChannel ==  DMA1_Channel2)m_DmaTCflagMask = DMA1_IT_TC2;
 800315c:	2320      	movs	r3, #32
 800315e:	63a3      	str	r3, [r4, #56]	; 0x38
 8003160:	bd10      	pop	{r4, pc}
	else if(m_pDmaChannel ==  DMA1_Channel3)m_DmaTCflagMask = DMA1_IT_TC3;
 8003162:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003166:	63a3      	str	r3, [r4, #56]	; 0x38
 8003168:	bd10      	pop	{r4, pc}
	else if(m_pDmaChannel ==  DMA1_Channel4)m_DmaTCflagMask = DMA1_IT_TC4;
 800316a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800316e:	63a3      	str	r3, [r4, #56]	; 0x38
 8003170:	bd10      	pop	{r4, pc}
	else if(m_pDmaChannel ==  DMA1_Channel5)m_DmaTCflagMask = DMA1_IT_TC5;
 8003172:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003176:	63a3      	str	r3, [r4, #56]	; 0x38
 8003178:	bd10      	pop	{r4, pc}
	else if(m_pDmaChannel ==  DMA1_Channel6)m_DmaTCflagMask = DMA1_IT_TC6;
 800317a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800317e:	63a3      	str	r3, [r4, #56]	; 0x38
 8003180:	bd10      	pop	{r4, pc}
	else if(m_pDmaChannel ==  DMA1_Channel7)m_DmaTCflagMask = DMA1_IT_TC7;
 8003182:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003186:	63a3      	str	r3, [r4, #56]	; 0x38
 8003188:	bd10      	pop	{r4, pc}
	else if(m_pDmaChannel ==  DMA2_Channel1)m_DmaTCflagMask = DMA2_IT_TC1;
 800318a:	4b13      	ldr	r3, [pc, #76]	; (80031d8 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xf0>)
 800318c:	63a3      	str	r3, [r4, #56]	; 0x38
 800318e:	bd10      	pop	{r4, pc}
	else if(m_pDmaChannel ==  DMA2_Channel2)m_DmaTCflagMask = DMA2_IT_TC2;
 8003190:	4b12      	ldr	r3, [pc, #72]	; (80031dc <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xf4>)
 8003192:	63a3      	str	r3, [r4, #56]	; 0x38
 8003194:	bd10      	pop	{r4, pc}
	else if(m_pDmaChannel ==  DMA2_Channel3)m_DmaTCflagMask = DMA2_IT_TC3;
 8003196:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xf8>)
 8003198:	63a3      	str	r3, [r4, #56]	; 0x38
 800319a:	bd10      	pop	{r4, pc}
	else if(m_pDmaChannel ==  DMA2_Channel4)m_DmaTCflagMask = DMA2_IT_TC4;
 800319c:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xfc>)
 800319e:	63a3      	str	r3, [r4, #56]	; 0x38
 80031a0:	bd10      	pop	{r4, pc}
	else if(m_pDmaChannel ==  DMA2_Channel5)m_DmaTCflagMask = DMA2_IT_TC5;
 80031a2:	4b11      	ldr	r3, [pc, #68]	; (80031e8 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x100>)
 80031a4:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80031a6:	e7d5      	b.n	8003154 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x6c>
 80031a8:	40020008 	.word	0x40020008
 80031ac:	4002001c 	.word	0x4002001c
 80031b0:	40020030 	.word	0x40020030
 80031b4:	40020044 	.word	0x40020044
 80031b8:	40020058 	.word	0x40020058
 80031bc:	4002006c 	.word	0x4002006c
 80031c0:	40020080 	.word	0x40020080
 80031c4:	40020408 	.word	0x40020408
 80031c8:	4002041c 	.word	0x4002041c
 80031cc:	40020430 	.word	0x40020430
 80031d0:	40020444 	.word	0x40020444
 80031d4:	40020458 	.word	0x40020458
 80031d8:	10000002 	.word	0x10000002
 80031dc:	10000020 	.word	0x10000020
 80031e0:	10000200 	.word	0x10000200
 80031e4:	10002000 	.word	0x10002000
 80031e8:	10020000 	.word	0x10020000

080031ec <_ZN13CSTM32F10xDMAC1Ev>:
CSTM32F10xDMA::CSTM32F10xDMA()
 80031ec:	b510      	push	{r4, lr}
 80031ee:	4604      	mov	r4, r0
 80031f0:	4b04      	ldr	r3, [pc, #16]	; (8003204 <_ZN13CSTM32F10xDMAC1Ev+0x18>)
 80031f2:	f840 3b0c 	str.w	r3, [r0], #12
	DMA_StructInit(&m_DmaStruct);
 80031f6:	f7fe f8ef 	bl	80013d8 <DMA_StructInit>
	m_pDma = NULL;
 80031fa:	2300      	movs	r3, #0
 80031fc:	6063      	str	r3, [r4, #4]
}
 80031fe:	4620      	mov	r0, r4
 8003200:	bd10      	pop	{r4, pc}
 8003202:	bf00      	nop
 8003204:	080066b0 	.word	0x080066b0

08003208 <_ZN14CSTM32F10xGpio3SetEv>:

#include <STM32F10xGpio.h>

void CSTM32F10xGpio::Set()
{
	m_pGpio->BSRR |= m_bitMask;
 8003208:	6842      	ldr	r2, [r0, #4]
 800320a:	6913      	ldr	r3, [r2, #16]
 800320c:	6881      	ldr	r1, [r0, #8]
 800320e:	430b      	orrs	r3, r1
 8003210:	6113      	str	r3, [r2, #16]
 8003212:	4770      	bx	lr

08003214 <_ZN14CSTM32F10xGpio5ClearEv>:
}

void CSTM32F10xGpio::Clear()
{
	m_pGpio->BSRR |= m_clearBitMask;
 8003214:	6842      	ldr	r2, [r0, #4]
 8003216:	6913      	ldr	r3, [r2, #16]
 8003218:	68c1      	ldr	r1, [r0, #12]
 800321a:	430b      	orrs	r3, r1
 800321c:	6113      	str	r3, [r2, #16]
 800321e:	4770      	bx	lr

08003220 <_ZNK14CSTM32F10xGpio3GetEv>:
}

bool CSTM32F10xGpio::Get() const
{
	return m_pGpio->IDR & m_bitMask;
 8003220:	6843      	ldr	r3, [r0, #4]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	6883      	ldr	r3, [r0, #8]
 8003226:	421a      	tst	r2, r3
}
 8003228:	bf14      	ite	ne
 800322a:	2001      	movne	r0, #1
 800322c:	2000      	moveq	r0, #0
 800322e:	4770      	bx	lr

08003230 <_ZN14CSTM32F10xGpioD1Ev>:
}

CSTM32F10xGpio::~CSTM32F10xGpio()
{
	// TODO Auto-generated destructor stub
}
 8003230:	4770      	bx	lr

08003232 <_ZN14CSTM32F10xGpioD0Ev>:
CSTM32F10xGpio::~CSTM32F10xGpio()
 8003232:	b510      	push	{r4, lr}
 8003234:	4604      	mov	r4, r0
}
 8003236:	f000 ff45 	bl	80040c4 <_ZdlPv>
 800323a:	4620      	mov	r0, r4
 800323c:	bd10      	pop	{r4, pc}

0800323e <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh>:
	if (pinNumber > 15) return;
 800323e:	2a0f      	cmp	r2, #15
 8003240:	dc08      	bgt.n	8003254 <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh+0x16>
	m_pGpio = pGpio;
 8003242:	6041      	str	r1, [r0, #4]
	m_bitMask = 1 << pinNumber;
 8003244:	2301      	movs	r3, #1
 8003246:	fa03 f102 	lsl.w	r1, r3, r2
 800324a:	6081      	str	r1, [r0, #8]
	m_clearBitMask = 1 << (pinNumber + 16);
 800324c:	3210      	adds	r2, #16
 800324e:	fa03 f202 	lsl.w	r2, r3, r2
 8003252:	60c2      	str	r2, [r0, #12]
 8003254:	4770      	bx	lr
	...

08003258 <_ZN14CSTM32F10xGpioC1Ev>:
CSTM32F10xGpio::CSTM32F10xGpio()
 8003258:	4a02      	ldr	r2, [pc, #8]	; (8003264 <_ZN14CSTM32F10xGpioC1Ev+0xc>)
 800325a:	6002      	str	r2, [r0, #0]
	m_pGpio = NULL;
 800325c:	2200      	movs	r2, #0
 800325e:	6042      	str	r2, [r0, #4]
	m_bitMask = 0;
 8003260:	6082      	str	r2, [r0, #8]
}
 8003262:	4770      	bx	lr
 8003264:	080066dc 	.word	0x080066dc

08003268 <_ZN22CSTM32F10xInputCaptureD1Ev>:
}

CSTM32F10xInputCapture::~CSTM32F10xInputCapture()
{
	// TODO Auto-generated destructor stub
}
 8003268:	4770      	bx	lr

0800326a <_ZNK22CSTM32F10xInputCapture4ReadEv>:
{
 800326a:	b508      	push	{r3, lr}
	switch (m_Channel)
 800326c:	8903      	ldrh	r3, [r0, #8]
 800326e:	2b0c      	cmp	r3, #12
 8003270:	d818      	bhi.n	80032a4 <_ZNK22CSTM32F10xInputCapture4ReadEv+0x3a>
 8003272:	e8df f003 	tbb	[pc, r3]
 8003276:	1707      	.short	0x1707
 8003278:	170b1717 	.word	0x170b1717
 800327c:	170f1717 	.word	0x170f1717
 8003280:	1717      	.short	0x1717
 8003282:	13          	.byte	0x13
 8003283:	00          	.byte	0x00
			return TIM_GetCapture1(m_pTim);
 8003284:	6840      	ldr	r0, [r0, #4]
 8003286:	f7fe fd6b 	bl	8001d60 <TIM_GetCapture1>
 800328a:	bd08      	pop	{r3, pc}
			return TIM_GetCapture2(m_pTim);
 800328c:	6840      	ldr	r0, [r0, #4]
 800328e:	f7fe fd73 	bl	8001d78 <TIM_GetCapture2>
 8003292:	bd08      	pop	{r3, pc}
			return TIM_GetCapture3(m_pTim);
 8003294:	6840      	ldr	r0, [r0, #4]
 8003296:	f7fe fd7b 	bl	8001d90 <TIM_GetCapture3>
 800329a:	bd08      	pop	{r3, pc}
			return TIM_GetCapture4(m_pTim);
 800329c:	6840      	ldr	r0, [r0, #4]
 800329e:	f7fe fd83 	bl	8001da8 <TIM_GetCapture4>
 80032a2:	bd08      	pop	{r3, pc}
	return false;
 80032a4:	2000      	movs	r0, #0
}
 80032a6:	bd08      	pop	{r3, pc}

080032a8 <_ZNK22CSTM32F10xInputCapture11IsTriggeredEv>:
{
 80032a8:	b508      	push	{r3, lr}
	switch (m_Channel)
 80032aa:	8903      	ldrh	r3, [r0, #8]
 80032ac:	2b0c      	cmp	r3, #12
 80032ae:	d828      	bhi.n	8003302 <_ZNK22CSTM32F10xInputCapture11IsTriggeredEv+0x5a>
 80032b0:	e8df f003 	tbb	[pc, r3]
 80032b4:	27272707 	.word	0x27272707
 80032b8:	2727270f 	.word	0x2727270f
 80032bc:	27272717 	.word	0x27272717
 80032c0:	1f          	.byte	0x1f
 80032c1:	00          	.byte	0x00
			return TIM_GetFlagStatus(m_pTim, TIM_FLAG_CC1);
 80032c2:	2102      	movs	r1, #2
 80032c4:	6840      	ldr	r0, [r0, #4]
 80032c6:	f7fe fd7c 	bl	8001dc2 <TIM_GetFlagStatus>
 80032ca:	3000      	adds	r0, #0
 80032cc:	bf18      	it	ne
 80032ce:	2001      	movne	r0, #1
 80032d0:	bd08      	pop	{r3, pc}
			return TIM_GetFlagStatus(m_pTim, TIM_FLAG_CC2);
 80032d2:	2104      	movs	r1, #4
 80032d4:	6840      	ldr	r0, [r0, #4]
 80032d6:	f7fe fd74 	bl	8001dc2 <TIM_GetFlagStatus>
 80032da:	3000      	adds	r0, #0
 80032dc:	bf18      	it	ne
 80032de:	2001      	movne	r0, #1
 80032e0:	bd08      	pop	{r3, pc}
			return TIM_GetFlagStatus(m_pTim, TIM_FLAG_CC3);
 80032e2:	2108      	movs	r1, #8
 80032e4:	6840      	ldr	r0, [r0, #4]
 80032e6:	f7fe fd6c 	bl	8001dc2 <TIM_GetFlagStatus>
 80032ea:	3000      	adds	r0, #0
 80032ec:	bf18      	it	ne
 80032ee:	2001      	movne	r0, #1
 80032f0:	bd08      	pop	{r3, pc}
			return TIM_GetFlagStatus(m_pTim, TIM_FLAG_CC4);
 80032f2:	2110      	movs	r1, #16
 80032f4:	6840      	ldr	r0, [r0, #4]
 80032f6:	f7fe fd64 	bl	8001dc2 <TIM_GetFlagStatus>
 80032fa:	3000      	adds	r0, #0
 80032fc:	bf18      	it	ne
 80032fe:	2001      	movne	r0, #1
 8003300:	bd08      	pop	{r3, pc}
	return false;
 8003302:	2000      	movs	r0, #0
}
 8003304:	bd08      	pop	{r3, pc}

08003306 <_ZN22CSTM32F10xInputCaptureD0Ev>:
CSTM32F10xInputCapture::~CSTM32F10xInputCapture()
 8003306:	b510      	push	{r4, lr}
 8003308:	4604      	mov	r4, r0
}
 800330a:	f000 fedb 	bl	80040c4 <_ZdlPv>
 800330e:	4620      	mov	r0, r4
 8003310:	bd10      	pop	{r4, pc}

08003312 <_ZN22CSTM32F10xInputCapture4InitEP11TIM_TypeDeft>:
	m_pTim = pTim;
 8003312:	6041      	str	r1, [r0, #4]
	m_Channel = channel;
 8003314:	8102      	strh	r2, [r0, #8]
 8003316:	4770      	bx	lr

08003318 <_ZN22CSTM32F10xInputCaptureC1Ev>:
CSTM32F10xInputCapture::CSTM32F10xInputCapture()
 8003318:	4b01      	ldr	r3, [pc, #4]	; (8003320 <_ZN22CSTM32F10xInputCaptureC1Ev+0x8>)
 800331a:	6003      	str	r3, [r0, #0]
}
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	080066f8 	.word	0x080066f8

08003324 <_ZNK15CSTM32F10xTimer12CurrentTicksEv>:
	m_pTimer=pTimer;
}

uint16_t CSTM32F10xTimer::CurrentTicks() const
{
	return m_pTimer->CNT;
 8003324:	6843      	ldr	r3, [r0, #4]
 8003326:	8c98      	ldrh	r0, [r3, #36]	; 0x24
}
 8003328:	b280      	uxth	r0, r0
 800332a:	4770      	bx	lr

0800332c <_ZN15CSTM32F10xTimerD1Ev>:
}

CSTM32F10xTimer::~CSTM32F10xTimer()
{
	// TODO Auto-generated destructor stub
}
 800332c:	4770      	bx	lr

0800332e <_ZN15CSTM32F10xTimerD0Ev>:
CSTM32F10xTimer::~CSTM32F10xTimer()
 800332e:	b510      	push	{r4, lr}
 8003330:	4604      	mov	r4, r0
}
 8003332:	f000 fec7 	bl	80040c4 <_ZdlPv>
 8003336:	4620      	mov	r0, r4
 8003338:	bd10      	pop	{r4, pc}

0800333a <_ZN15CSTM32F10xTimer4InitEP11TIM_TypeDef>:
	m_pTimer=pTimer;
 800333a:	6041      	str	r1, [r0, #4]
 800333c:	4770      	bx	lr
	...

08003340 <_ZN15CSTM32F10xTimerC1Ev>:
CSTM32F10xTimer::CSTM32F10xTimer()
 8003340:	4b01      	ldr	r3, [pc, #4]	; (8003348 <_ZN15CSTM32F10xTimerC1Ev+0x8>)
 8003342:	6003      	str	r3, [r0, #0]
}
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	08006710 	.word	0x08006710

0800334c <_ZN15CSTM32F10xUSART4ReadEPhPt>:
bool CSTM32F10xUSART::Read(unsigned char* pData, uint16_t* pLength)
{
//	for(uint16_t i=0;i<)
//	pData
	return false;
}
 800334c:	2000      	movs	r0, #0
 800334e:	4770      	bx	lr

08003350 <_ZN15CSTM32F10xUSARTD1Ev>:
}

CSTM32F10xUSART::~CSTM32F10xUSART()
{
	// TODO Auto-generated destructor stub
}
 8003350:	4770      	bx	lr

08003352 <_ZN13CCircularFifoIcLj322EED1Ev>:
	{
		Capacity = Size + 1
	};

	CCircularFifo() : m_Tail(0), m_Head(0) {}
	virtual ~CCircularFifo() {}
 8003352:	4770      	bx	lr

08003354 <_ZN13CCircularFifoIcLj322EED0Ev>:
 8003354:	b510      	push	{r4, lr}
 8003356:	4604      	mov	r4, r0
 8003358:	f000 feb4 	bl	80040c4 <_ZdlPv>
 800335c:	4620      	mov	r0, r4
 800335e:	bd10      	pop	{r4, pc}

08003360 <_ZN15CSTM32F10xUSARTD0Ev>:
CSTM32F10xUSART::~CSTM32F10xUSART()
 8003360:	b510      	push	{r4, lr}
 8003362:	4604      	mov	r4, r0
}
 8003364:	f000 feae 	bl	80040c4 <_ZdlPv>
 8003368:	4620      	mov	r0, r4
 800336a:	bd10      	pop	{r4, pc}

0800336c <_ZN15CSTM32F10xUSART4InitEP13USART_TypeDefP19DMA_Channel_TypeDefPct>:
	m_pUsart = pUsart;
 800336c:	6101      	str	r1, [r0, #16]
	m_pDma = pDma;
 800336e:	60c2      	str	r2, [r0, #12]
	m_pRxDataBuffer = pRxDataBuffer;
 8003370:	6043      	str	r3, [r0, #4]
	m_sizeOfBuffer = sizeOfBuffer;
 8003372:	f8bd 3000 	ldrh.w	r3, [sp]
 8003376:	8103      	strh	r3, [r0, #8]
 8003378:	4770      	bx	lr
	...

0800337c <_ZN15CSTM32F10xUSARTC1Ev>:
CSTM32F10xUSART::CSTM32F10xUSART()
 800337c:	4a07      	ldr	r2, [pc, #28]	; (800339c <_ZN15CSTM32F10xUSARTC1Ev+0x20>)
 800337e:	6002      	str	r2, [r0, #0]
	CCircularFifo() : m_Tail(0), m_Head(0) {}
 8003380:	4907      	ldr	r1, [pc, #28]	; (80033a0 <_ZN15CSTM32F10xUSARTC1Ev+0x24>)
 8003382:	6141      	str	r1, [r0, #20]
 8003384:	2200      	movs	r2, #0
 8003386:	6182      	str	r2, [r0, #24]
 8003388:	f8c0 2160 	str.w	r2, [r0, #352]	; 0x160
 800338c:	f8c0 1164 	str.w	r1, [r0, #356]	; 0x164
 8003390:	f8c0 2168 	str.w	r2, [r0, #360]	; 0x168
 8003394:	f8c0 22b0 	str.w	r2, [r0, #688]	; 0x2b0
	m_bufferIndex = 0;
 8003398:	8142      	strh	r2, [r0, #10]
}
 800339a:	4770      	bx	lr
 800339c:	08006734 	.word	0x08006734
 80033a0:	08006724 	.word	0x08006724

080033a4 <_ZNK13CCircularFifoIcLj322EE7IsEmptyEv>:
 *
 * \return true if circular buffer is empty */
template<typename Element, unsigned int Size>
bool CCircularFifo<Element, Size>::IsEmpty() const
{
	return (m_Head == m_Tail);
 80033a4:	f8d0 214c 	ldr.w	r2, [r0, #332]	; 0x14c
 80033a8:	6840      	ldr	r0, [r0, #4]
}
 80033aa:	4282      	cmp	r2, r0
 80033ac:	bf14      	ite	ne
 80033ae:	2000      	movne	r0, #0
 80033b0:	2001      	moveq	r0, #1
 80033b2:	4770      	bx	lr

080033b4 <_ZN15CSTM32F10xUSART7HasDataEv>:
{
 80033b4:	b508      	push	{r3, lr}
	return !m_RxBuffer.IsEmpty();
 80033b6:	f500 70b2 	add.w	r0, r0, #356	; 0x164
 80033ba:	f7ff fff3 	bl	80033a4 <_ZNK13CCircularFifoIcLj322EE7IsEmptyEv>
 80033be:	f080 0001 	eor.w	r0, r0, #1
}
 80033c2:	b2c0      	uxtb	r0, r0
 80033c4:	bd08      	pop	{r3, pc}
	...

080033c8 <_ZNK13CCircularFifoIcLj322EE9incrementEj>:
	//    index++;
	//    if(index == array.lenght) -> index = 0;
	//
	//or as written below:
	//    index = (index+1) % array.length
	idx_ = (idx_ + 1) % Capacity;
 80033c8:	3101      	adds	r1, #1
 80033ca:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <_ZNK13CCircularFifoIcLj322EE9incrementEj+0x1c>)
 80033cc:	fba3 2301 	umull	r2, r3, r3, r1
 80033d0:	1ac8      	subs	r0, r1, r3
 80033d2:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 80033d6:	0a1b      	lsrs	r3, r3, #8
	return idx_;
}
 80033d8:	f240 1043 	movw	r0, #323	; 0x143
 80033dc:	fb00 1013 	mls	r0, r0, r3, r1
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	95cbb0bf 	.word	0x95cbb0bf

080033e8 <_ZN13CCircularFifoIcLj322EE4PushERc>:
bool CCircularFifo<Element, Size>::Push(Element& item_)
 80033e8:	b538      	push	{r3, r4, r5, lr}
 80033ea:	4604      	mov	r4, r0
 80033ec:	460d      	mov	r5, r1
	unsigned int nextTail = increment(m_Tail);
 80033ee:	6841      	ldr	r1, [r0, #4]
 80033f0:	f7ff ffea 	bl	80033c8 <_ZNK13CCircularFifoIcLj322EE9incrementEj>
	if (nextTail != m_Head)
 80033f4:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
 80033f8:	4298      	cmp	r0, r3
 80033fa:	d006      	beq.n	800340a <_ZN13CCircularFifoIcLj322EE4PushERc+0x22>
		m_Array[m_Tail] = item_;
 80033fc:	6863      	ldr	r3, [r4, #4]
 80033fe:	782a      	ldrb	r2, [r5, #0]
 8003400:	4423      	add	r3, r4
 8003402:	721a      	strb	r2, [r3, #8]
		m_Tail = nextTail;
 8003404:	6060      	str	r0, [r4, #4]
		return true;
 8003406:	2001      	movs	r0, #1
 8003408:	bd38      	pop	{r3, r4, r5, pc}
	return false;
 800340a:	2000      	movs	r0, #0
}
 800340c:	bd38      	pop	{r3, r4, r5, pc}

0800340e <_ZN15CSTM32F10xUSART5WriteEPKct>:
{
 800340e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003410:	b083      	sub	sp, #12
 8003412:	4607      	mov	r7, r0
 8003414:	4616      	mov	r6, r2
	for (i = 0; i < length; i++)
 8003416:	2400      	movs	r4, #0
 8003418:	42b4      	cmp	r4, r6
 800341a:	da0d      	bge.n	8003438 <_ZN15CSTM32F10xUSART5WriteEPKct+0x2a>
		txData = *data++;
 800341c:	1c4d      	adds	r5, r1, #1
 800341e:	780b      	ldrb	r3, [r1, #0]
 8003420:	a902      	add	r1, sp, #8
 8003422:	f801 3d01 	strb.w	r3, [r1, #-1]!
		if (!m_TxBuffer.Push(txData)) break;
 8003426:	f107 0014 	add.w	r0, r7, #20
 800342a:	f7ff ffdd 	bl	80033e8 <_ZN13CCircularFifoIcLj322EE4PushERc>
 800342e:	b118      	cbz	r0, 8003438 <_ZN15CSTM32F10xUSART5WriteEPKct+0x2a>
	for (i = 0; i < length; i++)
 8003430:	3401      	adds	r4, #1
 8003432:	b2a4      	uxth	r4, r4
		txData = *data++;
 8003434:	4629      	mov	r1, r5
	for (i = 0; i < length; i++)
 8003436:	e7ef      	b.n	8003418 <_ZN15CSTM32F10xUSART5WriteEPKct+0xa>
}
 8003438:	4620      	mov	r0, r4
 800343a:	b003      	add	sp, #12
 800343c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800343e <_ZN15CSTM32F10xUSART5WriteEPKc>:
{
 800343e:	b570      	push	{r4, r5, r6, lr}
 8003440:	b082      	sub	sp, #8
 8003442:	4606      	mov	r6, r0
 8003444:	460d      	mov	r5, r1
	uint16_t dataSend = 0;
 8003446:	2400      	movs	r4, #0
	while (*data)
 8003448:	782b      	ldrb	r3, [r5, #0]
 800344a:	b15b      	cbz	r3, 8003464 <_ZN15CSTM32F10xUSART5WriteEPKc+0x26>
		txData = *data++;
 800344c:	3501      	adds	r5, #1
 800344e:	a902      	add	r1, sp, #8
 8003450:	f801 3d01 	strb.w	r3, [r1, #-1]!
		if (m_TxBuffer.Push(txData)) dataSend++;
 8003454:	f106 0014 	add.w	r0, r6, #20
 8003458:	f7ff ffc6 	bl	80033e8 <_ZN13CCircularFifoIcLj322EE4PushERc>
 800345c:	b110      	cbz	r0, 8003464 <_ZN15CSTM32F10xUSART5WriteEPKc+0x26>
 800345e:	3401      	adds	r4, #1
 8003460:	b2a4      	uxth	r4, r4
	while (*data)
 8003462:	e7f1      	b.n	8003448 <_ZN15CSTM32F10xUSART5WriteEPKc+0xa>
}
 8003464:	4620      	mov	r0, r4
 8003466:	b002      	add	sp, #8
 8003468:	bd70      	pop	{r4, r5, r6, pc}

0800346a <_ZN15CSTM32F10xUSART9executeRxEv>:
{
 800346a:	b510      	push	{r4, lr}
 800346c:	b082      	sub	sp, #8
	if (m_bufferIndex == (m_sizeOfBuffer - m_pDma->CNDTR)) return;
 800346e:	8943      	ldrh	r3, [r0, #10]
 8003470:	8904      	ldrh	r4, [r0, #8]
 8003472:	68c2      	ldr	r2, [r0, #12]
 8003474:	6852      	ldr	r2, [r2, #4]
 8003476:	1aa2      	subs	r2, r4, r2
 8003478:	4293      	cmp	r3, r2
 800347a:	d101      	bne.n	8003480 <_ZN15CSTM32F10xUSART9executeRxEv+0x16>
}
 800347c:	b002      	add	sp, #8
 800347e:	bd10      	pop	{r4, pc}
	char data = m_pRxDataBuffer[m_bufferIndex];
 8003480:	6842      	ldr	r2, [r0, #4]
 8003482:	5cd2      	ldrb	r2, [r2, r3]
 8003484:	a902      	add	r1, sp, #8
 8003486:	f801 2d01 	strb.w	r2, [r1, #-1]!
	m_bufferIndex = (m_bufferIndex + 1) % m_sizeOfBuffer;
 800348a:	3301      	adds	r3, #1
 800348c:	fb93 f2f4 	sdiv	r2, r3, r4
 8003490:	fb04 3312 	mls	r3, r4, r2, r3
 8003494:	8143      	strh	r3, [r0, #10]
	m_RxBuffer.Push(data);
 8003496:	f500 70b2 	add.w	r0, r0, #356	; 0x164
 800349a:	f7ff ffa5 	bl	80033e8 <_ZN13CCircularFifoIcLj322EE4PushERc>
 800349e:	e7ed      	b.n	800347c <_ZN15CSTM32F10xUSART9executeRxEv+0x12>

080034a0 <_ZN13CCircularFifoIcLj322EE3PopERc>:
	if (m_Head == m_Tail) return false;  // empty queue
 80034a0:	f8d0 214c 	ldr.w	r2, [r0, #332]	; 0x14c
 80034a4:	6843      	ldr	r3, [r0, #4]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d00e      	beq.n	80034c8 <_ZN13CCircularFifoIcLj322EE3PopERc+0x28>
bool CCircularFifo<Element, Size>::Pop(Element& item_)
 80034aa:	b510      	push	{r4, lr}
 80034ac:	4604      	mov	r4, r0
	item_ = m_Array[m_Head];
 80034ae:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80034b2:	4403      	add	r3, r0
 80034b4:	7a1b      	ldrb	r3, [r3, #8]
 80034b6:	700b      	strb	r3, [r1, #0]
	m_Head = increment(m_Head);
 80034b8:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
 80034bc:	f7ff ff84 	bl	80033c8 <_ZNK13CCircularFifoIcLj322EE9incrementEj>
 80034c0:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
	return true;
 80034c4:	2001      	movs	r0, #1
 80034c6:	bd10      	pop	{r4, pc}
	if (m_Head == m_Tail) return false;  // empty queue
 80034c8:	2000      	movs	r0, #0
 80034ca:	4770      	bx	lr

080034cc <_ZN15CSTM32F10xUSART8ReadByteEv>:
{
 80034cc:	b510      	push	{r4, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	4604      	mov	r4, r0
	if (!HasData()) return 0;
 80034d2:	6803      	ldr	r3, [r0, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	4798      	blx	r3
 80034d8:	b910      	cbnz	r0, 80034e0 <_ZN15CSTM32F10xUSART8ReadByteEv+0x14>
 80034da:	2000      	movs	r0, #0
}
 80034dc:	b002      	add	sp, #8
 80034de:	bd10      	pop	{r4, pc}
	m_RxBuffer.Pop(data);
 80034e0:	f10d 0107 	add.w	r1, sp, #7
 80034e4:	f504 70b2 	add.w	r0, r4, #356	; 0x164
 80034e8:	f7ff ffda 	bl	80034a0 <_ZN13CCircularFifoIcLj322EE3PopERc>
	return data;
 80034ec:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80034f0:	e7f4      	b.n	80034dc <_ZN15CSTM32F10xUSART8ReadByteEv+0x10>

080034f2 <_ZN15CSTM32F10xUSART9executeTxEv>:
{
 80034f2:	b530      	push	{r4, r5, lr}
 80034f4:	b083      	sub	sp, #12
 80034f6:	4604      	mov	r4, r0
	if (m_TxBuffer.IsEmpty()) return;
 80034f8:	f100 0514 	add.w	r5, r0, #20
 80034fc:	4628      	mov	r0, r5
 80034fe:	f7ff ff51 	bl	80033a4 <_ZNK13CCircularFifoIcLj322EE7IsEmptyEv>
 8003502:	b108      	cbz	r0, 8003508 <_ZN15CSTM32F10xUSART9executeTxEv+0x16>
}
 8003504:	b003      	add	sp, #12
 8003506:	bd30      	pop	{r4, r5, pc}
	if (!USART_GetFlagStatus(m_pUsart, USART_FLAG_TXE)) return;
 8003508:	2180      	movs	r1, #128	; 0x80
 800350a:	6920      	ldr	r0, [r4, #16]
 800350c:	f7fe ff5d 	bl	80023ca <USART_GetFlagStatus>
 8003510:	2800      	cmp	r0, #0
 8003512:	d0f7      	beq.n	8003504 <_ZN15CSTM32F10xUSART9executeTxEv+0x12>
	m_TxBuffer.Pop(data);
 8003514:	f10d 0107 	add.w	r1, sp, #7
 8003518:	4628      	mov	r0, r5
 800351a:	f7ff ffc1 	bl	80034a0 <_ZN13CCircularFifoIcLj322EE3PopERc>
	USART_SendData(m_pUsart, data);
 800351e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8003522:	6920      	ldr	r0, [r4, #16]
 8003524:	f7fe ff40 	bl	80023a8 <USART_SendData>
 8003528:	e7ec      	b.n	8003504 <_ZN15CSTM32F10xUSART9executeTxEv+0x12>

0800352a <_ZN15CSTM32F10xUSART7ExecuteEv>:
{
 800352a:	b510      	push	{r4, lr}
 800352c:	4604      	mov	r4, r0
	executeTx();
 800352e:	f7ff ffe0 	bl	80034f2 <_ZN15CSTM32F10xUSART9executeTxEv>
	executeRx();
 8003532:	4620      	mov	r0, r4
 8003534:	f7ff ff99 	bl	800346a <_ZN15CSTM32F10xUSART9executeRxEv>
 8003538:	bd10      	pop	{r4, pc}

0800353a <_ZN17CACFrequencyMeterD1Ev>:
}

CACFrequencyMeter::~CACFrequencyMeter()
{
	// TODO Auto-generated destructor stub
}
 800353a:	4770      	bx	lr

0800353c <_ZN17CACFrequencyMeterD0Ev>:
CACFrequencyMeter::~CACFrequencyMeter()
 800353c:	b510      	push	{r4, lr}
 800353e:	4604      	mov	r4, r0
}
 8003540:	f000 fdc0 	bl	80040c4 <_ZdlPv>
 8003544:	4620      	mov	r0, r4
 8003546:	bd10      	pop	{r4, pc}

08003548 <_ZN17CACFrequencyMeter4InitEP13IInputCapture>:
	m_pIc = pIc;
 8003548:	6041      	str	r1, [r0, #4]
 800354a:	4770      	bx	lr

0800354c <_ZN17CACFrequencyMeter7ExecuteEv>:
{
 800354c:	b538      	push	{r3, r4, r5, lr}
 800354e:	4604      	mov	r4, r0
	if (!m_pIc->IsTriggered()) return;
 8003550:	6840      	ldr	r0, [r0, #4]
 8003552:	6803      	ldr	r3, [r0, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4798      	blx	r3
 8003558:	b900      	cbnz	r0, 800355c <_ZN17CACFrequencyMeter7ExecuteEv+0x10>
 800355a:	bd38      	pop	{r3, r4, r5, pc}
	m_CurrentTimeStamp = m_pIc->Read();
 800355c:	6860      	ldr	r0, [r4, #4]
 800355e:	6803      	ldr	r3, [r0, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	4798      	blx	r3
 8003564:	4605      	mov	r5, r0
 8003566:	8160      	strh	r0, [r4, #10]
	m_Freq = 1000.0f / (uint16_t)(m_CurrentTimeStamp - m_PrevTimeStamp);
 8003568:	8920      	ldrh	r0, [r4, #8]
 800356a:	1a28      	subs	r0, r5, r0
 800356c:	b280      	uxth	r0, r0
 800356e:	f7fd fb9b 	bl	8000ca8 <__aeabi_i2f>
 8003572:	4601      	mov	r1, r0
 8003574:	4802      	ldr	r0, [pc, #8]	; (8003580 <_ZN17CACFrequencyMeter7ExecuteEv+0x34>)
 8003576:	f7fd fc9f 	bl	8000eb8 <__aeabi_fdiv>
 800357a:	60e0      	str	r0, [r4, #12]
	m_PrevTimeStamp = m_CurrentTimeStamp;
 800357c:	8125      	strh	r5, [r4, #8]
 800357e:	e7ec      	b.n	800355a <_ZN17CACFrequencyMeter7ExecuteEv+0xe>
 8003580:	447a0000 	.word	0x447a0000

08003584 <_ZN17CACFrequencyMeter13ReadFrequencyEv>:
}
 8003584:	68c0      	ldr	r0, [r0, #12]
 8003586:	4770      	bx	lr

08003588 <_ZN17CACFrequencyMeterC1Ev>:
CACFrequencyMeter::CACFrequencyMeter()
 8003588:	4a02      	ldr	r2, [pc, #8]	; (8003594 <_ZN17CACFrequencyMeterC1Ev+0xc>)
 800358a:	6002      	str	r2, [r0, #0]
	m_Freq = 0;
 800358c:	2200      	movs	r2, #0
 800358e:	60c2      	str	r2, [r0, #12]
}
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	08006758 	.word	0x08006758

08003598 <_ZN8CTimeoutD1Ev>:
}

CTimeout::~CTimeout()
{
	// TODO Auto-generated destructor stub
}
 8003598:	4770      	bx	lr

0800359a <_ZN8CTimeoutD0Ev>:
CTimeout::~CTimeout()
 800359a:	b510      	push	{r4, lr}
 800359c:	4604      	mov	r4, r0
}
 800359e:	f000 fd91 	bl	80040c4 <_ZdlPv>
 80035a2:	4620      	mov	r0, r4
 80035a4:	bd10      	pop	{r4, pc}

080035a6 <_ZN8CTimeout4InitEP6ITimer>:
	m_timer = pTimer;
 80035a6:	6041      	str	r1, [r0, #4]
 80035a8:	4770      	bx	lr

080035aa <_ZN8CTimeout5ResetEv>:
{
 80035aa:	b510      	push	{r4, lr}
 80035ac:	4604      	mov	r4, r0
	m_prevTimer = m_timer->CurrentTicks();
 80035ae:	6840      	ldr	r0, [r0, #4]
 80035b0:	6803      	ldr	r3, [r0, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4798      	blx	r3
 80035b6:	8160      	strh	r0, [r4, #10]
	m_hasElapsed = false;
 80035b8:	2300      	movs	r3, #0
 80035ba:	7323      	strb	r3, [r4, #12]
 80035bc:	bd10      	pop	{r4, pc}

080035be <_ZN8CTimeout9SetExpiryEt>:
{
 80035be:	b508      	push	{r3, lr}
	m_expiry = tick;
 80035c0:	8101      	strh	r1, [r0, #8]
	Reset();
 80035c2:	f7ff fff2 	bl	80035aa <_ZN8CTimeout5ResetEv>
 80035c6:	bd08      	pop	{r3, pc}

080035c8 <_ZN8CTimeout10HasElapsedEv>:
{
 80035c8:	b510      	push	{r4, lr}
 80035ca:	4604      	mov	r4, r0
	if (!m_hasElapsed)
 80035cc:	7b03      	ldrb	r3, [r0, #12]
 80035ce:	b10b      	cbz	r3, 80035d4 <_ZN8CTimeout10HasElapsedEv+0xc>
}
 80035d0:	7b20      	ldrb	r0, [r4, #12]
 80035d2:	bd10      	pop	{r4, pc}
		if ((uint16_t)(m_timer->CurrentTicks() - m_prevTimer) >= m_expiry) m_hasElapsed = true;
 80035d4:	6840      	ldr	r0, [r0, #4]
 80035d6:	6803      	ldr	r3, [r0, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4798      	blx	r3
 80035dc:	8963      	ldrh	r3, [r4, #10]
 80035de:	1ac0      	subs	r0, r0, r3
 80035e0:	b280      	uxth	r0, r0
 80035e2:	8923      	ldrh	r3, [r4, #8]
 80035e4:	4298      	cmp	r0, r3
 80035e6:	dbf3      	blt.n	80035d0 <_ZN8CTimeout10HasElapsedEv+0x8>
 80035e8:	2301      	movs	r3, #1
 80035ea:	7323      	strb	r3, [r4, #12]
 80035ec:	e7f0      	b.n	80035d0 <_ZN8CTimeout10HasElapsedEv+0x8>
	...

080035f0 <_ZN8CTimeoutC1Ev>:
CTimeout::CTimeout()
 80035f0:	4b01      	ldr	r3, [pc, #4]	; (80035f8 <_ZN8CTimeoutC1Ev+0x8>)
 80035f2:	6003      	str	r3, [r0, #0]
}
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	08006768 	.word	0x08006768

080035fc <_ZZ4mainENUlPcS_E_4_FUNES_S_>:
	Dev.AcDisplay.Init(&ACFrequencyMeter, &Dev.AnalogInput[0], &Dmd, &MainTimer);

	// initialize our communcation opcode!
	Dev.SerialPort.Init(&Uart, &MainTimer);

	auto getAppName = [](char *rx,char *tx)
 80035fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035fe:	460e      	mov	r6, r1
	{
		strcat(tx,"AC POWER METER INDO-WARE\n");
 8003600:	4608      	mov	r0, r1
 8003602:	f7fc fda5 	bl	8000150 <strlen>
 8003606:	4607      	mov	r7, r0
 8003608:	1835      	adds	r5, r6, r0
 800360a:	4c06      	ldr	r4, [pc, #24]	; (8003624 <_ZZ4mainENUlPcS_E_4_FUNES_S_+0x28>)
 800360c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800360e:	51f0      	str	r0, [r6, r7]
 8003610:	6069      	str	r1, [r5, #4]
 8003612:	60aa      	str	r2, [r5, #8]
 8003614:	60eb      	str	r3, [r5, #12]
 8003616:	cc03      	ldmia	r4!, {r0, r1}
 8003618:	6128      	str	r0, [r5, #16]
 800361a:	6169      	str	r1, [r5, #20]
 800361c:	8823      	ldrh	r3, [r4, #0]
 800361e:	832b      	strh	r3, [r5, #24]
 8003620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003622:	bf00      	nop
 8003624:	08006c20 	.word	0x08006c20

08003628 <_ZZ4mainENUlPcS_E0_4_FUNES_S_>:
	};

	auto setAnalogInputParams = [](char *rx,char *tx)
 8003628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800362a:	b083      	sub	sp, #12
 800362c:	460e      	mov	r6, r1
	{
		const char DELIMITER[2] = ",";
 800362e:	ad02      	add	r5, sp, #8
 8003630:	232c      	movs	r3, #44	; 0x2c
 8003632:	f825 3d04 	strh.w	r3, [r5, #-4]!
		char *token;
		// fetch string data
			token = strtok(rx, DELIMITER);
 8003636:	4629      	mov	r1, r5
 8003638:	f001 fdf8 	bl	800522c <strtok>
			uint16_t id = atoi(token);
 800363c:	f000 fd4d 	bl	80040da <atoi>
 8003640:	4604      	mov	r4, r0
			token = strtok(NULL, DELIMITER);
 8003642:	4629      	mov	r1, r5
 8003644:	2000      	movs	r0, #0
 8003646:	f001 fdf1 	bl	800522c <strtok>
			float scale = atof(token);
 800364a:	f000 fd43 	bl	80040d4 <atof>
 800364e:	f7fd fa21 	bl	8000a94 <__aeabi_d2f>
 8003652:	4607      	mov	r7, r0
			token = strtok(NULL, DELIMITER);
 8003654:	4629      	mov	r1, r5
 8003656:	2000      	movs	r0, #0
 8003658:	f001 fde8 	bl	800522c <strtok>
			float offset = atof(token);
 800365c:	f000 fd3a 	bl	80040d4 <atof>
 8003660:	f7fd fa18 	bl	8000a94 <__aeabi_d2f>
 8003664:	b2a4      	uxth	r4, r4
	m_Scale = scale;
 8003666:	2258      	movs	r2, #88	; 0x58
 8003668:	4b04      	ldr	r3, [pc, #16]	; (800367c <_ZZ4mainENUlPcS_E0_4_FUNES_S_+0x54>)
 800366a:	fb02 3304 	mla	r3, r2, r4, r3
 800366e:	61df      	str	r7, [r3, #28]
	m_Offset = offset;
 8003670:	6218      	str	r0, [r3, #32]

			Dev.AnalogInput[id].SetConfig(scale,offset);

			// no returned data
			*tx=0;
 8003672:	2300      	movs	r3, #0
 8003674:	7033      	strb	r3, [r6, #0]
		};
 8003676:	b003      	add	sp, #12
 8003678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800367a:	bf00      	nop
 800367c:	200006a8 	.word	0x200006a8

08003680 <_ZNK15CCircularBufferItLt20EE3GetEt>:
	if(index > m_Size)
 8003680:	8803      	ldrh	r3, [r0, #0]
 8003682:	4299      	cmp	r1, r3
 8003684:	dc11      	bgt.n	80036aa <_ZNK15CCircularBufferItLt20EE3GetEt+0x2a>
ELEMTYPE CCircularBuffer<ELEMTYPE,BUFFSIZE>::Get(uint16_t index) const
 8003686:	b410      	push	{r4}
	if(!m_IsFull && (index >= m_Head))
 8003688:	7884      	ldrb	r4, [r0, #2]
 800368a:	b914      	cbnz	r4, 8003692 <_ZNK15CCircularBufferItLt20EE3GetEt+0x12>
 800368c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800368e:	4291      	cmp	r1, r2
 8003690:	da0d      	bge.n	80036ae <_ZNK15CCircularBufferItLt20EE3GetEt+0x2e>
	return m_Array[(m_Head * m_IsFull + index) % m_Size];
 8003692:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8003694:	fb04 1102 	mla	r1, r4, r2, r1
 8003698:	fb91 f2f3 	sdiv	r2, r1, r3
 800369c:	fb03 1112 	mls	r1, r3, r2, r1
 80036a0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80036a4:	8880      	ldrh	r0, [r0, #4]
}
 80036a6:	bc10      	pop	{r4}
 80036a8:	4770      	bx	lr
		return NULL;
 80036aa:	2000      	movs	r0, #0
 80036ac:	4770      	bx	lr
		return NULL;
 80036ae:	2000      	movs	r0, #0
 80036b0:	e7f9      	b.n	80036a6 <_ZNK15CCircularBufferItLt20EE3GetEt+0x26>

080036b2 <_ZN15CCircularBufferItLt20EE3AddEt>:
	m_Array[m_Head] = value;
 80036b2:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 80036b4:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 80036b8:	8091      	strh	r1, [r2, #4]
	m_Head = (m_Head + 1) % m_Size;
 80036ba:	1c5a      	adds	r2, r3, #1
 80036bc:	8801      	ldrh	r1, [r0, #0]
 80036be:	fb92 f3f1 	sdiv	r3, r2, r1
 80036c2:	fb01 2313 	mls	r3, r1, r3, r2
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	8583      	strh	r3, [r0, #44]	; 0x2c
	if(m_Head == 0)
 80036ca:	b90b      	cbnz	r3, 80036d0 <_ZN15CCircularBufferItLt20EE3AddEt+0x1e>
		m_IsFull = 1;
 80036cc:	2301      	movs	r3, #1
 80036ce:	7083      	strb	r3, [r0, #2]
 80036d0:	4770      	bx	lr

080036d2 <_ZNK15CCircularBufferItLt20EE6IsFullEv>:
}
 80036d2:	7880      	ldrb	r0, [r0, #2]
 80036d4:	4770      	bx	lr

080036d6 <_ZN13CMovAvgBufferIttLt20EE9AddSampleEt>:
void CMovAvgBuffer<ELEMTYPE, SUMTYPE, BUFFSIZE>::AddSample(ELEMTYPE sample)
 80036d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d8:	4606      	mov	r6, r0
 80036da:	460f      	mov	r7, r1
}

template<class ELEMTYPE, class SUMTYPE, uint16_t BUFFSIZE>
inline bool CMovAvgBuffer<ELEMTYPE, SUMTYPE, BUFFSIZE>::IsFull(void) const
{
	return m_Buffer.IsFull();
 80036dc:	1d85      	adds	r5, r0, #6
 80036de:	4628      	mov	r0, r5
 80036e0:	f7ff fff7 	bl	80036d2 <_ZNK15CCircularBufferItLt20EE6IsFullEv>
	if(this->IsFull())
 80036e4:	b1a8      	cbz	r0, 8003712 <_ZN13CMovAvgBufferIttLt20EE9AddSampleEt+0x3c>
		firstSample = (SUMTYPE) m_Buffer.Get(0);
 80036e6:	2100      	movs	r1, #0
 80036e8:	4628      	mov	r0, r5
 80036ea:	f7ff ffc9 	bl	8003680 <_ZNK15CCircularBufferItLt20EE3GetEt>
 80036ee:	4604      	mov	r4, r0
	m_Buffer.Add(sample);
 80036f0:	4639      	mov	r1, r7
 80036f2:	4628      	mov	r0, r5
 80036f4:	f7ff ffdd 	bl	80036b2 <_ZN15CCircularBufferItLt20EE3AddEt>
	return m_Buffer.Count();
 80036f8:	4628      	mov	r0, r5
 80036fa:	f7ff fb1d 	bl	8002d38 <_ZNK15CCircularBufferItLt20EE5CountEv>
	m_Sum += (SUMTYPE)m_Buffer.Get(this->Count()-1) - firstSample;
 80036fe:	1e41      	subs	r1, r0, #1
 8003700:	b289      	uxth	r1, r1
 8003702:	4628      	mov	r0, r5
 8003704:	f7ff ffbc 	bl	8003680 <_ZNK15CCircularBufferItLt20EE3GetEt>
 8003708:	1b00      	subs	r0, r0, r4
 800370a:	88b4      	ldrh	r4, [r6, #4]
 800370c:	4420      	add	r0, r4
 800370e:	80b0      	strh	r0, [r6, #4]
 8003710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	SUMTYPE firstSample = 0;
 8003712:	2400      	movs	r4, #0
 8003714:	e7ec      	b.n	80036f0 <_ZN13CMovAvgBufferIttLt20EE9AddSampleEt+0x1a>
	...

08003718 <main>:
{
 8003718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800371c:	f2ad 6dd4 	subw	sp, sp, #1748	; 0x6d4
	SystemInit();
 8003720:	f000 fb20 	bl	8003d64 <SystemInit>
	RCC_ADCCLKConfig(RCC_PCLK2_Div8);
 8003724:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8003728:	f7fd ffba 	bl	80016a0 <RCC_ADCCLKConfig>
	RCC_APB1PeriphClockCmd(apb1Enable, ENABLE);
 800372c:	2101      	movs	r1, #1
 800372e:	4877      	ldr	r0, [pc, #476]	; (800390c <main+0x1f4>)
 8003730:	f7fe f8be 	bl	80018b0 <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(apb2Enable, ENABLE);
 8003734:	2101      	movs	r1, #1
 8003736:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800373a:	f7fe f89b 	bl	8001874 <RCC_APB2PeriphClockCmd>
	RCC_AHBPeriphClockCmd(ahbEnable, ENABLE);
 800373e:	2101      	movs	r1, #1
 8003740:	4608      	mov	r0, r1
 8003742:	f7fe f879 	bl	8001838 <RCC_AHBPeriphClockCmd>
	TIM_TimeBaseStructInit(&timer);
 8003746:	f20d 60c4 	addw	r0, sp, #1732	; 0x6c4
 800374a:	f7fe fa49 	bl	8001be0 <TIM_TimeBaseStructInit>
	timer.TIM_Period = 0xffff;
 800374e:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003752:	f8ad 46c8 	strh.w	r4, [sp, #1736]	; 0x6c8
	timer.TIM_Prescaler = 719; // 10us timer period!
 8003756:	f240 23cf 	movw	r3, #719	; 0x2cf
 800375a:	f8ad 36c4 	strh.w	r3, [sp, #1732]	; 0x6c4
	TIM_TimeBaseInit(TIM3, &timer);
 800375e:	4d6c      	ldr	r5, [pc, #432]	; (8003910 <main+0x1f8>)
 8003760:	f20d 61c4 	addw	r1, sp, #1732	; 0x6c4
 8003764:	4628      	mov	r0, r5
 8003766:	f7fe f96b 	bl	8001a40 <TIM_TimeBaseInit>
	TIM_Cmd(TIM3, ENABLE);
 800376a:	2101      	movs	r1, #1
 800376c:	4628      	mov	r0, r5
 800376e:	f7fe fa68 	bl	8001c42 <TIM_Cmd>
	TIM_TimeBaseStructInit(&timer);
 8003772:	f20d 60c4 	addw	r0, sp, #1732	; 0x6c4
 8003776:	f7fe fa33 	bl	8001be0 <TIM_TimeBaseStructInit>
	timer.TIM_Period = 0xffff;
 800377a:	f8ad 46c8 	strh.w	r4, [sp, #1736]	; 0x6c8
	timer.TIM_Prescaler = 7199; // 100us timer period!
 800377e:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8003782:	f8ad 36c4 	strh.w	r3, [sp, #1732]	; 0x6c4
	TIM_TimeBaseInit(TIM2, &timer);
 8003786:	f20d 61c4 	addw	r1, sp, #1732	; 0x6c4
 800378a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800378e:	f7fe f957 	bl	8001a40 <TIM_TimeBaseInit>
	TIM_Cmd(TIM2, ENABLE);
 8003792:	2101      	movs	r1, #1
 8003794:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003798:	f7fe fa53 	bl	8001c42 <TIM_Cmd>
	sGpio.GPIO_Pin = GPIO_Pin_13;
 800379c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037a0:	f8ad 36c0 	strh.w	r3, [sp, #1728]	; 0x6c0
	sGpio.GPIO_Speed = GPIO_Speed_2MHz;
 80037a4:	2402      	movs	r4, #2
 80037a6:	f88d 46c2 	strb.w	r4, [sp, #1730]	; 0x6c2
	sGpio.GPIO_Mode = GPIO_Mode_Out_OD;
 80037aa:	2314      	movs	r3, #20
 80037ac:	f88d 36c3 	strb.w	r3, [sp, #1731]	; 0x6c3
	GPIO_Init(GPIOC, &sGpio); // pc13
 80037b0:	f505 3586 	add.w	r5, r5, #68608	; 0x10c00
 80037b4:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
 80037b8:	4628      	mov	r0, r5
 80037ba:	f7fd fea1 	bl	8001500 <GPIO_Init>
	CSTM32F10xTimer MainTimer;
 80037be:	f50d 60d7 	add.w	r0, sp, #1720	; 0x6b8
 80037c2:	f7ff fdbd 	bl	8003340 <_ZN15CSTM32F10xTimerC1Ev>
	MainTimer.Init(TIM2);
 80037c6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80037ca:	f50d 60d7 	add.w	r0, sp, #1720	; 0x6b8
 80037ce:	f7ff fdb4 	bl	800333a <_ZN15CSTM32F10xTimer4InitEP11TIM_TypeDef>
	CSTM32F10xGpio GpioHeartBeat;
 80037d2:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
 80037d6:	f7ff fd3f 	bl	8003258 <_ZN14CSTM32F10xGpioC1Ev>
	GpioHeartBeat.Init(GPIOC, 13);
 80037da:	220d      	movs	r2, #13
 80037dc:	4629      	mov	r1, r5
 80037de:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
 80037e2:	f7ff fd2c 	bl	800323e <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh>
	Dev.HeartBeat.Init(&GpioHeartBeat, &MainTimer, 5000);
 80037e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80037ea:	f50d 62d7 	add.w	r2, sp, #1720	; 0x6b8
 80037ee:	f50d 61d5 	add.w	r1, sp, #1704	; 0x6a8
 80037f2:	4848      	ldr	r0, [pc, #288]	; (8003914 <main+0x1fc>)
 80037f4:	f7ff fb43 	bl	8002e7e <_ZN10CHeartBeat4InitEP5IGpioP6ITimert>
	sGpio.GPIO_Pin = GPIO_Pin_11; // rx3
 80037f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80037fc:	f8ad 36c0 	strh.w	r3, [sp, #1728]	; 0x6c0
	sGpio.GPIO_Speed = GPIO_Speed_2MHz;
 8003800:	f88d 46c2 	strb.w	r4, [sp, #1730]	; 0x6c2
	sGpio.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8003804:	2304      	movs	r3, #4
 8003806:	f88d 36c3 	strb.w	r3, [sp, #1731]	; 0x6c3
	GPIO_Init(GPIOB, &sGpio);
 800380a:	f5a5 6580 	sub.w	r5, r5, #1024	; 0x400
 800380e:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
 8003812:	4628      	mov	r0, r5
 8003814:	f7fd fe74 	bl	8001500 <GPIO_Init>
	sGpio.GPIO_Pin = GPIO_Pin_10; // tx3
 8003818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800381c:	f8ad 36c0 	strh.w	r3, [sp, #1728]	; 0x6c0
	sGpio.GPIO_Speed = GPIO_Speed_2MHz;
 8003820:	f88d 46c2 	strb.w	r4, [sp, #1730]	; 0x6c2
	sGpio.GPIO_Mode = GPIO_Mode_AF_PP;
 8003824:	2318      	movs	r3, #24
 8003826:	f88d 36c3 	strb.w	r3, [sp, #1731]	; 0x6c3
	GPIO_Init(GPIOB, &sGpio);
 800382a:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
 800382e:	4628      	mov	r0, r5
 8003830:	f7fd fe66 	bl	8001500 <GPIO_Init>
	DMA_StructInit(&dma);
 8003834:	f20d 607c 	addw	r0, sp, #1660	; 0x67c
 8003838:	f7fd fdce 	bl	80013d8 <DMA_StructInit>
	dma.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800383c:	2400      	movs	r4, #0
 800383e:	f8cd 4698 	str.w	r4, [sp, #1688]	; 0x698
	dma.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8003842:	f8cd 4694 	str.w	r4, [sp, #1684]	; 0x694
	dma.DMA_DIR = DMA_DIR_PeripheralSRC;
 8003846:	f8cd 4684 	str.w	r4, [sp, #1668]	; 0x684
	dma.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800384a:	2380      	movs	r3, #128	; 0x80
 800384c:	f8cd 3690 	str.w	r3, [sp, #1680]	; 0x690
	dma.DMA_Mode = DMA_Mode_Circular;
 8003850:	2320      	movs	r3, #32
 8003852:	f8cd 369c 	str.w	r3, [sp, #1692]	; 0x69c
	dma.DMA_BufferSize = sizeof(rxData);
 8003856:	f44f 77a1 	mov.w	r7, #322	; 0x142
 800385a:	f8cd 7688 	str.w	r7, [sp, #1672]	; 0x688
	dma.DMA_Priority = DMA_Priority_Medium;
 800385e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003862:	f8cd 36a0 	str.w	r3, [sp, #1696]	; 0x6a0
	dma.DMA_MemoryBaseAddr = (uint32_t)rxData;
 8003866:	f50d 66a7 	add.w	r6, sp, #1336	; 0x538
 800386a:	f8cd 6680 	str.w	r6, [sp, #1664]	; 0x680
	dma.DMA_PeripheralBaseAddr = (uint32_t)&USART3->DR;
 800386e:	4b2a      	ldr	r3, [pc, #168]	; (8003918 <main+0x200>)
 8003870:	f8cd 367c 	str.w	r3, [sp, #1660]	; 0x67c
	DMA_Init(DMA1_Channel3, &dma);
 8003874:	f505 4574 	add.w	r5, r5, #62464	; 0xf400
 8003878:	3530      	adds	r5, #48	; 0x30
 800387a:	f20d 617c 	addw	r1, sp, #1660	; 0x67c
 800387e:	4628      	mov	r0, r5
 8003880:	f7fd fd6c 	bl	800135c <DMA_Init>
	DMA_Cmd(DMA1_Channel3, ENABLE);
 8003884:	2101      	movs	r1, #1
 8003886:	4628      	mov	r0, r5
 8003888:	f7fd fdd0 	bl	800142c <DMA_Cmd>
	usart.USART_BaudRate = 38400;
 800388c:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8003890:	f8cd 3528 	str.w	r3, [sp, #1320]	; 0x528
	usart.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8003894:	f8ad 4534 	strh.w	r4, [sp, #1332]	; 0x534
	usart.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003898:	230c      	movs	r3, #12
 800389a:	f8ad 3532 	strh.w	r3, [sp, #1330]	; 0x532
	usart.USART_Parity = USART_Parity_No;
 800389e:	f8ad 4530 	strh.w	r4, [sp, #1328]	; 0x530
	usart.USART_StopBits = USART_StopBits_1;
 80038a2:	f8ad 452e 	strh.w	r4, [sp, #1326]	; 0x52e
	usart.USART_WordLength = USART_WordLength_8b;
 80038a6:	f8ad 452c 	strh.w	r4, [sp, #1324]	; 0x52c
	USART_Init(USART3, &usart);
 80038aa:	4c1c      	ldr	r4, [pc, #112]	; (800391c <main+0x204>)
 80038ac:	f50d 61a5 	add.w	r1, sp, #1320	; 0x528
 80038b0:	4620      	mov	r0, r4
 80038b2:	f7fe fc7d 	bl	80021b0 <USART_Init>
	USART_DMACmd(USART3, USART_DMAReq_Rx, ENABLE);
 80038b6:	2201      	movs	r2, #1
 80038b8:	2140      	movs	r1, #64	; 0x40
 80038ba:	4620      	mov	r0, r4
 80038bc:	f7fe fd51 	bl	8002362 <USART_DMACmd>
	USART_Cmd(USART3, ENABLE);
 80038c0:	2101      	movs	r1, #1
 80038c2:	4620      	mov	r0, r4
 80038c4:	f7fe fd2e 	bl	8002324 <USART_Cmd>
	CSTM32F10xUSART Uart;
 80038c8:	a89d      	add	r0, sp, #628	; 0x274
 80038ca:	f7ff fd57 	bl	800337c <_ZN15CSTM32F10xUSARTC1Ev>
	Uart.Init(USART3, DMA1_Channel3, rxData, sizeof(rxData));
 80038ce:	9700      	str	r7, [sp, #0]
 80038d0:	4633      	mov	r3, r6
 80038d2:	462a      	mov	r2, r5
 80038d4:	4621      	mov	r1, r4
 80038d6:	a89d      	add	r0, sp, #628	; 0x274
 80038d8:	f7ff fd48 	bl	800336c <_ZN15CSTM32F10xUSART4InitEP13USART_TypeDefP19DMA_Channel_TypeDefPct>
	CSTM32F10xADC Adc[2];
 80038dc:	2501      	movs	r5, #1
 80038de:	ac99      	add	r4, sp, #612	; 0x264
 80038e0:	2d00      	cmp	r5, #0
 80038e2:	db05      	blt.n	80038f0 <main+0x1d8>
 80038e4:	4620      	mov	r0, r4
 80038e6:	f7ff fbb7 	bl	8003058 <_ZN13CSTM32F10xADCC1Ev>
 80038ea:	3408      	adds	r4, #8
 80038ec:	3d01      	subs	r5, #1
 80038ee:	e7f7      	b.n	80038e0 <main+0x1c8>
 80038f0:	2400      	movs	r4, #0
	for (uint16_t i = 0; i < 2; i++)
 80038f2:	2c01      	cmp	r4, #1
 80038f4:	dc14      	bgt.n	8003920 <main+0x208>
		Adc[i].Init(&adcBuffer[i]);
 80038f6:	ab98      	add	r3, sp, #608	; 0x260
 80038f8:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 80038fc:	ab99      	add	r3, sp, #612	; 0x264
 80038fe:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
 8003902:	f7ff fba7 	bl	8003054 <_ZN13CSTM32F10xADC4InitEPt>
	for (uint16_t i = 0; i < 2; i++)
 8003906:	3401      	adds	r4, #1
 8003908:	b2a4      	uxth	r4, r4
 800390a:	e7f2      	b.n	80038f2 <main+0x1da>
 800390c:	00044003 	.word	0x00044003
 8003910:	40000400 	.word	0x40000400
 8003914:	200006a8 	.word	0x200006a8
 8003918:	40004804 	.word	0x40004804
 800391c:	40004800 	.word	0x40004800
	GPIO_StructInit(&sGpio);
 8003920:	f50d 60d8 	add.w	r0, sp, #1728	; 0x6c0
 8003924:	f7fd fea8 	bl	8001678 <GPIO_StructInit>
	sGpio.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1; // adc0 adc1
 8003928:	2703      	movs	r7, #3
 800392a:	f8ad 76c0 	strh.w	r7, [sp, #1728]	; 0x6c0
	sGpio.GPIO_Mode = GPIO_Mode_AIN;
 800392e:	2400      	movs	r4, #0
 8003930:	f88d 46c3 	strb.w	r4, [sp, #1731]	; 0x6c3
	GPIO_Init(GPIOA, &sGpio);
 8003934:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
 8003938:	48d1      	ldr	r0, [pc, #836]	; (8003c80 <main+0x568>)
 800393a:	f7fd fde1 	bl	8001500 <GPIO_Init>
	DMA_StructInit(&dma);
 800393e:	f20d 607c 	addw	r0, sp, #1660	; 0x67c
 8003942:	f7fd fd49 	bl	80013d8 <DMA_StructInit>
	dma.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8003946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800394a:	f8cd 3698 	str.w	r3, [sp, #1688]	; 0x698
	dma.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 800394e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003952:	f8cd 3694 	str.w	r3, [sp, #1684]	; 0x694
	dma.DMA_DIR = DMA_DIR_PeripheralSRC;
 8003956:	f8cd 4684 	str.w	r4, [sp, #1668]	; 0x684
	dma.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800395a:	2380      	movs	r3, #128	; 0x80
 800395c:	f8cd 3690 	str.w	r3, [sp, #1680]	; 0x690
	dma.DMA_Mode = DMA_Mode_Circular;
 8003960:	2320      	movs	r3, #32
 8003962:	f8cd 369c 	str.w	r3, [sp, #1692]	; 0x69c
	dma.DMA_BufferSize = 2;
 8003966:	2602      	movs	r6, #2
 8003968:	f8cd 6688 	str.w	r6, [sp, #1672]	; 0x688
	dma.DMA_Priority = DMA_Priority_Low;
 800396c:	f8cd 46a0 	str.w	r4, [sp, #1696]	; 0x6a0
	dma.DMA_MemoryBaseAddr = (uint32_t)adcBuffer;
 8003970:	ab98      	add	r3, sp, #608	; 0x260
 8003972:	f8cd 3680 	str.w	r3, [sp, #1664]	; 0x680
	dma.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
 8003976:	4bc3      	ldr	r3, [pc, #780]	; (8003c84 <main+0x56c>)
 8003978:	f8cd 367c 	str.w	r3, [sp, #1660]	; 0x67c
	DMA_Init(DMA1_Channel1, &dma);
 800397c:	4dc2      	ldr	r5, [pc, #776]	; (8003c88 <main+0x570>)
 800397e:	f20d 617c 	addw	r1, sp, #1660	; 0x67c
 8003982:	4628      	mov	r0, r5
 8003984:	f7fd fcea 	bl	800135c <DMA_Init>
	DMA_Cmd(DMA1_Channel1, ENABLE);
 8003988:	2101      	movs	r1, #1
 800398a:	4628      	mov	r0, r5
 800398c:	f7fd fd4e 	bl	800142c <DMA_Cmd>
	ADC_StructInit(&adc);
 8003990:	a893      	add	r0, sp, #588	; 0x24c
 8003992:	f7fd fb9f 	bl	80010d4 <ADC_StructInit>
	adc.ADC_ContinuousConvMode = ENABLE;
 8003996:	2501      	movs	r5, #1
 8003998:	f88d 5251 	strb.w	r5, [sp, #593]	; 0x251
	adc.ADC_NbrOfChannel = 2;
 800399c:	f88d 625c 	strb.w	r6, [sp, #604]	; 0x25c
	adc.ADC_ScanConvMode = ENABLE;
 80039a0:	f88d 5250 	strb.w	r5, [sp, #592]	; 0x250
	ADC_Init(ADC1, &adc);
 80039a4:	f8df 830c 	ldr.w	r8, [pc, #780]	; 8003cb4 <main+0x59c>
 80039a8:	a993      	add	r1, sp, #588	; 0x24c
 80039aa:	4640      	mov	r0, r8
 80039ac:	f7fd fb40 	bl	8001030 <ADC_Init>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_239Cycles5);
 80039b0:	2307      	movs	r3, #7
 80039b2:	462a      	mov	r2, r5
 80039b4:	4621      	mov	r1, r4
 80039b6:	4640      	mov	r0, r8
 80039b8:	f7fd fc07 	bl	80011ca <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 2, ADC_SampleTime_239Cycles5);
 80039bc:	2307      	movs	r3, #7
 80039be:	4632      	mov	r2, r6
 80039c0:	4629      	mov	r1, r5
 80039c2:	4640      	mov	r0, r8
 80039c4:	f7fd fc01 	bl	80011ca <ADC_RegularChannelConfig>
	ADC1->CR2 |= 7 << 17; // external trigger on software, NO SPL IMPLEMENTATION, WTF !!!
 80039c8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80039cc:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 80039d0:	f8c8 3008 	str.w	r3, [r8, #8]
	ADC_DMACmd(ADC1, ENABLE);
 80039d4:	4629      	mov	r1, r5
 80039d6:	4640      	mov	r0, r8
 80039d8:	f7fd fbb2 	bl	8001140 <ADC_DMACmd>
	ADC_Cmd(ADC1, ENABLE);
 80039dc:	4629      	mov	r1, r5
 80039de:	4640      	mov	r0, r8
 80039e0:	f7fd fb93 	bl	800110a <ADC_Cmd>
	ADC_SoftwareStartConvCmd(ADC1, ENABLE);
 80039e4:	4629      	mov	r1, r5
 80039e6:	4640      	mov	r0, r8
 80039e8:	f7fd fbd4 	bl	8001194 <ADC_SoftwareStartConvCmd>
	ADC_StartCalibration(ADC1);
 80039ec:	4640      	mov	r0, r8
 80039ee:	f7fd fbc2 	bl	8001176 <ADC_StartCalibration>
	GPIO_StructInit(&sGpio);
 80039f2:	f50d 60d8 	add.w	r0, sp, #1728	; 0x6c0
 80039f6:	f7fd fe3f 	bl	8001678 <GPIO_StructInit>
	sGpio.GPIO_Pin = GPIO_Pin_6; // tim3 channel 1
 80039fa:	2340      	movs	r3, #64	; 0x40
 80039fc:	f8ad 36c0 	strh.w	r3, [sp, #1728]	; 0x6c0
	sGpio.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8003a00:	2304      	movs	r3, #4
 8003a02:	f88d 36c3 	strb.w	r3, [sp, #1731]	; 0x6c3
	sGpio.GPIO_Speed = GPIO_Speed_2MHz;
 8003a06:	f88d 66c2 	strb.w	r6, [sp, #1730]	; 0x6c2
	GPIO_Init(GPIOA, &sGpio);
 8003a0a:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
 8003a0e:	489c      	ldr	r0, [pc, #624]	; (8003c80 <main+0x568>)
 8003a10:	f7fd fd76 	bl	8001500 <GPIO_Init>
	TIM_ICStructInit(&sInputCapture);
 8003a14:	a890      	add	r0, sp, #576	; 0x240
 8003a16:	f7fe f8fc 	bl	8001c12 <TIM_ICStructInit>
	sInputCapture.TIM_Channel = TIM_Channel_1;
 8003a1a:	f8ad 4240 	strh.w	r4, [sp, #576]	; 0x240
	sInputCapture.TIM_ICSelection = TIM_ICSelection_DirectTI;
 8003a1e:	f8ad 5244 	strh.w	r5, [sp, #580]	; 0x244
	sInputCapture.TIM_ICPolarity = TIM_ICPolarity_Falling;
 8003a22:	f8ad 6242 	strh.w	r6, [sp, #578]	; 0x242
	sInputCapture.TIM_ICFilter = 0x9;
 8003a26:	f04f 0309 	mov.w	r3, #9
 8003a2a:	f8ad 3248 	strh.w	r3, [sp, #584]	; 0x248
	TIM_ICInit(TIM3, &sInputCapture);
 8003a2e:	f5a8 3890 	sub.w	r8, r8, #73728	; 0x12000
 8003a32:	a990      	add	r1, sp, #576	; 0x240
 8003a34:	4640      	mov	r0, r8
 8003a36:	f7fe f87f 	bl	8001b38 <TIM_ICInit>
	CSTM32F10xInputCapture InputCapture;
 8003a3a:	a88d      	add	r0, sp, #564	; 0x234
 8003a3c:	f7ff fc6c 	bl	8003318 <_ZN22CSTM32F10xInputCaptureC1Ev>
	InputCapture.Init(TIM3, TIM_Channel_1);
 8003a40:	4622      	mov	r2, r4
 8003a42:	4641      	mov	r1, r8
 8003a44:	a88d      	add	r0, sp, #564	; 0x234
 8003a46:	f7ff fc64 	bl	8003312 <_ZN22CSTM32F10xInputCapture4InitEP11TIM_TypeDeft>
	GPIO_StructInit(&sGpio);
 8003a4a:	f50d 60d8 	add.w	r0, sp, #1728	; 0x6c0
 8003a4e:	f7fd fe13 	bl	8001678 <GPIO_StructInit>
	sGpio.GPIO_Pin = GPIO_Pin_15 | GPIO_Pin_13; // mosi2 sck2
 8003a52:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003a56:	f8ad 36c0 	strh.w	r3, [sp, #1728]	; 0x6c0
	sGpio.GPIO_Speed = GPIO_Speed_50MHz;
 8003a5a:	f88d 76c2 	strb.w	r7, [sp, #1730]	; 0x6c2
	sGpio.GPIO_Mode = GPIO_Mode_AF_PP;
 8003a5e:	f04f 0a18 	mov.w	sl, #24
 8003a62:	f88d a6c3 	strb.w	sl, [sp, #1731]	; 0x6c3
	GPIO_Init(GPIOB, &sGpio);
 8003a66:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
 8003a6a:	4888      	ldr	r0, [pc, #544]	; (8003c8c <main+0x574>)
 8003a6c:	f7fd fd48 	bl	8001500 <GPIO_Init>
	GPIO_StructInit(&sGpio);
 8003a70:	f50d 60d8 	add.w	r0, sp, #1728	; 0x6c0
 8003a74:	f7fd fe00 	bl	8001678 <GPIO_StructInit>
	sGpio.GPIO_Pin = GPIO_Pin_14 | GPIO_Pin_12;
 8003a78:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8003a7c:	f8ad 36c0 	strh.w	r3, [sp, #1728]	; 0x6c0
	sGpio.GPIO_Speed = GPIO_Speed_50MHz;
 8003a80:	f88d 76c2 	strb.w	r7, [sp, #1730]	; 0x6c2
	sGpio.GPIO_Mode = GPIO_Mode_Out_PP;
 8003a84:	f04f 0b10 	mov.w	fp, #16
 8003a88:	f88d b6c3 	strb.w	fp, [sp, #1731]	; 0x6c3
	GPIO_Init(GPIOB, &sGpio);
 8003a8c:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
 8003a90:	487e      	ldr	r0, [pc, #504]	; (8003c8c <main+0x574>)
 8003a92:	f7fd fd35 	bl	8001500 <GPIO_Init>
	CSTM32F10xGpio pOE;
 8003a96:	f50d 7909 	add.w	r9, sp, #548	; 0x224
 8003a9a:	4648      	mov	r0, r9
 8003a9c:	f7ff fbdc 	bl	8003258 <_ZN14CSTM32F10xGpioC1Ev>
	pOE.Init(GPIOB, 14);
 8003aa0:	220e      	movs	r2, #14
 8003aa2:	497a      	ldr	r1, [pc, #488]	; (8003c8c <main+0x574>)
 8003aa4:	4648      	mov	r0, r9
 8003aa6:	f7ff fbca 	bl	800323e <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh>
	CSTM32F10xGpio pSS;
 8003aaa:	f50d 7805 	add.w	r8, sp, #532	; 0x214
 8003aae:	4640      	mov	r0, r8
 8003ab0:	f7ff fbd2 	bl	8003258 <_ZN14CSTM32F10xGpioC1Ev>
	pSS.Init(GPIOB, 12);
 8003ab4:	220c      	movs	r2, #12
 8003ab6:	4975      	ldr	r1, [pc, #468]	; (8003c8c <main+0x574>)
 8003ab8:	4640      	mov	r0, r8
 8003aba:	f7ff fbc0 	bl	800323e <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh>
	GPIO_StructInit(&sGpio);
 8003abe:	f50d 60d8 	add.w	r0, sp, #1728	; 0x6c0
 8003ac2:	f7fd fdd9 	bl	8001678 <GPIO_StructInit>
	sGpio.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_8;
 8003ac6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003aca:	f8ad 36c0 	strh.w	r3, [sp, #1728]	; 0x6c0
	sGpio.GPIO_Speed = GPIO_Speed_50MHz;
 8003ace:	f88d 76c2 	strb.w	r7, [sp, #1730]	; 0x6c2
	sGpio.GPIO_Mode = GPIO_Mode_Out_PP;
 8003ad2:	f88d b6c3 	strb.w	fp, [sp, #1731]	; 0x6c3
	GPIO_Init(GPIOA, &sGpio);
 8003ad6:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
 8003ada:	4869      	ldr	r0, [pc, #420]	; (8003c80 <main+0x568>)
 8003adc:	f7fd fd10 	bl	8001500 <GPIO_Init>
	CSTM32F10xGpio pA;
 8003ae0:	af81      	add	r7, sp, #516	; 0x204
 8003ae2:	4638      	mov	r0, r7
 8003ae4:	f7ff fbb8 	bl	8003258 <_ZN14CSTM32F10xGpioC1Ev>
	pA.Init(GPIOA, 9);
 8003ae8:	2209      	movs	r2, #9
 8003aea:	4965      	ldr	r1, [pc, #404]	; (8003c80 <main+0x568>)
 8003aec:	4638      	mov	r0, r7
 8003aee:	f7ff fba6 	bl	800323e <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh>
	CSTM32F10xGpio pB;
 8003af2:	f50d 7bfa 	add.w	fp, sp, #500	; 0x1f4
 8003af6:	4658      	mov	r0, fp
 8003af8:	f7ff fbae 	bl	8003258 <_ZN14CSTM32F10xGpioC1Ev>
	pB.Init(GPIOA, 8);
 8003afc:	2208      	movs	r2, #8
 8003afe:	4960      	ldr	r1, [pc, #384]	; (8003c80 <main+0x568>)
 8003b00:	4658      	mov	r0, fp
 8003b02:	f7ff fb9c 	bl	800323e <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh>
	CSTM32F10xDMA SpiDma;
 8003b06:	a86e      	add	r0, sp, #440	; 0x1b8
 8003b08:	f7ff fb70 	bl	80031ec <_ZN13CSTM32F10xDMAC1Ev>
	SpiDma.Init(DMA1, DMA1_Channel5, DMA_Mode_Normal, DMA_Priority_VeryHigh);
 8003b0c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	4623      	mov	r3, r4
 8003b14:	4a5e      	ldr	r2, [pc, #376]	; (8003c90 <main+0x578>)
 8003b16:	495f      	ldr	r1, [pc, #380]	; (8003c94 <main+0x57c>)
 8003b18:	a86e      	add	r0, sp, #440	; 0x1b8
 8003b1a:	f7ff fae5 	bl	80030e8 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm>
	SPI_StructInit(&spiStruct);
 8003b1e:	a869      	add	r0, sp, #420	; 0x1a4
 8003b20:	f7fd ff27 	bl	8001972 <SPI_StructInit>
	spiStruct.SPI_Mode = SPI_Mode_Master;
 8003b24:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003b28:	f8ad 31a6 	strh.w	r3, [sp, #422]	; 0x1a6
	spiStruct.SPI_Direction = SPI_Direction_1Line_Tx;
 8003b2c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003b30:	f8ad 31a4 	strh.w	r3, [sp, #420]	; 0x1a4
	spiStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 8003b34:	f8ad a1b0 	strh.w	sl, [sp, #432]	; 0x1b0
	spiStruct.SPI_NSS = SPI_NSS_Soft;
 8003b38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b3c:	f8ad 31ae 	strh.w	r3, [sp, #430]	; 0x1ae
	SPI_Init(SPI2, &spiStruct);
 8003b40:	f8df a174 	ldr.w	sl, [pc, #372]	; 8003cb8 <main+0x5a0>
 8003b44:	a969      	add	r1, sp, #420	; 0x1a4
 8003b46:	4650      	mov	r0, sl
 8003b48:	f7fd fed0 	bl	80018ec <SPI_Init>
	SPI_I2S_DMACmd(SPI2, SPI_I2S_DMAReq_Tx, ENABLE);
 8003b4c:	462a      	mov	r2, r5
 8003b4e:	4631      	mov	r1, r6
 8003b50:	4650      	mov	r0, sl
 8003b52:	f7fd ff51 	bl	80019f8 <SPI_I2S_DMACmd>
	SPI_Cmd(SPI2, ENABLE);
 8003b56:	4629      	mov	r1, r5
 8003b58:	4650      	mov	r0, sl
 8003b5a:	f7fd ff2e 	bl	80019ba <SPI_Cmd>
	CACFrequencyMeter ACFrequencyMeter;
 8003b5e:	a865      	add	r0, sp, #404	; 0x194
 8003b60:	f7ff fd12 	bl	8003588 <_ZN17CACFrequencyMeterC1Ev>
	ACFrequencyMeter.Init(&InputCapture);
 8003b64:	a98d      	add	r1, sp, #564	; 0x234
 8003b66:	a865      	add	r0, sp, #404	; 0x194
 8003b68:	f7ff fcee 	bl	8003548 <_ZN17CACFrequencyMeter4InitEP13IInputCapture>
	DMD Dmd(2, 1);
 8003b6c:	462a      	mov	r2, r5
 8003b6e:	4631      	mov	r1, r6
 8003b70:	a806      	add	r0, sp, #24
 8003b72:	f7fe fd71 	bl	8002658 <_ZN3DMDC1Ehh>
	Dmd.SelectFont(Arial_14);
 8003b76:	4948      	ldr	r1, [pc, #288]	; (8003c98 <main+0x580>)
 8003b78:	a806      	add	r0, sp, #24
 8003b7a:	f7fe ff61 	bl	8002a40 <_ZN3DMD10SelectFontEPKh>
	Dmd.Init(SPI2, &SpiDma, &MainTimer, &pSS, &pA, &pB, &pOE);
 8003b7e:	230a      	movs	r3, #10
 8003b80:	9304      	str	r3, [sp, #16]
 8003b82:	f8cd 900c 	str.w	r9, [sp, #12]
 8003b86:	f8cd b008 	str.w	fp, [sp, #8]
 8003b8a:	9701      	str	r7, [sp, #4]
 8003b8c:	f8cd 8000 	str.w	r8, [sp]
 8003b90:	f50d 63d7 	add.w	r3, sp, #1720	; 0x6b8
 8003b94:	aa6e      	add	r2, sp, #440	; 0x1b8
 8003b96:	4651      	mov	r1, sl
 8003b98:	a806      	add	r0, sp, #24
 8003b9a:	f7fe fd91 	bl	80026c0 <_ZN3DMD4InitEP11SPI_TypeDefP4IDmaP6ITimerP5IGpioS7_S7_S7_t>
	for (uint16_t i = 0; i < 2; i++)
 8003b9e:	2c01      	cmp	r4, #1
 8003ba0:	dc1a      	bgt.n	8003bd8 <main+0x4c0>
		Dev.AnalogInput[i].Initialize(&Adc[i], &MainTimer);
 8003ba2:	ab99      	add	r3, sp, #612	; 0x264
 8003ba4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	m_pAdc = pAdc;
 8003ba8:	4e3c      	ldr	r6, [pc, #240]	; (8003c9c <main+0x584>)
 8003baa:	2558      	movs	r5, #88	; 0x58
 8003bac:	fb05 f504 	mul.w	r5, r5, r4
 8003bb0:	1972      	adds	r2, r6, r5
 8003bb2:	6393      	str	r3, [r2, #56]	; 0x38
	m_pTimer = pTimer;
 8003bb4:	f50d 61d7 	add.w	r1, sp, #1720	; 0x6b8
 8003bb8:	6351      	str	r1, [r2, #52]	; 0x34
	m_Timeout.Init(m_pTimer);
 8003bba:	f105 0020 	add.w	r0, r5, #32
 8003bbe:	4430      	add	r0, r6
 8003bc0:	3004      	adds	r0, #4
 8003bc2:	f7ff fcf0 	bl	80035a6 <_ZN8CTimeout4InitEP6ITimer>
	m_adcDataBuffer.Clear();
 8003bc6:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8003bca:	4430      	add	r0, r6
 8003bcc:	3004      	adds	r0, #4
 8003bce:	f7ff f9a4 	bl	8002f1a <_ZN13CMovAvgBufferIttLt20EE5ClearEv>
	for (uint16_t i = 0; i < 2; i++)
 8003bd2:	3401      	adds	r4, #1
 8003bd4:	b2a4      	uxth	r4, r4
 8003bd6:	e7e2      	b.n	8003b9e <main+0x486>
	Dev.AcDisplay.Init(&ACFrequencyMeter, &Dev.AnalogInput[0], &Dmd, &MainTimer);
 8003bd8:	4c31      	ldr	r4, [pc, #196]	; (8003ca0 <main+0x588>)
 8003bda:	f50d 65d7 	add.w	r5, sp, #1720	; 0x6b8
 8003bde:	9500      	str	r5, [sp, #0]
 8003be0:	ab06      	add	r3, sp, #24
 8003be2:	4622      	mov	r2, r4
 8003be4:	a965      	add	r1, sp, #404	; 0x194
 8003be6:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 8003bea:	f7ff f88f 	bl	8002d0c <_ZN13CACDisplayDmd4InitEP17CACFrequencyMeterP12CAnalogInputP3DMDP6ITimer>
	Dev.SerialPort.Init(&Uart, &MainTimer);
 8003bee:	34d0      	adds	r4, #208	; 0xd0
 8003bf0:	462a      	mov	r2, r5
 8003bf2:	a99d      	add	r1, sp, #628	; 0x274
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	f7fe fc03 	bl	8002400 <_ZN11CSerialPort4InitEP6IUsartP6ITimer>

	Dev.SerialPort.AddFunction(0, getAppName);
 8003bfa:	4a2a      	ldr	r2, [pc, #168]	; (8003ca4 <main+0x58c>)
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	4620      	mov	r0, r4
 8003c00:	f7fe fc0d 	bl	800241e <_ZN11CSerialPort11AddFunctionEhPFvPcS0_E>
	Dev.SerialPort.AddFunction(1, setAnalogInputParams);
 8003c04:	4a28      	ldr	r2, [pc, #160]	; (8003ca8 <main+0x590>)
 8003c06:	2101      	movs	r1, #1
 8003c08:	4620      	mov	r0, r4
 8003c0a:	f7fe fc08 	bl	800241e <_ZN11CSerialPort11AddFunctionEhPFvPcS0_E>
 8003c0e:	e02c      	b.n	8003c6a <main+0x552>
	{
		Uart.Execute();
		Dev.SerialPort.Execute();

		ACFrequencyMeter.Execute();
		for (uint16_t i = 0; i < 2; i++)
 8003c10:	3501      	adds	r5, #1
 8003c12:	b2ad      	uxth	r5, r5
 8003c14:	2d01      	cmp	r5, #1
 8003c16:	dc1d      	bgt.n	8003c54 <main+0x53c>
			Dev.AnalogInput[i].Execute();
 8003c18:	2458      	movs	r4, #88	; 0x58
 8003c1a:	fb04 f405 	mul.w	r4, r4, r5
 8003c1e:	3418      	adds	r4, #24
 8003c20:	4b1e      	ldr	r3, [pc, #120]	; (8003c9c <main+0x584>)
 8003c22:	441c      	add	r4, r3
}

inline void CAnalogInput::Execute()
{
	if (!m_pTimer) return;
 8003c24:	69e3      	ldr	r3, [r4, #28]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0f2      	beq.n	8003c10 <main+0x4f8>
	if (!m_Timeout.HasElapsed()) return;
 8003c2a:	f104 060c 	add.w	r6, r4, #12
 8003c2e:	4630      	mov	r0, r6
 8003c30:	f7ff fcca 	bl	80035c8 <_ZN8CTimeout10HasElapsedEv>
 8003c34:	2800      	cmp	r0, #0
 8003c36:	d0eb      	beq.n	8003c10 <main+0x4f8>
	m_Timeout.Reset();
 8003c38:	4630      	mov	r0, r6
 8003c3a:	f7ff fcb6 	bl	80035aa <_ZN8CTimeout5ResetEv>
	m_adcDataBuffer.AddSample(m_pAdc->Read());
 8003c3e:	f104 0624 	add.w	r6, r4, #36	; 0x24
 8003c42:	6a20      	ldr	r0, [r4, #32]
 8003c44:	6803      	ldr	r3, [r0, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4798      	blx	r3
 8003c4a:	4601      	mov	r1, r0
 8003c4c:	4630      	mov	r0, r6
 8003c4e:	f7ff fd42 	bl	80036d6 <_ZN13CMovAvgBufferIttLt20EE9AddSampleEt>
 8003c52:	e7dd      	b.n	8003c10 <main+0x4f8>

		Dev.AcDisplay.Execute();
 8003c54:	4c15      	ldr	r4, [pc, #84]	; (8003cac <main+0x594>)
 8003c56:	4620      	mov	r0, r4
 8003c58:	f7ff f874 	bl	8002d44 <_ZN13CACDisplayDmd7ExecuteEv>
		Dmd.Execute();
 8003c5c:	a806      	add	r0, sp, #24
 8003c5e:	f7fe fdfe 	bl	800285e <_ZN3DMD7ExecuteEv>

		Dev.HeartBeat.Execute();
 8003c62:	f1a4 00c8 	sub.w	r0, r4, #200	; 0xc8
 8003c66:	f7ff f917 	bl	8002e98 <_ZN10CHeartBeat7ExecuteEv>
		Uart.Execute();
 8003c6a:	a89d      	add	r0, sp, #628	; 0x274
 8003c6c:	f7ff fc5d 	bl	800352a <_ZN15CSTM32F10xUSART7ExecuteEv>
		Dev.SerialPort.Execute();
 8003c70:	480f      	ldr	r0, [pc, #60]	; (8003cb0 <main+0x598>)
 8003c72:	f7fe fbdb 	bl	800242c <_ZN11CSerialPort7ExecuteEv>
		ACFrequencyMeter.Execute();
 8003c76:	a865      	add	r0, sp, #404	; 0x194
 8003c78:	f7ff fc68 	bl	800354c <_ZN17CACFrequencyMeter7ExecuteEv>
		for (uint16_t i = 0; i < 2; i++)
 8003c7c:	2500      	movs	r5, #0
 8003c7e:	e7c9      	b.n	8003c14 <main+0x4fc>
 8003c80:	40010800 	.word	0x40010800
 8003c84:	4001244c 	.word	0x4001244c
 8003c88:	40020008 	.word	0x40020008
 8003c8c:	40010c00 	.word	0x40010c00
 8003c90:	40020058 	.word	0x40020058
 8003c94:	40020000 	.word	0x40020000
 8003c98:	08006770 	.word	0x08006770
 8003c9c:	200006a8 	.word	0x200006a8
 8003ca0:	200006c0 	.word	0x200006c0
 8003ca4:	080035fd 	.word	0x080035fd
 8003ca8:	08003629 	.word	0x08003629
 8003cac:	20000770 	.word	0x20000770
 8003cb0:	20000790 	.word	0x20000790
 8003cb4:	40012400 	.word	0x40012400
 8003cb8:	40003800 	.word	0x40003800

08003cbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003cf4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003cc0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003cc2:	e003      	b.n	8003ccc <LoopCopyDataInit>

08003cc4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003cc4:	4b0c      	ldr	r3, [pc, #48]	; (8003cf8 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8003cc6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003cc8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003cca:	3104      	adds	r1, #4

08003ccc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003ccc:	480b      	ldr	r0, [pc, #44]	; (8003cfc <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8003cce:	4b0c      	ldr	r3, [pc, #48]	; (8003d00 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8003cd0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003cd2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003cd4:	d3f6      	bcc.n	8003cc4 <CopyDataInit>
	ldr	r2, =_sbss
 8003cd6:	4a0b      	ldr	r2, [pc, #44]	; (8003d04 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8003cd8:	e002      	b.n	8003ce0 <LoopFillZerobss>

08003cda <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003cda:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003cdc:	f842 3b04 	str.w	r3, [r2], #4

08003ce0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003ce0:	4b09      	ldr	r3, [pc, #36]	; (8003d08 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8003ce2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003ce4:	d3f9      	bcc.n	8003cda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003ce6:	f000 f83d 	bl	8003d64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003cea:	f000 fa01 	bl	80040f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003cee:	f7ff fd13 	bl	8003718 <main>
	bx	lr
 8003cf2:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003cf4:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8003cf8:	08006ec4 	.word	0x08006ec4
	ldr	r0, =_sdata
 8003cfc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003d00:	2000068c 	.word	0x2000068c
	ldr	r2, =_sbss
 8003d04:	2000068c 	.word	0x2000068c
	ldr	r3, = _ebss
 8003d08:	20000a68 	.word	0x20000a68

08003d0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003d0c:	e7fe      	b.n	8003d0c <ADC1_2_IRQHandler>

08003d0e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	af00      	add	r7, sp, #0
}
 8003d12:	bf00      	nop
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bc80      	pop	{r7}
 8003d18:	4770      	bx	lr

08003d1a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8003d1e:	e7fe      	b.n	8003d1e <HardFault_Handler+0x4>

08003d20 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8003d24:	e7fe      	b.n	8003d24 <MemManage_Handler+0x4>

08003d26 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003d26:	b480      	push	{r7}
 8003d28:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8003d2a:	e7fe      	b.n	8003d2a <BusFault_Handler+0x4>

08003d2c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8003d30:	e7fe      	b.n	8003d30 <UsageFault_Handler+0x4>

08003d32 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8003d32:	b480      	push	{r7}
 8003d34:	af00      	add	r7, sp, #0
}
 8003d36:	bf00      	nop
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bc80      	pop	{r7}
 8003d3c:	4770      	bx	lr

08003d3e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	af00      	add	r7, sp, #0
}
 8003d42:	bf00      	nop
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bc80      	pop	{r7}
 8003d48:	4770      	bx	lr

08003d4a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	af00      	add	r7, sp, #0
}
 8003d4e:	bf00      	nop
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bc80      	pop	{r7}
 8003d54:	4770      	bx	lr

08003d56 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8003d56:	b480      	push	{r7}
 8003d58:	af00      	add	r7, sp, #0
}
 8003d5a:	bf00      	nop
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bc80      	pop	{r7}
 8003d60:	4770      	bx	lr
	...

08003d64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003d68:	4a15      	ldr	r2, [pc, #84]	; (8003dc0 <SystemInit+0x5c>)
 8003d6a:	4b15      	ldr	r3, [pc, #84]	; (8003dc0 <SystemInit+0x5c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f043 0301 	orr.w	r3, r3, #1
 8003d72:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8003d74:	4912      	ldr	r1, [pc, #72]	; (8003dc0 <SystemInit+0x5c>)
 8003d76:	4b12      	ldr	r3, [pc, #72]	; (8003dc0 <SystemInit+0x5c>)
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	4b12      	ldr	r3, [pc, #72]	; (8003dc4 <SystemInit+0x60>)
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003d80:	4a0f      	ldr	r2, [pc, #60]	; (8003dc0 <SystemInit+0x5c>)
 8003d82:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <SystemInit+0x5c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d8e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003d90:	4a0b      	ldr	r2, [pc, #44]	; (8003dc0 <SystemInit+0x5c>)
 8003d92:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <SystemInit+0x5c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d9a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8003d9c:	4a08      	ldr	r2, [pc, #32]	; (8003dc0 <SystemInit+0x5c>)
 8003d9e:	4b08      	ldr	r3, [pc, #32]	; (8003dc0 <SystemInit+0x5c>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003da6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8003da8:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <SystemInit+0x5c>)
 8003daa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003dae:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8003db0:	f000 f80c 	bl	8003dcc <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003db4:	4b04      	ldr	r3, [pc, #16]	; (8003dc8 <SystemInit+0x64>)
 8003db6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003dba:	609a      	str	r2, [r3, #8]
#endif 
}
 8003dbc:	bf00      	nop
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	f8ff0000 	.word	0xf8ff0000
 8003dc8:	e000ed00 	.word	0xe000ed00

08003dcc <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8003dd0:	f000 f802 	bl	8003dd8 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8003dd4:	bf00      	nop
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003dde:	2300      	movs	r3, #0
 8003de0:	607b      	str	r3, [r7, #4]
 8003de2:	2300      	movs	r3, #0
 8003de4:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003de6:	4a3a      	ldr	r2, [pc, #232]	; (8003ed0 <SetSysClockTo72+0xf8>)
 8003de8:	4b39      	ldr	r3, [pc, #228]	; (8003ed0 <SetSysClockTo72+0xf8>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003df2:	4b37      	ldr	r3, [pc, #220]	; (8003ed0 <SetSysClockTo72+0xf8>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfa:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d103      	bne.n	8003e10 <SetSysClockTo72+0x38>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003e0e:	d1f0      	bne.n	8003df2 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003e10:	4b2f      	ldr	r3, [pc, #188]	; (8003ed0 <SetSysClockTo72+0xf8>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	603b      	str	r3, [r7, #0]
 8003e20:	e001      	b.n	8003e26 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003e22:	2300      	movs	r3, #0
 8003e24:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d14b      	bne.n	8003ec4 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8003e2c:	4a29      	ldr	r2, [pc, #164]	; (8003ed4 <SetSysClockTo72+0xfc>)
 8003e2e:	4b29      	ldr	r3, [pc, #164]	; (8003ed4 <SetSysClockTo72+0xfc>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f043 0310 	orr.w	r3, r3, #16
 8003e36:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8003e38:	4a26      	ldr	r2, [pc, #152]	; (8003ed4 <SetSysClockTo72+0xfc>)
 8003e3a:	4b26      	ldr	r3, [pc, #152]	; (8003ed4 <SetSysClockTo72+0xfc>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f023 0303 	bic.w	r3, r3, #3
 8003e42:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8003e44:	4a23      	ldr	r2, [pc, #140]	; (8003ed4 <SetSysClockTo72+0xfc>)
 8003e46:	4b23      	ldr	r3, [pc, #140]	; (8003ed4 <SetSysClockTo72+0xfc>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f043 0302 	orr.w	r3, r3, #2
 8003e4e:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8003e50:	4a1f      	ldr	r2, [pc, #124]	; (8003ed0 <SetSysClockTo72+0xf8>)
 8003e52:	4b1f      	ldr	r3, [pc, #124]	; (8003ed0 <SetSysClockTo72+0xf8>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8003e58:	4a1d      	ldr	r2, [pc, #116]	; (8003ed0 <SetSysClockTo72+0xf8>)
 8003e5a:	4b1d      	ldr	r3, [pc, #116]	; (8003ed0 <SetSysClockTo72+0xf8>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8003e60:	4a1b      	ldr	r2, [pc, #108]	; (8003ed0 <SetSysClockTo72+0xf8>)
 8003e62:	4b1b      	ldr	r3, [pc, #108]	; (8003ed0 <SetSysClockTo72+0xf8>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e6a:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8003e6c:	4a18      	ldr	r2, [pc, #96]	; (8003ed0 <SetSysClockTo72+0xf8>)
 8003e6e:	4b18      	ldr	r3, [pc, #96]	; (8003ed0 <SetSysClockTo72+0xf8>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8003e76:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8003e78:	4a15      	ldr	r2, [pc, #84]	; (8003ed0 <SetSysClockTo72+0xf8>)
 8003e7a:	4b15      	ldr	r3, [pc, #84]	; (8003ed0 <SetSysClockTo72+0xf8>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8003e82:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003e84:	4a12      	ldr	r2, [pc, #72]	; (8003ed0 <SetSysClockTo72+0xf8>)
 8003e86:	4b12      	ldr	r3, [pc, #72]	; (8003ed0 <SetSysClockTo72+0xf8>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e8e:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003e90:	bf00      	nop
 8003e92:	4b0f      	ldr	r3, [pc, #60]	; (8003ed0 <SetSysClockTo72+0xf8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0f9      	beq.n	8003e92 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003e9e:	4a0c      	ldr	r2, [pc, #48]	; (8003ed0 <SetSysClockTo72+0xf8>)
 8003ea0:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <SetSysClockTo72+0xf8>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f023 0303 	bic.w	r3, r3, #3
 8003ea8:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8003eaa:	4a09      	ldr	r2, [pc, #36]	; (8003ed0 <SetSysClockTo72+0xf8>)
 8003eac:	4b08      	ldr	r3, [pc, #32]	; (8003ed0 <SetSysClockTo72+0xf8>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f043 0302 	orr.w	r3, r3, #2
 8003eb4:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8003eb6:	bf00      	nop
 8003eb8:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <SetSysClockTo72+0xf8>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f003 030c 	and.w	r3, r3, #12
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d1f9      	bne.n	8003eb8 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bc80      	pop	{r7}
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	40022000 	.word	0x40022000

08003ed8 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b087      	sub	sp, #28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
	int div = 1;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8003ee8:	e004      	b.n	8003ef4 <ts_itoa+0x1c>
		div *= base;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	fb02 f303 	mul.w	r3, r2, r3
 8003ef2:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d2f3      	bcs.n	8003eea <ts_itoa+0x12>

	while (div != 0)
 8003f02:	e029      	b.n	8003f58 <ts_itoa+0x80>
	{
		int num = d/div;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0c:	613b      	str	r3, [r7, #16]
		d = d%div;
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f16:	fb02 f201 	mul.w	r2, r2, r1
 8003f1a:	1a9b      	subs	r3, r3, r2
 8003f1c:	60bb      	str	r3, [r7, #8]
		div /= base;
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	fb92 f3f3 	sdiv	r3, r2, r3
 8003f26:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	2b09      	cmp	r3, #9
 8003f2c:	dd0a      	ble.n	8003f44 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	1c59      	adds	r1, r3, #1
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	6011      	str	r1, [r2, #0]
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	b2d2      	uxtb	r2, r2
 8003f3c:	3237      	adds	r2, #55	; 0x37
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	701a      	strb	r2, [r3, #0]
 8003f42:	e009      	b.n	8003f58 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	1c59      	adds	r1, r3, #1
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	6011      	str	r1, [r2, #0]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	3230      	adds	r2, #48	; 0x30
 8003f54:	b2d2      	uxtb	r2, r2
 8003f56:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1d2      	bne.n	8003f04 <ts_itoa+0x2c>
	}
}
 8003f5e:	bf00      	nop
 8003f60:	371c      	adds	r7, #28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr

08003f68 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b088      	sub	sp, #32
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8003f78:	e07d      	b.n	8004076 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	2b25      	cmp	r3, #37	; 0x25
 8003f80:	d171      	bne.n	8004066 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	3301      	adds	r3, #1
 8003f86:	60bb      	str	r3, [r7, #8]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b64      	cmp	r3, #100	; 0x64
 8003f8e:	d01e      	beq.n	8003fce <ts_formatstring+0x66>
 8003f90:	2b64      	cmp	r3, #100	; 0x64
 8003f92:	dc06      	bgt.n	8003fa2 <ts_formatstring+0x3a>
 8003f94:	2b58      	cmp	r3, #88	; 0x58
 8003f96:	d050      	beq.n	800403a <ts_formatstring+0xd2>
 8003f98:	2b63      	cmp	r3, #99	; 0x63
 8003f9a:	d00e      	beq.n	8003fba <ts_formatstring+0x52>
 8003f9c:	2b25      	cmp	r3, #37	; 0x25
 8003f9e:	d058      	beq.n	8004052 <ts_formatstring+0xea>
 8003fa0:	e05d      	b.n	800405e <ts_formatstring+0xf6>
 8003fa2:	2b73      	cmp	r3, #115	; 0x73
 8003fa4:	d02b      	beq.n	8003ffe <ts_formatstring+0x96>
 8003fa6:	2b73      	cmp	r3, #115	; 0x73
 8003fa8:	dc02      	bgt.n	8003fb0 <ts_formatstring+0x48>
 8003faa:	2b69      	cmp	r3, #105	; 0x69
 8003fac:	d00f      	beq.n	8003fce <ts_formatstring+0x66>
 8003fae:	e056      	b.n	800405e <ts_formatstring+0xf6>
 8003fb0:	2b75      	cmp	r3, #117	; 0x75
 8003fb2:	d037      	beq.n	8004024 <ts_formatstring+0xbc>
 8003fb4:	2b78      	cmp	r3, #120	; 0x78
 8003fb6:	d040      	beq.n	800403a <ts_formatstring+0xd2>
 8003fb8:	e051      	b.n	800405e <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	60fa      	str	r2, [r7, #12]
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	1d11      	adds	r1, r2, #4
 8003fc4:	6079      	str	r1, [r7, #4]
 8003fc6:	6812      	ldr	r2, [r2, #0]
 8003fc8:	b2d2      	uxtb	r2, r2
 8003fca:	701a      	strb	r2, [r3, #0]
				break;
 8003fcc:	e047      	b.n	800405e <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	1d1a      	adds	r2, r3, #4
 8003fd2:	607a      	str	r2, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	da07      	bge.n	8003fee <ts_formatstring+0x86>
					{
						val *= -1;
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	425b      	negs	r3, r3
 8003fe2:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	1c5a      	adds	r2, r3, #1
 8003fe8:	60fa      	str	r2, [r7, #12]
 8003fea:	222d      	movs	r2, #45	; 0x2d
 8003fec:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8003fee:	69f9      	ldr	r1, [r7, #28]
 8003ff0:	f107 030c 	add.w	r3, r7, #12
 8003ff4:	220a      	movs	r2, #10
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff ff6e 	bl	8003ed8 <ts_itoa>
				}
				break;
 8003ffc:	e02f      	b.n	800405e <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	1d1a      	adds	r2, r3, #4
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8004008:	e007      	b.n	800401a <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	60fa      	str	r2, [r7, #12]
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	1c51      	adds	r1, r2, #1
 8004014:	61b9      	str	r1, [r7, #24]
 8004016:	7812      	ldrb	r2, [r2, #0]
 8004018:	701a      	strb	r2, [r3, #0]
					while (*arg)
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1f3      	bne.n	800400a <ts_formatstring+0xa2>
					}
				}
				break;
 8004022:	e01c      	b.n	800405e <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	1d1a      	adds	r2, r3, #4
 8004028:	607a      	str	r2, [r7, #4]
 800402a:	6819      	ldr	r1, [r3, #0]
 800402c:	f107 030c 	add.w	r3, r7, #12
 8004030:	220a      	movs	r2, #10
 8004032:	4618      	mov	r0, r3
 8004034:	f7ff ff50 	bl	8003ed8 <ts_itoa>
				break;
 8004038:	e011      	b.n	800405e <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	1d1a      	adds	r2, r3, #4
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4619      	mov	r1, r3
 8004044:	f107 030c 	add.w	r3, r7, #12
 8004048:	2210      	movs	r2, #16
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff ff44 	bl	8003ed8 <ts_itoa>
				break;
 8004050:	e005      	b.n	800405e <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	60fa      	str	r2, [r7, #12]
 8004058:	2225      	movs	r2, #37	; 0x25
 800405a:	701a      	strb	r2, [r3, #0]
				  break;
 800405c:	bf00      	nop
			}
			fmt++;
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	3301      	adds	r3, #1
 8004062:	60bb      	str	r3, [r7, #8]
 8004064:	e007      	b.n	8004076 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	1c5a      	adds	r2, r3, #1
 800406a:	60fa      	str	r2, [r7, #12]
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	1c51      	adds	r1, r2, #1
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	7812      	ldrb	r2, [r2, #0]
 8004074:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	f47f af7d 	bne.w	8003f7a <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	461a      	mov	r2, r3
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	1ad3      	subs	r3, r2, r3
}
 800408e:	4618      	mov	r0, r3
 8004090:	3720      	adds	r7, #32
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8004096:	b40e      	push	{r1, r2, r3}
 8004098:	b580      	push	{r7, lr}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 80040a0:	f107 0320 	add.w	r3, r7, #32
 80040a4:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	69f9      	ldr	r1, [r7, #28]
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7ff ff5c 	bl	8003f68 <ts_formatstring>
 80040b0:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 80040b2:	68fb      	ldr	r3, [r7, #12]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040be:	b003      	add	sp, #12
 80040c0:	4770      	bx	lr
	...

080040c4 <_ZdlPv>:
 80040c4:	f000 b840 	b.w	8004148 <free>

080040c8 <__aeabi_atexit>:
 80040c8:	460b      	mov	r3, r1
 80040ca:	4601      	mov	r1, r0
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 b808 	b.w	80040e2 <__cxa_atexit>
 80040d2:	bf00      	nop

080040d4 <atof>:
 80040d4:	2100      	movs	r1, #0
 80040d6:	f001 b897 	b.w	8005208 <strtod>

080040da <atoi>:
 80040da:	220a      	movs	r2, #10
 80040dc:	2100      	movs	r1, #0
 80040de:	f001 b97b 	b.w	80053d8 <strtol>

080040e2 <__cxa_atexit>:
 80040e2:	4613      	mov	r3, r2
 80040e4:	460a      	mov	r2, r1
 80040e6:	4601      	mov	r1, r0
 80040e8:	2002      	movs	r0, #2
 80040ea:	f001 b98b 	b.w	8005404 <__register_exitproc>
	...

080040f0 <__libc_init_array>:
 80040f0:	b570      	push	{r4, r5, r6, lr}
 80040f2:	2500      	movs	r5, #0
 80040f4:	4e0c      	ldr	r6, [pc, #48]	; (8004128 <__libc_init_array+0x38>)
 80040f6:	4c0d      	ldr	r4, [pc, #52]	; (800412c <__libc_init_array+0x3c>)
 80040f8:	1ba4      	subs	r4, r4, r6
 80040fa:	10a4      	asrs	r4, r4, #2
 80040fc:	42a5      	cmp	r5, r4
 80040fe:	d109      	bne.n	8004114 <__libc_init_array+0x24>
 8004100:	f002 fa90 	bl	8006624 <_init>
 8004104:	2500      	movs	r5, #0
 8004106:	4e0a      	ldr	r6, [pc, #40]	; (8004130 <__libc_init_array+0x40>)
 8004108:	4c0a      	ldr	r4, [pc, #40]	; (8004134 <__libc_init_array+0x44>)
 800410a:	1ba4      	subs	r4, r4, r6
 800410c:	10a4      	asrs	r4, r4, #2
 800410e:	42a5      	cmp	r5, r4
 8004110:	d105      	bne.n	800411e <__libc_init_array+0x2e>
 8004112:	bd70      	pop	{r4, r5, r6, pc}
 8004114:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004118:	4798      	blx	r3
 800411a:	3501      	adds	r5, #1
 800411c:	e7ee      	b.n	80040fc <__libc_init_array+0xc>
 800411e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004122:	4798      	blx	r3
 8004124:	3501      	adds	r5, #1
 8004126:	e7f2      	b.n	800410e <__libc_init_array+0x1e>
 8004128:	08006eb8 	.word	0x08006eb8
 800412c:	08006eb8 	.word	0x08006eb8
 8004130:	08006eb8 	.word	0x08006eb8
 8004134:	08006ec0 	.word	0x08006ec0

08004138 <malloc>:
 8004138:	4b02      	ldr	r3, [pc, #8]	; (8004144 <malloc+0xc>)
 800413a:	4601      	mov	r1, r0
 800413c:	6818      	ldr	r0, [r3, #0]
 800413e:	f000 b80b 	b.w	8004158 <_malloc_r>
 8004142:	bf00      	nop
 8004144:	2000042c 	.word	0x2000042c

08004148 <free>:
 8004148:	4b02      	ldr	r3, [pc, #8]	; (8004154 <free+0xc>)
 800414a:	4601      	mov	r1, r0
 800414c:	6818      	ldr	r0, [r3, #0]
 800414e:	f001 ba29 	b.w	80055a4 <_free_r>
 8004152:	bf00      	nop
 8004154:	2000042c 	.word	0x2000042c

08004158 <_malloc_r>:
 8004158:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800415c:	f101 040b 	add.w	r4, r1, #11
 8004160:	2c16      	cmp	r4, #22
 8004162:	4681      	mov	r9, r0
 8004164:	d907      	bls.n	8004176 <_malloc_r+0x1e>
 8004166:	f034 0407 	bics.w	r4, r4, #7
 800416a:	d505      	bpl.n	8004178 <_malloc_r+0x20>
 800416c:	230c      	movs	r3, #12
 800416e:	f8c9 3000 	str.w	r3, [r9]
 8004172:	2600      	movs	r6, #0
 8004174:	e131      	b.n	80043da <_malloc_r+0x282>
 8004176:	2410      	movs	r4, #16
 8004178:	428c      	cmp	r4, r1
 800417a:	d3f7      	bcc.n	800416c <_malloc_r+0x14>
 800417c:	4648      	mov	r0, r9
 800417e:	f000 f9ff 	bl	8004580 <__malloc_lock>
 8004182:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8004186:	4d9b      	ldr	r5, [pc, #620]	; (80043f4 <_malloc_r+0x29c>)
 8004188:	d236      	bcs.n	80041f8 <_malloc_r+0xa0>
 800418a:	f104 0208 	add.w	r2, r4, #8
 800418e:	442a      	add	r2, r5
 8004190:	6856      	ldr	r6, [r2, #4]
 8004192:	f1a2 0108 	sub.w	r1, r2, #8
 8004196:	428e      	cmp	r6, r1
 8004198:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 800419c:	d102      	bne.n	80041a4 <_malloc_r+0x4c>
 800419e:	68d6      	ldr	r6, [r2, #12]
 80041a0:	42b2      	cmp	r2, r6
 80041a2:	d010      	beq.n	80041c6 <_malloc_r+0x6e>
 80041a4:	6873      	ldr	r3, [r6, #4]
 80041a6:	68f2      	ldr	r2, [r6, #12]
 80041a8:	68b1      	ldr	r1, [r6, #8]
 80041aa:	f023 0303 	bic.w	r3, r3, #3
 80041ae:	60ca      	str	r2, [r1, #12]
 80041b0:	4433      	add	r3, r6
 80041b2:	6091      	str	r1, [r2, #8]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	f042 0201 	orr.w	r2, r2, #1
 80041ba:	605a      	str	r2, [r3, #4]
 80041bc:	4648      	mov	r0, r9
 80041be:	f000 f9e5 	bl	800458c <__malloc_unlock>
 80041c2:	3608      	adds	r6, #8
 80041c4:	e109      	b.n	80043da <_malloc_r+0x282>
 80041c6:	3302      	adds	r3, #2
 80041c8:	4a8b      	ldr	r2, [pc, #556]	; (80043f8 <_malloc_r+0x2a0>)
 80041ca:	692e      	ldr	r6, [r5, #16]
 80041cc:	4611      	mov	r1, r2
 80041ce:	4296      	cmp	r6, r2
 80041d0:	d06d      	beq.n	80042ae <_malloc_r+0x156>
 80041d2:	6870      	ldr	r0, [r6, #4]
 80041d4:	f020 0003 	bic.w	r0, r0, #3
 80041d8:	1b07      	subs	r7, r0, r4
 80041da:	2f0f      	cmp	r7, #15
 80041dc:	dd47      	ble.n	800426e <_malloc_r+0x116>
 80041de:	1933      	adds	r3, r6, r4
 80041e0:	f044 0401 	orr.w	r4, r4, #1
 80041e4:	6074      	str	r4, [r6, #4]
 80041e6:	616b      	str	r3, [r5, #20]
 80041e8:	612b      	str	r3, [r5, #16]
 80041ea:	60da      	str	r2, [r3, #12]
 80041ec:	609a      	str	r2, [r3, #8]
 80041ee:	f047 0201 	orr.w	r2, r7, #1
 80041f2:	605a      	str	r2, [r3, #4]
 80041f4:	5037      	str	r7, [r6, r0]
 80041f6:	e7e1      	b.n	80041bc <_malloc_r+0x64>
 80041f8:	0a63      	lsrs	r3, r4, #9
 80041fa:	d02a      	beq.n	8004252 <_malloc_r+0xfa>
 80041fc:	2b04      	cmp	r3, #4
 80041fe:	d812      	bhi.n	8004226 <_malloc_r+0xce>
 8004200:	09a3      	lsrs	r3, r4, #6
 8004202:	3338      	adds	r3, #56	; 0x38
 8004204:	1c5a      	adds	r2, r3, #1
 8004206:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800420a:	6856      	ldr	r6, [r2, #4]
 800420c:	f1a2 0008 	sub.w	r0, r2, #8
 8004210:	4286      	cmp	r6, r0
 8004212:	d006      	beq.n	8004222 <_malloc_r+0xca>
 8004214:	6872      	ldr	r2, [r6, #4]
 8004216:	f022 0203 	bic.w	r2, r2, #3
 800421a:	1b11      	subs	r1, r2, r4
 800421c:	290f      	cmp	r1, #15
 800421e:	dd1c      	ble.n	800425a <_malloc_r+0x102>
 8004220:	3b01      	subs	r3, #1
 8004222:	3301      	adds	r3, #1
 8004224:	e7d0      	b.n	80041c8 <_malloc_r+0x70>
 8004226:	2b14      	cmp	r3, #20
 8004228:	d801      	bhi.n	800422e <_malloc_r+0xd6>
 800422a:	335b      	adds	r3, #91	; 0x5b
 800422c:	e7ea      	b.n	8004204 <_malloc_r+0xac>
 800422e:	2b54      	cmp	r3, #84	; 0x54
 8004230:	d802      	bhi.n	8004238 <_malloc_r+0xe0>
 8004232:	0b23      	lsrs	r3, r4, #12
 8004234:	336e      	adds	r3, #110	; 0x6e
 8004236:	e7e5      	b.n	8004204 <_malloc_r+0xac>
 8004238:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800423c:	d802      	bhi.n	8004244 <_malloc_r+0xec>
 800423e:	0be3      	lsrs	r3, r4, #15
 8004240:	3377      	adds	r3, #119	; 0x77
 8004242:	e7df      	b.n	8004204 <_malloc_r+0xac>
 8004244:	f240 5254 	movw	r2, #1364	; 0x554
 8004248:	4293      	cmp	r3, r2
 800424a:	d804      	bhi.n	8004256 <_malloc_r+0xfe>
 800424c:	0ca3      	lsrs	r3, r4, #18
 800424e:	337c      	adds	r3, #124	; 0x7c
 8004250:	e7d8      	b.n	8004204 <_malloc_r+0xac>
 8004252:	233f      	movs	r3, #63	; 0x3f
 8004254:	e7d6      	b.n	8004204 <_malloc_r+0xac>
 8004256:	237e      	movs	r3, #126	; 0x7e
 8004258:	e7d4      	b.n	8004204 <_malloc_r+0xac>
 800425a:	2900      	cmp	r1, #0
 800425c:	68f1      	ldr	r1, [r6, #12]
 800425e:	db04      	blt.n	800426a <_malloc_r+0x112>
 8004260:	68b3      	ldr	r3, [r6, #8]
 8004262:	60d9      	str	r1, [r3, #12]
 8004264:	608b      	str	r3, [r1, #8]
 8004266:	18b3      	adds	r3, r6, r2
 8004268:	e7a4      	b.n	80041b4 <_malloc_r+0x5c>
 800426a:	460e      	mov	r6, r1
 800426c:	e7d0      	b.n	8004210 <_malloc_r+0xb8>
 800426e:	2f00      	cmp	r7, #0
 8004270:	616a      	str	r2, [r5, #20]
 8004272:	612a      	str	r2, [r5, #16]
 8004274:	db05      	blt.n	8004282 <_malloc_r+0x12a>
 8004276:	4430      	add	r0, r6
 8004278:	6843      	ldr	r3, [r0, #4]
 800427a:	f043 0301 	orr.w	r3, r3, #1
 800427e:	6043      	str	r3, [r0, #4]
 8004280:	e79c      	b.n	80041bc <_malloc_r+0x64>
 8004282:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004286:	d244      	bcs.n	8004312 <_malloc_r+0x1ba>
 8004288:	2201      	movs	r2, #1
 800428a:	08c0      	lsrs	r0, r0, #3
 800428c:	1087      	asrs	r7, r0, #2
 800428e:	fa02 f707 	lsl.w	r7, r2, r7
 8004292:	686a      	ldr	r2, [r5, #4]
 8004294:	3001      	adds	r0, #1
 8004296:	433a      	orrs	r2, r7
 8004298:	606a      	str	r2, [r5, #4]
 800429a:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 800429e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80042a2:	3a08      	subs	r2, #8
 80042a4:	60f2      	str	r2, [r6, #12]
 80042a6:	60b7      	str	r7, [r6, #8]
 80042a8:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 80042ac:	60fe      	str	r6, [r7, #12]
 80042ae:	2001      	movs	r0, #1
 80042b0:	109a      	asrs	r2, r3, #2
 80042b2:	fa00 f202 	lsl.w	r2, r0, r2
 80042b6:	6868      	ldr	r0, [r5, #4]
 80042b8:	4282      	cmp	r2, r0
 80042ba:	f200 809f 	bhi.w	80043fc <_malloc_r+0x2a4>
 80042be:	4202      	tst	r2, r0
 80042c0:	d106      	bne.n	80042d0 <_malloc_r+0x178>
 80042c2:	f023 0303 	bic.w	r3, r3, #3
 80042c6:	0052      	lsls	r2, r2, #1
 80042c8:	4202      	tst	r2, r0
 80042ca:	f103 0304 	add.w	r3, r3, #4
 80042ce:	d0fa      	beq.n	80042c6 <_malloc_r+0x16e>
 80042d0:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 80042d4:	46e0      	mov	r8, ip
 80042d6:	469e      	mov	lr, r3
 80042d8:	f8d8 600c 	ldr.w	r6, [r8, #12]
 80042dc:	4546      	cmp	r6, r8
 80042de:	d153      	bne.n	8004388 <_malloc_r+0x230>
 80042e0:	f10e 0e01 	add.w	lr, lr, #1
 80042e4:	f01e 0f03 	tst.w	lr, #3
 80042e8:	f108 0808 	add.w	r8, r8, #8
 80042ec:	d1f4      	bne.n	80042d8 <_malloc_r+0x180>
 80042ee:	0798      	lsls	r0, r3, #30
 80042f0:	d179      	bne.n	80043e6 <_malloc_r+0x28e>
 80042f2:	686b      	ldr	r3, [r5, #4]
 80042f4:	ea23 0302 	bic.w	r3, r3, r2
 80042f8:	606b      	str	r3, [r5, #4]
 80042fa:	6868      	ldr	r0, [r5, #4]
 80042fc:	0052      	lsls	r2, r2, #1
 80042fe:	4282      	cmp	r2, r0
 8004300:	d87c      	bhi.n	80043fc <_malloc_r+0x2a4>
 8004302:	2a00      	cmp	r2, #0
 8004304:	d07a      	beq.n	80043fc <_malloc_r+0x2a4>
 8004306:	4673      	mov	r3, lr
 8004308:	4202      	tst	r2, r0
 800430a:	d1e1      	bne.n	80042d0 <_malloc_r+0x178>
 800430c:	3304      	adds	r3, #4
 800430e:	0052      	lsls	r2, r2, #1
 8004310:	e7fa      	b.n	8004308 <_malloc_r+0x1b0>
 8004312:	0a42      	lsrs	r2, r0, #9
 8004314:	2a04      	cmp	r2, #4
 8004316:	d815      	bhi.n	8004344 <_malloc_r+0x1ec>
 8004318:	0982      	lsrs	r2, r0, #6
 800431a:	3238      	adds	r2, #56	; 0x38
 800431c:	1c57      	adds	r7, r2, #1
 800431e:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8004322:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8004326:	45be      	cmp	lr, r7
 8004328:	d126      	bne.n	8004378 <_malloc_r+0x220>
 800432a:	2001      	movs	r0, #1
 800432c:	1092      	asrs	r2, r2, #2
 800432e:	fa00 f202 	lsl.w	r2, r0, r2
 8004332:	6868      	ldr	r0, [r5, #4]
 8004334:	4310      	orrs	r0, r2
 8004336:	6068      	str	r0, [r5, #4]
 8004338:	f8c6 e00c 	str.w	lr, [r6, #12]
 800433c:	60b7      	str	r7, [r6, #8]
 800433e:	f8ce 6008 	str.w	r6, [lr, #8]
 8004342:	e7b3      	b.n	80042ac <_malloc_r+0x154>
 8004344:	2a14      	cmp	r2, #20
 8004346:	d801      	bhi.n	800434c <_malloc_r+0x1f4>
 8004348:	325b      	adds	r2, #91	; 0x5b
 800434a:	e7e7      	b.n	800431c <_malloc_r+0x1c4>
 800434c:	2a54      	cmp	r2, #84	; 0x54
 800434e:	d802      	bhi.n	8004356 <_malloc_r+0x1fe>
 8004350:	0b02      	lsrs	r2, r0, #12
 8004352:	326e      	adds	r2, #110	; 0x6e
 8004354:	e7e2      	b.n	800431c <_malloc_r+0x1c4>
 8004356:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800435a:	d802      	bhi.n	8004362 <_malloc_r+0x20a>
 800435c:	0bc2      	lsrs	r2, r0, #15
 800435e:	3277      	adds	r2, #119	; 0x77
 8004360:	e7dc      	b.n	800431c <_malloc_r+0x1c4>
 8004362:	f240 5754 	movw	r7, #1364	; 0x554
 8004366:	42ba      	cmp	r2, r7
 8004368:	bf9a      	itte	ls
 800436a:	0c82      	lsrls	r2, r0, #18
 800436c:	327c      	addls	r2, #124	; 0x7c
 800436e:	227e      	movhi	r2, #126	; 0x7e
 8004370:	e7d4      	b.n	800431c <_malloc_r+0x1c4>
 8004372:	68bf      	ldr	r7, [r7, #8]
 8004374:	45be      	cmp	lr, r7
 8004376:	d004      	beq.n	8004382 <_malloc_r+0x22a>
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	f022 0203 	bic.w	r2, r2, #3
 800437e:	4290      	cmp	r0, r2
 8004380:	d3f7      	bcc.n	8004372 <_malloc_r+0x21a>
 8004382:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8004386:	e7d7      	b.n	8004338 <_malloc_r+0x1e0>
 8004388:	6870      	ldr	r0, [r6, #4]
 800438a:	68f7      	ldr	r7, [r6, #12]
 800438c:	f020 0003 	bic.w	r0, r0, #3
 8004390:	eba0 0a04 	sub.w	sl, r0, r4
 8004394:	f1ba 0f0f 	cmp.w	sl, #15
 8004398:	dd10      	ble.n	80043bc <_malloc_r+0x264>
 800439a:	68b2      	ldr	r2, [r6, #8]
 800439c:	1933      	adds	r3, r6, r4
 800439e:	f044 0401 	orr.w	r4, r4, #1
 80043a2:	6074      	str	r4, [r6, #4]
 80043a4:	60d7      	str	r7, [r2, #12]
 80043a6:	60ba      	str	r2, [r7, #8]
 80043a8:	f04a 0201 	orr.w	r2, sl, #1
 80043ac:	616b      	str	r3, [r5, #20]
 80043ae:	612b      	str	r3, [r5, #16]
 80043b0:	60d9      	str	r1, [r3, #12]
 80043b2:	6099      	str	r1, [r3, #8]
 80043b4:	605a      	str	r2, [r3, #4]
 80043b6:	f846 a000 	str.w	sl, [r6, r0]
 80043ba:	e6ff      	b.n	80041bc <_malloc_r+0x64>
 80043bc:	f1ba 0f00 	cmp.w	sl, #0
 80043c0:	db0f      	blt.n	80043e2 <_malloc_r+0x28a>
 80043c2:	4430      	add	r0, r6
 80043c4:	6843      	ldr	r3, [r0, #4]
 80043c6:	f043 0301 	orr.w	r3, r3, #1
 80043ca:	6043      	str	r3, [r0, #4]
 80043cc:	f856 3f08 	ldr.w	r3, [r6, #8]!
 80043d0:	4648      	mov	r0, r9
 80043d2:	60df      	str	r7, [r3, #12]
 80043d4:	60bb      	str	r3, [r7, #8]
 80043d6:	f000 f8d9 	bl	800458c <__malloc_unlock>
 80043da:	4630      	mov	r0, r6
 80043dc:	b003      	add	sp, #12
 80043de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043e2:	463e      	mov	r6, r7
 80043e4:	e77a      	b.n	80042dc <_malloc_r+0x184>
 80043e6:	f85c 0908 	ldr.w	r0, [ip], #-8
 80043ea:	3b01      	subs	r3, #1
 80043ec:	4584      	cmp	ip, r0
 80043ee:	f43f af7e 	beq.w	80042ee <_malloc_r+0x196>
 80043f2:	e782      	b.n	80042fa <_malloc_r+0x1a2>
 80043f4:	20000018 	.word	0x20000018
 80043f8:	20000020 	.word	0x20000020
 80043fc:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8004400:	f8db 6004 	ldr.w	r6, [fp, #4]
 8004404:	f026 0603 	bic.w	r6, r6, #3
 8004408:	42b4      	cmp	r4, r6
 800440a:	d803      	bhi.n	8004414 <_malloc_r+0x2bc>
 800440c:	1b33      	subs	r3, r6, r4
 800440e:	2b0f      	cmp	r3, #15
 8004410:	f300 8095 	bgt.w	800453e <_malloc_r+0x3e6>
 8004414:	4a4f      	ldr	r2, [pc, #316]	; (8004554 <_malloc_r+0x3fc>)
 8004416:	eb0b 0306 	add.w	r3, fp, r6
 800441a:	6817      	ldr	r7, [r2, #0]
 800441c:	4a4e      	ldr	r2, [pc, #312]	; (8004558 <_malloc_r+0x400>)
 800441e:	3710      	adds	r7, #16
 8004420:	6811      	ldr	r1, [r2, #0]
 8004422:	4427      	add	r7, r4
 8004424:	3101      	adds	r1, #1
 8004426:	d005      	beq.n	8004434 <_malloc_r+0x2dc>
 8004428:	494c      	ldr	r1, [pc, #304]	; (800455c <_malloc_r+0x404>)
 800442a:	3901      	subs	r1, #1
 800442c:	440f      	add	r7, r1
 800442e:	3101      	adds	r1, #1
 8004430:	4249      	negs	r1, r1
 8004432:	400f      	ands	r7, r1
 8004434:	4639      	mov	r1, r7
 8004436:	4648      	mov	r0, r9
 8004438:	9201      	str	r2, [sp, #4]
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	f000 f8ac 	bl	8004598 <_sbrk_r>
 8004440:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004444:	4680      	mov	r8, r0
 8004446:	d055      	beq.n	80044f4 <_malloc_r+0x39c>
 8004448:	9b00      	ldr	r3, [sp, #0]
 800444a:	9a01      	ldr	r2, [sp, #4]
 800444c:	4283      	cmp	r3, r0
 800444e:	d901      	bls.n	8004454 <_malloc_r+0x2fc>
 8004450:	45ab      	cmp	fp, r5
 8004452:	d14f      	bne.n	80044f4 <_malloc_r+0x39c>
 8004454:	4842      	ldr	r0, [pc, #264]	; (8004560 <_malloc_r+0x408>)
 8004456:	4543      	cmp	r3, r8
 8004458:	6801      	ldr	r1, [r0, #0]
 800445a:	4682      	mov	sl, r0
 800445c:	eb07 0e01 	add.w	lr, r7, r1
 8004460:	f8c0 e000 	str.w	lr, [r0]
 8004464:	493f      	ldr	r1, [pc, #252]	; (8004564 <_malloc_r+0x40c>)
 8004466:	d113      	bne.n	8004490 <_malloc_r+0x338>
 8004468:	420b      	tst	r3, r1
 800446a:	d111      	bne.n	8004490 <_malloc_r+0x338>
 800446c:	68ab      	ldr	r3, [r5, #8]
 800446e:	443e      	add	r6, r7
 8004470:	f046 0601 	orr.w	r6, r6, #1
 8004474:	605e      	str	r6, [r3, #4]
 8004476:	4a3c      	ldr	r2, [pc, #240]	; (8004568 <_malloc_r+0x410>)
 8004478:	f8da 3000 	ldr.w	r3, [sl]
 800447c:	6811      	ldr	r1, [r2, #0]
 800447e:	428b      	cmp	r3, r1
 8004480:	bf88      	it	hi
 8004482:	6013      	strhi	r3, [r2, #0]
 8004484:	4a39      	ldr	r2, [pc, #228]	; (800456c <_malloc_r+0x414>)
 8004486:	6811      	ldr	r1, [r2, #0]
 8004488:	428b      	cmp	r3, r1
 800448a:	bf88      	it	hi
 800448c:	6013      	strhi	r3, [r2, #0]
 800448e:	e031      	b.n	80044f4 <_malloc_r+0x39c>
 8004490:	6810      	ldr	r0, [r2, #0]
 8004492:	3001      	adds	r0, #1
 8004494:	bf1b      	ittet	ne
 8004496:	eba8 0303 	subne.w	r3, r8, r3
 800449a:	4473      	addne	r3, lr
 800449c:	f8c2 8000 	streq.w	r8, [r2]
 80044a0:	f8ca 3000 	strne.w	r3, [sl]
 80044a4:	f018 0007 	ands.w	r0, r8, #7
 80044a8:	bf1c      	itt	ne
 80044aa:	f1c0 0008 	rsbne	r0, r0, #8
 80044ae:	4480      	addne	r8, r0
 80044b0:	4b2a      	ldr	r3, [pc, #168]	; (800455c <_malloc_r+0x404>)
 80044b2:	4447      	add	r7, r8
 80044b4:	4418      	add	r0, r3
 80044b6:	400f      	ands	r7, r1
 80044b8:	1bc7      	subs	r7, r0, r7
 80044ba:	4639      	mov	r1, r7
 80044bc:	4648      	mov	r0, r9
 80044be:	f000 f86b 	bl	8004598 <_sbrk_r>
 80044c2:	1c43      	adds	r3, r0, #1
 80044c4:	bf04      	itt	eq
 80044c6:	4640      	moveq	r0, r8
 80044c8:	2700      	moveq	r7, #0
 80044ca:	f8da 3000 	ldr.w	r3, [sl]
 80044ce:	eba0 0008 	sub.w	r0, r0, r8
 80044d2:	443b      	add	r3, r7
 80044d4:	4407      	add	r7, r0
 80044d6:	f047 0701 	orr.w	r7, r7, #1
 80044da:	45ab      	cmp	fp, r5
 80044dc:	f8c5 8008 	str.w	r8, [r5, #8]
 80044e0:	f8ca 3000 	str.w	r3, [sl]
 80044e4:	f8c8 7004 	str.w	r7, [r8, #4]
 80044e8:	d0c5      	beq.n	8004476 <_malloc_r+0x31e>
 80044ea:	2e0f      	cmp	r6, #15
 80044ec:	d810      	bhi.n	8004510 <_malloc_r+0x3b8>
 80044ee:	2301      	movs	r3, #1
 80044f0:	f8c8 3004 	str.w	r3, [r8, #4]
 80044f4:	68ab      	ldr	r3, [r5, #8]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	f022 0203 	bic.w	r2, r2, #3
 80044fc:	4294      	cmp	r4, r2
 80044fe:	eba2 0304 	sub.w	r3, r2, r4
 8004502:	d801      	bhi.n	8004508 <_malloc_r+0x3b0>
 8004504:	2b0f      	cmp	r3, #15
 8004506:	dc1a      	bgt.n	800453e <_malloc_r+0x3e6>
 8004508:	4648      	mov	r0, r9
 800450a:	f000 f83f 	bl	800458c <__malloc_unlock>
 800450e:	e630      	b.n	8004172 <_malloc_r+0x1a>
 8004510:	2205      	movs	r2, #5
 8004512:	f8db 3004 	ldr.w	r3, [fp, #4]
 8004516:	3e0c      	subs	r6, #12
 8004518:	f026 0607 	bic.w	r6, r6, #7
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	4333      	orrs	r3, r6
 8004522:	f8cb 3004 	str.w	r3, [fp, #4]
 8004526:	2e0f      	cmp	r6, #15
 8004528:	eb0b 0306 	add.w	r3, fp, r6
 800452c:	605a      	str	r2, [r3, #4]
 800452e:	609a      	str	r2, [r3, #8]
 8004530:	d9a1      	bls.n	8004476 <_malloc_r+0x31e>
 8004532:	f10b 0108 	add.w	r1, fp, #8
 8004536:	4648      	mov	r0, r9
 8004538:	f001 f834 	bl	80055a4 <_free_r>
 800453c:	e79b      	b.n	8004476 <_malloc_r+0x31e>
 800453e:	68ae      	ldr	r6, [r5, #8]
 8004540:	f044 0201 	orr.w	r2, r4, #1
 8004544:	f043 0301 	orr.w	r3, r3, #1
 8004548:	4434      	add	r4, r6
 800454a:	6072      	str	r2, [r6, #4]
 800454c:	60ac      	str	r4, [r5, #8]
 800454e:	6063      	str	r3, [r4, #4]
 8004550:	e634      	b.n	80041bc <_malloc_r+0x64>
 8004552:	bf00      	nop
 8004554:	20000948 	.word	0x20000948
 8004558:	20000420 	.word	0x20000420
 800455c:	00000080 	.word	0x00000080
 8004560:	20000918 	.word	0x20000918
 8004564:	0000007f 	.word	0x0000007f
 8004568:	20000940 	.word	0x20000940
 800456c:	20000944 	.word	0x20000944

08004570 <memset>:
 8004570:	4603      	mov	r3, r0
 8004572:	4402      	add	r2, r0
 8004574:	4293      	cmp	r3, r2
 8004576:	d100      	bne.n	800457a <memset+0xa>
 8004578:	4770      	bx	lr
 800457a:	f803 1b01 	strb.w	r1, [r3], #1
 800457e:	e7f9      	b.n	8004574 <memset+0x4>

08004580 <__malloc_lock>:
 8004580:	4801      	ldr	r0, [pc, #4]	; (8004588 <__malloc_lock+0x8>)
 8004582:	f001 bbee 	b.w	8005d62 <__retarget_lock_acquire_recursive>
 8004586:	bf00      	nop
 8004588:	20000a5c 	.word	0x20000a5c

0800458c <__malloc_unlock>:
 800458c:	4801      	ldr	r0, [pc, #4]	; (8004594 <__malloc_unlock+0x8>)
 800458e:	f001 bbea 	b.w	8005d66 <__retarget_lock_release_recursive>
 8004592:	bf00      	nop
 8004594:	20000a5c 	.word	0x20000a5c

08004598 <_sbrk_r>:
 8004598:	b538      	push	{r3, r4, r5, lr}
 800459a:	2300      	movs	r3, #0
 800459c:	4c05      	ldr	r4, [pc, #20]	; (80045b4 <_sbrk_r+0x1c>)
 800459e:	4605      	mov	r5, r0
 80045a0:	4608      	mov	r0, r1
 80045a2:	6023      	str	r3, [r4, #0]
 80045a4:	f002 f830 	bl	8006608 <_sbrk>
 80045a8:	1c43      	adds	r3, r0, #1
 80045aa:	d102      	bne.n	80045b2 <_sbrk_r+0x1a>
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	b103      	cbz	r3, 80045b2 <_sbrk_r+0x1a>
 80045b0:	602b      	str	r3, [r5, #0]
 80045b2:	bd38      	pop	{r3, r4, r5, pc}
 80045b4:	20000a64 	.word	0x20000a64

080045b8 <strcat>:
 80045b8:	4602      	mov	r2, r0
 80045ba:	b510      	push	{r4, lr}
 80045bc:	4613      	mov	r3, r2
 80045be:	781c      	ldrb	r4, [r3, #0]
 80045c0:	3201      	adds	r2, #1
 80045c2:	2c00      	cmp	r4, #0
 80045c4:	d1fa      	bne.n	80045bc <strcat+0x4>
 80045c6:	3b01      	subs	r3, #1
 80045c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045cc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045d0:	2a00      	cmp	r2, #0
 80045d2:	d1f9      	bne.n	80045c8 <strcat+0x10>
 80045d4:	bd10      	pop	{r4, pc}

080045d6 <sulp>:
 80045d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045da:	460f      	mov	r7, r1
 80045dc:	4690      	mov	r8, r2
 80045de:	f001 fe9f 	bl	8006320 <__ulp>
 80045e2:	4604      	mov	r4, r0
 80045e4:	460d      	mov	r5, r1
 80045e6:	f1b8 0f00 	cmp.w	r8, #0
 80045ea:	d011      	beq.n	8004610 <sulp+0x3a>
 80045ec:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80045f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	dd0b      	ble.n	8004610 <sulp+0x3a>
 80045f8:	2400      	movs	r4, #0
 80045fa:	051b      	lsls	r3, r3, #20
 80045fc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004600:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004604:	4622      	mov	r2, r4
 8004606:	462b      	mov	r3, r5
 8004608:	f7fb ff62 	bl	80004d0 <__aeabi_dmul>
 800460c:	4604      	mov	r4, r0
 800460e:	460d      	mov	r5, r1
 8004610:	4620      	mov	r0, r4
 8004612:	4629      	mov	r1, r5
 8004614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004618 <_strtod_l>:
 8004618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800461c:	4699      	mov	r9, r3
 800461e:	2300      	movs	r3, #0
 8004620:	b09f      	sub	sp, #124	; 0x7c
 8004622:	4680      	mov	r8, r0
 8004624:	4648      	mov	r0, r9
 8004626:	460c      	mov	r4, r1
 8004628:	9215      	str	r2, [sp, #84]	; 0x54
 800462a:	931a      	str	r3, [sp, #104]	; 0x68
 800462c:	f001 fb97 	bl	8005d5e <__localeconv_l>
 8004630:	4607      	mov	r7, r0
 8004632:	6800      	ldr	r0, [r0, #0]
 8004634:	f7fb fd8c 	bl	8000150 <strlen>
 8004638:	f04f 0a00 	mov.w	sl, #0
 800463c:	4605      	mov	r5, r0
 800463e:	f04f 0b00 	mov.w	fp, #0
 8004642:	9419      	str	r4, [sp, #100]	; 0x64
 8004644:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004646:	781a      	ldrb	r2, [r3, #0]
 8004648:	2a0d      	cmp	r2, #13
 800464a:	d833      	bhi.n	80046b4 <_strtod_l+0x9c>
 800464c:	2a09      	cmp	r2, #9
 800464e:	d237      	bcs.n	80046c0 <_strtod_l+0xa8>
 8004650:	2a00      	cmp	r2, #0
 8004652:	d03f      	beq.n	80046d4 <_strtod_l+0xbc>
 8004654:	2300      	movs	r3, #0
 8004656:	9309      	str	r3, [sp, #36]	; 0x24
 8004658:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800465a:	7833      	ldrb	r3, [r6, #0]
 800465c:	2b30      	cmp	r3, #48	; 0x30
 800465e:	f040 8101 	bne.w	8004864 <_strtod_l+0x24c>
 8004662:	7873      	ldrb	r3, [r6, #1]
 8004664:	2b58      	cmp	r3, #88	; 0x58
 8004666:	d001      	beq.n	800466c <_strtod_l+0x54>
 8004668:	2b78      	cmp	r3, #120	; 0x78
 800466a:	d16b      	bne.n	8004744 <_strtod_l+0x12c>
 800466c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800466e:	f8cd 9008 	str.w	r9, [sp, #8]
 8004672:	9301      	str	r3, [sp, #4]
 8004674:	ab1a      	add	r3, sp, #104	; 0x68
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	4aaa      	ldr	r2, [pc, #680]	; (8004924 <_strtod_l+0x30c>)
 800467a:	ab1b      	add	r3, sp, #108	; 0x6c
 800467c:	a919      	add	r1, sp, #100	; 0x64
 800467e:	4640      	mov	r0, r8
 8004680:	f001 f896 	bl	80057b0 <__gethex>
 8004684:	f010 0407 	ands.w	r4, r0, #7
 8004688:	4605      	mov	r5, r0
 800468a:	d005      	beq.n	8004698 <_strtod_l+0x80>
 800468c:	2c06      	cmp	r4, #6
 800468e:	d12b      	bne.n	80046e8 <_strtod_l+0xd0>
 8004690:	2300      	movs	r3, #0
 8004692:	3601      	adds	r6, #1
 8004694:	9619      	str	r6, [sp, #100]	; 0x64
 8004696:	9309      	str	r3, [sp, #36]	; 0x24
 8004698:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800469a:	2b00      	cmp	r3, #0
 800469c:	f040 859d 	bne.w	80051da <_strtod_l+0xbc2>
 80046a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046a2:	b1e3      	cbz	r3, 80046de <_strtod_l+0xc6>
 80046a4:	4652      	mov	r2, sl
 80046a6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80046aa:	4610      	mov	r0, r2
 80046ac:	4619      	mov	r1, r3
 80046ae:	b01f      	add	sp, #124	; 0x7c
 80046b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046b4:	2a2b      	cmp	r2, #43	; 0x2b
 80046b6:	d006      	beq.n	80046c6 <_strtod_l+0xae>
 80046b8:	2a2d      	cmp	r2, #45	; 0x2d
 80046ba:	d013      	beq.n	80046e4 <_strtod_l+0xcc>
 80046bc:	2a20      	cmp	r2, #32
 80046be:	d1c9      	bne.n	8004654 <_strtod_l+0x3c>
 80046c0:	3301      	adds	r3, #1
 80046c2:	9319      	str	r3, [sp, #100]	; 0x64
 80046c4:	e7be      	b.n	8004644 <_strtod_l+0x2c>
 80046c6:	2200      	movs	r2, #0
 80046c8:	9209      	str	r2, [sp, #36]	; 0x24
 80046ca:	1c5a      	adds	r2, r3, #1
 80046cc:	9219      	str	r2, [sp, #100]	; 0x64
 80046ce:	785b      	ldrb	r3, [r3, #1]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1c1      	bne.n	8004658 <_strtod_l+0x40>
 80046d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80046d6:	9419      	str	r4, [sp, #100]	; 0x64
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f040 857c 	bne.w	80051d6 <_strtod_l+0xbbe>
 80046de:	4652      	mov	r2, sl
 80046e0:	465b      	mov	r3, fp
 80046e2:	e7e2      	b.n	80046aa <_strtod_l+0x92>
 80046e4:	2201      	movs	r2, #1
 80046e6:	e7ef      	b.n	80046c8 <_strtod_l+0xb0>
 80046e8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80046ea:	b13a      	cbz	r2, 80046fc <_strtod_l+0xe4>
 80046ec:	2135      	movs	r1, #53	; 0x35
 80046ee:	a81c      	add	r0, sp, #112	; 0x70
 80046f0:	f001 ff03 	bl	80064fa <__copybits>
 80046f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80046f6:	4640      	mov	r0, r8
 80046f8:	f001 fb87 	bl	8005e0a <_Bfree>
 80046fc:	3c01      	subs	r4, #1
 80046fe:	2c04      	cmp	r4, #4
 8004700:	d808      	bhi.n	8004714 <_strtod_l+0xfc>
 8004702:	e8df f004 	tbb	[pc, r4]
 8004706:	030c      	.short	0x030c
 8004708:	1a17      	.short	0x1a17
 800470a:	0c          	.byte	0x0c
 800470b:	00          	.byte	0x00
 800470c:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8004710:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8004714:	0729      	lsls	r1, r5, #28
 8004716:	d5bf      	bpl.n	8004698 <_strtod_l+0x80>
 8004718:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800471c:	e7bc      	b.n	8004698 <_strtod_l+0x80>
 800471e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004720:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004722:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004726:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800472a:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 800472e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004732:	e7ef      	b.n	8004714 <_strtod_l+0xfc>
 8004734:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 8004930 <_strtod_l+0x318>
 8004738:	e7ec      	b.n	8004714 <_strtod_l+0xfc>
 800473a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800473e:	f04f 3aff 	mov.w	sl, #4294967295
 8004742:	e7e7      	b.n	8004714 <_strtod_l+0xfc>
 8004744:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004746:	1c5a      	adds	r2, r3, #1
 8004748:	9219      	str	r2, [sp, #100]	; 0x64
 800474a:	785b      	ldrb	r3, [r3, #1]
 800474c:	2b30      	cmp	r3, #48	; 0x30
 800474e:	d0f9      	beq.n	8004744 <_strtod_l+0x12c>
 8004750:	2b00      	cmp	r3, #0
 8004752:	d0a1      	beq.n	8004698 <_strtod_l+0x80>
 8004754:	2301      	movs	r3, #1
 8004756:	9308      	str	r3, [sp, #32]
 8004758:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800475a:	220a      	movs	r2, #10
 800475c:	930a      	str	r3, [sp, #40]	; 0x28
 800475e:	2300      	movs	r3, #0
 8004760:	9305      	str	r3, [sp, #20]
 8004762:	9306      	str	r3, [sp, #24]
 8004764:	9304      	str	r3, [sp, #16]
 8004766:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004768:	7806      	ldrb	r6, [r0, #0]
 800476a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800476e:	b2d9      	uxtb	r1, r3
 8004770:	2909      	cmp	r1, #9
 8004772:	d979      	bls.n	8004868 <_strtod_l+0x250>
 8004774:	462a      	mov	r2, r5
 8004776:	6839      	ldr	r1, [r7, #0]
 8004778:	f001 fefa 	bl	8006570 <strncmp>
 800477c:	2800      	cmp	r0, #0
 800477e:	f000 8085 	beq.w	800488c <_strtod_l+0x274>
 8004782:	2000      	movs	r0, #0
 8004784:	4633      	mov	r3, r6
 8004786:	4602      	mov	r2, r0
 8004788:	4601      	mov	r1, r0
 800478a:	9d04      	ldr	r5, [sp, #16]
 800478c:	2b65      	cmp	r3, #101	; 0x65
 800478e:	d002      	beq.n	8004796 <_strtod_l+0x17e>
 8004790:	2b45      	cmp	r3, #69	; 0x45
 8004792:	f040 80ef 	bne.w	8004974 <_strtod_l+0x35c>
 8004796:	b925      	cbnz	r5, 80047a2 <_strtod_l+0x18a>
 8004798:	b910      	cbnz	r0, 80047a0 <_strtod_l+0x188>
 800479a:	9b08      	ldr	r3, [sp, #32]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d099      	beq.n	80046d4 <_strtod_l+0xbc>
 80047a0:	2500      	movs	r5, #0
 80047a2:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80047a4:	1c63      	adds	r3, r4, #1
 80047a6:	9319      	str	r3, [sp, #100]	; 0x64
 80047a8:	7863      	ldrb	r3, [r4, #1]
 80047aa:	2b2b      	cmp	r3, #43	; 0x2b
 80047ac:	f000 80cf 	beq.w	800494e <_strtod_l+0x336>
 80047b0:	2b2d      	cmp	r3, #45	; 0x2d
 80047b2:	f000 80d2 	beq.w	800495a <_strtod_l+0x342>
 80047b6:	2600      	movs	r6, #0
 80047b8:	9607      	str	r6, [sp, #28]
 80047ba:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80047be:	2e09      	cmp	r6, #9
 80047c0:	f200 80d7 	bhi.w	8004972 <_strtod_l+0x35a>
 80047c4:	2b30      	cmp	r3, #48	; 0x30
 80047c6:	f000 80ca 	beq.w	800495e <_strtod_l+0x346>
 80047ca:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 80047ce:	2e08      	cmp	r6, #8
 80047d0:	f200 80d0 	bhi.w	8004974 <_strtod_l+0x35c>
 80047d4:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80047d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80047da:	f04f 0c0a 	mov.w	ip, #10
 80047de:	461f      	mov	r7, r3
 80047e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80047e2:	1c5e      	adds	r6, r3, #1
 80047e4:	9619      	str	r6, [sp, #100]	; 0x64
 80047e6:	785b      	ldrb	r3, [r3, #1]
 80047e8:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
 80047ec:	f1b9 0f09 	cmp.w	r9, #9
 80047f0:	f240 80ba 	bls.w	8004968 <_strtod_l+0x350>
 80047f4:	1bf6      	subs	r6, r6, r7
 80047f6:	2e08      	cmp	r6, #8
 80047f8:	f644 691f 	movw	r9, #19999	; 0x4e1f
 80047fc:	dc02      	bgt.n	8004804 <_strtod_l+0x1ec>
 80047fe:	45f1      	cmp	r9, lr
 8004800:	bfa8      	it	ge
 8004802:	46f1      	movge	r9, lr
 8004804:	9e07      	ldr	r6, [sp, #28]
 8004806:	b10e      	cbz	r6, 800480c <_strtod_l+0x1f4>
 8004808:	f1c9 0900 	rsb	r9, r9, #0
 800480c:	2d00      	cmp	r5, #0
 800480e:	f040 80d7 	bne.w	80049c0 <_strtod_l+0x3a8>
 8004812:	2800      	cmp	r0, #0
 8004814:	f47f af40 	bne.w	8004698 <_strtod_l+0x80>
 8004818:	9a08      	ldr	r2, [sp, #32]
 800481a:	2a00      	cmp	r2, #0
 800481c:	f47f af3c 	bne.w	8004698 <_strtod_l+0x80>
 8004820:	2900      	cmp	r1, #0
 8004822:	f47f af57 	bne.w	80046d4 <_strtod_l+0xbc>
 8004826:	2b4e      	cmp	r3, #78	; 0x4e
 8004828:	f000 80ad 	beq.w	8004986 <_strtod_l+0x36e>
 800482c:	f300 80a5 	bgt.w	800497a <_strtod_l+0x362>
 8004830:	2b49      	cmp	r3, #73	; 0x49
 8004832:	f47f af4f 	bne.w	80046d4 <_strtod_l+0xbc>
 8004836:	493c      	ldr	r1, [pc, #240]	; (8004928 <_strtod_l+0x310>)
 8004838:	a819      	add	r0, sp, #100	; 0x64
 800483a:	f001 f9ea 	bl	8005c12 <__match>
 800483e:	2800      	cmp	r0, #0
 8004840:	f43f af48 	beq.w	80046d4 <_strtod_l+0xbc>
 8004844:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004846:	4939      	ldr	r1, [pc, #228]	; (800492c <_strtod_l+0x314>)
 8004848:	3b01      	subs	r3, #1
 800484a:	a819      	add	r0, sp, #100	; 0x64
 800484c:	9319      	str	r3, [sp, #100]	; 0x64
 800484e:	f001 f9e0 	bl	8005c12 <__match>
 8004852:	b910      	cbnz	r0, 800485a <_strtod_l+0x242>
 8004854:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004856:	3301      	adds	r3, #1
 8004858:	9319      	str	r3, [sp, #100]	; 0x64
 800485a:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8004930 <_strtod_l+0x318>
 800485e:	f04f 0a00 	mov.w	sl, #0
 8004862:	e719      	b.n	8004698 <_strtod_l+0x80>
 8004864:	2300      	movs	r3, #0
 8004866:	e776      	b.n	8004756 <_strtod_l+0x13e>
 8004868:	9904      	ldr	r1, [sp, #16]
 800486a:	3001      	adds	r0, #1
 800486c:	2908      	cmp	r1, #8
 800486e:	bfd5      	itete	le
 8004870:	9906      	ldrle	r1, [sp, #24]
 8004872:	9905      	ldrgt	r1, [sp, #20]
 8004874:	fb02 3301 	mlale	r3, r2, r1, r3
 8004878:	fb02 3301 	mlagt	r3, r2, r1, r3
 800487c:	bfd4      	ite	le
 800487e:	9306      	strle	r3, [sp, #24]
 8004880:	9305      	strgt	r3, [sp, #20]
 8004882:	9b04      	ldr	r3, [sp, #16]
 8004884:	9019      	str	r0, [sp, #100]	; 0x64
 8004886:	3301      	adds	r3, #1
 8004888:	9304      	str	r3, [sp, #16]
 800488a:	e76c      	b.n	8004766 <_strtod_l+0x14e>
 800488c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800488e:	195a      	adds	r2, r3, r5
 8004890:	9219      	str	r2, [sp, #100]	; 0x64
 8004892:	9a04      	ldr	r2, [sp, #16]
 8004894:	5d5b      	ldrb	r3, [r3, r5]
 8004896:	2a00      	cmp	r2, #0
 8004898:	d154      	bne.n	8004944 <_strtod_l+0x32c>
 800489a:	4610      	mov	r0, r2
 800489c:	2b30      	cmp	r3, #48	; 0x30
 800489e:	d02a      	beq.n	80048f6 <_strtod_l+0x2de>
 80048a0:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80048a4:	2a08      	cmp	r2, #8
 80048a6:	f200 849d 	bhi.w	80051e4 <_strtod_l+0xbcc>
 80048aa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80048ac:	920a      	str	r2, [sp, #40]	; 0x28
 80048ae:	4602      	mov	r2, r0
 80048b0:	2000      	movs	r0, #0
 80048b2:	4605      	mov	r5, r0
 80048b4:	3b30      	subs	r3, #48	; 0x30
 80048b6:	f100 0101 	add.w	r1, r0, #1
 80048ba:	d011      	beq.n	80048e0 <_strtod_l+0x2c8>
 80048bc:	440a      	add	r2, r1
 80048be:	260a      	movs	r6, #10
 80048c0:	4629      	mov	r1, r5
 80048c2:	eb00 0c05 	add.w	ip, r0, r5
 80048c6:	4561      	cmp	r1, ip
 80048c8:	d11b      	bne.n	8004902 <_strtod_l+0x2ea>
 80048ca:	4428      	add	r0, r5
 80048cc:	2808      	cmp	r0, #8
 80048ce:	f100 0501 	add.w	r5, r0, #1
 80048d2:	dc2f      	bgt.n	8004934 <_strtod_l+0x31c>
 80048d4:	210a      	movs	r1, #10
 80048d6:	9806      	ldr	r0, [sp, #24]
 80048d8:	fb01 3300 	mla	r3, r1, r0, r3
 80048dc:	9306      	str	r3, [sp, #24]
 80048de:	2100      	movs	r1, #0
 80048e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80048e2:	1c58      	adds	r0, r3, #1
 80048e4:	9019      	str	r0, [sp, #100]	; 0x64
 80048e6:	4608      	mov	r0, r1
 80048e8:	785b      	ldrb	r3, [r3, #1]
 80048ea:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80048ee:	2909      	cmp	r1, #9
 80048f0:	d9e0      	bls.n	80048b4 <_strtod_l+0x29c>
 80048f2:	2101      	movs	r1, #1
 80048f4:	e74a      	b.n	800478c <_strtod_l+0x174>
 80048f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80048f8:	3001      	adds	r0, #1
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	9219      	str	r2, [sp, #100]	; 0x64
 80048fe:	785b      	ldrb	r3, [r3, #1]
 8004900:	e7cc      	b.n	800489c <_strtod_l+0x284>
 8004902:	3101      	adds	r1, #1
 8004904:	f101 3eff 	add.w	lr, r1, #4294967295
 8004908:	f1be 0f08 	cmp.w	lr, #8
 800490c:	dc03      	bgt.n	8004916 <_strtod_l+0x2fe>
 800490e:	9f06      	ldr	r7, [sp, #24]
 8004910:	4377      	muls	r7, r6
 8004912:	9706      	str	r7, [sp, #24]
 8004914:	e7d7      	b.n	80048c6 <_strtod_l+0x2ae>
 8004916:	2910      	cmp	r1, #16
 8004918:	bfde      	ittt	le
 800491a:	9f05      	ldrle	r7, [sp, #20]
 800491c:	4377      	mulle	r7, r6
 800491e:	9705      	strle	r7, [sp, #20]
 8004920:	e7d1      	b.n	80048c6 <_strtod_l+0x2ae>
 8004922:	bf00      	nop
 8004924:	08006c4c 	.word	0x08006c4c
 8004928:	08006c40 	.word	0x08006c40
 800492c:	08006c43 	.word	0x08006c43
 8004930:	7ff00000 	.word	0x7ff00000
 8004934:	2d10      	cmp	r5, #16
 8004936:	bfdf      	itttt	le
 8004938:	210a      	movle	r1, #10
 800493a:	9805      	ldrle	r0, [sp, #20]
 800493c:	fb01 3300 	mlale	r3, r1, r0, r3
 8004940:	9305      	strle	r3, [sp, #20]
 8004942:	e7cc      	b.n	80048de <_strtod_l+0x2c6>
 8004944:	4602      	mov	r2, r0
 8004946:	9d04      	ldr	r5, [sp, #16]
 8004948:	e7cf      	b.n	80048ea <_strtod_l+0x2d2>
 800494a:	2101      	movs	r1, #1
 800494c:	e724      	b.n	8004798 <_strtod_l+0x180>
 800494e:	2300      	movs	r3, #0
 8004950:	9307      	str	r3, [sp, #28]
 8004952:	1ca3      	adds	r3, r4, #2
 8004954:	9319      	str	r3, [sp, #100]	; 0x64
 8004956:	78a3      	ldrb	r3, [r4, #2]
 8004958:	e72f      	b.n	80047ba <_strtod_l+0x1a2>
 800495a:	2301      	movs	r3, #1
 800495c:	e7f8      	b.n	8004950 <_strtod_l+0x338>
 800495e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004960:	1c5e      	adds	r6, r3, #1
 8004962:	9619      	str	r6, [sp, #100]	; 0x64
 8004964:	785b      	ldrb	r3, [r3, #1]
 8004966:	e72d      	b.n	80047c4 <_strtod_l+0x1ac>
 8004968:	fb0c 3e0e 	mla	lr, ip, lr, r3
 800496c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004970:	e736      	b.n	80047e0 <_strtod_l+0x1c8>
 8004972:	9419      	str	r4, [sp, #100]	; 0x64
 8004974:	f04f 0900 	mov.w	r9, #0
 8004978:	e748      	b.n	800480c <_strtod_l+0x1f4>
 800497a:	2b69      	cmp	r3, #105	; 0x69
 800497c:	f43f af5b 	beq.w	8004836 <_strtod_l+0x21e>
 8004980:	2b6e      	cmp	r3, #110	; 0x6e
 8004982:	f47f aea7 	bne.w	80046d4 <_strtod_l+0xbc>
 8004986:	498c      	ldr	r1, [pc, #560]	; (8004bb8 <_strtod_l+0x5a0>)
 8004988:	a819      	add	r0, sp, #100	; 0x64
 800498a:	f001 f942 	bl	8005c12 <__match>
 800498e:	2800      	cmp	r0, #0
 8004990:	f43f aea0 	beq.w	80046d4 <_strtod_l+0xbc>
 8004994:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	2b28      	cmp	r3, #40	; 0x28
 800499a:	d10e      	bne.n	80049ba <_strtod_l+0x3a2>
 800499c:	aa1c      	add	r2, sp, #112	; 0x70
 800499e:	4987      	ldr	r1, [pc, #540]	; (8004bbc <_strtod_l+0x5a4>)
 80049a0:	a819      	add	r0, sp, #100	; 0x64
 80049a2:	f001 f949 	bl	8005c38 <__hexnan>
 80049a6:	2805      	cmp	r0, #5
 80049a8:	d107      	bne.n	80049ba <_strtod_l+0x3a2>
 80049aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80049ac:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 80049b0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80049b4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80049b8:	e66e      	b.n	8004698 <_strtod_l+0x80>
 80049ba:	f8df b210 	ldr.w	fp, [pc, #528]	; 8004bcc <_strtod_l+0x5b4>
 80049be:	e74e      	b.n	800485e <_strtod_l+0x246>
 80049c0:	9b04      	ldr	r3, [sp, #16]
 80049c2:	462c      	mov	r4, r5
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	bf08      	it	eq
 80049c8:	462b      	moveq	r3, r5
 80049ca:	2d10      	cmp	r5, #16
 80049cc:	bfa8      	it	ge
 80049ce:	2410      	movge	r4, #16
 80049d0:	9806      	ldr	r0, [sp, #24]
 80049d2:	eba9 0902 	sub.w	r9, r9, r2
 80049d6:	9304      	str	r3, [sp, #16]
 80049d8:	f7fb fd04 	bl	80003e4 <__aeabi_ui2d>
 80049dc:	2c09      	cmp	r4, #9
 80049de:	4682      	mov	sl, r0
 80049e0:	468b      	mov	fp, r1
 80049e2:	dd13      	ble.n	8004a0c <_strtod_l+0x3f4>
 80049e4:	4b76      	ldr	r3, [pc, #472]	; (8004bc0 <_strtod_l+0x5a8>)
 80049e6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80049ea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80049ee:	f7fb fd6f 	bl	80004d0 <__aeabi_dmul>
 80049f2:	4606      	mov	r6, r0
 80049f4:	9805      	ldr	r0, [sp, #20]
 80049f6:	460f      	mov	r7, r1
 80049f8:	f7fb fcf4 	bl	80003e4 <__aeabi_ui2d>
 80049fc:	4602      	mov	r2, r0
 80049fe:	460b      	mov	r3, r1
 8004a00:	4630      	mov	r0, r6
 8004a02:	4639      	mov	r1, r7
 8004a04:	f7fb fbb2 	bl	800016c <__adddf3>
 8004a08:	4682      	mov	sl, r0
 8004a0a:	468b      	mov	fp, r1
 8004a0c:	2d0f      	cmp	r5, #15
 8004a0e:	dc36      	bgt.n	8004a7e <_strtod_l+0x466>
 8004a10:	f1b9 0f00 	cmp.w	r9, #0
 8004a14:	f43f ae40 	beq.w	8004698 <_strtod_l+0x80>
 8004a18:	dd24      	ble.n	8004a64 <_strtod_l+0x44c>
 8004a1a:	f1b9 0f16 	cmp.w	r9, #22
 8004a1e:	dc0b      	bgt.n	8004a38 <_strtod_l+0x420>
 8004a20:	4652      	mov	r2, sl
 8004a22:	465b      	mov	r3, fp
 8004a24:	4d66      	ldr	r5, [pc, #408]	; (8004bc0 <_strtod_l+0x5a8>)
 8004a26:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 8004a2a:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004a2e:	f7fb fd4f 	bl	80004d0 <__aeabi_dmul>
 8004a32:	4682      	mov	sl, r0
 8004a34:	468b      	mov	fp, r1
 8004a36:	e62f      	b.n	8004698 <_strtod_l+0x80>
 8004a38:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8004a3c:	4599      	cmp	r9, r3
 8004a3e:	dc1e      	bgt.n	8004a7e <_strtod_l+0x466>
 8004a40:	4c5f      	ldr	r4, [pc, #380]	; (8004bc0 <_strtod_l+0x5a8>)
 8004a42:	f1c5 050f 	rsb	r5, r5, #15
 8004a46:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004a4a:	eba9 0505 	sub.w	r5, r9, r5
 8004a4e:	4652      	mov	r2, sl
 8004a50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a54:	465b      	mov	r3, fp
 8004a56:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004a5a:	f7fb fd39 	bl	80004d0 <__aeabi_dmul>
 8004a5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004a62:	e7e4      	b.n	8004a2e <_strtod_l+0x416>
 8004a64:	f119 0f16 	cmn.w	r9, #22
 8004a68:	db09      	blt.n	8004a7e <_strtod_l+0x466>
 8004a6a:	4d55      	ldr	r5, [pc, #340]	; (8004bc0 <_strtod_l+0x5a8>)
 8004a6c:	4650      	mov	r0, sl
 8004a6e:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
 8004a72:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004a76:	4659      	mov	r1, fp
 8004a78:	f7fb fe54 	bl	8000724 <__aeabi_ddiv>
 8004a7c:	e7d9      	b.n	8004a32 <_strtod_l+0x41a>
 8004a7e:	1b2c      	subs	r4, r5, r4
 8004a80:	444c      	add	r4, r9
 8004a82:	2c00      	cmp	r4, #0
 8004a84:	dd73      	ble.n	8004b6e <_strtod_l+0x556>
 8004a86:	f014 030f 	ands.w	r3, r4, #15
 8004a8a:	d00a      	beq.n	8004aa2 <_strtod_l+0x48a>
 8004a8c:	494c      	ldr	r1, [pc, #304]	; (8004bc0 <_strtod_l+0x5a8>)
 8004a8e:	4652      	mov	r2, sl
 8004a90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004a94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a98:	465b      	mov	r3, fp
 8004a9a:	f7fb fd19 	bl	80004d0 <__aeabi_dmul>
 8004a9e:	4682      	mov	sl, r0
 8004aa0:	468b      	mov	fp, r1
 8004aa2:	f034 040f 	bics.w	r4, r4, #15
 8004aa6:	d054      	beq.n	8004b52 <_strtod_l+0x53a>
 8004aa8:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 8004aac:	dd27      	ble.n	8004afe <_strtod_l+0x4e6>
 8004aae:	f04f 0900 	mov.w	r9, #0
 8004ab2:	f8cd 9010 	str.w	r9, [sp, #16]
 8004ab6:	f8cd 901c 	str.w	r9, [sp, #28]
 8004aba:	f8cd 9018 	str.w	r9, [sp, #24]
 8004abe:	2322      	movs	r3, #34	; 0x22
 8004ac0:	f04f 0a00 	mov.w	sl, #0
 8004ac4:	f8df b108 	ldr.w	fp, [pc, #264]	; 8004bd0 <_strtod_l+0x5b8>
 8004ac8:	f8c8 3000 	str.w	r3, [r8]
 8004acc:	9b07      	ldr	r3, [sp, #28]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f43f ade2 	beq.w	8004698 <_strtod_l+0x80>
 8004ad4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004ad6:	4640      	mov	r0, r8
 8004ad8:	f001 f997 	bl	8005e0a <_Bfree>
 8004adc:	9906      	ldr	r1, [sp, #24]
 8004ade:	4640      	mov	r0, r8
 8004ae0:	f001 f993 	bl	8005e0a <_Bfree>
 8004ae4:	9904      	ldr	r1, [sp, #16]
 8004ae6:	4640      	mov	r0, r8
 8004ae8:	f001 f98f 	bl	8005e0a <_Bfree>
 8004aec:	9907      	ldr	r1, [sp, #28]
 8004aee:	4640      	mov	r0, r8
 8004af0:	f001 f98b 	bl	8005e0a <_Bfree>
 8004af4:	4649      	mov	r1, r9
 8004af6:	4640      	mov	r0, r8
 8004af8:	f001 f987 	bl	8005e0a <_Bfree>
 8004afc:	e5cc      	b.n	8004698 <_strtod_l+0x80>
 8004afe:	2300      	movs	r3, #0
 8004b00:	4650      	mov	r0, sl
 8004b02:	4659      	mov	r1, fp
 8004b04:	461f      	mov	r7, r3
 8004b06:	4e2f      	ldr	r6, [pc, #188]	; (8004bc4 <_strtod_l+0x5ac>)
 8004b08:	1124      	asrs	r4, r4, #4
 8004b0a:	2c01      	cmp	r4, #1
 8004b0c:	dc24      	bgt.n	8004b58 <_strtod_l+0x540>
 8004b0e:	b10b      	cbz	r3, 8004b14 <_strtod_l+0x4fc>
 8004b10:	4682      	mov	sl, r0
 8004b12:	468b      	mov	fp, r1
 8004b14:	4b2b      	ldr	r3, [pc, #172]	; (8004bc4 <_strtod_l+0x5ac>)
 8004b16:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004b1a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004b1e:	4652      	mov	r2, sl
 8004b20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b24:	465b      	mov	r3, fp
 8004b26:	f7fb fcd3 	bl	80004d0 <__aeabi_dmul>
 8004b2a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004b2e:	468b      	mov	fp, r1
 8004b30:	460a      	mov	r2, r1
 8004b32:	0d1b      	lsrs	r3, r3, #20
 8004b34:	4924      	ldr	r1, [pc, #144]	; (8004bc8 <_strtod_l+0x5b0>)
 8004b36:	051b      	lsls	r3, r3, #20
 8004b38:	428b      	cmp	r3, r1
 8004b3a:	4682      	mov	sl, r0
 8004b3c:	d8b7      	bhi.n	8004aae <_strtod_l+0x496>
 8004b3e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004b42:	428b      	cmp	r3, r1
 8004b44:	bf86      	itte	hi
 8004b46:	f04f 3aff 	movhi.w	sl, #4294967295
 8004b4a:	f8df b088 	ldrhi.w	fp, [pc, #136]	; 8004bd4 <_strtod_l+0x5bc>
 8004b4e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004b52:	2300      	movs	r3, #0
 8004b54:	9305      	str	r3, [sp, #20]
 8004b56:	e070      	b.n	8004c3a <_strtod_l+0x622>
 8004b58:	07e2      	lsls	r2, r4, #31
 8004b5a:	d504      	bpl.n	8004b66 <_strtod_l+0x54e>
 8004b5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004b60:	f7fb fcb6 	bl	80004d0 <__aeabi_dmul>
 8004b64:	2301      	movs	r3, #1
 8004b66:	3701      	adds	r7, #1
 8004b68:	1064      	asrs	r4, r4, #1
 8004b6a:	3608      	adds	r6, #8
 8004b6c:	e7cd      	b.n	8004b0a <_strtod_l+0x4f2>
 8004b6e:	d0f0      	beq.n	8004b52 <_strtod_l+0x53a>
 8004b70:	4264      	negs	r4, r4
 8004b72:	f014 020f 	ands.w	r2, r4, #15
 8004b76:	d00a      	beq.n	8004b8e <_strtod_l+0x576>
 8004b78:	4b11      	ldr	r3, [pc, #68]	; (8004bc0 <_strtod_l+0x5a8>)
 8004b7a:	4650      	mov	r0, sl
 8004b7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b80:	4659      	mov	r1, fp
 8004b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b86:	f7fb fdcd 	bl	8000724 <__aeabi_ddiv>
 8004b8a:	4682      	mov	sl, r0
 8004b8c:	468b      	mov	fp, r1
 8004b8e:	1124      	asrs	r4, r4, #4
 8004b90:	d0df      	beq.n	8004b52 <_strtod_l+0x53a>
 8004b92:	2c1f      	cmp	r4, #31
 8004b94:	dd20      	ble.n	8004bd8 <_strtod_l+0x5c0>
 8004b96:	f04f 0900 	mov.w	r9, #0
 8004b9a:	f8cd 9010 	str.w	r9, [sp, #16]
 8004b9e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004ba2:	f8cd 9018 	str.w	r9, [sp, #24]
 8004ba6:	2322      	movs	r3, #34	; 0x22
 8004ba8:	f04f 0a00 	mov.w	sl, #0
 8004bac:	f04f 0b00 	mov.w	fp, #0
 8004bb0:	f8c8 3000 	str.w	r3, [r8]
 8004bb4:	e78a      	b.n	8004acc <_strtod_l+0x4b4>
 8004bb6:	bf00      	nop
 8004bb8:	08006c49 	.word	0x08006c49
 8004bbc:	08006c60 	.word	0x08006c60
 8004bc0:	08006cd8 	.word	0x08006cd8
 8004bc4:	08006cb0 	.word	0x08006cb0
 8004bc8:	7ca00000 	.word	0x7ca00000
 8004bcc:	fff80000 	.word	0xfff80000
 8004bd0:	7ff00000 	.word	0x7ff00000
 8004bd4:	7fefffff 	.word	0x7fefffff
 8004bd8:	f014 0310 	ands.w	r3, r4, #16
 8004bdc:	bf18      	it	ne
 8004bde:	236a      	movne	r3, #106	; 0x6a
 8004be0:	4650      	mov	r0, sl
 8004be2:	9305      	str	r3, [sp, #20]
 8004be4:	4659      	mov	r1, fp
 8004be6:	2300      	movs	r3, #0
 8004be8:	4e9f      	ldr	r6, [pc, #636]	; (8004e68 <_strtod_l+0x850>)
 8004bea:	2c00      	cmp	r4, #0
 8004bec:	f300 8109 	bgt.w	8004e02 <_strtod_l+0x7ea>
 8004bf0:	b10b      	cbz	r3, 8004bf6 <_strtod_l+0x5de>
 8004bf2:	4682      	mov	sl, r0
 8004bf4:	468b      	mov	fp, r1
 8004bf6:	9b05      	ldr	r3, [sp, #20]
 8004bf8:	b1bb      	cbz	r3, 8004c2a <_strtod_l+0x612>
 8004bfa:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8004bfe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	4659      	mov	r1, fp
 8004c06:	dd10      	ble.n	8004c2a <_strtod_l+0x612>
 8004c08:	2b1f      	cmp	r3, #31
 8004c0a:	f340 8104 	ble.w	8004e16 <_strtod_l+0x7fe>
 8004c0e:	2b34      	cmp	r3, #52	; 0x34
 8004c10:	bfd8      	it	le
 8004c12:	f04f 32ff 	movle.w	r2, #4294967295
 8004c16:	f04f 0a00 	mov.w	sl, #0
 8004c1a:	bfcf      	iteee	gt
 8004c1c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004c20:	3b20      	suble	r3, #32
 8004c22:	fa02 f303 	lslle.w	r3, r2, r3
 8004c26:	ea03 0b01 	andle.w	fp, r3, r1
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	4650      	mov	r0, sl
 8004c30:	4659      	mov	r1, fp
 8004c32:	f7fb feb5 	bl	80009a0 <__aeabi_dcmpeq>
 8004c36:	2800      	cmp	r0, #0
 8004c38:	d1ad      	bne.n	8004b96 <_strtod_l+0x57e>
 8004c3a:	9b06      	ldr	r3, [sp, #24]
 8004c3c:	9a04      	ldr	r2, [sp, #16]
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004c42:	462b      	mov	r3, r5
 8004c44:	4640      	mov	r0, r8
 8004c46:	f001 f932 	bl	8005eae <__s2b>
 8004c4a:	9007      	str	r0, [sp, #28]
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	f43f af2e 	beq.w	8004aae <_strtod_l+0x496>
 8004c52:	f1b9 0f00 	cmp.w	r9, #0
 8004c56:	f1c9 0300 	rsb	r3, r9, #0
 8004c5a:	bfa8      	it	ge
 8004c5c:	2300      	movge	r3, #0
 8004c5e:	930e      	str	r3, [sp, #56]	; 0x38
 8004c60:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
 8004c64:	f04f 0900 	mov.w	r9, #0
 8004c68:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c6a:	f8cd 9010 	str.w	r9, [sp, #16]
 8004c6e:	9b07      	ldr	r3, [sp, #28]
 8004c70:	4640      	mov	r0, r8
 8004c72:	6859      	ldr	r1, [r3, #4]
 8004c74:	f001 f895 	bl	8005da2 <_Balloc>
 8004c78:	9006      	str	r0, [sp, #24]
 8004c7a:	2800      	cmp	r0, #0
 8004c7c:	f43f af1f 	beq.w	8004abe <_strtod_l+0x4a6>
 8004c80:	9b07      	ldr	r3, [sp, #28]
 8004c82:	300c      	adds	r0, #12
 8004c84:	691a      	ldr	r2, [r3, #16]
 8004c86:	f103 010c 	add.w	r1, r3, #12
 8004c8a:	3202      	adds	r2, #2
 8004c8c:	0092      	lsls	r2, r2, #2
 8004c8e:	f001 f87d 	bl	8005d8c <memcpy>
 8004c92:	ab1c      	add	r3, sp, #112	; 0x70
 8004c94:	9301      	str	r3, [sp, #4]
 8004c96:	ab1b      	add	r3, sp, #108	; 0x6c
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	4652      	mov	r2, sl
 8004c9c:	465b      	mov	r3, fp
 8004c9e:	4640      	mov	r0, r8
 8004ca0:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8004ca4:	f001 fbb2 	bl	800640c <__d2b>
 8004ca8:	901a      	str	r0, [sp, #104]	; 0x68
 8004caa:	2800      	cmp	r0, #0
 8004cac:	f43f af07 	beq.w	8004abe <_strtod_l+0x4a6>
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	4640      	mov	r0, r8
 8004cb4:	f001 f987 	bl	8005fc6 <__i2b>
 8004cb8:	9004      	str	r0, [sp, #16]
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2800      	cmp	r0, #0
 8004cbe:	f43f aefe 	beq.w	8004abe <_strtod_l+0x4a6>
 8004cc2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004cc4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004cc6:	2d00      	cmp	r5, #0
 8004cc8:	bfab      	itete	ge
 8004cca:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004ccc:	9b0f      	ldrlt	r3, [sp, #60]	; 0x3c
 8004cce:	195e      	addge	r6, r3, r5
 8004cd0:	1b5c      	sublt	r4, r3, r5
 8004cd2:	9b05      	ldr	r3, [sp, #20]
 8004cd4:	bfa8      	it	ge
 8004cd6:	9c0f      	ldrge	r4, [sp, #60]	; 0x3c
 8004cd8:	eba5 0503 	sub.w	r5, r5, r3
 8004cdc:	4415      	add	r5, r2
 8004cde:	4b63      	ldr	r3, [pc, #396]	; (8004e6c <_strtod_l+0x854>)
 8004ce0:	f105 35ff 	add.w	r5, r5, #4294967295
 8004ce4:	bfb8      	it	lt
 8004ce6:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004ce8:	429d      	cmp	r5, r3
 8004cea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004cee:	f280 80a4 	bge.w	8004e3a <_strtod_l+0x822>
 8004cf2:	1b5b      	subs	r3, r3, r5
 8004cf4:	2b1f      	cmp	r3, #31
 8004cf6:	eba2 0203 	sub.w	r2, r2, r3
 8004cfa:	f04f 0701 	mov.w	r7, #1
 8004cfe:	f300 8091 	bgt.w	8004e24 <_strtod_l+0x80c>
 8004d02:	2500      	movs	r5, #0
 8004d04:	fa07 f303 	lsl.w	r3, r7, r3
 8004d08:	9314      	str	r3, [sp, #80]	; 0x50
 8004d0a:	18b7      	adds	r7, r6, r2
 8004d0c:	9b05      	ldr	r3, [sp, #20]
 8004d0e:	42be      	cmp	r6, r7
 8004d10:	4414      	add	r4, r2
 8004d12:	441c      	add	r4, r3
 8004d14:	4633      	mov	r3, r6
 8004d16:	bfa8      	it	ge
 8004d18:	463b      	movge	r3, r7
 8004d1a:	42a3      	cmp	r3, r4
 8004d1c:	bfa8      	it	ge
 8004d1e:	4623      	movge	r3, r4
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	bfc2      	ittt	gt
 8004d24:	1aff      	subgt	r7, r7, r3
 8004d26:	1ae4      	subgt	r4, r4, r3
 8004d28:	1af6      	subgt	r6, r6, r3
 8004d2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d2c:	b1bb      	cbz	r3, 8004d5e <_strtod_l+0x746>
 8004d2e:	461a      	mov	r2, r3
 8004d30:	9904      	ldr	r1, [sp, #16]
 8004d32:	4640      	mov	r0, r8
 8004d34:	f001 f9dc 	bl	80060f0 <__pow5mult>
 8004d38:	9004      	str	r0, [sp, #16]
 8004d3a:	2800      	cmp	r0, #0
 8004d3c:	f43f aebf 	beq.w	8004abe <_strtod_l+0x4a6>
 8004d40:	4601      	mov	r1, r0
 8004d42:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004d44:	4640      	mov	r0, r8
 8004d46:	f001 f947 	bl	8005fd8 <__multiply>
 8004d4a:	9008      	str	r0, [sp, #32]
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	f43f aeb6 	beq.w	8004abe <_strtod_l+0x4a6>
 8004d52:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004d54:	4640      	mov	r0, r8
 8004d56:	f001 f858 	bl	8005e0a <_Bfree>
 8004d5a:	9b08      	ldr	r3, [sp, #32]
 8004d5c:	931a      	str	r3, [sp, #104]	; 0x68
 8004d5e:	2f00      	cmp	r7, #0
 8004d60:	dc6f      	bgt.n	8004e42 <_strtod_l+0x82a>
 8004d62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d175      	bne.n	8004e54 <_strtod_l+0x83c>
 8004d68:	2c00      	cmp	r4, #0
 8004d6a:	dd08      	ble.n	8004d7e <_strtod_l+0x766>
 8004d6c:	4622      	mov	r2, r4
 8004d6e:	9906      	ldr	r1, [sp, #24]
 8004d70:	4640      	mov	r0, r8
 8004d72:	f001 fa0b 	bl	800618c <__lshift>
 8004d76:	9006      	str	r0, [sp, #24]
 8004d78:	2800      	cmp	r0, #0
 8004d7a:	f43f aea0 	beq.w	8004abe <_strtod_l+0x4a6>
 8004d7e:	2e00      	cmp	r6, #0
 8004d80:	dd08      	ble.n	8004d94 <_strtod_l+0x77c>
 8004d82:	4632      	mov	r2, r6
 8004d84:	9904      	ldr	r1, [sp, #16]
 8004d86:	4640      	mov	r0, r8
 8004d88:	f001 fa00 	bl	800618c <__lshift>
 8004d8c:	9004      	str	r0, [sp, #16]
 8004d8e:	2800      	cmp	r0, #0
 8004d90:	f43f ae95 	beq.w	8004abe <_strtod_l+0x4a6>
 8004d94:	9a06      	ldr	r2, [sp, #24]
 8004d96:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004d98:	4640      	mov	r0, r8
 8004d9a:	f001 fa62 	bl	8006262 <__mdiff>
 8004d9e:	4681      	mov	r9, r0
 8004da0:	2800      	cmp	r0, #0
 8004da2:	f43f ae8c 	beq.w	8004abe <_strtod_l+0x4a6>
 8004da6:	2400      	movs	r4, #0
 8004da8:	68c3      	ldr	r3, [r0, #12]
 8004daa:	9904      	ldr	r1, [sp, #16]
 8004dac:	60c4      	str	r4, [r0, #12]
 8004dae:	9308      	str	r3, [sp, #32]
 8004db0:	f001 fa3d 	bl	800622e <__mcmp>
 8004db4:	42a0      	cmp	r0, r4
 8004db6:	da5b      	bge.n	8004e70 <_strtod_l+0x858>
 8004db8:	9b08      	ldr	r3, [sp, #32]
 8004dba:	b9f3      	cbnz	r3, 8004dfa <_strtod_l+0x7e2>
 8004dbc:	f1ba 0f00 	cmp.w	sl, #0
 8004dc0:	d11b      	bne.n	8004dfa <_strtod_l+0x7e2>
 8004dc2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004dc6:	b9c3      	cbnz	r3, 8004dfa <_strtod_l+0x7e2>
 8004dc8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004dcc:	0d1b      	lsrs	r3, r3, #20
 8004dce:	051b      	lsls	r3, r3, #20
 8004dd0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004dd4:	d911      	bls.n	8004dfa <_strtod_l+0x7e2>
 8004dd6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8004dda:	b91b      	cbnz	r3, 8004de4 <_strtod_l+0x7cc>
 8004ddc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	dd0a      	ble.n	8004dfa <_strtod_l+0x7e2>
 8004de4:	4649      	mov	r1, r9
 8004de6:	2201      	movs	r2, #1
 8004de8:	4640      	mov	r0, r8
 8004dea:	f001 f9cf 	bl	800618c <__lshift>
 8004dee:	9904      	ldr	r1, [sp, #16]
 8004df0:	4681      	mov	r9, r0
 8004df2:	f001 fa1c 	bl	800622e <__mcmp>
 8004df6:	2800      	cmp	r0, #0
 8004df8:	dc6b      	bgt.n	8004ed2 <_strtod_l+0x8ba>
 8004dfa:	9b05      	ldr	r3, [sp, #20]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d175      	bne.n	8004eec <_strtod_l+0x8d4>
 8004e00:	e668      	b.n	8004ad4 <_strtod_l+0x4bc>
 8004e02:	07e2      	lsls	r2, r4, #31
 8004e04:	d504      	bpl.n	8004e10 <_strtod_l+0x7f8>
 8004e06:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004e0a:	f7fb fb61 	bl	80004d0 <__aeabi_dmul>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	1064      	asrs	r4, r4, #1
 8004e12:	3608      	adds	r6, #8
 8004e14:	e6e9      	b.n	8004bea <_strtod_l+0x5d2>
 8004e16:	f04f 32ff 	mov.w	r2, #4294967295
 8004e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1e:	ea03 0a0a 	and.w	sl, r3, sl
 8004e22:	e702      	b.n	8004c2a <_strtod_l+0x612>
 8004e24:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004e28:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004e2c:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004e30:	35e2      	adds	r5, #226	; 0xe2
 8004e32:	fa07 f505 	lsl.w	r5, r7, r5
 8004e36:	9714      	str	r7, [sp, #80]	; 0x50
 8004e38:	e767      	b.n	8004d0a <_strtod_l+0x6f2>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	2500      	movs	r5, #0
 8004e3e:	9314      	str	r3, [sp, #80]	; 0x50
 8004e40:	e763      	b.n	8004d0a <_strtod_l+0x6f2>
 8004e42:	463a      	mov	r2, r7
 8004e44:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004e46:	4640      	mov	r0, r8
 8004e48:	f001 f9a0 	bl	800618c <__lshift>
 8004e4c:	901a      	str	r0, [sp, #104]	; 0x68
 8004e4e:	2800      	cmp	r0, #0
 8004e50:	d187      	bne.n	8004d62 <_strtod_l+0x74a>
 8004e52:	e634      	b.n	8004abe <_strtod_l+0x4a6>
 8004e54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004e56:	9906      	ldr	r1, [sp, #24]
 8004e58:	4640      	mov	r0, r8
 8004e5a:	f001 f949 	bl	80060f0 <__pow5mult>
 8004e5e:	9006      	str	r0, [sp, #24]
 8004e60:	2800      	cmp	r0, #0
 8004e62:	d181      	bne.n	8004d68 <_strtod_l+0x750>
 8004e64:	e62b      	b.n	8004abe <_strtod_l+0x4a6>
 8004e66:	bf00      	nop
 8004e68:	08006c78 	.word	0x08006c78
 8004e6c:	fffffc02 	.word	0xfffffc02
 8004e70:	f040 8086 	bne.w	8004f80 <_strtod_l+0x968>
 8004e74:	9a08      	ldr	r2, [sp, #32]
 8004e76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004e7a:	b332      	cbz	r2, 8004eca <_strtod_l+0x8b2>
 8004e7c:	4aac      	ldr	r2, [pc, #688]	; (8005130 <_strtod_l+0xb18>)
 8004e7e:	4659      	mov	r1, fp
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d152      	bne.n	8004f2a <_strtod_l+0x912>
 8004e84:	9b05      	ldr	r3, [sp, #20]
 8004e86:	4650      	mov	r0, sl
 8004e88:	b1d3      	cbz	r3, 8004ec0 <_strtod_l+0x8a8>
 8004e8a:	4aaa      	ldr	r2, [pc, #680]	; (8005134 <_strtod_l+0xb1c>)
 8004e8c:	f04f 34ff 	mov.w	r4, #4294967295
 8004e90:	400a      	ands	r2, r1
 8004e92:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004e96:	d816      	bhi.n	8004ec6 <_strtod_l+0x8ae>
 8004e98:	0d12      	lsrs	r2, r2, #20
 8004e9a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004e9e:	fa04 f303 	lsl.w	r3, r4, r3
 8004ea2:	4283      	cmp	r3, r0
 8004ea4:	d141      	bne.n	8004f2a <_strtod_l+0x912>
 8004ea6:	4aa4      	ldr	r2, [pc, #656]	; (8005138 <_strtod_l+0xb20>)
 8004ea8:	4291      	cmp	r1, r2
 8004eaa:	d102      	bne.n	8004eb2 <_strtod_l+0x89a>
 8004eac:	3301      	adds	r3, #1
 8004eae:	f43f ae06 	beq.w	8004abe <_strtod_l+0x4a6>
 8004eb2:	4ba0      	ldr	r3, [pc, #640]	; (8005134 <_strtod_l+0xb1c>)
 8004eb4:	f04f 0a00 	mov.w	sl, #0
 8004eb8:	400b      	ands	r3, r1
 8004eba:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8004ebe:	e79c      	b.n	8004dfa <_strtod_l+0x7e2>
 8004ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ec4:	e7ed      	b.n	8004ea2 <_strtod_l+0x88a>
 8004ec6:	4623      	mov	r3, r4
 8004ec8:	e7eb      	b.n	8004ea2 <_strtod_l+0x88a>
 8004eca:	bb73      	cbnz	r3, 8004f2a <_strtod_l+0x912>
 8004ecc:	f1ba 0f00 	cmp.w	sl, #0
 8004ed0:	d12b      	bne.n	8004f2a <_strtod_l+0x912>
 8004ed2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004ed6:	9a05      	ldr	r2, [sp, #20]
 8004ed8:	0d1b      	lsrs	r3, r3, #20
 8004eda:	051b      	lsls	r3, r3, #20
 8004edc:	b1e2      	cbz	r2, 8004f18 <_strtod_l+0x900>
 8004ede:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004ee2:	dc19      	bgt.n	8004f18 <_strtod_l+0x900>
 8004ee4:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 8004ee8:	f77f ae5d 	ble.w	8004ba6 <_strtod_l+0x58e>
 8004eec:	4b93      	ldr	r3, [pc, #588]	; (800513c <_strtod_l+0xb24>)
 8004eee:	4650      	mov	r0, sl
 8004ef0:	930d      	str	r3, [sp, #52]	; 0x34
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	930c      	str	r3, [sp, #48]	; 0x30
 8004ef6:	4659      	mov	r1, fp
 8004ef8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004efc:	f7fb fae8 	bl	80004d0 <__aeabi_dmul>
 8004f00:	4682      	mov	sl, r0
 8004f02:	468b      	mov	fp, r1
 8004f04:	2900      	cmp	r1, #0
 8004f06:	f47f ade5 	bne.w	8004ad4 <_strtod_l+0x4bc>
 8004f0a:	2800      	cmp	r0, #0
 8004f0c:	f47f ade2 	bne.w	8004ad4 <_strtod_l+0x4bc>
 8004f10:	2322      	movs	r3, #34	; 0x22
 8004f12:	f8c8 3000 	str.w	r3, [r8]
 8004f16:	e5dd      	b.n	8004ad4 <_strtod_l+0x4bc>
 8004f18:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004f1c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004f20:	f04f 3aff 	mov.w	sl, #4294967295
 8004f24:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004f28:	e767      	b.n	8004dfa <_strtod_l+0x7e2>
 8004f2a:	b19d      	cbz	r5, 8004f54 <_strtod_l+0x93c>
 8004f2c:	ea15 0f0b 	tst.w	r5, fp
 8004f30:	f43f af63 	beq.w	8004dfa <_strtod_l+0x7e2>
 8004f34:	9b08      	ldr	r3, [sp, #32]
 8004f36:	9a05      	ldr	r2, [sp, #20]
 8004f38:	4650      	mov	r0, sl
 8004f3a:	4659      	mov	r1, fp
 8004f3c:	b173      	cbz	r3, 8004f5c <_strtod_l+0x944>
 8004f3e:	f7ff fb4a 	bl	80045d6 <sulp>
 8004f42:	4602      	mov	r2, r0
 8004f44:	460b      	mov	r3, r1
 8004f46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f4a:	f7fb f90f 	bl	800016c <__adddf3>
 8004f4e:	4682      	mov	sl, r0
 8004f50:	468b      	mov	fp, r1
 8004f52:	e752      	b.n	8004dfa <_strtod_l+0x7e2>
 8004f54:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004f56:	ea13 0f0a 	tst.w	r3, sl
 8004f5a:	e7e9      	b.n	8004f30 <_strtod_l+0x918>
 8004f5c:	f7ff fb3b 	bl	80045d6 <sulp>
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
 8004f64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f68:	f7fb f8fe 	bl	8000168 <__aeabi_dsub>
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	2300      	movs	r3, #0
 8004f70:	4682      	mov	sl, r0
 8004f72:	468b      	mov	fp, r1
 8004f74:	f7fb fd14 	bl	80009a0 <__aeabi_dcmpeq>
 8004f78:	2800      	cmp	r0, #0
 8004f7a:	f47f ae14 	bne.w	8004ba6 <_strtod_l+0x58e>
 8004f7e:	e73c      	b.n	8004dfa <_strtod_l+0x7e2>
 8004f80:	9904      	ldr	r1, [sp, #16]
 8004f82:	4648      	mov	r0, r9
 8004f84:	f001 fa91 	bl	80064aa <__ratio>
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f8e:	4606      	mov	r6, r0
 8004f90:	460f      	mov	r7, r1
 8004f92:	f7fb fd19 	bl	80009c8 <__aeabi_dcmple>
 8004f96:	2800      	cmp	r0, #0
 8004f98:	d070      	beq.n	800507c <_strtod_l+0xa64>
 8004f9a:	9b08      	ldr	r3, [sp, #32]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d043      	beq.n	8005028 <_strtod_l+0xa10>
 8004fa0:	2600      	movs	r6, #0
 8004fa2:	4f67      	ldr	r7, [pc, #412]	; (8005140 <_strtod_l+0xb28>)
 8004fa4:	4d66      	ldr	r5, [pc, #408]	; (8005140 <_strtod_l+0xb28>)
 8004fa6:	4b63      	ldr	r3, [pc, #396]	; (8005134 <_strtod_l+0xb1c>)
 8004fa8:	ea0b 0303 	and.w	r3, fp, r3
 8004fac:	9314      	str	r3, [sp, #80]	; 0x50
 8004fae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004fb0:	4b64      	ldr	r3, [pc, #400]	; (8005144 <_strtod_l+0xb2c>)
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	f040 80ce 	bne.w	8005154 <_strtod_l+0xb3c>
 8004fb8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004fbc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004fc0:	4650      	mov	r0, sl
 8004fc2:	4659      	mov	r1, fp
 8004fc4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004fc8:	f001 f9aa 	bl	8006320 <__ulp>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4630      	mov	r0, r6
 8004fd2:	4639      	mov	r1, r7
 8004fd4:	f7fb fa7c 	bl	80004d0 <__aeabi_dmul>
 8004fd8:	4652      	mov	r2, sl
 8004fda:	465b      	mov	r3, fp
 8004fdc:	f7fb f8c6 	bl	800016c <__adddf3>
 8004fe0:	4a54      	ldr	r2, [pc, #336]	; (8005134 <_strtod_l+0xb1c>)
 8004fe2:	4b59      	ldr	r3, [pc, #356]	; (8005148 <_strtod_l+0xb30>)
 8004fe4:	400a      	ands	r2, r1
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	4682      	mov	sl, r0
 8004fea:	d95d      	bls.n	80050a8 <_strtod_l+0xa90>
 8004fec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004fee:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d103      	bne.n	8004ffe <_strtod_l+0x9e6>
 8004ff6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	f43f ad60 	beq.w	8004abe <_strtod_l+0x4a6>
 8004ffe:	f04f 3aff 	mov.w	sl, #4294967295
 8005002:	f8df b134 	ldr.w	fp, [pc, #308]	; 8005138 <_strtod_l+0xb20>
 8005006:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005008:	4640      	mov	r0, r8
 800500a:	f000 fefe 	bl	8005e0a <_Bfree>
 800500e:	9906      	ldr	r1, [sp, #24]
 8005010:	4640      	mov	r0, r8
 8005012:	f000 fefa 	bl	8005e0a <_Bfree>
 8005016:	9904      	ldr	r1, [sp, #16]
 8005018:	4640      	mov	r0, r8
 800501a:	f000 fef6 	bl	8005e0a <_Bfree>
 800501e:	4649      	mov	r1, r9
 8005020:	4640      	mov	r0, r8
 8005022:	f000 fef2 	bl	8005e0a <_Bfree>
 8005026:	e622      	b.n	8004c6e <_strtod_l+0x656>
 8005028:	f1ba 0f00 	cmp.w	sl, #0
 800502c:	d118      	bne.n	8005060 <_strtod_l+0xa48>
 800502e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005032:	b9e3      	cbnz	r3, 800506e <_strtod_l+0xa56>
 8005034:	2200      	movs	r2, #0
 8005036:	4b42      	ldr	r3, [pc, #264]	; (8005140 <_strtod_l+0xb28>)
 8005038:	4630      	mov	r0, r6
 800503a:	4639      	mov	r1, r7
 800503c:	f7fb fcba 	bl	80009b4 <__aeabi_dcmplt>
 8005040:	b9c8      	cbnz	r0, 8005076 <_strtod_l+0xa5e>
 8005042:	2200      	movs	r2, #0
 8005044:	4b41      	ldr	r3, [pc, #260]	; (800514c <_strtod_l+0xb34>)
 8005046:	4630      	mov	r0, r6
 8005048:	4639      	mov	r1, r7
 800504a:	f7fb fa41 	bl	80004d0 <__aeabi_dmul>
 800504e:	4604      	mov	r4, r0
 8005050:	460d      	mov	r5, r1
 8005052:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005056:	9416      	str	r4, [sp, #88]	; 0x58
 8005058:	9317      	str	r3, [sp, #92]	; 0x5c
 800505a:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800505e:	e7a2      	b.n	8004fa6 <_strtod_l+0x98e>
 8005060:	f1ba 0f01 	cmp.w	sl, #1
 8005064:	d103      	bne.n	800506e <_strtod_l+0xa56>
 8005066:	f1bb 0f00 	cmp.w	fp, #0
 800506a:	f43f ad9c 	beq.w	8004ba6 <_strtod_l+0x58e>
 800506e:	2600      	movs	r6, #0
 8005070:	4f37      	ldr	r7, [pc, #220]	; (8005150 <_strtod_l+0xb38>)
 8005072:	2400      	movs	r4, #0
 8005074:	e796      	b.n	8004fa4 <_strtod_l+0x98c>
 8005076:	9c08      	ldr	r4, [sp, #32]
 8005078:	4d34      	ldr	r5, [pc, #208]	; (800514c <_strtod_l+0xb34>)
 800507a:	e7ea      	b.n	8005052 <_strtod_l+0xa3a>
 800507c:	4b33      	ldr	r3, [pc, #204]	; (800514c <_strtod_l+0xb34>)
 800507e:	2200      	movs	r2, #0
 8005080:	4630      	mov	r0, r6
 8005082:	4639      	mov	r1, r7
 8005084:	f7fb fa24 	bl	80004d0 <__aeabi_dmul>
 8005088:	9b08      	ldr	r3, [sp, #32]
 800508a:	4604      	mov	r4, r0
 800508c:	460d      	mov	r5, r1
 800508e:	b933      	cbnz	r3, 800509e <_strtod_l+0xa86>
 8005090:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005094:	9010      	str	r0, [sp, #64]	; 0x40
 8005096:	9311      	str	r3, [sp, #68]	; 0x44
 8005098:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800509c:	e783      	b.n	8004fa6 <_strtod_l+0x98e>
 800509e:	4602      	mov	r2, r0
 80050a0:	460b      	mov	r3, r1
 80050a2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80050a6:	e7f7      	b.n	8005098 <_strtod_l+0xa80>
 80050a8:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
 80050ac:	9b05      	ldr	r3, [sp, #20]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1a9      	bne.n	8005006 <_strtod_l+0x9ee>
 80050b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80050b6:	0d1b      	lsrs	r3, r3, #20
 80050b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80050ba:	051b      	lsls	r3, r3, #20
 80050bc:	429a      	cmp	r2, r3
 80050be:	465e      	mov	r6, fp
 80050c0:	d1a1      	bne.n	8005006 <_strtod_l+0x9ee>
 80050c2:	4629      	mov	r1, r5
 80050c4:	4620      	mov	r0, r4
 80050c6:	f7fb fc9d 	bl	8000a04 <__aeabi_d2iz>
 80050ca:	f7fb f99b 	bl	8000404 <__aeabi_i2d>
 80050ce:	460b      	mov	r3, r1
 80050d0:	4602      	mov	r2, r0
 80050d2:	4629      	mov	r1, r5
 80050d4:	4620      	mov	r0, r4
 80050d6:	f7fb f847 	bl	8000168 <__aeabi_dsub>
 80050da:	9b08      	ldr	r3, [sp, #32]
 80050dc:	4604      	mov	r4, r0
 80050de:	460d      	mov	r5, r1
 80050e0:	b933      	cbnz	r3, 80050f0 <_strtod_l+0xad8>
 80050e2:	f1ba 0f00 	cmp.w	sl, #0
 80050e6:	d103      	bne.n	80050f0 <_strtod_l+0xad8>
 80050e8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80050ec:	2e00      	cmp	r6, #0
 80050ee:	d06c      	beq.n	80051ca <_strtod_l+0xbb2>
 80050f0:	a30b      	add	r3, pc, #44	; (adr r3, 8005120 <_strtod_l+0xb08>)
 80050f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f6:	4620      	mov	r0, r4
 80050f8:	4629      	mov	r1, r5
 80050fa:	f7fb fc5b 	bl	80009b4 <__aeabi_dcmplt>
 80050fe:	2800      	cmp	r0, #0
 8005100:	f47f ace8 	bne.w	8004ad4 <_strtod_l+0x4bc>
 8005104:	a308      	add	r3, pc, #32	; (adr r3, 8005128 <_strtod_l+0xb10>)
 8005106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510a:	4620      	mov	r0, r4
 800510c:	4629      	mov	r1, r5
 800510e:	f7fb fc6f 	bl	80009f0 <__aeabi_dcmpgt>
 8005112:	2800      	cmp	r0, #0
 8005114:	f43f af77 	beq.w	8005006 <_strtod_l+0x9ee>
 8005118:	e4dc      	b.n	8004ad4 <_strtod_l+0x4bc>
 800511a:	bf00      	nop
 800511c:	f3af 8000 	nop.w
 8005120:	94a03595 	.word	0x94a03595
 8005124:	3fdfffff 	.word	0x3fdfffff
 8005128:	35afe535 	.word	0x35afe535
 800512c:	3fe00000 	.word	0x3fe00000
 8005130:	000fffff 	.word	0x000fffff
 8005134:	7ff00000 	.word	0x7ff00000
 8005138:	7fefffff 	.word	0x7fefffff
 800513c:	39500000 	.word	0x39500000
 8005140:	3ff00000 	.word	0x3ff00000
 8005144:	7fe00000 	.word	0x7fe00000
 8005148:	7c9fffff 	.word	0x7c9fffff
 800514c:	3fe00000 	.word	0x3fe00000
 8005150:	bff00000 	.word	0xbff00000
 8005154:	9b05      	ldr	r3, [sp, #20]
 8005156:	b313      	cbz	r3, 800519e <_strtod_l+0xb86>
 8005158:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800515a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800515e:	d81e      	bhi.n	800519e <_strtod_l+0xb86>
 8005160:	a325      	add	r3, pc, #148	; (adr r3, 80051f8 <_strtod_l+0xbe0>)
 8005162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005166:	4620      	mov	r0, r4
 8005168:	4629      	mov	r1, r5
 800516a:	f7fb fc2d 	bl	80009c8 <__aeabi_dcmple>
 800516e:	b190      	cbz	r0, 8005196 <_strtod_l+0xb7e>
 8005170:	4629      	mov	r1, r5
 8005172:	4620      	mov	r0, r4
 8005174:	f7fb fc6e 	bl	8000a54 <__aeabi_d2uiz>
 8005178:	2800      	cmp	r0, #0
 800517a:	bf08      	it	eq
 800517c:	2001      	moveq	r0, #1
 800517e:	f7fb f931 	bl	80003e4 <__aeabi_ui2d>
 8005182:	9b08      	ldr	r3, [sp, #32]
 8005184:	4604      	mov	r4, r0
 8005186:	460d      	mov	r5, r1
 8005188:	b9d3      	cbnz	r3, 80051c0 <_strtod_l+0xba8>
 800518a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800518e:	9012      	str	r0, [sp, #72]	; 0x48
 8005190:	9313      	str	r3, [sp, #76]	; 0x4c
 8005192:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005196:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005198:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800519c:	1a9f      	subs	r7, r3, r2
 800519e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80051a2:	f001 f8bd 	bl	8006320 <__ulp>
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	4630      	mov	r0, r6
 80051ac:	4639      	mov	r1, r7
 80051ae:	f7fb f98f 	bl	80004d0 <__aeabi_dmul>
 80051b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80051b6:	f7fa ffd9 	bl	800016c <__adddf3>
 80051ba:	4682      	mov	sl, r0
 80051bc:	468b      	mov	fp, r1
 80051be:	e775      	b.n	80050ac <_strtod_l+0xa94>
 80051c0:	4602      	mov	r2, r0
 80051c2:	460b      	mov	r3, r1
 80051c4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80051c8:	e7e3      	b.n	8005192 <_strtod_l+0xb7a>
 80051ca:	a30d      	add	r3, pc, #52	; (adr r3, 8005200 <_strtod_l+0xbe8>)
 80051cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d0:	f7fb fbf0 	bl	80009b4 <__aeabi_dcmplt>
 80051d4:	e79d      	b.n	8005112 <_strtod_l+0xafa>
 80051d6:	2300      	movs	r3, #0
 80051d8:	9309      	str	r3, [sp, #36]	; 0x24
 80051da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80051dc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80051de:	6013      	str	r3, [r2, #0]
 80051e0:	f7ff ba5e 	b.w	80046a0 <_strtod_l+0x88>
 80051e4:	2b65      	cmp	r3, #101	; 0x65
 80051e6:	f04f 0200 	mov.w	r2, #0
 80051ea:	f43f abae 	beq.w	800494a <_strtod_l+0x332>
 80051ee:	4615      	mov	r5, r2
 80051f0:	2101      	movs	r1, #1
 80051f2:	f7ff bacd 	b.w	8004790 <_strtod_l+0x178>
 80051f6:	bf00      	nop
 80051f8:	ffc00000 	.word	0xffc00000
 80051fc:	41dfffff 	.word	0x41dfffff
 8005200:	94a03595 	.word	0x94a03595
 8005204:	3fcfffff 	.word	0x3fcfffff

08005208 <strtod>:
 8005208:	4b06      	ldr	r3, [pc, #24]	; (8005224 <strtod+0x1c>)
 800520a:	b410      	push	{r4}
 800520c:	681c      	ldr	r4, [r3, #0]
 800520e:	4a06      	ldr	r2, [pc, #24]	; (8005228 <strtod+0x20>)
 8005210:	6a23      	ldr	r3, [r4, #32]
 8005212:	2b00      	cmp	r3, #0
 8005214:	bf08      	it	eq
 8005216:	4613      	moveq	r3, r2
 8005218:	460a      	mov	r2, r1
 800521a:	4601      	mov	r1, r0
 800521c:	4620      	mov	r0, r4
 800521e:	bc10      	pop	{r4}
 8005220:	f7ff b9fa 	b.w	8004618 <_strtod_l>
 8005224:	2000042c 	.word	0x2000042c
 8005228:	20000520 	.word	0x20000520

0800522c <strtok>:
 800522c:	4b14      	ldr	r3, [pc, #80]	; (8005280 <strtok+0x54>)
 800522e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005232:	681d      	ldr	r5, [r3, #0]
 8005234:	4606      	mov	r6, r0
 8005236:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
 800523a:	460f      	mov	r7, r1
 800523c:	b9bc      	cbnz	r4, 800526e <strtok+0x42>
 800523e:	2050      	movs	r0, #80	; 0x50
 8005240:	f7fe ff7a 	bl	8004138 <malloc>
 8005244:	f8c5 00e8 	str.w	r0, [r5, #232]	; 0xe8
 8005248:	6004      	str	r4, [r0, #0]
 800524a:	6044      	str	r4, [r0, #4]
 800524c:	6084      	str	r4, [r0, #8]
 800524e:	60c4      	str	r4, [r0, #12]
 8005250:	6104      	str	r4, [r0, #16]
 8005252:	6144      	str	r4, [r0, #20]
 8005254:	6184      	str	r4, [r0, #24]
 8005256:	6284      	str	r4, [r0, #40]	; 0x28
 8005258:	62c4      	str	r4, [r0, #44]	; 0x2c
 800525a:	6304      	str	r4, [r0, #48]	; 0x30
 800525c:	6344      	str	r4, [r0, #52]	; 0x34
 800525e:	6384      	str	r4, [r0, #56]	; 0x38
 8005260:	63c4      	str	r4, [r0, #60]	; 0x3c
 8005262:	6404      	str	r4, [r0, #64]	; 0x40
 8005264:	6444      	str	r4, [r0, #68]	; 0x44
 8005266:	6484      	str	r4, [r0, #72]	; 0x48
 8005268:	64c4      	str	r4, [r0, #76]	; 0x4c
 800526a:	7704      	strb	r4, [r0, #28]
 800526c:	6244      	str	r4, [r0, #36]	; 0x24
 800526e:	f8d5 20e8 	ldr.w	r2, [r5, #232]	; 0xe8
 8005272:	4639      	mov	r1, r7
 8005274:	4630      	mov	r0, r6
 8005276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800527a:	2301      	movs	r3, #1
 800527c:	f000 b802 	b.w	8005284 <__strtok_r>
 8005280:	2000042c 	.word	0x2000042c

08005284 <__strtok_r>:
 8005284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005286:	b918      	cbnz	r0, 8005290 <__strtok_r+0xc>
 8005288:	6810      	ldr	r0, [r2, #0]
 800528a:	b908      	cbnz	r0, 8005290 <__strtok_r+0xc>
 800528c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800528e:	4620      	mov	r0, r4
 8005290:	4604      	mov	r4, r0
 8005292:	460f      	mov	r7, r1
 8005294:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005298:	f817 6b01 	ldrb.w	r6, [r7], #1
 800529c:	b91e      	cbnz	r6, 80052a6 <__strtok_r+0x22>
 800529e:	b965      	cbnz	r5, 80052ba <__strtok_r+0x36>
 80052a0:	6015      	str	r5, [r2, #0]
 80052a2:	4628      	mov	r0, r5
 80052a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052a6:	42b5      	cmp	r5, r6
 80052a8:	d1f6      	bne.n	8005298 <__strtok_r+0x14>
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1ef      	bne.n	800528e <__strtok_r+0xa>
 80052ae:	6014      	str	r4, [r2, #0]
 80052b0:	7003      	strb	r3, [r0, #0]
 80052b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052b4:	461c      	mov	r4, r3
 80052b6:	e00c      	b.n	80052d2 <__strtok_r+0x4e>
 80052b8:	b915      	cbnz	r5, 80052c0 <__strtok_r+0x3c>
 80052ba:	460e      	mov	r6, r1
 80052bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80052c0:	f816 5b01 	ldrb.w	r5, [r6], #1
 80052c4:	42ab      	cmp	r3, r5
 80052c6:	d1f7      	bne.n	80052b8 <__strtok_r+0x34>
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d0f3      	beq.n	80052b4 <__strtok_r+0x30>
 80052cc:	2300      	movs	r3, #0
 80052ce:	f804 3c01 	strb.w	r3, [r4, #-1]
 80052d2:	6014      	str	r4, [r2, #0]
 80052d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052d6 <_strtol_l.isra.0>:
 80052d6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052da:	4680      	mov	r8, r0
 80052dc:	4689      	mov	r9, r1
 80052de:	4692      	mov	sl, r2
 80052e0:	461f      	mov	r7, r3
 80052e2:	468b      	mov	fp, r1
 80052e4:	465d      	mov	r5, fp
 80052e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80052e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80052ec:	f000 fd34 	bl	8005d58 <__locale_ctype_ptr_l>
 80052f0:	4420      	add	r0, r4
 80052f2:	7846      	ldrb	r6, [r0, #1]
 80052f4:	f016 0608 	ands.w	r6, r6, #8
 80052f8:	d10b      	bne.n	8005312 <_strtol_l.isra.0+0x3c>
 80052fa:	2c2d      	cmp	r4, #45	; 0x2d
 80052fc:	d10b      	bne.n	8005316 <_strtol_l.isra.0+0x40>
 80052fe:	2601      	movs	r6, #1
 8005300:	782c      	ldrb	r4, [r5, #0]
 8005302:	f10b 0502 	add.w	r5, fp, #2
 8005306:	b167      	cbz	r7, 8005322 <_strtol_l.isra.0+0x4c>
 8005308:	2f10      	cmp	r7, #16
 800530a:	d114      	bne.n	8005336 <_strtol_l.isra.0+0x60>
 800530c:	2c30      	cmp	r4, #48	; 0x30
 800530e:	d00a      	beq.n	8005326 <_strtol_l.isra.0+0x50>
 8005310:	e011      	b.n	8005336 <_strtol_l.isra.0+0x60>
 8005312:	46ab      	mov	fp, r5
 8005314:	e7e6      	b.n	80052e4 <_strtol_l.isra.0+0xe>
 8005316:	2c2b      	cmp	r4, #43	; 0x2b
 8005318:	bf04      	itt	eq
 800531a:	782c      	ldrbeq	r4, [r5, #0]
 800531c:	f10b 0502 	addeq.w	r5, fp, #2
 8005320:	e7f1      	b.n	8005306 <_strtol_l.isra.0+0x30>
 8005322:	2c30      	cmp	r4, #48	; 0x30
 8005324:	d127      	bne.n	8005376 <_strtol_l.isra.0+0xa0>
 8005326:	782b      	ldrb	r3, [r5, #0]
 8005328:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800532c:	2b58      	cmp	r3, #88	; 0x58
 800532e:	d14b      	bne.n	80053c8 <_strtol_l.isra.0+0xf2>
 8005330:	2710      	movs	r7, #16
 8005332:	786c      	ldrb	r4, [r5, #1]
 8005334:	3502      	adds	r5, #2
 8005336:	2e00      	cmp	r6, #0
 8005338:	bf0c      	ite	eq
 800533a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800533e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005342:	2200      	movs	r2, #0
 8005344:	fbb1 fef7 	udiv	lr, r1, r7
 8005348:	4610      	mov	r0, r2
 800534a:	fb07 1c1e 	mls	ip, r7, lr, r1
 800534e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005352:	2b09      	cmp	r3, #9
 8005354:	d811      	bhi.n	800537a <_strtol_l.isra.0+0xa4>
 8005356:	461c      	mov	r4, r3
 8005358:	42a7      	cmp	r7, r4
 800535a:	dd1d      	ble.n	8005398 <_strtol_l.isra.0+0xc2>
 800535c:	1c53      	adds	r3, r2, #1
 800535e:	d007      	beq.n	8005370 <_strtol_l.isra.0+0x9a>
 8005360:	4586      	cmp	lr, r0
 8005362:	d316      	bcc.n	8005392 <_strtol_l.isra.0+0xbc>
 8005364:	d101      	bne.n	800536a <_strtol_l.isra.0+0x94>
 8005366:	45a4      	cmp	ip, r4
 8005368:	db13      	blt.n	8005392 <_strtol_l.isra.0+0xbc>
 800536a:	2201      	movs	r2, #1
 800536c:	fb00 4007 	mla	r0, r0, r7, r4
 8005370:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005374:	e7eb      	b.n	800534e <_strtol_l.isra.0+0x78>
 8005376:	270a      	movs	r7, #10
 8005378:	e7dd      	b.n	8005336 <_strtol_l.isra.0+0x60>
 800537a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800537e:	2b19      	cmp	r3, #25
 8005380:	d801      	bhi.n	8005386 <_strtol_l.isra.0+0xb0>
 8005382:	3c37      	subs	r4, #55	; 0x37
 8005384:	e7e8      	b.n	8005358 <_strtol_l.isra.0+0x82>
 8005386:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800538a:	2b19      	cmp	r3, #25
 800538c:	d804      	bhi.n	8005398 <_strtol_l.isra.0+0xc2>
 800538e:	3c57      	subs	r4, #87	; 0x57
 8005390:	e7e2      	b.n	8005358 <_strtol_l.isra.0+0x82>
 8005392:	f04f 32ff 	mov.w	r2, #4294967295
 8005396:	e7eb      	b.n	8005370 <_strtol_l.isra.0+0x9a>
 8005398:	1c53      	adds	r3, r2, #1
 800539a:	d108      	bne.n	80053ae <_strtol_l.isra.0+0xd8>
 800539c:	2322      	movs	r3, #34	; 0x22
 800539e:	4608      	mov	r0, r1
 80053a0:	f8c8 3000 	str.w	r3, [r8]
 80053a4:	f1ba 0f00 	cmp.w	sl, #0
 80053a8:	d107      	bne.n	80053ba <_strtol_l.isra.0+0xe4>
 80053aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ae:	b106      	cbz	r6, 80053b2 <_strtol_l.isra.0+0xdc>
 80053b0:	4240      	negs	r0, r0
 80053b2:	f1ba 0f00 	cmp.w	sl, #0
 80053b6:	d00c      	beq.n	80053d2 <_strtol_l.isra.0+0xfc>
 80053b8:	b122      	cbz	r2, 80053c4 <_strtol_l.isra.0+0xee>
 80053ba:	3d01      	subs	r5, #1
 80053bc:	f8ca 5000 	str.w	r5, [sl]
 80053c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053c4:	464d      	mov	r5, r9
 80053c6:	e7f9      	b.n	80053bc <_strtol_l.isra.0+0xe6>
 80053c8:	2430      	movs	r4, #48	; 0x30
 80053ca:	2f00      	cmp	r7, #0
 80053cc:	d1b3      	bne.n	8005336 <_strtol_l.isra.0+0x60>
 80053ce:	2708      	movs	r7, #8
 80053d0:	e7b1      	b.n	8005336 <_strtol_l.isra.0+0x60>
 80053d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080053d8 <strtol>:
 80053d8:	4b08      	ldr	r3, [pc, #32]	; (80053fc <strtol+0x24>)
 80053da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053dc:	681c      	ldr	r4, [r3, #0]
 80053de:	4d08      	ldr	r5, [pc, #32]	; (8005400 <strtol+0x28>)
 80053e0:	6a23      	ldr	r3, [r4, #32]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	bf08      	it	eq
 80053e6:	462b      	moveq	r3, r5
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	4613      	mov	r3, r2
 80053ec:	460a      	mov	r2, r1
 80053ee:	4601      	mov	r1, r0
 80053f0:	4620      	mov	r0, r4
 80053f2:	f7ff ff70 	bl	80052d6 <_strtol_l.isra.0>
 80053f6:	b003      	add	sp, #12
 80053f8:	bd30      	pop	{r4, r5, pc}
 80053fa:	bf00      	nop
 80053fc:	2000042c 	.word	0x2000042c
 8005400:	20000520 	.word	0x20000520

08005404 <__register_exitproc>:
 8005404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005408:	4d37      	ldr	r5, [pc, #220]	; (80054e8 <__register_exitproc+0xe4>)
 800540a:	4680      	mov	r8, r0
 800540c:	6828      	ldr	r0, [r5, #0]
 800540e:	4699      	mov	r9, r3
 8005410:	460f      	mov	r7, r1
 8005412:	4692      	mov	sl, r2
 8005414:	f000 fca5 	bl	8005d62 <__retarget_lock_acquire_recursive>
 8005418:	4b34      	ldr	r3, [pc, #208]	; (80054ec <__register_exitproc+0xe8>)
 800541a:	681e      	ldr	r6, [r3, #0]
 800541c:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800541e:	b93c      	cbnz	r4, 8005430 <__register_exitproc+0x2c>
 8005420:	4b33      	ldr	r3, [pc, #204]	; (80054f0 <__register_exitproc+0xec>)
 8005422:	f106 044c 	add.w	r4, r6, #76	; 0x4c
 8005426:	64b4      	str	r4, [r6, #72]	; 0x48
 8005428:	b113      	cbz	r3, 8005430 <__register_exitproc+0x2c>
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f8c6 30d4 	str.w	r3, [r6, #212]	; 0xd4
 8005430:	6863      	ldr	r3, [r4, #4]
 8005432:	2b1f      	cmp	r3, #31
 8005434:	dd49      	ble.n	80054ca <__register_exitproc+0xc6>
 8005436:	4b2f      	ldr	r3, [pc, #188]	; (80054f4 <__register_exitproc+0xf0>)
 8005438:	b933      	cbnz	r3, 8005448 <__register_exitproc+0x44>
 800543a:	6828      	ldr	r0, [r5, #0]
 800543c:	f000 fc93 	bl	8005d66 <__retarget_lock_release_recursive>
 8005440:	f04f 30ff 	mov.w	r0, #4294967295
 8005444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005448:	208c      	movs	r0, #140	; 0x8c
 800544a:	f7fe fe75 	bl	8004138 <malloc>
 800544e:	4604      	mov	r4, r0
 8005450:	2800      	cmp	r0, #0
 8005452:	d0f2      	beq.n	800543a <__register_exitproc+0x36>
 8005454:	2200      	movs	r2, #0
 8005456:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8005458:	6042      	str	r2, [r0, #4]
 800545a:	6003      	str	r3, [r0, #0]
 800545c:	64b0      	str	r0, [r6, #72]	; 0x48
 800545e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 8005462:	f1b8 0f00 	cmp.w	r8, #0
 8005466:	d024      	beq.n	80054b2 <__register_exitproc+0xae>
 8005468:	f44f 7084 	mov.w	r0, #264	; 0x108
 800546c:	f7fe fe64 	bl	8004138 <malloc>
 8005470:	2800      	cmp	r0, #0
 8005472:	d034      	beq.n	80054de <__register_exitproc+0xda>
 8005474:	2300      	movs	r3, #0
 8005476:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800547a:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 800547e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8005482:	2301      	movs	r3, #1
 8005484:	6862      	ldr	r2, [r4, #4]
 8005486:	f1b8 0f02 	cmp.w	r8, #2
 800548a:	f840 a022 	str.w	sl, [r0, r2, lsl #2]
 800548e:	fa03 f302 	lsl.w	r3, r3, r2
 8005492:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8005496:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 800549a:	ea42 0203 	orr.w	r2, r2, r3
 800549e:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 80054a2:	f8c1 9080 	str.w	r9, [r1, #128]	; 0x80
 80054a6:	bf02      	ittt	eq
 80054a8:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 80054ac:	4313      	orreq	r3, r2
 80054ae:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80054b2:	6863      	ldr	r3, [r4, #4]
 80054b4:	6828      	ldr	r0, [r5, #0]
 80054b6:	1c5a      	adds	r2, r3, #1
 80054b8:	3302      	adds	r3, #2
 80054ba:	6062      	str	r2, [r4, #4]
 80054bc:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
 80054c0:	f000 fc51 	bl	8005d66 <__retarget_lock_release_recursive>
 80054c4:	2000      	movs	r0, #0
 80054c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054ca:	f1b8 0f00 	cmp.w	r8, #0
 80054ce:	d0f0      	beq.n	80054b2 <__register_exitproc+0xae>
 80054d0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80054d4:	2800      	cmp	r0, #0
 80054d6:	d1d4      	bne.n	8005482 <__register_exitproc+0x7e>
 80054d8:	4b06      	ldr	r3, [pc, #24]	; (80054f4 <__register_exitproc+0xf0>)
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1c4      	bne.n	8005468 <__register_exitproc+0x64>
 80054de:	6828      	ldr	r0, [r5, #0]
 80054e0:	f000 fc40 	bl	8005d64 <__retarget_lock_release>
 80054e4:	e7ac      	b.n	8005440 <__register_exitproc+0x3c>
 80054e6:	bf00      	nop
 80054e8:	20000428 	.word	0x20000428
 80054ec:	08006ca0 	.word	0x08006ca0
 80054f0:	08006c3c 	.word	0x08006c3c
 80054f4:	08004139 	.word	0x08004139

080054f8 <_malloc_trim_r>:
 80054f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054fc:	4689      	mov	r9, r1
 80054fe:	4f25      	ldr	r7, [pc, #148]	; (8005594 <_malloc_trim_r+0x9c>)
 8005500:	4606      	mov	r6, r0
 8005502:	f7ff f83d 	bl	8004580 <__malloc_lock>
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80055a0 <_malloc_trim_r+0xa8>
 800550c:	685d      	ldr	r5, [r3, #4]
 800550e:	f1a8 0411 	sub.w	r4, r8, #17
 8005512:	f025 0503 	bic.w	r5, r5, #3
 8005516:	eba4 0409 	sub.w	r4, r4, r9
 800551a:	442c      	add	r4, r5
 800551c:	fbb4 f4f8 	udiv	r4, r4, r8
 8005520:	3c01      	subs	r4, #1
 8005522:	fb08 f404 	mul.w	r4, r8, r4
 8005526:	4544      	cmp	r4, r8
 8005528:	da05      	bge.n	8005536 <_malloc_trim_r+0x3e>
 800552a:	4630      	mov	r0, r6
 800552c:	f7ff f82e 	bl	800458c <__malloc_unlock>
 8005530:	2000      	movs	r0, #0
 8005532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005536:	2100      	movs	r1, #0
 8005538:	4630      	mov	r0, r6
 800553a:	f7ff f82d 	bl	8004598 <_sbrk_r>
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	442b      	add	r3, r5
 8005542:	4298      	cmp	r0, r3
 8005544:	d1f1      	bne.n	800552a <_malloc_trim_r+0x32>
 8005546:	4261      	negs	r1, r4
 8005548:	4630      	mov	r0, r6
 800554a:	f7ff f825 	bl	8004598 <_sbrk_r>
 800554e:	3001      	adds	r0, #1
 8005550:	d110      	bne.n	8005574 <_malloc_trim_r+0x7c>
 8005552:	2100      	movs	r1, #0
 8005554:	4630      	mov	r0, r6
 8005556:	f7ff f81f 	bl	8004598 <_sbrk_r>
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	1a83      	subs	r3, r0, r2
 800555e:	2b0f      	cmp	r3, #15
 8005560:	dde3      	ble.n	800552a <_malloc_trim_r+0x32>
 8005562:	490d      	ldr	r1, [pc, #52]	; (8005598 <_malloc_trim_r+0xa0>)
 8005564:	f043 0301 	orr.w	r3, r3, #1
 8005568:	6809      	ldr	r1, [r1, #0]
 800556a:	6053      	str	r3, [r2, #4]
 800556c:	1a40      	subs	r0, r0, r1
 800556e:	490b      	ldr	r1, [pc, #44]	; (800559c <_malloc_trim_r+0xa4>)
 8005570:	6008      	str	r0, [r1, #0]
 8005572:	e7da      	b.n	800552a <_malloc_trim_r+0x32>
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	4a09      	ldr	r2, [pc, #36]	; (800559c <_malloc_trim_r+0xa4>)
 8005578:	1b2d      	subs	r5, r5, r4
 800557a:	f045 0501 	orr.w	r5, r5, #1
 800557e:	605d      	str	r5, [r3, #4]
 8005580:	6813      	ldr	r3, [r2, #0]
 8005582:	4630      	mov	r0, r6
 8005584:	1b1c      	subs	r4, r3, r4
 8005586:	6014      	str	r4, [r2, #0]
 8005588:	f7ff f800 	bl	800458c <__malloc_unlock>
 800558c:	2001      	movs	r0, #1
 800558e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005592:	bf00      	nop
 8005594:	20000018 	.word	0x20000018
 8005598:	20000420 	.word	0x20000420
 800559c:	20000918 	.word	0x20000918
 80055a0:	00000080 	.word	0x00000080

080055a4 <_free_r>:
 80055a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055a8:	4604      	mov	r4, r0
 80055aa:	4688      	mov	r8, r1
 80055ac:	2900      	cmp	r1, #0
 80055ae:	f000 80ab 	beq.w	8005708 <_free_r+0x164>
 80055b2:	f7fe ffe5 	bl	8004580 <__malloc_lock>
 80055b6:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80055ba:	4d54      	ldr	r5, [pc, #336]	; (800570c <_free_r+0x168>)
 80055bc:	f022 0001 	bic.w	r0, r2, #1
 80055c0:	f1a8 0308 	sub.w	r3, r8, #8
 80055c4:	181f      	adds	r7, r3, r0
 80055c6:	68a9      	ldr	r1, [r5, #8]
 80055c8:	687e      	ldr	r6, [r7, #4]
 80055ca:	428f      	cmp	r7, r1
 80055cc:	f026 0603 	bic.w	r6, r6, #3
 80055d0:	f002 0201 	and.w	r2, r2, #1
 80055d4:	d11b      	bne.n	800560e <_free_r+0x6a>
 80055d6:	4430      	add	r0, r6
 80055d8:	b93a      	cbnz	r2, 80055ea <_free_r+0x46>
 80055da:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80055de:	1a9b      	subs	r3, r3, r2
 80055e0:	6899      	ldr	r1, [r3, #8]
 80055e2:	4410      	add	r0, r2
 80055e4:	68da      	ldr	r2, [r3, #12]
 80055e6:	60ca      	str	r2, [r1, #12]
 80055e8:	6091      	str	r1, [r2, #8]
 80055ea:	f040 0201 	orr.w	r2, r0, #1
 80055ee:	605a      	str	r2, [r3, #4]
 80055f0:	60ab      	str	r3, [r5, #8]
 80055f2:	4b47      	ldr	r3, [pc, #284]	; (8005710 <_free_r+0x16c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4298      	cmp	r0, r3
 80055f8:	d304      	bcc.n	8005604 <_free_r+0x60>
 80055fa:	4b46      	ldr	r3, [pc, #280]	; (8005714 <_free_r+0x170>)
 80055fc:	4620      	mov	r0, r4
 80055fe:	6819      	ldr	r1, [r3, #0]
 8005600:	f7ff ff7a 	bl	80054f8 <_malloc_trim_r>
 8005604:	4620      	mov	r0, r4
 8005606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800560a:	f7fe bfbf 	b.w	800458c <__malloc_unlock>
 800560e:	607e      	str	r6, [r7, #4]
 8005610:	2a00      	cmp	r2, #0
 8005612:	d139      	bne.n	8005688 <_free_r+0xe4>
 8005614:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8005618:	f105 0e08 	add.w	lr, r5, #8
 800561c:	1a5b      	subs	r3, r3, r1
 800561e:	4408      	add	r0, r1
 8005620:	6899      	ldr	r1, [r3, #8]
 8005622:	4571      	cmp	r1, lr
 8005624:	d032      	beq.n	800568c <_free_r+0xe8>
 8005626:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800562a:	f8c1 e00c 	str.w	lr, [r1, #12]
 800562e:	f8ce 1008 	str.w	r1, [lr, #8]
 8005632:	19b9      	adds	r1, r7, r6
 8005634:	6849      	ldr	r1, [r1, #4]
 8005636:	07c9      	lsls	r1, r1, #31
 8005638:	d40a      	bmi.n	8005650 <_free_r+0xac>
 800563a:	4430      	add	r0, r6
 800563c:	68b9      	ldr	r1, [r7, #8]
 800563e:	bb3a      	cbnz	r2, 8005690 <_free_r+0xec>
 8005640:	4e35      	ldr	r6, [pc, #212]	; (8005718 <_free_r+0x174>)
 8005642:	42b1      	cmp	r1, r6
 8005644:	d124      	bne.n	8005690 <_free_r+0xec>
 8005646:	2201      	movs	r2, #1
 8005648:	616b      	str	r3, [r5, #20]
 800564a:	612b      	str	r3, [r5, #16]
 800564c:	60d9      	str	r1, [r3, #12]
 800564e:	6099      	str	r1, [r3, #8]
 8005650:	f040 0101 	orr.w	r1, r0, #1
 8005654:	6059      	str	r1, [r3, #4]
 8005656:	5018      	str	r0, [r3, r0]
 8005658:	2a00      	cmp	r2, #0
 800565a:	d1d3      	bne.n	8005604 <_free_r+0x60>
 800565c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005660:	d21a      	bcs.n	8005698 <_free_r+0xf4>
 8005662:	2201      	movs	r2, #1
 8005664:	08c0      	lsrs	r0, r0, #3
 8005666:	1081      	asrs	r1, r0, #2
 8005668:	408a      	lsls	r2, r1
 800566a:	6869      	ldr	r1, [r5, #4]
 800566c:	3001      	adds	r0, #1
 800566e:	430a      	orrs	r2, r1
 8005670:	606a      	str	r2, [r5, #4]
 8005672:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8005676:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800567a:	3a08      	subs	r2, #8
 800567c:	60da      	str	r2, [r3, #12]
 800567e:	6099      	str	r1, [r3, #8]
 8005680:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8005684:	60cb      	str	r3, [r1, #12]
 8005686:	e7bd      	b.n	8005604 <_free_r+0x60>
 8005688:	2200      	movs	r2, #0
 800568a:	e7d2      	b.n	8005632 <_free_r+0x8e>
 800568c:	2201      	movs	r2, #1
 800568e:	e7d0      	b.n	8005632 <_free_r+0x8e>
 8005690:	68fe      	ldr	r6, [r7, #12]
 8005692:	60ce      	str	r6, [r1, #12]
 8005694:	60b1      	str	r1, [r6, #8]
 8005696:	e7db      	b.n	8005650 <_free_r+0xac>
 8005698:	0a42      	lsrs	r2, r0, #9
 800569a:	2a04      	cmp	r2, #4
 800569c:	d813      	bhi.n	80056c6 <_free_r+0x122>
 800569e:	0982      	lsrs	r2, r0, #6
 80056a0:	3238      	adds	r2, #56	; 0x38
 80056a2:	1c51      	adds	r1, r2, #1
 80056a4:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80056a8:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80056ac:	428e      	cmp	r6, r1
 80056ae:	d124      	bne.n	80056fa <_free_r+0x156>
 80056b0:	2001      	movs	r0, #1
 80056b2:	1092      	asrs	r2, r2, #2
 80056b4:	fa00 f202 	lsl.w	r2, r0, r2
 80056b8:	6868      	ldr	r0, [r5, #4]
 80056ba:	4302      	orrs	r2, r0
 80056bc:	606a      	str	r2, [r5, #4]
 80056be:	60de      	str	r6, [r3, #12]
 80056c0:	6099      	str	r1, [r3, #8]
 80056c2:	60b3      	str	r3, [r6, #8]
 80056c4:	e7de      	b.n	8005684 <_free_r+0xe0>
 80056c6:	2a14      	cmp	r2, #20
 80056c8:	d801      	bhi.n	80056ce <_free_r+0x12a>
 80056ca:	325b      	adds	r2, #91	; 0x5b
 80056cc:	e7e9      	b.n	80056a2 <_free_r+0xfe>
 80056ce:	2a54      	cmp	r2, #84	; 0x54
 80056d0:	d802      	bhi.n	80056d8 <_free_r+0x134>
 80056d2:	0b02      	lsrs	r2, r0, #12
 80056d4:	326e      	adds	r2, #110	; 0x6e
 80056d6:	e7e4      	b.n	80056a2 <_free_r+0xfe>
 80056d8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80056dc:	d802      	bhi.n	80056e4 <_free_r+0x140>
 80056de:	0bc2      	lsrs	r2, r0, #15
 80056e0:	3277      	adds	r2, #119	; 0x77
 80056e2:	e7de      	b.n	80056a2 <_free_r+0xfe>
 80056e4:	f240 5154 	movw	r1, #1364	; 0x554
 80056e8:	428a      	cmp	r2, r1
 80056ea:	bf9a      	itte	ls
 80056ec:	0c82      	lsrls	r2, r0, #18
 80056ee:	327c      	addls	r2, #124	; 0x7c
 80056f0:	227e      	movhi	r2, #126	; 0x7e
 80056f2:	e7d6      	b.n	80056a2 <_free_r+0xfe>
 80056f4:	6889      	ldr	r1, [r1, #8]
 80056f6:	428e      	cmp	r6, r1
 80056f8:	d004      	beq.n	8005704 <_free_r+0x160>
 80056fa:	684a      	ldr	r2, [r1, #4]
 80056fc:	f022 0203 	bic.w	r2, r2, #3
 8005700:	4290      	cmp	r0, r2
 8005702:	d3f7      	bcc.n	80056f4 <_free_r+0x150>
 8005704:	68ce      	ldr	r6, [r1, #12]
 8005706:	e7da      	b.n	80056be <_free_r+0x11a>
 8005708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800570c:	20000018 	.word	0x20000018
 8005710:	20000424 	.word	0x20000424
 8005714:	20000948 	.word	0x20000948
 8005718:	20000020 	.word	0x20000020

0800571c <rshift>:
 800571c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800571e:	6906      	ldr	r6, [r0, #16]
 8005720:	114b      	asrs	r3, r1, #5
 8005722:	42b3      	cmp	r3, r6
 8005724:	f100 0514 	add.w	r5, r0, #20
 8005728:	da2b      	bge.n	8005782 <rshift+0x66>
 800572a:	f011 011f 	ands.w	r1, r1, #31
 800572e:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8005732:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8005736:	d108      	bne.n	800574a <rshift+0x2e>
 8005738:	4629      	mov	r1, r5
 800573a:	42b2      	cmp	r2, r6
 800573c:	460b      	mov	r3, r1
 800573e:	d210      	bcs.n	8005762 <rshift+0x46>
 8005740:	f852 3b04 	ldr.w	r3, [r2], #4
 8005744:	f841 3b04 	str.w	r3, [r1], #4
 8005748:	e7f7      	b.n	800573a <rshift+0x1e>
 800574a:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800574e:	462b      	mov	r3, r5
 8005750:	f1c1 0e20 	rsb	lr, r1, #32
 8005754:	3204      	adds	r2, #4
 8005756:	40cc      	lsrs	r4, r1
 8005758:	42b2      	cmp	r2, r6
 800575a:	d308      	bcc.n	800576e <rshift+0x52>
 800575c:	601c      	str	r4, [r3, #0]
 800575e:	b104      	cbz	r4, 8005762 <rshift+0x46>
 8005760:	3304      	adds	r3, #4
 8005762:	1b5b      	subs	r3, r3, r5
 8005764:	109b      	asrs	r3, r3, #2
 8005766:	6103      	str	r3, [r0, #16]
 8005768:	b903      	cbnz	r3, 800576c <rshift+0x50>
 800576a:	6143      	str	r3, [r0, #20]
 800576c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800576e:	6817      	ldr	r7, [r2, #0]
 8005770:	fa07 f70e 	lsl.w	r7, r7, lr
 8005774:	433c      	orrs	r4, r7
 8005776:	f843 4b04 	str.w	r4, [r3], #4
 800577a:	f852 4b04 	ldr.w	r4, [r2], #4
 800577e:	40cc      	lsrs	r4, r1
 8005780:	e7ea      	b.n	8005758 <rshift+0x3c>
 8005782:	462b      	mov	r3, r5
 8005784:	e7ed      	b.n	8005762 <rshift+0x46>

08005786 <__hexdig_fun>:
 8005786:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800578a:	2b09      	cmp	r3, #9
 800578c:	d802      	bhi.n	8005794 <__hexdig_fun+0xe>
 800578e:	3820      	subs	r0, #32
 8005790:	b2c0      	uxtb	r0, r0
 8005792:	4770      	bx	lr
 8005794:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005798:	2b05      	cmp	r3, #5
 800579a:	d801      	bhi.n	80057a0 <__hexdig_fun+0x1a>
 800579c:	3847      	subs	r0, #71	; 0x47
 800579e:	e7f7      	b.n	8005790 <__hexdig_fun+0xa>
 80057a0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80057a4:	2b05      	cmp	r3, #5
 80057a6:	d801      	bhi.n	80057ac <__hexdig_fun+0x26>
 80057a8:	3827      	subs	r0, #39	; 0x27
 80057aa:	e7f1      	b.n	8005790 <__hexdig_fun+0xa>
 80057ac:	2000      	movs	r0, #0
 80057ae:	4770      	bx	lr

080057b0 <__gethex>:
 80057b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b4:	b08b      	sub	sp, #44	; 0x2c
 80057b6:	9002      	str	r0, [sp, #8]
 80057b8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80057ba:	468a      	mov	sl, r1
 80057bc:	4690      	mov	r8, r2
 80057be:	9306      	str	r3, [sp, #24]
 80057c0:	f000 facd 	bl	8005d5e <__localeconv_l>
 80057c4:	6803      	ldr	r3, [r0, #0]
 80057c6:	f04f 0b00 	mov.w	fp, #0
 80057ca:	4618      	mov	r0, r3
 80057cc:	9303      	str	r3, [sp, #12]
 80057ce:	f7fa fcbf 	bl	8000150 <strlen>
 80057d2:	9b03      	ldr	r3, [sp, #12]
 80057d4:	9001      	str	r0, [sp, #4]
 80057d6:	4403      	add	r3, r0
 80057d8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80057dc:	9307      	str	r3, [sp, #28]
 80057de:	f8da 3000 	ldr.w	r3, [sl]
 80057e2:	3302      	adds	r3, #2
 80057e4:	461f      	mov	r7, r3
 80057e6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80057ea:	2830      	cmp	r0, #48	; 0x30
 80057ec:	d06c      	beq.n	80058c8 <__gethex+0x118>
 80057ee:	f7ff ffca 	bl	8005786 <__hexdig_fun>
 80057f2:	4604      	mov	r4, r0
 80057f4:	2800      	cmp	r0, #0
 80057f6:	d16a      	bne.n	80058ce <__gethex+0x11e>
 80057f8:	9a01      	ldr	r2, [sp, #4]
 80057fa:	9903      	ldr	r1, [sp, #12]
 80057fc:	4638      	mov	r0, r7
 80057fe:	f000 feb7 	bl	8006570 <strncmp>
 8005802:	2800      	cmp	r0, #0
 8005804:	d166      	bne.n	80058d4 <__gethex+0x124>
 8005806:	9b01      	ldr	r3, [sp, #4]
 8005808:	5cf8      	ldrb	r0, [r7, r3]
 800580a:	18fe      	adds	r6, r7, r3
 800580c:	f7ff ffbb 	bl	8005786 <__hexdig_fun>
 8005810:	2800      	cmp	r0, #0
 8005812:	d062      	beq.n	80058da <__gethex+0x12a>
 8005814:	4633      	mov	r3, r6
 8005816:	7818      	ldrb	r0, [r3, #0]
 8005818:	461f      	mov	r7, r3
 800581a:	2830      	cmp	r0, #48	; 0x30
 800581c:	f103 0301 	add.w	r3, r3, #1
 8005820:	d0f9      	beq.n	8005816 <__gethex+0x66>
 8005822:	f7ff ffb0 	bl	8005786 <__hexdig_fun>
 8005826:	fab0 f580 	clz	r5, r0
 800582a:	4634      	mov	r4, r6
 800582c:	f04f 0b01 	mov.w	fp, #1
 8005830:	096d      	lsrs	r5, r5, #5
 8005832:	463a      	mov	r2, r7
 8005834:	4616      	mov	r6, r2
 8005836:	7830      	ldrb	r0, [r6, #0]
 8005838:	3201      	adds	r2, #1
 800583a:	f7ff ffa4 	bl	8005786 <__hexdig_fun>
 800583e:	2800      	cmp	r0, #0
 8005840:	d1f8      	bne.n	8005834 <__gethex+0x84>
 8005842:	9a01      	ldr	r2, [sp, #4]
 8005844:	9903      	ldr	r1, [sp, #12]
 8005846:	4630      	mov	r0, r6
 8005848:	f000 fe92 	bl	8006570 <strncmp>
 800584c:	b950      	cbnz	r0, 8005864 <__gethex+0xb4>
 800584e:	b954      	cbnz	r4, 8005866 <__gethex+0xb6>
 8005850:	9b01      	ldr	r3, [sp, #4]
 8005852:	18f4      	adds	r4, r6, r3
 8005854:	4622      	mov	r2, r4
 8005856:	4616      	mov	r6, r2
 8005858:	7830      	ldrb	r0, [r6, #0]
 800585a:	3201      	adds	r2, #1
 800585c:	f7ff ff93 	bl	8005786 <__hexdig_fun>
 8005860:	2800      	cmp	r0, #0
 8005862:	d1f8      	bne.n	8005856 <__gethex+0xa6>
 8005864:	b10c      	cbz	r4, 800586a <__gethex+0xba>
 8005866:	1ba4      	subs	r4, r4, r6
 8005868:	00a4      	lsls	r4, r4, #2
 800586a:	7833      	ldrb	r3, [r6, #0]
 800586c:	2b50      	cmp	r3, #80	; 0x50
 800586e:	d001      	beq.n	8005874 <__gethex+0xc4>
 8005870:	2b70      	cmp	r3, #112	; 0x70
 8005872:	d140      	bne.n	80058f6 <__gethex+0x146>
 8005874:	7873      	ldrb	r3, [r6, #1]
 8005876:	2b2b      	cmp	r3, #43	; 0x2b
 8005878:	d035      	beq.n	80058e6 <__gethex+0x136>
 800587a:	2b2d      	cmp	r3, #45	; 0x2d
 800587c:	d02f      	beq.n	80058de <__gethex+0x12e>
 800587e:	f04f 0900 	mov.w	r9, #0
 8005882:	1c71      	adds	r1, r6, #1
 8005884:	7808      	ldrb	r0, [r1, #0]
 8005886:	f7ff ff7e 	bl	8005786 <__hexdig_fun>
 800588a:	1e43      	subs	r3, r0, #1
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b18      	cmp	r3, #24
 8005890:	d831      	bhi.n	80058f6 <__gethex+0x146>
 8005892:	f1a0 0210 	sub.w	r2, r0, #16
 8005896:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800589a:	f7ff ff74 	bl	8005786 <__hexdig_fun>
 800589e:	1e43      	subs	r3, r0, #1
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b18      	cmp	r3, #24
 80058a4:	d922      	bls.n	80058ec <__gethex+0x13c>
 80058a6:	f1b9 0f00 	cmp.w	r9, #0
 80058aa:	d000      	beq.n	80058ae <__gethex+0xfe>
 80058ac:	4252      	negs	r2, r2
 80058ae:	4414      	add	r4, r2
 80058b0:	f8ca 1000 	str.w	r1, [sl]
 80058b4:	b30d      	cbz	r5, 80058fa <__gethex+0x14a>
 80058b6:	f1bb 0f00 	cmp.w	fp, #0
 80058ba:	bf14      	ite	ne
 80058bc:	2700      	movne	r7, #0
 80058be:	2706      	moveq	r7, #6
 80058c0:	4638      	mov	r0, r7
 80058c2:	b00b      	add	sp, #44	; 0x2c
 80058c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058c8:	f10b 0b01 	add.w	fp, fp, #1
 80058cc:	e78a      	b.n	80057e4 <__gethex+0x34>
 80058ce:	2500      	movs	r5, #0
 80058d0:	462c      	mov	r4, r5
 80058d2:	e7ae      	b.n	8005832 <__gethex+0x82>
 80058d4:	463e      	mov	r6, r7
 80058d6:	2501      	movs	r5, #1
 80058d8:	e7c7      	b.n	800586a <__gethex+0xba>
 80058da:	4604      	mov	r4, r0
 80058dc:	e7fb      	b.n	80058d6 <__gethex+0x126>
 80058de:	f04f 0901 	mov.w	r9, #1
 80058e2:	1cb1      	adds	r1, r6, #2
 80058e4:	e7ce      	b.n	8005884 <__gethex+0xd4>
 80058e6:	f04f 0900 	mov.w	r9, #0
 80058ea:	e7fa      	b.n	80058e2 <__gethex+0x132>
 80058ec:	230a      	movs	r3, #10
 80058ee:	fb03 0202 	mla	r2, r3, r2, r0
 80058f2:	3a10      	subs	r2, #16
 80058f4:	e7cf      	b.n	8005896 <__gethex+0xe6>
 80058f6:	4631      	mov	r1, r6
 80058f8:	e7da      	b.n	80058b0 <__gethex+0x100>
 80058fa:	4629      	mov	r1, r5
 80058fc:	1bf3      	subs	r3, r6, r7
 80058fe:	3b01      	subs	r3, #1
 8005900:	2b07      	cmp	r3, #7
 8005902:	dc49      	bgt.n	8005998 <__gethex+0x1e8>
 8005904:	9802      	ldr	r0, [sp, #8]
 8005906:	f000 fa4c 	bl	8005da2 <_Balloc>
 800590a:	f04f 0b00 	mov.w	fp, #0
 800590e:	4605      	mov	r5, r0
 8005910:	46da      	mov	sl, fp
 8005912:	9b01      	ldr	r3, [sp, #4]
 8005914:	f100 0914 	add.w	r9, r0, #20
 8005918:	f1c3 0301 	rsb	r3, r3, #1
 800591c:	f8cd 9010 	str.w	r9, [sp, #16]
 8005920:	9308      	str	r3, [sp, #32]
 8005922:	42b7      	cmp	r7, r6
 8005924:	d33b      	bcc.n	800599e <__gethex+0x1ee>
 8005926:	9804      	ldr	r0, [sp, #16]
 8005928:	f840 ab04 	str.w	sl, [r0], #4
 800592c:	eba0 0009 	sub.w	r0, r0, r9
 8005930:	1080      	asrs	r0, r0, #2
 8005932:	6128      	str	r0, [r5, #16]
 8005934:	0147      	lsls	r7, r0, #5
 8005936:	4650      	mov	r0, sl
 8005938:	f000 faf7 	bl	8005f2a <__hi0bits>
 800593c:	f8d8 6000 	ldr.w	r6, [r8]
 8005940:	1a3f      	subs	r7, r7, r0
 8005942:	42b7      	cmp	r7, r6
 8005944:	dd64      	ble.n	8005a10 <__gethex+0x260>
 8005946:	1bbf      	subs	r7, r7, r6
 8005948:	4639      	mov	r1, r7
 800594a:	4628      	mov	r0, r5
 800594c:	f000 fdef 	bl	800652e <__any_on>
 8005950:	4682      	mov	sl, r0
 8005952:	b178      	cbz	r0, 8005974 <__gethex+0x1c4>
 8005954:	f04f 0a01 	mov.w	sl, #1
 8005958:	1e7b      	subs	r3, r7, #1
 800595a:	1159      	asrs	r1, r3, #5
 800595c:	f003 021f 	and.w	r2, r3, #31
 8005960:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005964:	fa0a f202 	lsl.w	r2, sl, r2
 8005968:	420a      	tst	r2, r1
 800596a:	d003      	beq.n	8005974 <__gethex+0x1c4>
 800596c:	4553      	cmp	r3, sl
 800596e:	dc46      	bgt.n	80059fe <__gethex+0x24e>
 8005970:	f04f 0a02 	mov.w	sl, #2
 8005974:	4639      	mov	r1, r7
 8005976:	4628      	mov	r0, r5
 8005978:	f7ff fed0 	bl	800571c <rshift>
 800597c:	443c      	add	r4, r7
 800597e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005982:	429c      	cmp	r4, r3
 8005984:	dd52      	ble.n	8005a2c <__gethex+0x27c>
 8005986:	4629      	mov	r1, r5
 8005988:	9802      	ldr	r0, [sp, #8]
 800598a:	f000 fa3e 	bl	8005e0a <_Bfree>
 800598e:	2300      	movs	r3, #0
 8005990:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005992:	27a3      	movs	r7, #163	; 0xa3
 8005994:	6013      	str	r3, [r2, #0]
 8005996:	e793      	b.n	80058c0 <__gethex+0x110>
 8005998:	3101      	adds	r1, #1
 800599a:	105b      	asrs	r3, r3, #1
 800599c:	e7b0      	b.n	8005900 <__gethex+0x150>
 800599e:	1e73      	subs	r3, r6, #1
 80059a0:	9305      	str	r3, [sp, #20]
 80059a2:	9a07      	ldr	r2, [sp, #28]
 80059a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d018      	beq.n	80059de <__gethex+0x22e>
 80059ac:	f1bb 0f20 	cmp.w	fp, #32
 80059b0:	d107      	bne.n	80059c2 <__gethex+0x212>
 80059b2:	9b04      	ldr	r3, [sp, #16]
 80059b4:	f8c3 a000 	str.w	sl, [r3]
 80059b8:	f04f 0a00 	mov.w	sl, #0
 80059bc:	46d3      	mov	fp, sl
 80059be:	3304      	adds	r3, #4
 80059c0:	9304      	str	r3, [sp, #16]
 80059c2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80059c6:	f7ff fede 	bl	8005786 <__hexdig_fun>
 80059ca:	f000 000f 	and.w	r0, r0, #15
 80059ce:	fa00 f00b 	lsl.w	r0, r0, fp
 80059d2:	ea4a 0a00 	orr.w	sl, sl, r0
 80059d6:	f10b 0b04 	add.w	fp, fp, #4
 80059da:	9b05      	ldr	r3, [sp, #20]
 80059dc:	e00d      	b.n	80059fa <__gethex+0x24a>
 80059de:	9b05      	ldr	r3, [sp, #20]
 80059e0:	9a08      	ldr	r2, [sp, #32]
 80059e2:	4413      	add	r3, r2
 80059e4:	429f      	cmp	r7, r3
 80059e6:	d8e1      	bhi.n	80059ac <__gethex+0x1fc>
 80059e8:	4618      	mov	r0, r3
 80059ea:	9a01      	ldr	r2, [sp, #4]
 80059ec:	9903      	ldr	r1, [sp, #12]
 80059ee:	9309      	str	r3, [sp, #36]	; 0x24
 80059f0:	f000 fdbe 	bl	8006570 <strncmp>
 80059f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059f6:	2800      	cmp	r0, #0
 80059f8:	d1d8      	bne.n	80059ac <__gethex+0x1fc>
 80059fa:	461e      	mov	r6, r3
 80059fc:	e791      	b.n	8005922 <__gethex+0x172>
 80059fe:	1eb9      	subs	r1, r7, #2
 8005a00:	4628      	mov	r0, r5
 8005a02:	f000 fd94 	bl	800652e <__any_on>
 8005a06:	2800      	cmp	r0, #0
 8005a08:	d0b2      	beq.n	8005970 <__gethex+0x1c0>
 8005a0a:	f04f 0a03 	mov.w	sl, #3
 8005a0e:	e7b1      	b.n	8005974 <__gethex+0x1c4>
 8005a10:	da09      	bge.n	8005a26 <__gethex+0x276>
 8005a12:	1bf7      	subs	r7, r6, r7
 8005a14:	4629      	mov	r1, r5
 8005a16:	463a      	mov	r2, r7
 8005a18:	9802      	ldr	r0, [sp, #8]
 8005a1a:	f000 fbb7 	bl	800618c <__lshift>
 8005a1e:	4605      	mov	r5, r0
 8005a20:	1be4      	subs	r4, r4, r7
 8005a22:	f100 0914 	add.w	r9, r0, #20
 8005a26:	f04f 0a00 	mov.w	sl, #0
 8005a2a:	e7a8      	b.n	800597e <__gethex+0x1ce>
 8005a2c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005a30:	4284      	cmp	r4, r0
 8005a32:	da6b      	bge.n	8005b0c <__gethex+0x35c>
 8005a34:	1b04      	subs	r4, r0, r4
 8005a36:	42a6      	cmp	r6, r4
 8005a38:	dc2e      	bgt.n	8005a98 <__gethex+0x2e8>
 8005a3a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d022      	beq.n	8005a88 <__gethex+0x2d8>
 8005a42:	2b03      	cmp	r3, #3
 8005a44:	d024      	beq.n	8005a90 <__gethex+0x2e0>
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d115      	bne.n	8005a76 <__gethex+0x2c6>
 8005a4a:	42a6      	cmp	r6, r4
 8005a4c:	d113      	bne.n	8005a76 <__gethex+0x2c6>
 8005a4e:	2e01      	cmp	r6, #1
 8005a50:	dc0b      	bgt.n	8005a6a <__gethex+0x2ba>
 8005a52:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005a56:	9a06      	ldr	r2, [sp, #24]
 8005a58:	2762      	movs	r7, #98	; 0x62
 8005a5a:	6013      	str	r3, [r2, #0]
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	612b      	str	r3, [r5, #16]
 8005a60:	f8c9 3000 	str.w	r3, [r9]
 8005a64:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005a66:	601d      	str	r5, [r3, #0]
 8005a68:	e72a      	b.n	80058c0 <__gethex+0x110>
 8005a6a:	1e71      	subs	r1, r6, #1
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	f000 fd5e 	bl	800652e <__any_on>
 8005a72:	2800      	cmp	r0, #0
 8005a74:	d1ed      	bne.n	8005a52 <__gethex+0x2a2>
 8005a76:	4629      	mov	r1, r5
 8005a78:	9802      	ldr	r0, [sp, #8]
 8005a7a:	f000 f9c6 	bl	8005e0a <_Bfree>
 8005a7e:	2300      	movs	r3, #0
 8005a80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005a82:	2750      	movs	r7, #80	; 0x50
 8005a84:	6013      	str	r3, [r2, #0]
 8005a86:	e71b      	b.n	80058c0 <__gethex+0x110>
 8005a88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d0e1      	beq.n	8005a52 <__gethex+0x2a2>
 8005a8e:	e7f2      	b.n	8005a76 <__gethex+0x2c6>
 8005a90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1dd      	bne.n	8005a52 <__gethex+0x2a2>
 8005a96:	e7ee      	b.n	8005a76 <__gethex+0x2c6>
 8005a98:	1e67      	subs	r7, r4, #1
 8005a9a:	f1ba 0f00 	cmp.w	sl, #0
 8005a9e:	d132      	bne.n	8005b06 <__gethex+0x356>
 8005aa0:	b127      	cbz	r7, 8005aac <__gethex+0x2fc>
 8005aa2:	4639      	mov	r1, r7
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	f000 fd42 	bl	800652e <__any_on>
 8005aaa:	4682      	mov	sl, r0
 8005aac:	2301      	movs	r3, #1
 8005aae:	117a      	asrs	r2, r7, #5
 8005ab0:	f007 071f 	and.w	r7, r7, #31
 8005ab4:	fa03 f707 	lsl.w	r7, r3, r7
 8005ab8:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8005abc:	4621      	mov	r1, r4
 8005abe:	421f      	tst	r7, r3
 8005ac0:	f04f 0702 	mov.w	r7, #2
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	bf18      	it	ne
 8005ac8:	f04a 0a02 	orrne.w	sl, sl, #2
 8005acc:	1b36      	subs	r6, r6, r4
 8005ace:	f7ff fe25 	bl	800571c <rshift>
 8005ad2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8005ad6:	f1ba 0f00 	cmp.w	sl, #0
 8005ada:	d045      	beq.n	8005b68 <__gethex+0x3b8>
 8005adc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d015      	beq.n	8005b10 <__gethex+0x360>
 8005ae4:	2b03      	cmp	r3, #3
 8005ae6:	d017      	beq.n	8005b18 <__gethex+0x368>
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d109      	bne.n	8005b00 <__gethex+0x350>
 8005aec:	f01a 0f02 	tst.w	sl, #2
 8005af0:	d006      	beq.n	8005b00 <__gethex+0x350>
 8005af2:	f8d9 3000 	ldr.w	r3, [r9]
 8005af6:	ea4a 0a03 	orr.w	sl, sl, r3
 8005afa:	f01a 0f01 	tst.w	sl, #1
 8005afe:	d10e      	bne.n	8005b1e <__gethex+0x36e>
 8005b00:	f047 0710 	orr.w	r7, r7, #16
 8005b04:	e030      	b.n	8005b68 <__gethex+0x3b8>
 8005b06:	f04f 0a01 	mov.w	sl, #1
 8005b0a:	e7cf      	b.n	8005aac <__gethex+0x2fc>
 8005b0c:	2701      	movs	r7, #1
 8005b0e:	e7e2      	b.n	8005ad6 <__gethex+0x326>
 8005b10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b12:	f1c3 0301 	rsb	r3, r3, #1
 8005b16:	9315      	str	r3, [sp, #84]	; 0x54
 8005b18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d0f0      	beq.n	8005b00 <__gethex+0x350>
 8005b1e:	2000      	movs	r0, #0
 8005b20:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8005b24:	f105 0314 	add.w	r3, r5, #20
 8005b28:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8005b2c:	eb03 010a 	add.w	r1, r3, sl
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005b36:	d01c      	beq.n	8005b72 <__gethex+0x3c2>
 8005b38:	3201      	adds	r2, #1
 8005b3a:	601a      	str	r2, [r3, #0]
 8005b3c:	2f02      	cmp	r7, #2
 8005b3e:	f105 0314 	add.w	r3, r5, #20
 8005b42:	d138      	bne.n	8005bb6 <__gethex+0x406>
 8005b44:	f8d8 2000 	ldr.w	r2, [r8]
 8005b48:	3a01      	subs	r2, #1
 8005b4a:	4296      	cmp	r6, r2
 8005b4c:	d10a      	bne.n	8005b64 <__gethex+0x3b4>
 8005b4e:	2201      	movs	r2, #1
 8005b50:	1171      	asrs	r1, r6, #5
 8005b52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005b56:	f006 061f 	and.w	r6, r6, #31
 8005b5a:	fa02 f606 	lsl.w	r6, r2, r6
 8005b5e:	421e      	tst	r6, r3
 8005b60:	bf18      	it	ne
 8005b62:	4617      	movne	r7, r2
 8005b64:	f047 0720 	orr.w	r7, r7, #32
 8005b68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b6a:	601d      	str	r5, [r3, #0]
 8005b6c:	9b06      	ldr	r3, [sp, #24]
 8005b6e:	601c      	str	r4, [r3, #0]
 8005b70:	e6a6      	b.n	80058c0 <__gethex+0x110>
 8005b72:	f843 0b04 	str.w	r0, [r3], #4
 8005b76:	4299      	cmp	r1, r3
 8005b78:	d8da      	bhi.n	8005b30 <__gethex+0x380>
 8005b7a:	68ab      	ldr	r3, [r5, #8]
 8005b7c:	4599      	cmp	r9, r3
 8005b7e:	db12      	blt.n	8005ba6 <__gethex+0x3f6>
 8005b80:	6869      	ldr	r1, [r5, #4]
 8005b82:	9802      	ldr	r0, [sp, #8]
 8005b84:	3101      	adds	r1, #1
 8005b86:	f000 f90c 	bl	8005da2 <_Balloc>
 8005b8a:	4683      	mov	fp, r0
 8005b8c:	692a      	ldr	r2, [r5, #16]
 8005b8e:	f105 010c 	add.w	r1, r5, #12
 8005b92:	3202      	adds	r2, #2
 8005b94:	0092      	lsls	r2, r2, #2
 8005b96:	300c      	adds	r0, #12
 8005b98:	f000 f8f8 	bl	8005d8c <memcpy>
 8005b9c:	4629      	mov	r1, r5
 8005b9e:	9802      	ldr	r0, [sp, #8]
 8005ba0:	f000 f933 	bl	8005e0a <_Bfree>
 8005ba4:	465d      	mov	r5, fp
 8005ba6:	692b      	ldr	r3, [r5, #16]
 8005ba8:	1c5a      	adds	r2, r3, #1
 8005baa:	612a      	str	r2, [r5, #16]
 8005bac:	2201      	movs	r2, #1
 8005bae:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005bb2:	615a      	str	r2, [r3, #20]
 8005bb4:	e7c2      	b.n	8005b3c <__gethex+0x38c>
 8005bb6:	692a      	ldr	r2, [r5, #16]
 8005bb8:	4591      	cmp	r9, r2
 8005bba:	da0b      	bge.n	8005bd4 <__gethex+0x424>
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	f7ff fdac 	bl	800571c <rshift>
 8005bc4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005bc8:	3401      	adds	r4, #1
 8005bca:	429c      	cmp	r4, r3
 8005bcc:	f73f aedb 	bgt.w	8005986 <__gethex+0x1d6>
 8005bd0:	2701      	movs	r7, #1
 8005bd2:	e7c7      	b.n	8005b64 <__gethex+0x3b4>
 8005bd4:	f016 061f 	ands.w	r6, r6, #31
 8005bd8:	d0fa      	beq.n	8005bd0 <__gethex+0x420>
 8005bda:	449a      	add	sl, r3
 8005bdc:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8005be0:	f000 f9a3 	bl	8005f2a <__hi0bits>
 8005be4:	f1c6 0620 	rsb	r6, r6, #32
 8005be8:	42b0      	cmp	r0, r6
 8005bea:	dbe7      	blt.n	8005bbc <__gethex+0x40c>
 8005bec:	e7f0      	b.n	8005bd0 <__gethex+0x420>

08005bee <L_shift>:
 8005bee:	f1c2 0208 	rsb	r2, r2, #8
 8005bf2:	0092      	lsls	r2, r2, #2
 8005bf4:	b570      	push	{r4, r5, r6, lr}
 8005bf6:	f1c2 0620 	rsb	r6, r2, #32
 8005bfa:	6843      	ldr	r3, [r0, #4]
 8005bfc:	6804      	ldr	r4, [r0, #0]
 8005bfe:	fa03 f506 	lsl.w	r5, r3, r6
 8005c02:	432c      	orrs	r4, r5
 8005c04:	40d3      	lsrs	r3, r2
 8005c06:	6004      	str	r4, [r0, #0]
 8005c08:	f840 3f04 	str.w	r3, [r0, #4]!
 8005c0c:	4288      	cmp	r0, r1
 8005c0e:	d3f4      	bcc.n	8005bfa <L_shift+0xc>
 8005c10:	bd70      	pop	{r4, r5, r6, pc}

08005c12 <__match>:
 8005c12:	b530      	push	{r4, r5, lr}
 8005c14:	6803      	ldr	r3, [r0, #0]
 8005c16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	b914      	cbnz	r4, 8005c24 <__match+0x12>
 8005c1e:	6003      	str	r3, [r0, #0]
 8005c20:	2001      	movs	r0, #1
 8005c22:	bd30      	pop	{r4, r5, pc}
 8005c24:	781a      	ldrb	r2, [r3, #0]
 8005c26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005c2a:	2d19      	cmp	r5, #25
 8005c2c:	bf98      	it	ls
 8005c2e:	3220      	addls	r2, #32
 8005c30:	42a2      	cmp	r2, r4
 8005c32:	d0f0      	beq.n	8005c16 <__match+0x4>
 8005c34:	2000      	movs	r0, #0
 8005c36:	bd30      	pop	{r4, r5, pc}

08005c38 <__hexnan>:
 8005c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c3c:	2500      	movs	r5, #0
 8005c3e:	680b      	ldr	r3, [r1, #0]
 8005c40:	4682      	mov	sl, r0
 8005c42:	115f      	asrs	r7, r3, #5
 8005c44:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005c48:	f013 031f 	ands.w	r3, r3, #31
 8005c4c:	bf18      	it	ne
 8005c4e:	3704      	addne	r7, #4
 8005c50:	1f3e      	subs	r6, r7, #4
 8005c52:	4690      	mov	r8, r2
 8005c54:	46b1      	mov	r9, r6
 8005c56:	4634      	mov	r4, r6
 8005c58:	46ab      	mov	fp, r5
 8005c5a:	b087      	sub	sp, #28
 8005c5c:	6801      	ldr	r1, [r0, #0]
 8005c5e:	9302      	str	r3, [sp, #8]
 8005c60:	f847 5c04 	str.w	r5, [r7, #-4]
 8005c64:	9501      	str	r5, [sp, #4]
 8005c66:	784a      	ldrb	r2, [r1, #1]
 8005c68:	1c4b      	adds	r3, r1, #1
 8005c6a:	9303      	str	r3, [sp, #12]
 8005c6c:	b342      	cbz	r2, 8005cc0 <__hexnan+0x88>
 8005c6e:	4610      	mov	r0, r2
 8005c70:	9105      	str	r1, [sp, #20]
 8005c72:	9204      	str	r2, [sp, #16]
 8005c74:	f7ff fd87 	bl	8005786 <__hexdig_fun>
 8005c78:	2800      	cmp	r0, #0
 8005c7a:	d143      	bne.n	8005d04 <__hexnan+0xcc>
 8005c7c:	9a04      	ldr	r2, [sp, #16]
 8005c7e:	9905      	ldr	r1, [sp, #20]
 8005c80:	2a20      	cmp	r2, #32
 8005c82:	d818      	bhi.n	8005cb6 <__hexnan+0x7e>
 8005c84:	9b01      	ldr	r3, [sp, #4]
 8005c86:	459b      	cmp	fp, r3
 8005c88:	dd13      	ble.n	8005cb2 <__hexnan+0x7a>
 8005c8a:	454c      	cmp	r4, r9
 8005c8c:	d206      	bcs.n	8005c9c <__hexnan+0x64>
 8005c8e:	2d07      	cmp	r5, #7
 8005c90:	dc04      	bgt.n	8005c9c <__hexnan+0x64>
 8005c92:	462a      	mov	r2, r5
 8005c94:	4649      	mov	r1, r9
 8005c96:	4620      	mov	r0, r4
 8005c98:	f7ff ffa9 	bl	8005bee <L_shift>
 8005c9c:	4544      	cmp	r4, r8
 8005c9e:	d944      	bls.n	8005d2a <__hexnan+0xf2>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	f1a4 0904 	sub.w	r9, r4, #4
 8005ca6:	f844 3c04 	str.w	r3, [r4, #-4]
 8005caa:	461d      	mov	r5, r3
 8005cac:	464c      	mov	r4, r9
 8005cae:	f8cd b004 	str.w	fp, [sp, #4]
 8005cb2:	9903      	ldr	r1, [sp, #12]
 8005cb4:	e7d7      	b.n	8005c66 <__hexnan+0x2e>
 8005cb6:	2a29      	cmp	r2, #41	; 0x29
 8005cb8:	d14a      	bne.n	8005d50 <__hexnan+0x118>
 8005cba:	3102      	adds	r1, #2
 8005cbc:	f8ca 1000 	str.w	r1, [sl]
 8005cc0:	f1bb 0f00 	cmp.w	fp, #0
 8005cc4:	d044      	beq.n	8005d50 <__hexnan+0x118>
 8005cc6:	454c      	cmp	r4, r9
 8005cc8:	d206      	bcs.n	8005cd8 <__hexnan+0xa0>
 8005cca:	2d07      	cmp	r5, #7
 8005ccc:	dc04      	bgt.n	8005cd8 <__hexnan+0xa0>
 8005cce:	462a      	mov	r2, r5
 8005cd0:	4649      	mov	r1, r9
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	f7ff ff8b 	bl	8005bee <L_shift>
 8005cd8:	4544      	cmp	r4, r8
 8005cda:	d928      	bls.n	8005d2e <__hexnan+0xf6>
 8005cdc:	4643      	mov	r3, r8
 8005cde:	f854 2b04 	ldr.w	r2, [r4], #4
 8005ce2:	42a6      	cmp	r6, r4
 8005ce4:	f843 2b04 	str.w	r2, [r3], #4
 8005ce8:	d2f9      	bcs.n	8005cde <__hexnan+0xa6>
 8005cea:	2200      	movs	r2, #0
 8005cec:	f843 2b04 	str.w	r2, [r3], #4
 8005cf0:	429e      	cmp	r6, r3
 8005cf2:	d2fb      	bcs.n	8005cec <__hexnan+0xb4>
 8005cf4:	6833      	ldr	r3, [r6, #0]
 8005cf6:	b91b      	cbnz	r3, 8005d00 <__hexnan+0xc8>
 8005cf8:	4546      	cmp	r6, r8
 8005cfa:	d127      	bne.n	8005d4c <__hexnan+0x114>
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	6033      	str	r3, [r6, #0]
 8005d00:	2005      	movs	r0, #5
 8005d02:	e026      	b.n	8005d52 <__hexnan+0x11a>
 8005d04:	3501      	adds	r5, #1
 8005d06:	2d08      	cmp	r5, #8
 8005d08:	f10b 0b01 	add.w	fp, fp, #1
 8005d0c:	dd06      	ble.n	8005d1c <__hexnan+0xe4>
 8005d0e:	4544      	cmp	r4, r8
 8005d10:	d9cf      	bls.n	8005cb2 <__hexnan+0x7a>
 8005d12:	2300      	movs	r3, #0
 8005d14:	2501      	movs	r5, #1
 8005d16:	f844 3c04 	str.w	r3, [r4, #-4]
 8005d1a:	3c04      	subs	r4, #4
 8005d1c:	6822      	ldr	r2, [r4, #0]
 8005d1e:	f000 000f 	and.w	r0, r0, #15
 8005d22:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8005d26:	6020      	str	r0, [r4, #0]
 8005d28:	e7c3      	b.n	8005cb2 <__hexnan+0x7a>
 8005d2a:	2508      	movs	r5, #8
 8005d2c:	e7c1      	b.n	8005cb2 <__hexnan+0x7a>
 8005d2e:	9b02      	ldr	r3, [sp, #8]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d0df      	beq.n	8005cf4 <__hexnan+0xbc>
 8005d34:	f04f 32ff 	mov.w	r2, #4294967295
 8005d38:	f1c3 0320 	rsb	r3, r3, #32
 8005d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d40:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8005d44:	401a      	ands	r2, r3
 8005d46:	f847 2c04 	str.w	r2, [r7, #-4]
 8005d4a:	e7d3      	b.n	8005cf4 <__hexnan+0xbc>
 8005d4c:	3e04      	subs	r6, #4
 8005d4e:	e7d1      	b.n	8005cf4 <__hexnan+0xbc>
 8005d50:	2004      	movs	r0, #4
 8005d52:	b007      	add	sp, #28
 8005d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005d58 <__locale_ctype_ptr_l>:
 8005d58:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005d5c:	4770      	bx	lr

08005d5e <__localeconv_l>:
 8005d5e:	30f0      	adds	r0, #240	; 0xf0
 8005d60:	4770      	bx	lr

08005d62 <__retarget_lock_acquire_recursive>:
 8005d62:	4770      	bx	lr

08005d64 <__retarget_lock_release>:
 8005d64:	4770      	bx	lr

08005d66 <__retarget_lock_release_recursive>:
 8005d66:	4770      	bx	lr

08005d68 <__ascii_mbtowc>:
 8005d68:	b082      	sub	sp, #8
 8005d6a:	b901      	cbnz	r1, 8005d6e <__ascii_mbtowc+0x6>
 8005d6c:	a901      	add	r1, sp, #4
 8005d6e:	b142      	cbz	r2, 8005d82 <__ascii_mbtowc+0x1a>
 8005d70:	b14b      	cbz	r3, 8005d86 <__ascii_mbtowc+0x1e>
 8005d72:	7813      	ldrb	r3, [r2, #0]
 8005d74:	600b      	str	r3, [r1, #0]
 8005d76:	7812      	ldrb	r2, [r2, #0]
 8005d78:	1c10      	adds	r0, r2, #0
 8005d7a:	bf18      	it	ne
 8005d7c:	2001      	movne	r0, #1
 8005d7e:	b002      	add	sp, #8
 8005d80:	4770      	bx	lr
 8005d82:	4610      	mov	r0, r2
 8005d84:	e7fb      	b.n	8005d7e <__ascii_mbtowc+0x16>
 8005d86:	f06f 0001 	mvn.w	r0, #1
 8005d8a:	e7f8      	b.n	8005d7e <__ascii_mbtowc+0x16>

08005d8c <memcpy>:
 8005d8c:	b510      	push	{r4, lr}
 8005d8e:	1e43      	subs	r3, r0, #1
 8005d90:	440a      	add	r2, r1
 8005d92:	4291      	cmp	r1, r2
 8005d94:	d100      	bne.n	8005d98 <memcpy+0xc>
 8005d96:	bd10      	pop	{r4, pc}
 8005d98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005da0:	e7f7      	b.n	8005d92 <memcpy+0x6>

08005da2 <_Balloc>:
 8005da2:	b570      	push	{r4, r5, r6, lr}
 8005da4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005da6:	4604      	mov	r4, r0
 8005da8:	460e      	mov	r6, r1
 8005daa:	b93d      	cbnz	r5, 8005dbc <_Balloc+0x1a>
 8005dac:	2010      	movs	r0, #16
 8005dae:	f7fe f9c3 	bl	8004138 <malloc>
 8005db2:	6260      	str	r0, [r4, #36]	; 0x24
 8005db4:	6045      	str	r5, [r0, #4]
 8005db6:	6085      	str	r5, [r0, #8]
 8005db8:	6005      	str	r5, [r0, #0]
 8005dba:	60c5      	str	r5, [r0, #12]
 8005dbc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005dbe:	68eb      	ldr	r3, [r5, #12]
 8005dc0:	b183      	cbz	r3, 8005de4 <_Balloc+0x42>
 8005dc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005dca:	b9b8      	cbnz	r0, 8005dfc <_Balloc+0x5a>
 8005dcc:	2101      	movs	r1, #1
 8005dce:	fa01 f506 	lsl.w	r5, r1, r6
 8005dd2:	1d6a      	adds	r2, r5, #5
 8005dd4:	0092      	lsls	r2, r2, #2
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	f000 fbe9 	bl	80065ae <_calloc_r>
 8005ddc:	b160      	cbz	r0, 8005df8 <_Balloc+0x56>
 8005dde:	6046      	str	r6, [r0, #4]
 8005de0:	6085      	str	r5, [r0, #8]
 8005de2:	e00e      	b.n	8005e02 <_Balloc+0x60>
 8005de4:	2221      	movs	r2, #33	; 0x21
 8005de6:	2104      	movs	r1, #4
 8005de8:	4620      	mov	r0, r4
 8005dea:	f000 fbe0 	bl	80065ae <_calloc_r>
 8005dee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005df0:	60e8      	str	r0, [r5, #12]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1e4      	bne.n	8005dc2 <_Balloc+0x20>
 8005df8:	2000      	movs	r0, #0
 8005dfa:	bd70      	pop	{r4, r5, r6, pc}
 8005dfc:	6802      	ldr	r2, [r0, #0]
 8005dfe:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005e02:	2300      	movs	r3, #0
 8005e04:	6103      	str	r3, [r0, #16]
 8005e06:	60c3      	str	r3, [r0, #12]
 8005e08:	bd70      	pop	{r4, r5, r6, pc}

08005e0a <_Bfree>:
 8005e0a:	b570      	push	{r4, r5, r6, lr}
 8005e0c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005e0e:	4606      	mov	r6, r0
 8005e10:	460d      	mov	r5, r1
 8005e12:	b93c      	cbnz	r4, 8005e24 <_Bfree+0x1a>
 8005e14:	2010      	movs	r0, #16
 8005e16:	f7fe f98f 	bl	8004138 <malloc>
 8005e1a:	6270      	str	r0, [r6, #36]	; 0x24
 8005e1c:	6044      	str	r4, [r0, #4]
 8005e1e:	6084      	str	r4, [r0, #8]
 8005e20:	6004      	str	r4, [r0, #0]
 8005e22:	60c4      	str	r4, [r0, #12]
 8005e24:	b13d      	cbz	r5, 8005e36 <_Bfree+0x2c>
 8005e26:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005e28:	686a      	ldr	r2, [r5, #4]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e30:	6029      	str	r1, [r5, #0]
 8005e32:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005e36:	bd70      	pop	{r4, r5, r6, pc}

08005e38 <__multadd>:
 8005e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e3c:	461f      	mov	r7, r3
 8005e3e:	4606      	mov	r6, r0
 8005e40:	460c      	mov	r4, r1
 8005e42:	2300      	movs	r3, #0
 8005e44:	690d      	ldr	r5, [r1, #16]
 8005e46:	f101 0e14 	add.w	lr, r1, #20
 8005e4a:	f8de 0000 	ldr.w	r0, [lr]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	b281      	uxth	r1, r0
 8005e52:	fb02 7101 	mla	r1, r2, r1, r7
 8005e56:	0c00      	lsrs	r0, r0, #16
 8005e58:	0c0f      	lsrs	r7, r1, #16
 8005e5a:	fb02 7000 	mla	r0, r2, r0, r7
 8005e5e:	b289      	uxth	r1, r1
 8005e60:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005e64:	429d      	cmp	r5, r3
 8005e66:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005e6a:	f84e 1b04 	str.w	r1, [lr], #4
 8005e6e:	dcec      	bgt.n	8005e4a <__multadd+0x12>
 8005e70:	b1d7      	cbz	r7, 8005ea8 <__multadd+0x70>
 8005e72:	68a3      	ldr	r3, [r4, #8]
 8005e74:	429d      	cmp	r5, r3
 8005e76:	db12      	blt.n	8005e9e <__multadd+0x66>
 8005e78:	6861      	ldr	r1, [r4, #4]
 8005e7a:	4630      	mov	r0, r6
 8005e7c:	3101      	adds	r1, #1
 8005e7e:	f7ff ff90 	bl	8005da2 <_Balloc>
 8005e82:	4680      	mov	r8, r0
 8005e84:	6922      	ldr	r2, [r4, #16]
 8005e86:	f104 010c 	add.w	r1, r4, #12
 8005e8a:	3202      	adds	r2, #2
 8005e8c:	0092      	lsls	r2, r2, #2
 8005e8e:	300c      	adds	r0, #12
 8005e90:	f7ff ff7c 	bl	8005d8c <memcpy>
 8005e94:	4621      	mov	r1, r4
 8005e96:	4630      	mov	r0, r6
 8005e98:	f7ff ffb7 	bl	8005e0a <_Bfree>
 8005e9c:	4644      	mov	r4, r8
 8005e9e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ea2:	3501      	adds	r5, #1
 8005ea4:	615f      	str	r7, [r3, #20]
 8005ea6:	6125      	str	r5, [r4, #16]
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005eae <__s2b>:
 8005eae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005eb2:	4615      	mov	r5, r2
 8005eb4:	2209      	movs	r2, #9
 8005eb6:	461f      	mov	r7, r3
 8005eb8:	3308      	adds	r3, #8
 8005eba:	460c      	mov	r4, r1
 8005ebc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ec0:	4606      	mov	r6, r0
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	db20      	blt.n	8005f0c <__s2b+0x5e>
 8005eca:	4630      	mov	r0, r6
 8005ecc:	f7ff ff69 	bl	8005da2 <_Balloc>
 8005ed0:	9b08      	ldr	r3, [sp, #32]
 8005ed2:	2d09      	cmp	r5, #9
 8005ed4:	6143      	str	r3, [r0, #20]
 8005ed6:	f04f 0301 	mov.w	r3, #1
 8005eda:	6103      	str	r3, [r0, #16]
 8005edc:	dd19      	ble.n	8005f12 <__s2b+0x64>
 8005ede:	f104 0909 	add.w	r9, r4, #9
 8005ee2:	46c8      	mov	r8, r9
 8005ee4:	442c      	add	r4, r5
 8005ee6:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005eea:	4601      	mov	r1, r0
 8005eec:	3b30      	subs	r3, #48	; 0x30
 8005eee:	220a      	movs	r2, #10
 8005ef0:	4630      	mov	r0, r6
 8005ef2:	f7ff ffa1 	bl	8005e38 <__multadd>
 8005ef6:	45a0      	cmp	r8, r4
 8005ef8:	d1f5      	bne.n	8005ee6 <__s2b+0x38>
 8005efa:	f1a5 0408 	sub.w	r4, r5, #8
 8005efe:	444c      	add	r4, r9
 8005f00:	1b2d      	subs	r5, r5, r4
 8005f02:	1963      	adds	r3, r4, r5
 8005f04:	42bb      	cmp	r3, r7
 8005f06:	db07      	blt.n	8005f18 <__s2b+0x6a>
 8005f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f0c:	0052      	lsls	r2, r2, #1
 8005f0e:	3101      	adds	r1, #1
 8005f10:	e7d9      	b.n	8005ec6 <__s2b+0x18>
 8005f12:	340a      	adds	r4, #10
 8005f14:	2509      	movs	r5, #9
 8005f16:	e7f3      	b.n	8005f00 <__s2b+0x52>
 8005f18:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005f1c:	4601      	mov	r1, r0
 8005f1e:	3b30      	subs	r3, #48	; 0x30
 8005f20:	220a      	movs	r2, #10
 8005f22:	4630      	mov	r0, r6
 8005f24:	f7ff ff88 	bl	8005e38 <__multadd>
 8005f28:	e7eb      	b.n	8005f02 <__s2b+0x54>

08005f2a <__hi0bits>:
 8005f2a:	0c02      	lsrs	r2, r0, #16
 8005f2c:	0412      	lsls	r2, r2, #16
 8005f2e:	4603      	mov	r3, r0
 8005f30:	b9b2      	cbnz	r2, 8005f60 <__hi0bits+0x36>
 8005f32:	0403      	lsls	r3, r0, #16
 8005f34:	2010      	movs	r0, #16
 8005f36:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005f3a:	bf04      	itt	eq
 8005f3c:	021b      	lsleq	r3, r3, #8
 8005f3e:	3008      	addeq	r0, #8
 8005f40:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005f44:	bf04      	itt	eq
 8005f46:	011b      	lsleq	r3, r3, #4
 8005f48:	3004      	addeq	r0, #4
 8005f4a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005f4e:	bf04      	itt	eq
 8005f50:	009b      	lsleq	r3, r3, #2
 8005f52:	3002      	addeq	r0, #2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	db06      	blt.n	8005f66 <__hi0bits+0x3c>
 8005f58:	005b      	lsls	r3, r3, #1
 8005f5a:	d503      	bpl.n	8005f64 <__hi0bits+0x3a>
 8005f5c:	3001      	adds	r0, #1
 8005f5e:	4770      	bx	lr
 8005f60:	2000      	movs	r0, #0
 8005f62:	e7e8      	b.n	8005f36 <__hi0bits+0xc>
 8005f64:	2020      	movs	r0, #32
 8005f66:	4770      	bx	lr

08005f68 <__lo0bits>:
 8005f68:	6803      	ldr	r3, [r0, #0]
 8005f6a:	4601      	mov	r1, r0
 8005f6c:	f013 0207 	ands.w	r2, r3, #7
 8005f70:	d00b      	beq.n	8005f8a <__lo0bits+0x22>
 8005f72:	07da      	lsls	r2, r3, #31
 8005f74:	d423      	bmi.n	8005fbe <__lo0bits+0x56>
 8005f76:	0798      	lsls	r0, r3, #30
 8005f78:	bf49      	itett	mi
 8005f7a:	085b      	lsrmi	r3, r3, #1
 8005f7c:	089b      	lsrpl	r3, r3, #2
 8005f7e:	2001      	movmi	r0, #1
 8005f80:	600b      	strmi	r3, [r1, #0]
 8005f82:	bf5c      	itt	pl
 8005f84:	600b      	strpl	r3, [r1, #0]
 8005f86:	2002      	movpl	r0, #2
 8005f88:	4770      	bx	lr
 8005f8a:	b298      	uxth	r0, r3
 8005f8c:	b9a8      	cbnz	r0, 8005fba <__lo0bits+0x52>
 8005f8e:	2010      	movs	r0, #16
 8005f90:	0c1b      	lsrs	r3, r3, #16
 8005f92:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005f96:	bf04      	itt	eq
 8005f98:	0a1b      	lsreq	r3, r3, #8
 8005f9a:	3008      	addeq	r0, #8
 8005f9c:	071a      	lsls	r2, r3, #28
 8005f9e:	bf04      	itt	eq
 8005fa0:	091b      	lsreq	r3, r3, #4
 8005fa2:	3004      	addeq	r0, #4
 8005fa4:	079a      	lsls	r2, r3, #30
 8005fa6:	bf04      	itt	eq
 8005fa8:	089b      	lsreq	r3, r3, #2
 8005faa:	3002      	addeq	r0, #2
 8005fac:	07da      	lsls	r2, r3, #31
 8005fae:	d402      	bmi.n	8005fb6 <__lo0bits+0x4e>
 8005fb0:	085b      	lsrs	r3, r3, #1
 8005fb2:	d006      	beq.n	8005fc2 <__lo0bits+0x5a>
 8005fb4:	3001      	adds	r0, #1
 8005fb6:	600b      	str	r3, [r1, #0]
 8005fb8:	4770      	bx	lr
 8005fba:	4610      	mov	r0, r2
 8005fbc:	e7e9      	b.n	8005f92 <__lo0bits+0x2a>
 8005fbe:	2000      	movs	r0, #0
 8005fc0:	4770      	bx	lr
 8005fc2:	2020      	movs	r0, #32
 8005fc4:	4770      	bx	lr

08005fc6 <__i2b>:
 8005fc6:	b510      	push	{r4, lr}
 8005fc8:	460c      	mov	r4, r1
 8005fca:	2101      	movs	r1, #1
 8005fcc:	f7ff fee9 	bl	8005da2 <_Balloc>
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	6144      	str	r4, [r0, #20]
 8005fd4:	6102      	str	r2, [r0, #16]
 8005fd6:	bd10      	pop	{r4, pc}

08005fd8 <__multiply>:
 8005fd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fdc:	4614      	mov	r4, r2
 8005fde:	690a      	ldr	r2, [r1, #16]
 8005fe0:	6923      	ldr	r3, [r4, #16]
 8005fe2:	4689      	mov	r9, r1
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	bfbe      	ittt	lt
 8005fe8:	460b      	movlt	r3, r1
 8005fea:	46a1      	movlt	r9, r4
 8005fec:	461c      	movlt	r4, r3
 8005fee:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005ff2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005ff6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8005ffa:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005ffe:	eb07 060a 	add.w	r6, r7, sl
 8006002:	429e      	cmp	r6, r3
 8006004:	bfc8      	it	gt
 8006006:	3101      	addgt	r1, #1
 8006008:	f7ff fecb 	bl	8005da2 <_Balloc>
 800600c:	f100 0514 	add.w	r5, r0, #20
 8006010:	462b      	mov	r3, r5
 8006012:	2200      	movs	r2, #0
 8006014:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006018:	4543      	cmp	r3, r8
 800601a:	d316      	bcc.n	800604a <__multiply+0x72>
 800601c:	f104 0214 	add.w	r2, r4, #20
 8006020:	f109 0114 	add.w	r1, r9, #20
 8006024:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8006028:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800602c:	9301      	str	r3, [sp, #4]
 800602e:	9c01      	ldr	r4, [sp, #4]
 8006030:	4613      	mov	r3, r2
 8006032:	4294      	cmp	r4, r2
 8006034:	d80c      	bhi.n	8006050 <__multiply+0x78>
 8006036:	2e00      	cmp	r6, #0
 8006038:	dd03      	ble.n	8006042 <__multiply+0x6a>
 800603a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800603e:	2b00      	cmp	r3, #0
 8006040:	d054      	beq.n	80060ec <__multiply+0x114>
 8006042:	6106      	str	r6, [r0, #16]
 8006044:	b003      	add	sp, #12
 8006046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800604a:	f843 2b04 	str.w	r2, [r3], #4
 800604e:	e7e3      	b.n	8006018 <__multiply+0x40>
 8006050:	f8b3 a000 	ldrh.w	sl, [r3]
 8006054:	3204      	adds	r2, #4
 8006056:	f1ba 0f00 	cmp.w	sl, #0
 800605a:	d020      	beq.n	800609e <__multiply+0xc6>
 800605c:	46ae      	mov	lr, r5
 800605e:	4689      	mov	r9, r1
 8006060:	f04f 0c00 	mov.w	ip, #0
 8006064:	f859 4b04 	ldr.w	r4, [r9], #4
 8006068:	f8be b000 	ldrh.w	fp, [lr]
 800606c:	b2a3      	uxth	r3, r4
 800606e:	fb0a b303 	mla	r3, sl, r3, fp
 8006072:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8006076:	f8de 4000 	ldr.w	r4, [lr]
 800607a:	4463      	add	r3, ip
 800607c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006080:	fb0a c40b 	mla	r4, sl, fp, ip
 8006084:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006088:	b29b      	uxth	r3, r3
 800608a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800608e:	454f      	cmp	r7, r9
 8006090:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006094:	f84e 3b04 	str.w	r3, [lr], #4
 8006098:	d8e4      	bhi.n	8006064 <__multiply+0x8c>
 800609a:	f8ce c000 	str.w	ip, [lr]
 800609e:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 80060a2:	f1b9 0f00 	cmp.w	r9, #0
 80060a6:	d01f      	beq.n	80060e8 <__multiply+0x110>
 80060a8:	46ae      	mov	lr, r5
 80060aa:	468c      	mov	ip, r1
 80060ac:	f04f 0a00 	mov.w	sl, #0
 80060b0:	682b      	ldr	r3, [r5, #0]
 80060b2:	f8bc 4000 	ldrh.w	r4, [ip]
 80060b6:	f8be b002 	ldrh.w	fp, [lr, #2]
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	fb09 b404 	mla	r4, r9, r4, fp
 80060c0:	44a2      	add	sl, r4
 80060c2:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80060c6:	f84e 3b04 	str.w	r3, [lr], #4
 80060ca:	f85c 3b04 	ldr.w	r3, [ip], #4
 80060ce:	f8be 4000 	ldrh.w	r4, [lr]
 80060d2:	0c1b      	lsrs	r3, r3, #16
 80060d4:	fb09 4303 	mla	r3, r9, r3, r4
 80060d8:	4567      	cmp	r7, ip
 80060da:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80060de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060e2:	d8e6      	bhi.n	80060b2 <__multiply+0xda>
 80060e4:	f8ce 3000 	str.w	r3, [lr]
 80060e8:	3504      	adds	r5, #4
 80060ea:	e7a0      	b.n	800602e <__multiply+0x56>
 80060ec:	3e01      	subs	r6, #1
 80060ee:	e7a2      	b.n	8006036 <__multiply+0x5e>

080060f0 <__pow5mult>:
 80060f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060f4:	4615      	mov	r5, r2
 80060f6:	f012 0203 	ands.w	r2, r2, #3
 80060fa:	4606      	mov	r6, r0
 80060fc:	460f      	mov	r7, r1
 80060fe:	d007      	beq.n	8006110 <__pow5mult+0x20>
 8006100:	4c21      	ldr	r4, [pc, #132]	; (8006188 <__pow5mult+0x98>)
 8006102:	3a01      	subs	r2, #1
 8006104:	2300      	movs	r3, #0
 8006106:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800610a:	f7ff fe95 	bl	8005e38 <__multadd>
 800610e:	4607      	mov	r7, r0
 8006110:	10ad      	asrs	r5, r5, #2
 8006112:	d035      	beq.n	8006180 <__pow5mult+0x90>
 8006114:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006116:	b93c      	cbnz	r4, 8006128 <__pow5mult+0x38>
 8006118:	2010      	movs	r0, #16
 800611a:	f7fe f80d 	bl	8004138 <malloc>
 800611e:	6270      	str	r0, [r6, #36]	; 0x24
 8006120:	6044      	str	r4, [r0, #4]
 8006122:	6084      	str	r4, [r0, #8]
 8006124:	6004      	str	r4, [r0, #0]
 8006126:	60c4      	str	r4, [r0, #12]
 8006128:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800612c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006130:	b94c      	cbnz	r4, 8006146 <__pow5mult+0x56>
 8006132:	f240 2171 	movw	r1, #625	; 0x271
 8006136:	4630      	mov	r0, r6
 8006138:	f7ff ff45 	bl	8005fc6 <__i2b>
 800613c:	2300      	movs	r3, #0
 800613e:	4604      	mov	r4, r0
 8006140:	f8c8 0008 	str.w	r0, [r8, #8]
 8006144:	6003      	str	r3, [r0, #0]
 8006146:	f04f 0800 	mov.w	r8, #0
 800614a:	07eb      	lsls	r3, r5, #31
 800614c:	d50a      	bpl.n	8006164 <__pow5mult+0x74>
 800614e:	4639      	mov	r1, r7
 8006150:	4622      	mov	r2, r4
 8006152:	4630      	mov	r0, r6
 8006154:	f7ff ff40 	bl	8005fd8 <__multiply>
 8006158:	4681      	mov	r9, r0
 800615a:	4639      	mov	r1, r7
 800615c:	4630      	mov	r0, r6
 800615e:	f7ff fe54 	bl	8005e0a <_Bfree>
 8006162:	464f      	mov	r7, r9
 8006164:	106d      	asrs	r5, r5, #1
 8006166:	d00b      	beq.n	8006180 <__pow5mult+0x90>
 8006168:	6820      	ldr	r0, [r4, #0]
 800616a:	b938      	cbnz	r0, 800617c <__pow5mult+0x8c>
 800616c:	4622      	mov	r2, r4
 800616e:	4621      	mov	r1, r4
 8006170:	4630      	mov	r0, r6
 8006172:	f7ff ff31 	bl	8005fd8 <__multiply>
 8006176:	6020      	str	r0, [r4, #0]
 8006178:	f8c0 8000 	str.w	r8, [r0]
 800617c:	4604      	mov	r4, r0
 800617e:	e7e4      	b.n	800614a <__pow5mult+0x5a>
 8006180:	4638      	mov	r0, r7
 8006182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006186:	bf00      	nop
 8006188:	08006da0 	.word	0x08006da0

0800618c <__lshift>:
 800618c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006190:	460c      	mov	r4, r1
 8006192:	4607      	mov	r7, r0
 8006194:	4616      	mov	r6, r2
 8006196:	6923      	ldr	r3, [r4, #16]
 8006198:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800619c:	eb0a 0903 	add.w	r9, sl, r3
 80061a0:	6849      	ldr	r1, [r1, #4]
 80061a2:	68a3      	ldr	r3, [r4, #8]
 80061a4:	f109 0501 	add.w	r5, r9, #1
 80061a8:	42ab      	cmp	r3, r5
 80061aa:	db31      	blt.n	8006210 <__lshift+0x84>
 80061ac:	4638      	mov	r0, r7
 80061ae:	f7ff fdf8 	bl	8005da2 <_Balloc>
 80061b2:	2200      	movs	r2, #0
 80061b4:	4680      	mov	r8, r0
 80061b6:	4611      	mov	r1, r2
 80061b8:	f100 0314 	add.w	r3, r0, #20
 80061bc:	4552      	cmp	r2, sl
 80061be:	db2a      	blt.n	8006216 <__lshift+0x8a>
 80061c0:	6920      	ldr	r0, [r4, #16]
 80061c2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80061c6:	f104 0114 	add.w	r1, r4, #20
 80061ca:	f016 021f 	ands.w	r2, r6, #31
 80061ce:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80061d2:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80061d6:	d022      	beq.n	800621e <__lshift+0x92>
 80061d8:	2000      	movs	r0, #0
 80061da:	f1c2 0c20 	rsb	ip, r2, #32
 80061de:	680e      	ldr	r6, [r1, #0]
 80061e0:	4096      	lsls	r6, r2
 80061e2:	4330      	orrs	r0, r6
 80061e4:	f843 0b04 	str.w	r0, [r3], #4
 80061e8:	f851 0b04 	ldr.w	r0, [r1], #4
 80061ec:	458e      	cmp	lr, r1
 80061ee:	fa20 f00c 	lsr.w	r0, r0, ip
 80061f2:	d8f4      	bhi.n	80061de <__lshift+0x52>
 80061f4:	6018      	str	r0, [r3, #0]
 80061f6:	b108      	cbz	r0, 80061fc <__lshift+0x70>
 80061f8:	f109 0502 	add.w	r5, r9, #2
 80061fc:	3d01      	subs	r5, #1
 80061fe:	4638      	mov	r0, r7
 8006200:	f8c8 5010 	str.w	r5, [r8, #16]
 8006204:	4621      	mov	r1, r4
 8006206:	f7ff fe00 	bl	8005e0a <_Bfree>
 800620a:	4640      	mov	r0, r8
 800620c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006210:	3101      	adds	r1, #1
 8006212:	005b      	lsls	r3, r3, #1
 8006214:	e7c8      	b.n	80061a8 <__lshift+0x1c>
 8006216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800621a:	3201      	adds	r2, #1
 800621c:	e7ce      	b.n	80061bc <__lshift+0x30>
 800621e:	3b04      	subs	r3, #4
 8006220:	f851 2b04 	ldr.w	r2, [r1], #4
 8006224:	458e      	cmp	lr, r1
 8006226:	f843 2f04 	str.w	r2, [r3, #4]!
 800622a:	d8f9      	bhi.n	8006220 <__lshift+0x94>
 800622c:	e7e6      	b.n	80061fc <__lshift+0x70>

0800622e <__mcmp>:
 800622e:	6903      	ldr	r3, [r0, #16]
 8006230:	690a      	ldr	r2, [r1, #16]
 8006232:	b530      	push	{r4, r5, lr}
 8006234:	1a9b      	subs	r3, r3, r2
 8006236:	d10c      	bne.n	8006252 <__mcmp+0x24>
 8006238:	0092      	lsls	r2, r2, #2
 800623a:	3014      	adds	r0, #20
 800623c:	3114      	adds	r1, #20
 800623e:	1884      	adds	r4, r0, r2
 8006240:	4411      	add	r1, r2
 8006242:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006246:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800624a:	4295      	cmp	r5, r2
 800624c:	d003      	beq.n	8006256 <__mcmp+0x28>
 800624e:	d305      	bcc.n	800625c <__mcmp+0x2e>
 8006250:	2301      	movs	r3, #1
 8006252:	4618      	mov	r0, r3
 8006254:	bd30      	pop	{r4, r5, pc}
 8006256:	42a0      	cmp	r0, r4
 8006258:	d3f3      	bcc.n	8006242 <__mcmp+0x14>
 800625a:	e7fa      	b.n	8006252 <__mcmp+0x24>
 800625c:	f04f 33ff 	mov.w	r3, #4294967295
 8006260:	e7f7      	b.n	8006252 <__mcmp+0x24>

08006262 <__mdiff>:
 8006262:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006266:	460d      	mov	r5, r1
 8006268:	4607      	mov	r7, r0
 800626a:	4611      	mov	r1, r2
 800626c:	4628      	mov	r0, r5
 800626e:	4614      	mov	r4, r2
 8006270:	f7ff ffdd 	bl	800622e <__mcmp>
 8006274:	1e06      	subs	r6, r0, #0
 8006276:	d108      	bne.n	800628a <__mdiff+0x28>
 8006278:	4631      	mov	r1, r6
 800627a:	4638      	mov	r0, r7
 800627c:	f7ff fd91 	bl	8005da2 <_Balloc>
 8006280:	2301      	movs	r3, #1
 8006282:	6146      	str	r6, [r0, #20]
 8006284:	6103      	str	r3, [r0, #16]
 8006286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800628a:	bfa4      	itt	ge
 800628c:	4623      	movge	r3, r4
 800628e:	462c      	movge	r4, r5
 8006290:	4638      	mov	r0, r7
 8006292:	6861      	ldr	r1, [r4, #4]
 8006294:	bfa6      	itte	ge
 8006296:	461d      	movge	r5, r3
 8006298:	2600      	movge	r6, #0
 800629a:	2601      	movlt	r6, #1
 800629c:	f7ff fd81 	bl	8005da2 <_Balloc>
 80062a0:	f04f 0c00 	mov.w	ip, #0
 80062a4:	60c6      	str	r6, [r0, #12]
 80062a6:	692b      	ldr	r3, [r5, #16]
 80062a8:	6926      	ldr	r6, [r4, #16]
 80062aa:	f104 0214 	add.w	r2, r4, #20
 80062ae:	f105 0914 	add.w	r9, r5, #20
 80062b2:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80062b6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80062ba:	f100 0114 	add.w	r1, r0, #20
 80062be:	f852 ab04 	ldr.w	sl, [r2], #4
 80062c2:	f859 5b04 	ldr.w	r5, [r9], #4
 80062c6:	fa1f f38a 	uxth.w	r3, sl
 80062ca:	4463      	add	r3, ip
 80062cc:	b2ac      	uxth	r4, r5
 80062ce:	1b1b      	subs	r3, r3, r4
 80062d0:	0c2c      	lsrs	r4, r5, #16
 80062d2:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80062d6:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80062da:	b29b      	uxth	r3, r3
 80062dc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80062e0:	45c8      	cmp	r8, r9
 80062e2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80062e6:	4696      	mov	lr, r2
 80062e8:	f841 4b04 	str.w	r4, [r1], #4
 80062ec:	d8e7      	bhi.n	80062be <__mdiff+0x5c>
 80062ee:	45be      	cmp	lr, r7
 80062f0:	d305      	bcc.n	80062fe <__mdiff+0x9c>
 80062f2:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80062f6:	b18b      	cbz	r3, 800631c <__mdiff+0xba>
 80062f8:	6106      	str	r6, [r0, #16]
 80062fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062fe:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006302:	b2a2      	uxth	r2, r4
 8006304:	4462      	add	r2, ip
 8006306:	1413      	asrs	r3, r2, #16
 8006308:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800630c:	b292      	uxth	r2, r2
 800630e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006312:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006316:	f841 2b04 	str.w	r2, [r1], #4
 800631a:	e7e8      	b.n	80062ee <__mdiff+0x8c>
 800631c:	3e01      	subs	r6, #1
 800631e:	e7e8      	b.n	80062f2 <__mdiff+0x90>

08006320 <__ulp>:
 8006320:	4b10      	ldr	r3, [pc, #64]	; (8006364 <__ulp+0x44>)
 8006322:	400b      	ands	r3, r1
 8006324:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006328:	2b00      	cmp	r3, #0
 800632a:	dd02      	ble.n	8006332 <__ulp+0x12>
 800632c:	2000      	movs	r0, #0
 800632e:	4619      	mov	r1, r3
 8006330:	4770      	bx	lr
 8006332:	425b      	negs	r3, r3
 8006334:	151b      	asrs	r3, r3, #20
 8006336:	2b13      	cmp	r3, #19
 8006338:	f04f 0000 	mov.w	r0, #0
 800633c:	f04f 0100 	mov.w	r1, #0
 8006340:	dc04      	bgt.n	800634c <__ulp+0x2c>
 8006342:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006346:	fa42 f103 	asr.w	r1, r2, r3
 800634a:	4770      	bx	lr
 800634c:	2201      	movs	r2, #1
 800634e:	3b14      	subs	r3, #20
 8006350:	2b1e      	cmp	r3, #30
 8006352:	bfce      	itee	gt
 8006354:	4613      	movgt	r3, r2
 8006356:	f1c3 031f 	rsble	r3, r3, #31
 800635a:	fa02 f303 	lslle.w	r3, r2, r3
 800635e:	4618      	mov	r0, r3
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	7ff00000 	.word	0x7ff00000

08006368 <__b2d>:
 8006368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800636c:	6907      	ldr	r7, [r0, #16]
 800636e:	f100 0914 	add.w	r9, r0, #20
 8006372:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006376:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800637a:	f1a7 0804 	sub.w	r8, r7, #4
 800637e:	4630      	mov	r0, r6
 8006380:	f7ff fdd3 	bl	8005f2a <__hi0bits>
 8006384:	f1c0 0320 	rsb	r3, r0, #32
 8006388:	280a      	cmp	r0, #10
 800638a:	600b      	str	r3, [r1, #0]
 800638c:	491e      	ldr	r1, [pc, #120]	; (8006408 <__b2d+0xa0>)
 800638e:	dc17      	bgt.n	80063c0 <__b2d+0x58>
 8006390:	45c1      	cmp	r9, r8
 8006392:	bf28      	it	cs
 8006394:	2200      	movcs	r2, #0
 8006396:	f1c0 0e0b 	rsb	lr, r0, #11
 800639a:	fa26 f30e 	lsr.w	r3, r6, lr
 800639e:	bf38      	it	cc
 80063a0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80063a4:	ea43 0501 	orr.w	r5, r3, r1
 80063a8:	f100 0315 	add.w	r3, r0, #21
 80063ac:	fa06 f303 	lsl.w	r3, r6, r3
 80063b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80063b4:	ea43 0402 	orr.w	r4, r3, r2
 80063b8:	4620      	mov	r0, r4
 80063ba:	4629      	mov	r1, r5
 80063bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063c0:	45c1      	cmp	r9, r8
 80063c2:	bf3a      	itte	cc
 80063c4:	f1a7 0808 	subcc.w	r8, r7, #8
 80063c8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80063cc:	2200      	movcs	r2, #0
 80063ce:	f1b0 030b 	subs.w	r3, r0, #11
 80063d2:	d015      	beq.n	8006400 <__b2d+0x98>
 80063d4:	409e      	lsls	r6, r3
 80063d6:	f1c3 0720 	rsb	r7, r3, #32
 80063da:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 80063de:	fa22 f107 	lsr.w	r1, r2, r7
 80063e2:	45c8      	cmp	r8, r9
 80063e4:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 80063e8:	ea46 0501 	orr.w	r5, r6, r1
 80063ec:	bf94      	ite	ls
 80063ee:	2100      	movls	r1, #0
 80063f0:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80063f4:	fa02 f003 	lsl.w	r0, r2, r3
 80063f8:	40f9      	lsrs	r1, r7
 80063fa:	ea40 0401 	orr.w	r4, r0, r1
 80063fe:	e7db      	b.n	80063b8 <__b2d+0x50>
 8006400:	ea46 0501 	orr.w	r5, r6, r1
 8006404:	4614      	mov	r4, r2
 8006406:	e7d7      	b.n	80063b8 <__b2d+0x50>
 8006408:	3ff00000 	.word	0x3ff00000

0800640c <__d2b>:
 800640c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006410:	461c      	mov	r4, r3
 8006412:	2101      	movs	r1, #1
 8006414:	4690      	mov	r8, r2
 8006416:	9e08      	ldr	r6, [sp, #32]
 8006418:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800641a:	f7ff fcc2 	bl	8005da2 <_Balloc>
 800641e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006422:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006426:	4607      	mov	r7, r0
 8006428:	bb34      	cbnz	r4, 8006478 <__d2b+0x6c>
 800642a:	9201      	str	r2, [sp, #4]
 800642c:	f1b8 0f00 	cmp.w	r8, #0
 8006430:	d027      	beq.n	8006482 <__d2b+0x76>
 8006432:	a802      	add	r0, sp, #8
 8006434:	f840 8d08 	str.w	r8, [r0, #-8]!
 8006438:	f7ff fd96 	bl	8005f68 <__lo0bits>
 800643c:	9900      	ldr	r1, [sp, #0]
 800643e:	b1f0      	cbz	r0, 800647e <__d2b+0x72>
 8006440:	9a01      	ldr	r2, [sp, #4]
 8006442:	f1c0 0320 	rsb	r3, r0, #32
 8006446:	fa02 f303 	lsl.w	r3, r2, r3
 800644a:	430b      	orrs	r3, r1
 800644c:	40c2      	lsrs	r2, r0
 800644e:	617b      	str	r3, [r7, #20]
 8006450:	9201      	str	r2, [sp, #4]
 8006452:	9b01      	ldr	r3, [sp, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	bf14      	ite	ne
 8006458:	2102      	movne	r1, #2
 800645a:	2101      	moveq	r1, #1
 800645c:	61bb      	str	r3, [r7, #24]
 800645e:	6139      	str	r1, [r7, #16]
 8006460:	b1c4      	cbz	r4, 8006494 <__d2b+0x88>
 8006462:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006466:	4404      	add	r4, r0
 8006468:	6034      	str	r4, [r6, #0]
 800646a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800646e:	6028      	str	r0, [r5, #0]
 8006470:	4638      	mov	r0, r7
 8006472:	b002      	add	sp, #8
 8006474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006478:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800647c:	e7d5      	b.n	800642a <__d2b+0x1e>
 800647e:	6179      	str	r1, [r7, #20]
 8006480:	e7e7      	b.n	8006452 <__d2b+0x46>
 8006482:	a801      	add	r0, sp, #4
 8006484:	f7ff fd70 	bl	8005f68 <__lo0bits>
 8006488:	2101      	movs	r1, #1
 800648a:	9b01      	ldr	r3, [sp, #4]
 800648c:	6139      	str	r1, [r7, #16]
 800648e:	617b      	str	r3, [r7, #20]
 8006490:	3020      	adds	r0, #32
 8006492:	e7e5      	b.n	8006460 <__d2b+0x54>
 8006494:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006498:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800649c:	6030      	str	r0, [r6, #0]
 800649e:	6918      	ldr	r0, [r3, #16]
 80064a0:	f7ff fd43 	bl	8005f2a <__hi0bits>
 80064a4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80064a8:	e7e1      	b.n	800646e <__d2b+0x62>

080064aa <__ratio>:
 80064aa:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80064ae:	4688      	mov	r8, r1
 80064b0:	4669      	mov	r1, sp
 80064b2:	4681      	mov	r9, r0
 80064b4:	f7ff ff58 	bl	8006368 <__b2d>
 80064b8:	460d      	mov	r5, r1
 80064ba:	4604      	mov	r4, r0
 80064bc:	a901      	add	r1, sp, #4
 80064be:	4640      	mov	r0, r8
 80064c0:	f7ff ff52 	bl	8006368 <__b2d>
 80064c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80064c8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80064cc:	9e00      	ldr	r6, [sp, #0]
 80064ce:	1a9a      	subs	r2, r3, r2
 80064d0:	9b01      	ldr	r3, [sp, #4]
 80064d2:	1af3      	subs	r3, r6, r3
 80064d4:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80064d8:	2b00      	cmp	r3, #0
 80064da:	bfd6      	itet	le
 80064dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80064e0:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 80064e4:	eb01 5103 	addle.w	r1, r1, r3, lsl #20
 80064e8:	4602      	mov	r2, r0
 80064ea:	460b      	mov	r3, r1
 80064ec:	4620      	mov	r0, r4
 80064ee:	4629      	mov	r1, r5
 80064f0:	f7fa f918 	bl	8000724 <__aeabi_ddiv>
 80064f4:	b002      	add	sp, #8
 80064f6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

080064fa <__copybits>:
 80064fa:	3901      	subs	r1, #1
 80064fc:	b510      	push	{r4, lr}
 80064fe:	1149      	asrs	r1, r1, #5
 8006500:	6914      	ldr	r4, [r2, #16]
 8006502:	3101      	adds	r1, #1
 8006504:	f102 0314 	add.w	r3, r2, #20
 8006508:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800650c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006510:	42a3      	cmp	r3, r4
 8006512:	4602      	mov	r2, r0
 8006514:	d303      	bcc.n	800651e <__copybits+0x24>
 8006516:	2300      	movs	r3, #0
 8006518:	428a      	cmp	r2, r1
 800651a:	d305      	bcc.n	8006528 <__copybits+0x2e>
 800651c:	bd10      	pop	{r4, pc}
 800651e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006522:	f840 2b04 	str.w	r2, [r0], #4
 8006526:	e7f3      	b.n	8006510 <__copybits+0x16>
 8006528:	f842 3b04 	str.w	r3, [r2], #4
 800652c:	e7f4      	b.n	8006518 <__copybits+0x1e>

0800652e <__any_on>:
 800652e:	f100 0214 	add.w	r2, r0, #20
 8006532:	6900      	ldr	r0, [r0, #16]
 8006534:	114b      	asrs	r3, r1, #5
 8006536:	4298      	cmp	r0, r3
 8006538:	b510      	push	{r4, lr}
 800653a:	db11      	blt.n	8006560 <__any_on+0x32>
 800653c:	dd0a      	ble.n	8006554 <__any_on+0x26>
 800653e:	f011 011f 	ands.w	r1, r1, #31
 8006542:	d007      	beq.n	8006554 <__any_on+0x26>
 8006544:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006548:	fa24 f001 	lsr.w	r0, r4, r1
 800654c:	fa00 f101 	lsl.w	r1, r0, r1
 8006550:	428c      	cmp	r4, r1
 8006552:	d10b      	bne.n	800656c <__any_on+0x3e>
 8006554:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006558:	4293      	cmp	r3, r2
 800655a:	d803      	bhi.n	8006564 <__any_on+0x36>
 800655c:	2000      	movs	r0, #0
 800655e:	bd10      	pop	{r4, pc}
 8006560:	4603      	mov	r3, r0
 8006562:	e7f7      	b.n	8006554 <__any_on+0x26>
 8006564:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006568:	2900      	cmp	r1, #0
 800656a:	d0f5      	beq.n	8006558 <__any_on+0x2a>
 800656c:	2001      	movs	r0, #1
 800656e:	bd10      	pop	{r4, pc}

08006570 <strncmp>:
 8006570:	b510      	push	{r4, lr}
 8006572:	b16a      	cbz	r2, 8006590 <strncmp+0x20>
 8006574:	3901      	subs	r1, #1
 8006576:	1884      	adds	r4, r0, r2
 8006578:	f810 3b01 	ldrb.w	r3, [r0], #1
 800657c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006580:	4293      	cmp	r3, r2
 8006582:	d103      	bne.n	800658c <strncmp+0x1c>
 8006584:	42a0      	cmp	r0, r4
 8006586:	d001      	beq.n	800658c <strncmp+0x1c>
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1f5      	bne.n	8006578 <strncmp+0x8>
 800658c:	1a98      	subs	r0, r3, r2
 800658e:	bd10      	pop	{r4, pc}
 8006590:	4610      	mov	r0, r2
 8006592:	bd10      	pop	{r4, pc}

08006594 <__ascii_wctomb>:
 8006594:	b149      	cbz	r1, 80065aa <__ascii_wctomb+0x16>
 8006596:	2aff      	cmp	r2, #255	; 0xff
 8006598:	bf8b      	itete	hi
 800659a:	238a      	movhi	r3, #138	; 0x8a
 800659c:	700a      	strbls	r2, [r1, #0]
 800659e:	6003      	strhi	r3, [r0, #0]
 80065a0:	2001      	movls	r0, #1
 80065a2:	bf88      	it	hi
 80065a4:	f04f 30ff 	movhi.w	r0, #4294967295
 80065a8:	4770      	bx	lr
 80065aa:	4608      	mov	r0, r1
 80065ac:	4770      	bx	lr

080065ae <_calloc_r>:
 80065ae:	b510      	push	{r4, lr}
 80065b0:	4351      	muls	r1, r2
 80065b2:	f7fd fdd1 	bl	8004158 <_malloc_r>
 80065b6:	4604      	mov	r4, r0
 80065b8:	b198      	cbz	r0, 80065e2 <_calloc_r+0x34>
 80065ba:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80065be:	f022 0203 	bic.w	r2, r2, #3
 80065c2:	3a04      	subs	r2, #4
 80065c4:	2a24      	cmp	r2, #36	; 0x24
 80065c6:	d81b      	bhi.n	8006600 <_calloc_r+0x52>
 80065c8:	2a13      	cmp	r2, #19
 80065ca:	d917      	bls.n	80065fc <_calloc_r+0x4e>
 80065cc:	2100      	movs	r1, #0
 80065ce:	2a1b      	cmp	r2, #27
 80065d0:	6001      	str	r1, [r0, #0]
 80065d2:	6041      	str	r1, [r0, #4]
 80065d4:	d807      	bhi.n	80065e6 <_calloc_r+0x38>
 80065d6:	f100 0308 	add.w	r3, r0, #8
 80065da:	2200      	movs	r2, #0
 80065dc:	601a      	str	r2, [r3, #0]
 80065de:	605a      	str	r2, [r3, #4]
 80065e0:	609a      	str	r2, [r3, #8]
 80065e2:	4620      	mov	r0, r4
 80065e4:	bd10      	pop	{r4, pc}
 80065e6:	2a24      	cmp	r2, #36	; 0x24
 80065e8:	6081      	str	r1, [r0, #8]
 80065ea:	60c1      	str	r1, [r0, #12]
 80065ec:	bf11      	iteee	ne
 80065ee:	f100 0310 	addne.w	r3, r0, #16
 80065f2:	6101      	streq	r1, [r0, #16]
 80065f4:	f100 0318 	addeq.w	r3, r0, #24
 80065f8:	6141      	streq	r1, [r0, #20]
 80065fa:	e7ee      	b.n	80065da <_calloc_r+0x2c>
 80065fc:	4603      	mov	r3, r0
 80065fe:	e7ec      	b.n	80065da <_calloc_r+0x2c>
 8006600:	2100      	movs	r1, #0
 8006602:	f7fd ffb5 	bl	8004570 <memset>
 8006606:	e7ec      	b.n	80065e2 <_calloc_r+0x34>

08006608 <_sbrk>:
 8006608:	4b04      	ldr	r3, [pc, #16]	; (800661c <_sbrk+0x14>)
 800660a:	4602      	mov	r2, r0
 800660c:	6819      	ldr	r1, [r3, #0]
 800660e:	b909      	cbnz	r1, 8006614 <_sbrk+0xc>
 8006610:	4903      	ldr	r1, [pc, #12]	; (8006620 <_sbrk+0x18>)
 8006612:	6019      	str	r1, [r3, #0]
 8006614:	6818      	ldr	r0, [r3, #0]
 8006616:	4402      	add	r2, r0
 8006618:	601a      	str	r2, [r3, #0]
 800661a:	4770      	bx	lr
 800661c:	20000a54 	.word	0x20000a54
 8006620:	20000a68 	.word	0x20000a68

08006624 <_init>:
 8006624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006626:	bf00      	nop
 8006628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800662a:	bc08      	pop	{r3}
 800662c:	469e      	mov	lr, r3
 800662e:	4770      	bx	lr

08006630 <_fini>:
 8006630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006632:	bf00      	nop
 8006634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006636:	bc08      	pop	{r3}
 8006638:	469e      	mov	lr, r3
 800663a:	4770      	bx	lr

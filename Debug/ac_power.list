
ac_power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000421c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  08004328  08004328  00014328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004904  08004904  00014904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800490c  0800490c  0001490c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004910  08004910  00014910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000518  20000000  08004914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000064  20000518  08004e2c  00020518  2**2
                  ALLOC
  8 ._user_heap_stack 00000100  2000057c  08004e2c  0002057c  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00020518  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002bd73  00000000  00000000  00020541  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005b88  00000000  00000000  0004c2b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000e18  00000000  00000000  00051e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000da8  00000000  00000000  00052c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00008ec0  00000000  00000000  00053a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005e90  00000000  00000000  0005c8c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00062750  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003904  00000000  00000000  000627cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    000027ea  00000000  00000000  000660d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000003f  00000000  00000000  000688ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000518 	.word	0x20000518
 8000128:	00000000 	.word	0x00000000
 800012c:	08004310 	.word	0x08004310

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000051c 	.word	0x2000051c
 8000148:	08004310 	.word	0x08004310

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029a:	f1a4 0401 	sub.w	r4, r4, #1
 800029e:	d1e9      	bne.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f092 0f00 	teq	r2, #0
 8000446:	bf14      	ite	ne
 8000448:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800044c:	4770      	bxeq	lr
 800044e:	b530      	push	{r4, r5, lr}
 8000450:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000454:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000458:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800045c:	e720      	b.n	80002a0 <__adddf3+0x138>
 800045e:	bf00      	nop

08000460 <__aeabi_ul2d>:
 8000460:	ea50 0201 	orrs.w	r2, r0, r1
 8000464:	bf08      	it	eq
 8000466:	4770      	bxeq	lr
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	f04f 0500 	mov.w	r5, #0
 800046e:	e00a      	b.n	8000486 <__aeabi_l2d+0x16>

08000470 <__aeabi_l2d>:
 8000470:	ea50 0201 	orrs.w	r2, r0, r1
 8000474:	bf08      	it	eq
 8000476:	4770      	bxeq	lr
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047e:	d502      	bpl.n	8000486 <__aeabi_l2d+0x16>
 8000480:	4240      	negs	r0, r0
 8000482:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000486:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000492:	f43f aedc 	beq.w	800024e <__adddf3+0xe6>
 8000496:	f04f 0203 	mov.w	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80004be:	ea40 000e 	orr.w	r0, r0, lr
 80004c2:	fa21 f102 	lsr.w	r1, r1, r2
 80004c6:	4414      	add	r4, r2
 80004c8:	e6c1      	b.n	800024e <__adddf3+0xe6>
 80004ca:	bf00      	nop

080004cc <__aeabi_dmul>:
 80004cc:	b570      	push	{r4, r5, r6, lr}
 80004ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004da:	bf1d      	ittte	ne
 80004dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e0:	ea94 0f0c 	teqne	r4, ip
 80004e4:	ea95 0f0c 	teqne	r5, ip
 80004e8:	f000 f8de 	bleq	80006a8 <__aeabi_dmul+0x1dc>
 80004ec:	442c      	add	r4, r5
 80004ee:	ea81 0603 	eor.w	r6, r1, r3
 80004f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fe:	bf18      	it	ne
 8000500:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000504:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000508:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800050c:	d038      	beq.n	8000580 <__aeabi_dmul+0xb4>
 800050e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000512:	f04f 0500 	mov.w	r5, #0
 8000516:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000522:	f04f 0600 	mov.w	r6, #0
 8000526:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052a:	f09c 0f00 	teq	ip, #0
 800052e:	bf18      	it	ne
 8000530:	f04e 0e01 	orrne.w	lr, lr, #1
 8000534:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000538:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800053c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000540:	d204      	bcs.n	800054c <__aeabi_dmul+0x80>
 8000542:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000546:	416d      	adcs	r5, r5
 8000548:	eb46 0606 	adc.w	r6, r6, r6
 800054c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000550:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000554:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000558:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800055c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000560:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000564:	bf88      	it	hi
 8000566:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056a:	d81e      	bhi.n	80005aa <__aeabi_dmul+0xde>
 800056c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000570:	bf08      	it	eq
 8000572:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000576:	f150 0000 	adcs.w	r0, r0, #0
 800057a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057e:	bd70      	pop	{r4, r5, r6, pc}
 8000580:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000584:	ea46 0101 	orr.w	r1, r6, r1
 8000588:	ea40 0002 	orr.w	r0, r0, r2
 800058c:	ea81 0103 	eor.w	r1, r1, r3
 8000590:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000594:	bfc2      	ittt	gt
 8000596:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059e:	bd70      	popgt	{r4, r5, r6, pc}
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f04f 0e00 	mov.w	lr, #0
 80005a8:	3c01      	subs	r4, #1
 80005aa:	f300 80ab 	bgt.w	8000704 <__aeabi_dmul+0x238>
 80005ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b2:	bfde      	ittt	le
 80005b4:	2000      	movle	r0, #0
 80005b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ba:	bd70      	pople	{r4, r5, r6, pc}
 80005bc:	f1c4 0400 	rsb	r4, r4, #0
 80005c0:	3c20      	subs	r4, #32
 80005c2:	da35      	bge.n	8000630 <__aeabi_dmul+0x164>
 80005c4:	340c      	adds	r4, #12
 80005c6:	dc1b      	bgt.n	8000600 <__aeabi_dmul+0x134>
 80005c8:	f104 0414 	add.w	r4, r4, #20
 80005cc:	f1c4 0520 	rsb	r5, r4, #32
 80005d0:	fa00 f305 	lsl.w	r3, r0, r5
 80005d4:	fa20 f004 	lsr.w	r0, r0, r4
 80005d8:	fa01 f205 	lsl.w	r2, r1, r5
 80005dc:	ea40 0002 	orr.w	r0, r0, r2
 80005e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005ec:	fa21 f604 	lsr.w	r6, r1, r4
 80005f0:	eb42 0106 	adc.w	r1, r2, r6
 80005f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f8:	bf08      	it	eq
 80005fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	f1c4 040c 	rsb	r4, r4, #12
 8000604:	f1c4 0520 	rsb	r5, r4, #32
 8000608:	fa00 f304 	lsl.w	r3, r0, r4
 800060c:	fa20 f005 	lsr.w	r0, r0, r5
 8000610:	fa01 f204 	lsl.w	r2, r1, r4
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	f141 0100 	adc.w	r1, r1, #0
 8000624:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000628:	bf08      	it	eq
 800062a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f205 	lsl.w	r2, r0, r5
 8000638:	ea4e 0e02 	orr.w	lr, lr, r2
 800063c:	fa20 f304 	lsr.w	r3, r0, r4
 8000640:	fa01 f205 	lsl.w	r2, r1, r5
 8000644:	ea43 0302 	orr.w	r3, r3, r2
 8000648:	fa21 f004 	lsr.w	r0, r1, r4
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	fa21 f204 	lsr.w	r2, r1, r4
 8000654:	ea20 0002 	bic.w	r0, r0, r2
 8000658:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800065c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000660:	bf08      	it	eq
 8000662:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	f094 0f00 	teq	r4, #0
 800066c:	d10f      	bne.n	800068e <__aeabi_dmul+0x1c2>
 800066e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000672:	0040      	lsls	r0, r0, #1
 8000674:	eb41 0101 	adc.w	r1, r1, r1
 8000678:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800067c:	bf08      	it	eq
 800067e:	3c01      	subeq	r4, #1
 8000680:	d0f7      	beq.n	8000672 <__aeabi_dmul+0x1a6>
 8000682:	ea41 0106 	orr.w	r1, r1, r6
 8000686:	f095 0f00 	teq	r5, #0
 800068a:	bf18      	it	ne
 800068c:	4770      	bxne	lr
 800068e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000692:	0052      	lsls	r2, r2, #1
 8000694:	eb43 0303 	adc.w	r3, r3, r3
 8000698:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3d01      	subeq	r5, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1c6>
 80006a2:	ea43 0306 	orr.w	r3, r3, r6
 80006a6:	4770      	bx	lr
 80006a8:	ea94 0f0c 	teq	r4, ip
 80006ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b0:	bf18      	it	ne
 80006b2:	ea95 0f0c 	teqne	r5, ip
 80006b6:	d00c      	beq.n	80006d2 <__aeabi_dmul+0x206>
 80006b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006bc:	bf18      	it	ne
 80006be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c2:	d1d1      	bne.n	8000668 <__aeabi_dmul+0x19c>
 80006c4:	ea81 0103 	eor.w	r1, r1, r3
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	f04f 0000 	mov.w	r0, #0
 80006d0:	bd70      	pop	{r4, r5, r6, pc}
 80006d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d6:	bf06      	itte	eq
 80006d8:	4610      	moveq	r0, r2
 80006da:	4619      	moveq	r1, r3
 80006dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e0:	d019      	beq.n	8000716 <__aeabi_dmul+0x24a>
 80006e2:	ea94 0f0c 	teq	r4, ip
 80006e6:	d102      	bne.n	80006ee <__aeabi_dmul+0x222>
 80006e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006ec:	d113      	bne.n	8000716 <__aeabi_dmul+0x24a>
 80006ee:	ea95 0f0c 	teq	r5, ip
 80006f2:	d105      	bne.n	8000700 <__aeabi_dmul+0x234>
 80006f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f8:	bf1c      	itt	ne
 80006fa:	4610      	movne	r0, r2
 80006fc:	4619      	movne	r1, r3
 80006fe:	d10a      	bne.n	8000716 <__aeabi_dmul+0x24a>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000710:	f04f 0000 	mov.w	r0, #0
 8000714:	bd70      	pop	{r4, r5, r6, pc}
 8000716:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071e:	bd70      	pop	{r4, r5, r6, pc}

08000720 <__aeabi_ddiv>:
 8000720:	b570      	push	{r4, r5, r6, lr}
 8000722:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000726:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072e:	bf1d      	ittte	ne
 8000730:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000734:	ea94 0f0c 	teqne	r4, ip
 8000738:	ea95 0f0c 	teqne	r5, ip
 800073c:	f000 f8a7 	bleq	800088e <__aeabi_ddiv+0x16e>
 8000740:	eba4 0405 	sub.w	r4, r4, r5
 8000744:	ea81 0e03 	eor.w	lr, r1, r3
 8000748:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800074c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000750:	f000 8088 	beq.w	8000864 <__aeabi_ddiv+0x144>
 8000754:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000758:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800075c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000760:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000764:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000768:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800076c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000770:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000774:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000778:	429d      	cmp	r5, r3
 800077a:	bf08      	it	eq
 800077c:	4296      	cmpeq	r6, r2
 800077e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000782:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000786:	d202      	bcs.n	800078e <__aeabi_ddiv+0x6e>
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	1ab6      	subs	r6, r6, r2
 8000790:	eb65 0503 	sbc.w	r5, r5, r3
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007aa:	bf22      	ittt	cs
 80007ac:	1ab6      	subcs	r6, r6, r2
 80007ae:	4675      	movcs	r5, lr
 80007b0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80007be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c2:	bf22      	ittt	cs
 80007c4:	1ab6      	subcs	r6, r6, r2
 80007c6:	4675      	movcs	r5, lr
 80007c8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007cc:	085b      	lsrs	r3, r3, #1
 80007ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007da:	bf22      	ittt	cs
 80007dc:	1ab6      	subcs	r6, r6, r2
 80007de:	4675      	movcs	r5, lr
 80007e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f2:	bf22      	ittt	cs
 80007f4:	1ab6      	subcs	r6, r6, r2
 80007f6:	4675      	movcs	r5, lr
 80007f8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007fc:	ea55 0e06 	orrs.w	lr, r5, r6
 8000800:	d018      	beq.n	8000834 <__aeabi_ddiv+0x114>
 8000802:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000806:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000812:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000816:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081e:	d1c0      	bne.n	80007a2 <__aeabi_ddiv+0x82>
 8000820:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000824:	d10b      	bne.n	800083e <__aeabi_ddiv+0x11e>
 8000826:	ea41 0100 	orr.w	r1, r1, r0
 800082a:	f04f 0000 	mov.w	r0, #0
 800082e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000832:	e7b6      	b.n	80007a2 <__aeabi_ddiv+0x82>
 8000834:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000838:	bf04      	itt	eq
 800083a:	4301      	orreq	r1, r0
 800083c:	2000      	moveq	r0, #0
 800083e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000842:	bf88      	it	hi
 8000844:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000848:	f63f aeaf 	bhi.w	80005aa <__aeabi_dmul+0xde>
 800084c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000850:	bf04      	itt	eq
 8000852:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000856:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085a:	f150 0000 	adcs.w	r0, r0, #0
 800085e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000862:	bd70      	pop	{r4, r5, r6, pc}
 8000864:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000868:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800086c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000870:	bfc2      	ittt	gt
 8000872:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000876:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087a:	bd70      	popgt	{r4, r5, r6, pc}
 800087c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000880:	f04f 0e00 	mov.w	lr, #0
 8000884:	3c01      	subs	r4, #1
 8000886:	e690      	b.n	80005aa <__aeabi_dmul+0xde>
 8000888:	ea45 0e06 	orr.w	lr, r5, r6
 800088c:	e68d      	b.n	80005aa <__aeabi_dmul+0xde>
 800088e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000892:	ea94 0f0c 	teq	r4, ip
 8000896:	bf08      	it	eq
 8000898:	ea95 0f0c 	teqeq	r5, ip
 800089c:	f43f af3b 	beq.w	8000716 <__aeabi_dmul+0x24a>
 80008a0:	ea94 0f0c 	teq	r4, ip
 80008a4:	d10a      	bne.n	80008bc <__aeabi_ddiv+0x19c>
 80008a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008aa:	f47f af34 	bne.w	8000716 <__aeabi_dmul+0x24a>
 80008ae:	ea95 0f0c 	teq	r5, ip
 80008b2:	f47f af25 	bne.w	8000700 <__aeabi_dmul+0x234>
 80008b6:	4610      	mov	r0, r2
 80008b8:	4619      	mov	r1, r3
 80008ba:	e72c      	b.n	8000716 <__aeabi_dmul+0x24a>
 80008bc:	ea95 0f0c 	teq	r5, ip
 80008c0:	d106      	bne.n	80008d0 <__aeabi_ddiv+0x1b0>
 80008c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c6:	f43f aefd 	beq.w	80006c4 <__aeabi_dmul+0x1f8>
 80008ca:	4610      	mov	r0, r2
 80008cc:	4619      	mov	r1, r3
 80008ce:	e722      	b.n	8000716 <__aeabi_dmul+0x24a>
 80008d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d4:	bf18      	it	ne
 80008d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008da:	f47f aec5 	bne.w	8000668 <__aeabi_dmul+0x19c>
 80008de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e2:	f47f af0d 	bne.w	8000700 <__aeabi_dmul+0x234>
 80008e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ea:	f47f aeeb 	bne.w	80006c4 <__aeabi_dmul+0x1f8>
 80008ee:	e712      	b.n	8000716 <__aeabi_dmul+0x24a>

080008f0 <__aeabi_d2uiz>:
 80008f0:	004a      	lsls	r2, r1, #1
 80008f2:	d211      	bcs.n	8000918 <__aeabi_d2uiz+0x28>
 80008f4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f8:	d211      	bcs.n	800091e <__aeabi_d2uiz+0x2e>
 80008fa:	d50d      	bpl.n	8000918 <__aeabi_d2uiz+0x28>
 80008fc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000900:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000904:	d40e      	bmi.n	8000924 <__aeabi_d2uiz+0x34>
 8000906:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800090a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	4770      	bx	lr
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	4770      	bx	lr
 800091e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000922:	d102      	bne.n	800092a <__aeabi_d2uiz+0x3a>
 8000924:	f04f 30ff 	mov.w	r0, #4294967295
 8000928:	4770      	bx	lr
 800092a:	f04f 0000 	mov.w	r0, #0
 800092e:	4770      	bx	lr

08000930 <__aeabi_frsub>:
 8000930:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000934:	e002      	b.n	800093c <__addsf3>
 8000936:	bf00      	nop

08000938 <__aeabi_fsub>:
 8000938:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800093c <__addsf3>:
 800093c:	0042      	lsls	r2, r0, #1
 800093e:	bf1f      	itttt	ne
 8000940:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000944:	ea92 0f03 	teqne	r2, r3
 8000948:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800094c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000950:	d06a      	beq.n	8000a28 <__addsf3+0xec>
 8000952:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000956:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800095a:	bfc1      	itttt	gt
 800095c:	18d2      	addgt	r2, r2, r3
 800095e:	4041      	eorgt	r1, r0
 8000960:	4048      	eorgt	r0, r1
 8000962:	4041      	eorgt	r1, r0
 8000964:	bfb8      	it	lt
 8000966:	425b      	neglt	r3, r3
 8000968:	2b19      	cmp	r3, #25
 800096a:	bf88      	it	hi
 800096c:	4770      	bxhi	lr
 800096e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000972:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000976:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800097a:	bf18      	it	ne
 800097c:	4240      	negne	r0, r0
 800097e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000982:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000986:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800098a:	bf18      	it	ne
 800098c:	4249      	negne	r1, r1
 800098e:	ea92 0f03 	teq	r2, r3
 8000992:	d03f      	beq.n	8000a14 <__addsf3+0xd8>
 8000994:	f1a2 0201 	sub.w	r2, r2, #1
 8000998:	fa41 fc03 	asr.w	ip, r1, r3
 800099c:	eb10 000c 	adds.w	r0, r0, ip
 80009a0:	f1c3 0320 	rsb	r3, r3, #32
 80009a4:	fa01 f103 	lsl.w	r1, r1, r3
 80009a8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009ac:	d502      	bpl.n	80009b4 <__addsf3+0x78>
 80009ae:	4249      	negs	r1, r1
 80009b0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009b4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009b8:	d313      	bcc.n	80009e2 <__addsf3+0xa6>
 80009ba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009be:	d306      	bcc.n	80009ce <__addsf3+0x92>
 80009c0:	0840      	lsrs	r0, r0, #1
 80009c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80009c6:	f102 0201 	add.w	r2, r2, #1
 80009ca:	2afe      	cmp	r2, #254	; 0xfe
 80009cc:	d251      	bcs.n	8000a72 <__addsf3+0x136>
 80009ce:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009d6:	bf08      	it	eq
 80009d8:	f020 0001 	biceq.w	r0, r0, #1
 80009dc:	ea40 0003 	orr.w	r0, r0, r3
 80009e0:	4770      	bx	lr
 80009e2:	0049      	lsls	r1, r1, #1
 80009e4:	eb40 0000 	adc.w	r0, r0, r0
 80009e8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80009ec:	f1a2 0201 	sub.w	r2, r2, #1
 80009f0:	d1ed      	bne.n	80009ce <__addsf3+0x92>
 80009f2:	fab0 fc80 	clz	ip, r0
 80009f6:	f1ac 0c08 	sub.w	ip, ip, #8
 80009fa:	ebb2 020c 	subs.w	r2, r2, ip
 80009fe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a02:	bfaa      	itet	ge
 8000a04:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a08:	4252      	neglt	r2, r2
 8000a0a:	4318      	orrge	r0, r3
 8000a0c:	bfbc      	itt	lt
 8000a0e:	40d0      	lsrlt	r0, r2
 8000a10:	4318      	orrlt	r0, r3
 8000a12:	4770      	bx	lr
 8000a14:	f092 0f00 	teq	r2, #0
 8000a18:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a1c:	bf06      	itte	eq
 8000a1e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a22:	3201      	addeq	r2, #1
 8000a24:	3b01      	subne	r3, #1
 8000a26:	e7b5      	b.n	8000994 <__addsf3+0x58>
 8000a28:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a36:	d021      	beq.n	8000a7c <__addsf3+0x140>
 8000a38:	ea92 0f03 	teq	r2, r3
 8000a3c:	d004      	beq.n	8000a48 <__addsf3+0x10c>
 8000a3e:	f092 0f00 	teq	r2, #0
 8000a42:	bf08      	it	eq
 8000a44:	4608      	moveq	r0, r1
 8000a46:	4770      	bx	lr
 8000a48:	ea90 0f01 	teq	r0, r1
 8000a4c:	bf1c      	itt	ne
 8000a4e:	2000      	movne	r0, #0
 8000a50:	4770      	bxne	lr
 8000a52:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a56:	d104      	bne.n	8000a62 <__addsf3+0x126>
 8000a58:	0040      	lsls	r0, r0, #1
 8000a5a:	bf28      	it	cs
 8000a5c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a60:	4770      	bx	lr
 8000a62:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a66:	bf3c      	itt	cc
 8000a68:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a6c:	4770      	bxcc	lr
 8000a6e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a72:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a7a:	4770      	bx	lr
 8000a7c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a80:	bf16      	itet	ne
 8000a82:	4608      	movne	r0, r1
 8000a84:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a88:	4601      	movne	r1, r0
 8000a8a:	0242      	lsls	r2, r0, #9
 8000a8c:	bf06      	itte	eq
 8000a8e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a92:	ea90 0f01 	teqeq	r0, r1
 8000a96:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_ui2f>:
 8000a9c:	f04f 0300 	mov.w	r3, #0
 8000aa0:	e004      	b.n	8000aac <__aeabi_i2f+0x8>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_i2f>:
 8000aa4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000aa8:	bf48      	it	mi
 8000aaa:	4240      	negmi	r0, r0
 8000aac:	ea5f 0c00 	movs.w	ip, r0
 8000ab0:	bf08      	it	eq
 8000ab2:	4770      	bxeq	lr
 8000ab4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ab8:	4601      	mov	r1, r0
 8000aba:	f04f 0000 	mov.w	r0, #0
 8000abe:	e01c      	b.n	8000afa <__aeabi_l2f+0x2a>

08000ac0 <__aeabi_ul2f>:
 8000ac0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ac4:	bf08      	it	eq
 8000ac6:	4770      	bxeq	lr
 8000ac8:	f04f 0300 	mov.w	r3, #0
 8000acc:	e00a      	b.n	8000ae4 <__aeabi_l2f+0x14>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_l2f>:
 8000ad0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad4:	bf08      	it	eq
 8000ad6:	4770      	bxeq	lr
 8000ad8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000adc:	d502      	bpl.n	8000ae4 <__aeabi_l2f+0x14>
 8000ade:	4240      	negs	r0, r0
 8000ae0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ae4:	ea5f 0c01 	movs.w	ip, r1
 8000ae8:	bf02      	ittt	eq
 8000aea:	4684      	moveq	ip, r0
 8000aec:	4601      	moveq	r1, r0
 8000aee:	2000      	moveq	r0, #0
 8000af0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000af4:	bf08      	it	eq
 8000af6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000afa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000afe:	fabc f28c 	clz	r2, ip
 8000b02:	3a08      	subs	r2, #8
 8000b04:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b08:	db10      	blt.n	8000b2c <__aeabi_l2f+0x5c>
 8000b0a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b0e:	4463      	add	r3, ip
 8000b10:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b14:	f1c2 0220 	rsb	r2, r2, #32
 8000b18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000b20:	eb43 0002 	adc.w	r0, r3, r2
 8000b24:	bf08      	it	eq
 8000b26:	f020 0001 	biceq.w	r0, r0, #1
 8000b2a:	4770      	bx	lr
 8000b2c:	f102 0220 	add.w	r2, r2, #32
 8000b30:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b34:	f1c2 0220 	rsb	r2, r2, #32
 8000b38:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b3c:	fa21 f202 	lsr.w	r2, r1, r2
 8000b40:	eb43 0002 	adc.w	r0, r3, r2
 8000b44:	bf08      	it	eq
 8000b46:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_fmul>:
 8000b4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b54:	bf1e      	ittt	ne
 8000b56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b5a:	ea92 0f0c 	teqne	r2, ip
 8000b5e:	ea93 0f0c 	teqne	r3, ip
 8000b62:	d06f      	beq.n	8000c44 <__aeabi_fmul+0xf8>
 8000b64:	441a      	add	r2, r3
 8000b66:	ea80 0c01 	eor.w	ip, r0, r1
 8000b6a:	0240      	lsls	r0, r0, #9
 8000b6c:	bf18      	it	ne
 8000b6e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b72:	d01e      	beq.n	8000bb2 <__aeabi_fmul+0x66>
 8000b74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b78:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b7c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b80:	fba0 3101 	umull	r3, r1, r0, r1
 8000b84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b88:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b8c:	bf3e      	ittt	cc
 8000b8e:	0049      	lslcc	r1, r1, #1
 8000b90:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b94:	005b      	lslcc	r3, r3, #1
 8000b96:	ea40 0001 	orr.w	r0, r0, r1
 8000b9a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000b9e:	2afd      	cmp	r2, #253	; 0xfd
 8000ba0:	d81d      	bhi.n	8000bde <__aeabi_fmul+0x92>
 8000ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ba6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000baa:	bf08      	it	eq
 8000bac:	f020 0001 	biceq.w	r0, r0, #1
 8000bb0:	4770      	bx	lr
 8000bb2:	f090 0f00 	teq	r0, #0
 8000bb6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bba:	bf08      	it	eq
 8000bbc:	0249      	lsleq	r1, r1, #9
 8000bbe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bc2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bc6:	3a7f      	subs	r2, #127	; 0x7f
 8000bc8:	bfc2      	ittt	gt
 8000bca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bd2:	4770      	bxgt	lr
 8000bd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd8:	f04f 0300 	mov.w	r3, #0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	dc5d      	bgt.n	8000c9c <__aeabi_fmul+0x150>
 8000be0:	f112 0f19 	cmn.w	r2, #25
 8000be4:	bfdc      	itt	le
 8000be6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000bea:	4770      	bxle	lr
 8000bec:	f1c2 0200 	rsb	r2, r2, #0
 8000bf0:	0041      	lsls	r1, r0, #1
 8000bf2:	fa21 f102 	lsr.w	r1, r1, r2
 8000bf6:	f1c2 0220 	rsb	r2, r2, #32
 8000bfa:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bfe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c02:	f140 0000 	adc.w	r0, r0, #0
 8000c06:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c0a:	bf08      	it	eq
 8000c0c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c10:	4770      	bx	lr
 8000c12:	f092 0f00 	teq	r2, #0
 8000c16:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c1a:	bf02      	ittt	eq
 8000c1c:	0040      	lsleq	r0, r0, #1
 8000c1e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c22:	3a01      	subeq	r2, #1
 8000c24:	d0f9      	beq.n	8000c1a <__aeabi_fmul+0xce>
 8000c26:	ea40 000c 	orr.w	r0, r0, ip
 8000c2a:	f093 0f00 	teq	r3, #0
 8000c2e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c32:	bf02      	ittt	eq
 8000c34:	0049      	lsleq	r1, r1, #1
 8000c36:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c3a:	3b01      	subeq	r3, #1
 8000c3c:	d0f9      	beq.n	8000c32 <__aeabi_fmul+0xe6>
 8000c3e:	ea41 010c 	orr.w	r1, r1, ip
 8000c42:	e78f      	b.n	8000b64 <__aeabi_fmul+0x18>
 8000c44:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c48:	ea92 0f0c 	teq	r2, ip
 8000c4c:	bf18      	it	ne
 8000c4e:	ea93 0f0c 	teqne	r3, ip
 8000c52:	d00a      	beq.n	8000c6a <__aeabi_fmul+0x11e>
 8000c54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c58:	bf18      	it	ne
 8000c5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c5e:	d1d8      	bne.n	8000c12 <__aeabi_fmul+0xc6>
 8000c60:	ea80 0001 	eor.w	r0, r0, r1
 8000c64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c68:	4770      	bx	lr
 8000c6a:	f090 0f00 	teq	r0, #0
 8000c6e:	bf17      	itett	ne
 8000c70:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c74:	4608      	moveq	r0, r1
 8000c76:	f091 0f00 	teqne	r1, #0
 8000c7a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c7e:	d014      	beq.n	8000caa <__aeabi_fmul+0x15e>
 8000c80:	ea92 0f0c 	teq	r2, ip
 8000c84:	d101      	bne.n	8000c8a <__aeabi_fmul+0x13e>
 8000c86:	0242      	lsls	r2, r0, #9
 8000c88:	d10f      	bne.n	8000caa <__aeabi_fmul+0x15e>
 8000c8a:	ea93 0f0c 	teq	r3, ip
 8000c8e:	d103      	bne.n	8000c98 <__aeabi_fmul+0x14c>
 8000c90:	024b      	lsls	r3, r1, #9
 8000c92:	bf18      	it	ne
 8000c94:	4608      	movne	r0, r1
 8000c96:	d108      	bne.n	8000caa <__aeabi_fmul+0x15e>
 8000c98:	ea80 0001 	eor.w	r0, r0, r1
 8000c9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ca0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca8:	4770      	bx	lr
 8000caa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cb2:	4770      	bx	lr

08000cb4 <__aeabi_fdiv>:
 8000cb4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cb8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc2:	ea92 0f0c 	teqne	r2, ip
 8000cc6:	ea93 0f0c 	teqne	r3, ip
 8000cca:	d069      	beq.n	8000da0 <__aeabi_fdiv+0xec>
 8000ccc:	eba2 0203 	sub.w	r2, r2, r3
 8000cd0:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd4:	0249      	lsls	r1, r1, #9
 8000cd6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cda:	d037      	beq.n	8000d4c <__aeabi_fdiv+0x98>
 8000cdc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ce0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ce4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ce8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cec:	428b      	cmp	r3, r1
 8000cee:	bf38      	it	cc
 8000cf0:	005b      	lslcc	r3, r3, #1
 8000cf2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000cf6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	bf24      	itt	cs
 8000cfe:	1a5b      	subcs	r3, r3, r1
 8000d00:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d04:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d08:	bf24      	itt	cs
 8000d0a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d0e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d12:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d16:	bf24      	itt	cs
 8000d18:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d20:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d24:	bf24      	itt	cs
 8000d26:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d2a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d2e:	011b      	lsls	r3, r3, #4
 8000d30:	bf18      	it	ne
 8000d32:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d36:	d1e0      	bne.n	8000cfa <__aeabi_fdiv+0x46>
 8000d38:	2afd      	cmp	r2, #253	; 0xfd
 8000d3a:	f63f af50 	bhi.w	8000bde <__aeabi_fmul+0x92>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d50:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d54:	327f      	adds	r2, #127	; 0x7f
 8000d56:	bfc2      	ittt	gt
 8000d58:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d5c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d60:	4770      	bxgt	lr
 8000d62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d66:	f04f 0300 	mov.w	r3, #0
 8000d6a:	3a01      	subs	r2, #1
 8000d6c:	e737      	b.n	8000bde <__aeabi_fmul+0x92>
 8000d6e:	f092 0f00 	teq	r2, #0
 8000d72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d76:	bf02      	ittt	eq
 8000d78:	0040      	lsleq	r0, r0, #1
 8000d7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7e:	3a01      	subeq	r2, #1
 8000d80:	d0f9      	beq.n	8000d76 <__aeabi_fdiv+0xc2>
 8000d82:	ea40 000c 	orr.w	r0, r0, ip
 8000d86:	f093 0f00 	teq	r3, #0
 8000d8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8e:	bf02      	ittt	eq
 8000d90:	0049      	lsleq	r1, r1, #1
 8000d92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d96:	3b01      	subeq	r3, #1
 8000d98:	d0f9      	beq.n	8000d8e <__aeabi_fdiv+0xda>
 8000d9a:	ea41 010c 	orr.w	r1, r1, ip
 8000d9e:	e795      	b.n	8000ccc <__aeabi_fdiv+0x18>
 8000da0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da4:	ea92 0f0c 	teq	r2, ip
 8000da8:	d108      	bne.n	8000dbc <__aeabi_fdiv+0x108>
 8000daa:	0242      	lsls	r2, r0, #9
 8000dac:	f47f af7d 	bne.w	8000caa <__aeabi_fmul+0x15e>
 8000db0:	ea93 0f0c 	teq	r3, ip
 8000db4:	f47f af70 	bne.w	8000c98 <__aeabi_fmul+0x14c>
 8000db8:	4608      	mov	r0, r1
 8000dba:	e776      	b.n	8000caa <__aeabi_fmul+0x15e>
 8000dbc:	ea93 0f0c 	teq	r3, ip
 8000dc0:	d104      	bne.n	8000dcc <__aeabi_fdiv+0x118>
 8000dc2:	024b      	lsls	r3, r1, #9
 8000dc4:	f43f af4c 	beq.w	8000c60 <__aeabi_fmul+0x114>
 8000dc8:	4608      	mov	r0, r1
 8000dca:	e76e      	b.n	8000caa <__aeabi_fmul+0x15e>
 8000dcc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dd0:	bf18      	it	ne
 8000dd2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dd6:	d1ca      	bne.n	8000d6e <__aeabi_fdiv+0xba>
 8000dd8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ddc:	f47f af5c 	bne.w	8000c98 <__aeabi_fmul+0x14c>
 8000de0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000de4:	f47f af3c 	bne.w	8000c60 <__aeabi_fmul+0x114>
 8000de8:	e75f      	b.n	8000caa <__aeabi_fmul+0x15e>
 8000dea:	bf00      	nop

08000dec <__aeabi_f2uiz>:
 8000dec:	0042      	lsls	r2, r0, #1
 8000dee:	d20e      	bcs.n	8000e0e <__aeabi_f2uiz+0x22>
 8000df0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000df4:	d30b      	bcc.n	8000e0e <__aeabi_f2uiz+0x22>
 8000df6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000dfa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000dfe:	d409      	bmi.n	8000e14 <__aeabi_f2uiz+0x28>
 8000e00:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e08:	fa23 f002 	lsr.w	r0, r3, r2
 8000e0c:	4770      	bx	lr
 8000e0e:	f04f 0000 	mov.w	r0, #0
 8000e12:	4770      	bx	lr
 8000e14:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e18:	d101      	bne.n	8000e1e <__aeabi_f2uiz+0x32>
 8000e1a:	0242      	lsls	r2, r0, #9
 8000e1c:	d102      	bne.n	8000e24 <__aeabi_f2uiz+0x38>
 8000e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e22:	4770      	bx	lr
 8000e24:	f04f 0000 	mov.w	r0, #0
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop

08000e2c <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	60fb      	str	r3, [r7, #12]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000e4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e4e:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	791b      	ldrb	r3, [r3, #4]
 8000e58:	021b      	lsls	r3, r3, #8
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	68fa      	ldr	r2, [r7, #12]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	68fa      	ldr	r2, [r7, #12]
 8000e66:	605a      	str	r2, [r3, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <ADC_Init+0xa0>)
 8000e72:	4013      	ands	r3, r2
 8000e74:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	68da      	ldr	r2, [r3, #12]
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	431a      	orrs	r2, r3
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	795b      	ldrb	r3, [r3, #5]
 8000e84:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 8000e86:	4313      	orrs	r3, r2
 8000e88:	68fa      	ldr	r2, [r7, #12]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	609a      	str	r2, [r3, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e98:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000ea0:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	7c1b      	ldrb	r3, [r3, #16]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	7afb      	ldrb	r3, [r7, #11]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
 8000eb0:	7afb      	ldrb	r3, [r7, #11]
 8000eb2:	051b      	lsls	r3, r3, #20
 8000eb4:	68fa      	ldr	r2, [r7, #12]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	68fa      	ldr	r2, [r7, #12]
 8000ebe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000ec0:	bf00      	nop
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	fff1f7fd 	.word	0xfff1f7fd

08000ed0 <ADC_StructInit>:
  * @brief  Fills each ADC_InitStruct member with its default value.
  * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	711a      	strb	r2, [r3, #4]
  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	715a      	strb	r2, [r3, #5]
  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
  /* Initialize the ADC_NbrOfChannel member */
  ADC_InitStruct->ADC_NbrOfChannel = 1;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	741a      	strb	r2, [r3, #16]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr

08000f06 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	460b      	mov	r3, r1
 8000f10:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f12:	78fb      	ldrb	r3, [r7, #3]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d006      	beq.n	8000f26 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	f043 0201 	orr.w	r2, r3, #1
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
  }
}
 8000f24:	e005      	b.n	8000f32 <ADC_Cmd+0x2c>
    ADCx->CR2 &= CR2_ADON_Reset;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	f023 0201 	bic.w	r2, r3, #1
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	609a      	str	r2, [r3, #8]
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr

08000f3c <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f48:	78fb      	ldrb	r3, [r7, #3]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d006      	beq.n	8000f5c <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= CR2_DMA_Reset;
  }
}
 8000f5a:	e005      	b.n	8000f68 <ADC_DMACmd+0x2c>
    ADCx->CR2 &= CR2_DMA_Reset;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	609a      	str	r2, [r3, #8]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr

08000f72 <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f043 0204 	orr.w	r2, r3, #4
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	609a      	str	r2, [r3, #8]
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr

08000f90 <ADC_SoftwareStartConvCmd>:
  * @param  NewState: new state of the selected ADC software start conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f9c:	78fb      	ldrb	r3, [r7, #3]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d006      	beq.n	8000fb0 <ADC_SoftwareStartConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	609a      	str	r2, [r3, #8]
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
  }
}
 8000fae:	e005      	b.n	8000fbc <ADC_SoftwareStartConvCmd+0x2c>
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	f423 02a0 	bic.w	r2, r3, #5242880	; 0x500000
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	609a      	str	r2, [r3, #8]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr

08000fc6 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b085      	sub	sp, #20
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	4608      	mov	r0, r1
 8000fd0:	4611      	mov	r1, r2
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	70fb      	strb	r3, [r7, #3]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	70bb      	strb	r3, [r7, #2]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000fe8:	78fb      	ldrb	r3, [r7, #3]
 8000fea:	2b09      	cmp	r3, #9
 8000fec:	d923      	bls.n	8001036 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 8000ff4:	78fb      	ldrb	r3, [r7, #3]
 8000ff6:	f1a3 020a 	sub.w	r2, r3, #10
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	4413      	add	r3, r2
 8001000:	2207      	movs	r2, #7
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	43db      	mvns	r3, r3
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	4013      	ands	r3, r2
 8001010:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8001012:	7879      	ldrb	r1, [r7, #1]
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	f1a3 020a 	sub.w	r2, r3, #10
 800101a:	4613      	mov	r3, r2
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	4413      	add	r3, r2
 8001020:	fa01 f303 	lsl.w	r3, r1, r3
 8001024:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	4313      	orrs	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68fa      	ldr	r2, [r7, #12]
 8001032:	60da      	str	r2, [r3, #12]
 8001034:	e01e      	b.n	8001074 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	691b      	ldr	r3, [r3, #16]
 800103a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 800103c:	78fa      	ldrb	r2, [r7, #3]
 800103e:	4613      	mov	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4413      	add	r3, r2
 8001044:	2207      	movs	r2, #7
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	43db      	mvns	r3, r3
 8001050:	68fa      	ldr	r2, [r7, #12]
 8001052:	4013      	ands	r3, r2
 8001054:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8001056:	7879      	ldrb	r1, [r7, #1]
 8001058:	78fa      	ldrb	r2, [r7, #3]
 800105a:	4613      	mov	r3, r2
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	4413      	add	r3, r2
 8001060:	fa01 f303 	lsl.w	r3, r1, r3
 8001064:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	4313      	orrs	r3, r2
 800106c:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8001074:	78bb      	ldrb	r3, [r7, #2]
 8001076:	2b06      	cmp	r3, #6
 8001078:	d821      	bhi.n	80010be <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800107e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 8001080:	78bb      	ldrb	r3, [r7, #2]
 8001082:	1e5a      	subs	r2, r3, #1
 8001084:	4613      	mov	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	221f      	movs	r2, #31
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	43db      	mvns	r3, r3
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	4013      	ands	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 800109c:	78f9      	ldrb	r1, [r7, #3]
 800109e:	78bb      	ldrb	r3, [r7, #2]
 80010a0:	1e5a      	subs	r2, r3, #1
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ac:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80010bc:	e047      	b.n	800114e <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 80010be:	78bb      	ldrb	r3, [r7, #2]
 80010c0:	2b0c      	cmp	r3, #12
 80010c2:	d821      	bhi.n	8001108 <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c8:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 80010ca:	78bb      	ldrb	r3, [r7, #2]
 80010cc:	1fda      	subs	r2, r3, #7
 80010ce:	4613      	mov	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	221f      	movs	r2, #31
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	43db      	mvns	r3, r3
 80010e0:	68fa      	ldr	r2, [r7, #12]
 80010e2:	4013      	ands	r3, r2
 80010e4:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 80010e6:	78f9      	ldrb	r1, [r7, #3]
 80010e8:	78bb      	ldrb	r3, [r7, #2]
 80010ea:	1fda      	subs	r2, r3, #7
 80010ec:	4613      	mov	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	4413      	add	r3, r2
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 80010f8:	68fa      	ldr	r2, [r7, #12]
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001106:	e022      	b.n	800114e <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110c:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 800110e:	78bb      	ldrb	r3, [r7, #2]
 8001110:	f1a3 020d 	sub.w	r2, r3, #13
 8001114:	4613      	mov	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4413      	add	r3, r2
 800111a:	221f      	movs	r2, #31
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	43db      	mvns	r3, r3
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	4013      	ands	r3, r2
 800112a:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 800112c:	78f9      	ldrb	r1, [r7, #3]
 800112e:	78bb      	ldrb	r3, [r7, #2]
 8001130:	f1a3 020d 	sub.w	r2, r3, #13
 8001134:	4613      	mov	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	fa01 f303 	lsl.w	r3, r1, r3
 800113e:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	4313      	orrs	r3, r2
 8001146:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800114e:	bf00      	nop
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001176:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	689a      	ldr	r2, [r3, #8]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	691b      	ldr	r3, [r3, #16]
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8001186:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	695b      	ldr	r3, [r3, #20]
 800118c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	699b      	ldr	r3, [r3, #24]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001192:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	69db      	ldr	r3, [r3, #28]
 8001198:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800119e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a4:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	68da      	ldr	r2, [r3, #12]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	60da      	str	r2, [r3, #12]
}
 80011ca:	bf00      	nop
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr

080011d4 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
/*-------------- Reset DMA init structure parameters values ------------------*/
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
  /* Initialize the DMA_MemoryBaseAddr member */
  DMA_InitStruct->DMA_MemoryBaseAddr = 0;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	605a      	str	r2, [r3, #4]
  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	60da      	str	r2, [r3, #12]
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	615a      	str	r2, [r3, #20]
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	619a      	str	r2, [r3, #24]
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	61da      	str	r2, [r3, #28]
  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	621a      	str	r2, [r3, #32]
  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	625a      	str	r2, [r3, #36]	; 0x24
  /* Initialize the DMA_M2M member */
  DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001234:	78fb      	ldrb	r3, [r7, #3]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d006      	beq.n	8001248 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f043 0201 	orr.w	r2, r3, #1
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 8001246:	e006      	b.n	8001256 <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001250:	4013      	ands	r3, r2
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	6013      	str	r3, [r2, #0]
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <DMA_GetCurrDataCounter>:
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval The number of remaining data units in the current DMAy Channelx
  *         transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Return the number of remaining data units for DMAy Channelx */
  return ((uint16_t)(DMAy_Channelx->CNDTR));
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	b29b      	uxth	r3, r3
}
 800126e:	4618      	mov	r0, r3
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr

08001278 <DMA_GetFlagStatus>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8001280:	2300      	movs	r3, #0
 8001282:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <DMA_GetFlagStatus+0x22>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <DMA_GetFlagStatus+0x48>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	e002      	b.n	80012a0 <DMA_GetFlagStatus+0x28>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 800129a:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <DMA_GetFlagStatus+0x4c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 80012a0:	68ba      	ldr	r2, [r7, #8]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4013      	ands	r3, r2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d002      	beq.n	80012b0 <DMA_GetFlagStatus+0x38>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 80012aa:	2301      	movs	r3, #1
 80012ac:	73fb      	strb	r3, [r7, #15]
 80012ae:	e001      	b.n	80012b4 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 80012b0:	2300      	movs	r3, #0
 80012b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	40020400 	.word	0x40020400
 80012c4:	40020000 	.word	0x40020000

080012c8 <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 80012da:	4a06      	ldr	r2, [pc, #24]	; (80012f4 <DMA_ClearFlag+0x2c>)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
  }
}
 80012e0:	e002      	b.n	80012e8 <DMA_ClearFlag+0x20>
    DMA1->IFCR = DMAy_FLAG;
 80012e2:	4a05      	ldr	r2, [pc, #20]	; (80012f8 <DMA_ClearFlag+0x30>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6053      	str	r3, [r2, #4]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40020400 	.word	0x40020400
 80012f8:	40020000 	.word	0x40020000

080012fc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b089      	sub	sp, #36	; 0x24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	2300      	movs	r3, #0
 8001310:	61bb      	str	r3, [r7, #24]
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	78db      	ldrb	r3, [r3, #3]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	78db      	ldrb	r3, [r3, #3]
 800132c:	f003 0310 	and.w	r3, r3, #16
 8001330:	2b00      	cmp	r3, #0
 8001332:	d005      	beq.n	8001340 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	789b      	ldrb	r3, [r3, #2]
 8001338:	461a      	mov	r2, r3
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	4313      	orrs	r3, r2
 800133e:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d044      	beq.n	80013d4 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001350:	2300      	movs	r3, #0
 8001352:	61bb      	str	r3, [r7, #24]
 8001354:	e038      	b.n	80013c8 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8001356:	2201      	movs	r2, #1
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4013      	ands	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	429a      	cmp	r2, r3
 8001372:	d126      	bne.n	80013c2 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800137a:	220f      	movs	r2, #15
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	43db      	mvns	r3, r3
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	4013      	ands	r3, r2
 800138c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800138e:	69fa      	ldr	r2, [r7, #28]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	4313      	orrs	r3, r2
 800139a:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	78db      	ldrb	r3, [r3, #3]
 80013a0:	2b28      	cmp	r3, #40	; 0x28
 80013a2:	d105      	bne.n	80013b0 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80013a4:	2201      	movs	r2, #1
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	409a      	lsls	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	615a      	str	r2, [r3, #20]
 80013ae:	e008      	b.n	80013c2 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	78db      	ldrb	r3, [r3, #3]
 80013b4:	2b48      	cmp	r3, #72	; 0x48
 80013b6:	d104      	bne.n	80013c2 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80013b8:	2201      	movs	r2, #1
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	409a      	lsls	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	3301      	adds	r3, #1
 80013c6:	61bb      	str	r3, [r7, #24]
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	2b07      	cmp	r3, #7
 80013cc:	d9c3      	bls.n	8001356 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	2bff      	cmp	r3, #255	; 0xff
 80013da:	d946      	bls.n	800146a <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	61bb      	str	r3, [r7, #24]
 80013e6:	e03a      	b.n	800145e <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	3308      	adds	r3, #8
 80013ec:	2201      	movs	r2, #1
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	429a      	cmp	r2, r3
 8001406:	d127      	bne.n	8001458 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800140e:	220f      	movs	r2, #15
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	43db      	mvns	r3, r3
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	4013      	ands	r3, r2
 8001420:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001422:	69fa      	ldr	r2, [r7, #28]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	4313      	orrs	r3, r2
 800142e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	78db      	ldrb	r3, [r3, #3]
 8001434:	2b28      	cmp	r3, #40	; 0x28
 8001436:	d105      	bne.n	8001444 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	3308      	adds	r3, #8
 800143c:	2201      	movs	r2, #1
 800143e:	409a      	lsls	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	78db      	ldrb	r3, [r3, #3]
 8001448:	2b48      	cmp	r3, #72	; 0x48
 800144a:	d105      	bne.n	8001458 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	3308      	adds	r3, #8
 8001450:	2201      	movs	r2, #1
 8001452:	409a      	lsls	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	3301      	adds	r3, #1
 800145c:	61bb      	str	r3, [r7, #24]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	2b07      	cmp	r3, #7
 8001462:	d9c1      	bls.n	80013e8 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	605a      	str	r2, [r3, #4]
  }
}
 800146a:	bf00      	nop
 800146c:	3724      	adds	r7, #36	; 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001482:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2202      	movs	r2, #2
 8001488:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2204      	movs	r2, #4
 800148e:	70da      	strb	r2, [r3, #3]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
	...

0800149c <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <RCC_ADCCLKConfig+0x34>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014b4:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80014be:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <RCC_ADCCLKConfig+0x34>)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6053      	str	r3, [r2, #4]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	40021000 	.word	0x40021000

080014d4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b087      	sub	sp, #28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	2300      	movs	r3, #0
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80014ec:	4b4c      	ldr	r3, [pc, #304]	; (8001620 <RCC_GetClocksFreq+0x14c>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 030c 	and.w	r3, r3, #12
 80014f4:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	2b04      	cmp	r3, #4
 80014fa:	d007      	beq.n	800150c <RCC_GetClocksFreq+0x38>
 80014fc:	2b08      	cmp	r3, #8
 80014fe:	d009      	beq.n	8001514 <RCC_GetClocksFreq+0x40>
 8001500:	2b00      	cmp	r3, #0
 8001502:	d133      	bne.n	800156c <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a47      	ldr	r2, [pc, #284]	; (8001624 <RCC_GetClocksFreq+0x150>)
 8001508:	601a      	str	r2, [r3, #0]
      break;
 800150a:	e033      	b.n	8001574 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a45      	ldr	r2, [pc, #276]	; (8001624 <RCC_GetClocksFreq+0x150>)
 8001510:	601a      	str	r2, [r3, #0]
      break;
 8001512:	e02f      	b.n	8001574 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8001514:	4b42      	ldr	r3, [pc, #264]	; (8001620 <RCC_GetClocksFreq+0x14c>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800151c:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 800151e:	4b40      	ldr	r3, [pc, #256]	; (8001620 <RCC_GetClocksFreq+0x14c>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001526:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	0c9b      	lsrs	r3, r3, #18
 800152c:	3302      	adds	r3, #2
 800152e:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d106      	bne.n	8001544 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	4a3b      	ldr	r2, [pc, #236]	; (8001628 <RCC_GetClocksFreq+0x154>)
 800153a:	fb02 f203 	mul.w	r2, r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8001542:	e017      	b.n	8001574 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8001544:	4b36      	ldr	r3, [pc, #216]	; (8001620 <RCC_GetClocksFreq+0x14c>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d006      	beq.n	800155e <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	4a35      	ldr	r2, [pc, #212]	; (8001628 <RCC_GetClocksFreq+0x154>)
 8001554:	fb02 f203 	mul.w	r2, r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	601a      	str	r2, [r3, #0]
      break;
 800155c:	e00a      	b.n	8001574 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	4a30      	ldr	r2, [pc, #192]	; (8001624 <RCC_GetClocksFreq+0x150>)
 8001562:	fb02 f203 	mul.w	r2, r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	601a      	str	r2, [r3, #0]
      break;
 800156a:	e003      	b.n	8001574 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a2d      	ldr	r2, [pc, #180]	; (8001624 <RCC_GetClocksFreq+0x150>)
 8001570:	601a      	str	r2, [r3, #0]
      break;
 8001572:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8001574:	4b2a      	ldr	r3, [pc, #168]	; (8001620 <RCC_GetClocksFreq+0x14c>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800157c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	091b      	lsrs	r3, r3, #4
 8001582:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001584:	4a29      	ldr	r2, [pc, #164]	; (800162c <RCC_GetClocksFreq+0x158>)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	4413      	add	r3, r2
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	b2db      	uxtb	r3, r3
 800158e:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	40da      	lsrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 800159c:	4b20      	ldr	r3, [pc, #128]	; (8001620 <RCC_GetClocksFreq+0x14c>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80015a4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80015ac:	4a1f      	ldr	r2, [pc, #124]	; (800162c <RCC_GetClocksFreq+0x158>)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	4413      	add	r3, r2
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	40da      	lsrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 80015c4:	4b16      	ldr	r3, [pc, #88]	; (8001620 <RCC_GetClocksFreq+0x14c>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80015cc:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	0adb      	lsrs	r3, r3, #11
 80015d2:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80015d4:	4a15      	ldr	r2, [pc, #84]	; (800162c <RCC_GetClocksFreq+0x158>)
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	4413      	add	r3, r2
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	40da      	lsrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <RCC_GetClocksFreq+0x14c>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015f4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	0b9b      	lsrs	r3, r3, #14
 80015fa:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 80015fc:	4a0c      	ldr	r2, [pc, #48]	; (8001630 <RCC_GetClocksFreq+0x15c>)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	4413      	add	r3, r2
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68da      	ldr	r2, [r3, #12]
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	611a      	str	r2, [r3, #16]
}
 8001616:	bf00      	nop
 8001618:	371c      	adds	r7, #28
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	40021000 	.word	0x40021000
 8001624:	007a1200 	.word	0x007a1200
 8001628:	003d0900 	.word	0x003d0900
 800162c:	20000000 	.word	0x20000000
 8001630:	20000010 	.word	0x20000010

08001634 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001640:	78fb      	ldrb	r3, [r7, #3]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d006      	beq.n	8001654 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8001646:	4909      	ldr	r1, [pc, #36]	; (800166c <RCC_AHBPeriphClockCmd+0x38>)
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <RCC_AHBPeriphClockCmd+0x38>)
 800164a:	695a      	ldr	r2, [r3, #20]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4313      	orrs	r3, r2
 8001650:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8001652:	e006      	b.n	8001662 <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001654:	4905      	ldr	r1, [pc, #20]	; (800166c <RCC_AHBPeriphClockCmd+0x38>)
 8001656:	4b05      	ldr	r3, [pc, #20]	; (800166c <RCC_AHBPeriphClockCmd+0x38>)
 8001658:	695a      	ldr	r2, [r3, #20]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	43db      	mvns	r3, r3
 800165e:	4013      	ands	r3, r2
 8001660:	614b      	str	r3, [r1, #20]
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr
 800166c:	40021000 	.word	0x40021000

08001670 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800167c:	78fb      	ldrb	r3, [r7, #3]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d006      	beq.n	8001690 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001682:	4909      	ldr	r1, [pc, #36]	; (80016a8 <RCC_APB2PeriphClockCmd+0x38>)
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <RCC_APB2PeriphClockCmd+0x38>)
 8001686:	699a      	ldr	r2, [r3, #24]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4313      	orrs	r3, r2
 800168c:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800168e:	e006      	b.n	800169e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001690:	4905      	ldr	r1, [pc, #20]	; (80016a8 <RCC_APB2PeriphClockCmd+0x38>)
 8001692:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <RCC_APB2PeriphClockCmd+0x38>)
 8001694:	699a      	ldr	r2, [r3, #24]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	43db      	mvns	r3, r3
 800169a:	4013      	ands	r3, r2
 800169c:	618b      	str	r3, [r1, #24]
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr
 80016a8:	40021000 	.word	0x40021000

080016ac <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80016b8:	78fb      	ldrb	r3, [r7, #3]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d006      	beq.n	80016cc <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80016be:	4909      	ldr	r1, [pc, #36]	; (80016e4 <RCC_APB1PeriphClockCmd+0x38>)
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <RCC_APB1PeriphClockCmd+0x38>)
 80016c2:	69da      	ldr	r2, [r3, #28]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80016ca:	e006      	b.n	80016da <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80016cc:	4905      	ldr	r1, [pc, #20]	; (80016e4 <RCC_APB1PeriphClockCmd+0x38>)
 80016ce:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <RCC_APB1PeriphClockCmd+0x38>)
 80016d0:	69da      	ldr	r2, [r3, #28]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	43db      	mvns	r3, r3
 80016d6:	4013      	ands	r3, r2
 80016d8:	61cb      	str	r3, [r1, #28]
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	40021000 	.word	0x40021000

080016e8 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 80016fc:	89fb      	ldrh	r3, [r7, #14]
 80016fe:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8001702:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	881a      	ldrh	r2, [r3, #0]
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	885b      	ldrh	r3, [r3, #2]
 800170c:	4313      	orrs	r3, r2
 800170e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001714:	4313      	orrs	r3, r2
 8001716:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800171c:	4313      	orrs	r3, r2
 800171e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001724:	4313      	orrs	r3, r2
 8001726:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800172c:	4313      	orrs	r3, r2
 800172e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001734:	4313      	orrs	r3, r2
 8001736:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800173c:	4313      	orrs	r3, r2
 800173e:	b29a      	uxth	r2, r3
 8001740:	89fb      	ldrh	r3, [r7, #14]
 8001742:	4313      	orrs	r3, r2
 8001744:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	89fa      	ldrh	r2, [r7, #14]
 800174a:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	8b9b      	ldrh	r3, [r3, #28]
 8001750:	b29b      	uxth	r3, r3
 8001752:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001756:	b29a      	uxth	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	8a1a      	ldrh	r2, [r3, #16]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	821a      	strh	r2, [r3, #16]
}
 8001764:	bf00      	nop
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr

0800176e <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct : pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2207      	movs	r2, #7
 80017aa:	821a      	strh	r2, [r3, #16]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr

080017b6 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	460b      	mov	r3, r1
 80017c0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80017c2:	78fb      	ldrb	r3, [r7, #3]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d008      	beq.n	80017da <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 80017d8:	e007      	b.n	80017ea <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	801a      	strh	r2, [r3, #0]
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr

080017f4 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI/I2S DMA transfer request.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	807b      	strh	r3, [r7, #2]
 8001800:	4613      	mov	r3, r2
 8001802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
  if (NewState != DISABLE)
 8001804:	787b      	ldrb	r3, [r7, #1]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d008      	beq.n	800181c <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI/I2S DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	889b      	ldrh	r3, [r3, #4]
 800180e:	b29a      	uxth	r2, r3
 8001810:	887b      	ldrh	r3, [r7, #2]
 8001812:	4313      	orrs	r3, r2
 8001814:	b29a      	uxth	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI/I2S DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
  }
}
 800181a:	e009      	b.n	8001830 <SPI_I2S_DMACmd+0x3c>
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	889b      	ldrh	r3, [r3, #4]
 8001820:	b29a      	uxth	r2, r3
 8001822:	887b      	ldrh	r3, [r7, #2]
 8001824:	43db      	mvns	r3, r3
 8001826:	b29b      	uxth	r3, r3
 8001828:	4013      	ands	r3, r2
 800182a:	b29a      	uxth	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	809a      	strh	r2, [r3, #4]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
	...

0800183c <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	881b      	ldrh	r3, [r3, #0]
 800184e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a2e      	ldr	r2, [pc, #184]	; (800190c <TIM_TimeBaseInit+0xd0>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d013      	beq.n	8001880 <TIM_TimeBaseInit+0x44>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a2d      	ldr	r2, [pc, #180]	; (8001910 <TIM_TimeBaseInit+0xd4>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d00f      	beq.n	8001880 <TIM_TimeBaseInit+0x44>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001866:	d00b      	beq.n	8001880 <TIM_TimeBaseInit+0x44>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a2a      	ldr	r2, [pc, #168]	; (8001914 <TIM_TimeBaseInit+0xd8>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d007      	beq.n	8001880 <TIM_TimeBaseInit+0x44>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a29      	ldr	r2, [pc, #164]	; (8001918 <TIM_TimeBaseInit+0xdc>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d003      	beq.n	8001880 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a28      	ldr	r2, [pc, #160]	; (800191c <TIM_TimeBaseInit+0xe0>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d108      	bne.n	8001892 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8001880:	89fb      	ldrh	r3, [r7, #14]
 8001882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001886:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	885a      	ldrh	r2, [r3, #2]
 800188c:	89fb      	ldrh	r3, [r7, #14]
 800188e:	4313      	orrs	r3, r2
 8001890:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a22      	ldr	r2, [pc, #136]	; (8001920 <TIM_TimeBaseInit+0xe4>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d00c      	beq.n	80018b4 <TIM_TimeBaseInit+0x78>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a21      	ldr	r2, [pc, #132]	; (8001924 <TIM_TimeBaseInit+0xe8>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d008      	beq.n	80018b4 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80018a2:	89fb      	ldrh	r3, [r7, #14]
 80018a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018a8:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	88da      	ldrh	r2, [r3, #6]
 80018ae:	89fb      	ldrh	r3, [r7, #14]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	89fa      	ldrh	r2, [r7, #14]
 80018b8:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	889a      	ldrh	r2, [r3, #4]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	881a      	ldrh	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a0f      	ldr	r2, [pc, #60]	; (800190c <TIM_TimeBaseInit+0xd0>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d00f      	beq.n	80018f2 <TIM_TimeBaseInit+0xb6>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a0e      	ldr	r2, [pc, #56]	; (8001910 <TIM_TimeBaseInit+0xd4>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d00b      	beq.n	80018f2 <TIM_TimeBaseInit+0xb6>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a12      	ldr	r2, [pc, #72]	; (8001928 <TIM_TimeBaseInit+0xec>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d007      	beq.n	80018f2 <TIM_TimeBaseInit+0xb6>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a11      	ldr	r2, [pc, #68]	; (800192c <TIM_TimeBaseInit+0xf0>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d003      	beq.n	80018f2 <TIM_TimeBaseInit+0xb6>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a10      	ldr	r2, [pc, #64]	; (8001930 <TIM_TimeBaseInit+0xf4>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d104      	bne.n	80018fc <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	7a1b      	ldrb	r3, [r3, #8]
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	829a      	strh	r2, [r3, #20]
}
 8001902:	bf00      	nop
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr
 800190c:	40012c00 	.word	0x40012c00
 8001910:	40013400 	.word	0x40013400
 8001914:	40000400 	.word	0x40000400
 8001918:	40000800 	.word	0x40000800
 800191c:	40000c00 	.word	0x40000c00
 8001920:	40001000 	.word	0x40001000
 8001924:	40001400 	.word	0x40001400
 8001928:	40014000 	.word	0x40014000
 800192c:	40014400 	.word	0x40014400
 8001930:	40014800 	.word	0x40014800

08001934 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  }
  else
  {
    assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d10f      	bne.n	8001966 <TIM_ICInit+0x32>
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	8859      	ldrh	r1, [r3, #2]
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	889a      	ldrh	r2, [r3, #4]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	891b      	ldrh	r3, [r3, #8]
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 f94e 	bl	8001bf4 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	88db      	ldrh	r3, [r3, #6]
 800195c:	4619      	mov	r1, r3
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f88c 	bl	8001a7c <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8001964:	e036      	b.n	80019d4 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	2b04      	cmp	r3, #4
 800196c:	d10f      	bne.n	800198e <TIM_ICInit+0x5a>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	8859      	ldrh	r1, [r3, #2]
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	889a      	ldrh	r2, [r3, #4]
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	891b      	ldrh	r3, [r3, #8]
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 f9aa 	bl	8001cd4 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	88db      	ldrh	r3, [r3, #6]
 8001984:	4619      	mov	r1, r3
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 f893 	bl	8001ab2 <TIM_SetIC2Prescaler>
}
 800198c:	e022      	b.n	80019d4 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	2b08      	cmp	r3, #8
 8001994:	d10f      	bne.n	80019b6 <TIM_ICInit+0x82>
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	8859      	ldrh	r1, [r3, #2]
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	889a      	ldrh	r2, [r3, #4]
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	891b      	ldrh	r3, [r3, #8]
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 fa10 	bl	8001dc8 <TI3_Config>
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	88db      	ldrh	r3, [r3, #6]
 80019ac:	4619      	mov	r1, r3
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f89c 	bl	8001aec <TIM_SetIC3Prescaler>
}
 80019b4:	e00e      	b.n	80019d4 <TIM_ICInit+0xa0>
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	8859      	ldrh	r1, [r3, #2]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	889a      	ldrh	r2, [r3, #4]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	891b      	ldrh	r3, [r3, #8]
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 fa76 	bl	8001eb4 <TI4_Config>
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	88db      	ldrh	r3, [r3, #6]
 80019cc:	4619      	mov	r1, r3
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 f8a7 	bl	8001b22 <TIM_SetIC4Prescaler>
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019ea:	809a      	strh	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	80da      	strh	r2, [r3, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	721a      	strb	r2, [r3, #8]
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr

08001a0e <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	811a      	strh	r2, [r3, #8]
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr

08001a3e <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	460b      	mov	r3, r1
 8001a48:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001a4a:	78fb      	ldrb	r3, [r7, #3]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d008      	beq.n	8001a62 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	881b      	ldrh	r3, [r3, #0]
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8001a60:	e007      	b.n	8001a72 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	f023 0301 	bic.w	r3, r3, #1
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	801a      	strh	r2, [r3, #0]
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr

08001a7c <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	8b1b      	ldrh	r3, [r3, #24]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	f023 030c 	bic.w	r3, r3, #12
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	831a      	strh	r2, [r3, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	8b1b      	ldrh	r3, [r3, #24]
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	887b      	ldrh	r3, [r7, #2]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	831a      	strh	r2, [r3, #24]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr

08001ab2 <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	460b      	mov	r3, r1
 8001abc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	8b1b      	ldrh	r3, [r3, #24]
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	831a      	strh	r2, [r3, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	8b1b      	ldrh	r3, [r3, #24]
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	887b      	ldrh	r3, [r7, #2]
 8001ad6:	021b      	lsls	r3, r3, #8
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	4313      	orrs	r3, r2
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	831a      	strh	r2, [r3, #24]
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr

08001aec <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	8b9b      	ldrh	r3, [r3, #28]
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	f023 030c 	bic.w	r3, r3, #12
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	839a      	strh	r2, [r3, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	8b9b      	ldrh	r3, [r3, #28]
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	887b      	ldrh	r3, [r7, #2]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	839a      	strh	r2, [r3, #28]
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr

08001b22 <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	8b9b      	ldrh	r3, [r3, #28]
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	839a      	strh	r2, [r3, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	8b9b      	ldrh	r3, [r3, #28]
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	887b      	ldrh	r3, [r7, #2]
 8001b46:	021b      	lsls	r3, r3, #8
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	839a      	strh	r2, [r3, #28]
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001b68:	b29b      	uxth	r3, r3
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <TIM_GetCapture2>:
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001b80:	b29b      	uxth	r3, r3
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr

08001b8c <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001b98:	b29b      	uxth	r3, r3
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr

08001ba4 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bb2:	b29b      	uxth	r3, r3
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr

08001bbe <TIM_GetFlagStatus>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 8001bbe:	b480      	push	{r7}
 8001bc0:	b085      	sub	sp, #20
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8001bca:	2300      	movs	r3, #0
 8001bcc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	8a1b      	ldrh	r3, [r3, #16]
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	887b      	ldrh	r3, [r7, #2]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d002      	beq.n	8001be4 <TIM_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8001bde:	2301      	movs	r3, #1
 8001be0:	73fb      	strb	r3, [r7, #15]
 8001be2:	e001      	b.n	8001be8 <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8001be4:	2300      	movs	r3, #0
 8001be6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr

08001bf4 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b087      	sub	sp, #28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	4608      	mov	r0, r1
 8001bfe:	4611      	mov	r1, r2
 8001c00:	461a      	mov	r2, r3
 8001c02:	4603      	mov	r3, r0
 8001c04:	817b      	strh	r3, [r7, #10]
 8001c06:	460b      	mov	r3, r1
 8001c08:	813b      	strh	r3, [r7, #8]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	82bb      	strh	r3, [r7, #20]
 8001c12:	2300      	movs	r3, #0
 8001c14:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8c1b      	ldrh	r3, [r3, #32]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	f023 0301 	bic.w	r3, r3, #1
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	8b1b      	ldrh	r3, [r3, #24]
 8001c2a:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8c1b      	ldrh	r3, [r3, #32]
 8001c30:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 8001c32:	8abb      	ldrh	r3, [r7, #20]
 8001c34:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8001c38:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001c3a:	88fb      	ldrh	r3, [r7, #6]
 8001c3c:	011b      	lsls	r3, r3, #4
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	893b      	ldrh	r3, [r7, #8]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	8abb      	ldrh	r3, [r7, #20]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4a1c      	ldr	r2, [pc, #112]	; (8001cc0 <TI1_Config+0xcc>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d013      	beq.n	8001c7c <TI1_Config+0x88>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4a1b      	ldr	r2, [pc, #108]	; (8001cc4 <TI1_Config+0xd0>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d00f      	beq.n	8001c7c <TI1_Config+0x88>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c62:	d00b      	beq.n	8001c7c <TI1_Config+0x88>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4a18      	ldr	r2, [pc, #96]	; (8001cc8 <TI1_Config+0xd4>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d007      	beq.n	8001c7c <TI1_Config+0x88>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4a17      	ldr	r2, [pc, #92]	; (8001ccc <TI1_Config+0xd8>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d003      	beq.n	8001c7c <TI1_Config+0x88>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4a16      	ldr	r2, [pc, #88]	; (8001cd0 <TI1_Config+0xdc>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d10b      	bne.n	8001c94 <TI1_Config+0xa0>
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
 8001c7c:	8afb      	ldrh	r3, [r7, #22]
 8001c7e:	f023 0302 	bic.w	r3, r3, #2
 8001c82:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001c84:	897a      	ldrh	r2, [r7, #10]
 8001c86:	8afb      	ldrh	r3, [r7, #22]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	82fb      	strh	r3, [r7, #22]
 8001c92:	e00a      	b.n	8001caa <TI1_Config+0xb6>
  }
  else
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001c94:	8afb      	ldrh	r3, [r7, #22]
 8001c96:	f023 030a 	bic.w	r3, r3, #10
 8001c9a:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001c9c:	897a      	ldrh	r2, [r7, #10]
 8001c9e:	8afb      	ldrh	r3, [r7, #22]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	82fb      	strh	r3, [r7, #22]
  }

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	8aba      	ldrh	r2, [r7, #20]
 8001cae:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8afa      	ldrh	r2, [r7, #22]
 8001cb4:	841a      	strh	r2, [r3, #32]
}
 8001cb6:	bf00      	nop
 8001cb8:	371c      	adds	r7, #28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr
 8001cc0:	40012c00 	.word	0x40012c00
 8001cc4:	40013400 	.word	0x40013400
 8001cc8:	40000400 	.word	0x40000400
 8001ccc:	40000800 	.word	0x40000800
 8001cd0:	40000c00 	.word	0x40000c00

08001cd4 <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b087      	sub	sp, #28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	4608      	mov	r0, r1
 8001cde:	4611      	mov	r1, r2
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	817b      	strh	r3, [r7, #10]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	813b      	strh	r3, [r7, #8]
 8001cea:	4613      	mov	r3, r2
 8001cec:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	82bb      	strh	r3, [r7, #20]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	82fb      	strh	r3, [r7, #22]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	8c1b      	ldrh	r3, [r3, #32]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	f023 0310 	bic.w	r3, r3, #16
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8b1b      	ldrh	r3, [r3, #24]
 8001d0e:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8c1b      	ldrh	r3, [r3, #32]
 8001d14:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8001d16:	897b      	ldrh	r3, [r7, #10]
 8001d18:	011b      	lsls	r3, r3, #4
 8001d1a:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8001d1c:	8abb      	ldrh	r3, [r7, #20]
 8001d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d22:	051b      	lsls	r3, r3, #20
 8001d24:	0d1b      	lsrs	r3, r3, #20
 8001d26:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8001d28:	88fb      	ldrh	r3, [r7, #6]
 8001d2a:	031b      	lsls	r3, r3, #12
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	8abb      	ldrh	r3, [r7, #20]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001d34:	893b      	ldrh	r3, [r7, #8]
 8001d36:	021b      	lsls	r3, r3, #8
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	8abb      	ldrh	r3, [r7, #20]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4a1c      	ldr	r2, [pc, #112]	; (8001db4 <TI2_Config+0xe0>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d013      	beq.n	8001d70 <TI2_Config+0x9c>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4a1b      	ldr	r2, [pc, #108]	; (8001db8 <TI2_Config+0xe4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d00f      	beq.n	8001d70 <TI2_Config+0x9c>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d56:	d00b      	beq.n	8001d70 <TI2_Config+0x9c>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4a18      	ldr	r2, [pc, #96]	; (8001dbc <TI2_Config+0xe8>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d007      	beq.n	8001d70 <TI2_Config+0x9c>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4a17      	ldr	r2, [pc, #92]	; (8001dc0 <TI2_Config+0xec>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d003      	beq.n	8001d70 <TI2_Config+0x9c>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4a16      	ldr	r2, [pc, #88]	; (8001dc4 <TI2_Config+0xf0>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d10b      	bne.n	8001d88 <TI2_Config+0xb4>
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
 8001d70:	8afb      	ldrh	r3, [r7, #22]
 8001d72:	f023 0320 	bic.w	r3, r3, #32
 8001d76:	82fb      	strh	r3, [r7, #22]
    tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001d78:	8a7a      	ldrh	r2, [r7, #18]
 8001d7a:	8afb      	ldrh	r3, [r7, #22]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	f043 0310 	orr.w	r3, r3, #16
 8001d84:	82fb      	strh	r3, [r7, #22]
 8001d86:	e00a      	b.n	8001d9e <TI2_Config+0xca>
  }
  else
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001d88:	8afb      	ldrh	r3, [r7, #22]
 8001d8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001d8e:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
 8001d90:	897a      	ldrh	r2, [r7, #10]
 8001d92:	8afb      	ldrh	r3, [r7, #22]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	f043 0310 	orr.w	r3, r3, #16
 8001d9c:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	8aba      	ldrh	r2, [r7, #20]
 8001da2:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	8afa      	ldrh	r2, [r7, #22]
 8001da8:	841a      	strh	r2, [r3, #32]
}
 8001daa:	bf00      	nop
 8001dac:	371c      	adds	r7, #28
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr
 8001db4:	40012c00 	.word	0x40012c00
 8001db8:	40013400 	.word	0x40013400
 8001dbc:	40000400 	.word	0x40000400
 8001dc0:	40000800 	.word	0x40000800
 8001dc4:	40000c00 	.word	0x40000c00

08001dc8 <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	4608      	mov	r0, r1
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	817b      	strh	r3, [r7, #10]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	813b      	strh	r3, [r7, #8]
 8001dde:	4613      	mov	r3, r2
 8001de0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	82bb      	strh	r3, [r7, #20]
 8001de6:	2300      	movs	r3, #0
 8001de8:	82fb      	strh	r3, [r7, #22]
 8001dea:	2300      	movs	r3, #0
 8001dec:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	8c1b      	ldrh	r3, [r3, #32]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8b9b      	ldrh	r3, [r3, #28]
 8001e02:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8c1b      	ldrh	r3, [r3, #32]
 8001e08:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8001e0a:	897b      	ldrh	r3, [r7, #10]
 8001e0c:	021b      	lsls	r3, r3, #8
 8001e0e:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 8001e10:	8abb      	ldrh	r3, [r7, #20]
 8001e12:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8001e16:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001e18:	88fb      	ldrh	r3, [r7, #6]
 8001e1a:	011b      	lsls	r3, r3, #4
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	893b      	ldrh	r3, [r7, #8]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	8abb      	ldrh	r3, [r7, #20]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	82bb      	strh	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4a1c      	ldr	r2, [pc, #112]	; (8001ea0 <TI3_Config+0xd8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d013      	beq.n	8001e5a <TI3_Config+0x92>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4a1b      	ldr	r2, [pc, #108]	; (8001ea4 <TI3_Config+0xdc>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d00f      	beq.n	8001e5a <TI3_Config+0x92>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e40:	d00b      	beq.n	8001e5a <TI3_Config+0x92>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4a18      	ldr	r2, [pc, #96]	; (8001ea8 <TI3_Config+0xe0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d007      	beq.n	8001e5a <TI3_Config+0x92>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	4a17      	ldr	r2, [pc, #92]	; (8001eac <TI3_Config+0xe4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d003      	beq.n	8001e5a <TI3_Config+0x92>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	4a16      	ldr	r2, [pc, #88]	; (8001eb0 <TI3_Config+0xe8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d10b      	bne.n	8001e72 <TI3_Config+0xaa>
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
 8001e5a:	8afb      	ldrh	r3, [r7, #22]
 8001e5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e60:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8001e62:	8a7a      	ldrh	r2, [r7, #18]
 8001e64:	8afb      	ldrh	r3, [r7, #22]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e6e:	82fb      	strh	r3, [r7, #22]
 8001e70:	e00a      	b.n	8001e88 <TI3_Config+0xc0>
  }
  else
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001e72:	8afb      	ldrh	r3, [r7, #22]
 8001e74:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8001e78:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
 8001e7a:	897a      	ldrh	r2, [r7, #10]
 8001e7c:	8afb      	ldrh	r3, [r7, #22]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e86:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8aba      	ldrh	r2, [r7, #20]
 8001e8c:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8afa      	ldrh	r2, [r7, #22]
 8001e92:	841a      	strh	r2, [r3, #32]
}
 8001e94:	bf00      	nop
 8001e96:	371c      	adds	r7, #28
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40012c00 	.word	0x40012c00
 8001ea4:	40013400 	.word	0x40013400
 8001ea8:	40000400 	.word	0x40000400
 8001eac:	40000800 	.word	0x40000800
 8001eb0:	40000c00 	.word	0x40000c00

08001eb4 <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b087      	sub	sp, #28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	4608      	mov	r0, r1
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	817b      	strh	r3, [r7, #10]
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	813b      	strh	r3, [r7, #8]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	82bb      	strh	r3, [r7, #20]
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	82fb      	strh	r3, [r7, #22]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	827b      	strh	r3, [r7, #18]

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8c1b      	ldrh	r3, [r3, #32]
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8b9b      	ldrh	r3, [r3, #28]
 8001eee:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8c1b      	ldrh	r3, [r3, #32]
 8001ef4:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8001ef6:	897b      	ldrh	r3, [r7, #10]
 8001ef8:	031b      	lsls	r3, r3, #12
 8001efa:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 8001efc:	8abb      	ldrh	r3, [r7, #20]
 8001efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f02:	051b      	lsls	r3, r3, #20
 8001f04:	0d1b      	lsrs	r3, r3, #20
 8001f06:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8001f08:	893b      	ldrh	r3, [r7, #8]
 8001f0a:	021b      	lsls	r3, r3, #8
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	8abb      	ldrh	r3, [r7, #20]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8001f14:	88fb      	ldrh	r3, [r7, #6]
 8001f16:	031b      	lsls	r3, r3, #12
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	8abb      	ldrh	r3, [r7, #20]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4a1d      	ldr	r2, [pc, #116]	; (8001f98 <TI4_Config+0xe4>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d013      	beq.n	8001f50 <TI4_Config+0x9c>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <TI4_Config+0xe8>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d00f      	beq.n	8001f50 <TI4_Config+0x9c>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f36:	d00b      	beq.n	8001f50 <TI4_Config+0x9c>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4a19      	ldr	r2, [pc, #100]	; (8001fa0 <TI4_Config+0xec>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d007      	beq.n	8001f50 <TI4_Config+0x9c>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4a18      	ldr	r2, [pc, #96]	; (8001fa4 <TI4_Config+0xf0>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d003      	beq.n	8001f50 <TI4_Config+0x9c>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4a17      	ldr	r2, [pc, #92]	; (8001fa8 <TI4_Config+0xf4>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d10b      	bne.n	8001f68 <TI4_Config+0xb4>
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
 8001f50:	8afb      	ldrh	r3, [r7, #22]
 8001f52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f56:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8001f58:	8a7a      	ldrh	r2, [r7, #18]
 8001f5a:	8afb      	ldrh	r3, [r7, #22]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f64:	82fb      	strh	r3, [r7, #22]
 8001f66:	e00c      	b.n	8001f82 <TI4_Config+0xce>
  }
  else
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
 8001f68:	8afb      	ldrh	r3, [r7, #22]
 8001f6a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f6e:	045b      	lsls	r3, r3, #17
 8001f70:	0c5b      	lsrs	r3, r3, #17
 8001f72:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
 8001f74:	897a      	ldrh	r2, [r7, #10]
 8001f76:	8afb      	ldrh	r3, [r7, #22]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f80:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8aba      	ldrh	r2, [r7, #20]
 8001f86:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8afa      	ldrh	r2, [r7, #22]
 8001f8c:	841a      	strh	r2, [r3, #32]
}
 8001f8e:	bf00      	nop
 8001f90:	371c      	adds	r7, #28
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr
 8001f98:	40012c00 	.word	0x40012c00
 8001f9c:	40013400 	.word	0x40013400
 8001fa0:	40000400 	.word	0x40000400
 8001fa4:	40000800 	.word	0x40000800
 8001fa8:	40000c00 	.word	0x40000c00

08001fac <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08c      	sub	sp, #48	; 0x30
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fba:	2300      	movs	r3, #0
 8001fbc:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	8a1b      	ldrh	r3, [r3, #16]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8001fd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fd8:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8001fdc:	4013      	ands	r3, r2
 8001fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	88db      	ldrh	r3, [r3, #6]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	899b      	ldrh	r3, [r3, #12]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8001ffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ffe:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8002002:	4013      	ands	r3, r2
 8002004:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	889a      	ldrh	r2, [r3, #4]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	891b      	ldrh	r3, [r3, #8]
 800200e:	4313      	orrs	r3, r2
 8002010:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002016:	4313      	orrs	r3, r2
 8002018:	b29b      	uxth	r3, r3
 800201a:	461a      	mov	r2, r3
 800201c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800201e:	4313      	orrs	r3, r2
 8002020:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8002022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002024:	b29a      	uxth	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	8a9b      	ldrh	r3, [r3, #20]
 800202e:	b29b      	uxth	r3, r3
 8002030:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8002032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002034:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8002038:	4013      	ands	r3, r2
 800203a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	899b      	ldrh	r3, [r3, #12]
 8002040:	461a      	mov	r2, r3
 8002042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002044:	4313      	orrs	r3, r2
 8002046:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8002048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800204a:	b29a      	uxth	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8002050:	f107 0308 	add.w	r3, r7, #8
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fa3d 	bl	80014d4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	4a2e      	ldr	r2, [pc, #184]	; (8002118 <USART_Init+0x16c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d102      	bne.n	8002068 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	62bb      	str	r3, [r7, #40]	; 0x28
 8002066:	e001      	b.n	800206c <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	899b      	ldrh	r3, [r3, #12]
 8002070:	b29b      	uxth	r3, r3
 8002072:	b21b      	sxth	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	da0c      	bge.n	8002092 <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002078:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	009a      	lsls	r2, r3, #2
 8002082:	441a      	add	r2, r3
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	fbb2 f3f3 	udiv	r3, r2, r3
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
 8002090:	e00b      	b.n	80020aa <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002092:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	009a      	lsls	r2, r3, #2
 800209c:	441a      	add	r2, r3
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	4a1b      	ldr	r2, [pc, #108]	; (800211c <USART_Init+0x170>)
 80020ae:	fba2 2303 	umull	r2, r3, r2, r3
 80020b2:	095b      	lsrs	r3, r3, #5
 80020b4:	011b      	lsls	r3, r3, #4
 80020b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80020b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ba:	091b      	lsrs	r3, r3, #4
 80020bc:	2264      	movs	r2, #100	; 0x64
 80020be:	fb02 f303 	mul.w	r3, r2, r3
 80020c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	899b      	ldrh	r3, [r3, #12]
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	b21b      	sxth	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	da0c      	bge.n	80020ee <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80020d4:	6a3b      	ldr	r3, [r7, #32]
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	3332      	adds	r3, #50	; 0x32
 80020da:	4a10      	ldr	r2, [pc, #64]	; (800211c <USART_Init+0x170>)
 80020dc:	fba2 2303 	umull	r2, r3, r2, r3
 80020e0:	095b      	lsrs	r3, r3, #5
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020e8:	4313      	orrs	r3, r2
 80020ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020ec:	e00b      	b.n	8002106 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	3332      	adds	r3, #50	; 0x32
 80020f4:	4a09      	ldr	r2, [pc, #36]	; (800211c <USART_Init+0x170>)
 80020f6:	fba2 2303 	umull	r2, r3, r2, r3
 80020fa:	095b      	lsrs	r3, r3, #5
 80020fc:	f003 030f 	and.w	r3, r3, #15
 8002100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002102:	4313      	orrs	r3, r2
 8002104:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8002106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002108:	b29a      	uxth	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	811a      	strh	r2, [r3, #8]
}
 800210e:	bf00      	nop
 8002110:	3730      	adds	r7, #48	; 0x30
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40013800 	.word	0x40013800
 800211c:	51eb851f 	.word	0x51eb851f

08002120 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d008      	beq.n	8002144 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	899b      	ldrh	r3, [r3, #12]
 8002136:	b29b      	uxth	r3, r3
 8002138:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800213c:	b29a      	uxth	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8002142:	e007      	b.n	8002154 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	899b      	ldrh	r3, [r3, #12]
 8002148:	b29b      	uxth	r3, r3
 800214a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800214e:	b29a      	uxth	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	819a      	strh	r2, [r3, #12]
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr

0800215e <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	460b      	mov	r3, r1
 8002168:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800216a:	887b      	ldrh	r3, [r7, #2]
 800216c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002170:	b29a      	uxth	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	809a      	strh	r2, [r3, #4]
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr

08002180 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	889b      	ldrh	r3, [r3, #4]
 800218c:	b29b      	uxth	r3, r3
 800218e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002192:	b29b      	uxth	r3, r3
}
 8002194:	4618      	mov	r0, r3
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr

0800219e <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800219e:	b480      	push	{r7}
 80021a0:	b085      	sub	sp, #20
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	460b      	mov	r3, r1
 80021a8:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80021aa:	2300      	movs	r3, #0
 80021ac:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	887b      	ldrh	r3, [r7, #2]
 80021b6:	4013      	ands	r3, r2
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d002      	beq.n	80021c4 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80021be:	2301      	movs	r3, #1
 80021c0:	73fb      	strb	r3, [r7, #15]
 80021c2:	e001      	b.n	80021c8 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80021c4:	2300      	movs	r3, #0
 80021c6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <_ZN11CSerialPortD1Ev>:
}

CSerialPort::~CSerialPort()
{
// TODO Auto-generated destructor stub
}
 80021d4:	4770      	bx	lr

080021d6 <_ZN11CSerialPortD0Ev>:
CSerialPort::~CSerialPort()
 80021d6:	b510      	push	{r4, lr}
 80021d8:	4604      	mov	r4, r0
}
 80021da:	f001 fd11 	bl	8003c00 <_ZdlPv>
 80021de:	4620      	mov	r0, r4
 80021e0:	bd10      	pop	{r4, pc}

080021e2 <_ZN11CSerialPort4InitEP6IUsart>:
	m_pUart = pUart;
 80021e2:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
 80021e6:	4770      	bx	lr

080021e8 <_ZN11CSerialPort11AddFunctionEhPFvPcS0_E>:
	if (opcode > MAX_OPCODE) return;
 80021e8:	290a      	cmp	r1, #10
 80021ea:	dc03      	bgt.n	80021f4 <_ZN11CSerialPort11AddFunctionEhPFvPcS0_E+0xc>
	m_pFunc[opcode] = pFunc;
 80021ec:	3152      	adds	r1, #82	; 0x52
 80021ee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80021f2:	604a      	str	r2, [r1, #4]
 80021f4:	4770      	bx	lr
	...

080021f8 <_ZN11CSerialPortC1Ev>:
CSerialPort::CSerialPort()
 80021f8:	4a03      	ldr	r2, [pc, #12]	; (8002208 <_ZN11CSerialPortC1Ev+0x10>)
 80021fa:	6002      	str	r2, [r0, #0]
	m_index = 0;
 80021fc:	2200      	movs	r2, #0
 80021fe:	f8a0 2146 	strh.w	r2, [r0, #326]	; 0x146
	m_pUart = NULL;
 8002202:	f8c0 2148 	str.w	r2, [r0, #328]	; 0x148
}
 8002206:	4770      	bx	lr
 8002208:	08004338 	.word	0x08004338

0800220c <_ZN3DMD10WritePixelEtthh>:

/*--------------------------------------------------------------------------------------
 Set or clear a pixel at the x and y location (0,0 is the top left corner)
 --------------------------------------------------------------------------------------*/
void DMD::WritePixel(uint16_t bX, uint16_t bY, uint8_t bGraphicsMode, uint8_t bPixel)
{
 800220c:	b4f0      	push	{r4, r5, r6, r7}
 800220e:	f89d 5010 	ldrb.w	r5, [sp, #16]
	uint16_t uiDMDRAMPointer;

	if (bX >= (DMD_PIXELS_ACROSS * m_DisplaysWide) || bY >= (DMD_PIXELS_DOWN * m_DisplaysHigh))
 8002212:	f890 4114 	ldrb.w	r4, [r0, #276]	; 0x114
 8002216:	ebb1 1f44 	cmp.w	r1, r4, lsl #5
 800221a:	da2c      	bge.n	8002276 <_ZN3DMD10WritePixelEtthh+0x6a>
 800221c:	f890 6115 	ldrb.w	r6, [r0, #277]	; 0x115
 8002220:	ebb2 1f06 	cmp.w	r2, r6, lsl #4
 8002224:	da27      	bge.n	8002276 <_ZN3DMD10WritePixelEtthh+0x6a>
	{
		return;
	}
	uint8_t panel = (bX / DMD_PIXELS_ACROSS) + (m_DisplaysWide * (bY / DMD_PIXELS_DOWN));
 8002226:	f3c1 1647 	ubfx	r6, r1, #5, #8
 800222a:	0917      	lsrs	r7, r2, #4
 800222c:	fb07 f404 	mul.w	r4, r7, r4
 8002230:	b2e4      	uxtb	r4, r4
 8002232:	4434      	add	r4, r6
 8002234:	b2e4      	uxtb	r4, r4
	bX = (bX % DMD_PIXELS_ACROSS) + (panel << 5);
 8002236:	f001 011f 	and.w	r1, r1, #31
 800223a:	eb01 1144 	add.w	r1, r1, r4, lsl #5
	bY = bY % DMD_PIXELS_DOWN;
 800223e:	f002 020f 	and.w	r2, r2, #15
	//set pointer to DMD RAM byte to be modified
	uiDMDRAMPointer = bX / 8 + bY * (m_DisplaysTotal << 2);
 8002242:	f3c1 06cf 	ubfx	r6, r1, #3, #16
 8002246:	f890 4116 	ldrb.w	r4, [r0, #278]	; 0x116
 800224a:	00a4      	lsls	r4, r4, #2
 800224c:	fb04 6202 	mla	r2, r4, r2, r6
 8002250:	b292      	uxth	r2, r2

	uint8_t lookup = bPixelLookupTable[bX & 0x07];
 8002252:	f001 0107 	and.w	r1, r1, #7
 8002256:	4401      	add	r1, r0
 8002258:	f891 111f 	ldrb.w	r1, [r1, #287]	; 0x11f

	switch (bGraphicsMode)
 800225c:	2b04      	cmp	r3, #4
 800225e:	d80a      	bhi.n	8002276 <_ZN3DMD10WritePixelEtthh+0x6a>
 8002260:	e8df f003 	tbb	[pc, r3]
 8002264:	2a1d1103 	.word	0x2a1d1103
 8002268:	32          	.byte	0x32
 8002269:	00          	.byte	0x00
	{
		case GRAPHICS_NORMAL:
			if (bPixel == true) m_bDMDScreenRAM[uiDMDRAMPointer] &= ~lookup;// zero bit is pixel on
 800226a:	2d01      	cmp	r5, #1
 800226c:	d005      	beq.n	800227a <_ZN3DMD10WritePixelEtthh+0x6e>
			else m_bDMDScreenRAM[uiDMDRAMPointer] |= lookup;	// one bit is pixel off
 800226e:	6800      	ldr	r0, [r0, #0]
 8002270:	5c83      	ldrb	r3, [r0, r2]
 8002272:	4319      	orrs	r1, r3
 8002274:	5481      	strb	r1, [r0, r2]
			if ((bPixel == true) && ((m_bDMDScreenRAM[uiDMDRAMPointer] & lookup) == 0))
				m_bDMDScreenRAM[uiDMDRAMPointer] |= lookup;	// one bit is pixel off
			break;
	}

}
 8002276:	bcf0      	pop	{r4, r5, r6, r7}
 8002278:	4770      	bx	lr
			if (bPixel == true) m_bDMDScreenRAM[uiDMDRAMPointer] &= ~lookup;// zero bit is pixel on
 800227a:	6800      	ldr	r0, [r0, #0]
 800227c:	5c83      	ldrb	r3, [r0, r2]
 800227e:	ea23 0101 	bic.w	r1, r3, r1
 8002282:	5481      	strb	r1, [r0, r2]
 8002284:	e7f7      	b.n	8002276 <_ZN3DMD10WritePixelEtthh+0x6a>
			if (bPixel == false) m_bDMDScreenRAM[uiDMDRAMPointer] &= ~lookup;// zero bit is pixel on
 8002286:	b92d      	cbnz	r5, 8002294 <_ZN3DMD10WritePixelEtthh+0x88>
 8002288:	6800      	ldr	r0, [r0, #0]
 800228a:	5c83      	ldrb	r3, [r0, r2]
 800228c:	ea23 0101 	bic.w	r1, r3, r1
 8002290:	5481      	strb	r1, [r0, r2]
 8002292:	e7f0      	b.n	8002276 <_ZN3DMD10WritePixelEtthh+0x6a>
			else m_bDMDScreenRAM[uiDMDRAMPointer] |= lookup;	// one bit is pixel off
 8002294:	6800      	ldr	r0, [r0, #0]
 8002296:	5c83      	ldrb	r3, [r0, r2]
 8002298:	4319      	orrs	r1, r3
 800229a:	5481      	strb	r1, [r0, r2]
 800229c:	e7eb      	b.n	8002276 <_ZN3DMD10WritePixelEtthh+0x6a>
			if (bPixel == true)
 800229e:	2d01      	cmp	r5, #1
 80022a0:	d1e9      	bne.n	8002276 <_ZN3DMD10WritePixelEtthh+0x6a>
				if ((m_bDMDScreenRAM[uiDMDRAMPointer] & lookup) == 0) m_bDMDScreenRAM[uiDMDRAMPointer] |=
 80022a2:	6800      	ldr	r0, [r0, #0]
 80022a4:	5c83      	ldrb	r3, [r0, r2]
 80022a6:	4219      	tst	r1, r3
 80022a8:	d102      	bne.n	80022b0 <_ZN3DMD10WritePixelEtthh+0xa4>
						lookup;	// one bit is pixel off
 80022aa:	430b      	orrs	r3, r1
				if ((m_bDMDScreenRAM[uiDMDRAMPointer] & lookup) == 0) m_bDMDScreenRAM[uiDMDRAMPointer] |=
 80022ac:	5483      	strb	r3, [r0, r2]
 80022ae:	e7e2      	b.n	8002276 <_ZN3DMD10WritePixelEtthh+0x6a>
				else m_bDMDScreenRAM[uiDMDRAMPointer] &= ~lookup;	// one bit is pixel off
 80022b0:	ea23 0301 	bic.w	r3, r3, r1
 80022b4:	5483      	strb	r3, [r0, r2]
 80022b6:	e7de      	b.n	8002276 <_ZN3DMD10WritePixelEtthh+0x6a>
			if (bPixel == true) m_bDMDScreenRAM[uiDMDRAMPointer] &= ~lookup;// zero bit is pixel on
 80022b8:	2d01      	cmp	r5, #1
 80022ba:	d1dc      	bne.n	8002276 <_ZN3DMD10WritePixelEtthh+0x6a>
 80022bc:	6800      	ldr	r0, [r0, #0]
 80022be:	5c83      	ldrb	r3, [r0, r2]
 80022c0:	ea23 0101 	bic.w	r1, r3, r1
 80022c4:	5481      	strb	r1, [r0, r2]
 80022c6:	e7d6      	b.n	8002276 <_ZN3DMD10WritePixelEtthh+0x6a>
			if ((bPixel == true) && ((m_bDMDScreenRAM[uiDMDRAMPointer] & lookup) == 0))
 80022c8:	2d01      	cmp	r5, #1
 80022ca:	d1d4      	bne.n	8002276 <_ZN3DMD10WritePixelEtthh+0x6a>
 80022cc:	6803      	ldr	r3, [r0, #0]
 80022ce:	5c98      	ldrb	r0, [r3, r2]
 80022d0:	4201      	tst	r1, r0
 80022d2:	d1d0      	bne.n	8002276 <_ZN3DMD10WritePixelEtthh+0x6a>
				m_bDMDScreenRAM[uiDMDRAMPointer] |= lookup;	// one bit is pixel off
 80022d4:	4301      	orrs	r1, r0
 80022d6:	5499      	strb	r1, [r3, r2]
 80022d8:	e7cd      	b.n	8002276 <_ZN3DMD10WritePixelEtthh+0x6a>

080022da <_ZN3DMD11ClearScreenEh>:

/*--------------------------------------------------------------------------------------
 Clear the screen in DMD RAM
 --------------------------------------------------------------------------------------*/
void DMD::ClearScreen(uint8_t bNormal)
{
 80022da:	b508      	push	{r3, lr}
	if (bNormal) // clear all pixels
 80022dc:	b939      	cbnz	r1, 80022ee <_ZN3DMD11ClearScreenEh+0x14>
	memset(m_bDMDScreenRAM, 0xFF, DMD_RAM_SIZE_BYTES * m_DisplaysTotal);
	else // set all pixels
	memset(m_bDMDScreenRAM, 0x00, DMD_RAM_SIZE_BYTES * m_DisplaysTotal);
 80022de:	f890 2116 	ldrb.w	r2, [r0, #278]	; 0x116
 80022e2:	0192      	lsls	r2, r2, #6
 80022e4:	2100      	movs	r1, #0
 80022e6:	6800      	ldr	r0, [r0, #0]
 80022e8:	f001 fecc 	bl	8004084 <memset>
 80022ec:	bd08      	pop	{r3, pc}
	memset(m_bDMDScreenRAM, 0xFF, DMD_RAM_SIZE_BYTES * m_DisplaysTotal);
 80022ee:	f890 2116 	ldrb.w	r2, [r0, #278]	; 0x116
 80022f2:	0192      	lsls	r2, r2, #6
 80022f4:	21ff      	movs	r1, #255	; 0xff
 80022f6:	6800      	ldr	r0, [r0, #0]
 80022f8:	f001 fec4 	bl	8004084 <memset>
 80022fc:	bd08      	pop	{r3, pc}
	...

08002300 <_ZN3DMDC1Ehh>:
DMD::DMD(uint8_t panelsWide, uint8_t panelsHigh)
 8002300:	b570      	push	{r4, r5, r6, lr}
 8002302:	4604      	mov	r4, r0
 8002304:	460e      	mov	r6, r1
 8002306:	4615      	mov	r5, r2
 8002308:	4b16      	ldr	r3, [pc, #88]	; (8002364 <_ZN3DMDC1Ehh+0x64>)
 800230a:	cb03      	ldmia	r3!, {r0, r1}
 800230c:	f8c4 011f 	str.w	r0, [r4, #287]	; 0x11f
 8002310:	f8c4 1123 	str.w	r1, [r4, #291]	; 0x123
 8002314:	f504 70a4 	add.w	r0, r4, #328	; 0x148
 8002318:	f000 ff1c 	bl	8003154 <_ZN8CTimeoutC1Ev>
	m_DisplaysWide = panelsWide;
 800231c:	f884 6114 	strb.w	r6, [r4, #276]	; 0x114
	m_DisplaysHigh = panelsHigh;
 8002320:	f884 5115 	strb.w	r5, [r4, #277]	; 0x115
	m_DisplaysTotal = m_DisplaysWide * m_DisplaysHigh;
 8002324:	fb05 f006 	mul.w	r0, r5, r6
 8002328:	b2c0      	uxtb	r0, r0
 800232a:	f884 0116 	strb.w	r0, [r4, #278]	; 0x116
	m_row1 = m_DisplaysTotal << 4;
 800232e:	0103      	lsls	r3, r0, #4
 8002330:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
	m_row2 = m_DisplaysTotal << 5;
 8002334:	0143      	lsls	r3, r0, #5
 8002336:	f8a4 311a 	strh.w	r3, [r4, #282]	; 0x11a
	m_row3 = ((m_DisplaysTotal << 2) * 3) << 2;
 800233a:	00c3      	lsls	r3, r0, #3
 800233c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	f8a4 311c 	strh.w	r3, [r4, #284]	; 0x11c
	m_bDMDScreenRAM = (uint8_t *)malloc(m_DisplaysTotal * DMD_RAM_SIZE_BYTES);
 8002346:	0180      	lsls	r0, r0, #6
 8002348:	f001 fc80 	bl	8003c4c <malloc>
 800234c:	6020      	str	r0, [r4, #0]
	ClearScreen(true);
 800234e:	2101      	movs	r1, #1
 8002350:	4620      	mov	r0, r4
 8002352:	f7ff ffc2 	bl	80022da <_ZN3DMD11ClearScreenEh>
	m_bDMDByte = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
	m_State = SBuffering;
 800235c:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
}
 8002360:	4620      	mov	r0, r4
 8002362:	bd70      	pop	{r4, r5, r6, pc}
 8002364:	08004328 	.word	0x08004328

08002368 <_ZN3DMD4InitEP11SPI_TypeDefP4IDmaP6ITimerP5IGpioS7_S7_S7_t>:
{
 8002368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800236a:	4604      	mov	r4, r0
 800236c:	9d07      	ldr	r5, [sp, #28]
 800236e:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	m_pSpi = pSpi;
 8002372:	f8c0 1138 	str.w	r1, [r0, #312]	; 0x138
	m_pDma = pDma;
 8002376:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
	m_timer.Init(pTimer);
 800237a:	f500 77a4 	add.w	r7, r0, #328	; 0x148
 800237e:	4619      	mov	r1, r3
 8002380:	4638      	mov	r0, r7
 8002382:	f000 fec2 	bl	800310a <_ZN8CTimeout4InitEP6ITimer>
	m_timer.SetExpiry(refreshRate);
 8002386:	4631      	mov	r1, r6
 8002388:	4638      	mov	r0, r7
 800238a:	f000 feca 	bl	8003122 <_ZN8CTimeout9SetExpiryEt>
	m_refreshRate = refreshRate;
 800238e:	f8a4 6140 	strh.w	r6, [r4, #320]	; 0x140
	m_PinSS = pSS;
 8002392:	9b06      	ldr	r3, [sp, #24]
 8002394:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
	m_PinA = pPinA;
 8002398:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
	m_PinB = pPinB;
 800239c:	9b08      	ldr	r3, [sp, #32]
 800239e:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
	m_PinOE = pPinOE;
 80023a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023a4:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
	m_PinA->Clear();
 80023a8:	682b      	ldr	r3, [r5, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	4628      	mov	r0, r5
 80023ae:	4798      	blx	r3
	m_PinB->Clear();
 80023b0:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 80023b4:	6803      	ldr	r3, [r0, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	4798      	blx	r3
	m_PinOE->Clear();
 80023ba:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
 80023be:	6803      	ldr	r3, [r0, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	4798      	blx	r3
	m_pDma->SetDirection(DMA_DIR_PeripheralDST);
 80023c4:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 80023c8:	6803      	ldr	r3, [r0, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2110      	movs	r1, #16
 80023ce:	4798      	blx	r3
	ClearScreen(true);
 80023d0:	2101      	movs	r1, #1
 80023d2:	4620      	mov	r0, r4
 80023d4:	f7ff ff81 	bl	80022da <_ZN3DMD11ClearScreenEh>
	m_bDMDByte = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
 80023de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080023e0 <_ZN3DMD8DrawLineEssssh>:

/*--------------------------------------------------------------------------------------
 Draw or clear a line from x1,y1 to x2,y2
 --------------------------------------------------------------------------------------*/
void DMD::DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t bGraphicsMode)
{
 80023e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023e4:	b087      	sub	sp, #28
 80023e6:	9002      	str	r0, [sp, #8]
 80023e8:	460c      	mov	r4, r1
 80023ea:	4615      	mov	r5, r2
 80023ec:	469b      	mov	fp, r3
 80023ee:	f9bd a040 	ldrsh.w	sl, [sp, #64]	; 0x40
 80023f2:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80023f6:	9303      	str	r3, [sp, #12]
	int16_t dy = y2 - y1;
 80023f8:	b292      	uxth	r2, r2
 80023fa:	ebaa 0002 	sub.w	r0, sl, r2
 80023fe:	b280      	uxth	r0, r0
 8002400:	b207      	sxth	r7, r0
	int16_t dx = x2 - x1;
 8002402:	b289      	uxth	r1, r1
 8002404:	ebab 0301 	sub.w	r3, fp, r1
 8002408:	b29b      	uxth	r3, r3
 800240a:	b21e      	sxth	r6, r3
	int16_t stepx, stepy;

	if (dy < 0)
 800240c:	2f00      	cmp	r7, #0
 800240e:	db1b      	blt.n	8002448 <_ZN3DMD8DrawLineEssssh+0x68>
		dy = -dy;
		stepy = -1;
	}
	else
	{
		stepy = 1;
 8002410:	f04f 0901 	mov.w	r9, #1
	}
	if (dx < 0)
 8002414:	2e00      	cmp	r6, #0
 8002416:	db1c      	blt.n	8002452 <_ZN3DMD8DrawLineEssssh+0x72>
		dx = -dx;
		stepx = -1;
	}
	else
	{
		stepx = 1;
 8002418:	f04f 0801 	mov.w	r8, #1
	}
	dy <<= 1;			// dy is now 2*dy
 800241c:	007f      	lsls	r7, r7, #1
 800241e:	b23b      	sxth	r3, r7
 8002420:	9304      	str	r3, [sp, #16]
	dx <<= 1;			// dx is now 2*dx
 8002422:	0076      	lsls	r6, r6, #1
 8002424:	b230      	sxth	r0, r6
 8002426:	9005      	str	r0, [sp, #20]

	WritePixel(x1, y1, bGraphicsMode, true);
 8002428:	2301      	movs	r3, #1
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	9b03      	ldr	r3, [sp, #12]
 800242e:	9802      	ldr	r0, [sp, #8]
 8002430:	f7ff feec 	bl	800220c <_ZN3DMD10WritePixelEtthh>
	if (dx > dy)
 8002434:	9b04      	ldr	r3, [sp, #16]
 8002436:	9805      	ldr	r0, [sp, #20]
 8002438:	4283      	cmp	r3, r0
 800243a:	da29      	bge.n	8002490 <_ZN3DMD8DrawLineEssssh+0xb0>
	{
		int16_t fraction = dy - (dx >> 1);	// same as 2*dy - dx
 800243c:	b2bf      	uxth	r7, r7
 800243e:	eba7 0a60 	sub.w	sl, r7, r0, asr #1
 8002442:	fa0f fa8a 	sxth.w	sl, sl
 8002446:	e017      	b.n	8002478 <_ZN3DMD8DrawLineEssssh+0x98>
		dy = -dy;
 8002448:	4247      	negs	r7, r0
 800244a:	b23f      	sxth	r7, r7
		stepy = -1;
 800244c:	f04f 39ff 	mov.w	r9, #4294967295
 8002450:	e7e0      	b.n	8002414 <_ZN3DMD8DrawLineEssssh+0x34>
		dx = -dx;
 8002452:	425b      	negs	r3, r3
 8002454:	b21e      	sxth	r6, r3
		stepx = -1;
 8002456:	f04f 38ff 	mov.w	r8, #4294967295
 800245a:	e7df      	b.n	800241c <_ZN3DMD8DrawLineEssssh+0x3c>
			if (fraction >= 0)
			{
				y1 += stepy;
				fraction -= dx;	// same as fraction -= 2*dx
			}
			x1 += stepx;
 800245c:	eb04 0108 	add.w	r1, r4, r8
 8002460:	b289      	uxth	r1, r1
 8002462:	b20c      	sxth	r4, r1
			fraction += dy;	// same as fraction -= 2*dy
 8002464:	44ba      	add	sl, r7
 8002466:	fa0f fa8a 	sxth.w	sl, sl
			WritePixel(x1, y1, bGraphicsMode, true);
 800246a:	2301      	movs	r3, #1
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	9b03      	ldr	r3, [sp, #12]
 8002470:	b2aa      	uxth	r2, r5
 8002472:	9802      	ldr	r0, [sp, #8]
 8002474:	f7ff feca 	bl	800220c <_ZN3DMD10WritePixelEtthh>
		while (x1 != x2)
 8002478:	455c      	cmp	r4, fp
 800247a:	d026      	beq.n	80024ca <_ZN3DMD8DrawLineEssssh+0xea>
			if (fraction >= 0)
 800247c:	f1ba 0f00 	cmp.w	sl, #0
 8002480:	dbec      	blt.n	800245c <_ZN3DMD8DrawLineEssssh+0x7c>
				y1 += stepy;
 8002482:	444d      	add	r5, r9
 8002484:	b22d      	sxth	r5, r5
				fraction -= dx;	// same as fraction -= 2*dx
 8002486:	ebaa 0a06 	sub.w	sl, sl, r6
 800248a:	fa0f fa8a 	sxth.w	sl, sl
 800248e:	e7e5      	b.n	800245c <_ZN3DMD8DrawLineEssssh+0x7c>
		}
	}
	else
	{
		int16_t fraction = dx - (dy >> 1);
 8002490:	fa1f fb86 	uxth.w	fp, r6
 8002494:	9b04      	ldr	r3, [sp, #16]
 8002496:	ebab 0663 	sub.w	r6, fp, r3, asr #1
 800249a:	b236      	sxth	r6, r6
 800249c:	e00c      	b.n	80024b8 <_ZN3DMD8DrawLineEssssh+0xd8>
			if (fraction >= 0)
			{
				x1 += stepx;
				fraction -= dy;
			}
			y1 += stepy;
 800249e:	eb05 0209 	add.w	r2, r5, r9
 80024a2:	b292      	uxth	r2, r2
 80024a4:	b215      	sxth	r5, r2
			fraction += dx;
 80024a6:	445e      	add	r6, fp
 80024a8:	b236      	sxth	r6, r6
			WritePixel(x1, y1, bGraphicsMode, true);
 80024aa:	2301      	movs	r3, #1
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	9b03      	ldr	r3, [sp, #12]
 80024b0:	b2a1      	uxth	r1, r4
 80024b2:	9802      	ldr	r0, [sp, #8]
 80024b4:	f7ff feaa 	bl	800220c <_ZN3DMD10WritePixelEtthh>
		while (y1 != y2)
 80024b8:	4555      	cmp	r5, sl
 80024ba:	d006      	beq.n	80024ca <_ZN3DMD8DrawLineEssssh+0xea>
			if (fraction >= 0)
 80024bc:	2e00      	cmp	r6, #0
 80024be:	dbee      	blt.n	800249e <_ZN3DMD8DrawLineEssssh+0xbe>
				x1 += stepx;
 80024c0:	4444      	add	r4, r8
 80024c2:	b224      	sxth	r4, r4
				fraction -= dy;
 80024c4:	1bf6      	subs	r6, r6, r7
 80024c6:	b236      	sxth	r6, r6
 80024c8:	e7e9      	b.n	800249e <_ZN3DMD8DrawLineEssssh+0xbe>
		}
	}
}
 80024ca:	b007      	add	sp, #28
 80024cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080024d0 <_ZN3DMD13DrawFilledBoxEssssh>:

/*--------------------------------------------------------------------------------------
 Draw or clear a filled box(rectangle) with a single pixel border
 --------------------------------------------------------------------------------------*/
void DMD::DrawFilledBox(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t bGraphicsMode)
{
 80024d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80024d4:	b083      	sub	sp, #12
 80024d6:	4681      	mov	r9, r0
 80024d8:	460c      	mov	r4, r1
 80024da:	4690      	mov	r8, r2
 80024dc:	461d      	mov	r5, r3
 80024de:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 80024e2:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
	for (int16_t b = x1; b <= x2; b++)
 80024e6:	42ac      	cmp	r4, r5
 80024e8:	dc0a      	bgt.n	8002500 <_ZN3DMD13DrawFilledBoxEssssh+0x30>
	{
		DrawLine(b, y1, b, y2, bGraphicsMode);
 80024ea:	9601      	str	r6, [sp, #4]
 80024ec:	9700      	str	r7, [sp, #0]
 80024ee:	4623      	mov	r3, r4
 80024f0:	4642      	mov	r2, r8
 80024f2:	4621      	mov	r1, r4
 80024f4:	4648      	mov	r0, r9
 80024f6:	f7ff ff73 	bl	80023e0 <_ZN3DMD8DrawLineEssssh>
	for (int16_t b = x1; b <= x2; b++)
 80024fa:	3401      	adds	r4, #1
 80024fc:	b224      	sxth	r4, r4
 80024fe:	e7f2      	b.n	80024e6 <_ZN3DMD13DrawFilledBoxEssssh+0x16>
	}
}
 8002500:	b003      	add	sp, #12
 8002502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002506 <_ZN3DMD7ExecuteEv>:
 Scan the dot matrix LED panel display, from the RAM mirror out to the display hardware.
 Call 4 times to scan the whole display which is made up of 4 interleaved rows within the 16 total rows.
 Insert the calls to this function into the main loop for the highest call rate, or from a timer interrupt
 --------------------------------------------------------------------------------------*/
void DMD::Execute()
{
 8002506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002508:	4604      	mov	r4, r0

	switch (m_State)
 800250a:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
 800250e:	b113      	cbz	r3, 8002516 <_ZN3DMD7ExecuteEv+0x10>
 8002510:	2b01      	cmp	r3, #1
 8002512:	d06d      	beq.n	80025f0 <_ZN3DMD7ExecuteEv+0xea>
 8002514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	{
		case SBuffering:
		{
			if (!m_timer.HasElapsed()) return;
 8002516:	f500 75a4 	add.w	r5, r0, #328	; 0x148
 800251a:	4628      	mov	r0, r5
 800251c:	f000 fe06 	bl	800312c <_ZN8CTimeout10HasElapsedEv>
 8002520:	b900      	cbnz	r0, 8002524 <_ZN3DMD7ExecuteEv+0x1e>
 8002522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			m_timer.SetExpiry((uint16_t)(m_refreshRate * m_brightness));
 8002524:	f8d4 6144 	ldr.w	r6, [r4, #324]	; 0x144
 8002528:	f8b4 0140 	ldrh.w	r0, [r4, #320]	; 0x140
 800252c:	f7fe faba 	bl	8000aa4 <__aeabi_i2f>
 8002530:	4631      	mov	r1, r6
 8002532:	f7fe fb0b 	bl	8000b4c <__aeabi_fmul>
 8002536:	f7fe fc59 	bl	8000dec <__aeabi_f2uiz>
 800253a:	b281      	uxth	r1, r0
 800253c:	4628      	mov	r0, r5
 800253e:	f000 fdf0 	bl	8003122 <_ZN8CTimeout9SetExpiryEt>
			//SPI transfer pixels to the display hardware shift registers
			int16_t rowsize = m_DisplaysTotal << 2;
 8002542:	f894 3116 	ldrb.w	r3, [r4, #278]	; 0x116
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	fa0f fe83 	sxth.w	lr, r3
			int16_t offset = rowsize * m_bDMDByte;
 800254c:	f894 711e 	ldrb.w	r7, [r4, #286]	; 0x11e
 8002550:	fb07 f703 	mul.w	r7, r7, r3
 8002554:	b23f      	sxth	r7, r7

			uint16_t size = 0;
			for (int16_t i = 0; i < rowsize; i++)
 8002556:	2300      	movs	r3, #0
			uint16_t size = 0;
 8002558:	461d      	mov	r5, r3
			for (int16_t i = 0; i < rowsize; i++)
 800255a:	4573      	cmp	r3, lr
 800255c:	da2a      	bge.n	80025b4 <_ZN3DMD7ExecuteEv+0xae>
			{
				m_dmaCache[size++] = m_bDMDScreenRAM[offset + i + m_row3];
 800255e:	1c6a      	adds	r2, r5, #1
 8002560:	b292      	uxth	r2, r2
 8002562:	f8d4 c000 	ldr.w	ip, [r4]
 8002566:	18fe      	adds	r6, r7, r3
 8002568:	f9b4 111c 	ldrsh.w	r1, [r4, #284]	; 0x11c
 800256c:	4431      	add	r1, r6
 800256e:	f81c 0001 	ldrb.w	r0, [ip, r1]
 8002572:	1961      	adds	r1, r4, r5
 8002574:	f881 0158 	strb.w	r0, [r1, #344]	; 0x158
				m_dmaCache[size++] = m_bDMDScreenRAM[offset + i + m_row2];
 8002578:	1ca9      	adds	r1, r5, #2
 800257a:	b289      	uxth	r1, r1
 800257c:	f9b4 011a 	ldrsh.w	r0, [r4, #282]	; 0x11a
 8002580:	4430      	add	r0, r6
 8002582:	f81c 0000 	ldrb.w	r0, [ip, r0]
 8002586:	4422      	add	r2, r4
 8002588:	f882 0158 	strb.w	r0, [r2, #344]	; 0x158
				m_dmaCache[size++] = m_bDMDScreenRAM[offset + i + m_row1];
 800258c:	1cea      	adds	r2, r5, #3
 800258e:	b292      	uxth	r2, r2
 8002590:	f9b4 0118 	ldrsh.w	r0, [r4, #280]	; 0x118
 8002594:	4430      	add	r0, r6
 8002596:	f81c 0000 	ldrb.w	r0, [ip, r0]
 800259a:	4421      	add	r1, r4
 800259c:	f881 0158 	strb.w	r0, [r1, #344]	; 0x158
				m_dmaCache[size++] = m_bDMDScreenRAM[offset + i];
 80025a0:	3504      	adds	r5, #4
 80025a2:	b2ad      	uxth	r5, r5
 80025a4:	f81c 1006 	ldrb.w	r1, [ip, r6]
 80025a8:	4422      	add	r2, r4
 80025aa:	f882 1158 	strb.w	r1, [r2, #344]	; 0x158
			for (int16_t i = 0; i < rowsize; i++)
 80025ae:	3301      	adds	r3, #1
 80025b0:	b21b      	sxth	r3, r3
 80025b2:	e7d2      	b.n	800255a <_ZN3DMD7ExecuteEv+0x54>
			}

			m_pDma->SetAddress((uint32_t)&m_pSpi->DR, (uint32_t)m_dmaCache);
 80025b4:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 80025b8:	6803      	ldr	r3, [r0, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 80025c0:	f504 72ac 	add.w	r2, r4, #344	; 0x158
 80025c4:	310c      	adds	r1, #12
 80025c6:	4798      	blx	r3
			m_pDma->SetBufferSize(size);
 80025c8:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 80025cc:	6803      	ldr	r3, [r0, #0]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	4629      	mov	r1, r5
 80025d2:	4798      	blx	r3
			m_PinSS->Clear(); // chip select low
 80025d4:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
 80025d8:	6803      	ldr	r3, [r0, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	4798      	blx	r3
			m_pDma->Start();
 80025de:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 80025e2:	6803      	ldr	r3, [r0, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4798      	blx	r3
			m_State = STransmitting;
 80025e8:	2301      	movs	r3, #1
 80025ea:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
		}
			break;
 80025ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

		case STransmitting:
		{
			if (!m_timer.HasElapsed()) return;
 80025f0:	f500 75a4 	add.w	r5, r0, #328	; 0x148
 80025f4:	4628      	mov	r0, r5
 80025f6:	f000 fd99 	bl	800312c <_ZN8CTimeout10HasElapsedEv>
 80025fa:	2800      	cmp	r0, #0
 80025fc:	d091      	beq.n	8002522 <_ZN3DMD7ExecuteEv+0x1c>
			m_timer.SetExpiry((uint16_t)(m_refreshRate * (1 - m_brightness)));
 80025fe:	f8b4 7140 	ldrh.w	r7, [r4, #320]	; 0x140
 8002602:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
 8002606:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800260a:	f7fe f995 	bl	8000938 <__aeabi_fsub>
 800260e:	4606      	mov	r6, r0
 8002610:	4638      	mov	r0, r7
 8002612:	f7fe fa47 	bl	8000aa4 <__aeabi_i2f>
 8002616:	4631      	mov	r1, r6
 8002618:	f7fe fa98 	bl	8000b4c <__aeabi_fmul>
 800261c:	f7fe fbe6 	bl	8000dec <__aeabi_f2uiz>
 8002620:	b281      	uxth	r1, r0
 8002622:	4628      	mov	r0, r5
 8002624:	f000 fd7d 	bl	8003122 <_ZN8CTimeout9SetExpiryEt>
			if (!m_pDma->IsTransferFinished()) return;
 8002628:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 800262c:	6803      	ldr	r3, [r0, #0]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	4798      	blx	r3
 8002632:	2800      	cmp	r0, #0
 8002634:	f43f af75 	beq.w	8002522 <_ZN3DMD7ExecuteEv+0x1c>
			m_pDma->Stop();
 8002638:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 800263c:	6803      	ldr	r3, [r0, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	4798      	blx	r3
			m_PinOE->Clear(); // turn off the display first
 8002642:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
 8002646:	6803      	ldr	r3, [r0, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	4798      	blx	r3
			m_PinSS->Set(); // latch the transfered data
 800264c:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
 8002650:	6803      	ldr	r3, [r0, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4798      	blx	r3
			switch (m_bDMDByte)
 8002656:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b03      	cmp	r3, #3
 800265e:	d810      	bhi.n	8002682 <_ZN3DMD7ExecuteEv+0x17c>
 8002660:	e8df f003 	tbb	[pc, r3]
 8002664:	34261802 	.word	0x34261802
	//DMD I/O pin macros
	inline void LIGHT_DMD_ROW_01_05_09_13()
	{
//		digitalWrite( PIN_DMD_B, LOW);
//		digitalWrite( PIN_DMD_A, LOW);
		m_PinB->Clear();
 8002668:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 800266c:	6803      	ldr	r3, [r0, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	4798      	blx	r3
		m_PinA->Clear();
 8002672:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 8002676:	6803      	ldr	r3, [r0, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	4798      	blx	r3
			{
				case 0:			// row 1, 5, 9, 13 were clocked out
					LIGHT_DMD_ROW_01_05_09_13();
					m_bDMDByte = 1;
 800267c:	2301      	movs	r3, #1
 800267e:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
				case 3:			// row 4, 8, 12, 16 were clocked out
					LIGHT_DMD_ROW_04_08_12_16();
					m_bDMDByte = 0;
					break;
			}
			m_PinOE->Set(); // turn on the display again
 8002682:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
 8002686:	6803      	ldr	r3, [r0, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4798      	blx	r3
			m_State = SBuffering;
 800268c:	2300      	movs	r3, #0
 800268e:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
		}
			break;
 8002692:	e746      	b.n	8002522 <_ZN3DMD7ExecuteEv+0x1c>
	}
	inline void LIGHT_DMD_ROW_02_06_10_14()
	{
//		digitalWrite( PIN_DMD_B, LOW);
//		digitalWrite( PIN_DMD_A, HIGH);
		m_PinB->Clear();
 8002694:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 8002698:	6803      	ldr	r3, [r0, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	4798      	blx	r3
		m_PinA->Set();
 800269e:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 80026a2:	6803      	ldr	r3, [r0, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4798      	blx	r3
					m_bDMDByte = 2;
 80026a8:	2302      	movs	r3, #2
 80026aa:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
					break;
 80026ae:	e7e8      	b.n	8002682 <_ZN3DMD7ExecuteEv+0x17c>
	}
	inline void LIGHT_DMD_ROW_03_07_11_15()
	{
//		digitalWrite( PIN_DMD_B, HIGH);
//		digitalWrite( PIN_DMD_A, LOW);
		m_PinB->Set();
 80026b0:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 80026b4:	6803      	ldr	r3, [r0, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4798      	blx	r3
		m_PinA->Clear();
 80026ba:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 80026be:	6803      	ldr	r3, [r0, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	4798      	blx	r3
					m_bDMDByte = 3;
 80026c4:	2303      	movs	r3, #3
 80026c6:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
					break;
 80026ca:	e7da      	b.n	8002682 <_ZN3DMD7ExecuteEv+0x17c>
	}
	inline void LIGHT_DMD_ROW_04_08_12_16()
	{
//		digitalWrite( PIN_DMD_B, HIGH);
//		digitalWrite( PIN_DMD_A, HIGH);
		m_PinB->Set();
 80026cc:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 80026d0:	6803      	ldr	r3, [r0, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4798      	blx	r3
		m_PinA->Set();
 80026d6:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 80026da:	6803      	ldr	r3, [r0, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4798      	blx	r3
					m_bDMDByte = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
					break;
 80026e6:	e7cc      	b.n	8002682 <_ZN3DMD7ExecuteEv+0x17c>

080026e8 <_ZN3DMD10SelectFontEPKh>:
	m_refreshRate = refreshRate;
}

void DMD::SelectFont(const uint8_t * font)
{
	this->m_pFont = font;
 80026e8:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
 80026ec:	4770      	bx	lr

080026ee <_ZN3DMD9CharWidthEh>:

int16_t DMD::CharWidth(const unsigned char letter)
{
	unsigned char c = letter;
	// Space is often not included in font so use width of 'n'
	if (c == ' ') c = 'n';
 80026ee:	2920      	cmp	r1, #32
 80026f0:	d010      	beq.n	8002714 <_ZN3DMD9CharWidthEh+0x26>
	uint8_t width = 0;

	uint8_t firstChar = *(m_pFont + FONT_FIRST_CHAR);
 80026f2:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 80026f6:	791a      	ldrb	r2, [r3, #4]
	uint8_t charCount = *(m_pFont + FONT_CHAR_COUNT);
 80026f8:	7958      	ldrb	r0, [r3, #5]

	if (c < firstChar || c >= (firstChar + charCount))
 80026fa:	4291      	cmp	r1, r2
 80026fc:	db10      	blt.n	8002720 <_ZN3DMD9CharWidthEh+0x32>
 80026fe:	4410      	add	r0, r2
 8002700:	4281      	cmp	r1, r0
 8002702:	da0f      	bge.n	8002724 <_ZN3DMD9CharWidthEh+0x36>
	{
		return 0;
	}
	c -= firstChar;
 8002704:	1a89      	subs	r1, r1, r2
 8002706:	b2c9      	uxtb	r1, r1

	if (*(m_pFont + FONT_LENGTH) == 0 && *(m_pFont + FONT_LENGTH + 1) == 0)
 8002708:	781a      	ldrb	r2, [r3, #0]
 800270a:	b92a      	cbnz	r2, 8002718 <_ZN3DMD9CharWidthEh+0x2a>
 800270c:	785a      	ldrb	r2, [r3, #1]
 800270e:	b91a      	cbnz	r2, 8002718 <_ZN3DMD9CharWidthEh+0x2a>
	{
		// zero length is flag indicating fixed width font (array does not contain width data entries)
		width = *(m_pFont + FONT_FIXED_WIDTH);
 8002710:	7898      	ldrb	r0, [r3, #2]
 8002712:	e003      	b.n	800271c <_ZN3DMD9CharWidthEh+0x2e>
	if (c == ' ') c = 'n';
 8002714:	216e      	movs	r1, #110	; 0x6e
 8002716:	e7ec      	b.n	80026f2 <_ZN3DMD9CharWidthEh+0x4>
	}
	else
	{
		// variable width font, read width data
		width = *(m_pFont + FONT_WIDTH_TABLE + c);
 8002718:	3106      	adds	r1, #6
 800271a:	5c58      	ldrb	r0, [r3, r1]
	}
	return width;
 800271c:	b200      	sxth	r0, r0
 800271e:	4770      	bx	lr
		return 0;
 8002720:	2000      	movs	r0, #0
 8002722:	4770      	bx	lr
 8002724:	2000      	movs	r0, #0
}
 8002726:	4770      	bx	lr

08002728 <_ZN3DMD8DrawCharEsshh>:
{
 8002728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800272c:	b08b      	sub	sp, #44	; 0x2c
 800272e:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8002732:	9404      	str	r4, [sp, #16]
	if (bX > (DMD_PIXELS_ACROSS * m_DisplaysWide) || bY > (DMD_PIXELS_DOWN * m_DisplaysHigh))
 8002734:	f890 4114 	ldrb.w	r4, [r0, #276]	; 0x114
 8002738:	ebb1 1f44 	cmp.w	r1, r4, lsl #5
 800273c:	f300 80c3 	bgt.w	80028c6 <_ZN3DMD8DrawCharEsshh+0x19e>
 8002740:	f890 4115 	ldrb.w	r4, [r0, #277]	; 0x115
 8002744:	ebb2 1f04 	cmp.w	r2, r4, lsl #4
 8002748:	f300 80c1 	bgt.w	80028ce <_ZN3DMD8DrawCharEsshh+0x1a6>
 800274c:	9203      	str	r2, [sp, #12]
 800274e:	9102      	str	r1, [sp, #8]
 8002750:	4682      	mov	sl, r0
	uint8_t height = *(m_pFont + FONT_HEIGHT);
 8002752:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
 8002756:	78c2      	ldrb	r2, [r0, #3]
 8002758:	9208      	str	r2, [sp, #32]
	if (c == ' ')
 800275a:	2b20      	cmp	r3, #32
 800275c:	d021      	beq.n	80027a2 <_ZN3DMD8DrawCharEsshh+0x7a>
	uint8_t bytes = (height + 7) / 8;
 800275e:	9a08      	ldr	r2, [sp, #32]
 8002760:	4690      	mov	r8, r2
 8002762:	3207      	adds	r2, #7
 8002764:	10d2      	asrs	r2, r2, #3
 8002766:	9206      	str	r2, [sp, #24]
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	4615      	mov	r5, r2
 800276c:	9209      	str	r2, [sp, #36]	; 0x24
	uint8_t firstChar = *(m_pFont + FONT_FIRST_CHAR);
 800276e:	7901      	ldrb	r1, [r0, #4]
	uint8_t charCount = *(m_pFont + FONT_CHAR_COUNT);
 8002770:	7944      	ldrb	r4, [r0, #5]
	if (c < firstChar || c >= (firstChar + charCount)) return 0;
 8002772:	428b      	cmp	r3, r1
 8002774:	f2c0 80af 	blt.w	80028d6 <_ZN3DMD8DrawCharEsshh+0x1ae>
 8002778:	1862      	adds	r2, r4, r1
 800277a:	4293      	cmp	r3, r2
 800277c:	f280 80b1 	bge.w	80028e2 <_ZN3DMD8DrawCharEsshh+0x1ba>
	c -= firstChar;
 8002780:	1a5b      	subs	r3, r3, r1
 8002782:	b2d9      	uxtb	r1, r3
	if (*(m_pFont + FONT_LENGTH) == 0 && *(m_pFont + FONT_LENGTH + 1) == 0)
 8002784:	7803      	ldrb	r3, [r0, #0]
 8002786:	bb1b      	cbnz	r3, 80027d0 <_ZN3DMD8DrawCharEsshh+0xa8>
 8002788:	7843      	ldrb	r3, [r0, #1]
 800278a:	bb63      	cbnz	r3, 80027e6 <_ZN3DMD8DrawCharEsshh+0xbe>
		width = *(m_pFont + FONT_FIXED_WIDTH);
 800278c:	7883      	ldrb	r3, [r0, #2]
		index = c * bytes * width + FONT_WIDTH_TABLE;
 800278e:	462a      	mov	r2, r5
 8002790:	fb01 f202 	mul.w	r2, r1, r2
 8002794:	fb02 f203 	mul.w	r2, r2, r3
 8002798:	b292      	uxth	r2, r2
 800279a:	3206      	adds	r2, #6
 800279c:	b292      	uxth	r2, r2
 800279e:	9207      	str	r2, [sp, #28]
 80027a0:	e02f      	b.n	8002802 <_ZN3DMD8DrawCharEsshh+0xda>
		int16_t charWide = CharWidth(' ');
 80027a2:	2120      	movs	r1, #32
 80027a4:	4650      	mov	r0, sl
 80027a6:	f7ff ffa2 	bl	80026ee <_ZN3DMD9CharWidthEh>
 80027aa:	4604      	mov	r4, r0
		this->DrawFilledBox(bX, bY, bX + charWide, bY + height, GRAPHICS_INVERSE);
 80027ac:	9802      	ldr	r0, [sp, #8]
 80027ae:	4603      	mov	r3, r0
 80027b0:	4423      	add	r3, r4
 80027b2:	9a08      	ldr	r2, [sp, #32]
 80027b4:	9d03      	ldr	r5, [sp, #12]
 80027b6:	442a      	add	r2, r5
 80027b8:	b212      	sxth	r2, r2
 80027ba:	2101      	movs	r1, #1
 80027bc:	9101      	str	r1, [sp, #4]
 80027be:	9200      	str	r2, [sp, #0]
 80027c0:	b21b      	sxth	r3, r3
 80027c2:	462a      	mov	r2, r5
 80027c4:	4601      	mov	r1, r0
 80027c6:	4650      	mov	r0, sl
 80027c8:	f7ff fe82 	bl	80024d0 <_ZN3DMD13DrawFilledBoxEssssh>
		return charWide;
 80027cc:	9405      	str	r4, [sp, #20]
 80027ce:	e084      	b.n	80028da <_ZN3DMD8DrawCharEsshh+0x1b2>
 80027d0:	2200      	movs	r2, #0
 80027d2:	4613      	mov	r3, r2
		for (uint8_t i = 0; i < c; i++)
 80027d4:	428a      	cmp	r2, r1
 80027d6:	da09      	bge.n	80027ec <_ZN3DMD8DrawCharEsshh+0xc4>
			index += *(m_pFont + FONT_WIDTH_TABLE + i);
 80027d8:	1d95      	adds	r5, r2, #6
 80027da:	5d45      	ldrb	r5, [r0, r5]
 80027dc:	442b      	add	r3, r5
 80027de:	b29b      	uxth	r3, r3
		for (uint8_t i = 0; i < c; i++)
 80027e0:	3201      	adds	r2, #1
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	e7f6      	b.n	80027d4 <_ZN3DMD8DrawCharEsshh+0xac>
 80027e6:	2200      	movs	r2, #0
 80027e8:	4613      	mov	r3, r2
 80027ea:	e7f3      	b.n	80027d4 <_ZN3DMD8DrawCharEsshh+0xac>
		index = index * bytes + charCount + FONT_WIDTH_TABLE;
 80027ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80027ee:	fb02 f303 	mul.w	r3, r2, r3
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	4423      	add	r3, r4
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	3306      	adds	r3, #6
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	9307      	str	r3, [sp, #28]
		width = *(m_pFont + FONT_WIDTH_TABLE + c);
 80027fe:	3106      	adds	r1, #6
 8002800:	5c43      	ldrb	r3, [r0, r1]
	if (bX < -width || bY < -height) return width;
 8002802:	9305      	str	r3, [sp, #20]
 8002804:	425b      	negs	r3, r3
 8002806:	9a02      	ldr	r2, [sp, #8]
 8002808:	429a      	cmp	r2, r3
 800280a:	db66      	blt.n	80028da <_ZN3DMD8DrawCharEsshh+0x1b2>
 800280c:	9b08      	ldr	r3, [sp, #32]
 800280e:	425b      	negs	r3, r3
 8002810:	9a03      	ldr	r2, [sp, #12]
 8002812:	429a      	cmp	r2, r3
 8002814:	db61      	blt.n	80028da <_ZN3DMD8DrawCharEsshh+0x1b2>
 8002816:	f04f 0900 	mov.w	r9, #0
 800281a:	e04d      	b.n	80028b8 <_ZN3DMD8DrawCharEsshh+0x190>
			if ((i == bytes - 1) && bytes > 1)
 800281c:	2b01      	cmp	r3, #1
 800281e:	dd45      	ble.n	80028ac <_ZN3DMD8DrawCharEsshh+0x184>
				offset = height - 8;
 8002820:	9b08      	ldr	r3, [sp, #32]
 8002822:	f1a3 0508 	sub.w	r5, r3, #8
 8002826:	e041      	b.n	80028ac <_ZN3DMD8DrawCharEsshh+0x184>
						WritePixel(bX + j, bY + offset + k, bGraphicsMode, false);
 8002828:	9b02      	ldr	r3, [sp, #8]
 800282a:	eb09 0103 	add.w	r1, r9, r3
 800282e:	9b03      	ldr	r3, [sp, #12]
 8002830:	195a      	adds	r2, r3, r5
 8002832:	b292      	uxth	r2, r2
 8002834:	4422      	add	r2, r4
 8002836:	2300      	movs	r3, #0
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	9b04      	ldr	r3, [sp, #16]
 800283c:	b292      	uxth	r2, r2
 800283e:	b289      	uxth	r1, r1
 8002840:	4650      	mov	r0, sl
 8002842:	f7ff fce3 	bl	800220c <_ZN3DMD10WritePixelEtthh>
			for (uint8_t k = 0; k < 8; k++)
 8002846:	3401      	adds	r4, #1
 8002848:	b2e4      	uxtb	r4, r4
 800284a:	2c07      	cmp	r4, #7
 800284c:	dc1a      	bgt.n	8002884 <_ZN3DMD8DrawCharEsshh+0x15c>
				if ((offset + k >= i * 8) && (offset + k <= height))
 800284e:	192b      	adds	r3, r5, r4
 8002850:	ebb3 0fc7 	cmp.w	r3, r7, lsl #3
 8002854:	dbf7      	blt.n	8002846 <_ZN3DMD8DrawCharEsshh+0x11e>
 8002856:	4598      	cmp	r8, r3
 8002858:	dbf5      	blt.n	8002846 <_ZN3DMD8DrawCharEsshh+0x11e>
					if (data & (1 << k))
 800285a:	fa4b f204 	asr.w	r2, fp, r4
 800285e:	f012 0f01 	tst.w	r2, #1
 8002862:	d0e1      	beq.n	8002828 <_ZN3DMD8DrawCharEsshh+0x100>
						WritePixel(bX + j, bY + offset + k, bGraphicsMode, true);
 8002864:	9b02      	ldr	r3, [sp, #8]
 8002866:	eb09 0103 	add.w	r1, r9, r3
 800286a:	9b03      	ldr	r3, [sp, #12]
 800286c:	195a      	adds	r2, r3, r5
 800286e:	b292      	uxth	r2, r2
 8002870:	4422      	add	r2, r4
 8002872:	2301      	movs	r3, #1
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	9b04      	ldr	r3, [sp, #16]
 8002878:	b292      	uxth	r2, r2
 800287a:	b289      	uxth	r1, r1
 800287c:	4650      	mov	r0, sl
 800287e:	f7ff fcc5 	bl	800220c <_ZN3DMD10WritePixelEtthh>
 8002882:	e7e0      	b.n	8002846 <_ZN3DMD8DrawCharEsshh+0x11e>
		for (uint8_t i = bytes - 1; i < 254; i--)
 8002884:	3e01      	subs	r6, #1
 8002886:	b2f6      	uxtb	r6, r6
 8002888:	4637      	mov	r7, r6
 800288a:	2efd      	cmp	r6, #253	; 0xfd
 800288c:	dc10      	bgt.n	80028b0 <_ZN3DMD8DrawCharEsshh+0x188>
			uint8_t data = *(m_pFont + index + j + (i * width));
 800288e:	f8da 2110 	ldr.w	r2, [sl, #272]	; 0x110
 8002892:	9b07      	ldr	r3, [sp, #28]
 8002894:	444b      	add	r3, r9
 8002896:	9905      	ldr	r1, [sp, #20]
 8002898:	fb06 3301 	mla	r3, r6, r1, r3
 800289c:	f812 b003 	ldrb.w	fp, [r2, r3]
			int16_t offset = (i * 8);
 80028a0:	00f5      	lsls	r5, r6, #3
 80028a2:	f89d 3018 	ldrb.w	r3, [sp, #24]
			if ((i == bytes - 1) && bytes > 1)
 80028a6:	1e5a      	subs	r2, r3, #1
 80028a8:	4296      	cmp	r6, r2
 80028aa:	d0b7      	beq.n	800281c <_ZN3DMD8DrawCharEsshh+0xf4>
			for (uint8_t k = 0; k < 8; k++)
 80028ac:	2400      	movs	r4, #0
 80028ae:	e7cc      	b.n	800284a <_ZN3DMD8DrawCharEsshh+0x122>
	for (uint8_t j = 0; j < width; j++)
 80028b0:	f109 0901 	add.w	r9, r9, #1
 80028b4:	fa5f f989 	uxtb.w	r9, r9
 80028b8:	9b05      	ldr	r3, [sp, #20]
 80028ba:	454b      	cmp	r3, r9
 80028bc:	dd0d      	ble.n	80028da <_ZN3DMD8DrawCharEsshh+0x1b2>
		for (uint8_t i = bytes - 1; i < 254; i--)
 80028be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028c0:	1e5e      	subs	r6, r3, #1
 80028c2:	b2f6      	uxtb	r6, r6
 80028c4:	e7e0      	b.n	8002888 <_ZN3DMD8DrawCharEsshh+0x160>
		return -1;
 80028c6:	f04f 33ff 	mov.w	r3, #4294967295
 80028ca:	9305      	str	r3, [sp, #20]
 80028cc:	e005      	b.n	80028da <_ZN3DMD8DrawCharEsshh+0x1b2>
 80028ce:	f04f 33ff 	mov.w	r3, #4294967295
 80028d2:	9305      	str	r3, [sp, #20]
 80028d4:	e001      	b.n	80028da <_ZN3DMD8DrawCharEsshh+0x1b2>
	if (c < firstChar || c >= (firstChar + charCount)) return 0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	9305      	str	r3, [sp, #20]
}
 80028da:	9805      	ldr	r0, [sp, #20]
 80028dc:	b00b      	add	sp, #44	; 0x2c
 80028de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (c < firstChar || c >= (firstChar + charCount)) return 0;
 80028e2:	2300      	movs	r3, #0
 80028e4:	9305      	str	r3, [sp, #20]
 80028e6:	e7f8      	b.n	80028da <_ZN3DMD8DrawCharEsshh+0x1b2>

080028e8 <_ZN3DMD10DrawStringEssPKchh>:
{
 80028e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028ec:	b087      	sub	sp, #28
 80028ee:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
 80028f2:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	if (bX >= (DMD_PIXELS_ACROSS * m_DisplaysWide) || bY >= DMD_PIXELS_DOWN * m_DisplaysHigh)
 80028f6:	f890 4114 	ldrb.w	r4, [r0, #276]	; 0x114
 80028fa:	ebb1 1f44 	cmp.w	r1, r4, lsl #5
 80028fe:	da56      	bge.n	80029ae <_ZN3DMD10DrawStringEssPKchh+0xc6>
 8002900:	468b      	mov	fp, r1
 8002902:	9203      	str	r2, [sp, #12]
 8002904:	f890 4115 	ldrb.w	r4, [r0, #277]	; 0x115
 8002908:	ebb2 1f04 	cmp.w	r2, r4, lsl #4
 800290c:	da4f      	bge.n	80029ae <_ZN3DMD10DrawStringEssPKchh+0xc6>
	uint8_t height = *(m_pFont + FONT_HEIGHT);
 800290e:	f8d0 4110 	ldr.w	r4, [r0, #272]	; 0x110
 8002912:	78e4      	ldrb	r4, [r4, #3]
	if (bY + height < 0) return;
 8002914:	42d4      	cmn	r4, r2
 8002916:	d44a      	bmi.n	80029ae <_ZN3DMD10DrawStringEssPKchh+0xc6>
 8002918:	461d      	mov	r5, r3
 800291a:	9202      	str	r2, [sp, #8]
 800291c:	4607      	mov	r7, r0
	this->DrawLine(bX - 1, bY, bX - 1, bY + height, GRAPHICS_INVERSE);
 800291e:	fa1f f881 	uxth.w	r8, r1
 8002922:	f108 31ff 	add.w	r1, r8, #4294967295
 8002926:	b209      	sxth	r1, r1
 8002928:	4414      	add	r4, r2
 800292a:	b220      	sxth	r0, r4
 800292c:	9005      	str	r0, [sp, #20]
 800292e:	2301      	movs	r3, #1
 8002930:	9301      	str	r3, [sp, #4]
 8002932:	9000      	str	r0, [sp, #0]
 8002934:	460b      	mov	r3, r1
 8002936:	4638      	mov	r0, r7
 8002938:	f7ff fd52 	bl	80023e0 <_ZN3DMD8DrawLineEssssh>
	for (int16_t i = 0; i < length; i++)
 800293c:	2600      	movs	r6, #0
	int16_t strWidth = 0;
 800293e:	4634      	mov	r4, r6
 8002940:	f8cd a010 	str.w	sl, [sp, #16]
 8002944:	46aa      	mov	sl, r5
 8002946:	e010      	b.n	800296a <_ZN3DMD10DrawStringEssPKchh+0x82>
		else if (charWide < 0)
 8002948:	2b00      	cmp	r3, #0
 800294a:	db30      	blt.n	80029ae <_ZN3DMD10DrawStringEssPKchh+0xc6>
		if ((bX + strWidth) >= DMD_PIXELS_ACROSS * m_DisplaysWide
 800294c:	eb04 030b 	add.w	r3, r4, fp
 8002950:	f897 2114 	ldrb.w	r2, [r7, #276]	; 0x114
 8002954:	ebb3 1f42 	cmp.w	r3, r2, lsl #5
 8002958:	da29      	bge.n	80029ae <_ZN3DMD10DrawStringEssPKchh+0xc6>
				|| bY >= DMD_PIXELS_DOWN * m_DisplaysHigh) return;
 800295a:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800295e:	9a03      	ldr	r2, [sp, #12]
 8002960:	ebb2 1f03 	cmp.w	r2, r3, lsl #4
 8002964:	da23      	bge.n	80029ae <_ZN3DMD10DrawStringEssPKchh+0xc6>
	for (int16_t i = 0; i < length; i++)
 8002966:	3601      	adds	r6, #1
 8002968:	b236      	sxth	r6, r6
 800296a:	454e      	cmp	r6, r9
 800296c:	da1f      	bge.n	80029ae <_ZN3DMD10DrawStringEssPKchh+0xc6>
		int16_t charWide = this->DrawChar(bX + strWidth, bY, bChars[i], bGraphicsMode);
 800296e:	b2a5      	uxth	r5, r4
 8002970:	eb08 0105 	add.w	r1, r8, r5
 8002974:	f81a 3006 	ldrb.w	r3, [sl, r6]
 8002978:	9a04      	ldr	r2, [sp, #16]
 800297a:	9200      	str	r2, [sp, #0]
 800297c:	9a02      	ldr	r2, [sp, #8]
 800297e:	b209      	sxth	r1, r1
 8002980:	4638      	mov	r0, r7
 8002982:	f7ff fed1 	bl	8002728 <_ZN3DMD8DrawCharEsshh>
 8002986:	b203      	sxth	r3, r0
		if (charWide > 0)
 8002988:	2b00      	cmp	r3, #0
 800298a:	dddd      	ble.n	8002948 <_ZN3DMD10DrawStringEssPKchh+0x60>
			strWidth += charWide;
 800298c:	4405      	add	r5, r0
 800298e:	b2ad      	uxth	r5, r5
			this->DrawLine(bX + strWidth, bY, bX + strWidth, bY + height, GRAPHICS_INVERSE);
 8002990:	eb08 0105 	add.w	r1, r8, r5
 8002994:	b209      	sxth	r1, r1
 8002996:	2301      	movs	r3, #1
 8002998:	9301      	str	r3, [sp, #4]
 800299a:	9b05      	ldr	r3, [sp, #20]
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	460b      	mov	r3, r1
 80029a0:	9a02      	ldr	r2, [sp, #8]
 80029a2:	4638      	mov	r0, r7
 80029a4:	f7ff fd1c 	bl	80023e0 <_ZN3DMD8DrawLineEssssh>
			strWidth++;
 80029a8:	3501      	adds	r5, #1
 80029aa:	b22c      	sxth	r4, r5
 80029ac:	e7ce      	b.n	800294c <_ZN3DMD10DrawStringEssPKchh+0x64>
}
 80029ae:	b007      	add	sp, #28
 80029b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080029b4 <_ZN13CACDisplayDmd4InitEP17CACFrequencyMeterP12CAnalogInputP3DMDP6ITimer>:

#include <ACDisplayDmd.h>

void CACDisplayDmd::Init(CACFrequencyMeter *pAcFreqMeter, CAnalogInput *pAcVoltage, DMD *pDmd,
		ITimer *pTimer)
{
 80029b4:	b508      	push	{r3, lr}
	m_pAcFreqMeter = pAcFreqMeter;
 80029b6:	6141      	str	r1, [r0, #20]
	m_pAcVoltage = pAcVoltage;
 80029b8:	6182      	str	r2, [r0, #24]
	m_pDmd = pDmd;
 80029ba:	61c3      	str	r3, [r0, #28]
	m_timeout.Init(pTimer);
 80029bc:	9902      	ldr	r1, [sp, #8]
 80029be:	3004      	adds	r0, #4
 80029c0:	f000 fba3 	bl	800310a <_ZN8CTimeout4InitEP6ITimer>
 80029c4:	bd08      	pop	{r3, pc}
	...

080029c8 <_ZN13CACDisplayDmdC1Ev>:
	m_pDmd->ClearScreen(1);
	m_pDmd->DrawString(0,0,freqDisplay,strlen(freqDisplay),1);
	m_pDmd->DrawString(0,15,acVoltageDisplay,strlen(acVoltageDisplay),1);
}

CACDisplayDmd::CACDisplayDmd()
 80029c8:	b510      	push	{r4, lr}
 80029ca:	4604      	mov	r4, r0
 80029cc:	4b03      	ldr	r3, [pc, #12]	; (80029dc <_ZN13CACDisplayDmdC1Ev+0x14>)
 80029ce:	f840 3b04 	str.w	r3, [r0], #4
 80029d2:	f000 fbbf 	bl	8003154 <_ZN8CTimeoutC1Ev>
{
	// TODO Auto-generated constructor stub

}
 80029d6:	4620      	mov	r0, r4
 80029d8:	bd10      	pop	{r4, pc}
 80029da:	bf00      	nop
 80029dc:	08004350 	.word	0x08004350

080029e0 <_ZNK15CCircularBufferItLt20EE5CountEv>:
}

template<class ELEMTYPE, uint16_t BUFFSIZE>
uint16_t CCircularBuffer<ELEMTYPE,BUFFSIZE>::Count(void) const
{
	if(m_IsFull)
 80029e0:	7883      	ldrb	r3, [r0, #2]
 80029e2:	b90b      	cbnz	r3, 80029e8 <_ZNK15CCircularBufferItLt20EE5CountEv+0x8>
	{
		return m_Size;
	}
	else
	{
		return m_Head;
 80029e4:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
	}
}
 80029e6:	4770      	bx	lr
		return m_Size;
 80029e8:	8800      	ldrh	r0, [r0, #0]
 80029ea:	4770      	bx	lr

080029ec <_ZN13CACDisplayDmd7ExecuteEv>:
{
 80029ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029f0:	b08d      	sub	sp, #52	; 0x34
 80029f2:	4604      	mov	r4, r0
	if (!m_timeout.HasElapsed()) return;
 80029f4:	1d05      	adds	r5, r0, #4
 80029f6:	4628      	mov	r0, r5
 80029f8:	f000 fb98 	bl	800312c <_ZN8CTimeout10HasElapsedEv>
 80029fc:	b910      	cbnz	r0, 8002a04 <_ZN13CACDisplayDmd7ExecuteEv+0x18>
}
 80029fe:	b00d      	add	sp, #52	; 0x34
 8002a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	m_timeout.Reset();
 8002a04:	4628      	mov	r0, r5
 8002a06:	f000 fb82 	bl	800310e <_ZN8CTimeout5ResetEv>
	uint16_t freq = (uint16_t)(m_pAcFreqMeter->ReadFrequency()*100.0);
 8002a0a:	6960      	ldr	r0, [r4, #20]
 8002a0c:	f000 fb6c 	bl	80030e8 <_ZN17CACFrequencyMeter13ReadFrequencyEv>
 8002a10:	f7fd fd08 	bl	8000424 <__aeabi_f2d>
 8002a14:	2200      	movs	r2, #0
 8002a16:	4b35      	ldr	r3, [pc, #212]	; (8002aec <_ZN13CACDisplayDmd7ExecuteEv+0x100>)
 8002a18:	f7fd fd58 	bl	80004cc <__aeabi_dmul>
 8002a1c:	f7fd ff68 	bl	80008f0 <__aeabi_d2uiz>
 8002a20:	b280      	uxth	r0, r0
	uint16_t freqHigh = freq / 100;
 8002a22:	4e33      	ldr	r6, [pc, #204]	; (8002af0 <_ZN13CACDisplayDmd7ExecuteEv+0x104>)
 8002a24:	fba6 3200 	umull	r3, r2, r6, r0
 8002a28:	0952      	lsrs	r2, r2, #5
	uint16_t freqLow = freq % 100;
 8002a2a:	2764      	movs	r7, #100	; 0x64
 8002a2c:	fb07 0312 	mls	r3, r7, r2, r0
	memset(freqDisplay,0,sizeof(freqDisplay));
 8002a30:	2500      	movs	r5, #0
 8002a32:	9507      	str	r5, [sp, #28]
 8002a34:	9508      	str	r5, [sp, #32]
 8002a36:	9509      	str	r5, [sp, #36]	; 0x24
 8002a38:	950a      	str	r5, [sp, #40]	; 0x28
 8002a3a:	950b      	str	r5, [sp, #44]	; 0x2c
	sprintf(freqDisplay,"%d.%dHz",freqHigh,freqLow);
 8002a3c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8002af8 <_ZN13CACDisplayDmd7ExecuteEv+0x10c>
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	4641      	mov	r1, r8
 8002a44:	a807      	add	r0, sp, #28
 8002a46:	f001 f8c4 	bl	8003bd2 <siprintf>
	uint16_t acVoltage = (uint16_t)(m_pAcVoltage->ReadFiltered()*100);
 8002a4a:	f8d4 9018 	ldr.w	r9, [r4, #24]
	return m_pAdc->Read();
}

inline float CAnalogInput::ReadFiltered()
{
	return m_Scale * m_adcDataBuffer.Average() + m_Offset;
 8002a4e:	f8d9 a004 	ldr.w	sl, [r9, #4]
}

template<class ELEMTYPE, class SUMTYPE, uint16_t BUFFSIZE>
inline float CMovAvgBuffer<ELEMTYPE, SUMTYPE, BUFFSIZE>::Average(void) const
{
	return (float)m_Sum / (float)this->Count();
 8002a52:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
 8002a56:	f7fe f821 	bl	8000a9c <__aeabi_ui2f>
 8002a5a:	4683      	mov	fp, r0
}

template<class ELEMTYPE, class SUMTYPE, uint16_t BUFFSIZE>
inline uint16_t CMovAvgBuffer<ELEMTYPE, SUMTYPE, BUFFSIZE>::Count(void) const
{
	return m_Buffer.Count();
 8002a5c:	f109 002a 	add.w	r0, r9, #42	; 0x2a
 8002a60:	f7ff ffbe 	bl	80029e0 <_ZNK15CCircularBufferItLt20EE5CountEv>
	return (float)m_Sum / (float)this->Count();
 8002a64:	f7fe f81a 	bl	8000a9c <__aeabi_ui2f>
 8002a68:	4601      	mov	r1, r0
 8002a6a:	4658      	mov	r0, fp
 8002a6c:	f7fe f922 	bl	8000cb4 <__aeabi_fdiv>
 8002a70:	4601      	mov	r1, r0
 8002a72:	4650      	mov	r0, sl
 8002a74:	f7fe f86a 	bl	8000b4c <__aeabi_fmul>
 8002a78:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8002a7c:	f7fd ff5e 	bl	800093c <__addsf3>
 8002a80:	491c      	ldr	r1, [pc, #112]	; (8002af4 <_ZN13CACDisplayDmd7ExecuteEv+0x108>)
 8002a82:	f7fe f863 	bl	8000b4c <__aeabi_fmul>
 8002a86:	f7fe f9b1 	bl	8000dec <__aeabi_f2uiz>
 8002a8a:	b283      	uxth	r3, r0
	uint16_t acVoltageHigh = acVoltage / 100;
 8002a8c:	fba6 1203 	umull	r1, r2, r6, r3
 8002a90:	0952      	lsrs	r2, r2, #5
	uint16_t acVoltageLow = acVoltage % 100;
 8002a92:	fb07 3312 	mls	r3, r7, r2, r3
	memset(acVoltageDisplay,0,sizeof(acVoltageDisplay));
 8002a96:	9502      	str	r5, [sp, #8]
 8002a98:	9503      	str	r5, [sp, #12]
 8002a9a:	9504      	str	r5, [sp, #16]
 8002a9c:	9505      	str	r5, [sp, #20]
 8002a9e:	9506      	str	r5, [sp, #24]
	sprintf(acVoltageDisplay,"%d.%dHz",acVoltageHigh,acVoltageLow);
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	4641      	mov	r1, r8
 8002aa4:	a802      	add	r0, sp, #8
 8002aa6:	f001 f894 	bl	8003bd2 <siprintf>
	m_pDmd->ClearScreen(1);
 8002aaa:	2101      	movs	r1, #1
 8002aac:	69e0      	ldr	r0, [r4, #28]
 8002aae:	f7ff fc14 	bl	80022da <_ZN3DMD11ClearScreenEh>
	m_pDmd->DrawString(0,0,freqDisplay,strlen(freqDisplay),1);
 8002ab2:	69e7      	ldr	r7, [r4, #28]
 8002ab4:	a807      	add	r0, sp, #28
 8002ab6:	f7fd fb49 	bl	800014c <strlen>
 8002aba:	b2c0      	uxtb	r0, r0
 8002abc:	2601      	movs	r6, #1
 8002abe:	9601      	str	r6, [sp, #4]
 8002ac0:	9000      	str	r0, [sp, #0]
 8002ac2:	ab07      	add	r3, sp, #28
 8002ac4:	462a      	mov	r2, r5
 8002ac6:	4629      	mov	r1, r5
 8002ac8:	4638      	mov	r0, r7
 8002aca:	f7ff ff0d 	bl	80028e8 <_ZN3DMD10DrawStringEssPKchh>
	m_pDmd->DrawString(0,15,acVoltageDisplay,strlen(acVoltageDisplay),1);
 8002ace:	69e4      	ldr	r4, [r4, #28]
 8002ad0:	a802      	add	r0, sp, #8
 8002ad2:	f7fd fb3b 	bl	800014c <strlen>
 8002ad6:	b2c0      	uxtb	r0, r0
 8002ad8:	9601      	str	r6, [sp, #4]
 8002ada:	9000      	str	r0, [sp, #0]
 8002adc:	ab02      	add	r3, sp, #8
 8002ade:	220f      	movs	r2, #15
 8002ae0:	4629      	mov	r1, r5
 8002ae2:	4620      	mov	r0, r4
 8002ae4:	f7ff ff00 	bl	80028e8 <_ZN3DMD10DrawStringEssPKchh>
 8002ae8:	e789      	b.n	80029fe <_ZN13CACDisplayDmd7ExecuteEv+0x12>
 8002aea:	bf00      	nop
 8002aec:	40590000 	.word	0x40590000
 8002af0:	51eb851f 	.word	0x51eb851f
 8002af4:	42c80000 	.word	0x42c80000
 8002af8:	08004340 	.word	0x08004340

08002afc <_ZN13CACDisplayDmdD1Ev>:

CACDisplayDmd::~CACDisplayDmd()
 8002afc:	b510      	push	{r4, lr}
 8002afe:	4604      	mov	r4, r0
 8002b00:	4b03      	ldr	r3, [pc, #12]	; (8002b10 <_ZN13CACDisplayDmdD1Ev+0x14>)
 8002b02:	f840 3b04 	str.w	r3, [r0], #4
 8002b06:	f000 faf9 	bl	80030fc <_ZN8CTimeoutD1Ev>
{
	// TODO Auto-generated destructor stub
}
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	bd10      	pop	{r4, pc}
 8002b0e:	bf00      	nop
 8002b10:	08004350 	.word	0x08004350

08002b14 <_ZN13CACDisplayDmdD0Ev>:
CACDisplayDmd::~CACDisplayDmd()
 8002b14:	b510      	push	{r4, lr}
 8002b16:	4604      	mov	r4, r0
}
 8002b18:	f7ff fff0 	bl	8002afc <_ZN13CACDisplayDmdD1Ev>
 8002b1c:	4620      	mov	r0, r4
 8002b1e:	f001 f86f 	bl	8003c00 <_ZdlPv>
 8002b22:	4620      	mov	r0, r4
 8002b24:	bd10      	pop	{r4, pc}

08002b26 <_ZN10CHeartBeat4InitEP5IGpioP6ITimert>:
 */

#include <HeartBeat.h>

void CHeartBeat::Init(IGpio *pIo,ITimer *pTimer,uint16_t period)
{
 8002b26:	b538      	push	{r3, r4, r5, lr}
 8002b28:	461d      	mov	r5, r3
	m_pIo=pIo;
 8002b2a:	6141      	str	r1, [r0, #20]
	m_timer.Init(pTimer);
 8002b2c:	1d04      	adds	r4, r0, #4
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4620      	mov	r0, r4
 8002b32:	f000 faea 	bl	800310a <_ZN8CTimeout4InitEP6ITimer>
	m_timer.SetExpiry(period);
 8002b36:	4629      	mov	r1, r5
 8002b38:	4620      	mov	r0, r4
 8002b3a:	f000 faf2 	bl	8003122 <_ZN8CTimeout9SetExpiryEt>
 8002b3e:	bd38      	pop	{r3, r4, r5, pc}

08002b40 <_ZN10CHeartBeat7ExecuteEv>:
}

void CHeartBeat::Execute()
{
 8002b40:	b538      	push	{r3, r4, r5, lr}
 8002b42:	4604      	mov	r4, r0
	if(!m_timer.HasElapsed())
 8002b44:	1d05      	adds	r5, r0, #4
 8002b46:	4628      	mov	r0, r5
 8002b48:	f000 faf0 	bl	800312c <_ZN8CTimeout10HasElapsedEv>
 8002b4c:	b900      	cbnz	r0, 8002b50 <_ZN10CHeartBeat7ExecuteEv+0x10>
 8002b4e:	bd38      	pop	{r3, r4, r5, pc}
		return;
	m_timer.Reset();
 8002b50:	4628      	mov	r0, r5
 8002b52:	f000 fadc 	bl	800310e <_ZN8CTimeout5ResetEv>
	m_pIo->Toggle();
 8002b56:	6964      	ldr	r4, [r4, #20]
	virtual void Set() = 0;
	virtual void Clear() = 0;
	virtual bool Get() const = 0;
	void Toggle()
	{
		if (Get()) Clear();
 8002b58:	6823      	ldr	r3, [r4, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	4620      	mov	r0, r4
 8002b5e:	4798      	blx	r3
 8002b60:	b920      	cbnz	r0, 8002b6c <_ZN10CHeartBeat7ExecuteEv+0x2c>
		else Set();
 8002b62:	6823      	ldr	r3, [r4, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4620      	mov	r0, r4
 8002b68:	4798      	blx	r3
 8002b6a:	e7f0      	b.n	8002b4e <_ZN10CHeartBeat7ExecuteEv+0xe>
		if (Get()) Clear();
 8002b6c:	6823      	ldr	r3, [r4, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	4620      	mov	r0, r4
 8002b72:	4798      	blx	r3
 8002b74:	bd38      	pop	{r3, r4, r5, pc}
	...

08002b78 <_ZN10CHeartBeatC1Ev>:

}

CHeartBeat::CHeartBeat()
 8002b78:	b510      	push	{r4, lr}
 8002b7a:	4604      	mov	r4, r0
 8002b7c:	4b03      	ldr	r3, [pc, #12]	; (8002b8c <_ZN10CHeartBeatC1Ev+0x14>)
 8002b7e:	f840 3b04 	str.w	r3, [r0], #4
 8002b82:	f000 fae7 	bl	8003154 <_ZN8CTimeoutC1Ev>
{
	// TODO Auto-generated constructor stub

}
 8002b86:	4620      	mov	r0, r4
 8002b88:	bd10      	pop	{r4, pc}
 8002b8a:	bf00      	nop
 8002b8c:	08004360 	.word	0x08004360

08002b90 <_ZN10CHeartBeatD1Ev>:

CHeartBeat::~CHeartBeat()
 8002b90:	b510      	push	{r4, lr}
 8002b92:	4604      	mov	r4, r0
 8002b94:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <_ZN10CHeartBeatD1Ev+0x14>)
 8002b96:	f840 3b04 	str.w	r3, [r0], #4
 8002b9a:	f000 faaf 	bl	80030fc <_ZN8CTimeoutD1Ev>
{
	// TODO Auto-generated destructor stub
}
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	bd10      	pop	{r4, pc}
 8002ba2:	bf00      	nop
 8002ba4:	08004360 	.word	0x08004360

08002ba8 <_ZN10CHeartBeatD0Ev>:
CHeartBeat::~CHeartBeat()
 8002ba8:	b510      	push	{r4, lr}
 8002baa:	4604      	mov	r4, r0
}
 8002bac:	f7ff fff0 	bl	8002b90 <_ZN10CHeartBeatD1Ev>
 8002bb0:	4620      	mov	r0, r4
 8002bb2:	f001 f825 	bl	8003c00 <_ZdlPv>
 8002bb6:	4620      	mov	r0, r4
 8002bb8:	bd10      	pop	{r4, pc}

08002bba <_ZN13CSTM32F10xADC4ReadEv>:
	m_pAdcBuffer = pAdcBuffer;
}

uint16_t CSTM32F10xADC::Read()
{
	return *m_pAdcBuffer;
 8002bba:	6843      	ldr	r3, [r0, #4]
}
 8002bbc:	8818      	ldrh	r0, [r3, #0]
 8002bbe:	4770      	bx	lr

08002bc0 <_ZN13CSTM32F10xADCD1Ev>:
}

CSTM32F10xADC::~CSTM32F10xADC()
{
	// TODO Auto-generated destructor stub
}
 8002bc0:	4770      	bx	lr

08002bc2 <_ZN13CSTM32F10xADCD0Ev>:
CSTM32F10xADC::~CSTM32F10xADC()
 8002bc2:	b510      	push	{r4, lr}
 8002bc4:	4604      	mov	r4, r0
}
 8002bc6:	f001 f81b 	bl	8003c00 <_ZdlPv>
 8002bca:	4620      	mov	r0, r4
 8002bcc:	bd10      	pop	{r4, pc}

08002bce <_ZN13CSTM32F10xADC4InitEPt>:
	m_pAdcBuffer = pAdcBuffer;
 8002bce:	6041      	str	r1, [r0, #4]
 8002bd0:	4770      	bx	lr
	...

08002bd4 <_ZN13CSTM32F10xADCC1Ev>:
CSTM32F10xADC::CSTM32F10xADC()
 8002bd4:	4b01      	ldr	r3, [pc, #4]	; (8002bdc <_ZN13CSTM32F10xADCC1Ev+0x8>)
 8002bd6:	6003      	str	r3, [r0, #0]
}
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	08004370 	.word	0x08004370

08002be0 <_ZN13CSTM32F10xDMAD1Ev>:
}

CSTM32F10xDMA::~CSTM32F10xDMA()
{
	// TODO Auto-generated destructor stub
}
 8002be0:	4770      	bx	lr

08002be2 <_ZN13CSTM32F10xDMA12SetDirectionEm>:
{
 8002be2:	b508      	push	{r3, lr}
	m_DmaStruct.DMA_DIR = direction;
 8002be4:	6141      	str	r1, [r0, #20]
	DMA_Init(m_pDmaChannel, &m_DmaStruct);
 8002be6:	f100 010c 	add.w	r1, r0, #12
 8002bea:	6880      	ldr	r0, [r0, #8]
 8002bec:	f7fe fab4 	bl	8001158 <DMA_Init>
 8002bf0:	bd08      	pop	{r3, pc}

08002bf2 <_ZN13CSTM32F10xDMA10SetAddressEmm>:
{
 8002bf2:	b508      	push	{r3, lr}
	m_DmaStruct.DMA_PeripheralBaseAddr = per;
 8002bf4:	60c1      	str	r1, [r0, #12]
	m_DmaStruct.DMA_MemoryBaseAddr = mem;
 8002bf6:	6102      	str	r2, [r0, #16]
	DMA_Init(m_pDmaChannel, &m_DmaStruct);
 8002bf8:	f100 010c 	add.w	r1, r0, #12
 8002bfc:	6880      	ldr	r0, [r0, #8]
 8002bfe:	f7fe faab 	bl	8001158 <DMA_Init>
 8002c02:	bd08      	pop	{r3, pc}

08002c04 <_ZN13CSTM32F10xDMA13SetBufferSizeEt>:
{
 8002c04:	b508      	push	{r3, lr}
	m_DmaStruct.DMA_BufferSize = size;
 8002c06:	6181      	str	r1, [r0, #24]
	DMA_Init(m_pDmaChannel, &m_DmaStruct);
 8002c08:	f100 010c 	add.w	r1, r0, #12
 8002c0c:	6880      	ldr	r0, [r0, #8]
 8002c0e:	f7fe faa3 	bl	8001158 <DMA_Init>
 8002c12:	bd08      	pop	{r3, pc}

08002c14 <_ZN13CSTM32F10xDMA5StartEv>:
{
 8002c14:	b508      	push	{r3, lr}
	DMA_Cmd(m_pDmaChannel,ENABLE);
 8002c16:	2101      	movs	r1, #1
 8002c18:	6880      	ldr	r0, [r0, #8]
 8002c1a:	f7fe fb05 	bl	8001228 <DMA_Cmd>
 8002c1e:	bd08      	pop	{r3, pc}

08002c20 <_ZN13CSTM32F10xDMA4StopEv>:
{
 8002c20:	b508      	push	{r3, lr}
	DMA_Cmd(m_pDmaChannel,DISABLE);
 8002c22:	2100      	movs	r1, #0
 8002c24:	6880      	ldr	r0, [r0, #8]
 8002c26:	f7fe faff 	bl	8001228 <DMA_Cmd>
 8002c2a:	bd08      	pop	{r3, pc}

08002c2c <_ZN13CSTM32F10xDMA12GetDataIndexEv>:
{
 8002c2c:	b510      	push	{r4, lr}
	return m_DmaStruct.DMA_BufferSize - DMA_GetCurrDataCounter(m_pDmaChannel);
 8002c2e:	8b04      	ldrh	r4, [r0, #24]
 8002c30:	6880      	ldr	r0, [r0, #8]
 8002c32:	f7fe fb15 	bl	8001260 <DMA_GetCurrDataCounter>
 8002c36:	1a20      	subs	r0, r4, r0
}
 8002c38:	b280      	uxth	r0, r0
 8002c3a:	bd10      	pop	{r4, pc}

08002c3c <_ZN13CSTM32F10xDMA18IsTransferFinishedEv>:
{
 8002c3c:	b510      	push	{r4, lr}
 8002c3e:	4604      	mov	r4, r0
	if(DMA_GetFlagStatus(m_DmaTCflagMask))
 8002c40:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002c42:	f7fe fb19 	bl	8001278 <DMA_GetFlagStatus>
 8002c46:	b908      	cbnz	r0, 8002c4c <_ZN13CSTM32F10xDMA18IsTransferFinishedEv+0x10>
	return false;
 8002c48:	2000      	movs	r0, #0
}
 8002c4a:	bd10      	pop	{r4, pc}
		DMA_ClearFlag(m_DmaTCflagMask);
 8002c4c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002c4e:	f7fe fb3b 	bl	80012c8 <DMA_ClearFlag>
		return true;
 8002c52:	2001      	movs	r0, #1
 8002c54:	bd10      	pop	{r4, pc}

08002c56 <_ZN13CSTM32F10xDMAD0Ev>:
CSTM32F10xDMA::~CSTM32F10xDMA()
 8002c56:	b510      	push	{r4, lr}
 8002c58:	4604      	mov	r4, r0
}
 8002c5a:	f000 ffd1 	bl	8003c00 <_ZdlPv>
 8002c5e:	4620      	mov	r0, r4
 8002c60:	bd10      	pop	{r4, pc}
	...

08002c64 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm>:
{
 8002c64:	b510      	push	{r4, lr}
 8002c66:	4604      	mov	r4, r0
	m_pDma = dma;
 8002c68:	6041      	str	r1, [r0, #4]
	m_pDmaChannel = pDmaChannel;
 8002c6a:	6082      	str	r2, [r0, #8]
	m_DmaStruct.DMA_Mode = mode;
 8002c6c:	62c3      	str	r3, [r0, #44]	; 0x2c
	m_DmaStruct.DMA_Priority = priority;
 8002c6e:	9b02      	ldr	r3, [sp, #8]
 8002c70:	6303      	str	r3, [r0, #48]	; 0x30
	m_DmaStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8002c72:	2300      	movs	r3, #0
 8002c74:	6283      	str	r3, [r0, #40]	; 0x28
	m_DmaStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8002c76:	6243      	str	r3, [r0, #36]	; 0x24
	m_DmaStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8002c78:	2380      	movs	r3, #128	; 0x80
 8002c7a:	6203      	str	r3, [r0, #32]
	DMA_Init(m_pDmaChannel, &m_DmaStruct);
 8002c7c:	f100 010c 	add.w	r1, r0, #12
 8002c80:	4610      	mov	r0, r2
 8002c82:	f7fe fa69 	bl	8001158 <DMA_Init>
	if(m_pDmaChannel ==  DMA1_Channel1)m_DmaTCflagMask = DMA1_IT_TC1;
 8002c86:	68a3      	ldr	r3, [r4, #8]
 8002c88:	4a26      	ldr	r2, [pc, #152]	; (8002d24 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xc0>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d021      	beq.n	8002cd2 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x6e>
	else if(m_pDmaChannel ==  DMA1_Channel2)m_DmaTCflagMask = DMA1_IT_TC2;
 8002c8e:	4a26      	ldr	r2, [pc, #152]	; (8002d28 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xc4>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d021      	beq.n	8002cd8 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x74>
	else if(m_pDmaChannel ==  DMA1_Channel3)m_DmaTCflagMask = DMA1_IT_TC3;
 8002c94:	4a25      	ldr	r2, [pc, #148]	; (8002d2c <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xc8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d021      	beq.n	8002cde <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x7a>
	else if(m_pDmaChannel ==  DMA1_Channel4)m_DmaTCflagMask = DMA1_IT_TC4;
 8002c9a:	4a25      	ldr	r2, [pc, #148]	; (8002d30 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xcc>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d022      	beq.n	8002ce6 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x82>
	else if(m_pDmaChannel ==  DMA1_Channel5)m_DmaTCflagMask = DMA1_IT_TC5;
 8002ca0:	4a24      	ldr	r2, [pc, #144]	; (8002d34 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xd0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d023      	beq.n	8002cee <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x8a>
	else if(m_pDmaChannel ==  DMA1_Channel6)m_DmaTCflagMask = DMA1_IT_TC6;
 8002ca6:	4a24      	ldr	r2, [pc, #144]	; (8002d38 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xd4>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d024      	beq.n	8002cf6 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x92>
	else if(m_pDmaChannel ==  DMA1_Channel7)m_DmaTCflagMask = DMA1_IT_TC7;
 8002cac:	4a23      	ldr	r2, [pc, #140]	; (8002d3c <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xd8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d025      	beq.n	8002cfe <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x9a>
	else if(m_pDmaChannel ==  DMA2_Channel1)m_DmaTCflagMask = DMA2_IT_TC1;
 8002cb2:	4a23      	ldr	r2, [pc, #140]	; (8002d40 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xdc>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d026      	beq.n	8002d06 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xa2>
	else if(m_pDmaChannel ==  DMA2_Channel2)m_DmaTCflagMask = DMA2_IT_TC2;
 8002cb8:	4a22      	ldr	r2, [pc, #136]	; (8002d44 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xe0>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d026      	beq.n	8002d0c <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xa8>
	else if(m_pDmaChannel ==  DMA2_Channel3)m_DmaTCflagMask = DMA2_IT_TC3;
 8002cbe:	4a22      	ldr	r2, [pc, #136]	; (8002d48 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xe4>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d026      	beq.n	8002d12 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xae>
	else if(m_pDmaChannel ==  DMA2_Channel4)m_DmaTCflagMask = DMA2_IT_TC4;
 8002cc4:	4a21      	ldr	r2, [pc, #132]	; (8002d4c <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xe8>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d026      	beq.n	8002d18 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xb4>
	else if(m_pDmaChannel ==  DMA2_Channel5)m_DmaTCflagMask = DMA2_IT_TC5;
 8002cca:	4a21      	ldr	r2, [pc, #132]	; (8002d50 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xec>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d026      	beq.n	8002d1e <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xba>
 8002cd0:	bd10      	pop	{r4, pc}
	if(m_pDmaChannel ==  DMA1_Channel1)m_DmaTCflagMask = DMA1_IT_TC1;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	63a3      	str	r3, [r4, #56]	; 0x38
 8002cd6:	bd10      	pop	{r4, pc}
	else if(m_pDmaChannel ==  DMA1_Channel2)m_DmaTCflagMask = DMA1_IT_TC2;
 8002cd8:	2320      	movs	r3, #32
 8002cda:	63a3      	str	r3, [r4, #56]	; 0x38
 8002cdc:	bd10      	pop	{r4, pc}
	else if(m_pDmaChannel ==  DMA1_Channel3)m_DmaTCflagMask = DMA1_IT_TC3;
 8002cde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ce2:	63a3      	str	r3, [r4, #56]	; 0x38
 8002ce4:	bd10      	pop	{r4, pc}
	else if(m_pDmaChannel ==  DMA1_Channel4)m_DmaTCflagMask = DMA1_IT_TC4;
 8002ce6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cea:	63a3      	str	r3, [r4, #56]	; 0x38
 8002cec:	bd10      	pop	{r4, pc}
	else if(m_pDmaChannel ==  DMA1_Channel5)m_DmaTCflagMask = DMA1_IT_TC5;
 8002cee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cf2:	63a3      	str	r3, [r4, #56]	; 0x38
 8002cf4:	bd10      	pop	{r4, pc}
	else if(m_pDmaChannel ==  DMA1_Channel6)m_DmaTCflagMask = DMA1_IT_TC6;
 8002cf6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cfa:	63a3      	str	r3, [r4, #56]	; 0x38
 8002cfc:	bd10      	pop	{r4, pc}
	else if(m_pDmaChannel ==  DMA1_Channel7)m_DmaTCflagMask = DMA1_IT_TC7;
 8002cfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d02:	63a3      	str	r3, [r4, #56]	; 0x38
 8002d04:	bd10      	pop	{r4, pc}
	else if(m_pDmaChannel ==  DMA2_Channel1)m_DmaTCflagMask = DMA2_IT_TC1;
 8002d06:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xf0>)
 8002d08:	63a3      	str	r3, [r4, #56]	; 0x38
 8002d0a:	bd10      	pop	{r4, pc}
	else if(m_pDmaChannel ==  DMA2_Channel2)m_DmaTCflagMask = DMA2_IT_TC2;
 8002d0c:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xf4>)
 8002d0e:	63a3      	str	r3, [r4, #56]	; 0x38
 8002d10:	bd10      	pop	{r4, pc}
	else if(m_pDmaChannel ==  DMA2_Channel3)m_DmaTCflagMask = DMA2_IT_TC3;
 8002d12:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xf8>)
 8002d14:	63a3      	str	r3, [r4, #56]	; 0x38
 8002d16:	bd10      	pop	{r4, pc}
	else if(m_pDmaChannel ==  DMA2_Channel4)m_DmaTCflagMask = DMA2_IT_TC4;
 8002d18:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xfc>)
 8002d1a:	63a3      	str	r3, [r4, #56]	; 0x38
 8002d1c:	bd10      	pop	{r4, pc}
	else if(m_pDmaChannel ==  DMA2_Channel5)m_DmaTCflagMask = DMA2_IT_TC5;
 8002d1e:	4b11      	ldr	r3, [pc, #68]	; (8002d64 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x100>)
 8002d20:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8002d22:	e7d5      	b.n	8002cd0 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x6c>
 8002d24:	40020008 	.word	0x40020008
 8002d28:	4002001c 	.word	0x4002001c
 8002d2c:	40020030 	.word	0x40020030
 8002d30:	40020044 	.word	0x40020044
 8002d34:	40020058 	.word	0x40020058
 8002d38:	4002006c 	.word	0x4002006c
 8002d3c:	40020080 	.word	0x40020080
 8002d40:	40020408 	.word	0x40020408
 8002d44:	4002041c 	.word	0x4002041c
 8002d48:	40020430 	.word	0x40020430
 8002d4c:	40020444 	.word	0x40020444
 8002d50:	40020458 	.word	0x40020458
 8002d54:	10000002 	.word	0x10000002
 8002d58:	10000020 	.word	0x10000020
 8002d5c:	10000200 	.word	0x10000200
 8002d60:	10002000 	.word	0x10002000
 8002d64:	10020000 	.word	0x10020000

08002d68 <_ZN13CSTM32F10xDMAC1Ev>:
CSTM32F10xDMA::CSTM32F10xDMA()
 8002d68:	b510      	push	{r4, lr}
 8002d6a:	4604      	mov	r4, r0
 8002d6c:	4b04      	ldr	r3, [pc, #16]	; (8002d80 <_ZN13CSTM32F10xDMAC1Ev+0x18>)
 8002d6e:	f840 3b0c 	str.w	r3, [r0], #12
	DMA_StructInit(&m_DmaStruct);
 8002d72:	f7fe fa2f 	bl	80011d4 <DMA_StructInit>
	m_pDma = NULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	6063      	str	r3, [r4, #4]
}
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	bd10      	pop	{r4, pc}
 8002d7e:	bf00      	nop
 8002d80:	08004384 	.word	0x08004384

08002d84 <_ZN14CSTM32F10xGpio3SetEv>:

#include <STM32F10xGpio.h>

void CSTM32F10xGpio::Set()
{
	m_pGpio->BSRR |= m_bitMask;
 8002d84:	6842      	ldr	r2, [r0, #4]
 8002d86:	6913      	ldr	r3, [r2, #16]
 8002d88:	6881      	ldr	r1, [r0, #8]
 8002d8a:	430b      	orrs	r3, r1
 8002d8c:	6113      	str	r3, [r2, #16]
 8002d8e:	4770      	bx	lr

08002d90 <_ZN14CSTM32F10xGpio5ClearEv>:
}

void CSTM32F10xGpio::Clear()
{
	m_pGpio->BSRR |= m_clearBitMask;
 8002d90:	6842      	ldr	r2, [r0, #4]
 8002d92:	6913      	ldr	r3, [r2, #16]
 8002d94:	68c1      	ldr	r1, [r0, #12]
 8002d96:	430b      	orrs	r3, r1
 8002d98:	6113      	str	r3, [r2, #16]
 8002d9a:	4770      	bx	lr

08002d9c <_ZNK14CSTM32F10xGpio3GetEv>:
}

bool CSTM32F10xGpio::Get() const
{
	return m_pGpio->IDR & m_bitMask;
 8002d9c:	6843      	ldr	r3, [r0, #4]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	6883      	ldr	r3, [r0, #8]
 8002da2:	421a      	tst	r2, r3
}
 8002da4:	bf14      	ite	ne
 8002da6:	2001      	movne	r0, #1
 8002da8:	2000      	moveq	r0, #0
 8002daa:	4770      	bx	lr

08002dac <_ZN14CSTM32F10xGpioD1Ev>:
}

CSTM32F10xGpio::~CSTM32F10xGpio()
{
	// TODO Auto-generated destructor stub
}
 8002dac:	4770      	bx	lr

08002dae <_ZN14CSTM32F10xGpioD0Ev>:
CSTM32F10xGpio::~CSTM32F10xGpio()
 8002dae:	b510      	push	{r4, lr}
 8002db0:	4604      	mov	r4, r0
}
 8002db2:	f000 ff25 	bl	8003c00 <_ZdlPv>
 8002db6:	4620      	mov	r0, r4
 8002db8:	bd10      	pop	{r4, pc}

08002dba <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh>:
	if (pinNumber > 15) return;
 8002dba:	2a0f      	cmp	r2, #15
 8002dbc:	dc08      	bgt.n	8002dd0 <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh+0x16>
	m_pGpio = pGpio;
 8002dbe:	6041      	str	r1, [r0, #4]
	m_bitMask = 1 << pinNumber;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	fa03 f102 	lsl.w	r1, r3, r2
 8002dc6:	6081      	str	r1, [r0, #8]
	m_clearBitMask = 1 << (pinNumber + 16);
 8002dc8:	3210      	adds	r2, #16
 8002dca:	fa03 f202 	lsl.w	r2, r3, r2
 8002dce:	60c2      	str	r2, [r0, #12]
 8002dd0:	4770      	bx	lr
	...

08002dd4 <_ZN14CSTM32F10xGpioC1Ev>:
CSTM32F10xGpio::CSTM32F10xGpio()
 8002dd4:	4a02      	ldr	r2, [pc, #8]	; (8002de0 <_ZN14CSTM32F10xGpioC1Ev+0xc>)
 8002dd6:	6002      	str	r2, [r0, #0]
	m_pGpio = NULL;
 8002dd8:	2200      	movs	r2, #0
 8002dda:	6042      	str	r2, [r0, #4]
	m_bitMask = 0;
 8002ddc:	6082      	str	r2, [r0, #8]
}
 8002dde:	4770      	bx	lr
 8002de0:	080043b0 	.word	0x080043b0

08002de4 <_ZN22CSTM32F10xInputCaptureD1Ev>:
}

CSTM32F10xInputCapture::~CSTM32F10xInputCapture()
{
	// TODO Auto-generated destructor stub
}
 8002de4:	4770      	bx	lr

08002de6 <_ZNK22CSTM32F10xInputCapture4ReadEv>:
{
 8002de6:	b508      	push	{r3, lr}
	switch (m_Channel)
 8002de8:	8903      	ldrh	r3, [r0, #8]
 8002dea:	2b0c      	cmp	r3, #12
 8002dec:	d818      	bhi.n	8002e20 <_ZNK22CSTM32F10xInputCapture4ReadEv+0x3a>
 8002dee:	e8df f003 	tbb	[pc, r3]
 8002df2:	1707      	.short	0x1707
 8002df4:	170b1717 	.word	0x170b1717
 8002df8:	170f1717 	.word	0x170f1717
 8002dfc:	1717      	.short	0x1717
 8002dfe:	13          	.byte	0x13
 8002dff:	00          	.byte	0x00
			return TIM_GetCapture1(m_pTim);
 8002e00:	6840      	ldr	r0, [r0, #4]
 8002e02:	f7fe feab 	bl	8001b5c <TIM_GetCapture1>
 8002e06:	bd08      	pop	{r3, pc}
			return TIM_GetCapture2(m_pTim);
 8002e08:	6840      	ldr	r0, [r0, #4]
 8002e0a:	f7fe feb3 	bl	8001b74 <TIM_GetCapture2>
 8002e0e:	bd08      	pop	{r3, pc}
			return TIM_GetCapture3(m_pTim);
 8002e10:	6840      	ldr	r0, [r0, #4]
 8002e12:	f7fe febb 	bl	8001b8c <TIM_GetCapture3>
 8002e16:	bd08      	pop	{r3, pc}
			return TIM_GetCapture4(m_pTim);
 8002e18:	6840      	ldr	r0, [r0, #4]
 8002e1a:	f7fe fec3 	bl	8001ba4 <TIM_GetCapture4>
 8002e1e:	bd08      	pop	{r3, pc}
	return false;
 8002e20:	2000      	movs	r0, #0
}
 8002e22:	bd08      	pop	{r3, pc}

08002e24 <_ZNK22CSTM32F10xInputCapture11IsTriggeredEv>:
{
 8002e24:	b508      	push	{r3, lr}
	switch (m_Channel)
 8002e26:	8903      	ldrh	r3, [r0, #8]
 8002e28:	2b0c      	cmp	r3, #12
 8002e2a:	d828      	bhi.n	8002e7e <_ZNK22CSTM32F10xInputCapture11IsTriggeredEv+0x5a>
 8002e2c:	e8df f003 	tbb	[pc, r3]
 8002e30:	27272707 	.word	0x27272707
 8002e34:	2727270f 	.word	0x2727270f
 8002e38:	27272717 	.word	0x27272717
 8002e3c:	1f          	.byte	0x1f
 8002e3d:	00          	.byte	0x00
			return TIM_GetFlagStatus(m_pTim, TIM_FLAG_CC1);
 8002e3e:	2102      	movs	r1, #2
 8002e40:	6840      	ldr	r0, [r0, #4]
 8002e42:	f7fe febc 	bl	8001bbe <TIM_GetFlagStatus>
 8002e46:	3000      	adds	r0, #0
 8002e48:	bf18      	it	ne
 8002e4a:	2001      	movne	r0, #1
 8002e4c:	bd08      	pop	{r3, pc}
			return TIM_GetFlagStatus(m_pTim, TIM_FLAG_CC2);
 8002e4e:	2104      	movs	r1, #4
 8002e50:	6840      	ldr	r0, [r0, #4]
 8002e52:	f7fe feb4 	bl	8001bbe <TIM_GetFlagStatus>
 8002e56:	3000      	adds	r0, #0
 8002e58:	bf18      	it	ne
 8002e5a:	2001      	movne	r0, #1
 8002e5c:	bd08      	pop	{r3, pc}
			return TIM_GetFlagStatus(m_pTim, TIM_FLAG_CC3);
 8002e5e:	2108      	movs	r1, #8
 8002e60:	6840      	ldr	r0, [r0, #4]
 8002e62:	f7fe feac 	bl	8001bbe <TIM_GetFlagStatus>
 8002e66:	3000      	adds	r0, #0
 8002e68:	bf18      	it	ne
 8002e6a:	2001      	movne	r0, #1
 8002e6c:	bd08      	pop	{r3, pc}
			return TIM_GetFlagStatus(m_pTim, TIM_FLAG_CC4);
 8002e6e:	2110      	movs	r1, #16
 8002e70:	6840      	ldr	r0, [r0, #4]
 8002e72:	f7fe fea4 	bl	8001bbe <TIM_GetFlagStatus>
 8002e76:	3000      	adds	r0, #0
 8002e78:	bf18      	it	ne
 8002e7a:	2001      	movne	r0, #1
 8002e7c:	bd08      	pop	{r3, pc}
	return false;
 8002e7e:	2000      	movs	r0, #0
}
 8002e80:	bd08      	pop	{r3, pc}

08002e82 <_ZN22CSTM32F10xInputCaptureD0Ev>:
CSTM32F10xInputCapture::~CSTM32F10xInputCapture()
 8002e82:	b510      	push	{r4, lr}
 8002e84:	4604      	mov	r4, r0
}
 8002e86:	f000 febb 	bl	8003c00 <_ZdlPv>
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	bd10      	pop	{r4, pc}

08002e8e <_ZN22CSTM32F10xInputCapture4InitEP11TIM_TypeDeft>:
	m_pTim = pTim;
 8002e8e:	6041      	str	r1, [r0, #4]
	m_Channel = channel;
 8002e90:	8102      	strh	r2, [r0, #8]
 8002e92:	4770      	bx	lr

08002e94 <_ZN22CSTM32F10xInputCaptureC1Ev>:
CSTM32F10xInputCapture::CSTM32F10xInputCapture()
 8002e94:	4b01      	ldr	r3, [pc, #4]	; (8002e9c <_ZN22CSTM32F10xInputCaptureC1Ev+0x8>)
 8002e96:	6003      	str	r3, [r0, #0]
}
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	080043cc 	.word	0x080043cc

08002ea0 <_ZNK15CSTM32F10xTimer12CurrentTicksEv>:
	m_pTimer=pTimer;
}

uint16_t CSTM32F10xTimer::CurrentTicks() const
{
	return m_pTimer->CNT;
 8002ea0:	6843      	ldr	r3, [r0, #4]
 8002ea2:	8c98      	ldrh	r0, [r3, #36]	; 0x24
}
 8002ea4:	b280      	uxth	r0, r0
 8002ea6:	4770      	bx	lr

08002ea8 <_ZN15CSTM32F10xTimerD1Ev>:
}

CSTM32F10xTimer::~CSTM32F10xTimer()
{
	// TODO Auto-generated destructor stub
}
 8002ea8:	4770      	bx	lr

08002eaa <_ZN15CSTM32F10xTimerD0Ev>:
CSTM32F10xTimer::~CSTM32F10xTimer()
 8002eaa:	b510      	push	{r4, lr}
 8002eac:	4604      	mov	r4, r0
}
 8002eae:	f000 fea7 	bl	8003c00 <_ZdlPv>
 8002eb2:	4620      	mov	r0, r4
 8002eb4:	bd10      	pop	{r4, pc}

08002eb6 <_ZN15CSTM32F10xTimer4InitEP11TIM_TypeDef>:
	m_pTimer=pTimer;
 8002eb6:	6041      	str	r1, [r0, #4]
 8002eb8:	4770      	bx	lr
	...

08002ebc <_ZN15CSTM32F10xTimerC1Ev>:
CSTM32F10xTimer::CSTM32F10xTimer()
 8002ebc:	4b01      	ldr	r3, [pc, #4]	; (8002ec4 <_ZN15CSTM32F10xTimerC1Ev+0x8>)
 8002ebe:	6003      	str	r3, [r0, #0]
}
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	080043e4 	.word	0x080043e4

08002ec8 <_ZN15CSTM32F10xUSART4ReadEPhPt>:
bool CSTM32F10xUSART::Read(unsigned char* pData, uint16_t* pLength)
{
//	for(uint16_t i=0;i<)
//	pData
	return false;
}
 8002ec8:	2000      	movs	r0, #0
 8002eca:	4770      	bx	lr

08002ecc <_ZN15CSTM32F10xUSARTD1Ev>:
}

CSTM32F10xUSART::~CSTM32F10xUSART()
{
	// TODO Auto-generated destructor stub
}
 8002ecc:	4770      	bx	lr

08002ece <_ZN13CCircularFifoIcLj322EED1Ev>:
	{
		Capacity = Size + 1
	};

	CCircularFifo() : m_Tail(0), m_Head(0) {}
	virtual ~CCircularFifo() {}
 8002ece:	4770      	bx	lr

08002ed0 <_ZN13CCircularFifoIcLj322EED0Ev>:
 8002ed0:	b510      	push	{r4, lr}
 8002ed2:	4604      	mov	r4, r0
 8002ed4:	f000 fe94 	bl	8003c00 <_ZdlPv>
 8002ed8:	4620      	mov	r0, r4
 8002eda:	bd10      	pop	{r4, pc}

08002edc <_ZN15CSTM32F10xUSARTD0Ev>:
CSTM32F10xUSART::~CSTM32F10xUSART()
 8002edc:	b510      	push	{r4, lr}
 8002ede:	4604      	mov	r4, r0
}
 8002ee0:	f000 fe8e 	bl	8003c00 <_ZdlPv>
 8002ee4:	4620      	mov	r0, r4
 8002ee6:	bd10      	pop	{r4, pc}

08002ee8 <_ZN15CSTM32F10xUSART4InitEP13USART_TypeDef>:
	m_pUsart = pUsart;
 8002ee8:	6041      	str	r1, [r0, #4]
 8002eea:	4770      	bx	lr

08002eec <_ZN15CSTM32F10xUSARTC1Ev>:
CSTM32F10xUSART::CSTM32F10xUSART()
 8002eec:	4a07      	ldr	r2, [pc, #28]	; (8002f0c <_ZN15CSTM32F10xUSARTC1Ev+0x20>)
 8002eee:	6002      	str	r2, [r0, #0]
	CCircularFifo() : m_Tail(0), m_Head(0) {}
 8002ef0:	4907      	ldr	r1, [pc, #28]	; (8002f10 <_ZN15CSTM32F10xUSARTC1Ev+0x24>)
 8002ef2:	6081      	str	r1, [r0, #8]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	60c2      	str	r2, [r0, #12]
 8002ef8:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
 8002efc:	f8c0 1158 	str.w	r1, [r0, #344]	; 0x158
 8002f00:	f8c0 215c 	str.w	r2, [r0, #348]	; 0x15c
 8002f04:	f8c0 22a4 	str.w	r2, [r0, #676]	; 0x2a4
}
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	08004408 	.word	0x08004408
 8002f10:	080043f8 	.word	0x080043f8

08002f14 <_ZNK13CCircularFifoIcLj322EE7IsEmptyEv>:
 *
 * \return true if circular buffer is empty */
template<typename Element, unsigned int Size>
bool CCircularFifo<Element, Size>::IsEmpty() const
{
	return (m_Head == m_Tail);
 8002f14:	f8d0 214c 	ldr.w	r2, [r0, #332]	; 0x14c
 8002f18:	6840      	ldr	r0, [r0, #4]
}
 8002f1a:	4282      	cmp	r2, r0
 8002f1c:	bf14      	ite	ne
 8002f1e:	2000      	movne	r0, #0
 8002f20:	2001      	moveq	r0, #1
 8002f22:	4770      	bx	lr

08002f24 <_ZN15CSTM32F10xUSART7HasDataEv>:
{
 8002f24:	b508      	push	{r3, lr}
	return !m_RxBuffer.IsEmpty();
 8002f26:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 8002f2a:	f7ff fff3 	bl	8002f14 <_ZNK13CCircularFifoIcLj322EE7IsEmptyEv>
 8002f2e:	f080 0001 	eor.w	r0, r0, #1
}
 8002f32:	b2c0      	uxtb	r0, r0
 8002f34:	bd08      	pop	{r3, pc}
	...

08002f38 <_ZNK13CCircularFifoIcLj322EE9incrementEj>:
	//    index++;
	//    if(index == array.lenght) -> index = 0;
	//
	//or as written below:
	//    index = (index+1) % array.length
	idx_ = (idx_ + 1) % Capacity;
 8002f38:	3101      	adds	r1, #1
 8002f3a:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <_ZNK13CCircularFifoIcLj322EE9incrementEj+0x1c>)
 8002f3c:	fba3 2301 	umull	r2, r3, r3, r1
 8002f40:	1ac8      	subs	r0, r1, r3
 8002f42:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8002f46:	0a1b      	lsrs	r3, r3, #8
	return idx_;
}
 8002f48:	f240 1043 	movw	r0, #323	; 0x143
 8002f4c:	fb00 1013 	mls	r0, r0, r3, r1
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	95cbb0bf 	.word	0x95cbb0bf

08002f58 <_ZN13CCircularFifoIcLj322EE4PushERc>:
bool CCircularFifo<Element, Size>::Push(Element& item_)
 8002f58:	b538      	push	{r3, r4, r5, lr}
 8002f5a:	4604      	mov	r4, r0
 8002f5c:	460d      	mov	r5, r1
	unsigned int nextTail = increment(m_Tail);
 8002f5e:	6841      	ldr	r1, [r0, #4]
 8002f60:	f7ff ffea 	bl	8002f38 <_ZNK13CCircularFifoIcLj322EE9incrementEj>
	if (nextTail != m_Head)
 8002f64:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
 8002f68:	4298      	cmp	r0, r3
 8002f6a:	d006      	beq.n	8002f7a <_ZN13CCircularFifoIcLj322EE4PushERc+0x22>
		m_Array[m_Tail] = item_;
 8002f6c:	6863      	ldr	r3, [r4, #4]
 8002f6e:	782a      	ldrb	r2, [r5, #0]
 8002f70:	4423      	add	r3, r4
 8002f72:	721a      	strb	r2, [r3, #8]
		m_Tail = nextTail;
 8002f74:	6060      	str	r0, [r4, #4]
		return true;
 8002f76:	2001      	movs	r0, #1
 8002f78:	bd38      	pop	{r3, r4, r5, pc}
	return false;
 8002f7a:	2000      	movs	r0, #0
}
 8002f7c:	bd38      	pop	{r3, r4, r5, pc}

08002f7e <_ZN15CSTM32F10xUSART5WriteEPKct>:
{
 8002f7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f80:	b083      	sub	sp, #12
 8002f82:	4607      	mov	r7, r0
 8002f84:	4616      	mov	r6, r2
	for (i = 0; i < length; i++)
 8002f86:	2400      	movs	r4, #0
 8002f88:	42b4      	cmp	r4, r6
 8002f8a:	da0d      	bge.n	8002fa8 <_ZN15CSTM32F10xUSART5WriteEPKct+0x2a>
		txData = *data++;
 8002f8c:	1c4d      	adds	r5, r1, #1
 8002f8e:	780b      	ldrb	r3, [r1, #0]
 8002f90:	a902      	add	r1, sp, #8
 8002f92:	f801 3d01 	strb.w	r3, [r1, #-1]!
		if (!m_TxBuffer.Push(txData)) break;
 8002f96:	f107 0008 	add.w	r0, r7, #8
 8002f9a:	f7ff ffdd 	bl	8002f58 <_ZN13CCircularFifoIcLj322EE4PushERc>
 8002f9e:	b118      	cbz	r0, 8002fa8 <_ZN15CSTM32F10xUSART5WriteEPKct+0x2a>
	for (i = 0; i < length; i++)
 8002fa0:	3401      	adds	r4, #1
 8002fa2:	b2a4      	uxth	r4, r4
		txData = *data++;
 8002fa4:	4629      	mov	r1, r5
	for (i = 0; i < length; i++)
 8002fa6:	e7ef      	b.n	8002f88 <_ZN15CSTM32F10xUSART5WriteEPKct+0xa>
}
 8002fa8:	4620      	mov	r0, r4
 8002faa:	b003      	add	sp, #12
 8002fac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fae <_ZN15CSTM32F10xUSART5WriteEPKc>:
{
 8002fae:	b570      	push	{r4, r5, r6, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	4606      	mov	r6, r0
 8002fb4:	460d      	mov	r5, r1
	uint16_t dataSend = 0;
 8002fb6:	2400      	movs	r4, #0
	while (*data)
 8002fb8:	782b      	ldrb	r3, [r5, #0]
 8002fba:	b15b      	cbz	r3, 8002fd4 <_ZN15CSTM32F10xUSART5WriteEPKc+0x26>
		txData = *data++;
 8002fbc:	3501      	adds	r5, #1
 8002fbe:	a902      	add	r1, sp, #8
 8002fc0:	f801 3d01 	strb.w	r3, [r1, #-1]!
		if (m_TxBuffer.Push(txData)) dataSend++;
 8002fc4:	f106 0008 	add.w	r0, r6, #8
 8002fc8:	f7ff ffc6 	bl	8002f58 <_ZN13CCircularFifoIcLj322EE4PushERc>
 8002fcc:	b110      	cbz	r0, 8002fd4 <_ZN15CSTM32F10xUSART5WriteEPKc+0x26>
 8002fce:	3401      	adds	r4, #1
 8002fd0:	b2a4      	uxth	r4, r4
	while (*data)
 8002fd2:	e7f1      	b.n	8002fb8 <_ZN15CSTM32F10xUSART5WriteEPKc+0xa>
}
 8002fd4:	4620      	mov	r0, r4
 8002fd6:	b002      	add	sp, #8
 8002fd8:	bd70      	pop	{r4, r5, r6, pc}

08002fda <_ZN15CSTM32F10xUSART9executeRxEv>:
{
 8002fda:	b510      	push	{r4, lr}
 8002fdc:	b082      	sub	sp, #8
 8002fde:	4604      	mov	r4, r0
	if (!USART_GetFlagStatus(m_pUsart, USART_FLAG_RXNE)) return;
 8002fe0:	2120      	movs	r1, #32
 8002fe2:	6840      	ldr	r0, [r0, #4]
 8002fe4:	f7ff f8db 	bl	800219e <USART_GetFlagStatus>
 8002fe8:	b908      	cbnz	r0, 8002fee <_ZN15CSTM32F10xUSART9executeRxEv+0x14>
}
 8002fea:	b002      	add	sp, #8
 8002fec:	bd10      	pop	{r4, pc}
	char data = USART_ReceiveData(m_pUsart);
 8002fee:	6860      	ldr	r0, [r4, #4]
 8002ff0:	f7ff f8c6 	bl	8002180 <USART_ReceiveData>
 8002ff4:	a902      	add	r1, sp, #8
 8002ff6:	f801 0d01 	strb.w	r0, [r1, #-1]!
	m_RxBuffer.Push(data);
 8002ffa:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 8002ffe:	f7ff ffab 	bl	8002f58 <_ZN13CCircularFifoIcLj322EE4PushERc>
 8003002:	e7f2      	b.n	8002fea <_ZN15CSTM32F10xUSART9executeRxEv+0x10>

08003004 <_ZN13CCircularFifoIcLj322EE3PopERc>:
	if (m_Head == m_Tail) return false;  // empty queue
 8003004:	f8d0 214c 	ldr.w	r2, [r0, #332]	; 0x14c
 8003008:	6843      	ldr	r3, [r0, #4]
 800300a:	429a      	cmp	r2, r3
 800300c:	d00e      	beq.n	800302c <_ZN13CCircularFifoIcLj322EE3PopERc+0x28>
bool CCircularFifo<Element, Size>::Pop(Element& item_)
 800300e:	b510      	push	{r4, lr}
 8003010:	4604      	mov	r4, r0
	item_ = m_Array[m_Head];
 8003012:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8003016:	4403      	add	r3, r0
 8003018:	7a1b      	ldrb	r3, [r3, #8]
 800301a:	700b      	strb	r3, [r1, #0]
	m_Head = increment(m_Head);
 800301c:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
 8003020:	f7ff ff8a 	bl	8002f38 <_ZNK13CCircularFifoIcLj322EE9incrementEj>
 8003024:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
	return true;
 8003028:	2001      	movs	r0, #1
 800302a:	bd10      	pop	{r4, pc}
	if (m_Head == m_Tail) return false;  // empty queue
 800302c:	2000      	movs	r0, #0
 800302e:	4770      	bx	lr

08003030 <_ZN15CSTM32F10xUSART8ReadByteEv>:
{
 8003030:	b510      	push	{r4, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	4604      	mov	r4, r0
	if (!HasData()) return 0;
 8003036:	6803      	ldr	r3, [r0, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	4798      	blx	r3
 800303c:	b910      	cbnz	r0, 8003044 <_ZN15CSTM32F10xUSART8ReadByteEv+0x14>
 800303e:	2000      	movs	r0, #0
}
 8003040:	b002      	add	sp, #8
 8003042:	bd10      	pop	{r4, pc}
	m_RxBuffer.Pop(data);
 8003044:	f10d 0107 	add.w	r1, sp, #7
 8003048:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 800304c:	f7ff ffda 	bl	8003004 <_ZN13CCircularFifoIcLj322EE3PopERc>
	return data;
 8003050:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003054:	e7f4      	b.n	8003040 <_ZN15CSTM32F10xUSART8ReadByteEv+0x10>

08003056 <_ZN15CSTM32F10xUSART9executeTxEv>:
{
 8003056:	b530      	push	{r4, r5, lr}
 8003058:	b083      	sub	sp, #12
 800305a:	4604      	mov	r4, r0
	if (m_TxBuffer.IsEmpty()) return;
 800305c:	f100 0508 	add.w	r5, r0, #8
 8003060:	4628      	mov	r0, r5
 8003062:	f7ff ff57 	bl	8002f14 <_ZNK13CCircularFifoIcLj322EE7IsEmptyEv>
 8003066:	b108      	cbz	r0, 800306c <_ZN15CSTM32F10xUSART9executeTxEv+0x16>
}
 8003068:	b003      	add	sp, #12
 800306a:	bd30      	pop	{r4, r5, pc}
	if (!USART_GetFlagStatus(m_pUsart, USART_FLAG_TXE)) return;
 800306c:	2180      	movs	r1, #128	; 0x80
 800306e:	6860      	ldr	r0, [r4, #4]
 8003070:	f7ff f895 	bl	800219e <USART_GetFlagStatus>
 8003074:	2800      	cmp	r0, #0
 8003076:	d0f7      	beq.n	8003068 <_ZN15CSTM32F10xUSART9executeTxEv+0x12>
	m_TxBuffer.Pop(data);
 8003078:	f10d 0107 	add.w	r1, sp, #7
 800307c:	4628      	mov	r0, r5
 800307e:	f7ff ffc1 	bl	8003004 <_ZN13CCircularFifoIcLj322EE3PopERc>
	USART_SendData(m_pUsart, data);
 8003082:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8003086:	6860      	ldr	r0, [r4, #4]
 8003088:	f7ff f869 	bl	800215e <USART_SendData>
 800308c:	e7ec      	b.n	8003068 <_ZN15CSTM32F10xUSART9executeTxEv+0x12>

0800308e <_ZN15CSTM32F10xUSART7ExecuteEv>:
{
 800308e:	b510      	push	{r4, lr}
 8003090:	4604      	mov	r4, r0
	executeTx();
 8003092:	f7ff ffe0 	bl	8003056 <_ZN15CSTM32F10xUSART9executeTxEv>
	executeRx();
 8003096:	4620      	mov	r0, r4
 8003098:	f7ff ff9f 	bl	8002fda <_ZN15CSTM32F10xUSART9executeRxEv>
 800309c:	bd10      	pop	{r4, pc}

0800309e <_ZN17CACFrequencyMeterD1Ev>:
}

CACFrequencyMeter::~CACFrequencyMeter()
{
	// TODO Auto-generated destructor stub
}
 800309e:	4770      	bx	lr

080030a0 <_ZN17CACFrequencyMeterD0Ev>:
CACFrequencyMeter::~CACFrequencyMeter()
 80030a0:	b510      	push	{r4, lr}
 80030a2:	4604      	mov	r4, r0
}
 80030a4:	f000 fdac 	bl	8003c00 <_ZdlPv>
 80030a8:	4620      	mov	r0, r4
 80030aa:	bd10      	pop	{r4, pc}

080030ac <_ZN17CACFrequencyMeter4InitEP13IInputCapture>:
	m_pIc = pIc;
 80030ac:	6041      	str	r1, [r0, #4]
 80030ae:	4770      	bx	lr

080030b0 <_ZN17CACFrequencyMeter7ExecuteEv>:
{
 80030b0:	b538      	push	{r3, r4, r5, lr}
 80030b2:	4604      	mov	r4, r0
	if (!m_pIc->IsTriggered()) return;
 80030b4:	6840      	ldr	r0, [r0, #4]
 80030b6:	6803      	ldr	r3, [r0, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4798      	blx	r3
 80030bc:	b900      	cbnz	r0, 80030c0 <_ZN17CACFrequencyMeter7ExecuteEv+0x10>
 80030be:	bd38      	pop	{r3, r4, r5, pc}
	m_CurrentTimeStamp = m_pIc->Read();
 80030c0:	6860      	ldr	r0, [r4, #4]
 80030c2:	6803      	ldr	r3, [r0, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	4798      	blx	r3
 80030c8:	4605      	mov	r5, r0
 80030ca:	8160      	strh	r0, [r4, #10]
	m_Freq = 1000.0f / (uint16_t)(m_CurrentTimeStamp - m_PrevTimeStamp);
 80030cc:	8920      	ldrh	r0, [r4, #8]
 80030ce:	1a28      	subs	r0, r5, r0
 80030d0:	b280      	uxth	r0, r0
 80030d2:	f7fd fce7 	bl	8000aa4 <__aeabi_i2f>
 80030d6:	4601      	mov	r1, r0
 80030d8:	4802      	ldr	r0, [pc, #8]	; (80030e4 <_ZN17CACFrequencyMeter7ExecuteEv+0x34>)
 80030da:	f7fd fdeb 	bl	8000cb4 <__aeabi_fdiv>
 80030de:	60e0      	str	r0, [r4, #12]
	m_PrevTimeStamp = m_CurrentTimeStamp;
 80030e0:	8125      	strh	r5, [r4, #8]
 80030e2:	e7ec      	b.n	80030be <_ZN17CACFrequencyMeter7ExecuteEv+0xe>
 80030e4:	447a0000 	.word	0x447a0000

080030e8 <_ZN17CACFrequencyMeter13ReadFrequencyEv>:
}
 80030e8:	68c0      	ldr	r0, [r0, #12]
 80030ea:	4770      	bx	lr

080030ec <_ZN17CACFrequencyMeterC1Ev>:
CACFrequencyMeter::CACFrequencyMeter()
 80030ec:	4a02      	ldr	r2, [pc, #8]	; (80030f8 <_ZN17CACFrequencyMeterC1Ev+0xc>)
 80030ee:	6002      	str	r2, [r0, #0]
	m_Freq = 0;
 80030f0:	2200      	movs	r2, #0
 80030f2:	60c2      	str	r2, [r0, #12]
}
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	0800442c 	.word	0x0800442c

080030fc <_ZN8CTimeoutD1Ev>:
}

CTimeout::~CTimeout()
{
	// TODO Auto-generated destructor stub
}
 80030fc:	4770      	bx	lr

080030fe <_ZN8CTimeoutD0Ev>:
CTimeout::~CTimeout()
 80030fe:	b510      	push	{r4, lr}
 8003100:	4604      	mov	r4, r0
}
 8003102:	f000 fd7d 	bl	8003c00 <_ZdlPv>
 8003106:	4620      	mov	r0, r4
 8003108:	bd10      	pop	{r4, pc}

0800310a <_ZN8CTimeout4InitEP6ITimer>:
	m_timer = pTimer;
 800310a:	6041      	str	r1, [r0, #4]
 800310c:	4770      	bx	lr

0800310e <_ZN8CTimeout5ResetEv>:
{
 800310e:	b510      	push	{r4, lr}
 8003110:	4604      	mov	r4, r0
	m_prevTimer = m_timer->CurrentTicks();
 8003112:	6840      	ldr	r0, [r0, #4]
 8003114:	6803      	ldr	r3, [r0, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4798      	blx	r3
 800311a:	8160      	strh	r0, [r4, #10]
	m_hasElapsed = false;
 800311c:	2300      	movs	r3, #0
 800311e:	7323      	strb	r3, [r4, #12]
 8003120:	bd10      	pop	{r4, pc}

08003122 <_ZN8CTimeout9SetExpiryEt>:
{
 8003122:	b508      	push	{r3, lr}
	m_expiry = tick;
 8003124:	8101      	strh	r1, [r0, #8]
	Reset();
 8003126:	f7ff fff2 	bl	800310e <_ZN8CTimeout5ResetEv>
 800312a:	bd08      	pop	{r3, pc}

0800312c <_ZN8CTimeout10HasElapsedEv>:
{
 800312c:	b510      	push	{r4, lr}
 800312e:	4604      	mov	r4, r0
	if (!m_hasElapsed)
 8003130:	7b03      	ldrb	r3, [r0, #12]
 8003132:	b10b      	cbz	r3, 8003138 <_ZN8CTimeout10HasElapsedEv+0xc>
}
 8003134:	7b20      	ldrb	r0, [r4, #12]
 8003136:	bd10      	pop	{r4, pc}
		if ((uint16_t)(m_timer->CurrentTicks() - m_prevTimer) >= m_expiry) m_hasElapsed = true;
 8003138:	6840      	ldr	r0, [r0, #4]
 800313a:	6803      	ldr	r3, [r0, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4798      	blx	r3
 8003140:	8963      	ldrh	r3, [r4, #10]
 8003142:	1ac0      	subs	r0, r0, r3
 8003144:	b280      	uxth	r0, r0
 8003146:	8923      	ldrh	r3, [r4, #8]
 8003148:	4298      	cmp	r0, r3
 800314a:	dbf3      	blt.n	8003134 <_ZN8CTimeout10HasElapsedEv+0x8>
 800314c:	2301      	movs	r3, #1
 800314e:	7323      	strb	r3, [r4, #12]
 8003150:	e7f0      	b.n	8003134 <_ZN8CTimeout10HasElapsedEv+0x8>
	...

08003154 <_ZN8CTimeoutC1Ev>:
CTimeout::CTimeout()
 8003154:	4b01      	ldr	r3, [pc, #4]	; (800315c <_ZN8CTimeoutC1Ev+0x8>)
 8003156:	6003      	str	r3, [r0, #0]
}
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	0800443c 	.word	0x0800443c

08003160 <_ZZ4mainENUlPcS_E0_4_FUNES_S_>:
		// no returned data
		*tx=0;
	};
	auto getAnalogInputParams = [](char *rx,char *tx)
	{
		*tx=0;
 8003160:	2300      	movs	r3, #0
 8003162:	700b      	strb	r3, [r1, #0]
 8003164:	4770      	bx	lr

08003166 <_ZN15CCircularBufferItLt20EE5ClearEv>:
}

template<class ELEMTYPE, uint16_t BUFFSIZE>
void CCircularBuffer<ELEMTYPE,BUFFSIZE>::Clear(void)
{
	m_IsFull = 0;
 8003166:	2300      	movs	r3, #0
 8003168:	7083      	strb	r3, [r0, #2]
	m_Head = 0;
 800316a:	8583      	strh	r3, [r0, #44]	; 0x2c
 800316c:	4770      	bx	lr

0800316e <_ZN13CMovAvgBufferIttLt20EE5ClearEv>:
void CMovAvgBuffer<ELEMTYPE, SUMTYPE, BUFFSIZE>::Clear(void)
 800316e:	b510      	push	{r4, lr}
 8003170:	4604      	mov	r4, r0
	m_Buffer.Clear();
 8003172:	3006      	adds	r0, #6
 8003174:	f7ff fff7 	bl	8003166 <_ZN15CCircularBufferItLt20EE5ClearEv>
	m_Average = 0.0;
 8003178:	2300      	movs	r3, #0
 800317a:	6023      	str	r3, [r4, #0]
	m_Sum = 0;
 800317c:	2300      	movs	r3, #0
 800317e:	80a3      	strh	r3, [r4, #4]
 8003180:	bd10      	pop	{r4, pc}

08003182 <_ZN13CMovAvgBufferIttLt20EEC1Ev>:
CMovAvgBuffer<ELEMTYPE, SUMTYPE, BUFFSIZE>::CMovAvgBuffer(void)
 8003182:	b510      	push	{r4, lr}
 8003184:	4604      	mov	r4, r0
		m_Size(BUFFSIZE)
 8003186:	2314      	movs	r3, #20
 8003188:	80c3      	strh	r3, [r0, #6]
		m_IsFull = 0;
 800318a:	2300      	movs	r3, #0
 800318c:	7203      	strb	r3, [r0, #8]
		m_Head = 0;
 800318e:	8643      	strh	r3, [r0, #50]	; 0x32
		this->Clear();
 8003190:	3006      	adds	r0, #6
 8003192:	f7ff ffe8 	bl	8003166 <_ZN15CCircularBufferItLt20EE5ClearEv>
	this->Clear();
 8003196:	4620      	mov	r0, r4
 8003198:	f7ff ffe9 	bl	800316e <_ZN13CMovAvgBufferIttLt20EE5ClearEv>
}
 800319c:	4620      	mov	r0, r4
 800319e:	bd10      	pop	{r4, pc}

080031a0 <_ZNK15CCircularBufferItLt20EE3GetEt>:
	if(index > m_Size)
 80031a0:	8803      	ldrh	r3, [r0, #0]
 80031a2:	4299      	cmp	r1, r3
 80031a4:	dc11      	bgt.n	80031ca <_ZNK15CCircularBufferItLt20EE3GetEt+0x2a>
ELEMTYPE CCircularBuffer<ELEMTYPE,BUFFSIZE>::Get(uint16_t index) const
 80031a6:	b410      	push	{r4}
	if(!m_IsFull && (index >= m_Head))
 80031a8:	7884      	ldrb	r4, [r0, #2]
 80031aa:	b914      	cbnz	r4, 80031b2 <_ZNK15CCircularBufferItLt20EE3GetEt+0x12>
 80031ac:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80031ae:	4291      	cmp	r1, r2
 80031b0:	da0d      	bge.n	80031ce <_ZNK15CCircularBufferItLt20EE3GetEt+0x2e>
	return m_Array[(m_Head * m_IsFull + index) % m_Size];
 80031b2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80031b4:	fb04 1102 	mla	r1, r4, r2, r1
 80031b8:	fb91 f2f3 	sdiv	r2, r1, r3
 80031bc:	fb03 1112 	mls	r1, r3, r2, r1
 80031c0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80031c4:	8880      	ldrh	r0, [r0, #4]
}
 80031c6:	bc10      	pop	{r4}
 80031c8:	4770      	bx	lr
		return NULL;
 80031ca:	2000      	movs	r0, #0
 80031cc:	4770      	bx	lr
		return NULL;
 80031ce:	2000      	movs	r0, #0
 80031d0:	e7f9      	b.n	80031c6 <_ZNK15CCircularBufferItLt20EE3GetEt+0x26>

080031d2 <_ZN15CCircularBufferItLt20EE3AddEt>:
	m_Array[m_Head] = value;
 80031d2:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 80031d4:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 80031d8:	8091      	strh	r1, [r2, #4]
	m_Head = (m_Head + 1) % m_Size;
 80031da:	1c5a      	adds	r2, r3, #1
 80031dc:	8801      	ldrh	r1, [r0, #0]
 80031de:	fb92 f3f1 	sdiv	r3, r2, r1
 80031e2:	fb01 2313 	mls	r3, r1, r3, r2
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	8583      	strh	r3, [r0, #44]	; 0x2c
	if(m_Head == 0)
 80031ea:	b90b      	cbnz	r3, 80031f0 <_ZN15CCircularBufferItLt20EE3AddEt+0x1e>
		m_IsFull = 1;
 80031ec:	2301      	movs	r3, #1
 80031ee:	7083      	strb	r3, [r0, #2]
 80031f0:	4770      	bx	lr

080031f2 <_ZNK15CCircularBufferItLt20EE6IsFullEv>:
}
 80031f2:	7880      	ldrb	r0, [r0, #2]
 80031f4:	4770      	bx	lr

080031f6 <_ZN13CMovAvgBufferIttLt20EE9AddSampleEt>:
void CMovAvgBuffer<ELEMTYPE, SUMTYPE, BUFFSIZE>::AddSample(ELEMTYPE sample)
 80031f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031f8:	4606      	mov	r6, r0
 80031fa:	460f      	mov	r7, r1
}

template<class ELEMTYPE, class SUMTYPE, uint16_t BUFFSIZE>
inline bool CMovAvgBuffer<ELEMTYPE, SUMTYPE, BUFFSIZE>::IsFull(void) const
{
	return m_Buffer.IsFull();
 80031fc:	1d85      	adds	r5, r0, #6
 80031fe:	4628      	mov	r0, r5
 8003200:	f7ff fff7 	bl	80031f2 <_ZNK15CCircularBufferItLt20EE6IsFullEv>
	if(this->IsFull())
 8003204:	b1a8      	cbz	r0, 8003232 <_ZN13CMovAvgBufferIttLt20EE9AddSampleEt+0x3c>
		firstSample = (SUMTYPE) m_Buffer.Get(0);
 8003206:	2100      	movs	r1, #0
 8003208:	4628      	mov	r0, r5
 800320a:	f7ff ffc9 	bl	80031a0 <_ZNK15CCircularBufferItLt20EE3GetEt>
 800320e:	4604      	mov	r4, r0
	m_Buffer.Add(sample);
 8003210:	4639      	mov	r1, r7
 8003212:	4628      	mov	r0, r5
 8003214:	f7ff ffdd 	bl	80031d2 <_ZN15CCircularBufferItLt20EE3AddEt>
	return m_Buffer.Count();
 8003218:	4628      	mov	r0, r5
 800321a:	f7ff fbe1 	bl	80029e0 <_ZNK15CCircularBufferItLt20EE5CountEv>
	m_Sum += (SUMTYPE)m_Buffer.Get(this->Count()-1) - firstSample;
 800321e:	1e41      	subs	r1, r0, #1
 8003220:	b289      	uxth	r1, r1
 8003222:	4628      	mov	r0, r5
 8003224:	f7ff ffbc 	bl	80031a0 <_ZNK15CCircularBufferItLt20EE3GetEt>
 8003228:	1b00      	subs	r0, r0, r4
 800322a:	88b4      	ldrh	r4, [r6, #4]
 800322c:	4420      	add	r0, r4
 800322e:	80b0      	strh	r0, [r6, #4]
 8003230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	SUMTYPE firstSample = 0;
 8003232:	2400      	movs	r4, #0
 8003234:	e7ec      	b.n	8003210 <_ZN13CMovAvgBufferIttLt20EE9AddSampleEt+0x1a>
	...

08003238 <main>:
{
 8003238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800323c:	f2ad 7de4 	subw	sp, sp, #2020	; 0x7e4
	SystemInit();
 8003240:	f000 fb2e 	bl	80038a0 <SystemInit>
	RCC_ADCCLKConfig(RCC_PCLK2_Div8);
 8003244:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8003248:	f7fe f928 	bl	800149c <RCC_ADCCLKConfig>
	RCC_APB1PeriphClockCmd(apb1Enable, ENABLE);
 800324c:	2101      	movs	r1, #1
 800324e:	4863      	ldr	r0, [pc, #396]	; (80033dc <main+0x1a4>)
 8003250:	f7fe fa2c 	bl	80016ac <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(apb2Enable, ENABLE);
 8003254:	2101      	movs	r1, #1
 8003256:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800325a:	f7fe fa09 	bl	8001670 <RCC_APB2PeriphClockCmd>
	RCC_AHBPeriphClockCmd(ahbEnable, ENABLE);
 800325e:	2101      	movs	r1, #1
 8003260:	4608      	mov	r0, r1
 8003262:	f7fe f9e7 	bl	8001634 <RCC_AHBPeriphClockCmd>
	TIM_TimeBaseStructInit(&timer);
 8003266:	f20d 70d4 	addw	r0, sp, #2004	; 0x7d4
 800326a:	f7fe fbb7 	bl	80019dc <TIM_TimeBaseStructInit>
	timer.TIM_Period = 0xffff;
 800326e:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003272:	f8ad 47d8 	strh.w	r4, [sp, #2008]	; 0x7d8
	timer.TIM_Prescaler = 719; // 10us timer period!
 8003276:	f240 23cf 	movw	r3, #719	; 0x2cf
 800327a:	f8ad 37d4 	strh.w	r3, [sp, #2004]	; 0x7d4
	TIM_TimeBaseInit(TIM3, &timer);
 800327e:	4d58      	ldr	r5, [pc, #352]	; (80033e0 <main+0x1a8>)
 8003280:	f20d 71d4 	addw	r1, sp, #2004	; 0x7d4
 8003284:	4628      	mov	r0, r5
 8003286:	f7fe fad9 	bl	800183c <TIM_TimeBaseInit>
	TIM_Cmd(TIM3, ENABLE);
 800328a:	2101      	movs	r1, #1
 800328c:	4628      	mov	r0, r5
 800328e:	f7fe fbd6 	bl	8001a3e <TIM_Cmd>
	TIM_TimeBaseStructInit(&timer);
 8003292:	f20d 70d4 	addw	r0, sp, #2004	; 0x7d4
 8003296:	f7fe fba1 	bl	80019dc <TIM_TimeBaseStructInit>
	timer.TIM_Period = 0xffff;
 800329a:	f8ad 47d8 	strh.w	r4, [sp, #2008]	; 0x7d8
	timer.TIM_Prescaler = 7199; // 100us timer period!
 800329e:	f641 431f 	movw	r3, #7199	; 0x1c1f
 80032a2:	f8ad 37d4 	strh.w	r3, [sp, #2004]	; 0x7d4
	TIM_TimeBaseInit(TIM2, &timer);
 80032a6:	f20d 71d4 	addw	r1, sp, #2004	; 0x7d4
 80032aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80032ae:	f7fe fac5 	bl	800183c <TIM_TimeBaseInit>
	TIM_Cmd(TIM2, ENABLE);
 80032b2:	2101      	movs	r1, #1
 80032b4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80032b8:	f7fe fbc1 	bl	8001a3e <TIM_Cmd>
	sGpio.GPIO_Pin = GPIO_Pin_13;
 80032bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032c0:	f8ad 37d0 	strh.w	r3, [sp, #2000]	; 0x7d0
	sGpio.GPIO_Speed = GPIO_Speed_2MHz;
 80032c4:	2402      	movs	r4, #2
 80032c6:	f88d 47d2 	strb.w	r4, [sp, #2002]	; 0x7d2
	sGpio.GPIO_Mode = GPIO_Mode_Out_OD;
 80032ca:	2314      	movs	r3, #20
 80032cc:	f88d 37d3 	strb.w	r3, [sp, #2003]	; 0x7d3
	GPIO_Init(GPIOC, &sGpio); // pc13
 80032d0:	f505 3586 	add.w	r5, r5, #68608	; 0x10c00
 80032d4:	f50d 61fa 	add.w	r1, sp, #2000	; 0x7d0
 80032d8:	4628      	mov	r0, r5
 80032da:	f7fe f80f 	bl	80012fc <GPIO_Init>
	CSTM32F10xTimer MainTimer;
 80032de:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
 80032e2:	f7ff fdeb 	bl	8002ebc <_ZN15CSTM32F10xTimerC1Ev>
	MainTimer.Init(TIM2);
 80032e6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80032ea:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
 80032ee:	f7ff fde2 	bl	8002eb6 <_ZN15CSTM32F10xTimer4InitEP11TIM_TypeDef>
	CSTM32F10xGpio GpioHeartBeat;
 80032f2:	f50d 60f7 	add.w	r0, sp, #1976	; 0x7b8
 80032f6:	f7ff fd6d 	bl	8002dd4 <_ZN14CSTM32F10xGpioC1Ev>
	GpioHeartBeat.Init(GPIOC, 13);
 80032fa:	220d      	movs	r2, #13
 80032fc:	4629      	mov	r1, r5
 80032fe:	f50d 60f7 	add.w	r0, sp, #1976	; 0x7b8
 8003302:	f7ff fd5a 	bl	8002dba <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh>
	CHeartBeat HeartBeat;
 8003306:	f50d 60f4 	add.w	r0, sp, #1952	; 0x7a0
 800330a:	f7ff fc35 	bl	8002b78 <_ZN10CHeartBeatC1Ev>
	HeartBeat.Init(&GpioHeartBeat, &MainTimer, 5000);
 800330e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003312:	f50d 62f9 	add.w	r2, sp, #1992	; 0x7c8
 8003316:	f50d 61f7 	add.w	r1, sp, #1976	; 0x7b8
 800331a:	f50d 60f4 	add.w	r0, sp, #1952	; 0x7a0
 800331e:	f7ff fc02 	bl	8002b26 <_ZN10CHeartBeat4InitEP5IGpioP6ITimert>
	sGpio.GPIO_Pin = GPIO_Pin_11; // rx3
 8003322:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003326:	f8ad 37d0 	strh.w	r3, [sp, #2000]	; 0x7d0
	sGpio.GPIO_Speed = GPIO_Speed_2MHz;
 800332a:	f88d 47d2 	strb.w	r4, [sp, #2002]	; 0x7d2
	sGpio.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800332e:	2304      	movs	r3, #4
 8003330:	f88d 37d3 	strb.w	r3, [sp, #2003]	; 0x7d3
	GPIO_Init(GPIOB, &sGpio);
 8003334:	f5a5 6580 	sub.w	r5, r5, #1024	; 0x400
 8003338:	f50d 61fa 	add.w	r1, sp, #2000	; 0x7d0
 800333c:	4628      	mov	r0, r5
 800333e:	f7fd ffdd 	bl	80012fc <GPIO_Init>
	sGpio.GPIO_Pin = GPIO_Pin_10; // tx3
 8003342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003346:	f8ad 37d0 	strh.w	r3, [sp, #2000]	; 0x7d0
	sGpio.GPIO_Speed = GPIO_Speed_2MHz;
 800334a:	f88d 47d2 	strb.w	r4, [sp, #2002]	; 0x7d2
	sGpio.GPIO_Mode = GPIO_Mode_AF_PP;
 800334e:	2318      	movs	r3, #24
 8003350:	f88d 37d3 	strb.w	r3, [sp, #2003]	; 0x7d3
	GPIO_Init(GPIOB, &sGpio);
 8003354:	f50d 61fa 	add.w	r1, sp, #2000	; 0x7d0
 8003358:	4628      	mov	r0, r5
 800335a:	f7fd ffcf 	bl	80012fc <GPIO_Init>
	usart.USART_BaudRate = 9600;
 800335e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8003362:	f8cd 3790 	str.w	r3, [sp, #1936]	; 0x790
	usart.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8003366:	2300      	movs	r3, #0
 8003368:	f8ad 379c 	strh.w	r3, [sp, #1948]	; 0x79c
	usart.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800336c:	220c      	movs	r2, #12
 800336e:	f8ad 279a 	strh.w	r2, [sp, #1946]	; 0x79a
	usart.USART_Parity = USART_Parity_No;
 8003372:	f8ad 3798 	strh.w	r3, [sp, #1944]	; 0x798
	usart.USART_StopBits = USART_StopBits_1;
 8003376:	f8ad 3796 	strh.w	r3, [sp, #1942]	; 0x796
	usart.USART_WordLength = USART_WordLength_8b;
 800337a:	f8ad 3794 	strh.w	r3, [sp, #1940]	; 0x794
	USART_Init(USART3, &usart);
 800337e:	4c19      	ldr	r4, [pc, #100]	; (80033e4 <main+0x1ac>)
 8003380:	f50d 61f2 	add.w	r1, sp, #1936	; 0x790
 8003384:	4620      	mov	r0, r4
 8003386:	f7fe fe11 	bl	8001fac <USART_Init>
	USART_Cmd(USART3, ENABLE);
 800338a:	2101      	movs	r1, #1
 800338c:	4620      	mov	r0, r4
 800338e:	f7fe fec7 	bl	8002120 <USART_Cmd>
	CSTM32F10xUSART Uart;
 8003392:	f50d 609d 	add.w	r0, sp, #1256	; 0x4e8
 8003396:	f7ff fda9 	bl	8002eec <_ZN15CSTM32F10xUSARTC1Ev>
	Uart.Init(USART3);
 800339a:	4621      	mov	r1, r4
 800339c:	f50d 609d 	add.w	r0, sp, #1256	; 0x4e8
 80033a0:	f7ff fda2 	bl	8002ee8 <_ZN15CSTM32F10xUSART4InitEP13USART_TypeDef>
	CSTM32F10xADC Adc[2];
 80033a4:	2501      	movs	r5, #1
 80033a6:	f50d 649b 	add.w	r4, sp, #1240	; 0x4d8
 80033aa:	2d00      	cmp	r5, #0
 80033ac:	db05      	blt.n	80033ba <main+0x182>
 80033ae:	4620      	mov	r0, r4
 80033b0:	f7ff fc10 	bl	8002bd4 <_ZN13CSTM32F10xADCC1Ev>
 80033b4:	3408      	adds	r4, #8
 80033b6:	3d01      	subs	r5, #1
 80033b8:	e7f7      	b.n	80033aa <main+0x172>
 80033ba:	2400      	movs	r4, #0
	for (uint16_t i = 0; i < 2; i++)
 80033bc:	2c01      	cmp	r4, #1
 80033be:	dc13      	bgt.n	80033e8 <main+0x1b0>
		Adc[i].Init(&adcBuffer[i]);
 80033c0:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 80033c4:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 80033c8:	f50d 639b 	add.w	r3, sp, #1240	; 0x4d8
 80033cc:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
 80033d0:	f7ff fbfd 	bl	8002bce <_ZN13CSTM32F10xADC4InitEPt>
	for (uint16_t i = 0; i < 2; i++)
 80033d4:	3401      	adds	r4, #1
 80033d6:	b2a4      	uxth	r4, r4
 80033d8:	e7f0      	b.n	80033bc <main+0x184>
 80033da:	bf00      	nop
 80033dc:	00044003 	.word	0x00044003
 80033e0:	40000400 	.word	0x40000400
 80033e4:	40004800 	.word	0x40004800
	GPIO_StructInit(&sGpio);
 80033e8:	f50d 60fa 	add.w	r0, sp, #2000	; 0x7d0
 80033ec:	f7fe f842 	bl	8001474 <GPIO_StructInit>
	sGpio.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1; // adc0 adc1
 80033f0:	f04f 0803 	mov.w	r8, #3
 80033f4:	f8ad 87d0 	strh.w	r8, [sp, #2000]	; 0x7d0
	sGpio.GPIO_Mode = GPIO_Mode_AIN;
 80033f8:	2500      	movs	r5, #0
 80033fa:	f88d 57d3 	strb.w	r5, [sp, #2003]	; 0x7d3
	GPIO_Init(GPIOA, &sGpio);
 80033fe:	4fdc      	ldr	r7, [pc, #880]	; (8003770 <main+0x538>)
 8003400:	f50d 61fa 	add.w	r1, sp, #2000	; 0x7d0
 8003404:	4638      	mov	r0, r7
 8003406:	f7fd ff79 	bl	80012fc <GPIO_Init>
	DMA_StructInit(&dma);
 800340a:	f50d 6095 	add.w	r0, sp, #1192	; 0x4a8
 800340e:	f7fd fee1 	bl	80011d4 <DMA_StructInit>
	dma.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8003412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003416:	f8cd 34c4 	str.w	r3, [sp, #1220]	; 0x4c4
	dma.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 800341a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800341e:	f8cd 34c0 	str.w	r3, [sp, #1216]	; 0x4c0
	dma.DMA_DIR = DMA_DIR_PeripheralSRC;
 8003422:	f8cd 54b0 	str.w	r5, [sp, #1200]	; 0x4b0
	dma.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8003426:	2380      	movs	r3, #128	; 0x80
 8003428:	f8cd 34bc 	str.w	r3, [sp, #1212]	; 0x4bc
	dma.DMA_Mode = DMA_Mode_Circular;
 800342c:	2320      	movs	r3, #32
 800342e:	f8cd 34c8 	str.w	r3, [sp, #1224]	; 0x4c8
	dma.DMA_BufferSize = 2;
 8003432:	2602      	movs	r6, #2
 8003434:	f8cd 64b4 	str.w	r6, [sp, #1204]	; 0x4b4
	dma.DMA_Priority = DMA_Priority_Low;
 8003438:	f8cd 54cc 	str.w	r5, [sp, #1228]	; 0x4cc
	dma.DMA_MemoryBaseAddr = (uint32_t)adcBuffer;
 800343c:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 8003440:	f8cd 34ac 	str.w	r3, [sp, #1196]	; 0x4ac
	dma.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
 8003444:	4bcb      	ldr	r3, [pc, #812]	; (8003774 <main+0x53c>)
 8003446:	f8cd 34a8 	str.w	r3, [sp, #1192]	; 0x4a8
	DMA_Init(DMA1_Channel1, &dma);
 800344a:	4ccb      	ldr	r4, [pc, #812]	; (8003778 <main+0x540>)
 800344c:	f50d 6195 	add.w	r1, sp, #1192	; 0x4a8
 8003450:	4620      	mov	r0, r4
 8003452:	f7fd fe81 	bl	8001158 <DMA_Init>
	DMA_Cmd(DMA1_Channel1, ENABLE);
 8003456:	2101      	movs	r1, #1
 8003458:	4620      	mov	r0, r4
 800345a:	f7fd fee5 	bl	8001228 <DMA_Cmd>
	ADC_StructInit(&adc);
 800345e:	f20d 4094 	addw	r0, sp, #1172	; 0x494
 8003462:	f7fd fd35 	bl	8000ed0 <ADC_StructInit>
	adc.ADC_ContinuousConvMode = ENABLE;
 8003466:	2401      	movs	r4, #1
 8003468:	f88d 4499 	strb.w	r4, [sp, #1177]	; 0x499
	adc.ADC_NbrOfChannel = 2;
 800346c:	f88d 64a4 	strb.w	r6, [sp, #1188]	; 0x4a4
	adc.ADC_ScanConvMode = ENABLE;
 8003470:	f88d 4498 	strb.w	r4, [sp, #1176]	; 0x498
	ADC_Init(ADC1, &adc);
 8003474:	f8df 9320 	ldr.w	r9, [pc, #800]	; 8003798 <main+0x560>
 8003478:	f20d 4194 	addw	r1, sp, #1172	; 0x494
 800347c:	4648      	mov	r0, r9
 800347e:	f7fd fcd5 	bl	8000e2c <ADC_Init>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_239Cycles5);
 8003482:	2307      	movs	r3, #7
 8003484:	4622      	mov	r2, r4
 8003486:	4629      	mov	r1, r5
 8003488:	4648      	mov	r0, r9
 800348a:	f7fd fd9c 	bl	8000fc6 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 2, ADC_SampleTime_239Cycles5);
 800348e:	2307      	movs	r3, #7
 8003490:	4632      	mov	r2, r6
 8003492:	4621      	mov	r1, r4
 8003494:	4648      	mov	r0, r9
 8003496:	f7fd fd96 	bl	8000fc6 <ADC_RegularChannelConfig>
	ADC1->CR2 |= 7 << 17; // external trigger on software, NO SPL IMPLEMENTATION, WTF !!!
 800349a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800349e:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 80034a2:	f8c9 3008 	str.w	r3, [r9, #8]
	ADC_DMACmd(ADC1, ENABLE);
 80034a6:	4621      	mov	r1, r4
 80034a8:	4648      	mov	r0, r9
 80034aa:	f7fd fd47 	bl	8000f3c <ADC_DMACmd>
	ADC_Cmd(ADC1, ENABLE);
 80034ae:	4621      	mov	r1, r4
 80034b0:	4648      	mov	r0, r9
 80034b2:	f7fd fd28 	bl	8000f06 <ADC_Cmd>
	ADC_SoftwareStartConvCmd(ADC1, ENABLE);
 80034b6:	4621      	mov	r1, r4
 80034b8:	4648      	mov	r0, r9
 80034ba:	f7fd fd69 	bl	8000f90 <ADC_SoftwareStartConvCmd>
	ADC_StartCalibration(ADC1);
 80034be:	4648      	mov	r0, r9
 80034c0:	f7fd fd57 	bl	8000f72 <ADC_StartCalibration>
	GPIO_StructInit(&sGpio);
 80034c4:	f50d 60fa 	add.w	r0, sp, #2000	; 0x7d0
 80034c8:	f7fd ffd4 	bl	8001474 <GPIO_StructInit>
	sGpio.GPIO_Pin = GPIO_Pin_6; // tim3 channel 1
 80034cc:	2340      	movs	r3, #64	; 0x40
 80034ce:	f8ad 37d0 	strh.w	r3, [sp, #2000]	; 0x7d0
	sGpio.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80034d2:	2304      	movs	r3, #4
 80034d4:	f88d 37d3 	strb.w	r3, [sp, #2003]	; 0x7d3
	sGpio.GPIO_Speed = GPIO_Speed_2MHz;
 80034d8:	f88d 67d2 	strb.w	r6, [sp, #2002]	; 0x7d2
	GPIO_Init(GPIOA, &sGpio);
 80034dc:	f50d 61fa 	add.w	r1, sp, #2000	; 0x7d0
 80034e0:	4638      	mov	r0, r7
 80034e2:	f7fd ff0b 	bl	80012fc <GPIO_Init>
	TIM_ICStructInit(&sInputCapture);
 80034e6:	f50d 6091 	add.w	r0, sp, #1160	; 0x488
 80034ea:	f7fe fa90 	bl	8001a0e <TIM_ICStructInit>
	sInputCapture.TIM_Channel = TIM_Channel_1;
 80034ee:	f8ad 5488 	strh.w	r5, [sp, #1160]	; 0x488
	sInputCapture.TIM_ICSelection = TIM_ICSelection_DirectTI;
 80034f2:	f8ad 448c 	strh.w	r4, [sp, #1164]	; 0x48c
	sInputCapture.TIM_ICPolarity = TIM_ICPolarity_Falling;
 80034f6:	f8ad 648a 	strh.w	r6, [sp, #1162]	; 0x48a
	sInputCapture.TIM_ICFilter = 0x9;
 80034fa:	f04f 0a09 	mov.w	sl, #9
 80034fe:	f8ad a490 	strh.w	sl, [sp, #1168]	; 0x490
	TIM_ICInit(TIM3, &sInputCapture);
 8003502:	f5a9 3990 	sub.w	r9, r9, #73728	; 0x12000
 8003506:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
 800350a:	4648      	mov	r0, r9
 800350c:	f7fe fa12 	bl	8001934 <TIM_ICInit>
	CSTM32F10xInputCapture InputCapture;
 8003510:	f20d 407c 	addw	r0, sp, #1148	; 0x47c
 8003514:	f7ff fcbe 	bl	8002e94 <_ZN22CSTM32F10xInputCaptureC1Ev>
	InputCapture.Init(TIM3, TIM_Channel_1);
 8003518:	462a      	mov	r2, r5
 800351a:	4649      	mov	r1, r9
 800351c:	f20d 407c 	addw	r0, sp, #1148	; 0x47c
 8003520:	f7ff fcb5 	bl	8002e8e <_ZN22CSTM32F10xInputCapture4InitEP11TIM_TypeDeft>
	GPIO_StructInit(&sGpio);
 8003524:	f50d 60fa 	add.w	r0, sp, #2000	; 0x7d0
 8003528:	f7fd ffa4 	bl	8001474 <GPIO_StructInit>
	sGpio.GPIO_Pin = GPIO_Pin_15 | GPIO_Pin_13; // mosi2 sck2
 800352c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003530:	f8ad 37d0 	strh.w	r3, [sp, #2000]	; 0x7d0
	sGpio.GPIO_Speed = GPIO_Speed_50MHz;
 8003534:	f88d 87d2 	strb.w	r8, [sp, #2002]	; 0x7d2
	sGpio.GPIO_Mode = GPIO_Mode_AF_PP;
 8003538:	f04f 0918 	mov.w	r9, #24
 800353c:	f88d 97d3 	strb.w	r9, [sp, #2003]	; 0x7d3
	GPIO_Init(GPIOB, &sGpio);
 8003540:	f50d 61fa 	add.w	r1, sp, #2000	; 0x7d0
 8003544:	488d      	ldr	r0, [pc, #564]	; (800377c <main+0x544>)
 8003546:	f7fd fed9 	bl	80012fc <GPIO_Init>
	GPIO_StructInit(&sGpio);
 800354a:	f50d 60fa 	add.w	r0, sp, #2000	; 0x7d0
 800354e:	f7fd ff91 	bl	8001474 <GPIO_StructInit>
	sGpio.GPIO_Pin = GPIO_Pin_14 | GPIO_Pin_12;
 8003552:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8003556:	f8ad 37d0 	strh.w	r3, [sp, #2000]	; 0x7d0
	sGpio.GPIO_Speed = GPIO_Speed_50MHz;
 800355a:	f88d 87d2 	strb.w	r8, [sp, #2002]	; 0x7d2
	sGpio.GPIO_Mode = GPIO_Mode_Out_PP;
 800355e:	f04f 0b10 	mov.w	fp, #16
 8003562:	f88d b7d3 	strb.w	fp, [sp, #2003]	; 0x7d3
	GPIO_Init(GPIOB, &sGpio);
 8003566:	f50d 61fa 	add.w	r1, sp, #2000	; 0x7d0
 800356a:	4884      	ldr	r0, [pc, #528]	; (800377c <main+0x544>)
 800356c:	f7fd fec6 	bl	80012fc <GPIO_Init>
	CSTM32F10xGpio pOE;
 8003570:	f20d 406c 	addw	r0, sp, #1132	; 0x46c
 8003574:	f7ff fc2e 	bl	8002dd4 <_ZN14CSTM32F10xGpioC1Ev>
	pOE.Init(GPIOB, 14);
 8003578:	220e      	movs	r2, #14
 800357a:	4980      	ldr	r1, [pc, #512]	; (800377c <main+0x544>)
 800357c:	f20d 406c 	addw	r0, sp, #1132	; 0x46c
 8003580:	f7ff fc1b 	bl	8002dba <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh>
	CSTM32F10xGpio pSS;
 8003584:	f20d 405c 	addw	r0, sp, #1116	; 0x45c
 8003588:	f7ff fc24 	bl	8002dd4 <_ZN14CSTM32F10xGpioC1Ev>
	pSS.Init(GPIOB, 12);
 800358c:	220c      	movs	r2, #12
 800358e:	497b      	ldr	r1, [pc, #492]	; (800377c <main+0x544>)
 8003590:	f20d 405c 	addw	r0, sp, #1116	; 0x45c
 8003594:	f7ff fc11 	bl	8002dba <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh>
	GPIO_StructInit(&sGpio);
 8003598:	f50d 60fa 	add.w	r0, sp, #2000	; 0x7d0
 800359c:	f7fd ff6a 	bl	8001474 <GPIO_StructInit>
	sGpio.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_8;
 80035a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80035a4:	f8ad 37d0 	strh.w	r3, [sp, #2000]	; 0x7d0
	sGpio.GPIO_Speed = GPIO_Speed_50MHz;
 80035a8:	f88d 87d2 	strb.w	r8, [sp, #2002]	; 0x7d2
	sGpio.GPIO_Mode = GPIO_Mode_Out_PP;
 80035ac:	f88d b7d3 	strb.w	fp, [sp, #2003]	; 0x7d3
	GPIO_Init(GPIOA, &sGpio);
 80035b0:	f50d 61fa 	add.w	r1, sp, #2000	; 0x7d0
 80035b4:	4638      	mov	r0, r7
 80035b6:	f7fd fea1 	bl	80012fc <GPIO_Init>
	CSTM32F10xGpio pA;
 80035ba:	f20d 404c 	addw	r0, sp, #1100	; 0x44c
 80035be:	f7ff fc09 	bl	8002dd4 <_ZN14CSTM32F10xGpioC1Ev>
	pA.Init(GPIOA, 9);
 80035c2:	4652      	mov	r2, sl
 80035c4:	4639      	mov	r1, r7
 80035c6:	f20d 404c 	addw	r0, sp, #1100	; 0x44c
 80035ca:	f7ff fbf6 	bl	8002dba <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh>
	CSTM32F10xGpio pB;
 80035ce:	f20d 403c 	addw	r0, sp, #1084	; 0x43c
 80035d2:	f7ff fbff 	bl	8002dd4 <_ZN14CSTM32F10xGpioC1Ev>
	pB.Init(GPIOA, 8);
 80035d6:	2208      	movs	r2, #8
 80035d8:	4639      	mov	r1, r7
 80035da:	f20d 403c 	addw	r0, sp, #1084	; 0x43c
 80035de:	f7ff fbec 	bl	8002dba <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh>
	CSTM32F10xDMA SpiDma;
 80035e2:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
 80035e6:	f7ff fbbf 	bl	8002d68 <_ZN13CSTM32F10xDMAC1Ev>
	SpiDma.Init(DMA1, DMA1_Channel5, DMA_Mode_Normal, DMA_Priority_VeryHigh);
 80035ea:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	462b      	mov	r3, r5
 80035f2:	4a63      	ldr	r2, [pc, #396]	; (8003780 <main+0x548>)
 80035f4:	4963      	ldr	r1, [pc, #396]	; (8003784 <main+0x54c>)
 80035f6:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
 80035fa:	f7ff fb33 	bl	8002c64 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm>
	SPI_StructInit(&spiStruct);
 80035fe:	a8fb      	add	r0, sp, #1004	; 0x3ec
 8003600:	f7fe f8b5 	bl	800176e <SPI_StructInit>
	spiStruct.SPI_Mode = SPI_Mode_Master;
 8003604:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003608:	f8ad 33ee 	strh.w	r3, [sp, #1006]	; 0x3ee
	spiStruct.SPI_Direction = SPI_Direction_1Line_Tx;
 800360c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003610:	f8ad 33ec 	strh.w	r3, [sp, #1004]	; 0x3ec
	spiStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 8003614:	f8ad 93f8 	strh.w	r9, [sp, #1016]	; 0x3f8
	spiStruct.SPI_NSS = SPI_NSS_Soft;
 8003618:	f44f 7300 	mov.w	r3, #512	; 0x200
 800361c:	f8ad 33f6 	strh.w	r3, [sp, #1014]	; 0x3f6
	SPI_Init(SPI2, &spiStruct);
 8003620:	4d59      	ldr	r5, [pc, #356]	; (8003788 <main+0x550>)
 8003622:	a9fb      	add	r1, sp, #1004	; 0x3ec
 8003624:	4628      	mov	r0, r5
 8003626:	f7fe f85f 	bl	80016e8 <SPI_Init>
	SPI_I2S_DMACmd(SPI2, SPI_I2S_DMAReq_Tx, ENABLE);
 800362a:	4622      	mov	r2, r4
 800362c:	4631      	mov	r1, r6
 800362e:	4628      	mov	r0, r5
 8003630:	f7fe f8e0 	bl	80017f4 <SPI_I2S_DMACmd>
	SPI_Cmd(SPI2, ENABLE);
 8003634:	4621      	mov	r1, r4
 8003636:	4628      	mov	r0, r5
 8003638:	f7fe f8bd 	bl	80017b6 <SPI_Cmd>
	CACFrequencyMeter ACFrequencyMeter;
 800363c:	a8f7      	add	r0, sp, #988	; 0x3dc
 800363e:	f7ff fd55 	bl	80030ec <_ZN17CACFrequencyMeterC1Ev>
	ACFrequencyMeter.Init(&InputCapture);
 8003642:	f20d 417c 	addw	r1, sp, #1148	; 0x47c
 8003646:	a8f7      	add	r0, sp, #988	; 0x3dc
 8003648:	f7ff fd30 	bl	80030ac <_ZN17CACFrequencyMeter4InitEP13IInputCapture>
	CAnalogInput AnalogInput[2];
 800364c:	adcb      	add	r5, sp, #812	; 0x32c
 800364e:	2c00      	cmp	r4, #0
 8003650:	db14      	blt.n	800367c <main+0x444>
inline CAnalogInput::CAnalogInput()
 8003652:	4628      	mov	r0, r5
 8003654:	4b4d      	ldr	r3, [pc, #308]	; (800378c <main+0x554>)
 8003656:	f840 3b0c 	str.w	r3, [r0], #12
 800365a:	f7ff fd7b 	bl	8003154 <_ZN8CTimeoutC1Ev>
 800365e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8003662:	f7ff fd8e 	bl	8003182 <_ZN13CMovAvgBufferIttLt20EEC1Ev>
	m_pAdc = NULL;
 8003666:	2300      	movs	r3, #0
 8003668:	622b      	str	r3, [r5, #32]
	m_Scale = 1;
 800366a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800366e:	606a      	str	r2, [r5, #4]
	m_Offset = 0;
 8003670:	2200      	movs	r2, #0
 8003672:	60aa      	str	r2, [r5, #8]
	m_pTimer = NULL;
 8003674:	61eb      	str	r3, [r5, #28]
 8003676:	3558      	adds	r5, #88	; 0x58
 8003678:	3c01      	subs	r4, #1
 800367a:	e7e8      	b.n	800364e <main+0x416>
	DMD Dmd(2, 1);
 800367c:	2201      	movs	r2, #1
 800367e:	2102      	movs	r1, #2
 8003680:	a86c      	add	r0, sp, #432	; 0x1b0
 8003682:	f7fe fe3d 	bl	8002300 <_ZN3DMDC1Ehh>
	Dmd.SelectFont(Arial_14);
 8003686:	4942      	ldr	r1, [pc, #264]	; (8003790 <main+0x558>)
 8003688:	a86c      	add	r0, sp, #432	; 0x1b0
 800368a:	f7ff f82d 	bl	80026e8 <_ZN3DMD10SelectFontEPKh>
	Dmd.Init(SPI2, &SpiDma, &MainTimer, &pSS, &pA, &pB, &pOE);
 800368e:	230a      	movs	r3, #10
 8003690:	9304      	str	r3, [sp, #16]
 8003692:	f20d 436c 	addw	r3, sp, #1132	; 0x46c
 8003696:	9303      	str	r3, [sp, #12]
 8003698:	f20d 433c 	addw	r3, sp, #1084	; 0x43c
 800369c:	9302      	str	r3, [sp, #8]
 800369e:	f20d 434c 	addw	r3, sp, #1100	; 0x44c
 80036a2:	9301      	str	r3, [sp, #4]
 80036a4:	f20d 435c 	addw	r3, sp, #1116	; 0x45c
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 80036ae:	f50d 6280 	add.w	r2, sp, #1024	; 0x400
 80036b2:	4935      	ldr	r1, [pc, #212]	; (8003788 <main+0x550>)
 80036b4:	a86c      	add	r0, sp, #432	; 0x1b0
 80036b6:	f7fe fe57 	bl	8002368 <_ZN3DMD4InitEP11SPI_TypeDefP4IDmaP6ITimerP5IGpioS7_S7_S7_t>
	for (uint16_t i = 0; i < 2; i++)
 80036ba:	2400      	movs	r4, #0
 80036bc:	2c01      	cmp	r4, #1
 80036be:	dc1c      	bgt.n	80036fa <main+0x4c2>
		AnalogInput[i].Initialize(&Adc[i], &MainTimer);
 80036c0:	f50d 639b 	add.w	r3, sp, #1240	; 0x4d8
 80036c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	m_pAdc = pAdc;
 80036c8:	2558      	movs	r5, #88	; 0x58
 80036ca:	fb05 f504 	mul.w	r5, r5, r4
 80036ce:	aacb      	add	r2, sp, #812	; 0x32c
 80036d0:	442a      	add	r2, r5
 80036d2:	6213      	str	r3, [r2, #32]
	m_pTimer = pTimer;
 80036d4:	f50d 61f9 	add.w	r1, sp, #1992	; 0x7c8
 80036d8:	61d1      	str	r1, [r2, #28]
	m_Timeout.Init(m_pTimer);
 80036da:	f105 0008 	add.w	r0, r5, #8
 80036de:	abcb      	add	r3, sp, #812	; 0x32c
 80036e0:	4418      	add	r0, r3
 80036e2:	3004      	adds	r0, #4
 80036e4:	f7ff fd11 	bl	800310a <_ZN8CTimeout4InitEP6ITimer>
	m_adcDataBuffer.Clear();
 80036e8:	3520      	adds	r5, #32
 80036ea:	abcb      	add	r3, sp, #812	; 0x32c
 80036ec:	441d      	add	r5, r3
 80036ee:	1d28      	adds	r0, r5, #4
 80036f0:	f7ff fd3d 	bl	800316e <_ZN13CMovAvgBufferIttLt20EE5ClearEv>
	for (uint16_t i = 0; i < 2; i++)
 80036f4:	3401      	adds	r4, #1
 80036f6:	b2a4      	uxth	r4, r4
 80036f8:	e7e0      	b.n	80036bc <main+0x484>
	CACDisplayDmd AcDisplay;
 80036fa:	a864      	add	r0, sp, #400	; 0x190
 80036fc:	f7ff f964 	bl	80029c8 <_ZN13CACDisplayDmdC1Ev>
	AcDisplay.Init(&ACFrequencyMeter, &AnalogInput[0], &Dmd, &MainTimer);
 8003700:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	ab6c      	add	r3, sp, #432	; 0x1b0
 8003708:	aacb      	add	r2, sp, #812	; 0x32c
 800370a:	a9f7      	add	r1, sp, #988	; 0x3dc
 800370c:	a864      	add	r0, sp, #400	; 0x190
 800370e:	f7ff f951 	bl	80029b4 <_ZN13CACDisplayDmd4InitEP17CACFrequencyMeterP12CAnalogInputP3DMDP6ITimer>
	CSerialPort SerialPort;
 8003712:	a807      	add	r0, sp, #28
 8003714:	f7fe fd70 	bl	80021f8 <_ZN11CSerialPortC1Ev>
	SerialPort.Init(&Uart);
 8003718:	f50d 619d 	add.w	r1, sp, #1256	; 0x4e8
 800371c:	a807      	add	r0, sp, #28
 800371e:	f7fe fd60 	bl	80021e2 <_ZN11CSerialPort4InitEP6IUsart>
	};
	SerialPort.AddFunction(0,getAnalogInputParams);
 8003722:	4a1c      	ldr	r2, [pc, #112]	; (8003794 <main+0x55c>)
 8003724:	2100      	movs	r1, #0
 8003726:	a807      	add	r0, sp, #28
 8003728:	f7fe fd5e 	bl	80021e8 <_ZN11CSerialPort11AddFunctionEhPFvPcS0_E>
 800372c:	e040      	b.n	80037b0 <main+0x578>
	while (1)
	{
		Uart.Execute();

		ACFrequencyMeter.Execute();
		for (uint16_t i = 0; i < 2; i++)
 800372e:	3401      	adds	r4, #1
 8003730:	b2a4      	uxth	r4, r4
 8003732:	2c01      	cmp	r4, #1
 8003734:	dc32      	bgt.n	800379c <main+0x564>
			AnalogInput[i].Execute();
 8003736:	2558      	movs	r5, #88	; 0x58
 8003738:	abcb      	add	r3, sp, #812	; 0x32c
 800373a:	fb05 3504 	mla	r5, r5, r4, r3
}

inline void CAnalogInput::Execute()
{
	if (!m_pTimer) return;
 800373e:	69eb      	ldr	r3, [r5, #28]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0f4      	beq.n	800372e <main+0x4f6>
	if (!m_Timeout.HasElapsed()) return;
 8003744:	f105 060c 	add.w	r6, r5, #12
 8003748:	4630      	mov	r0, r6
 800374a:	f7ff fcef 	bl	800312c <_ZN8CTimeout10HasElapsedEv>
 800374e:	2800      	cmp	r0, #0
 8003750:	d0ed      	beq.n	800372e <main+0x4f6>
	m_Timeout.Reset();
 8003752:	4630      	mov	r0, r6
 8003754:	f7ff fcdb 	bl	800310e <_ZN8CTimeout5ResetEv>
	m_adcDataBuffer.AddSample(m_pAdc->Read());
 8003758:	f105 0624 	add.w	r6, r5, #36	; 0x24
 800375c:	6a28      	ldr	r0, [r5, #32]
 800375e:	6803      	ldr	r3, [r0, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4798      	blx	r3
 8003764:	4601      	mov	r1, r0
 8003766:	4630      	mov	r0, r6
 8003768:	f7ff fd45 	bl	80031f6 <_ZN13CMovAvgBufferIttLt20EE9AddSampleEt>
 800376c:	e7df      	b.n	800372e <main+0x4f6>
 800376e:	bf00      	nop
 8003770:	40010800 	.word	0x40010800
 8003774:	4001244c 	.word	0x4001244c
 8003778:	40020008 	.word	0x40020008
 800377c:	40010c00 	.word	0x40010c00
 8003780:	40020058 	.word	0x40020058
 8003784:	40020000 	.word	0x40020000
 8003788:	40003800 	.word	0x40003800
 800378c:	0800444c 	.word	0x0800444c
 8003790:	08004454 	.word	0x08004454
 8003794:	08003161 	.word	0x08003161
 8003798:	40012400 	.word	0x40012400

		AcDisplay.Execute();
 800379c:	a864      	add	r0, sp, #400	; 0x190
 800379e:	f7ff f925 	bl	80029ec <_ZN13CACDisplayDmd7ExecuteEv>
		Dmd.Execute();
 80037a2:	a86c      	add	r0, sp, #432	; 0x1b0
 80037a4:	f7fe feaf 	bl	8002506 <_ZN3DMD7ExecuteEv>

		HeartBeat.Execute();
 80037a8:	f50d 60f4 	add.w	r0, sp, #1952	; 0x7a0
 80037ac:	f7ff f9c8 	bl	8002b40 <_ZN10CHeartBeat7ExecuteEv>
		Uart.Execute();
 80037b0:	f50d 609d 	add.w	r0, sp, #1256	; 0x4e8
 80037b4:	f7ff fc6b 	bl	800308e <_ZN15CSTM32F10xUSART7ExecuteEv>
		ACFrequencyMeter.Execute();
 80037b8:	a8f7      	add	r0, sp, #988	; 0x3dc
 80037ba:	f7ff fc79 	bl	80030b0 <_ZN17CACFrequencyMeter7ExecuteEv>
		for (uint16_t i = 0; i < 2; i++)
 80037be:	2400      	movs	r4, #0
 80037c0:	e7b7      	b.n	8003732 <main+0x4fa>
 80037c2:	bf00      	nop

080037c4 <_ZN12CAnalogInputD1Ev>:
inline CAnalogInput::~CAnalogInput()
 80037c4:	b510      	push	{r4, lr}
 80037c6:	4604      	mov	r4, r0
 80037c8:	4b03      	ldr	r3, [pc, #12]	; (80037d8 <_ZN12CAnalogInputD1Ev+0x14>)
 80037ca:	f840 3b0c 	str.w	r3, [r0], #12
 80037ce:	f7ff fc95 	bl	80030fc <_ZN8CTimeoutD1Ev>
}
 80037d2:	4620      	mov	r0, r4
 80037d4:	bd10      	pop	{r4, pc}
 80037d6:	bf00      	nop
 80037d8:	0800444c 	.word	0x0800444c

080037dc <_ZN12CAnalogInputD0Ev>:
inline CAnalogInput::~CAnalogInput()
 80037dc:	b510      	push	{r4, lr}
 80037de:	4604      	mov	r4, r0
 80037e0:	4b04      	ldr	r3, [pc, #16]	; (80037f4 <_ZN12CAnalogInputD0Ev+0x18>)
 80037e2:	f840 3b0c 	str.w	r3, [r0], #12
 80037e6:	f7ff fc89 	bl	80030fc <_ZN8CTimeoutD1Ev>
}
 80037ea:	4620      	mov	r0, r4
 80037ec:	f000 fa08 	bl	8003c00 <_ZdlPv>
 80037f0:	4620      	mov	r0, r4
 80037f2:	bd10      	pop	{r4, pc}
 80037f4:	0800444c 	.word	0x0800444c

080037f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80037f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003830 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80037fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80037fe:	e003      	b.n	8003808 <LoopCopyDataInit>

08003800 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003800:	4b0c      	ldr	r3, [pc, #48]	; (8003834 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8003802:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003804:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003806:	3104      	adds	r1, #4

08003808 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003808:	480b      	ldr	r0, [pc, #44]	; (8003838 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800380a:	4b0c      	ldr	r3, [pc, #48]	; (800383c <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 800380c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800380e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003810:	d3f6      	bcc.n	8003800 <CopyDataInit>
	ldr	r2, =_sbss
 8003812:	4a0b      	ldr	r2, [pc, #44]	; (8003840 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8003814:	e002      	b.n	800381c <LoopFillZerobss>

08003816 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003816:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003818:	f842 3b04 	str.w	r3, [r2], #4

0800381c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800381c:	4b09      	ldr	r3, [pc, #36]	; (8003844 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 800381e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003820:	d3f9      	bcc.n	8003816 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003822:	f000 f83d 	bl	80038a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003826:	f000 f9ed 	bl	8003c04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800382a:	f7ff fd05 	bl	8003238 <main>
	bx	lr
 800382e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003830:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8003834:	08004914 	.word	0x08004914
	ldr	r0, =_sdata
 8003838:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800383c:	20000518 	.word	0x20000518
	ldr	r2, =_sbss
 8003840:	20000518 	.word	0x20000518
	ldr	r3, = _ebss
 8003844:	2000057c 	.word	0x2000057c

08003848 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003848:	e7fe      	b.n	8003848 <ADC1_2_IRQHandler>

0800384a <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800384a:	b480      	push	{r7}
 800384c:	af00      	add	r7, sp, #0
}
 800384e:	bf00      	nop
 8003850:	46bd      	mov	sp, r7
 8003852:	bc80      	pop	{r7}
 8003854:	4770      	bx	lr

08003856 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003856:	b480      	push	{r7}
 8003858:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800385a:	e7fe      	b.n	800385a <HardFault_Handler+0x4>

0800385c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8003860:	e7fe      	b.n	8003860 <MemManage_Handler+0x4>

08003862 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003862:	b480      	push	{r7}
 8003864:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8003866:	e7fe      	b.n	8003866 <BusFault_Handler+0x4>

08003868 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800386c:	e7fe      	b.n	800386c <UsageFault_Handler+0x4>

0800386e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800386e:	b480      	push	{r7}
 8003870:	af00      	add	r7, sp, #0
}
 8003872:	bf00      	nop
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr

0800387a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800387a:	b480      	push	{r7}
 800387c:	af00      	add	r7, sp, #0
}
 800387e:	bf00      	nop
 8003880:	46bd      	mov	sp, r7
 8003882:	bc80      	pop	{r7}
 8003884:	4770      	bx	lr

08003886 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8003886:	b480      	push	{r7}
 8003888:	af00      	add	r7, sp, #0
}
 800388a:	bf00      	nop
 800388c:	46bd      	mov	sp, r7
 800388e:	bc80      	pop	{r7}
 8003890:	4770      	bx	lr

08003892 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8003892:	b480      	push	{r7}
 8003894:	af00      	add	r7, sp, #0
}
 8003896:	bf00      	nop
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	4770      	bx	lr
	...

080038a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80038a4:	4a15      	ldr	r2, [pc, #84]	; (80038fc <SystemInit+0x5c>)
 80038a6:	4b15      	ldr	r3, [pc, #84]	; (80038fc <SystemInit+0x5c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f043 0301 	orr.w	r3, r3, #1
 80038ae:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80038b0:	4912      	ldr	r1, [pc, #72]	; (80038fc <SystemInit+0x5c>)
 80038b2:	4b12      	ldr	r3, [pc, #72]	; (80038fc <SystemInit+0x5c>)
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	4b12      	ldr	r3, [pc, #72]	; (8003900 <SystemInit+0x60>)
 80038b8:	4013      	ands	r3, r2
 80038ba:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80038bc:	4a0f      	ldr	r2, [pc, #60]	; (80038fc <SystemInit+0x5c>)
 80038be:	4b0f      	ldr	r3, [pc, #60]	; (80038fc <SystemInit+0x5c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80038c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ca:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80038cc:	4a0b      	ldr	r2, [pc, #44]	; (80038fc <SystemInit+0x5c>)
 80038ce:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <SystemInit+0x5c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038d6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80038d8:	4a08      	ldr	r2, [pc, #32]	; (80038fc <SystemInit+0x5c>)
 80038da:	4b08      	ldr	r3, [pc, #32]	; (80038fc <SystemInit+0x5c>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80038e2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80038e4:	4b05      	ldr	r3, [pc, #20]	; (80038fc <SystemInit+0x5c>)
 80038e6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80038ea:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80038ec:	f000 f80c 	bl	8003908 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80038f0:	4b04      	ldr	r3, [pc, #16]	; (8003904 <SystemInit+0x64>)
 80038f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80038f6:	609a      	str	r2, [r3, #8]
#endif 
}
 80038f8:	bf00      	nop
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40021000 	.word	0x40021000
 8003900:	f8ff0000 	.word	0xf8ff0000
 8003904:	e000ed00 	.word	0xe000ed00

08003908 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 800390c:	f000 f802 	bl	8003914 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8003910:	bf00      	nop
 8003912:	bd80      	pop	{r7, pc}

08003914 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800391a:	2300      	movs	r3, #0
 800391c:	607b      	str	r3, [r7, #4]
 800391e:	2300      	movs	r3, #0
 8003920:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003922:	4a3a      	ldr	r2, [pc, #232]	; (8003a0c <SetSysClockTo72+0xf8>)
 8003924:	4b39      	ldr	r3, [pc, #228]	; (8003a0c <SetSysClockTo72+0xf8>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800392c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800392e:	4b37      	ldr	r3, [pc, #220]	; (8003a0c <SetSysClockTo72+0xf8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003936:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3301      	adds	r3, #1
 800393c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d103      	bne.n	800394c <SetSysClockTo72+0x38>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800394a:	d1f0      	bne.n	800392e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800394c:	4b2f      	ldr	r3, [pc, #188]	; (8003a0c <SetSysClockTo72+0xf8>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003958:	2301      	movs	r3, #1
 800395a:	603b      	str	r3, [r7, #0]
 800395c:	e001      	b.n	8003962 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800395e:	2300      	movs	r3, #0
 8003960:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d14b      	bne.n	8003a00 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8003968:	4a29      	ldr	r2, [pc, #164]	; (8003a10 <SetSysClockTo72+0xfc>)
 800396a:	4b29      	ldr	r3, [pc, #164]	; (8003a10 <SetSysClockTo72+0xfc>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f043 0310 	orr.w	r3, r3, #16
 8003972:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8003974:	4a26      	ldr	r2, [pc, #152]	; (8003a10 <SetSysClockTo72+0xfc>)
 8003976:	4b26      	ldr	r3, [pc, #152]	; (8003a10 <SetSysClockTo72+0xfc>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f023 0303 	bic.w	r3, r3, #3
 800397e:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8003980:	4a23      	ldr	r2, [pc, #140]	; (8003a10 <SetSysClockTo72+0xfc>)
 8003982:	4b23      	ldr	r3, [pc, #140]	; (8003a10 <SetSysClockTo72+0xfc>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f043 0302 	orr.w	r3, r3, #2
 800398a:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800398c:	4a1f      	ldr	r2, [pc, #124]	; (8003a0c <SetSysClockTo72+0xf8>)
 800398e:	4b1f      	ldr	r3, [pc, #124]	; (8003a0c <SetSysClockTo72+0xf8>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8003994:	4a1d      	ldr	r2, [pc, #116]	; (8003a0c <SetSysClockTo72+0xf8>)
 8003996:	4b1d      	ldr	r3, [pc, #116]	; (8003a0c <SetSysClockTo72+0xf8>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800399c:	4a1b      	ldr	r2, [pc, #108]	; (8003a0c <SetSysClockTo72+0xf8>)
 800399e:	4b1b      	ldr	r3, [pc, #108]	; (8003a0c <SetSysClockTo72+0xf8>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039a6:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80039a8:	4a18      	ldr	r2, [pc, #96]	; (8003a0c <SetSysClockTo72+0xf8>)
 80039aa:	4b18      	ldr	r3, [pc, #96]	; (8003a0c <SetSysClockTo72+0xf8>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80039b2:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80039b4:	4a15      	ldr	r2, [pc, #84]	; (8003a0c <SetSysClockTo72+0xf8>)
 80039b6:	4b15      	ldr	r3, [pc, #84]	; (8003a0c <SetSysClockTo72+0xf8>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80039be:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80039c0:	4a12      	ldr	r2, [pc, #72]	; (8003a0c <SetSysClockTo72+0xf8>)
 80039c2:	4b12      	ldr	r3, [pc, #72]	; (8003a0c <SetSysClockTo72+0xf8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039ca:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80039cc:	bf00      	nop
 80039ce:	4b0f      	ldr	r3, [pc, #60]	; (8003a0c <SetSysClockTo72+0xf8>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0f9      	beq.n	80039ce <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80039da:	4a0c      	ldr	r2, [pc, #48]	; (8003a0c <SetSysClockTo72+0xf8>)
 80039dc:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <SetSysClockTo72+0xf8>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f023 0303 	bic.w	r3, r3, #3
 80039e4:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80039e6:	4a09      	ldr	r2, [pc, #36]	; (8003a0c <SetSysClockTo72+0xf8>)
 80039e8:	4b08      	ldr	r3, [pc, #32]	; (8003a0c <SetSysClockTo72+0xf8>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f043 0302 	orr.w	r3, r3, #2
 80039f0:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80039f2:	bf00      	nop
 80039f4:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <SetSysClockTo72+0xf8>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 030c 	and.w	r3, r3, #12
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d1f9      	bne.n	80039f4 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bc80      	pop	{r7}
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	40022000 	.word	0x40022000

08003a14 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
	int div = 1;
 8003a20:	2301      	movs	r3, #1
 8003a22:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8003a24:	e004      	b.n	8003a30 <ts_itoa+0x1c>
		div *= base;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	fb02 f303 	mul.w	r3, r2, r3
 8003a2e:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d2f3      	bcs.n	8003a26 <ts_itoa+0x12>

	while (div != 0)
 8003a3e:	e029      	b.n	8003a94 <ts_itoa+0x80>
	{
		int num = d/div;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a48:	613b      	str	r3, [r7, #16]
		d = d%div;
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a52:	fb02 f201 	mul.w	r2, r2, r1
 8003a56:	1a9b      	subs	r3, r3, r2
 8003a58:	60bb      	str	r3, [r7, #8]
		div /= base;
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003a62:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	2b09      	cmp	r3, #9
 8003a68:	dd0a      	ble.n	8003a80 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	1c59      	adds	r1, r3, #1
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	6011      	str	r1, [r2, #0]
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	3237      	adds	r2, #55	; 0x37
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	701a      	strb	r2, [r3, #0]
 8003a7e:	e009      	b.n	8003a94 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	1c59      	adds	r1, r3, #1
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	6011      	str	r1, [r2, #0]
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	3230      	adds	r2, #48	; 0x30
 8003a90:	b2d2      	uxtb	r2, r2
 8003a92:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1d2      	bne.n	8003a40 <ts_itoa+0x2c>
	}
}
 8003a9a:	bf00      	nop
 8003a9c:	371c      	adds	r7, #28
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr

08003aa4 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b088      	sub	sp, #32
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8003ab4:	e07d      	b.n	8003bb2 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	2b25      	cmp	r3, #37	; 0x25
 8003abc:	d171      	bne.n	8003ba2 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	60bb      	str	r3, [r7, #8]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	2b64      	cmp	r3, #100	; 0x64
 8003aca:	d01e      	beq.n	8003b0a <ts_formatstring+0x66>
 8003acc:	2b64      	cmp	r3, #100	; 0x64
 8003ace:	dc06      	bgt.n	8003ade <ts_formatstring+0x3a>
 8003ad0:	2b58      	cmp	r3, #88	; 0x58
 8003ad2:	d050      	beq.n	8003b76 <ts_formatstring+0xd2>
 8003ad4:	2b63      	cmp	r3, #99	; 0x63
 8003ad6:	d00e      	beq.n	8003af6 <ts_formatstring+0x52>
 8003ad8:	2b25      	cmp	r3, #37	; 0x25
 8003ada:	d058      	beq.n	8003b8e <ts_formatstring+0xea>
 8003adc:	e05d      	b.n	8003b9a <ts_formatstring+0xf6>
 8003ade:	2b73      	cmp	r3, #115	; 0x73
 8003ae0:	d02b      	beq.n	8003b3a <ts_formatstring+0x96>
 8003ae2:	2b73      	cmp	r3, #115	; 0x73
 8003ae4:	dc02      	bgt.n	8003aec <ts_formatstring+0x48>
 8003ae6:	2b69      	cmp	r3, #105	; 0x69
 8003ae8:	d00f      	beq.n	8003b0a <ts_formatstring+0x66>
 8003aea:	e056      	b.n	8003b9a <ts_formatstring+0xf6>
 8003aec:	2b75      	cmp	r3, #117	; 0x75
 8003aee:	d037      	beq.n	8003b60 <ts_formatstring+0xbc>
 8003af0:	2b78      	cmp	r3, #120	; 0x78
 8003af2:	d040      	beq.n	8003b76 <ts_formatstring+0xd2>
 8003af4:	e051      	b.n	8003b9a <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	1c5a      	adds	r2, r3, #1
 8003afa:	60fa      	str	r2, [r7, #12]
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	1d11      	adds	r1, r2, #4
 8003b00:	6079      	str	r1, [r7, #4]
 8003b02:	6812      	ldr	r2, [r2, #0]
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	701a      	strb	r2, [r3, #0]
				break;
 8003b08:	e047      	b.n	8003b9a <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	1d1a      	adds	r2, r3, #4
 8003b0e:	607a      	str	r2, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	da07      	bge.n	8003b2a <ts_formatstring+0x86>
					{
						val *= -1;
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	425b      	negs	r3, r3
 8003b1e:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	1c5a      	adds	r2, r3, #1
 8003b24:	60fa      	str	r2, [r7, #12]
 8003b26:	222d      	movs	r2, #45	; 0x2d
 8003b28:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8003b2a:	69f9      	ldr	r1, [r7, #28]
 8003b2c:	f107 030c 	add.w	r3, r7, #12
 8003b30:	220a      	movs	r2, #10
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff ff6e 	bl	8003a14 <ts_itoa>
				}
				break;
 8003b38:	e02f      	b.n	8003b9a <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	1d1a      	adds	r2, r3, #4
 8003b3e:	607a      	str	r2, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8003b44:	e007      	b.n	8003b56 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	60fa      	str	r2, [r7, #12]
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	1c51      	adds	r1, r2, #1
 8003b50:	61b9      	str	r1, [r7, #24]
 8003b52:	7812      	ldrb	r2, [r2, #0]
 8003b54:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f3      	bne.n	8003b46 <ts_formatstring+0xa2>
					}
				}
				break;
 8003b5e:	e01c      	b.n	8003b9a <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	1d1a      	adds	r2, r3, #4
 8003b64:	607a      	str	r2, [r7, #4]
 8003b66:	6819      	ldr	r1, [r3, #0]
 8003b68:	f107 030c 	add.w	r3, r7, #12
 8003b6c:	220a      	movs	r2, #10
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff ff50 	bl	8003a14 <ts_itoa>
				break;
 8003b74:	e011      	b.n	8003b9a <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	1d1a      	adds	r2, r3, #4
 8003b7a:	607a      	str	r2, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4619      	mov	r1, r3
 8003b80:	f107 030c 	add.w	r3, r7, #12
 8003b84:	2210      	movs	r2, #16
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7ff ff44 	bl	8003a14 <ts_itoa>
				break;
 8003b8c:	e005      	b.n	8003b9a <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	1c5a      	adds	r2, r3, #1
 8003b92:	60fa      	str	r2, [r7, #12]
 8003b94:	2225      	movs	r2, #37	; 0x25
 8003b96:	701a      	strb	r2, [r3, #0]
				  break;
 8003b98:	bf00      	nop
			}
			fmt++;
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	60bb      	str	r3, [r7, #8]
 8003ba0:	e007      	b.n	8003bb2 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	60fa      	str	r2, [r7, #12]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	1c51      	adds	r1, r2, #1
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	7812      	ldrb	r2, [r2, #0]
 8003bb0:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f47f af7d 	bne.w	8003ab6 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	1ad3      	subs	r3, r2, r3
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3720      	adds	r7, #32
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8003bd2:	b40e      	push	{r1, r2, r3}
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8003bdc:	f107 0320 	add.w	r3, r7, #32
 8003be0:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	69f9      	ldr	r1, [r7, #28]
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7ff ff5c 	bl	8003aa4 <ts_formatstring>
 8003bec:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8003bee:	68fb      	ldr	r3, [r7, #12]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bfa:	b003      	add	sp, #12
 8003bfc:	4770      	bx	lr
	...

08003c00 <_ZdlPv>:
 8003c00:	f000 b82c 	b.w	8003c5c <free>

08003c04 <__libc_init_array>:
 8003c04:	b570      	push	{r4, r5, r6, lr}
 8003c06:	2500      	movs	r5, #0
 8003c08:	4e0c      	ldr	r6, [pc, #48]	; (8003c3c <__libc_init_array+0x38>)
 8003c0a:	4c0d      	ldr	r4, [pc, #52]	; (8003c40 <__libc_init_array+0x3c>)
 8003c0c:	1ba4      	subs	r4, r4, r6
 8003c0e:	10a4      	asrs	r4, r4, #2
 8003c10:	42a5      	cmp	r5, r4
 8003c12:	d109      	bne.n	8003c28 <__libc_init_array+0x24>
 8003c14:	f000 fb7c 	bl	8004310 <_init>
 8003c18:	2500      	movs	r5, #0
 8003c1a:	4e0a      	ldr	r6, [pc, #40]	; (8003c44 <__libc_init_array+0x40>)
 8003c1c:	4c0a      	ldr	r4, [pc, #40]	; (8003c48 <__libc_init_array+0x44>)
 8003c1e:	1ba4      	subs	r4, r4, r6
 8003c20:	10a4      	asrs	r4, r4, #2
 8003c22:	42a5      	cmp	r5, r4
 8003c24:	d105      	bne.n	8003c32 <__libc_init_array+0x2e>
 8003c26:	bd70      	pop	{r4, r5, r6, pc}
 8003c28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c2c:	4798      	blx	r3
 8003c2e:	3501      	adds	r5, #1
 8003c30:	e7ee      	b.n	8003c10 <__libc_init_array+0xc>
 8003c32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c36:	4798      	blx	r3
 8003c38:	3501      	adds	r5, #1
 8003c3a:	e7f2      	b.n	8003c22 <__libc_init_array+0x1e>
 8003c3c:	0800490c 	.word	0x0800490c
 8003c40:	0800490c 	.word	0x0800490c
 8003c44:	0800490c 	.word	0x0800490c
 8003c48:	08004910 	.word	0x08004910

08003c4c <malloc>:
 8003c4c:	4b02      	ldr	r3, [pc, #8]	; (8003c58 <malloc+0xc>)
 8003c4e:	4601      	mov	r1, r0
 8003c50:	6818      	ldr	r0, [r3, #0]
 8003c52:	f000 b80b 	b.w	8003c6c <_malloc_r>
 8003c56:	bf00      	nop
 8003c58:	20000424 	.word	0x20000424

08003c5c <free>:
 8003c5c:	4b02      	ldr	r3, [pc, #8]	; (8003c68 <free+0xc>)
 8003c5e:	4601      	mov	r1, r0
 8003c60:	6818      	ldr	r0, [r3, #0]
 8003c62:	f000 ba89 	b.w	8004178 <_free_r>
 8003c66:	bf00      	nop
 8003c68:	20000424 	.word	0x20000424

08003c6c <_malloc_r>:
 8003c6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c70:	f101 040b 	add.w	r4, r1, #11
 8003c74:	2c16      	cmp	r4, #22
 8003c76:	4681      	mov	r9, r0
 8003c78:	d907      	bls.n	8003c8a <_malloc_r+0x1e>
 8003c7a:	f034 0407 	bics.w	r4, r4, #7
 8003c7e:	d505      	bpl.n	8003c8c <_malloc_r+0x20>
 8003c80:	230c      	movs	r3, #12
 8003c82:	f8c9 3000 	str.w	r3, [r9]
 8003c86:	2600      	movs	r6, #0
 8003c88:	e131      	b.n	8003eee <_malloc_r+0x282>
 8003c8a:	2410      	movs	r4, #16
 8003c8c:	428c      	cmp	r4, r1
 8003c8e:	d3f7      	bcc.n	8003c80 <_malloc_r+0x14>
 8003c90:	4648      	mov	r0, r9
 8003c92:	f000 f9ff 	bl	8004094 <__malloc_lock>
 8003c96:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8003c9a:	4d9b      	ldr	r5, [pc, #620]	; (8003f08 <_malloc_r+0x29c>)
 8003c9c:	d236      	bcs.n	8003d0c <_malloc_r+0xa0>
 8003c9e:	f104 0208 	add.w	r2, r4, #8
 8003ca2:	442a      	add	r2, r5
 8003ca4:	6856      	ldr	r6, [r2, #4]
 8003ca6:	f1a2 0108 	sub.w	r1, r2, #8
 8003caa:	428e      	cmp	r6, r1
 8003cac:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8003cb0:	d102      	bne.n	8003cb8 <_malloc_r+0x4c>
 8003cb2:	68d6      	ldr	r6, [r2, #12]
 8003cb4:	42b2      	cmp	r2, r6
 8003cb6:	d010      	beq.n	8003cda <_malloc_r+0x6e>
 8003cb8:	6873      	ldr	r3, [r6, #4]
 8003cba:	68f2      	ldr	r2, [r6, #12]
 8003cbc:	68b1      	ldr	r1, [r6, #8]
 8003cbe:	f023 0303 	bic.w	r3, r3, #3
 8003cc2:	60ca      	str	r2, [r1, #12]
 8003cc4:	4433      	add	r3, r6
 8003cc6:	6091      	str	r1, [r2, #8]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	605a      	str	r2, [r3, #4]
 8003cd0:	4648      	mov	r0, r9
 8003cd2:	f000 f9e5 	bl	80040a0 <__malloc_unlock>
 8003cd6:	3608      	adds	r6, #8
 8003cd8:	e109      	b.n	8003eee <_malloc_r+0x282>
 8003cda:	3302      	adds	r3, #2
 8003cdc:	4a8b      	ldr	r2, [pc, #556]	; (8003f0c <_malloc_r+0x2a0>)
 8003cde:	692e      	ldr	r6, [r5, #16]
 8003ce0:	4611      	mov	r1, r2
 8003ce2:	4296      	cmp	r6, r2
 8003ce4:	d06d      	beq.n	8003dc2 <_malloc_r+0x156>
 8003ce6:	6870      	ldr	r0, [r6, #4]
 8003ce8:	f020 0003 	bic.w	r0, r0, #3
 8003cec:	1b07      	subs	r7, r0, r4
 8003cee:	2f0f      	cmp	r7, #15
 8003cf0:	dd47      	ble.n	8003d82 <_malloc_r+0x116>
 8003cf2:	1933      	adds	r3, r6, r4
 8003cf4:	f044 0401 	orr.w	r4, r4, #1
 8003cf8:	6074      	str	r4, [r6, #4]
 8003cfa:	616b      	str	r3, [r5, #20]
 8003cfc:	612b      	str	r3, [r5, #16]
 8003cfe:	60da      	str	r2, [r3, #12]
 8003d00:	609a      	str	r2, [r3, #8]
 8003d02:	f047 0201 	orr.w	r2, r7, #1
 8003d06:	605a      	str	r2, [r3, #4]
 8003d08:	5037      	str	r7, [r6, r0]
 8003d0a:	e7e1      	b.n	8003cd0 <_malloc_r+0x64>
 8003d0c:	0a63      	lsrs	r3, r4, #9
 8003d0e:	d02a      	beq.n	8003d66 <_malloc_r+0xfa>
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	d812      	bhi.n	8003d3a <_malloc_r+0xce>
 8003d14:	09a3      	lsrs	r3, r4, #6
 8003d16:	3338      	adds	r3, #56	; 0x38
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003d1e:	6856      	ldr	r6, [r2, #4]
 8003d20:	f1a2 0008 	sub.w	r0, r2, #8
 8003d24:	4286      	cmp	r6, r0
 8003d26:	d006      	beq.n	8003d36 <_malloc_r+0xca>
 8003d28:	6872      	ldr	r2, [r6, #4]
 8003d2a:	f022 0203 	bic.w	r2, r2, #3
 8003d2e:	1b11      	subs	r1, r2, r4
 8003d30:	290f      	cmp	r1, #15
 8003d32:	dd1c      	ble.n	8003d6e <_malloc_r+0x102>
 8003d34:	3b01      	subs	r3, #1
 8003d36:	3301      	adds	r3, #1
 8003d38:	e7d0      	b.n	8003cdc <_malloc_r+0x70>
 8003d3a:	2b14      	cmp	r3, #20
 8003d3c:	d801      	bhi.n	8003d42 <_malloc_r+0xd6>
 8003d3e:	335b      	adds	r3, #91	; 0x5b
 8003d40:	e7ea      	b.n	8003d18 <_malloc_r+0xac>
 8003d42:	2b54      	cmp	r3, #84	; 0x54
 8003d44:	d802      	bhi.n	8003d4c <_malloc_r+0xe0>
 8003d46:	0b23      	lsrs	r3, r4, #12
 8003d48:	336e      	adds	r3, #110	; 0x6e
 8003d4a:	e7e5      	b.n	8003d18 <_malloc_r+0xac>
 8003d4c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8003d50:	d802      	bhi.n	8003d58 <_malloc_r+0xec>
 8003d52:	0be3      	lsrs	r3, r4, #15
 8003d54:	3377      	adds	r3, #119	; 0x77
 8003d56:	e7df      	b.n	8003d18 <_malloc_r+0xac>
 8003d58:	f240 5254 	movw	r2, #1364	; 0x554
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d804      	bhi.n	8003d6a <_malloc_r+0xfe>
 8003d60:	0ca3      	lsrs	r3, r4, #18
 8003d62:	337c      	adds	r3, #124	; 0x7c
 8003d64:	e7d8      	b.n	8003d18 <_malloc_r+0xac>
 8003d66:	233f      	movs	r3, #63	; 0x3f
 8003d68:	e7d6      	b.n	8003d18 <_malloc_r+0xac>
 8003d6a:	237e      	movs	r3, #126	; 0x7e
 8003d6c:	e7d4      	b.n	8003d18 <_malloc_r+0xac>
 8003d6e:	2900      	cmp	r1, #0
 8003d70:	68f1      	ldr	r1, [r6, #12]
 8003d72:	db04      	blt.n	8003d7e <_malloc_r+0x112>
 8003d74:	68b3      	ldr	r3, [r6, #8]
 8003d76:	60d9      	str	r1, [r3, #12]
 8003d78:	608b      	str	r3, [r1, #8]
 8003d7a:	18b3      	adds	r3, r6, r2
 8003d7c:	e7a4      	b.n	8003cc8 <_malloc_r+0x5c>
 8003d7e:	460e      	mov	r6, r1
 8003d80:	e7d0      	b.n	8003d24 <_malloc_r+0xb8>
 8003d82:	2f00      	cmp	r7, #0
 8003d84:	616a      	str	r2, [r5, #20]
 8003d86:	612a      	str	r2, [r5, #16]
 8003d88:	db05      	blt.n	8003d96 <_malloc_r+0x12a>
 8003d8a:	4430      	add	r0, r6
 8003d8c:	6843      	ldr	r3, [r0, #4]
 8003d8e:	f043 0301 	orr.w	r3, r3, #1
 8003d92:	6043      	str	r3, [r0, #4]
 8003d94:	e79c      	b.n	8003cd0 <_malloc_r+0x64>
 8003d96:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003d9a:	d244      	bcs.n	8003e26 <_malloc_r+0x1ba>
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	08c0      	lsrs	r0, r0, #3
 8003da0:	1087      	asrs	r7, r0, #2
 8003da2:	fa02 f707 	lsl.w	r7, r2, r7
 8003da6:	686a      	ldr	r2, [r5, #4]
 8003da8:	3001      	adds	r0, #1
 8003daa:	433a      	orrs	r2, r7
 8003dac:	606a      	str	r2, [r5, #4]
 8003dae:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8003db2:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8003db6:	3a08      	subs	r2, #8
 8003db8:	60f2      	str	r2, [r6, #12]
 8003dba:	60b7      	str	r7, [r6, #8]
 8003dbc:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8003dc0:	60fe      	str	r6, [r7, #12]
 8003dc2:	2001      	movs	r0, #1
 8003dc4:	109a      	asrs	r2, r3, #2
 8003dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8003dca:	6868      	ldr	r0, [r5, #4]
 8003dcc:	4282      	cmp	r2, r0
 8003dce:	f200 809f 	bhi.w	8003f10 <_malloc_r+0x2a4>
 8003dd2:	4202      	tst	r2, r0
 8003dd4:	d106      	bne.n	8003de4 <_malloc_r+0x178>
 8003dd6:	f023 0303 	bic.w	r3, r3, #3
 8003dda:	0052      	lsls	r2, r2, #1
 8003ddc:	4202      	tst	r2, r0
 8003dde:	f103 0304 	add.w	r3, r3, #4
 8003de2:	d0fa      	beq.n	8003dda <_malloc_r+0x16e>
 8003de4:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8003de8:	46e0      	mov	r8, ip
 8003dea:	469e      	mov	lr, r3
 8003dec:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8003df0:	4546      	cmp	r6, r8
 8003df2:	d153      	bne.n	8003e9c <_malloc_r+0x230>
 8003df4:	f10e 0e01 	add.w	lr, lr, #1
 8003df8:	f01e 0f03 	tst.w	lr, #3
 8003dfc:	f108 0808 	add.w	r8, r8, #8
 8003e00:	d1f4      	bne.n	8003dec <_malloc_r+0x180>
 8003e02:	0798      	lsls	r0, r3, #30
 8003e04:	d179      	bne.n	8003efa <_malloc_r+0x28e>
 8003e06:	686b      	ldr	r3, [r5, #4]
 8003e08:	ea23 0302 	bic.w	r3, r3, r2
 8003e0c:	606b      	str	r3, [r5, #4]
 8003e0e:	6868      	ldr	r0, [r5, #4]
 8003e10:	0052      	lsls	r2, r2, #1
 8003e12:	4282      	cmp	r2, r0
 8003e14:	d87c      	bhi.n	8003f10 <_malloc_r+0x2a4>
 8003e16:	2a00      	cmp	r2, #0
 8003e18:	d07a      	beq.n	8003f10 <_malloc_r+0x2a4>
 8003e1a:	4673      	mov	r3, lr
 8003e1c:	4202      	tst	r2, r0
 8003e1e:	d1e1      	bne.n	8003de4 <_malloc_r+0x178>
 8003e20:	3304      	adds	r3, #4
 8003e22:	0052      	lsls	r2, r2, #1
 8003e24:	e7fa      	b.n	8003e1c <_malloc_r+0x1b0>
 8003e26:	0a42      	lsrs	r2, r0, #9
 8003e28:	2a04      	cmp	r2, #4
 8003e2a:	d815      	bhi.n	8003e58 <_malloc_r+0x1ec>
 8003e2c:	0982      	lsrs	r2, r0, #6
 8003e2e:	3238      	adds	r2, #56	; 0x38
 8003e30:	1c57      	adds	r7, r2, #1
 8003e32:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8003e36:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8003e3a:	45be      	cmp	lr, r7
 8003e3c:	d126      	bne.n	8003e8c <_malloc_r+0x220>
 8003e3e:	2001      	movs	r0, #1
 8003e40:	1092      	asrs	r2, r2, #2
 8003e42:	fa00 f202 	lsl.w	r2, r0, r2
 8003e46:	6868      	ldr	r0, [r5, #4]
 8003e48:	4310      	orrs	r0, r2
 8003e4a:	6068      	str	r0, [r5, #4]
 8003e4c:	f8c6 e00c 	str.w	lr, [r6, #12]
 8003e50:	60b7      	str	r7, [r6, #8]
 8003e52:	f8ce 6008 	str.w	r6, [lr, #8]
 8003e56:	e7b3      	b.n	8003dc0 <_malloc_r+0x154>
 8003e58:	2a14      	cmp	r2, #20
 8003e5a:	d801      	bhi.n	8003e60 <_malloc_r+0x1f4>
 8003e5c:	325b      	adds	r2, #91	; 0x5b
 8003e5e:	e7e7      	b.n	8003e30 <_malloc_r+0x1c4>
 8003e60:	2a54      	cmp	r2, #84	; 0x54
 8003e62:	d802      	bhi.n	8003e6a <_malloc_r+0x1fe>
 8003e64:	0b02      	lsrs	r2, r0, #12
 8003e66:	326e      	adds	r2, #110	; 0x6e
 8003e68:	e7e2      	b.n	8003e30 <_malloc_r+0x1c4>
 8003e6a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8003e6e:	d802      	bhi.n	8003e76 <_malloc_r+0x20a>
 8003e70:	0bc2      	lsrs	r2, r0, #15
 8003e72:	3277      	adds	r2, #119	; 0x77
 8003e74:	e7dc      	b.n	8003e30 <_malloc_r+0x1c4>
 8003e76:	f240 5754 	movw	r7, #1364	; 0x554
 8003e7a:	42ba      	cmp	r2, r7
 8003e7c:	bf9a      	itte	ls
 8003e7e:	0c82      	lsrls	r2, r0, #18
 8003e80:	327c      	addls	r2, #124	; 0x7c
 8003e82:	227e      	movhi	r2, #126	; 0x7e
 8003e84:	e7d4      	b.n	8003e30 <_malloc_r+0x1c4>
 8003e86:	68bf      	ldr	r7, [r7, #8]
 8003e88:	45be      	cmp	lr, r7
 8003e8a:	d004      	beq.n	8003e96 <_malloc_r+0x22a>
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	f022 0203 	bic.w	r2, r2, #3
 8003e92:	4290      	cmp	r0, r2
 8003e94:	d3f7      	bcc.n	8003e86 <_malloc_r+0x21a>
 8003e96:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8003e9a:	e7d7      	b.n	8003e4c <_malloc_r+0x1e0>
 8003e9c:	6870      	ldr	r0, [r6, #4]
 8003e9e:	68f7      	ldr	r7, [r6, #12]
 8003ea0:	f020 0003 	bic.w	r0, r0, #3
 8003ea4:	eba0 0a04 	sub.w	sl, r0, r4
 8003ea8:	f1ba 0f0f 	cmp.w	sl, #15
 8003eac:	dd10      	ble.n	8003ed0 <_malloc_r+0x264>
 8003eae:	68b2      	ldr	r2, [r6, #8]
 8003eb0:	1933      	adds	r3, r6, r4
 8003eb2:	f044 0401 	orr.w	r4, r4, #1
 8003eb6:	6074      	str	r4, [r6, #4]
 8003eb8:	60d7      	str	r7, [r2, #12]
 8003eba:	60ba      	str	r2, [r7, #8]
 8003ebc:	f04a 0201 	orr.w	r2, sl, #1
 8003ec0:	616b      	str	r3, [r5, #20]
 8003ec2:	612b      	str	r3, [r5, #16]
 8003ec4:	60d9      	str	r1, [r3, #12]
 8003ec6:	6099      	str	r1, [r3, #8]
 8003ec8:	605a      	str	r2, [r3, #4]
 8003eca:	f846 a000 	str.w	sl, [r6, r0]
 8003ece:	e6ff      	b.n	8003cd0 <_malloc_r+0x64>
 8003ed0:	f1ba 0f00 	cmp.w	sl, #0
 8003ed4:	db0f      	blt.n	8003ef6 <_malloc_r+0x28a>
 8003ed6:	4430      	add	r0, r6
 8003ed8:	6843      	ldr	r3, [r0, #4]
 8003eda:	f043 0301 	orr.w	r3, r3, #1
 8003ede:	6043      	str	r3, [r0, #4]
 8003ee0:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8003ee4:	4648      	mov	r0, r9
 8003ee6:	60df      	str	r7, [r3, #12]
 8003ee8:	60bb      	str	r3, [r7, #8]
 8003eea:	f000 f8d9 	bl	80040a0 <__malloc_unlock>
 8003eee:	4630      	mov	r0, r6
 8003ef0:	b003      	add	sp, #12
 8003ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ef6:	463e      	mov	r6, r7
 8003ef8:	e77a      	b.n	8003df0 <_malloc_r+0x184>
 8003efa:	f85c 0908 	ldr.w	r0, [ip], #-8
 8003efe:	3b01      	subs	r3, #1
 8003f00:	4584      	cmp	ip, r0
 8003f02:	f43f af7e 	beq.w	8003e02 <_malloc_r+0x196>
 8003f06:	e782      	b.n	8003e0e <_malloc_r+0x1a2>
 8003f08:	20000014 	.word	0x20000014
 8003f0c:	2000001c 	.word	0x2000001c
 8003f10:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8003f14:	f8db 6004 	ldr.w	r6, [fp, #4]
 8003f18:	f026 0603 	bic.w	r6, r6, #3
 8003f1c:	42b4      	cmp	r4, r6
 8003f1e:	d803      	bhi.n	8003f28 <_malloc_r+0x2bc>
 8003f20:	1b33      	subs	r3, r6, r4
 8003f22:	2b0f      	cmp	r3, #15
 8003f24:	f300 8095 	bgt.w	8004052 <_malloc_r+0x3e6>
 8003f28:	4a4f      	ldr	r2, [pc, #316]	; (8004068 <_malloc_r+0x3fc>)
 8003f2a:	eb0b 0306 	add.w	r3, fp, r6
 8003f2e:	6817      	ldr	r7, [r2, #0]
 8003f30:	4a4e      	ldr	r2, [pc, #312]	; (800406c <_malloc_r+0x400>)
 8003f32:	3710      	adds	r7, #16
 8003f34:	6811      	ldr	r1, [r2, #0]
 8003f36:	4427      	add	r7, r4
 8003f38:	3101      	adds	r1, #1
 8003f3a:	d005      	beq.n	8003f48 <_malloc_r+0x2dc>
 8003f3c:	494c      	ldr	r1, [pc, #304]	; (8004070 <_malloc_r+0x404>)
 8003f3e:	3901      	subs	r1, #1
 8003f40:	440f      	add	r7, r1
 8003f42:	3101      	adds	r1, #1
 8003f44:	4249      	negs	r1, r1
 8003f46:	400f      	ands	r7, r1
 8003f48:	4639      	mov	r1, r7
 8003f4a:	4648      	mov	r0, r9
 8003f4c:	9201      	str	r2, [sp, #4]
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	f000 f8ac 	bl	80040ac <_sbrk_r>
 8003f54:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003f58:	4680      	mov	r8, r0
 8003f5a:	d055      	beq.n	8004008 <_malloc_r+0x39c>
 8003f5c:	9b00      	ldr	r3, [sp, #0]
 8003f5e:	9a01      	ldr	r2, [sp, #4]
 8003f60:	4283      	cmp	r3, r0
 8003f62:	d901      	bls.n	8003f68 <_malloc_r+0x2fc>
 8003f64:	45ab      	cmp	fp, r5
 8003f66:	d14f      	bne.n	8004008 <_malloc_r+0x39c>
 8003f68:	4842      	ldr	r0, [pc, #264]	; (8004074 <_malloc_r+0x408>)
 8003f6a:	4543      	cmp	r3, r8
 8003f6c:	6801      	ldr	r1, [r0, #0]
 8003f6e:	4682      	mov	sl, r0
 8003f70:	eb07 0e01 	add.w	lr, r7, r1
 8003f74:	f8c0 e000 	str.w	lr, [r0]
 8003f78:	493f      	ldr	r1, [pc, #252]	; (8004078 <_malloc_r+0x40c>)
 8003f7a:	d113      	bne.n	8003fa4 <_malloc_r+0x338>
 8003f7c:	420b      	tst	r3, r1
 8003f7e:	d111      	bne.n	8003fa4 <_malloc_r+0x338>
 8003f80:	68ab      	ldr	r3, [r5, #8]
 8003f82:	443e      	add	r6, r7
 8003f84:	f046 0601 	orr.w	r6, r6, #1
 8003f88:	605e      	str	r6, [r3, #4]
 8003f8a:	4a3c      	ldr	r2, [pc, #240]	; (800407c <_malloc_r+0x410>)
 8003f8c:	f8da 3000 	ldr.w	r3, [sl]
 8003f90:	6811      	ldr	r1, [r2, #0]
 8003f92:	428b      	cmp	r3, r1
 8003f94:	bf88      	it	hi
 8003f96:	6013      	strhi	r3, [r2, #0]
 8003f98:	4a39      	ldr	r2, [pc, #228]	; (8004080 <_malloc_r+0x414>)
 8003f9a:	6811      	ldr	r1, [r2, #0]
 8003f9c:	428b      	cmp	r3, r1
 8003f9e:	bf88      	it	hi
 8003fa0:	6013      	strhi	r3, [r2, #0]
 8003fa2:	e031      	b.n	8004008 <_malloc_r+0x39c>
 8003fa4:	6810      	ldr	r0, [r2, #0]
 8003fa6:	3001      	adds	r0, #1
 8003fa8:	bf1b      	ittet	ne
 8003faa:	eba8 0303 	subne.w	r3, r8, r3
 8003fae:	4473      	addne	r3, lr
 8003fb0:	f8c2 8000 	streq.w	r8, [r2]
 8003fb4:	f8ca 3000 	strne.w	r3, [sl]
 8003fb8:	f018 0007 	ands.w	r0, r8, #7
 8003fbc:	bf1c      	itt	ne
 8003fbe:	f1c0 0008 	rsbne	r0, r0, #8
 8003fc2:	4480      	addne	r8, r0
 8003fc4:	4b2a      	ldr	r3, [pc, #168]	; (8004070 <_malloc_r+0x404>)
 8003fc6:	4447      	add	r7, r8
 8003fc8:	4418      	add	r0, r3
 8003fca:	400f      	ands	r7, r1
 8003fcc:	1bc7      	subs	r7, r0, r7
 8003fce:	4639      	mov	r1, r7
 8003fd0:	4648      	mov	r0, r9
 8003fd2:	f000 f86b 	bl	80040ac <_sbrk_r>
 8003fd6:	1c43      	adds	r3, r0, #1
 8003fd8:	bf04      	itt	eq
 8003fda:	4640      	moveq	r0, r8
 8003fdc:	2700      	moveq	r7, #0
 8003fde:	f8da 3000 	ldr.w	r3, [sl]
 8003fe2:	eba0 0008 	sub.w	r0, r0, r8
 8003fe6:	443b      	add	r3, r7
 8003fe8:	4407      	add	r7, r0
 8003fea:	f047 0701 	orr.w	r7, r7, #1
 8003fee:	45ab      	cmp	fp, r5
 8003ff0:	f8c5 8008 	str.w	r8, [r5, #8]
 8003ff4:	f8ca 3000 	str.w	r3, [sl]
 8003ff8:	f8c8 7004 	str.w	r7, [r8, #4]
 8003ffc:	d0c5      	beq.n	8003f8a <_malloc_r+0x31e>
 8003ffe:	2e0f      	cmp	r6, #15
 8004000:	d810      	bhi.n	8004024 <_malloc_r+0x3b8>
 8004002:	2301      	movs	r3, #1
 8004004:	f8c8 3004 	str.w	r3, [r8, #4]
 8004008:	68ab      	ldr	r3, [r5, #8]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	f022 0203 	bic.w	r2, r2, #3
 8004010:	4294      	cmp	r4, r2
 8004012:	eba2 0304 	sub.w	r3, r2, r4
 8004016:	d801      	bhi.n	800401c <_malloc_r+0x3b0>
 8004018:	2b0f      	cmp	r3, #15
 800401a:	dc1a      	bgt.n	8004052 <_malloc_r+0x3e6>
 800401c:	4648      	mov	r0, r9
 800401e:	f000 f83f 	bl	80040a0 <__malloc_unlock>
 8004022:	e630      	b.n	8003c86 <_malloc_r+0x1a>
 8004024:	2205      	movs	r2, #5
 8004026:	f8db 3004 	ldr.w	r3, [fp, #4]
 800402a:	3e0c      	subs	r6, #12
 800402c:	f026 0607 	bic.w	r6, r6, #7
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	4333      	orrs	r3, r6
 8004036:	f8cb 3004 	str.w	r3, [fp, #4]
 800403a:	2e0f      	cmp	r6, #15
 800403c:	eb0b 0306 	add.w	r3, fp, r6
 8004040:	605a      	str	r2, [r3, #4]
 8004042:	609a      	str	r2, [r3, #8]
 8004044:	d9a1      	bls.n	8003f8a <_malloc_r+0x31e>
 8004046:	f10b 0108 	add.w	r1, fp, #8
 800404a:	4648      	mov	r0, r9
 800404c:	f000 f894 	bl	8004178 <_free_r>
 8004050:	e79b      	b.n	8003f8a <_malloc_r+0x31e>
 8004052:	68ae      	ldr	r6, [r5, #8]
 8004054:	f044 0201 	orr.w	r2, r4, #1
 8004058:	f043 0301 	orr.w	r3, r3, #1
 800405c:	4434      	add	r4, r6
 800405e:	6072      	str	r2, [r6, #4]
 8004060:	60ac      	str	r4, [r5, #8]
 8004062:	6063      	str	r3, [r4, #4]
 8004064:	e634      	b.n	8003cd0 <_malloc_r+0x64>
 8004066:	bf00      	nop
 8004068:	20000564 	.word	0x20000564
 800406c:	2000041c 	.word	0x2000041c
 8004070:	00000080 	.word	0x00000080
 8004074:	20000534 	.word	0x20000534
 8004078:	0000007f 	.word	0x0000007f
 800407c:	2000055c 	.word	0x2000055c
 8004080:	20000560 	.word	0x20000560

08004084 <memset>:
 8004084:	4603      	mov	r3, r0
 8004086:	4402      	add	r2, r0
 8004088:	4293      	cmp	r3, r2
 800408a:	d100      	bne.n	800408e <memset+0xa>
 800408c:	4770      	bx	lr
 800408e:	f803 1b01 	strb.w	r1, [r3], #1
 8004092:	e7f9      	b.n	8004088 <memset+0x4>

08004094 <__malloc_lock>:
 8004094:	4801      	ldr	r0, [pc, #4]	; (800409c <__malloc_lock+0x8>)
 8004096:	f000 b92b 	b.w	80042f0 <__retarget_lock_acquire_recursive>
 800409a:	bf00      	nop
 800409c:	20000570 	.word	0x20000570

080040a0 <__malloc_unlock>:
 80040a0:	4801      	ldr	r0, [pc, #4]	; (80040a8 <__malloc_unlock+0x8>)
 80040a2:	f000 b926 	b.w	80042f2 <__retarget_lock_release_recursive>
 80040a6:	bf00      	nop
 80040a8:	20000570 	.word	0x20000570

080040ac <_sbrk_r>:
 80040ac:	b538      	push	{r3, r4, r5, lr}
 80040ae:	2300      	movs	r3, #0
 80040b0:	4c05      	ldr	r4, [pc, #20]	; (80040c8 <_sbrk_r+0x1c>)
 80040b2:	4605      	mov	r5, r0
 80040b4:	4608      	mov	r0, r1
 80040b6:	6023      	str	r3, [r4, #0]
 80040b8:	f000 f91c 	bl	80042f4 <_sbrk>
 80040bc:	1c43      	adds	r3, r0, #1
 80040be:	d102      	bne.n	80040c6 <_sbrk_r+0x1a>
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	b103      	cbz	r3, 80040c6 <_sbrk_r+0x1a>
 80040c4:	602b      	str	r3, [r5, #0]
 80040c6:	bd38      	pop	{r3, r4, r5, pc}
 80040c8:	20000578 	.word	0x20000578

080040cc <_malloc_trim_r>:
 80040cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040d0:	4689      	mov	r9, r1
 80040d2:	4f25      	ldr	r7, [pc, #148]	; (8004168 <_malloc_trim_r+0x9c>)
 80040d4:	4606      	mov	r6, r0
 80040d6:	f7ff ffdd 	bl	8004094 <__malloc_lock>
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8004174 <_malloc_trim_r+0xa8>
 80040e0:	685d      	ldr	r5, [r3, #4]
 80040e2:	f1a8 0411 	sub.w	r4, r8, #17
 80040e6:	f025 0503 	bic.w	r5, r5, #3
 80040ea:	eba4 0409 	sub.w	r4, r4, r9
 80040ee:	442c      	add	r4, r5
 80040f0:	fbb4 f4f8 	udiv	r4, r4, r8
 80040f4:	3c01      	subs	r4, #1
 80040f6:	fb08 f404 	mul.w	r4, r8, r4
 80040fa:	4544      	cmp	r4, r8
 80040fc:	da05      	bge.n	800410a <_malloc_trim_r+0x3e>
 80040fe:	4630      	mov	r0, r6
 8004100:	f7ff ffce 	bl	80040a0 <__malloc_unlock>
 8004104:	2000      	movs	r0, #0
 8004106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800410a:	2100      	movs	r1, #0
 800410c:	4630      	mov	r0, r6
 800410e:	f7ff ffcd 	bl	80040ac <_sbrk_r>
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	442b      	add	r3, r5
 8004116:	4298      	cmp	r0, r3
 8004118:	d1f1      	bne.n	80040fe <_malloc_trim_r+0x32>
 800411a:	4261      	negs	r1, r4
 800411c:	4630      	mov	r0, r6
 800411e:	f7ff ffc5 	bl	80040ac <_sbrk_r>
 8004122:	3001      	adds	r0, #1
 8004124:	d110      	bne.n	8004148 <_malloc_trim_r+0x7c>
 8004126:	2100      	movs	r1, #0
 8004128:	4630      	mov	r0, r6
 800412a:	f7ff ffbf 	bl	80040ac <_sbrk_r>
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	1a83      	subs	r3, r0, r2
 8004132:	2b0f      	cmp	r3, #15
 8004134:	dde3      	ble.n	80040fe <_malloc_trim_r+0x32>
 8004136:	490d      	ldr	r1, [pc, #52]	; (800416c <_malloc_trim_r+0xa0>)
 8004138:	f043 0301 	orr.w	r3, r3, #1
 800413c:	6809      	ldr	r1, [r1, #0]
 800413e:	6053      	str	r3, [r2, #4]
 8004140:	1a40      	subs	r0, r0, r1
 8004142:	490b      	ldr	r1, [pc, #44]	; (8004170 <_malloc_trim_r+0xa4>)
 8004144:	6008      	str	r0, [r1, #0]
 8004146:	e7da      	b.n	80040fe <_malloc_trim_r+0x32>
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4a09      	ldr	r2, [pc, #36]	; (8004170 <_malloc_trim_r+0xa4>)
 800414c:	1b2d      	subs	r5, r5, r4
 800414e:	f045 0501 	orr.w	r5, r5, #1
 8004152:	605d      	str	r5, [r3, #4]
 8004154:	6813      	ldr	r3, [r2, #0]
 8004156:	4630      	mov	r0, r6
 8004158:	1b1c      	subs	r4, r3, r4
 800415a:	6014      	str	r4, [r2, #0]
 800415c:	f7ff ffa0 	bl	80040a0 <__malloc_unlock>
 8004160:	2001      	movs	r0, #1
 8004162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004166:	bf00      	nop
 8004168:	20000014 	.word	0x20000014
 800416c:	2000041c 	.word	0x2000041c
 8004170:	20000534 	.word	0x20000534
 8004174:	00000080 	.word	0x00000080

08004178 <_free_r>:
 8004178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800417c:	4604      	mov	r4, r0
 800417e:	4688      	mov	r8, r1
 8004180:	2900      	cmp	r1, #0
 8004182:	f000 80ab 	beq.w	80042dc <_free_r+0x164>
 8004186:	f7ff ff85 	bl	8004094 <__malloc_lock>
 800418a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800418e:	4d54      	ldr	r5, [pc, #336]	; (80042e0 <_free_r+0x168>)
 8004190:	f022 0001 	bic.w	r0, r2, #1
 8004194:	f1a8 0308 	sub.w	r3, r8, #8
 8004198:	181f      	adds	r7, r3, r0
 800419a:	68a9      	ldr	r1, [r5, #8]
 800419c:	687e      	ldr	r6, [r7, #4]
 800419e:	428f      	cmp	r7, r1
 80041a0:	f026 0603 	bic.w	r6, r6, #3
 80041a4:	f002 0201 	and.w	r2, r2, #1
 80041a8:	d11b      	bne.n	80041e2 <_free_r+0x6a>
 80041aa:	4430      	add	r0, r6
 80041ac:	b93a      	cbnz	r2, 80041be <_free_r+0x46>
 80041ae:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80041b2:	1a9b      	subs	r3, r3, r2
 80041b4:	6899      	ldr	r1, [r3, #8]
 80041b6:	4410      	add	r0, r2
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	60ca      	str	r2, [r1, #12]
 80041bc:	6091      	str	r1, [r2, #8]
 80041be:	f040 0201 	orr.w	r2, r0, #1
 80041c2:	605a      	str	r2, [r3, #4]
 80041c4:	60ab      	str	r3, [r5, #8]
 80041c6:	4b47      	ldr	r3, [pc, #284]	; (80042e4 <_free_r+0x16c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4298      	cmp	r0, r3
 80041cc:	d304      	bcc.n	80041d8 <_free_r+0x60>
 80041ce:	4b46      	ldr	r3, [pc, #280]	; (80042e8 <_free_r+0x170>)
 80041d0:	4620      	mov	r0, r4
 80041d2:	6819      	ldr	r1, [r3, #0]
 80041d4:	f7ff ff7a 	bl	80040cc <_malloc_trim_r>
 80041d8:	4620      	mov	r0, r4
 80041da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041de:	f7ff bf5f 	b.w	80040a0 <__malloc_unlock>
 80041e2:	607e      	str	r6, [r7, #4]
 80041e4:	2a00      	cmp	r2, #0
 80041e6:	d139      	bne.n	800425c <_free_r+0xe4>
 80041e8:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80041ec:	f105 0e08 	add.w	lr, r5, #8
 80041f0:	1a5b      	subs	r3, r3, r1
 80041f2:	4408      	add	r0, r1
 80041f4:	6899      	ldr	r1, [r3, #8]
 80041f6:	4571      	cmp	r1, lr
 80041f8:	d032      	beq.n	8004260 <_free_r+0xe8>
 80041fa:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80041fe:	f8c1 e00c 	str.w	lr, [r1, #12]
 8004202:	f8ce 1008 	str.w	r1, [lr, #8]
 8004206:	19b9      	adds	r1, r7, r6
 8004208:	6849      	ldr	r1, [r1, #4]
 800420a:	07c9      	lsls	r1, r1, #31
 800420c:	d40a      	bmi.n	8004224 <_free_r+0xac>
 800420e:	4430      	add	r0, r6
 8004210:	68b9      	ldr	r1, [r7, #8]
 8004212:	bb3a      	cbnz	r2, 8004264 <_free_r+0xec>
 8004214:	4e35      	ldr	r6, [pc, #212]	; (80042ec <_free_r+0x174>)
 8004216:	42b1      	cmp	r1, r6
 8004218:	d124      	bne.n	8004264 <_free_r+0xec>
 800421a:	2201      	movs	r2, #1
 800421c:	616b      	str	r3, [r5, #20]
 800421e:	612b      	str	r3, [r5, #16]
 8004220:	60d9      	str	r1, [r3, #12]
 8004222:	6099      	str	r1, [r3, #8]
 8004224:	f040 0101 	orr.w	r1, r0, #1
 8004228:	6059      	str	r1, [r3, #4]
 800422a:	5018      	str	r0, [r3, r0]
 800422c:	2a00      	cmp	r2, #0
 800422e:	d1d3      	bne.n	80041d8 <_free_r+0x60>
 8004230:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004234:	d21a      	bcs.n	800426c <_free_r+0xf4>
 8004236:	2201      	movs	r2, #1
 8004238:	08c0      	lsrs	r0, r0, #3
 800423a:	1081      	asrs	r1, r0, #2
 800423c:	408a      	lsls	r2, r1
 800423e:	6869      	ldr	r1, [r5, #4]
 8004240:	3001      	adds	r0, #1
 8004242:	430a      	orrs	r2, r1
 8004244:	606a      	str	r2, [r5, #4]
 8004246:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800424a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800424e:	3a08      	subs	r2, #8
 8004250:	60da      	str	r2, [r3, #12]
 8004252:	6099      	str	r1, [r3, #8]
 8004254:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8004258:	60cb      	str	r3, [r1, #12]
 800425a:	e7bd      	b.n	80041d8 <_free_r+0x60>
 800425c:	2200      	movs	r2, #0
 800425e:	e7d2      	b.n	8004206 <_free_r+0x8e>
 8004260:	2201      	movs	r2, #1
 8004262:	e7d0      	b.n	8004206 <_free_r+0x8e>
 8004264:	68fe      	ldr	r6, [r7, #12]
 8004266:	60ce      	str	r6, [r1, #12]
 8004268:	60b1      	str	r1, [r6, #8]
 800426a:	e7db      	b.n	8004224 <_free_r+0xac>
 800426c:	0a42      	lsrs	r2, r0, #9
 800426e:	2a04      	cmp	r2, #4
 8004270:	d813      	bhi.n	800429a <_free_r+0x122>
 8004272:	0982      	lsrs	r2, r0, #6
 8004274:	3238      	adds	r2, #56	; 0x38
 8004276:	1c51      	adds	r1, r2, #1
 8004278:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800427c:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8004280:	428e      	cmp	r6, r1
 8004282:	d124      	bne.n	80042ce <_free_r+0x156>
 8004284:	2001      	movs	r0, #1
 8004286:	1092      	asrs	r2, r2, #2
 8004288:	fa00 f202 	lsl.w	r2, r0, r2
 800428c:	6868      	ldr	r0, [r5, #4]
 800428e:	4302      	orrs	r2, r0
 8004290:	606a      	str	r2, [r5, #4]
 8004292:	60de      	str	r6, [r3, #12]
 8004294:	6099      	str	r1, [r3, #8]
 8004296:	60b3      	str	r3, [r6, #8]
 8004298:	e7de      	b.n	8004258 <_free_r+0xe0>
 800429a:	2a14      	cmp	r2, #20
 800429c:	d801      	bhi.n	80042a2 <_free_r+0x12a>
 800429e:	325b      	adds	r2, #91	; 0x5b
 80042a0:	e7e9      	b.n	8004276 <_free_r+0xfe>
 80042a2:	2a54      	cmp	r2, #84	; 0x54
 80042a4:	d802      	bhi.n	80042ac <_free_r+0x134>
 80042a6:	0b02      	lsrs	r2, r0, #12
 80042a8:	326e      	adds	r2, #110	; 0x6e
 80042aa:	e7e4      	b.n	8004276 <_free_r+0xfe>
 80042ac:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80042b0:	d802      	bhi.n	80042b8 <_free_r+0x140>
 80042b2:	0bc2      	lsrs	r2, r0, #15
 80042b4:	3277      	adds	r2, #119	; 0x77
 80042b6:	e7de      	b.n	8004276 <_free_r+0xfe>
 80042b8:	f240 5154 	movw	r1, #1364	; 0x554
 80042bc:	428a      	cmp	r2, r1
 80042be:	bf9a      	itte	ls
 80042c0:	0c82      	lsrls	r2, r0, #18
 80042c2:	327c      	addls	r2, #124	; 0x7c
 80042c4:	227e      	movhi	r2, #126	; 0x7e
 80042c6:	e7d6      	b.n	8004276 <_free_r+0xfe>
 80042c8:	6889      	ldr	r1, [r1, #8]
 80042ca:	428e      	cmp	r6, r1
 80042cc:	d004      	beq.n	80042d8 <_free_r+0x160>
 80042ce:	684a      	ldr	r2, [r1, #4]
 80042d0:	f022 0203 	bic.w	r2, r2, #3
 80042d4:	4290      	cmp	r0, r2
 80042d6:	d3f7      	bcc.n	80042c8 <_free_r+0x150>
 80042d8:	68ce      	ldr	r6, [r1, #12]
 80042da:	e7da      	b.n	8004292 <_free_r+0x11a>
 80042dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042e0:	20000014 	.word	0x20000014
 80042e4:	20000420 	.word	0x20000420
 80042e8:	20000564 	.word	0x20000564
 80042ec:	2000001c 	.word	0x2000001c

080042f0 <__retarget_lock_acquire_recursive>:
 80042f0:	4770      	bx	lr

080042f2 <__retarget_lock_release_recursive>:
 80042f2:	4770      	bx	lr

080042f4 <_sbrk>:
 80042f4:	4b04      	ldr	r3, [pc, #16]	; (8004308 <_sbrk+0x14>)
 80042f6:	4602      	mov	r2, r0
 80042f8:	6819      	ldr	r1, [r3, #0]
 80042fa:	b909      	cbnz	r1, 8004300 <_sbrk+0xc>
 80042fc:	4903      	ldr	r1, [pc, #12]	; (800430c <_sbrk+0x18>)
 80042fe:	6019      	str	r1, [r3, #0]
 8004300:	6818      	ldr	r0, [r3, #0]
 8004302:	4402      	add	r2, r0
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	4770      	bx	lr
 8004308:	20000568 	.word	0x20000568
 800430c:	2000057c 	.word	0x2000057c

08004310 <_init>:
 8004310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004312:	bf00      	nop
 8004314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004316:	bc08      	pop	{r3}
 8004318:	469e      	mov	lr, r3
 800431a:	4770      	bx	lr

0800431c <_fini>:
 800431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431e:	bf00      	nop
 8004320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004322:	bc08      	pop	{r3}
 8004324:	469e      	mov	lr, r3
 8004326:	4770      	bx	lr


ac_power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001934  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08001a40  08001a40  00011a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001af8  08001af8  00011af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001b00  08001b00  00011b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001b04  08001b04  00011b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000518  20000000  08001b08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000005c  20000518  08002020  00020518  2**2
                  ALLOC
  8 ._user_heap_stack 00000100  20000574  08002020  00020574  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00020518  2**0
                  CONTENTS, READONLY
 10 .debug_info   000181a1  00000000  00000000  00020541  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003574  00000000  00000000  000386e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ab8  00000000  00000000  0003bc58  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009b0  00000000  00000000  0003c710  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005b35  00000000  00000000  0003d0c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000486f  00000000  00000000  00042bf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00047464  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002ca8  00000000  00000000  000474e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000072d  00000000  00000000  0004a188  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000003f  00000000  00000000  0004a8b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000518 	.word	0x20000518
 8000128:	00000000 	.word	0x00000000
 800012c:	08001a28 	.word	0x08001a28

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000051c 	.word	0x2000051c
 8000148:	08001a28 	.word	0x08001a28

0800014c <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000156:	2300      	movs	r3, #0
 8000158:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 800015a:	2300      	movs	r3, #0
 800015c:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	685b      	ldr	r3, [r3, #4]
 8000162:	60fb      	str	r3, [r7, #12]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
 8000164:	68fb      	ldr	r3, [r7, #12]
 8000166:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800016a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800016e:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
 8000170:	683b      	ldr	r3, [r7, #0]
 8000172:	681a      	ldr	r2, [r3, #0]
 8000174:	683b      	ldr	r3, [r7, #0]
 8000176:	791b      	ldrb	r3, [r3, #4]
 8000178:	021b      	lsls	r3, r3, #8
 800017a:	4313      	orrs	r3, r2
 800017c:	68fa      	ldr	r2, [r7, #12]
 800017e:	4313      	orrs	r3, r2
 8000180:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	68fa      	ldr	r2, [r7, #12]
 8000186:	605a      	str	r2, [r3, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	689b      	ldr	r3, [r3, #8]
 800018c:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
 800018e:	68fa      	ldr	r2, [r7, #12]
 8000190:	4b16      	ldr	r3, [pc, #88]	; (80001ec <ADC_Init+0xa0>)
 8000192:	4013      	ands	r3, r2
 8000194:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 8000196:	683b      	ldr	r3, [r7, #0]
 8000198:	68da      	ldr	r2, [r3, #12]
 800019a:	683b      	ldr	r3, [r7, #0]
 800019c:	689b      	ldr	r3, [r3, #8]
 800019e:	431a      	orrs	r2, r3
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80001a0:	683b      	ldr	r3, [r7, #0]
 80001a2:	795b      	ldrb	r3, [r3, #5]
 80001a4:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 80001a6:	4313      	orrs	r3, r2
 80001a8:	68fa      	ldr	r2, [r7, #12]
 80001aa:	4313      	orrs	r3, r2
 80001ac:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	68fa      	ldr	r2, [r7, #12]
 80001b2:	609a      	str	r2, [r3, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80001b8:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
 80001ba:	68fb      	ldr	r3, [r7, #12]
 80001bc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80001c0:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
 80001c2:	683b      	ldr	r3, [r7, #0]
 80001c4:	7c1b      	ldrb	r3, [r3, #16]
 80001c6:	3b01      	subs	r3, #1
 80001c8:	b2da      	uxtb	r2, r3
 80001ca:	7afb      	ldrb	r3, [r7, #11]
 80001cc:	4313      	orrs	r3, r2
 80001ce:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
 80001d0:	7afb      	ldrb	r3, [r7, #11]
 80001d2:	051b      	lsls	r3, r3, #20
 80001d4:	68fa      	ldr	r2, [r7, #12]
 80001d6:	4313      	orrs	r3, r2
 80001d8:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	68fa      	ldr	r2, [r7, #12]
 80001de:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80001e0:	bf00      	nop
 80001e2:	3714      	adds	r7, #20
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bc80      	pop	{r7}
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	fff1f7fd 	.word	0xfff1f7fd

080001f0 <ADC_StructInit>:
  * @brief  Fills each ADC_InitStruct member with its default value.
  * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2200      	movs	r2, #0
 8000202:	711a      	strb	r2, [r3, #4]
  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2200      	movs	r2, #0
 8000208:	715a      	strb	r2, [r3, #5]
  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2200      	movs	r2, #0
 800020e:	609a      	str	r2, [r3, #8]
  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2200      	movs	r2, #0
 8000214:	60da      	str	r2, [r3, #12]
  /* Initialize the ADC_NbrOfChannel member */
  ADC_InitStruct->ADC_NbrOfChannel = 1;
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2201      	movs	r2, #1
 800021a:	741a      	strb	r2, [r3, #16]
}
 800021c:	bf00      	nop
 800021e:	370c      	adds	r7, #12
 8000220:	46bd      	mov	sp, r7
 8000222:	bc80      	pop	{r7}
 8000224:	4770      	bx	lr

08000226 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000226:	b480      	push	{r7}
 8000228:	b083      	sub	sp, #12
 800022a:	af00      	add	r7, sp, #0
 800022c:	6078      	str	r0, [r7, #4]
 800022e:	460b      	mov	r3, r1
 8000230:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000232:	78fb      	ldrb	r3, [r7, #3]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d006      	beq.n	8000246 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	689b      	ldr	r3, [r3, #8]
 800023c:	f043 0201 	orr.w	r2, r3, #1
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
  }
}
 8000244:	e005      	b.n	8000252 <ADC_Cmd+0x2c>
    ADCx->CR2 &= CR2_ADON_Reset;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	689b      	ldr	r3, [r3, #8]
 800024a:	f023 0201 	bic.w	r2, r3, #1
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	609a      	str	r2, [r3, #8]
}
 8000252:	bf00      	nop
 8000254:	370c      	adds	r7, #12
 8000256:	46bd      	mov	sp, r7
 8000258:	bc80      	pop	{r7}
 800025a:	4770      	bx	lr

0800025c <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800025c:	b480      	push	{r7}
 800025e:	b083      	sub	sp, #12
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
 8000264:	460b      	mov	r3, r1
 8000266:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000268:	78fb      	ldrb	r3, [r7, #3]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d006      	beq.n	800027c <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	689b      	ldr	r3, [r3, #8]
 8000272:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= CR2_DMA_Reset;
  }
}
 800027a:	e005      	b.n	8000288 <ADC_DMACmd+0x2c>
    ADCx->CR2 &= CR2_DMA_Reset;
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	689b      	ldr	r3, [r3, #8]
 8000280:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	609a      	str	r2, [r3, #8]
}
 8000288:	bf00      	nop
 800028a:	370c      	adds	r7, #12
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr

08000292 <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
 8000292:	b480      	push	{r7}
 8000294:	b083      	sub	sp, #12
 8000296:	af00      	add	r7, sp, #0
 8000298:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	689b      	ldr	r3, [r3, #8]
 800029e:	f043 0204 	orr.w	r2, r3, #4
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	609a      	str	r2, [r3, #8]
}
 80002a6:	bf00      	nop
 80002a8:	370c      	adds	r7, #12
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bc80      	pop	{r7}
 80002ae:	4770      	bx	lr

080002b0 <ADC_SoftwareStartConvCmd>:
  * @param  NewState: new state of the selected ADC software start conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	460b      	mov	r3, r1
 80002ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80002bc:	78fb      	ldrb	r3, [r7, #3]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d006      	beq.n	80002d0 <ADC_SoftwareStartConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	689b      	ldr	r3, [r3, #8]
 80002c6:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	609a      	str	r2, [r3, #8]
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
  }
}
 80002ce:	e005      	b.n	80002dc <ADC_SoftwareStartConvCmd+0x2c>
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	689b      	ldr	r3, [r3, #8]
 80002d4:	f423 02a0 	bic.w	r2, r3, #5242880	; 0x500000
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	609a      	str	r2, [r3, #8]
}
 80002dc:	bf00      	nop
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bc80      	pop	{r7}
 80002e4:	4770      	bx	lr

080002e6 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80002e6:	b480      	push	{r7}
 80002e8:	b085      	sub	sp, #20
 80002ea:	af00      	add	r7, sp, #0
 80002ec:	6078      	str	r0, [r7, #4]
 80002ee:	4608      	mov	r0, r1
 80002f0:	4611      	mov	r1, r2
 80002f2:	461a      	mov	r2, r3
 80002f4:	4603      	mov	r3, r0
 80002f6:	70fb      	strb	r3, [r7, #3]
 80002f8:	460b      	mov	r3, r1
 80002fa:	70bb      	strb	r3, [r7, #2]
 80002fc:	4613      	mov	r3, r2
 80002fe:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000300:	2300      	movs	r3, #0
 8000302:	60fb      	str	r3, [r7, #12]
 8000304:	2300      	movs	r3, #0
 8000306:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000308:	78fb      	ldrb	r3, [r7, #3]
 800030a:	2b09      	cmp	r3, #9
 800030c:	d923      	bls.n	8000356 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	68db      	ldr	r3, [r3, #12]
 8000312:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 8000314:	78fb      	ldrb	r3, [r7, #3]
 8000316:	f1a3 020a 	sub.w	r2, r3, #10
 800031a:	4613      	mov	r3, r2
 800031c:	005b      	lsls	r3, r3, #1
 800031e:	4413      	add	r3, r2
 8000320:	2207      	movs	r2, #7
 8000322:	fa02 f303 	lsl.w	r3, r2, r3
 8000326:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	43db      	mvns	r3, r3
 800032c:	68fa      	ldr	r2, [r7, #12]
 800032e:	4013      	ands	r3, r2
 8000330:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000332:	7879      	ldrb	r1, [r7, #1]
 8000334:	78fb      	ldrb	r3, [r7, #3]
 8000336:	f1a3 020a 	sub.w	r2, r3, #10
 800033a:	4613      	mov	r3, r2
 800033c:	005b      	lsls	r3, r3, #1
 800033e:	4413      	add	r3, r2
 8000340:	fa01 f303 	lsl.w	r3, r1, r3
 8000344:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8000346:	68fa      	ldr	r2, [r7, #12]
 8000348:	68bb      	ldr	r3, [r7, #8]
 800034a:	4313      	orrs	r3, r2
 800034c:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	68fa      	ldr	r2, [r7, #12]
 8000352:	60da      	str	r2, [r3, #12]
 8000354:	e01e      	b.n	8000394 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	691b      	ldr	r3, [r3, #16]
 800035a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 800035c:	78fa      	ldrb	r2, [r7, #3]
 800035e:	4613      	mov	r3, r2
 8000360:	005b      	lsls	r3, r3, #1
 8000362:	4413      	add	r3, r2
 8000364:	2207      	movs	r2, #7
 8000366:	fa02 f303 	lsl.w	r3, r2, r3
 800036a:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	43db      	mvns	r3, r3
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	4013      	ands	r3, r2
 8000374:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000376:	7879      	ldrb	r1, [r7, #1]
 8000378:	78fa      	ldrb	r2, [r7, #3]
 800037a:	4613      	mov	r3, r2
 800037c:	005b      	lsls	r3, r3, #1
 800037e:	4413      	add	r3, r2
 8000380:	fa01 f303 	lsl.w	r3, r1, r3
 8000384:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8000386:	68fa      	ldr	r2, [r7, #12]
 8000388:	68bb      	ldr	r3, [r7, #8]
 800038a:	4313      	orrs	r3, r2
 800038c:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	68fa      	ldr	r2, [r7, #12]
 8000392:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000394:	78bb      	ldrb	r3, [r7, #2]
 8000396:	2b06      	cmp	r3, #6
 8000398:	d821      	bhi.n	80003de <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800039e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 80003a0:	78bb      	ldrb	r3, [r7, #2]
 80003a2:	1e5a      	subs	r2, r3, #1
 80003a4:	4613      	mov	r3, r2
 80003a6:	009b      	lsls	r3, r3, #2
 80003a8:	4413      	add	r3, r2
 80003aa:	221f      	movs	r2, #31
 80003ac:	fa02 f303 	lsl.w	r3, r2, r3
 80003b0:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80003b2:	68bb      	ldr	r3, [r7, #8]
 80003b4:	43db      	mvns	r3, r3
 80003b6:	68fa      	ldr	r2, [r7, #12]
 80003b8:	4013      	ands	r3, r2
 80003ba:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80003bc:	78f9      	ldrb	r1, [r7, #3]
 80003be:	78bb      	ldrb	r3, [r7, #2]
 80003c0:	1e5a      	subs	r2, r3, #1
 80003c2:	4613      	mov	r3, r2
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	4413      	add	r3, r2
 80003c8:	fa01 f303 	lsl.w	r3, r1, r3
 80003cc:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80003ce:	68fa      	ldr	r2, [r7, #12]
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	4313      	orrs	r3, r2
 80003d4:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	68fa      	ldr	r2, [r7, #12]
 80003da:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80003dc:	e047      	b.n	800046e <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 80003de:	78bb      	ldrb	r3, [r7, #2]
 80003e0:	2b0c      	cmp	r3, #12
 80003e2:	d821      	bhi.n	8000428 <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e8:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 80003ea:	78bb      	ldrb	r3, [r7, #2]
 80003ec:	1fda      	subs	r2, r3, #7
 80003ee:	4613      	mov	r3, r2
 80003f0:	009b      	lsls	r3, r3, #2
 80003f2:	4413      	add	r3, r2
 80003f4:	221f      	movs	r2, #31
 80003f6:	fa02 f303 	lsl.w	r3, r2, r3
 80003fa:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	43db      	mvns	r3, r3
 8000400:	68fa      	ldr	r2, [r7, #12]
 8000402:	4013      	ands	r3, r2
 8000404:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000406:	78f9      	ldrb	r1, [r7, #3]
 8000408:	78bb      	ldrb	r3, [r7, #2]
 800040a:	1fda      	subs	r2, r3, #7
 800040c:	4613      	mov	r3, r2
 800040e:	009b      	lsls	r3, r3, #2
 8000410:	4413      	add	r3, r2
 8000412:	fa01 f303 	lsl.w	r3, r1, r3
 8000416:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8000418:	68fa      	ldr	r2, [r7, #12]
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	4313      	orrs	r3, r2
 800041e:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	68fa      	ldr	r2, [r7, #12]
 8000424:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000426:	e022      	b.n	800046e <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800042c:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 800042e:	78bb      	ldrb	r3, [r7, #2]
 8000430:	f1a3 020d 	sub.w	r2, r3, #13
 8000434:	4613      	mov	r3, r2
 8000436:	009b      	lsls	r3, r3, #2
 8000438:	4413      	add	r3, r2
 800043a:	221f      	movs	r2, #31
 800043c:	fa02 f303 	lsl.w	r3, r2, r3
 8000440:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8000442:	68bb      	ldr	r3, [r7, #8]
 8000444:	43db      	mvns	r3, r3
 8000446:	68fa      	ldr	r2, [r7, #12]
 8000448:	4013      	ands	r3, r2
 800044a:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 800044c:	78f9      	ldrb	r1, [r7, #3]
 800044e:	78bb      	ldrb	r3, [r7, #2]
 8000450:	f1a3 020d 	sub.w	r2, r3, #13
 8000454:	4613      	mov	r3, r2
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	4413      	add	r3, r2
 800045a:	fa01 f303 	lsl.w	r3, r1, r3
 800045e:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8000460:	68fa      	ldr	r2, [r7, #12]
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	4313      	orrs	r3, r2
 8000466:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	68fa      	ldr	r2, [r7, #12]
 800046c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800046e:	bf00      	nop
 8000470:	3714      	adds	r7, #20
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr

08000478 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000482:	2300      	movs	r3, #0
 8000484:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000496:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	689a      	ldr	r2, [r3, #8]
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	6a1b      	ldr	r3, [r3, #32]
 80004a0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	691b      	ldr	r3, [r3, #16]
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80004a6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	695b      	ldr	r3, [r3, #20]
 80004ac:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	699b      	ldr	r3, [r3, #24]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80004b2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	69db      	ldr	r3, [r3, #28]
 80004b8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80004be:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004c4:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80004c6:	68fa      	ldr	r2, [r7, #12]
 80004c8:	4313      	orrs	r3, r2
 80004ca:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	68fa      	ldr	r2, [r7, #12]
 80004d0:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	68da      	ldr	r2, [r3, #12]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	685a      	ldr	r2, [r3, #4]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	60da      	str	r2, [r3, #12]
}
 80004ea:	bf00      	nop
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr

080004f4 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
/*-------------- Reset DMA init structure parameters values ------------------*/
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
  /* Initialize the DMA_MemoryBaseAddr member */
  DMA_InitStruct->DMA_MemoryBaseAddr = 0;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2200      	movs	r2, #0
 8000506:	605a      	str	r2, [r3, #4]
  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]
  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2200      	movs	r2, #0
 8000512:	60da      	str	r2, [r3, #12]
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2200      	movs	r2, #0
 8000518:	611a      	str	r2, [r3, #16]
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2200      	movs	r2, #0
 800051e:	615a      	str	r2, [r3, #20]
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2200      	movs	r2, #0
 8000524:	619a      	str	r2, [r3, #24]
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2200      	movs	r2, #0
 800052a:	61da      	str	r2, [r3, #28]
  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2200      	movs	r2, #0
 8000530:	621a      	str	r2, [r3, #32]
  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2200      	movs	r2, #0
 8000536:	625a      	str	r2, [r3, #36]	; 0x24
  /* Initialize the DMA_M2M member */
  DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2200      	movs	r2, #0
 800053c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800053e:	bf00      	nop
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr

08000548 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	460b      	mov	r3, r1
 8000552:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000554:	78fb      	ldrb	r3, [r7, #3]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d006      	beq.n	8000568 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f043 0201 	orr.w	r2, r3, #1
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 8000566:	e006      	b.n	8000576 <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681a      	ldr	r2, [r3, #0]
 800056c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000570:	4013      	ands	r3, r2
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	6013      	str	r3, [r2, #0]
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr

08000580 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000580:	b480      	push	{r7}
 8000582:	b089      	sub	sp, #36	; 0x24
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800058a:	2300      	movs	r3, #0
 800058c:	61fb      	str	r3, [r7, #28]
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
 8000592:	2300      	movs	r3, #0
 8000594:	61bb      	str	r3, [r7, #24]
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	2300      	movs	r3, #0
 80005a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	78db      	ldrb	r3, [r3, #3]
 80005a6:	f003 030f 	and.w	r3, r3, #15
 80005aa:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	78db      	ldrb	r3, [r3, #3]
 80005b0:	f003 0310 	and.w	r3, r3, #16
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d005      	beq.n	80005c4 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	789b      	ldrb	r3, [r3, #2]
 80005bc:	461a      	mov	r2, r3
 80005be:	69fb      	ldr	r3, [r7, #28]
 80005c0:	4313      	orrs	r3, r2
 80005c2:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d044      	beq.n	8000658 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80005d4:	2300      	movs	r3, #0
 80005d6:	61bb      	str	r3, [r7, #24]
 80005d8:	e038      	b.n	800064c <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80005da:	2201      	movs	r2, #1
 80005dc:	69bb      	ldr	r3, [r7, #24]
 80005de:	fa02 f303 	lsl.w	r3, r2, r3
 80005e2:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	461a      	mov	r2, r3
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	4013      	ands	r3, r2
 80005ee:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80005f0:	693a      	ldr	r2, [r7, #16]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	d126      	bne.n	8000646 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80005f8:	69bb      	ldr	r3, [r7, #24]
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80005fe:	220f      	movs	r2, #15
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	fa02 f303 	lsl.w	r3, r2, r3
 8000606:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	43db      	mvns	r3, r3
 800060c:	697a      	ldr	r2, [r7, #20]
 800060e:	4013      	ands	r3, r2
 8000610:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000612:	69fa      	ldr	r2, [r7, #28]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	fa02 f303 	lsl.w	r3, r2, r3
 800061a:	697a      	ldr	r2, [r7, #20]
 800061c:	4313      	orrs	r3, r2
 800061e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	78db      	ldrb	r3, [r3, #3]
 8000624:	2b28      	cmp	r3, #40	; 0x28
 8000626:	d105      	bne.n	8000634 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000628:	2201      	movs	r2, #1
 800062a:	69bb      	ldr	r3, [r7, #24]
 800062c:	409a      	lsls	r2, r3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	615a      	str	r2, [r3, #20]
 8000632:	e008      	b.n	8000646 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	78db      	ldrb	r3, [r3, #3]
 8000638:	2b48      	cmp	r3, #72	; 0x48
 800063a:	d104      	bne.n	8000646 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800063c:	2201      	movs	r2, #1
 800063e:	69bb      	ldr	r3, [r7, #24]
 8000640:	409a      	lsls	r2, r3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000646:	69bb      	ldr	r3, [r7, #24]
 8000648:	3301      	adds	r3, #1
 800064a:	61bb      	str	r3, [r7, #24]
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	2b07      	cmp	r3, #7
 8000650:	d9c3      	bls.n	80005da <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	697a      	ldr	r2, [r7, #20]
 8000656:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	2bff      	cmp	r3, #255	; 0xff
 800065e:	d946      	bls.n	80006ee <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000666:	2300      	movs	r3, #0
 8000668:	61bb      	str	r3, [r7, #24]
 800066a:	e03a      	b.n	80006e2 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 800066c:	69bb      	ldr	r3, [r7, #24]
 800066e:	3308      	adds	r3, #8
 8000670:	2201      	movs	r2, #1
 8000672:	fa02 f303 	lsl.w	r3, r2, r3
 8000676:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	461a      	mov	r2, r3
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	4013      	ands	r3, r2
 8000682:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000684:	693a      	ldr	r2, [r7, #16]
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	429a      	cmp	r2, r3
 800068a:	d127      	bne.n	80006dc <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 800068c:	69bb      	ldr	r3, [r7, #24]
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000692:	220f      	movs	r2, #15
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	fa02 f303 	lsl.w	r3, r2, r3
 800069a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	43db      	mvns	r3, r3
 80006a0:	697a      	ldr	r2, [r7, #20]
 80006a2:	4013      	ands	r3, r2
 80006a4:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80006a6:	69fa      	ldr	r2, [r7, #28]
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	fa02 f303 	lsl.w	r3, r2, r3
 80006ae:	697a      	ldr	r2, [r7, #20]
 80006b0:	4313      	orrs	r3, r2
 80006b2:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	78db      	ldrb	r3, [r3, #3]
 80006b8:	2b28      	cmp	r3, #40	; 0x28
 80006ba:	d105      	bne.n	80006c8 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80006bc:	69bb      	ldr	r3, [r7, #24]
 80006be:	3308      	adds	r3, #8
 80006c0:	2201      	movs	r2, #1
 80006c2:	409a      	lsls	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	78db      	ldrb	r3, [r3, #3]
 80006cc:	2b48      	cmp	r3, #72	; 0x48
 80006ce:	d105      	bne.n	80006dc <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80006d0:	69bb      	ldr	r3, [r7, #24]
 80006d2:	3308      	adds	r3, #8
 80006d4:	2201      	movs	r2, #1
 80006d6:	409a      	lsls	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80006dc:	69bb      	ldr	r3, [r7, #24]
 80006de:	3301      	adds	r3, #1
 80006e0:	61bb      	str	r3, [r7, #24]
 80006e2:	69bb      	ldr	r3, [r7, #24]
 80006e4:	2b07      	cmp	r3, #7
 80006e6:	d9c1      	bls.n	800066c <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	697a      	ldr	r2, [r7, #20]
 80006ec:	605a      	str	r2, [r3, #4]
  }
}
 80006ee:	bf00      	nop
 80006f0:	3724      	adds	r7, #36	; 0x24
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000706:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2202      	movs	r2, #2
 800070c:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2204      	movs	r2, #4
 8000712:	70da      	strb	r2, [r3, #3]
}
 8000714:	bf00      	nop
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr
	...

08000720 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <RCC_ADCCLKConfig+0x34>)
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000738:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 800073a:	68fa      	ldr	r2, [r7, #12]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4313      	orrs	r3, r2
 8000740:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000742:	4a04      	ldr	r2, [pc, #16]	; (8000754 <RCC_ADCCLKConfig+0x34>)
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	6053      	str	r3, [r2, #4]
}
 8000748:	bf00      	nop
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	40021000 	.word	0x40021000

08000758 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000758:	b480      	push	{r7}
 800075a:	b087      	sub	sp, #28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	2300      	movs	r3, #0
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	2300      	movs	r3, #0
 800076e:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000770:	4b4c      	ldr	r3, [pc, #304]	; (80008a4 <RCC_GetClocksFreq+0x14c>)
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	f003 030c 	and.w	r3, r3, #12
 8000778:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	2b04      	cmp	r3, #4
 800077e:	d007      	beq.n	8000790 <RCC_GetClocksFreq+0x38>
 8000780:	2b08      	cmp	r3, #8
 8000782:	d009      	beq.n	8000798 <RCC_GetClocksFreq+0x40>
 8000784:	2b00      	cmp	r3, #0
 8000786:	d133      	bne.n	80007f0 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4a47      	ldr	r2, [pc, #284]	; (80008a8 <RCC_GetClocksFreq+0x150>)
 800078c:	601a      	str	r2, [r3, #0]
      break;
 800078e:	e033      	b.n	80007f8 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4a45      	ldr	r2, [pc, #276]	; (80008a8 <RCC_GetClocksFreq+0x150>)
 8000794:	601a      	str	r2, [r3, #0]
      break;
 8000796:	e02f      	b.n	80007f8 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000798:	4b42      	ldr	r3, [pc, #264]	; (80008a4 <RCC_GetClocksFreq+0x14c>)
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80007a0:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80007a2:	4b40      	ldr	r3, [pc, #256]	; (80008a4 <RCC_GetClocksFreq+0x14c>)
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007aa:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80007ac:	693b      	ldr	r3, [r7, #16]
 80007ae:	0c9b      	lsrs	r3, r3, #18
 80007b0:	3302      	adds	r3, #2
 80007b2:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d106      	bne.n	80007c8 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	4a3b      	ldr	r2, [pc, #236]	; (80008ac <RCC_GetClocksFreq+0x154>)
 80007be:	fb02 f203 	mul.w	r2, r2, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80007c6:	e017      	b.n	80007f8 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80007c8:	4b36      	ldr	r3, [pc, #216]	; (80008a4 <RCC_GetClocksFreq+0x14c>)
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d006      	beq.n	80007e2 <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80007d4:	693b      	ldr	r3, [r7, #16]
 80007d6:	4a35      	ldr	r2, [pc, #212]	; (80008ac <RCC_GetClocksFreq+0x154>)
 80007d8:	fb02 f203 	mul.w	r2, r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	601a      	str	r2, [r3, #0]
      break;
 80007e0:	e00a      	b.n	80007f8 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80007e2:	693b      	ldr	r3, [r7, #16]
 80007e4:	4a30      	ldr	r2, [pc, #192]	; (80008a8 <RCC_GetClocksFreq+0x150>)
 80007e6:	fb02 f203 	mul.w	r2, r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	601a      	str	r2, [r3, #0]
      break;
 80007ee:	e003      	b.n	80007f8 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4a2d      	ldr	r2, [pc, #180]	; (80008a8 <RCC_GetClocksFreq+0x150>)
 80007f4:	601a      	str	r2, [r3, #0]
      break;
 80007f6:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80007f8:	4b2a      	ldr	r3, [pc, #168]	; (80008a4 <RCC_GetClocksFreq+0x14c>)
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000800:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	091b      	lsrs	r3, r3, #4
 8000806:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000808:	4a29      	ldr	r2, [pc, #164]	; (80008b0 <RCC_GetClocksFreq+0x158>)
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	4413      	add	r3, r2
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	b2db      	uxtb	r3, r3
 8000812:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	40da      	lsrs	r2, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000820:	4b20      	ldr	r3, [pc, #128]	; (80008a4 <RCC_GetClocksFreq+0x14c>)
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000828:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	0a1b      	lsrs	r3, r3, #8
 800082e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000830:	4a1f      	ldr	r2, [pc, #124]	; (80008b0 <RCC_GetClocksFreq+0x158>)
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	4413      	add	r3, r2
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	685a      	ldr	r2, [r3, #4]
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	40da      	lsrs	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000848:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <RCC_GetClocksFreq+0x14c>)
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000850:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	0adb      	lsrs	r3, r3, #11
 8000856:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000858:	4a15      	ldr	r2, [pc, #84]	; (80008b0 <RCC_GetClocksFreq+0x158>)
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	4413      	add	r3, r2
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	685a      	ldr	r2, [r3, #4]
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	40da      	lsrs	r2, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <RCC_GetClocksFreq+0x14c>)
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000878:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	0b9b      	lsrs	r3, r3, #14
 800087e:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8000880:	4a0c      	ldr	r2, [pc, #48]	; (80008b4 <RCC_GetClocksFreq+0x15c>)
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	4413      	add	r3, r2
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	b2db      	uxtb	r3, r3
 800088a:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	68da      	ldr	r2, [r3, #12]
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	fbb2 f2f3 	udiv	r2, r2, r3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	611a      	str	r2, [r3, #16]
}
 800089a:	bf00      	nop
 800089c:	371c      	adds	r7, #28
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr
 80008a4:	40021000 	.word	0x40021000
 80008a8:	007a1200 	.word	0x007a1200
 80008ac:	003d0900 	.word	0x003d0900
 80008b0:	20000000 	.word	0x20000000
 80008b4:	20000010 	.word	0x20000010

080008b8 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	460b      	mov	r3, r1
 80008c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80008c4:	78fb      	ldrb	r3, [r7, #3]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d006      	beq.n	80008d8 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80008ca:	4909      	ldr	r1, [pc, #36]	; (80008f0 <RCC_AHBPeriphClockCmd+0x38>)
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <RCC_AHBPeriphClockCmd+0x38>)
 80008ce:	695a      	ldr	r2, [r3, #20]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 80008d6:	e006      	b.n	80008e6 <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80008d8:	4905      	ldr	r1, [pc, #20]	; (80008f0 <RCC_AHBPeriphClockCmd+0x38>)
 80008da:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <RCC_AHBPeriphClockCmd+0x38>)
 80008dc:	695a      	ldr	r2, [r3, #20]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	43db      	mvns	r3, r3
 80008e2:	4013      	ands	r3, r2
 80008e4:	614b      	str	r3, [r1, #20]
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	40021000 	.word	0x40021000

080008f4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	460b      	mov	r3, r1
 80008fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000900:	78fb      	ldrb	r3, [r7, #3]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d006      	beq.n	8000914 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000906:	4909      	ldr	r1, [pc, #36]	; (800092c <RCC_APB2PeriphClockCmd+0x38>)
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <RCC_APB2PeriphClockCmd+0x38>)
 800090a:	699a      	ldr	r2, [r3, #24]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4313      	orrs	r3, r2
 8000910:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000912:	e006      	b.n	8000922 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000914:	4905      	ldr	r1, [pc, #20]	; (800092c <RCC_APB2PeriphClockCmd+0x38>)
 8000916:	4b05      	ldr	r3, [pc, #20]	; (800092c <RCC_APB2PeriphClockCmd+0x38>)
 8000918:	699a      	ldr	r2, [r3, #24]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	43db      	mvns	r3, r3
 800091e:	4013      	ands	r3, r2
 8000920:	618b      	str	r3, [r1, #24]
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr
 800092c:	40021000 	.word	0x40021000

08000930 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	460b      	mov	r3, r1
 800093a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800093c:	78fb      	ldrb	r3, [r7, #3]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d006      	beq.n	8000950 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000942:	4909      	ldr	r1, [pc, #36]	; (8000968 <RCC_APB1PeriphClockCmd+0x38>)
 8000944:	4b08      	ldr	r3, [pc, #32]	; (8000968 <RCC_APB1PeriphClockCmd+0x38>)
 8000946:	69da      	ldr	r2, [r3, #28]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4313      	orrs	r3, r2
 800094c:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800094e:	e006      	b.n	800095e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000950:	4905      	ldr	r1, [pc, #20]	; (8000968 <RCC_APB1PeriphClockCmd+0x38>)
 8000952:	4b05      	ldr	r3, [pc, #20]	; (8000968 <RCC_APB1PeriphClockCmd+0x38>)
 8000954:	69da      	ldr	r2, [r3, #28]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	43db      	mvns	r3, r3
 800095a:	4013      	ands	r3, r2
 800095c:	61cb      	str	r3, [r1, #28]
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr
 8000968:	40021000 	.word	0x40021000

0800096c <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a2e      	ldr	r2, [pc, #184]	; (8000a3c <TIM_TimeBaseInit+0xd0>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d013      	beq.n	80009b0 <TIM_TimeBaseInit+0x44>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a2d      	ldr	r2, [pc, #180]	; (8000a40 <TIM_TimeBaseInit+0xd4>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d00f      	beq.n	80009b0 <TIM_TimeBaseInit+0x44>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000996:	d00b      	beq.n	80009b0 <TIM_TimeBaseInit+0x44>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a2a      	ldr	r2, [pc, #168]	; (8000a44 <TIM_TimeBaseInit+0xd8>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d007      	beq.n	80009b0 <TIM_TimeBaseInit+0x44>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a29      	ldr	r2, [pc, #164]	; (8000a48 <TIM_TimeBaseInit+0xdc>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d003      	beq.n	80009b0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a28      	ldr	r2, [pc, #160]	; (8000a4c <TIM_TimeBaseInit+0xe0>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d108      	bne.n	80009c2 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80009b0:	89fb      	ldrh	r3, [r7, #14]
 80009b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009b6:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	885a      	ldrh	r2, [r3, #2]
 80009bc:	89fb      	ldrh	r3, [r7, #14]
 80009be:	4313      	orrs	r3, r2
 80009c0:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a22      	ldr	r2, [pc, #136]	; (8000a50 <TIM_TimeBaseInit+0xe4>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d00c      	beq.n	80009e4 <TIM_TimeBaseInit+0x78>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a21      	ldr	r2, [pc, #132]	; (8000a54 <TIM_TimeBaseInit+0xe8>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d008      	beq.n	80009e4 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80009d2:	89fb      	ldrh	r3, [r7, #14]
 80009d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80009d8:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	88da      	ldrh	r2, [r3, #6]
 80009de:	89fb      	ldrh	r3, [r7, #14]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	89fa      	ldrh	r2, [r7, #14]
 80009e8:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	889a      	ldrh	r2, [r3, #4]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	881a      	ldrh	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a0f      	ldr	r2, [pc, #60]	; (8000a3c <TIM_TimeBaseInit+0xd0>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d00f      	beq.n	8000a22 <TIM_TimeBaseInit+0xb6>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a0e      	ldr	r2, [pc, #56]	; (8000a40 <TIM_TimeBaseInit+0xd4>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d00b      	beq.n	8000a22 <TIM_TimeBaseInit+0xb6>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <TIM_TimeBaseInit+0xec>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d007      	beq.n	8000a22 <TIM_TimeBaseInit+0xb6>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a11      	ldr	r2, [pc, #68]	; (8000a5c <TIM_TimeBaseInit+0xf0>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d003      	beq.n	8000a22 <TIM_TimeBaseInit+0xb6>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a10      	ldr	r2, [pc, #64]	; (8000a60 <TIM_TimeBaseInit+0xf4>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d104      	bne.n	8000a2c <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	7a1b      	ldrb	r3, [r3, #8]
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2201      	movs	r2, #1
 8000a30:	829a      	strh	r2, [r3, #20]
}
 8000a32:	bf00      	nop
 8000a34:	3714      	adds	r7, #20
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	40012c00 	.word	0x40012c00
 8000a40:	40013400 	.word	0x40013400
 8000a44:	40000400 	.word	0x40000400
 8000a48:	40000800 	.word	0x40000800
 8000a4c:	40000c00 	.word	0x40000c00
 8000a50:	40001000 	.word	0x40001000
 8000a54:	40001400 	.word	0x40001400
 8000a58:	40014000 	.word	0x40014000
 8000a5c:	40014400 	.word	0x40014400
 8000a60:	40014800 	.word	0x40014800

08000a64 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a72:	809a      	strh	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2200      	movs	r2, #0
 8000a78:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	80da      	strh	r2, [r3, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2200      	movs	r2, #0
 8000a84:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2200      	movs	r2, #0
 8000a8a:	721a      	strb	r2, [r3, #8]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr

08000a96 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b083      	sub	sp, #12
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000aa2:	78fb      	ldrb	r3, [r7, #3]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d008      	beq.n	8000aba <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	f043 0301 	orr.w	r3, r3, #1
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8000ab8:	e007      	b.n	8000aca <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	881b      	ldrh	r3, [r3, #0]
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	f023 0301 	bic.w	r3, r3, #1
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	801a      	strh	r2, [r3, #0]
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr

08000ad4 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08c      	sub	sp, #48	; 0x30
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	8a1b      	ldrh	r3, [r3, #16]
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8000afe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b00:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8000b04:	4013      	ands	r3, r2
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	88db      	ldrh	r3, [r3, #6]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b10:	4313      	orrs	r3, r2
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	899b      	ldrh	r3, [r3, #12]
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b26:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	889a      	ldrh	r2, [r3, #4]
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	891b      	ldrh	r3, [r3, #8]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	461a      	mov	r2, r3
 8000b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b46:	4313      	orrs	r3, r2
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	8a9b      	ldrh	r3, [r3, #20]
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8000b5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b5c:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000b60:	4013      	ands	r3, r2
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	899b      	ldrh	r3, [r3, #12]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000b78:	f107 0308 	add.w	r3, r7, #8
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fdeb 	bl	8000758 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	4a2e      	ldr	r2, [pc, #184]	; (8000c40 <USART_Init+0x16c>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d102      	bne.n	8000b90 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b8e:	e001      	b.n	8000b94 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	899b      	ldrh	r3, [r3, #12]
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	b21b      	sxth	r3, r3
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	da0c      	bge.n	8000bba <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000ba0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	4413      	add	r3, r2
 8000ba8:	009a      	lsls	r2, r3, #2
 8000baa:	441a      	add	r2, r3
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8000bb8:	e00b      	b.n	8000bd2 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000bba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	4413      	add	r3, r2
 8000bc2:	009a      	lsls	r2, r3, #2
 8000bc4:	441a      	add	r2, r3
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd4:	4a1b      	ldr	r2, [pc, #108]	; (8000c44 <USART_Init+0x170>)
 8000bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bda:	095b      	lsrs	r3, r3, #5
 8000bdc:	011b      	lsls	r3, r3, #4
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be2:	091b      	lsrs	r3, r3, #4
 8000be4:	2264      	movs	r2, #100	; 0x64
 8000be6:	fb02 f303 	mul.w	r3, r2, r3
 8000bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	899b      	ldrh	r3, [r3, #12]
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	b21b      	sxth	r3, r3
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	da0c      	bge.n	8000c16 <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000bfc:	6a3b      	ldr	r3, [r7, #32]
 8000bfe:	00db      	lsls	r3, r3, #3
 8000c00:	3332      	adds	r3, #50	; 0x32
 8000c02:	4a10      	ldr	r2, [pc, #64]	; (8000c44 <USART_Init+0x170>)
 8000c04:	fba2 2303 	umull	r2, r3, r2, r3
 8000c08:	095b      	lsrs	r3, r3, #5
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c10:	4313      	orrs	r3, r2
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c14:	e00b      	b.n	8000c2e <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000c16:	6a3b      	ldr	r3, [r7, #32]
 8000c18:	011b      	lsls	r3, r3, #4
 8000c1a:	3332      	adds	r3, #50	; 0x32
 8000c1c:	4a09      	ldr	r2, [pc, #36]	; (8000c44 <USART_Init+0x170>)
 8000c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c22:	095b      	lsrs	r3, r3, #5
 8000c24:	f003 030f 	and.w	r3, r3, #15
 8000c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	811a      	strh	r2, [r3, #8]
}
 8000c36:	bf00      	nop
 8000c38:	3730      	adds	r7, #48	; 0x30
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40013800 	.word	0x40013800
 8000c44:	51eb851f 	.word	0x51eb851f

08000c48 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	460b      	mov	r3, r1
 8000c52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000c54:	78fb      	ldrb	r3, [r7, #3]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d008      	beq.n	8000c6c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	899b      	ldrh	r3, [r3, #12]
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8000c6a:	e007      	b.n	8000c7c <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	899b      	ldrh	r3, [r3, #12]
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	819a      	strh	r2, [r3, #12]
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr

08000c86 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	460b      	mov	r3, r1
 8000c90:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000c92:	887b      	ldrh	r3, [r7, #2]
 8000c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	809a      	strh	r2, [r3, #4]
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr

08000ca8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	889b      	ldrh	r3, [r3, #4]
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000cba:	b29b      	uxth	r3, r3
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr

08000cc6 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b085      	sub	sp, #20
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
 8000cce:	460b      	mov	r3, r1
 8000cd0:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	887b      	ldrh	r3, [r7, #2]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d002      	beq.n	8000cec <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	73fb      	strb	r3, [r7, #15]
 8000cea:	e001      	b.n	8000cf0 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000cec:	2300      	movs	r3, #0
 8000cee:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr

08000cfc <_ZN10CHeartBeat4InitEP5IGpioP6ITimert>:
 */

#include <HeartBeat.h>

void CHeartBeat::Init(IGpio *pIo,ITimer *pTimer,uint16_t period)
{
 8000cfc:	b538      	push	{r3, r4, r5, lr}
 8000cfe:	461d      	mov	r5, r3
	m_pIo=pIo;
 8000d00:	6141      	str	r1, [r0, #20]
	m_timer.Init(pTimer);
 8000d02:	1d04      	adds	r4, r0, #4
 8000d04:	4611      	mov	r1, r2
 8000d06:	4620      	mov	r0, r4
 8000d08:	f000 f984 	bl	8001014 <_ZN8CTimeout4InitEP6ITimer>
	m_timer.SetExpiry(period);
 8000d0c:	4629      	mov	r1, r5
 8000d0e:	4620      	mov	r0, r4
 8000d10:	f000 f98c 	bl	800102c <_ZN8CTimeout9SetExpiryEt>
 8000d14:	bd38      	pop	{r3, r4, r5, pc}

08000d16 <_ZN10CHeartBeat7ExecuteEv>:
}

void CHeartBeat::Execute()
{
 8000d16:	b538      	push	{r3, r4, r5, lr}
 8000d18:	4604      	mov	r4, r0
	if(!m_timer.HasElapsed())
 8000d1a:	1d05      	adds	r5, r0, #4
 8000d1c:	4628      	mov	r0, r5
 8000d1e:	f000 f98a 	bl	8001036 <_ZN8CTimeout10HasElapsedEv>
 8000d22:	b900      	cbnz	r0, 8000d26 <_ZN10CHeartBeat7ExecuteEv+0x10>
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
		return;
	m_timer.Reset();
 8000d26:	4628      	mov	r0, r5
 8000d28:	f000 f976 	bl	8001018 <_ZN8CTimeout5ResetEv>
	m_pIo->Toggle();
 8000d2c:	6964      	ldr	r4, [r4, #20]
	virtual void Set() = 0;
	virtual void Clear() = 0;
	virtual bool Get() const = 0;
	void Toggle()
	{
		if (Get()) Clear();
 8000d2e:	6823      	ldr	r3, [r4, #0]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	4620      	mov	r0, r4
 8000d34:	4798      	blx	r3
 8000d36:	b920      	cbnz	r0, 8000d42 <_ZN10CHeartBeat7ExecuteEv+0x2c>
		else Set();
 8000d38:	6823      	ldr	r3, [r4, #0]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4620      	mov	r0, r4
 8000d3e:	4798      	blx	r3
 8000d40:	e7f0      	b.n	8000d24 <_ZN10CHeartBeat7ExecuteEv+0xe>
		if (Get()) Clear();
 8000d42:	6823      	ldr	r3, [r4, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	4620      	mov	r0, r4
 8000d48:	4798      	blx	r3
 8000d4a:	bd38      	pop	{r3, r4, r5, pc}

08000d4c <_ZN10CHeartBeatC1Ev>:

}

CHeartBeat::CHeartBeat()
 8000d4c:	b510      	push	{r4, lr}
 8000d4e:	4604      	mov	r4, r0
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <_ZN10CHeartBeatC1Ev+0x14>)
 8000d52:	f840 3b04 	str.w	r3, [r0], #4
 8000d56:	f000 f981 	bl	800105c <_ZN8CTimeoutC1Ev>
{
	// TODO Auto-generated constructor stub

}
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	bd10      	pop	{r4, pc}
 8000d5e:	bf00      	nop
 8000d60:	08001a48 	.word	0x08001a48

08000d64 <_ZN10CHeartBeatD1Ev>:

CHeartBeat::~CHeartBeat()
 8000d64:	b510      	push	{r4, lr}
 8000d66:	4604      	mov	r4, r0
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <_ZN10CHeartBeatD1Ev+0x14>)
 8000d6a:	f840 3b04 	str.w	r3, [r0], #4
 8000d6e:	f000 f94a 	bl	8001006 <_ZN8CTimeoutD1Ev>
{
	// TODO Auto-generated destructor stub
}
 8000d72:	4620      	mov	r0, r4
 8000d74:	bd10      	pop	{r4, pc}
 8000d76:	bf00      	nop
 8000d78:	08001a48 	.word	0x08001a48

08000d7c <_ZN10CHeartBeatD0Ev>:
CHeartBeat::~CHeartBeat()
 8000d7c:	b510      	push	{r4, lr}
 8000d7e:	4604      	mov	r4, r0
}
 8000d80:	f7ff fff0 	bl	8000d64 <_ZN10CHeartBeatD1Ev>
 8000d84:	4620      	mov	r0, r4
 8000d86:	f000 fce3 	bl	8001750 <_ZdlPv>
 8000d8a:	4620      	mov	r0, r4
 8000d8c:	bd10      	pop	{r4, pc}

08000d8e <_ZN13CSTM32F10xADC4ReadEv>:
	m_pAdcBuffer = pAdcBuffer;
}

uint16_t CSTM32F10xADC::Read()
{
	return *m_pAdcBuffer;
 8000d8e:	6843      	ldr	r3, [r0, #4]
}
 8000d90:	8818      	ldrh	r0, [r3, #0]
 8000d92:	4770      	bx	lr

08000d94 <_ZN13CSTM32F10xADCD1Ev>:
}

CSTM32F10xADC::~CSTM32F10xADC()
{
	// TODO Auto-generated destructor stub
}
 8000d94:	4770      	bx	lr

08000d96 <_ZN13CSTM32F10xADCD0Ev>:
CSTM32F10xADC::~CSTM32F10xADC()
 8000d96:	b510      	push	{r4, lr}
 8000d98:	4604      	mov	r4, r0
}
 8000d9a:	f000 fcd9 	bl	8001750 <_ZdlPv>
 8000d9e:	4620      	mov	r0, r4
 8000da0:	bd10      	pop	{r4, pc}

08000da2 <_ZN13CSTM32F10xADC4InitEPt>:
	m_pAdcBuffer = pAdcBuffer;
 8000da2:	6041      	str	r1, [r0, #4]
 8000da4:	4770      	bx	lr
	...

08000da8 <_ZN13CSTM32F10xADCC1Ev>:
CSTM32F10xADC::CSTM32F10xADC()
 8000da8:	4b01      	ldr	r3, [pc, #4]	; (8000db0 <_ZN13CSTM32F10xADCC1Ev+0x8>)
 8000daa:	6003      	str	r3, [r0, #0]
}
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	08001a58 	.word	0x08001a58

08000db4 <_ZN14CSTM32F10xGpio3SetEv>:

#include <STM32F10xGpio.h>

void CSTM32F10xGpio::Set()
{
	m_pGpio->BSRR |= m_bitMask;
 8000db4:	6842      	ldr	r2, [r0, #4]
 8000db6:	6913      	ldr	r3, [r2, #16]
 8000db8:	6881      	ldr	r1, [r0, #8]
 8000dba:	430b      	orrs	r3, r1
 8000dbc:	6113      	str	r3, [r2, #16]
 8000dbe:	4770      	bx	lr

08000dc0 <_ZN14CSTM32F10xGpio5ClearEv>:
}

void CSTM32F10xGpio::Clear()
{
	m_pGpio->BSRR |= m_clearBitMask;
 8000dc0:	6842      	ldr	r2, [r0, #4]
 8000dc2:	6913      	ldr	r3, [r2, #16]
 8000dc4:	68c1      	ldr	r1, [r0, #12]
 8000dc6:	430b      	orrs	r3, r1
 8000dc8:	6113      	str	r3, [r2, #16]
 8000dca:	4770      	bx	lr

08000dcc <_ZNK14CSTM32F10xGpio3GetEv>:
}

bool CSTM32F10xGpio::Get() const
{
	return m_pGpio->IDR & m_bitMask;
 8000dcc:	6843      	ldr	r3, [r0, #4]
 8000dce:	689a      	ldr	r2, [r3, #8]
 8000dd0:	6883      	ldr	r3, [r0, #8]
 8000dd2:	421a      	tst	r2, r3
}
 8000dd4:	bf14      	ite	ne
 8000dd6:	2001      	movne	r0, #1
 8000dd8:	2000      	moveq	r0, #0
 8000dda:	4770      	bx	lr

08000ddc <_ZN14CSTM32F10xGpioD1Ev>:
}

CSTM32F10xGpio::~CSTM32F10xGpio()
{
	// TODO Auto-generated destructor stub
}
 8000ddc:	4770      	bx	lr

08000dde <_ZN14CSTM32F10xGpioD0Ev>:
CSTM32F10xGpio::~CSTM32F10xGpio()
 8000dde:	b510      	push	{r4, lr}
 8000de0:	4604      	mov	r4, r0
}
 8000de2:	f000 fcb5 	bl	8001750 <_ZdlPv>
 8000de6:	4620      	mov	r0, r4
 8000de8:	bd10      	pop	{r4, pc}

08000dea <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh>:
	if (pinNumber > 15) return;
 8000dea:	2a0f      	cmp	r2, #15
 8000dec:	dc08      	bgt.n	8000e00 <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh+0x16>
	m_pGpio = pGpio;
 8000dee:	6041      	str	r1, [r0, #4]
	m_bitMask = 1 << pinNumber;
 8000df0:	2301      	movs	r3, #1
 8000df2:	fa03 f102 	lsl.w	r1, r3, r2
 8000df6:	6081      	str	r1, [r0, #8]
	m_clearBitMask = 1 << (pinNumber + 16);
 8000df8:	3210      	adds	r2, #16
 8000dfa:	fa03 f202 	lsl.w	r2, r3, r2
 8000dfe:	60c2      	str	r2, [r0, #12]
 8000e00:	4770      	bx	lr
	...

08000e04 <_ZN14CSTM32F10xGpioC1Ev>:
CSTM32F10xGpio::CSTM32F10xGpio()
 8000e04:	4a02      	ldr	r2, [pc, #8]	; (8000e10 <_ZN14CSTM32F10xGpioC1Ev+0xc>)
 8000e06:	6002      	str	r2, [r0, #0]
	m_pGpio = NULL;
 8000e08:	2200      	movs	r2, #0
 8000e0a:	6042      	str	r2, [r0, #4]
	m_bitMask = 0;
 8000e0c:	6082      	str	r2, [r0, #8]
}
 8000e0e:	4770      	bx	lr
 8000e10:	08001a6c 	.word	0x08001a6c

08000e14 <_ZNK15CSTM32F10xTimer12CurrentTicksEv>:
	m_pTimer=pTimer;
}

uint16_t CSTM32F10xTimer::CurrentTicks() const
{
	return m_pTimer->CNT;
 8000e14:	6843      	ldr	r3, [r0, #4]
 8000e16:	8c98      	ldrh	r0, [r3, #36]	; 0x24
}
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	4770      	bx	lr

08000e1c <_ZN15CSTM32F10xTimerD1Ev>:
}

CSTM32F10xTimer::~CSTM32F10xTimer()
{
	// TODO Auto-generated destructor stub
}
 8000e1c:	4770      	bx	lr

08000e1e <_ZN15CSTM32F10xTimerD0Ev>:
CSTM32F10xTimer::~CSTM32F10xTimer()
 8000e1e:	b510      	push	{r4, lr}
 8000e20:	4604      	mov	r4, r0
}
 8000e22:	f000 fc95 	bl	8001750 <_ZdlPv>
 8000e26:	4620      	mov	r0, r4
 8000e28:	bd10      	pop	{r4, pc}

08000e2a <_ZN15CSTM32F10xTimer4InitEP11TIM_TypeDef>:
	m_pTimer=pTimer;
 8000e2a:	6041      	str	r1, [r0, #4]
 8000e2c:	4770      	bx	lr
	...

08000e30 <_ZN15CSTM32F10xTimerC1Ev>:
CSTM32F10xTimer::CSTM32F10xTimer()
 8000e30:	4b01      	ldr	r3, [pc, #4]	; (8000e38 <_ZN15CSTM32F10xTimerC1Ev+0x8>)
 8000e32:	6003      	str	r3, [r0, #0]
}
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	08001a88 	.word	0x08001a88

08000e3c <_ZN15CSTM32F10xUSART4ReadEPhPt>:
bool CSTM32F10xUSART::Read(unsigned char* pData, uint16_t* pLength)
{
//	for(uint16_t i=0;i<)
//	pData
	return false;
}
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	4770      	bx	lr

08000e40 <_ZN15CSTM32F10xUSARTD1Ev>:
}

CSTM32F10xUSART::~CSTM32F10xUSART()
{
	// TODO Auto-generated destructor stub
}
 8000e40:	4770      	bx	lr

08000e42 <_ZN13CCircularFifoIcLj322EED1Ev>:
	{
		Capacity = Size + 1
	};

	CCircularFifo() : m_Tail(0), m_Head(0) {}
	virtual ~CCircularFifo() {}
 8000e42:	4770      	bx	lr

08000e44 <_ZN13CCircularFifoIcLj322EED0Ev>:
 8000e44:	b510      	push	{r4, lr}
 8000e46:	4604      	mov	r4, r0
 8000e48:	f000 fc82 	bl	8001750 <_ZdlPv>
 8000e4c:	4620      	mov	r0, r4
 8000e4e:	bd10      	pop	{r4, pc}

08000e50 <_ZN15CSTM32F10xUSARTD0Ev>:
CSTM32F10xUSART::~CSTM32F10xUSART()
 8000e50:	b510      	push	{r4, lr}
 8000e52:	4604      	mov	r4, r0
}
 8000e54:	f000 fc7c 	bl	8001750 <_ZdlPv>
 8000e58:	4620      	mov	r0, r4
 8000e5a:	bd10      	pop	{r4, pc}

08000e5c <_ZN15CSTM32F10xUSART4InitEP13USART_TypeDef>:
	m_pUsart = pUsart;
 8000e5c:	6041      	str	r1, [r0, #4]
 8000e5e:	4770      	bx	lr

08000e60 <_ZN15CSTM32F10xUSARTC1Ev>:
CSTM32F10xUSART::CSTM32F10xUSART()
 8000e60:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <_ZN15CSTM32F10xUSARTC1Ev+0x20>)
 8000e62:	6002      	str	r2, [r0, #0]
	CCircularFifo() : m_Tail(0), m_Head(0) {}
 8000e64:	4907      	ldr	r1, [pc, #28]	; (8000e84 <_ZN15CSTM32F10xUSARTC1Ev+0x24>)
 8000e66:	6081      	str	r1, [r0, #8]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60c2      	str	r2, [r0, #12]
 8000e6c:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
 8000e70:	f8c0 1158 	str.w	r1, [r0, #344]	; 0x158
 8000e74:	f8c0 215c 	str.w	r2, [r0, #348]	; 0x15c
 8000e78:	f8c0 22a4 	str.w	r2, [r0, #676]	; 0x2a4
}
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	08001aac 	.word	0x08001aac
 8000e84:	08001a9c 	.word	0x08001a9c

08000e88 <_ZNK13CCircularFifoIcLj322EE7IsEmptyEv>:
 *
 * \return true if circular buffer is empty */
template<typename Element, unsigned int Size>
bool CCircularFifo<Element, Size>::IsEmpty() const
{
	return (m_Head == m_Tail);
 8000e88:	f8d0 214c 	ldr.w	r2, [r0, #332]	; 0x14c
 8000e8c:	6840      	ldr	r0, [r0, #4]
}
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	bf14      	ite	ne
 8000e92:	2000      	movne	r0, #0
 8000e94:	2001      	moveq	r0, #1
 8000e96:	4770      	bx	lr

08000e98 <_ZN15CSTM32F10xUSART7HasDataEv>:
{
 8000e98:	b508      	push	{r3, lr}
	return !m_RxBuffer.IsEmpty();
 8000e9a:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 8000e9e:	f7ff fff3 	bl	8000e88 <_ZNK13CCircularFifoIcLj322EE7IsEmptyEv>
 8000ea2:	f080 0001 	eor.w	r0, r0, #1
}
 8000ea6:	b2c0      	uxtb	r0, r0
 8000ea8:	bd08      	pop	{r3, pc}
	...

08000eac <_ZNK13CCircularFifoIcLj322EE9incrementEj>:
	//    index++;
	//    if(index == array.lenght) -> index = 0;
	//
	//or as written below:
	//    index = (index+1) % array.length
	idx_ = (idx_ + 1) % Capacity;
 8000eac:	3101      	adds	r1, #1
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <_ZNK13CCircularFifoIcLj322EE9incrementEj+0x1c>)
 8000eb0:	fba3 2301 	umull	r2, r3, r3, r1
 8000eb4:	1ac8      	subs	r0, r1, r3
 8000eb6:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8000eba:	0a1b      	lsrs	r3, r3, #8
	return idx_;
}
 8000ebc:	f240 1043 	movw	r0, #323	; 0x143
 8000ec0:	fb00 1013 	mls	r0, r0, r3, r1
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	95cbb0bf 	.word	0x95cbb0bf

08000ecc <_ZN13CCircularFifoIcLj322EE4PushERc>:
bool CCircularFifo<Element, Size>::Push(Element& item_)
 8000ecc:	b538      	push	{r3, r4, r5, lr}
 8000ece:	4604      	mov	r4, r0
 8000ed0:	460d      	mov	r5, r1
	unsigned int nextTail = increment(m_Tail);
 8000ed2:	6841      	ldr	r1, [r0, #4]
 8000ed4:	f7ff ffea 	bl	8000eac <_ZNK13CCircularFifoIcLj322EE9incrementEj>
	if (nextTail != m_Head)
 8000ed8:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
 8000edc:	4298      	cmp	r0, r3
 8000ede:	d006      	beq.n	8000eee <_ZN13CCircularFifoIcLj322EE4PushERc+0x22>
		m_Array[m_Tail] = item_;
 8000ee0:	6863      	ldr	r3, [r4, #4]
 8000ee2:	782a      	ldrb	r2, [r5, #0]
 8000ee4:	4423      	add	r3, r4
 8000ee6:	721a      	strb	r2, [r3, #8]
		m_Tail = nextTail;
 8000ee8:	6060      	str	r0, [r4, #4]
		return true;
 8000eea:	2001      	movs	r0, #1
 8000eec:	bd38      	pop	{r3, r4, r5, pc}
	return false;
 8000eee:	2000      	movs	r0, #0
}
 8000ef0:	bd38      	pop	{r3, r4, r5, pc}

08000ef2 <_ZN15CSTM32F10xUSART5WriteEPKct>:
{
 8000ef2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	4607      	mov	r7, r0
 8000ef8:	4616      	mov	r6, r2
	for (i = 0; i < length; i++)
 8000efa:	2400      	movs	r4, #0
 8000efc:	42b4      	cmp	r4, r6
 8000efe:	da0d      	bge.n	8000f1c <_ZN15CSTM32F10xUSART5WriteEPKct+0x2a>
		txData = *data++;
 8000f00:	1c4d      	adds	r5, r1, #1
 8000f02:	780b      	ldrb	r3, [r1, #0]
 8000f04:	a902      	add	r1, sp, #8
 8000f06:	f801 3d01 	strb.w	r3, [r1, #-1]!
		if (!m_TxBuffer.Push(txData)) break;
 8000f0a:	f107 0008 	add.w	r0, r7, #8
 8000f0e:	f7ff ffdd 	bl	8000ecc <_ZN13CCircularFifoIcLj322EE4PushERc>
 8000f12:	b118      	cbz	r0, 8000f1c <_ZN15CSTM32F10xUSART5WriteEPKct+0x2a>
	for (i = 0; i < length; i++)
 8000f14:	3401      	adds	r4, #1
 8000f16:	b2a4      	uxth	r4, r4
		txData = *data++;
 8000f18:	4629      	mov	r1, r5
	for (i = 0; i < length; i++)
 8000f1a:	e7ef      	b.n	8000efc <_ZN15CSTM32F10xUSART5WriteEPKct+0xa>
}
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	b003      	add	sp, #12
 8000f20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f22 <_ZN15CSTM32F10xUSART5WriteEPKc>:
{
 8000f22:	b570      	push	{r4, r5, r6, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	4606      	mov	r6, r0
 8000f28:	460d      	mov	r5, r1
	uint16_t dataSend = 0;
 8000f2a:	2400      	movs	r4, #0
	while (*data)
 8000f2c:	782b      	ldrb	r3, [r5, #0]
 8000f2e:	b15b      	cbz	r3, 8000f48 <_ZN15CSTM32F10xUSART5WriteEPKc+0x26>
		txData = *data++;
 8000f30:	3501      	adds	r5, #1
 8000f32:	a902      	add	r1, sp, #8
 8000f34:	f801 3d01 	strb.w	r3, [r1, #-1]!
		if (m_TxBuffer.Push(txData)) dataSend++;
 8000f38:	f106 0008 	add.w	r0, r6, #8
 8000f3c:	f7ff ffc6 	bl	8000ecc <_ZN13CCircularFifoIcLj322EE4PushERc>
 8000f40:	b110      	cbz	r0, 8000f48 <_ZN15CSTM32F10xUSART5WriteEPKc+0x26>
 8000f42:	3401      	adds	r4, #1
 8000f44:	b2a4      	uxth	r4, r4
	while (*data)
 8000f46:	e7f1      	b.n	8000f2c <_ZN15CSTM32F10xUSART5WriteEPKc+0xa>
}
 8000f48:	4620      	mov	r0, r4
 8000f4a:	b002      	add	sp, #8
 8000f4c:	bd70      	pop	{r4, r5, r6, pc}

08000f4e <_ZN15CSTM32F10xUSART9executeRxEv>:
{
 8000f4e:	b510      	push	{r4, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	4604      	mov	r4, r0
	if (!USART_GetFlagStatus(m_pUsart, USART_FLAG_RXNE)) return;
 8000f54:	2120      	movs	r1, #32
 8000f56:	6840      	ldr	r0, [r0, #4]
 8000f58:	f7ff feb5 	bl	8000cc6 <USART_GetFlagStatus>
 8000f5c:	b908      	cbnz	r0, 8000f62 <_ZN15CSTM32F10xUSART9executeRxEv+0x14>
}
 8000f5e:	b002      	add	sp, #8
 8000f60:	bd10      	pop	{r4, pc}
	char data = USART_ReceiveData(m_pUsart);
 8000f62:	6860      	ldr	r0, [r4, #4]
 8000f64:	f7ff fea0 	bl	8000ca8 <USART_ReceiveData>
 8000f68:	a902      	add	r1, sp, #8
 8000f6a:	f801 0d01 	strb.w	r0, [r1, #-1]!
	m_RxBuffer.Push(data);
 8000f6e:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 8000f72:	f7ff ffab 	bl	8000ecc <_ZN13CCircularFifoIcLj322EE4PushERc>
 8000f76:	e7f2      	b.n	8000f5e <_ZN15CSTM32F10xUSART9executeRxEv+0x10>

08000f78 <_ZN13CCircularFifoIcLj322EE3PopERc>:
	if (m_Head == m_Tail) return false;  // empty queue
 8000f78:	f8d0 214c 	ldr.w	r2, [r0, #332]	; 0x14c
 8000f7c:	6843      	ldr	r3, [r0, #4]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d00e      	beq.n	8000fa0 <_ZN13CCircularFifoIcLj322EE3PopERc+0x28>
bool CCircularFifo<Element, Size>::Pop(Element& item_)
 8000f82:	b510      	push	{r4, lr}
 8000f84:	4604      	mov	r4, r0
	item_ = m_Array[m_Head];
 8000f86:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8000f8a:	4403      	add	r3, r0
 8000f8c:	7a1b      	ldrb	r3, [r3, #8]
 8000f8e:	700b      	strb	r3, [r1, #0]
	m_Head = increment(m_Head);
 8000f90:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
 8000f94:	f7ff ff8a 	bl	8000eac <_ZNK13CCircularFifoIcLj322EE9incrementEj>
 8000f98:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
	return true;
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	bd10      	pop	{r4, pc}
	if (m_Head == m_Tail) return false;  // empty queue
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	4770      	bx	lr

08000fa4 <_ZN15CSTM32F10xUSART8ReadByteEv>:
{
 8000fa4:	b500      	push	{lr}
 8000fa6:	b083      	sub	sp, #12
	m_RxBuffer.Pop(data);
 8000fa8:	f10d 0107 	add.w	r1, sp, #7
 8000fac:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 8000fb0:	f7ff ffe2 	bl	8000f78 <_ZN13CCircularFifoIcLj322EE3PopERc>
}
 8000fb4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000fb8:	b003      	add	sp, #12
 8000fba:	f85d fb04 	ldr.w	pc, [sp], #4

08000fbe <_ZN15CSTM32F10xUSART9executeTxEv>:
{
 8000fbe:	b530      	push	{r4, r5, lr}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	4604      	mov	r4, r0
	if (m_TxBuffer.IsEmpty()) return;
 8000fc4:	f100 0508 	add.w	r5, r0, #8
 8000fc8:	4628      	mov	r0, r5
 8000fca:	f7ff ff5d 	bl	8000e88 <_ZNK13CCircularFifoIcLj322EE7IsEmptyEv>
 8000fce:	b108      	cbz	r0, 8000fd4 <_ZN15CSTM32F10xUSART9executeTxEv+0x16>
}
 8000fd0:	b003      	add	sp, #12
 8000fd2:	bd30      	pop	{r4, r5, pc}
	if (!USART_GetFlagStatus(m_pUsart, USART_FLAG_TXE)) return;
 8000fd4:	2180      	movs	r1, #128	; 0x80
 8000fd6:	6860      	ldr	r0, [r4, #4]
 8000fd8:	f7ff fe75 	bl	8000cc6 <USART_GetFlagStatus>
 8000fdc:	2800      	cmp	r0, #0
 8000fde:	d0f7      	beq.n	8000fd0 <_ZN15CSTM32F10xUSART9executeTxEv+0x12>
	m_TxBuffer.Pop(data);
 8000fe0:	f10d 0107 	add.w	r1, sp, #7
 8000fe4:	4628      	mov	r0, r5
 8000fe6:	f7ff ffc7 	bl	8000f78 <_ZN13CCircularFifoIcLj322EE3PopERc>
	USART_SendData(m_pUsart, data);
 8000fea:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8000fee:	6860      	ldr	r0, [r4, #4]
 8000ff0:	f7ff fe49 	bl	8000c86 <USART_SendData>
 8000ff4:	e7ec      	b.n	8000fd0 <_ZN15CSTM32F10xUSART9executeTxEv+0x12>

08000ff6 <_ZN15CSTM32F10xUSART7ExecuteEv>:
{
 8000ff6:	b510      	push	{r4, lr}
 8000ff8:	4604      	mov	r4, r0
	executeTx();
 8000ffa:	f7ff ffe0 	bl	8000fbe <_ZN15CSTM32F10xUSART9executeTxEv>
	executeRx();
 8000ffe:	4620      	mov	r0, r4
 8001000:	f7ff ffa5 	bl	8000f4e <_ZN15CSTM32F10xUSART9executeRxEv>
 8001004:	bd10      	pop	{r4, pc}

08001006 <_ZN8CTimeoutD1Ev>:
}

CTimeout::~CTimeout()
{
	// TODO Auto-generated destructor stub
}
 8001006:	4770      	bx	lr

08001008 <_ZN8CTimeoutD0Ev>:
CTimeout::~CTimeout()
 8001008:	b510      	push	{r4, lr}
 800100a:	4604      	mov	r4, r0
}
 800100c:	f000 fba0 	bl	8001750 <_ZdlPv>
 8001010:	4620      	mov	r0, r4
 8001012:	bd10      	pop	{r4, pc}

08001014 <_ZN8CTimeout4InitEP6ITimer>:
	m_timer = pTimer;
 8001014:	6041      	str	r1, [r0, #4]
 8001016:	4770      	bx	lr

08001018 <_ZN8CTimeout5ResetEv>:
{
 8001018:	b510      	push	{r4, lr}
 800101a:	4604      	mov	r4, r0
	m_prevTimer = m_timer->CurrentTicks();
 800101c:	6840      	ldr	r0, [r0, #4]
 800101e:	6803      	ldr	r3, [r0, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4798      	blx	r3
 8001024:	8160      	strh	r0, [r4, #10]
	m_hasElapsed = false;
 8001026:	2300      	movs	r3, #0
 8001028:	7323      	strb	r3, [r4, #12]
 800102a:	bd10      	pop	{r4, pc}

0800102c <_ZN8CTimeout9SetExpiryEt>:
{
 800102c:	b508      	push	{r3, lr}
	m_expiry = tick;
 800102e:	8101      	strh	r1, [r0, #8]
	Reset();
 8001030:	f7ff fff2 	bl	8001018 <_ZN8CTimeout5ResetEv>
 8001034:	bd08      	pop	{r3, pc}

08001036 <_ZN8CTimeout10HasElapsedEv>:
{
 8001036:	b510      	push	{r4, lr}
 8001038:	4604      	mov	r4, r0
	if (!m_hasElapsed)
 800103a:	7b03      	ldrb	r3, [r0, #12]
 800103c:	b10b      	cbz	r3, 8001042 <_ZN8CTimeout10HasElapsedEv+0xc>
}
 800103e:	7b20      	ldrb	r0, [r4, #12]
 8001040:	bd10      	pop	{r4, pc}
		if ((uint16_t)(m_timer->CurrentTicks() - m_prevTimer) >= m_expiry) m_hasElapsed = true;
 8001042:	6840      	ldr	r0, [r0, #4]
 8001044:	6803      	ldr	r3, [r0, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4798      	blx	r3
 800104a:	8963      	ldrh	r3, [r4, #10]
 800104c:	1ac0      	subs	r0, r0, r3
 800104e:	b280      	uxth	r0, r0
 8001050:	8923      	ldrh	r3, [r4, #8]
 8001052:	4298      	cmp	r0, r3
 8001054:	dbf3      	blt.n	800103e <_ZN8CTimeout10HasElapsedEv+0x8>
 8001056:	2301      	movs	r3, #1
 8001058:	7323      	strb	r3, [r4, #12]
 800105a:	e7f0      	b.n	800103e <_ZN8CTimeout10HasElapsedEv+0x8>

0800105c <_ZN8CTimeoutC1Ev>:
CTimeout::CTimeout()
 800105c:	4b01      	ldr	r3, [pc, #4]	; (8001064 <_ZN8CTimeoutC1Ev+0x8>)
 800105e:	6003      	str	r3, [r0, #0]
}
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	08001ad0 	.word	0x08001ad0

08001068 <_ZN12CAnalogInputD1Ev>:
}

inline CAnalogInput::~CAnalogInput()
{

}
 8001068:	4770      	bx	lr

0800106a <_ZN12CAnalogInputD0Ev>:
inline CAnalogInput::~CAnalogInput()
 800106a:	b510      	push	{r4, lr}
 800106c:	4604      	mov	r4, r0
}
 800106e:	f000 fb6f 	bl	8001750 <_ZdlPv>
 8001072:	4620      	mov	r0, r4
 8001074:	bd10      	pop	{r4, pc}
	...

08001078 <main>:
#include <ACFrequencyMeter.h>
#include <AnalogInput.h>
#include <HeartBeat.h>

int main(void)
{
 8001078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800107a:	f5ad 7d69 	sub.w	sp, sp, #932	; 0x3a4
	// ----------------- INIT BASIC ---------------------------------------
	// all 72MHz clock and flash init
	SystemInit();
 800107e:	f000 f9b7 	bl	80013f0 <SystemInit>
	RCC_ADCCLKConfig(RCC_PCLK2_Div8);
 8001082:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8001086:	f7ff fb4b 	bl	8000720 <RCC_ADCCLKConfig>
	// peripheral clock enable
	uint32_t apb1Enable = RCC_APB1Periph_SPI2 | RCC_APB1Periph_TIM3 | RCC_APB1Periph_USART3;
	RCC_APB1PeriphClockCmd(apb1Enable, ENABLE);
 800108a:	2101      	movs	r1, #1
 800108c:	48a3      	ldr	r0, [pc, #652]	; (800131c <main+0x2a4>)
 800108e:	f7ff fc4f 	bl	8000930 <RCC_APB1PeriphClockCmd>
	uint32_t apb2Enable = RCC_APB2Periph_ADC1 | RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB
			| RCC_APB2Periph_GPIOC;
	RCC_APB2PeriphClockCmd(apb2Enable, ENABLE);
 8001092:	2101      	movs	r1, #1
 8001094:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8001098:	f7ff fc2c 	bl	80008f4 <RCC_APB2PeriphClockCmd>
	uint32_t ahbEnable = RCC_AHBPeriph_DMA1;
	RCC_AHBPeriphClockCmd(ahbEnable, ENABLE);
 800109c:	2101      	movs	r1, #1
 800109e:	4608      	mov	r0, r1
 80010a0:	f7ff fc0a 	bl	80008b8 <RCC_AHBPeriphClockCmd>

	// main timer init
	TIM_TimeBaseInitTypeDef timer;
	TIM_TimeBaseStructInit(&timer);
 80010a4:	a8e5      	add	r0, sp, #916	; 0x394
 80010a6:	f7ff fcdd 	bl	8000a64 <TIM_TimeBaseStructInit>
	timer.TIM_Period = 0xffff;
 80010aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ae:	f8ad 3398 	strh.w	r3, [sp, #920]	; 0x398
	timer.TIM_Prescaler = 7199; // 100us timer period!
 80010b2:	f641 431f 	movw	r3, #7199	; 0x1c1f
 80010b6:	f8ad 3394 	strh.w	r3, [sp, #916]	; 0x394
	TIM_TimeBaseInit(TIM3, &timer);
 80010ba:	4d99      	ldr	r5, [pc, #612]	; (8001320 <main+0x2a8>)
 80010bc:	a9e5      	add	r1, sp, #916	; 0x394
 80010be:	4628      	mov	r0, r5
 80010c0:	f7ff fc54 	bl	800096c <TIM_TimeBaseInit>
	TIM_Cmd(TIM3, ENABLE);
 80010c4:	2101      	movs	r1, #1
 80010c6:	4628      	mov	r0, r5
 80010c8:	f7ff fce5 	bl	8000a96 <TIM_Cmd>

	GPIO_InitTypeDef sGpio;
	// heartbeat
	sGpio.GPIO_Pin = GPIO_Pin_13;
 80010cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d0:	f8ad 3390 	strh.w	r3, [sp, #912]	; 0x390
	sGpio.GPIO_Speed = GPIO_Speed_2MHz;
 80010d4:	2402      	movs	r4, #2
 80010d6:	f88d 4392 	strb.w	r4, [sp, #914]	; 0x392
	sGpio.GPIO_Mode = GPIO_Mode_Out_OD;
 80010da:	2314      	movs	r3, #20
 80010dc:	f88d 3393 	strb.w	r3, [sp, #915]	; 0x393
	GPIO_Init(GPIOC, &sGpio); // pc13
 80010e0:	4e90      	ldr	r6, [pc, #576]	; (8001324 <main+0x2ac>)
 80010e2:	a9e4      	add	r1, sp, #912	; 0x390
 80010e4:	4630      	mov	r0, r6
 80010e6:	f7ff fa4b 	bl	8000580 <GPIO_Init>

	CSTM32F10xTimer MainTimer;
 80010ea:	a8e2      	add	r0, sp, #904	; 0x388
 80010ec:	f7ff fea0 	bl	8000e30 <_ZN15CSTM32F10xTimerC1Ev>
	MainTimer.Init(TIM3);
 80010f0:	4629      	mov	r1, r5
 80010f2:	a8e2      	add	r0, sp, #904	; 0x388
 80010f4:	f7ff fe99 	bl	8000e2a <_ZN15CSTM32F10xTimer4InitEP11TIM_TypeDef>
	CSTM32F10xGpio GpioHeartBeat;
 80010f8:	a8de      	add	r0, sp, #888	; 0x378
 80010fa:	f7ff fe83 	bl	8000e04 <_ZN14CSTM32F10xGpioC1Ev>
	GpioHeartBeat.Init(GPIOC, 13);
 80010fe:	220d      	movs	r2, #13
 8001100:	4631      	mov	r1, r6
 8001102:	a8de      	add	r0, sp, #888	; 0x378
 8001104:	f7ff fe71 	bl	8000dea <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh>
	CHeartBeat HeartBeat;
 8001108:	a8d8      	add	r0, sp, #864	; 0x360
 800110a:	f7ff fe1f 	bl	8000d4c <_ZN10CHeartBeatC1Ev>
	HeartBeat.Init(&GpioHeartBeat, &MainTimer, 5000);
 800110e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001112:	aae2      	add	r2, sp, #904	; 0x388
 8001114:	a9de      	add	r1, sp, #888	; 0x378
 8001116:	a8d8      	add	r0, sp, #864	; 0x360
 8001118:	f7ff fdf0 	bl	8000cfc <_ZN10CHeartBeat4InitEP5IGpioP6ITimert>

	// --------------------------------------------------------------------

	// --------------- INIT EEPROM ----------------------------------------
	sGpio.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7; // sda1 scl1
 800111c:	23c0      	movs	r3, #192	; 0xc0
 800111e:	f8ad 3390 	strh.w	r3, [sp, #912]	; 0x390
	sGpio.GPIO_Speed = GPIO_Speed_2MHz;
 8001122:	f88d 4392 	strb.w	r4, [sp, #914]	; 0x392
	sGpio.GPIO_Mode = GPIO_Mode_AF_OD;
 8001126:	261c      	movs	r6, #28
 8001128:	f88d 6393 	strb.w	r6, [sp, #915]	; 0x393
	GPIO_Init(GPIOB, &sGpio);
 800112c:	f505 3584 	add.w	r5, r5, #67584	; 0x10800
 8001130:	a9e4      	add	r1, sp, #912	; 0x390
 8001132:	4628      	mov	r0, r5
 8001134:	f7ff fa24 	bl	8000580 <GPIO_Init>

	// --------------------------------------------------------------------

	// --------------- UART Initialization -----------------------------
	sGpio.GPIO_Pin = GPIO_Pin_10; // tx3
 8001138:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800113c:	f8ad 3390 	strh.w	r3, [sp, #912]	; 0x390
	sGpio.GPIO_Speed = GPIO_Speed_2MHz;
 8001140:	f88d 4392 	strb.w	r4, [sp, #914]	; 0x392
	sGpio.GPIO_Mode = GPIO_Mode_AF_PP;
 8001144:	2318      	movs	r3, #24
 8001146:	f88d 3393 	strb.w	r3, [sp, #915]	; 0x393
	GPIO_Init(GPIOB, &sGpio);
 800114a:	a9e4      	add	r1, sp, #912	; 0x390
 800114c:	4628      	mov	r0, r5
 800114e:	f7ff fa17 	bl	8000580 <GPIO_Init>
	sGpio.GPIO_Pin = GPIO_Pin_11; // rx3
 8001152:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001156:	f8ad 3390 	strh.w	r3, [sp, #912]	; 0x390
	sGpio.GPIO_Speed = GPIO_Speed_2MHz;
 800115a:	f88d 4392 	strb.w	r4, [sp, #914]	; 0x392
	sGpio.GPIO_Mode = GPIO_Mode_AF_OD;
 800115e:	f88d 6393 	strb.w	r6, [sp, #915]	; 0x393
	GPIO_Init(GPIOB, &sGpio);
 8001162:	a9e4      	add	r1, sp, #912	; 0x390
 8001164:	4628      	mov	r0, r5
 8001166:	f7ff fa0b 	bl	8000580 <GPIO_Init>

	USART_InitTypeDef usart;
	usart.USART_BaudRate = 9600;
 800116a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800116e:	93d4      	str	r3, [sp, #848]	; 0x350
	usart.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001170:	2300      	movs	r3, #0
 8001172:	f8ad 335c 	strh.w	r3, [sp, #860]	; 0x35c
	usart.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001176:	220c      	movs	r2, #12
 8001178:	f8ad 235a 	strh.w	r2, [sp, #858]	; 0x35a
	usart.USART_Parity = USART_Parity_No;
 800117c:	f8ad 3358 	strh.w	r3, [sp, #856]	; 0x358
	usart.USART_StopBits = USART_StopBits_1;
 8001180:	f8ad 3356 	strh.w	r3, [sp, #854]	; 0x356
	usart.USART_WordLength = USART_WordLength_8b;
 8001184:	f8ad 3354 	strh.w	r3, [sp, #852]	; 0x354
	USART_Init(USART3, &usart);
 8001188:	4c67      	ldr	r4, [pc, #412]	; (8001328 <main+0x2b0>)
 800118a:	a9d4      	add	r1, sp, #848	; 0x350
 800118c:	4620      	mov	r0, r4
 800118e:	f7ff fca1 	bl	8000ad4 <USART_Init>
	USART_Cmd(USART3, ENABLE);
 8001192:	2101      	movs	r1, #1
 8001194:	4620      	mov	r0, r4
 8001196:	f7ff fd57 	bl	8000c48 <USART_Cmd>
	CSTM32F10xUSART Uart;
 800119a:	a82a      	add	r0, sp, #168	; 0xa8
 800119c:	f7ff fe60 	bl	8000e60 <_ZN15CSTM32F10xUSARTC1Ev>
	Uart.Init(USART3);
 80011a0:	4621      	mov	r1, r4
 80011a2:	a82a      	add	r0, sp, #168	; 0xa8
 80011a4:	f7ff fe5a 	bl	8000e5c <_ZN15CSTM32F10xUSART4InitEP13USART_TypeDef>
	// -----------------------------------------------------------------

	// ------------------------- Init ADC ------------------------------
	CSTM32F10xADC Adc[2];
 80011a8:	2501      	movs	r5, #1
 80011aa:	ac26      	add	r4, sp, #152	; 0x98
 80011ac:	2d00      	cmp	r5, #0
 80011ae:	db05      	blt.n	80011bc <main+0x144>
 80011b0:	4620      	mov	r0, r4
 80011b2:	f7ff fdf9 	bl	8000da8 <_ZN13CSTM32F10xADCC1Ev>
 80011b6:	3408      	adds	r4, #8
 80011b8:	3d01      	subs	r5, #1
 80011ba:	e7f7      	b.n	80011ac <main+0x134>
 80011bc:	2400      	movs	r4, #0
	uint16_t adcBuffer[2];
	for (uint16_t i = 0; i < 2; i++)
 80011be:	2c01      	cmp	r4, #1
 80011c0:	dc0a      	bgt.n	80011d8 <main+0x160>
	{
		Adc[i].Init(&adcBuffer[i]);
 80011c2:	ab25      	add	r3, sp, #148	; 0x94
 80011c4:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 80011c8:	ab26      	add	r3, sp, #152	; 0x98
 80011ca:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
 80011ce:	f7ff fde8 	bl	8000da2 <_ZN13CSTM32F10xADC4InitEPt>
	for (uint16_t i = 0; i < 2; i++)
 80011d2:	3401      	adds	r4, #1
 80011d4:	b2a4      	uxth	r4, r4
 80011d6:	e7f2      	b.n	80011be <main+0x146>
	}
//	 adc io init
	GPIO_StructInit(&sGpio);
 80011d8:	a8e4      	add	r0, sp, #912	; 0x390
 80011da:	f7ff fa8d 	bl	80006f8 <GPIO_StructInit>
	sGpio.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1; // adc0 adc1
 80011de:	2303      	movs	r3, #3
 80011e0:	f8ad 3390 	strh.w	r3, [sp, #912]	; 0x390
	sGpio.GPIO_Mode = GPIO_Mode_AIN;
 80011e4:	2600      	movs	r6, #0
 80011e6:	f88d 6393 	strb.w	r6, [sp, #915]	; 0x393
	GPIO_Init(GPIOA, &sGpio);
 80011ea:	a9e4      	add	r1, sp, #912	; 0x390
 80011ec:	484f      	ldr	r0, [pc, #316]	; (800132c <main+0x2b4>)
 80011ee:	f7ff f9c7 	bl	8000580 <GPIO_Init>

	// adc dma init
	DMA_InitTypeDef dma;
	DMA_StructInit(&dma);
 80011f2:	a81a      	add	r0, sp, #104	; 0x68
 80011f4:	f7ff f97e 	bl	80004f4 <DMA_StructInit>
	dma.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 80011f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011fc:	9321      	str	r3, [sp, #132]	; 0x84
	dma.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 80011fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001202:	9320      	str	r3, [sp, #128]	; 0x80
	dma.DMA_DIR = DMA_DIR_PeripheralSRC;
 8001204:	961c      	str	r6, [sp, #112]	; 0x70
	dma.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	931f      	str	r3, [sp, #124]	; 0x7c
	dma.DMA_Mode = DMA_Mode_Circular;
 800120a:	2320      	movs	r3, #32
 800120c:	9322      	str	r3, [sp, #136]	; 0x88
	dma.DMA_BufferSize = 2;
 800120e:	2702      	movs	r7, #2
 8001210:	971d      	str	r7, [sp, #116]	; 0x74
	dma.DMA_Priority = DMA_Priority_Low;
 8001212:	9623      	str	r6, [sp, #140]	; 0x8c
	dma.DMA_MemoryBaseAddr = (uint32_t)adcBuffer;
 8001214:	ab25      	add	r3, sp, #148	; 0x94
 8001216:	931b      	str	r3, [sp, #108]	; 0x6c
	dma.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
 8001218:	4b45      	ldr	r3, [pc, #276]	; (8001330 <main+0x2b8>)
 800121a:	931a      	str	r3, [sp, #104]	; 0x68
	DMA_Init(DMA1_Channel1, &dma);
 800121c:	4c45      	ldr	r4, [pc, #276]	; (8001334 <main+0x2bc>)
 800121e:	a91a      	add	r1, sp, #104	; 0x68
 8001220:	4620      	mov	r0, r4
 8001222:	f7ff f929 	bl	8000478 <DMA_Init>
	DMA_Cmd(DMA1_Channel1, ENABLE);
 8001226:	2101      	movs	r1, #1
 8001228:	4620      	mov	r0, r4
 800122a:	f7ff f98d 	bl	8000548 <DMA_Cmd>

	// adc peripheral init
	ADC_InitTypeDef adc;
	ADC_StructInit(&adc);
 800122e:	a815      	add	r0, sp, #84	; 0x54
 8001230:	f7fe ffde 	bl	80001f0 <ADC_StructInit>
	adc.ADC_ContinuousConvMode = ENABLE;
 8001234:	2401      	movs	r4, #1
 8001236:	f88d 4059 	strb.w	r4, [sp, #89]	; 0x59
	adc.ADC_NbrOfChannel = 2;
 800123a:	f88d 7064 	strb.w	r7, [sp, #100]	; 0x64
	adc.ADC_ScanConvMode = ENABLE;
 800123e:	f88d 4058 	strb.w	r4, [sp, #88]	; 0x58
	ADC_Init(ADC1, &adc);
 8001242:	4d3d      	ldr	r5, [pc, #244]	; (8001338 <main+0x2c0>)
 8001244:	a915      	add	r1, sp, #84	; 0x54
 8001246:	4628      	mov	r0, r5
 8001248:	f7fe ff80 	bl	800014c <ADC_Init>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_239Cycles5);
 800124c:	2307      	movs	r3, #7
 800124e:	4622      	mov	r2, r4
 8001250:	4631      	mov	r1, r6
 8001252:	4628      	mov	r0, r5
 8001254:	f7ff f847 	bl	80002e6 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 2, ADC_SampleTime_239Cycles5);
 8001258:	2307      	movs	r3, #7
 800125a:	463a      	mov	r2, r7
 800125c:	4621      	mov	r1, r4
 800125e:	4628      	mov	r0, r5
 8001260:	f7ff f841 	bl	80002e6 <ADC_RegularChannelConfig>
	ADC1->CR2 |= 7 << 17; // extenal trigger on software
 8001264:	68ab      	ldr	r3, [r5, #8]
 8001266:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 800126a:	60ab      	str	r3, [r5, #8]
	ADC_DMACmd(ADC1, ENABLE);
 800126c:	4621      	mov	r1, r4
 800126e:	4628      	mov	r0, r5
 8001270:	f7fe fff4 	bl	800025c <ADC_DMACmd>
	ADC_Cmd(ADC1, ENABLE);
 8001274:	4621      	mov	r1, r4
 8001276:	4628      	mov	r0, r5
 8001278:	f7fe ffd5 	bl	8000226 <ADC_Cmd>
	ADC_SoftwareStartConvCmd(ADC1, ENABLE);
 800127c:	4621      	mov	r1, r4
 800127e:	4628      	mov	r0, r5
 8001280:	f7ff f816 	bl	80002b0 <ADC_SoftwareStartConvCmd>
	ADC_StartCalibration(ADC1);
 8001284:	4628      	mov	r0, r5
 8001286:	f7ff f804 	bl	8000292 <ADC_StartCalibration>
	// init our basic need !
	// frequency meter
//	CACFrequencyMeter ACFrequencyMeter;
//	ACFrequencyMeter.Init(&InputCapture);
	// voltage and current measurement
	CAnalogInput AnalogInput[2];
 800128a:	ab0d      	add	r3, sp, #52	; 0x34
 800128c:	2c00      	cmp	r4, #0
 800128e:	db0b      	blt.n	80012a8 <main+0x230>
inline CAnalogInput::CAnalogInput()
 8001290:	4a2a      	ldr	r2, [pc, #168]	; (800133c <main+0x2c4>)
 8001292:	601a      	str	r2, [r3, #0]
	m_pAdc = NULL;
 8001294:	2200      	movs	r2, #0
 8001296:	60da      	str	r2, [r3, #12]
	m_Scale = 1;
 8001298:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800129c:	605a      	str	r2, [r3, #4]
	m_Offset = 0;
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	3310      	adds	r3, #16
 80012a4:	3c01      	subs	r4, #1
 80012a6:	e7f1      	b.n	800128c <main+0x214>
 80012a8:	2300      	movs	r3, #0
	for (uint16_t i = 0; i < 2; i++)
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	dc09      	bgt.n	80012c2 <main+0x24a>
	{
		AnalogInput[i].Initialize(&Adc[i]);
 80012ae:	aa26      	add	r2, sp, #152	; 0x98
 80012b0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3

inline void CAnalogInput::Initialize(IAdc* pAdc)
{
	m_pAdc = pAdc;
 80012b4:	aa0d      	add	r2, sp, #52	; 0x34
 80012b6:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80012ba:	60d1      	str	r1, [r2, #12]
	for (uint16_t i = 0; i < 2; i++)
 80012bc:	3301      	adds	r3, #1
 80012be:	b29b      	uxth	r3, r3
 80012c0:	e7f3      	b.n	80012aa <main+0x232>
	}
	Uart.Write("haha");
 80012c2:	491f      	ldr	r1, [pc, #124]	; (8001340 <main+0x2c8>)
 80012c4:	a82a      	add	r0, sp, #168	; 0xa8
 80012c6:	f7ff fe2c 	bl	8000f22 <_ZN15CSTM32F10xUSART5WriteEPKc>
	CTimeout timeout;
 80012ca:	a809      	add	r0, sp, #36	; 0x24
 80012cc:	f7ff fec6 	bl	800105c <_ZN8CTimeoutC1Ev>
	timeout.Init(&MainTimer);
 80012d0:	a9e2      	add	r1, sp, #904	; 0x388
 80012d2:	a809      	add	r0, sp, #36	; 0x24
 80012d4:	f7ff fe9e 	bl	8001014 <_ZN8CTimeout4InitEP6ITimer>
	timeout.SetExpiry(10000);
 80012d8:	f242 7110 	movw	r1, #10000	; 0x2710
 80012dc:	a809      	add	r0, sp, #36	; 0x24
 80012de:	f7ff fea5 	bl	800102c <_ZN8CTimeout9SetExpiryEt>
 80012e2:	e005      	b.n	80012f0 <main+0x278>
			timeout.Reset();
			char buf[30];
			sprintf(buf, "%d,%d\r\n", adcBuffer[0], adcBuffer[1]);
			Uart.Write(buf);
		}
		HeartBeat.Execute();
 80012e4:	a8d8      	add	r0, sp, #864	; 0x360
 80012e6:	f7ff fd16 	bl	8000d16 <_ZN10CHeartBeat7ExecuteEv>
		Uart.Execute();
 80012ea:	a82a      	add	r0, sp, #168	; 0xa8
 80012ec:	f7ff fe83 	bl	8000ff6 <_ZN15CSTM32F10xUSART7ExecuteEv>
		if (timeout.HasElapsed())
 80012f0:	a809      	add	r0, sp, #36	; 0x24
 80012f2:	f7ff fea0 	bl	8001036 <_ZN8CTimeout10HasElapsedEv>
 80012f6:	2800      	cmp	r0, #0
 80012f8:	d0f4      	beq.n	80012e4 <main+0x26c>
			timeout.Reset();
 80012fa:	a809      	add	r0, sp, #36	; 0x24
 80012fc:	f7ff fe8c 	bl	8001018 <_ZN8CTimeout5ResetEv>
			sprintf(buf, "%d,%d\r\n", adcBuffer[0], adcBuffer[1]);
 8001300:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
 8001304:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
 8001308:	490e      	ldr	r1, [pc, #56]	; (8001344 <main+0x2cc>)
 800130a:	a801      	add	r0, sp, #4
 800130c:	f000 fa09 	bl	8001722 <siprintf>
			Uart.Write(buf);
 8001310:	a901      	add	r1, sp, #4
 8001312:	a82a      	add	r0, sp, #168	; 0xa8
 8001314:	f7ff fe05 	bl	8000f22 <_ZN15CSTM32F10xUSART5WriteEPKc>
 8001318:	e7e4      	b.n	80012e4 <main+0x26c>
 800131a:	bf00      	nop
 800131c:	00044002 	.word	0x00044002
 8001320:	40000400 	.word	0x40000400
 8001324:	40011000 	.word	0x40011000
 8001328:	40004800 	.word	0x40004800
 800132c:	40010800 	.word	0x40010800
 8001330:	4001244c 	.word	0x4001244c
 8001334:	40020008 	.word	0x40020008
 8001338:	40012400 	.word	0x40012400
 800133c:	08001ae0 	.word	0x08001ae0
 8001340:	08001ae8 	.word	0x08001ae8
 8001344:	08001af0 	.word	0x08001af0

08001348 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001348:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001380 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800134c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800134e:	e003      	b.n	8001358 <LoopCopyDataInit>

08001350 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8001352:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001354:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001356:	3104      	adds	r1, #4

08001358 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001358:	480b      	ldr	r0, [pc, #44]	; (8001388 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 800135c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800135e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001360:	d3f6      	bcc.n	8001350 <CopyDataInit>
	ldr	r2, =_sbss
 8001362:	4a0b      	ldr	r2, [pc, #44]	; (8001390 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8001364:	e002      	b.n	800136c <LoopFillZerobss>

08001366 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001366:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001368:	f842 3b04 	str.w	r3, [r2], #4

0800136c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 800136e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001370:	d3f9      	bcc.n	8001366 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001372:	f000 f83d 	bl	80013f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001376:	f000 f9ed 	bl	8001754 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800137a:	f7ff fe7d 	bl	8001078 <main>
	bx	lr
 800137e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001380:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8001384:	08001b08 	.word	0x08001b08
	ldr	r0, =_sdata
 8001388:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800138c:	20000518 	.word	0x20000518
	ldr	r2, =_sbss
 8001390:	20000518 	.word	0x20000518
	ldr	r3, = _ebss
 8001394:	20000574 	.word	0x20000574

08001398 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001398:	e7fe      	b.n	8001398 <ADC1_2_IRQHandler>

0800139a <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr

080013a6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80013aa:	e7fe      	b.n	80013aa <HardFault_Handler+0x4>

080013ac <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <MemManage_Handler+0x4>

080013b2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80013b6:	e7fe      	b.n	80013b6 <BusFault_Handler+0x4>

080013b8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <UsageFault_Handler+0x4>

080013be <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr

080013ca <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr

080013d6 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr

080013e2 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
	...

080013f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80013f4:	4a15      	ldr	r2, [pc, #84]	; (800144c <SystemInit+0x5c>)
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <SystemInit+0x5c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001400:	4912      	ldr	r1, [pc, #72]	; (800144c <SystemInit+0x5c>)
 8001402:	4b12      	ldr	r3, [pc, #72]	; (800144c <SystemInit+0x5c>)
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	4b12      	ldr	r3, [pc, #72]	; (8001450 <SystemInit+0x60>)
 8001408:	4013      	ands	r3, r2
 800140a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800140c:	4a0f      	ldr	r2, [pc, #60]	; (800144c <SystemInit+0x5c>)
 800140e:	4b0f      	ldr	r3, [pc, #60]	; (800144c <SystemInit+0x5c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800141a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800141c:	4a0b      	ldr	r2, [pc, #44]	; (800144c <SystemInit+0x5c>)
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <SystemInit+0x5c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001426:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001428:	4a08      	ldr	r2, [pc, #32]	; (800144c <SystemInit+0x5c>)
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <SystemInit+0x5c>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001432:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <SystemInit+0x5c>)
 8001436:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800143a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 800143c:	f000 f80c 	bl	8001458 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <SystemInit+0x64>)
 8001442:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001446:	609a      	str	r2, [r3, #8]
#endif 
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40021000 	.word	0x40021000
 8001450:	f8ff0000 	.word	0xf8ff0000
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 800145c:	f000 f802 	bl	8001464 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}

08001464 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	2300      	movs	r3, #0
 8001470:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001472:	4a3a      	ldr	r2, [pc, #232]	; (800155c <SetSysClockTo72+0xf8>)
 8001474:	4b39      	ldr	r3, [pc, #228]	; (800155c <SetSysClockTo72+0xf8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800147c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800147e:	4b37      	ldr	r3, [pc, #220]	; (800155c <SetSysClockTo72+0xf8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001486:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3301      	adds	r3, #1
 800148c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d103      	bne.n	800149c <SetSysClockTo72+0x38>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800149a:	d1f0      	bne.n	800147e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800149c:	4b2f      	ldr	r3, [pc, #188]	; (800155c <SetSysClockTo72+0xf8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d002      	beq.n	80014ae <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80014a8:	2301      	movs	r3, #1
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	e001      	b.n	80014b2 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80014ae:	2300      	movs	r3, #0
 80014b0:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d14b      	bne.n	8001550 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80014b8:	4a29      	ldr	r2, [pc, #164]	; (8001560 <SetSysClockTo72+0xfc>)
 80014ba:	4b29      	ldr	r3, [pc, #164]	; (8001560 <SetSysClockTo72+0xfc>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f043 0310 	orr.w	r3, r3, #16
 80014c2:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80014c4:	4a26      	ldr	r2, [pc, #152]	; (8001560 <SetSysClockTo72+0xfc>)
 80014c6:	4b26      	ldr	r3, [pc, #152]	; (8001560 <SetSysClockTo72+0xfc>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f023 0303 	bic.w	r3, r3, #3
 80014ce:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80014d0:	4a23      	ldr	r2, [pc, #140]	; (8001560 <SetSysClockTo72+0xfc>)
 80014d2:	4b23      	ldr	r3, [pc, #140]	; (8001560 <SetSysClockTo72+0xfc>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f043 0302 	orr.w	r3, r3, #2
 80014da:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80014dc:	4a1f      	ldr	r2, [pc, #124]	; (800155c <SetSysClockTo72+0xf8>)
 80014de:	4b1f      	ldr	r3, [pc, #124]	; (800155c <SetSysClockTo72+0xf8>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80014e4:	4a1d      	ldr	r2, [pc, #116]	; (800155c <SetSysClockTo72+0xf8>)
 80014e6:	4b1d      	ldr	r3, [pc, #116]	; (800155c <SetSysClockTo72+0xf8>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80014ec:	4a1b      	ldr	r2, [pc, #108]	; (800155c <SetSysClockTo72+0xf8>)
 80014ee:	4b1b      	ldr	r3, [pc, #108]	; (800155c <SetSysClockTo72+0xf8>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014f6:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80014f8:	4a18      	ldr	r2, [pc, #96]	; (800155c <SetSysClockTo72+0xf8>)
 80014fa:	4b18      	ldr	r3, [pc, #96]	; (800155c <SetSysClockTo72+0xf8>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001502:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001504:	4a15      	ldr	r2, [pc, #84]	; (800155c <SetSysClockTo72+0xf8>)
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <SetSysClockTo72+0xf8>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800150e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001510:	4a12      	ldr	r2, [pc, #72]	; (800155c <SetSysClockTo72+0xf8>)
 8001512:	4b12      	ldr	r3, [pc, #72]	; (800155c <SetSysClockTo72+0xf8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800151a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800151c:	bf00      	nop
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <SetSysClockTo72+0xf8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f9      	beq.n	800151e <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800152a:	4a0c      	ldr	r2, [pc, #48]	; (800155c <SetSysClockTo72+0xf8>)
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <SetSysClockTo72+0xf8>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f023 0303 	bic.w	r3, r3, #3
 8001534:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001536:	4a09      	ldr	r2, [pc, #36]	; (800155c <SetSysClockTo72+0xf8>)
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <SetSysClockTo72+0xf8>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f043 0302 	orr.w	r3, r3, #2
 8001540:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001542:	bf00      	nop
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <SetSysClockTo72+0xf8>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 030c 	and.w	r3, r3, #12
 800154c:	2b08      	cmp	r3, #8
 800154e:	d1f9      	bne.n	8001544 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40021000 	.word	0x40021000
 8001560:	40022000 	.word	0x40022000

08001564 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8001564:	b480      	push	{r7}
 8001566:	b087      	sub	sp, #28
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
	int div = 1;
 8001570:	2301      	movs	r3, #1
 8001572:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8001574:	e004      	b.n	8001580 <ts_itoa+0x1c>
		div *= base;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	fb02 f303 	mul.w	r3, r2, r3
 800157e:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	fbb2 f2f3 	udiv	r2, r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	429a      	cmp	r2, r3
 800158c:	d2f3      	bcs.n	8001576 <ts_itoa+0x12>

	while (div != 0)
 800158e:	e029      	b.n	80015e4 <ts_itoa+0x80>
	{
		int num = d/div;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	fbb2 f3f3 	udiv	r3, r2, r3
 8001598:	613b      	str	r3, [r7, #16]
		d = d%div;
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	fbb3 f1f2 	udiv	r1, r3, r2
 80015a2:	fb02 f201 	mul.w	r2, r2, r1
 80015a6:	1a9b      	subs	r3, r3, r2
 80015a8:	60bb      	str	r3, [r7, #8]
		div /= base;
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80015b2:	617b      	str	r3, [r7, #20]
		if (num > 9)
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	2b09      	cmp	r3, #9
 80015b8:	dd0a      	ble.n	80015d0 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	1c59      	adds	r1, r3, #1
 80015c0:	68fa      	ldr	r2, [r7, #12]
 80015c2:	6011      	str	r1, [r2, #0]
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	3237      	adds	r2, #55	; 0x37
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	701a      	strb	r2, [r3, #0]
 80015ce:	e009      	b.n	80015e4 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	1c59      	adds	r1, r3, #1
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	6011      	str	r1, [r2, #0]
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	3230      	adds	r2, #48	; 0x30
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1d2      	bne.n	8001590 <ts_itoa+0x2c>
	}
}
 80015ea:	bf00      	nop
 80015ec:	371c      	adds	r7, #28
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr

080015f4 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8001604:	e07d      	b.n	8001702 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b25      	cmp	r3, #37	; 0x25
 800160c:	d171      	bne.n	80016f2 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	3301      	adds	r3, #1
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b64      	cmp	r3, #100	; 0x64
 800161a:	d01e      	beq.n	800165a <ts_formatstring+0x66>
 800161c:	2b64      	cmp	r3, #100	; 0x64
 800161e:	dc06      	bgt.n	800162e <ts_formatstring+0x3a>
 8001620:	2b58      	cmp	r3, #88	; 0x58
 8001622:	d050      	beq.n	80016c6 <ts_formatstring+0xd2>
 8001624:	2b63      	cmp	r3, #99	; 0x63
 8001626:	d00e      	beq.n	8001646 <ts_formatstring+0x52>
 8001628:	2b25      	cmp	r3, #37	; 0x25
 800162a:	d058      	beq.n	80016de <ts_formatstring+0xea>
 800162c:	e05d      	b.n	80016ea <ts_formatstring+0xf6>
 800162e:	2b73      	cmp	r3, #115	; 0x73
 8001630:	d02b      	beq.n	800168a <ts_formatstring+0x96>
 8001632:	2b73      	cmp	r3, #115	; 0x73
 8001634:	dc02      	bgt.n	800163c <ts_formatstring+0x48>
 8001636:	2b69      	cmp	r3, #105	; 0x69
 8001638:	d00f      	beq.n	800165a <ts_formatstring+0x66>
 800163a:	e056      	b.n	80016ea <ts_formatstring+0xf6>
 800163c:	2b75      	cmp	r3, #117	; 0x75
 800163e:	d037      	beq.n	80016b0 <ts_formatstring+0xbc>
 8001640:	2b78      	cmp	r3, #120	; 0x78
 8001642:	d040      	beq.n	80016c6 <ts_formatstring+0xd2>
 8001644:	e051      	b.n	80016ea <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	1c5a      	adds	r2, r3, #1
 800164a:	60fa      	str	r2, [r7, #12]
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	1d11      	adds	r1, r2, #4
 8001650:	6079      	str	r1, [r7, #4]
 8001652:	6812      	ldr	r2, [r2, #0]
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	701a      	strb	r2, [r3, #0]
				break;
 8001658:	e047      	b.n	80016ea <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	1d1a      	adds	r2, r3, #4
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	2b00      	cmp	r3, #0
 8001668:	da07      	bge.n	800167a <ts_formatstring+0x86>
					{
						val *= -1;
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	425b      	negs	r3, r3
 800166e:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	1c5a      	adds	r2, r3, #1
 8001674:	60fa      	str	r2, [r7, #12]
 8001676:	222d      	movs	r2, #45	; 0x2d
 8001678:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 800167a:	69f9      	ldr	r1, [r7, #28]
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	220a      	movs	r2, #10
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff ff6e 	bl	8001564 <ts_itoa>
				}
				break;
 8001688:	e02f      	b.n	80016ea <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	1d1a      	adds	r2, r3, #4
 800168e:	607a      	str	r2, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8001694:	e007      	b.n	80016a6 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	1c5a      	adds	r2, r3, #1
 800169a:	60fa      	str	r2, [r7, #12]
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	1c51      	adds	r1, r2, #1
 80016a0:	61b9      	str	r1, [r7, #24]
 80016a2:	7812      	ldrb	r2, [r2, #0]
 80016a4:	701a      	strb	r2, [r3, #0]
					while (*arg)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f3      	bne.n	8001696 <ts_formatstring+0xa2>
					}
				}
				break;
 80016ae:	e01c      	b.n	80016ea <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	1d1a      	adds	r2, r3, #4
 80016b4:	607a      	str	r2, [r7, #4]
 80016b6:	6819      	ldr	r1, [r3, #0]
 80016b8:	f107 030c 	add.w	r3, r7, #12
 80016bc:	220a      	movs	r2, #10
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff ff50 	bl	8001564 <ts_itoa>
				break;
 80016c4:	e011      	b.n	80016ea <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	1d1a      	adds	r2, r3, #4
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4619      	mov	r1, r3
 80016d0:	f107 030c 	add.w	r3, r7, #12
 80016d4:	2210      	movs	r2, #16
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff ff44 	bl	8001564 <ts_itoa>
				break;
 80016dc:	e005      	b.n	80016ea <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	1c5a      	adds	r2, r3, #1
 80016e2:	60fa      	str	r2, [r7, #12]
 80016e4:	2225      	movs	r2, #37	; 0x25
 80016e6:	701a      	strb	r2, [r3, #0]
				  break;
 80016e8:	bf00      	nop
			}
			fmt++;
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	3301      	adds	r3, #1
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	e007      	b.n	8001702 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	1c5a      	adds	r2, r3, #1
 80016f6:	60fa      	str	r2, [r7, #12]
 80016f8:	68ba      	ldr	r2, [r7, #8]
 80016fa:	1c51      	adds	r1, r2, #1
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	7812      	ldrb	r2, [r2, #0]
 8001700:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	f47f af7d 	bne.w	8001606 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	461a      	mov	r2, r3
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	1ad3      	subs	r3, r2, r3
}
 800171a:	4618      	mov	r0, r3
 800171c:	3720      	adds	r7, #32
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8001722:	b40e      	push	{r1, r2, r3}
 8001724:	b580      	push	{r7, lr}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 800172c:	f107 0320 	add.w	r3, r7, #32
 8001730:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	69f9      	ldr	r1, [r7, #28]
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ff5c 	bl	80015f4 <ts_formatstring>
 800173c:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 800173e:	68fb      	ldr	r3, [r7, #12]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800174a:	b003      	add	sp, #12
 800174c:	4770      	bx	lr
	...

08001750 <_ZdlPv>:
 8001750:	f000 b824 	b.w	800179c <free>

08001754 <__libc_init_array>:
 8001754:	b570      	push	{r4, r5, r6, lr}
 8001756:	2500      	movs	r5, #0
 8001758:	4e0c      	ldr	r6, [pc, #48]	; (800178c <__libc_init_array+0x38>)
 800175a:	4c0d      	ldr	r4, [pc, #52]	; (8001790 <__libc_init_array+0x3c>)
 800175c:	1ba4      	subs	r4, r4, r6
 800175e:	10a4      	asrs	r4, r4, #2
 8001760:	42a5      	cmp	r5, r4
 8001762:	d109      	bne.n	8001778 <__libc_init_array+0x24>
 8001764:	f000 f960 	bl	8001a28 <_init>
 8001768:	2500      	movs	r5, #0
 800176a:	4e0a      	ldr	r6, [pc, #40]	; (8001794 <__libc_init_array+0x40>)
 800176c:	4c0a      	ldr	r4, [pc, #40]	; (8001798 <__libc_init_array+0x44>)
 800176e:	1ba4      	subs	r4, r4, r6
 8001770:	10a4      	asrs	r4, r4, #2
 8001772:	42a5      	cmp	r5, r4
 8001774:	d105      	bne.n	8001782 <__libc_init_array+0x2e>
 8001776:	bd70      	pop	{r4, r5, r6, pc}
 8001778:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800177c:	4798      	blx	r3
 800177e:	3501      	adds	r5, #1
 8001780:	e7ee      	b.n	8001760 <__libc_init_array+0xc>
 8001782:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001786:	4798      	blx	r3
 8001788:	3501      	adds	r5, #1
 800178a:	e7f2      	b.n	8001772 <__libc_init_array+0x1e>
 800178c:	08001b00 	.word	0x08001b00
 8001790:	08001b00 	.word	0x08001b00
 8001794:	08001b00 	.word	0x08001b00
 8001798:	08001b04 	.word	0x08001b04

0800179c <free>:
 800179c:	4b02      	ldr	r3, [pc, #8]	; (80017a8 <free+0xc>)
 800179e:	4601      	mov	r1, r0
 80017a0:	6818      	ldr	r0, [r3, #0]
 80017a2:	f000 b875 	b.w	8001890 <_free_r>
 80017a6:	bf00      	nop
 80017a8:	20000424 	.word	0x20000424

080017ac <__malloc_lock>:
 80017ac:	4801      	ldr	r0, [pc, #4]	; (80017b4 <__malloc_lock+0x8>)
 80017ae:	f000 b92b 	b.w	8001a08 <__retarget_lock_acquire_recursive>
 80017b2:	bf00      	nop
 80017b4:	20000568 	.word	0x20000568

080017b8 <__malloc_unlock>:
 80017b8:	4801      	ldr	r0, [pc, #4]	; (80017c0 <__malloc_unlock+0x8>)
 80017ba:	f000 b926 	b.w	8001a0a <__retarget_lock_release_recursive>
 80017be:	bf00      	nop
 80017c0:	20000568 	.word	0x20000568

080017c4 <_sbrk_r>:
 80017c4:	b538      	push	{r3, r4, r5, lr}
 80017c6:	2300      	movs	r3, #0
 80017c8:	4c05      	ldr	r4, [pc, #20]	; (80017e0 <_sbrk_r+0x1c>)
 80017ca:	4605      	mov	r5, r0
 80017cc:	4608      	mov	r0, r1
 80017ce:	6023      	str	r3, [r4, #0]
 80017d0:	f000 f91c 	bl	8001a0c <_sbrk>
 80017d4:	1c43      	adds	r3, r0, #1
 80017d6:	d102      	bne.n	80017de <_sbrk_r+0x1a>
 80017d8:	6823      	ldr	r3, [r4, #0]
 80017da:	b103      	cbz	r3, 80017de <_sbrk_r+0x1a>
 80017dc:	602b      	str	r3, [r5, #0]
 80017de:	bd38      	pop	{r3, r4, r5, pc}
 80017e0:	20000570 	.word	0x20000570

080017e4 <_malloc_trim_r>:
 80017e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017e8:	4689      	mov	r9, r1
 80017ea:	4f25      	ldr	r7, [pc, #148]	; (8001880 <_malloc_trim_r+0x9c>)
 80017ec:	4606      	mov	r6, r0
 80017ee:	f7ff ffdd 	bl	80017ac <__malloc_lock>
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800188c <_malloc_trim_r+0xa8>
 80017f8:	685d      	ldr	r5, [r3, #4]
 80017fa:	f1a8 0411 	sub.w	r4, r8, #17
 80017fe:	f025 0503 	bic.w	r5, r5, #3
 8001802:	eba4 0409 	sub.w	r4, r4, r9
 8001806:	442c      	add	r4, r5
 8001808:	fbb4 f4f8 	udiv	r4, r4, r8
 800180c:	3c01      	subs	r4, #1
 800180e:	fb08 f404 	mul.w	r4, r8, r4
 8001812:	4544      	cmp	r4, r8
 8001814:	da05      	bge.n	8001822 <_malloc_trim_r+0x3e>
 8001816:	4630      	mov	r0, r6
 8001818:	f7ff ffce 	bl	80017b8 <__malloc_unlock>
 800181c:	2000      	movs	r0, #0
 800181e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001822:	2100      	movs	r1, #0
 8001824:	4630      	mov	r0, r6
 8001826:	f7ff ffcd 	bl	80017c4 <_sbrk_r>
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	442b      	add	r3, r5
 800182e:	4298      	cmp	r0, r3
 8001830:	d1f1      	bne.n	8001816 <_malloc_trim_r+0x32>
 8001832:	4261      	negs	r1, r4
 8001834:	4630      	mov	r0, r6
 8001836:	f7ff ffc5 	bl	80017c4 <_sbrk_r>
 800183a:	3001      	adds	r0, #1
 800183c:	d110      	bne.n	8001860 <_malloc_trim_r+0x7c>
 800183e:	2100      	movs	r1, #0
 8001840:	4630      	mov	r0, r6
 8001842:	f7ff ffbf 	bl	80017c4 <_sbrk_r>
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	1a83      	subs	r3, r0, r2
 800184a:	2b0f      	cmp	r3, #15
 800184c:	dde3      	ble.n	8001816 <_malloc_trim_r+0x32>
 800184e:	490d      	ldr	r1, [pc, #52]	; (8001884 <_malloc_trim_r+0xa0>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6809      	ldr	r1, [r1, #0]
 8001856:	6053      	str	r3, [r2, #4]
 8001858:	1a40      	subs	r0, r0, r1
 800185a:	490b      	ldr	r1, [pc, #44]	; (8001888 <_malloc_trim_r+0xa4>)
 800185c:	6008      	str	r0, [r1, #0]
 800185e:	e7da      	b.n	8001816 <_malloc_trim_r+0x32>
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	4a09      	ldr	r2, [pc, #36]	; (8001888 <_malloc_trim_r+0xa4>)
 8001864:	1b2d      	subs	r5, r5, r4
 8001866:	f045 0501 	orr.w	r5, r5, #1
 800186a:	605d      	str	r5, [r3, #4]
 800186c:	6813      	ldr	r3, [r2, #0]
 800186e:	4630      	mov	r0, r6
 8001870:	1b1c      	subs	r4, r3, r4
 8001872:	6014      	str	r4, [r2, #0]
 8001874:	f7ff ffa0 	bl	80017b8 <__malloc_unlock>
 8001878:	2001      	movs	r0, #1
 800187a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800187e:	bf00      	nop
 8001880:	20000014 	.word	0x20000014
 8001884:	2000041c 	.word	0x2000041c
 8001888:	20000534 	.word	0x20000534
 800188c:	00000080 	.word	0x00000080

08001890 <_free_r>:
 8001890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001894:	4604      	mov	r4, r0
 8001896:	4688      	mov	r8, r1
 8001898:	2900      	cmp	r1, #0
 800189a:	f000 80ab 	beq.w	80019f4 <_free_r+0x164>
 800189e:	f7ff ff85 	bl	80017ac <__malloc_lock>
 80018a2:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80018a6:	4d54      	ldr	r5, [pc, #336]	; (80019f8 <_free_r+0x168>)
 80018a8:	f022 0001 	bic.w	r0, r2, #1
 80018ac:	f1a8 0308 	sub.w	r3, r8, #8
 80018b0:	181f      	adds	r7, r3, r0
 80018b2:	68a9      	ldr	r1, [r5, #8]
 80018b4:	687e      	ldr	r6, [r7, #4]
 80018b6:	428f      	cmp	r7, r1
 80018b8:	f026 0603 	bic.w	r6, r6, #3
 80018bc:	f002 0201 	and.w	r2, r2, #1
 80018c0:	d11b      	bne.n	80018fa <_free_r+0x6a>
 80018c2:	4430      	add	r0, r6
 80018c4:	b93a      	cbnz	r2, 80018d6 <_free_r+0x46>
 80018c6:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80018ca:	1a9b      	subs	r3, r3, r2
 80018cc:	6899      	ldr	r1, [r3, #8]
 80018ce:	4410      	add	r0, r2
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	60ca      	str	r2, [r1, #12]
 80018d4:	6091      	str	r1, [r2, #8]
 80018d6:	f040 0201 	orr.w	r2, r0, #1
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	60ab      	str	r3, [r5, #8]
 80018de:	4b47      	ldr	r3, [pc, #284]	; (80019fc <_free_r+0x16c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4298      	cmp	r0, r3
 80018e4:	d304      	bcc.n	80018f0 <_free_r+0x60>
 80018e6:	4b46      	ldr	r3, [pc, #280]	; (8001a00 <_free_r+0x170>)
 80018e8:	4620      	mov	r0, r4
 80018ea:	6819      	ldr	r1, [r3, #0]
 80018ec:	f7ff ff7a 	bl	80017e4 <_malloc_trim_r>
 80018f0:	4620      	mov	r0, r4
 80018f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80018f6:	f7ff bf5f 	b.w	80017b8 <__malloc_unlock>
 80018fa:	607e      	str	r6, [r7, #4]
 80018fc:	2a00      	cmp	r2, #0
 80018fe:	d139      	bne.n	8001974 <_free_r+0xe4>
 8001900:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8001904:	f105 0e08 	add.w	lr, r5, #8
 8001908:	1a5b      	subs	r3, r3, r1
 800190a:	4408      	add	r0, r1
 800190c:	6899      	ldr	r1, [r3, #8]
 800190e:	4571      	cmp	r1, lr
 8001910:	d032      	beq.n	8001978 <_free_r+0xe8>
 8001912:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8001916:	f8c1 e00c 	str.w	lr, [r1, #12]
 800191a:	f8ce 1008 	str.w	r1, [lr, #8]
 800191e:	19b9      	adds	r1, r7, r6
 8001920:	6849      	ldr	r1, [r1, #4]
 8001922:	07c9      	lsls	r1, r1, #31
 8001924:	d40a      	bmi.n	800193c <_free_r+0xac>
 8001926:	4430      	add	r0, r6
 8001928:	68b9      	ldr	r1, [r7, #8]
 800192a:	bb3a      	cbnz	r2, 800197c <_free_r+0xec>
 800192c:	4e35      	ldr	r6, [pc, #212]	; (8001a04 <_free_r+0x174>)
 800192e:	42b1      	cmp	r1, r6
 8001930:	d124      	bne.n	800197c <_free_r+0xec>
 8001932:	2201      	movs	r2, #1
 8001934:	616b      	str	r3, [r5, #20]
 8001936:	612b      	str	r3, [r5, #16]
 8001938:	60d9      	str	r1, [r3, #12]
 800193a:	6099      	str	r1, [r3, #8]
 800193c:	f040 0101 	orr.w	r1, r0, #1
 8001940:	6059      	str	r1, [r3, #4]
 8001942:	5018      	str	r0, [r3, r0]
 8001944:	2a00      	cmp	r2, #0
 8001946:	d1d3      	bne.n	80018f0 <_free_r+0x60>
 8001948:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800194c:	d21a      	bcs.n	8001984 <_free_r+0xf4>
 800194e:	2201      	movs	r2, #1
 8001950:	08c0      	lsrs	r0, r0, #3
 8001952:	1081      	asrs	r1, r0, #2
 8001954:	408a      	lsls	r2, r1
 8001956:	6869      	ldr	r1, [r5, #4]
 8001958:	3001      	adds	r0, #1
 800195a:	430a      	orrs	r2, r1
 800195c:	606a      	str	r2, [r5, #4]
 800195e:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8001962:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8001966:	3a08      	subs	r2, #8
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	6099      	str	r1, [r3, #8]
 800196c:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8001970:	60cb      	str	r3, [r1, #12]
 8001972:	e7bd      	b.n	80018f0 <_free_r+0x60>
 8001974:	2200      	movs	r2, #0
 8001976:	e7d2      	b.n	800191e <_free_r+0x8e>
 8001978:	2201      	movs	r2, #1
 800197a:	e7d0      	b.n	800191e <_free_r+0x8e>
 800197c:	68fe      	ldr	r6, [r7, #12]
 800197e:	60ce      	str	r6, [r1, #12]
 8001980:	60b1      	str	r1, [r6, #8]
 8001982:	e7db      	b.n	800193c <_free_r+0xac>
 8001984:	0a42      	lsrs	r2, r0, #9
 8001986:	2a04      	cmp	r2, #4
 8001988:	d813      	bhi.n	80019b2 <_free_r+0x122>
 800198a:	0982      	lsrs	r2, r0, #6
 800198c:	3238      	adds	r2, #56	; 0x38
 800198e:	1c51      	adds	r1, r2, #1
 8001990:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8001994:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8001998:	428e      	cmp	r6, r1
 800199a:	d124      	bne.n	80019e6 <_free_r+0x156>
 800199c:	2001      	movs	r0, #1
 800199e:	1092      	asrs	r2, r2, #2
 80019a0:	fa00 f202 	lsl.w	r2, r0, r2
 80019a4:	6868      	ldr	r0, [r5, #4]
 80019a6:	4302      	orrs	r2, r0
 80019a8:	606a      	str	r2, [r5, #4]
 80019aa:	60de      	str	r6, [r3, #12]
 80019ac:	6099      	str	r1, [r3, #8]
 80019ae:	60b3      	str	r3, [r6, #8]
 80019b0:	e7de      	b.n	8001970 <_free_r+0xe0>
 80019b2:	2a14      	cmp	r2, #20
 80019b4:	d801      	bhi.n	80019ba <_free_r+0x12a>
 80019b6:	325b      	adds	r2, #91	; 0x5b
 80019b8:	e7e9      	b.n	800198e <_free_r+0xfe>
 80019ba:	2a54      	cmp	r2, #84	; 0x54
 80019bc:	d802      	bhi.n	80019c4 <_free_r+0x134>
 80019be:	0b02      	lsrs	r2, r0, #12
 80019c0:	326e      	adds	r2, #110	; 0x6e
 80019c2:	e7e4      	b.n	800198e <_free_r+0xfe>
 80019c4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80019c8:	d802      	bhi.n	80019d0 <_free_r+0x140>
 80019ca:	0bc2      	lsrs	r2, r0, #15
 80019cc:	3277      	adds	r2, #119	; 0x77
 80019ce:	e7de      	b.n	800198e <_free_r+0xfe>
 80019d0:	f240 5154 	movw	r1, #1364	; 0x554
 80019d4:	428a      	cmp	r2, r1
 80019d6:	bf9a      	itte	ls
 80019d8:	0c82      	lsrls	r2, r0, #18
 80019da:	327c      	addls	r2, #124	; 0x7c
 80019dc:	227e      	movhi	r2, #126	; 0x7e
 80019de:	e7d6      	b.n	800198e <_free_r+0xfe>
 80019e0:	6889      	ldr	r1, [r1, #8]
 80019e2:	428e      	cmp	r6, r1
 80019e4:	d004      	beq.n	80019f0 <_free_r+0x160>
 80019e6:	684a      	ldr	r2, [r1, #4]
 80019e8:	f022 0203 	bic.w	r2, r2, #3
 80019ec:	4290      	cmp	r0, r2
 80019ee:	d3f7      	bcc.n	80019e0 <_free_r+0x150>
 80019f0:	68ce      	ldr	r6, [r1, #12]
 80019f2:	e7da      	b.n	80019aa <_free_r+0x11a>
 80019f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019f8:	20000014 	.word	0x20000014
 80019fc:	20000420 	.word	0x20000420
 8001a00:	2000055c 	.word	0x2000055c
 8001a04:	2000001c 	.word	0x2000001c

08001a08 <__retarget_lock_acquire_recursive>:
 8001a08:	4770      	bx	lr

08001a0a <__retarget_lock_release_recursive>:
 8001a0a:	4770      	bx	lr

08001a0c <_sbrk>:
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <_sbrk+0x14>)
 8001a0e:	4602      	mov	r2, r0
 8001a10:	6819      	ldr	r1, [r3, #0]
 8001a12:	b909      	cbnz	r1, 8001a18 <_sbrk+0xc>
 8001a14:	4903      	ldr	r1, [pc, #12]	; (8001a24 <_sbrk+0x18>)
 8001a16:	6019      	str	r1, [r3, #0]
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	4402      	add	r2, r0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	4770      	bx	lr
 8001a20:	20000560 	.word	0x20000560
 8001a24:	20000574 	.word	0x20000574

08001a28 <_init>:
 8001a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a2a:	bf00      	nop
 8001a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a2e:	bc08      	pop	{r3}
 8001a30:	469e      	mov	lr, r3
 8001a32:	4770      	bx	lr

08001a34 <_fini>:
 8001a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a36:	bf00      	nop
 8001a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a3a:	bc08      	pop	{r3}
 8001a3c:	469e      	mov	lr, r3
 8001a3e:	4770      	bx	lr

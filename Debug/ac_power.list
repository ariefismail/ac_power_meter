
ac_power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca90  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013b0  0800cb9c  0800cb9c  0001cb9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    000000fc  0800df4c  0800df4c  0001df4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000180  0800e048  0800e048  0001e048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000008  0800e1c8  0800e1c8  0001e1c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800e1d0  0800e1d0  0001e1d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000520  20000000  0800e1d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000084  20000520  0800e6f4  00020520  2**2
                  ALLOC
  9 ._user_heap_stack 00000100  200005a4  0800e6f4  000205a4  2**0
                  ALLOC
 10 .ARM.attributes 00000029  00000000  00000000  00020520  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001f2f3  00000000  00000000  00020549  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000040d2  00000000  00000000  0003f83c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000c70  00000000  00000000  00043910  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000b48  00000000  00000000  00044580  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006b36  00000000  00000000  000450c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00009479  00000000  00000000  0004bbfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00055077  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005480  00000000  00000000  000550f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         000000cc  00000000  00000000  0005a574  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000001b9  00000000  00000000  0005a640  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000520 	.word	0x20000520
 8000128:	00000000 	.word	0x00000000
 800012c:	0800cb84 	.word	0x0800cb84

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000524 	.word	0x20000524
 8000148:	0800cb84 	.word	0x0800cb84

0800014c <d_make_comp>:
 800014c:	b470      	push	{r4, r5, r6}
 800014e:	1e4c      	subs	r4, r1, #1
 8000150:	2c4c      	cmp	r4, #76	; 0x4c
 8000152:	d82d      	bhi.n	80001b0 <d_make_comp+0x64>
 8000154:	e8df f004 	tbb	[pc, r4]
 8000158:	3c3c3c3c 	.word	0x3c3c3c3c
 800015c:	2c2c2c2c 	.word	0x2c2c2c2c
 8000160:	273c2727 	.word	0x273c2727
 8000164:	27272727 	.word	0x27272727
 8000168:	27272727 	.word	0x27272727
 800016c:	2c272727 	.word	0x2c272727
 8000170:	28282828 	.word	0x28282828
 8000174:	28282828 	.word	0x28282828
 8000178:	2727273c 	.word	0x2727273c
 800017c:	272c2727 	.word	0x272c2727
 8000180:	2c3c3e28 	.word	0x2c3c3e28
 8000184:	3e28283c 	.word	0x3e28283c
 8000188:	27272c2c 	.word	0x27272c2c
 800018c:	3c3c3c27 	.word	0x3c3c3c27
 8000190:	3c273c3c 	.word	0x3c273c3c
 8000194:	2c3c273c 	.word	0x2c3c273c
 8000198:	2727272c 	.word	0x2727272c
 800019c:	272c2c2c 	.word	0x272c2c2c
 80001a0:	283c2727 	.word	0x283c2727
 80001a4:	3c          	.byte	0x3c
 80001a5:	00          	.byte	0x00
 80001a6:	b11a      	cbz	r2, 80001b0 <d_make_comp+0x64>
 80001a8:	6944      	ldr	r4, [r0, #20]
 80001aa:	6985      	ldr	r5, [r0, #24]
 80001ac:	42ac      	cmp	r4, r5
 80001ae:	db02      	blt.n	80001b6 <d_make_comp+0x6a>
 80001b0:	2000      	movs	r0, #0
 80001b2:	bc70      	pop	{r4, r5, r6}
 80001b4:	4770      	bx	lr
 80001b6:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80001ba:	6906      	ldr	r6, [r0, #16]
 80001bc:	00ad      	lsls	r5, r5, #2
 80001be:	3401      	adds	r4, #1
 80001c0:	6144      	str	r4, [r0, #20]
 80001c2:	1970      	adds	r0, r6, r5
 80001c4:	d0f5      	beq.n	80001b2 <d_make_comp+0x66>
 80001c6:	5571      	strb	r1, [r6, r5]
 80001c8:	6042      	str	r2, [r0, #4]
 80001ca:	6083      	str	r3, [r0, #8]
 80001cc:	bc70      	pop	{r4, r5, r6}
 80001ce:	4770      	bx	lr
 80001d0:	2a00      	cmp	r2, #0
 80001d2:	d0ed      	beq.n	80001b0 <d_make_comp+0x64>
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d0eb      	beq.n	80001b0 <d_make_comp+0x64>
 80001d8:	6944      	ldr	r4, [r0, #20]
 80001da:	6985      	ldr	r5, [r0, #24]
 80001dc:	42ac      	cmp	r4, r5
 80001de:	dae7      	bge.n	80001b0 <d_make_comp+0x64>
 80001e0:	e7e9      	b.n	80001b6 <d_make_comp+0x6a>
 80001e2:	bf00      	nop

080001e4 <d_cv_qualifiers>:
 80001e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001e8:	68c3      	ldr	r3, [r0, #12]
 80001ea:	f1b2 0a00 	subs.w	sl, r2, #0
 80001ee:	4604      	mov	r4, r0
 80001f0:	460e      	mov	r6, r1
 80001f2:	781a      	ldrb	r2, [r3, #0]
 80001f4:	bf15      	itete	ne
 80001f6:	f04f 091e 	movne.w	r9, #30
 80001fa:	f04f 091b 	moveq.w	r9, #27
 80001fe:	f04f 081d 	movne.w	r8, #29
 8000202:	f04f 081a 	moveq.w	r8, #26
 8000206:	bf14      	ite	ne
 8000208:	271c      	movne	r7, #28
 800020a:	2719      	moveq	r7, #25
 800020c:	460d      	mov	r5, r1
 800020e:	e018      	b.n	8000242 <d_cv_qualifiers+0x5e>
 8000210:	2a56      	cmp	r2, #86	; 0x56
 8000212:	d01f      	beq.n	8000254 <d_cv_qualifiers+0x70>
 8000214:	2a4b      	cmp	r2, #75	; 0x4b
 8000216:	d024      	beq.n	8000262 <d_cv_qualifiers+0x7e>
 8000218:	2a44      	cmp	r2, #68	; 0x44
 800021a:	d12d      	bne.n	8000278 <d_cv_qualifiers+0x94>
 800021c:	785a      	ldrb	r2, [r3, #1]
 800021e:	2a78      	cmp	r2, #120	; 0x78
 8000220:	d127      	bne.n	8000272 <d_cv_qualifiers+0x8e>
 8000222:	214c      	movs	r1, #76	; 0x4c
 8000224:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000226:	3302      	adds	r3, #2
 8000228:	3211      	adds	r2, #17
 800022a:	60e3      	str	r3, [r4, #12]
 800022c:	6322      	str	r2, [r4, #48]	; 0x30
 800022e:	2300      	movs	r3, #0
 8000230:	4620      	mov	r0, r4
 8000232:	461a      	mov	r2, r3
 8000234:	f7ff ff8a 	bl	800014c <d_make_comp>
 8000238:	6028      	str	r0, [r5, #0]
 800023a:	b1c8      	cbz	r0, 8000270 <d_cv_qualifiers+0x8c>
 800023c:	68e3      	ldr	r3, [r4, #12]
 800023e:	1d05      	adds	r5, r0, #4
 8000240:	781a      	ldrb	r2, [r3, #0]
 8000242:	2a72      	cmp	r2, #114	; 0x72
 8000244:	d1e4      	bne.n	8000210 <d_cv_qualifiers+0x2c>
 8000246:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000248:	3301      	adds	r3, #1
 800024a:	3209      	adds	r2, #9
 800024c:	60e3      	str	r3, [r4, #12]
 800024e:	6322      	str	r2, [r4, #48]	; 0x30
 8000250:	4639      	mov	r1, r7
 8000252:	e7ec      	b.n	800022e <d_cv_qualifiers+0x4a>
 8000254:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000256:	3301      	adds	r3, #1
 8000258:	3209      	adds	r2, #9
 800025a:	60e3      	str	r3, [r4, #12]
 800025c:	6322      	str	r2, [r4, #48]	; 0x30
 800025e:	4641      	mov	r1, r8
 8000260:	e7e5      	b.n	800022e <d_cv_qualifiers+0x4a>
 8000262:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000264:	3301      	adds	r3, #1
 8000266:	3206      	adds	r2, #6
 8000268:	60e3      	str	r3, [r4, #12]
 800026a:	6322      	str	r2, [r4, #48]	; 0x30
 800026c:	4649      	mov	r1, r9
 800026e:	e7de      	b.n	800022e <d_cv_qualifiers+0x4a>
 8000270:	4605      	mov	r5, r0
 8000272:	4628      	mov	r0, r5
 8000274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000278:	f1ba 0f00 	cmp.w	sl, #0
 800027c:	d1f9      	bne.n	8000272 <d_cv_qualifiers+0x8e>
 800027e:	2a46      	cmp	r2, #70	; 0x46
 8000280:	d1f7      	bne.n	8000272 <d_cv_qualifiers+0x8e>
 8000282:	42b5      	cmp	r5, r6
 8000284:	d0f5      	beq.n	8000272 <d_cv_qualifiers+0x8e>
 8000286:	201d      	movs	r0, #29
 8000288:	211e      	movs	r1, #30
 800028a:	221c      	movs	r2, #28
 800028c:	e007      	b.n	800029e <d_cv_qualifiers+0xba>
 800028e:	2b1b      	cmp	r3, #27
 8000290:	d00b      	beq.n	80002aa <d_cv_qualifiers+0xc6>
 8000292:	2b19      	cmp	r3, #25
 8000294:	d100      	bne.n	8000298 <d_cv_qualifiers+0xb4>
 8000296:	7032      	strb	r2, [r6, #0]
 8000298:	3604      	adds	r6, #4
 800029a:	42b5      	cmp	r5, r6
 800029c:	d0e9      	beq.n	8000272 <d_cv_qualifiers+0x8e>
 800029e:	6836      	ldr	r6, [r6, #0]
 80002a0:	7833      	ldrb	r3, [r6, #0]
 80002a2:	2b1a      	cmp	r3, #26
 80002a4:	d1f3      	bne.n	800028e <d_cv_qualifiers+0xaa>
 80002a6:	7030      	strb	r0, [r6, #0]
 80002a8:	e7f6      	b.n	8000298 <d_cv_qualifiers+0xb4>
 80002aa:	7031      	strb	r1, [r6, #0]
 80002ac:	e7f4      	b.n	8000298 <d_cv_qualifiers+0xb4>
 80002ae:	bf00      	nop

080002b0 <d_ref_qualifier>:
 80002b0:	b410      	push	{r4}
 80002b2:	68c3      	ldr	r3, [r0, #12]
 80002b4:	460a      	mov	r2, r1
 80002b6:	781c      	ldrb	r4, [r3, #0]
 80002b8:	2c52      	cmp	r4, #82	; 0x52
 80002ba:	d00d      	beq.n	80002d8 <d_ref_qualifier+0x28>
 80002bc:	2c4f      	cmp	r4, #79	; 0x4f
 80002be:	d002      	beq.n	80002c6 <d_ref_qualifier+0x16>
 80002c0:	4608      	mov	r0, r1
 80002c2:	bc10      	pop	{r4}
 80002c4:	4770      	bx	lr
 80002c6:	2120      	movs	r1, #32
 80002c8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80002ca:	3403      	adds	r4, #3
 80002cc:	6304      	str	r4, [r0, #48]	; 0x30
 80002ce:	3301      	adds	r3, #1
 80002d0:	60c3      	str	r3, [r0, #12]
 80002d2:	bc10      	pop	{r4}
 80002d4:	2300      	movs	r3, #0
 80002d6:	e739      	b.n	800014c <d_make_comp>
 80002d8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80002da:	211f      	movs	r1, #31
 80002dc:	3402      	adds	r4, #2
 80002de:	6304      	str	r4, [r0, #48]	; 0x30
 80002e0:	e7f5      	b.n	80002ce <d_ref_qualifier+0x1e>
 80002e2:	bf00      	nop

080002e4 <d_count_templates_scopes>:
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	d04d      	beq.n	8000384 <d_count_templates_scopes+0xa0>
 80002e8:	b570      	push	{r4, r5, r6, lr}
 80002ea:	4605      	mov	r5, r0
 80002ec:	460e      	mov	r6, r1
 80002ee:	4614      	mov	r4, r2
 80002f0:	7823      	ldrb	r3, [r4, #0]
 80002f2:	3b01      	subs	r3, #1
 80002f4:	2b4c      	cmp	r3, #76	; 0x4c
 80002f6:	d82b      	bhi.n	8000350 <d_count_templates_scopes+0x6c>
 80002f8:	e8df f003 	tbb	[pc, r3]
 80002fc:	3f363636 	.word	0x3f363636
 8000300:	27272a2a 	.word	0x27272a2a
 8000304:	36363636 	.word	0x36363636
 8000308:	36363636 	.word	0x36363636
 800030c:	36363636 	.word	0x36363636
 8000310:	2a363636 	.word	0x2a363636
 8000314:	36363636 	.word	0x36363636
 8000318:	36363636 	.word	0x36363636
 800031c:	2f2f3636 	.word	0x2f2f3636
 8000320:	362a3636 	.word	0x362a3636
 8000324:	2b363636 	.word	0x2b363636
 8000328:	36363636 	.word	0x36363636
 800032c:	3636272a 	.word	0x3636272a
 8000330:	36363636 	.word	0x36363636
 8000334:	36363636 	.word	0x36363636
 8000338:	2a363636 	.word	0x2a363636
 800033c:	2b2b362a 	.word	0x2b2b362a
 8000340:	362a2b2b 	.word	0x362a2b2b
 8000344:	36363636 	.word	0x36363636
 8000348:	36          	.byte	0x36
 8000349:	00          	.byte	0x00
 800034a:	68a4      	ldr	r4, [r4, #8]
 800034c:	2c00      	cmp	r4, #0
 800034e:	d1cf      	bne.n	80002f0 <d_count_templates_scopes+0xc>
 8000350:	bd70      	pop	{r4, r5, r6, pc}
 8000352:	6864      	ldr	r4, [r4, #4]
 8000354:	2c00      	cmp	r4, #0
 8000356:	d1cb      	bne.n	80002f0 <d_count_templates_scopes+0xc>
 8000358:	e7fa      	b.n	8000350 <d_count_templates_scopes+0x6c>
 800035a:	6862      	ldr	r2, [r4, #4]
 800035c:	7813      	ldrb	r3, [r2, #0]
 800035e:	2b05      	cmp	r3, #5
 8000360:	d103      	bne.n	800036a <d_count_templates_scopes+0x86>
 8000362:	6833      	ldr	r3, [r6, #0]
 8000364:	3301      	adds	r3, #1
 8000366:	6033      	str	r3, [r6, #0]
 8000368:	6862      	ldr	r2, [r4, #4]
 800036a:	4631      	mov	r1, r6
 800036c:	4628      	mov	r0, r5
 800036e:	f7ff ffb9 	bl	80002e4 <d_count_templates_scopes>
 8000372:	68a4      	ldr	r4, [r4, #8]
 8000374:	2c00      	cmp	r4, #0
 8000376:	d1bb      	bne.n	80002f0 <d_count_templates_scopes+0xc>
 8000378:	e7ea      	b.n	8000350 <d_count_templates_scopes+0x6c>
 800037a:	682b      	ldr	r3, [r5, #0]
 800037c:	3301      	adds	r3, #1
 800037e:	602b      	str	r3, [r5, #0]
 8000380:	6862      	ldr	r2, [r4, #4]
 8000382:	e7f2      	b.n	800036a <d_count_templates_scopes+0x86>
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop

08000388 <d_append_buffer>:
 8000388:	b37a      	cbz	r2, 80003ea <d_append_buffer+0x62>
 800038a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800038e:	460d      	mov	r5, r1
 8000390:	4604      	mov	r4, r0
 8000392:	f04f 0800 	mov.w	r8, #0
 8000396:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800039a:	18af      	adds	r7, r5, r2
 800039c:	e009      	b.n	80003b2 <d_append_buffer+0x2a>
 800039e:	460b      	mov	r3, r1
 80003a0:	42bd      	cmp	r5, r7
 80003a2:	f101 0101 	add.w	r1, r1, #1
 80003a6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80003aa:	54e6      	strb	r6, [r4, r3]
 80003ac:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80003b0:	d019      	beq.n	80003e6 <d_append_buffer+0x5e>
 80003b2:	29ff      	cmp	r1, #255	; 0xff
 80003b4:	f815 6b01 	ldrb.w	r6, [r5], #1
 80003b8:	d1f1      	bne.n	800039e <d_append_buffer+0x16>
 80003ba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80003be:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80003c2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80003c6:	4620      	mov	r0, r4
 80003c8:	4798      	blx	r3
 80003ca:	2101      	movs	r1, #1
 80003cc:	2300      	movs	r3, #0
 80003ce:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80003d2:	42bd      	cmp	r5, r7
 80003d4:	440a      	add	r2, r1
 80003d6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80003da:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80003de:	54e6      	strb	r6, [r4, r3]
 80003e0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80003e4:	d1e5      	bne.n	80003b2 <d_append_buffer+0x2a>
 80003e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80003ea:	4770      	bx	lr

080003ec <d_number.isra.0>:
 80003ec:	b470      	push	{r4, r5, r6}
 80003ee:	6802      	ldr	r2, [r0, #0]
 80003f0:	7811      	ldrb	r1, [r2, #0]
 80003f2:	296e      	cmp	r1, #110	; 0x6e
 80003f4:	d018      	beq.n	8000428 <d_number.isra.0+0x3c>
 80003f6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80003fa:	2b09      	cmp	r3, #9
 80003fc:	d81e      	bhi.n	800043c <d_number.isra.0+0x50>
 80003fe:	2600      	movs	r6, #0
 8000400:	2300      	movs	r3, #0
 8000402:	3201      	adds	r2, #1
 8000404:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000408:	6002      	str	r2, [r0, #0]
 800040a:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 800040e:	7811      	ldrb	r1, [r2, #0]
 8000410:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8000414:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
 8000418:	2d09      	cmp	r5, #9
 800041a:	d9f2      	bls.n	8000402 <d_number.isra.0+0x16>
 800041c:	b10e      	cbz	r6, 8000422 <d_number.isra.0+0x36>
 800041e:	f1c4 0330 	rsb	r3, r4, #48	; 0x30
 8000422:	4618      	mov	r0, r3
 8000424:	bc70      	pop	{r4, r5, r6}
 8000426:	4770      	bx	lr
 8000428:	1c53      	adds	r3, r2, #1
 800042a:	6003      	str	r3, [r0, #0]
 800042c:	7851      	ldrb	r1, [r2, #1]
 800042e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8000432:	2a09      	cmp	r2, #9
 8000434:	d802      	bhi.n	800043c <d_number.isra.0+0x50>
 8000436:	461a      	mov	r2, r3
 8000438:	2601      	movs	r6, #1
 800043a:	e7e1      	b.n	8000400 <d_number.isra.0+0x14>
 800043c:	2300      	movs	r3, #0
 800043e:	e7f0      	b.n	8000422 <d_number.isra.0+0x36>

08000440 <d_number_component>:
 8000440:	6943      	ldr	r3, [r0, #20]
 8000442:	6982      	ldr	r2, [r0, #24]
 8000444:	b510      	push	{r4, lr}
 8000446:	4293      	cmp	r3, r2
 8000448:	da0f      	bge.n	800046a <d_number_component+0x2a>
 800044a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800044e:	6901      	ldr	r1, [r0, #16]
 8000450:	0092      	lsls	r2, r2, #2
 8000452:	3301      	adds	r3, #1
 8000454:	188c      	adds	r4, r1, r2
 8000456:	6143      	str	r3, [r0, #20]
 8000458:	d005      	beq.n	8000466 <d_number_component+0x26>
 800045a:	2341      	movs	r3, #65	; 0x41
 800045c:	300c      	adds	r0, #12
 800045e:	548b      	strb	r3, [r1, r2]
 8000460:	f7ff ffc4 	bl	80003ec <d_number.isra.0>
 8000464:	6060      	str	r0, [r4, #4]
 8000466:	4620      	mov	r0, r4
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2400      	movs	r4, #0
 800046c:	4620      	mov	r0, r4
 800046e:	bd10      	pop	{r4, pc}

08000470 <d_compact_number>:
 8000470:	b510      	push	{r4, lr}
 8000472:	68c3      	ldr	r3, [r0, #12]
 8000474:	4604      	mov	r4, r0
 8000476:	781a      	ldrb	r2, [r3, #0]
 8000478:	2a5f      	cmp	r2, #95	; 0x5f
 800047a:	d00d      	beq.n	8000498 <d_compact_number+0x28>
 800047c:	2a6e      	cmp	r2, #110	; 0x6e
 800047e:	d00f      	beq.n	80004a0 <d_compact_number+0x30>
 8000480:	300c      	adds	r0, #12
 8000482:	f7ff ffb3 	bl	80003ec <d_number.isra.0>
 8000486:	3001      	adds	r0, #1
 8000488:	d40a      	bmi.n	80004a0 <d_compact_number+0x30>
 800048a:	68e3      	ldr	r3, [r4, #12]
 800048c:	781a      	ldrb	r2, [r3, #0]
 800048e:	2a5f      	cmp	r2, #95	; 0x5f
 8000490:	d106      	bne.n	80004a0 <d_compact_number+0x30>
 8000492:	3301      	adds	r3, #1
 8000494:	60e3      	str	r3, [r4, #12]
 8000496:	bd10      	pop	{r4, pc}
 8000498:	3301      	adds	r3, #1
 800049a:	2000      	movs	r0, #0
 800049c:	60e3      	str	r3, [r4, #12]
 800049e:	bd10      	pop	{r4, pc}
 80004a0:	f04f 30ff 	mov.w	r0, #4294967295
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	bf00      	nop

080004a8 <d_template_param>:
 80004a8:	b538      	push	{r3, r4, r5, lr}
 80004aa:	68c3      	ldr	r3, [r0, #12]
 80004ac:	781a      	ldrb	r2, [r3, #0]
 80004ae:	2a54      	cmp	r2, #84	; 0x54
 80004b0:	d001      	beq.n	80004b6 <d_template_param+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd38      	pop	{r3, r4, r5, pc}
 80004b6:	3301      	adds	r3, #1
 80004b8:	60c3      	str	r3, [r0, #12]
 80004ba:	4604      	mov	r4, r0
 80004bc:	f7ff ffd8 	bl	8000470 <d_compact_number>
 80004c0:	1e05      	subs	r5, r0, #0
 80004c2:	dbf6      	blt.n	80004b2 <d_template_param+0xa>
 80004c4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80004c6:	6963      	ldr	r3, [r4, #20]
 80004c8:	69a1      	ldr	r1, [r4, #24]
 80004ca:	3201      	adds	r2, #1
 80004cc:	428b      	cmp	r3, r1
 80004ce:	62a2      	str	r2, [r4, #40]	; 0x28
 80004d0:	daef      	bge.n	80004b2 <d_template_param+0xa>
 80004d2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80004d6:	6921      	ldr	r1, [r4, #16]
 80004d8:	0092      	lsls	r2, r2, #2
 80004da:	3301      	adds	r3, #1
 80004dc:	1888      	adds	r0, r1, r2
 80004de:	6163      	str	r3, [r4, #20]
 80004e0:	d002      	beq.n	80004e8 <d_template_param+0x40>
 80004e2:	2305      	movs	r3, #5
 80004e4:	548b      	strb	r3, [r1, r2]
 80004e6:	6045      	str	r5, [r0, #4]
 80004e8:	bd38      	pop	{r3, r4, r5, pc}
 80004ea:	bf00      	nop

080004ec <d_source_name>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	4604      	mov	r4, r0
 80004f0:	300c      	adds	r0, #12
 80004f2:	f7ff ff7b 	bl	80003ec <d_number.isra.0>
 80004f6:	1e06      	subs	r6, r0, #0
 80004f8:	dd4d      	ble.n	8000596 <d_source_name+0xaa>
 80004fa:	68e5      	ldr	r5, [r4, #12]
 80004fc:	6863      	ldr	r3, [r4, #4]
 80004fe:	1b5b      	subs	r3, r3, r5
 8000500:	429e      	cmp	r6, r3
 8000502:	dc2b      	bgt.n	800055c <d_source_name+0x70>
 8000504:	68a2      	ldr	r2, [r4, #8]
 8000506:	19ab      	adds	r3, r5, r6
 8000508:	0752      	lsls	r2, r2, #29
 800050a:	60e3      	str	r3, [r4, #12]
 800050c:	d504      	bpl.n	8000518 <d_source_name+0x2c>
 800050e:	5daa      	ldrb	r2, [r5, r6]
 8000510:	2a24      	cmp	r2, #36	; 0x24
 8000512:	bf04      	itt	eq
 8000514:	3301      	addeq	r3, #1
 8000516:	60e3      	streq	r3, [r4, #12]
 8000518:	2e09      	cmp	r6, #9
 800051a:	dd0c      	ble.n	8000536 <d_source_name+0x4a>
 800051c:	2208      	movs	r2, #8
 800051e:	491f      	ldr	r1, [pc, #124]	; (800059c <d_source_name+0xb0>)
 8000520:	4628      	mov	r0, r5
 8000522:	f00b fb2d 	bl	800bb80 <memcmp>
 8000526:	b930      	cbnz	r0, 8000536 <d_source_name+0x4a>
 8000528:	7a2b      	ldrb	r3, [r5, #8]
 800052a:	2b2e      	cmp	r3, #46	; 0x2e
 800052c:	d019      	beq.n	8000562 <d_source_name+0x76>
 800052e:	2b5f      	cmp	r3, #95	; 0x5f
 8000530:	d017      	beq.n	8000562 <d_source_name+0x76>
 8000532:	2b24      	cmp	r3, #36	; 0x24
 8000534:	d015      	beq.n	8000562 <d_source_name+0x76>
 8000536:	6963      	ldr	r3, [r4, #20]
 8000538:	69a2      	ldr	r2, [r4, #24]
 800053a:	4293      	cmp	r3, r2
 800053c:	da0e      	bge.n	800055c <d_source_name+0x70>
 800053e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000542:	6921      	ldr	r1, [r4, #16]
 8000544:	0092      	lsls	r2, r2, #2
 8000546:	3301      	adds	r3, #1
 8000548:	1888      	adds	r0, r1, r2
 800054a:	6163      	str	r3, [r4, #20]
 800054c:	d006      	beq.n	800055c <d_source_name+0x70>
 800054e:	b12d      	cbz	r5, 800055c <d_source_name+0x70>
 8000550:	2300      	movs	r3, #0
 8000552:	548b      	strb	r3, [r1, r2]
 8000554:	6045      	str	r5, [r0, #4]
 8000556:	6086      	str	r6, [r0, #8]
 8000558:	62e0      	str	r0, [r4, #44]	; 0x2c
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	2000      	movs	r0, #0
 800055e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8000560:	bd70      	pop	{r4, r5, r6, pc}
 8000562:	7a6b      	ldrb	r3, [r5, #9]
 8000564:	2b4e      	cmp	r3, #78	; 0x4e
 8000566:	d1e6      	bne.n	8000536 <d_source_name+0x4a>
 8000568:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800056a:	6962      	ldr	r2, [r4, #20]
 800056c:	69a1      	ldr	r1, [r4, #24]
 800056e:	3316      	adds	r3, #22
 8000570:	1b9e      	subs	r6, r3, r6
 8000572:	428a      	cmp	r2, r1
 8000574:	6326      	str	r6, [r4, #48]	; 0x30
 8000576:	daf1      	bge.n	800055c <d_source_name+0x70>
 8000578:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800057c:	6921      	ldr	r1, [r4, #16]
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	3201      	adds	r2, #1
 8000582:	18c8      	adds	r0, r1, r3
 8000584:	6162      	str	r2, [r4, #20]
 8000586:	d0ea      	beq.n	800055e <d_source_name+0x72>
 8000588:	2600      	movs	r6, #0
 800058a:	2515      	movs	r5, #21
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <d_source_name+0xb4>)
 800058e:	54ce      	strb	r6, [r1, r3]
 8000590:	6085      	str	r5, [r0, #8]
 8000592:	6042      	str	r2, [r0, #4]
 8000594:	e7e3      	b.n	800055e <d_source_name+0x72>
 8000596:	2000      	movs	r0, #0
 8000598:	bd70      	pop	{r4, r5, r6, pc}
 800059a:	bf00      	nop
 800059c:	0800d698 	.word	0x0800d698
 80005a0:	0800d6a4 	.word	0x0800d6a4

080005a4 <d_abi_tags>:
 80005a4:	b570      	push	{r4, r5, r6, lr}
 80005a6:	68c3      	ldr	r3, [r0, #12]
 80005a8:	4604      	mov	r4, r0
 80005aa:	781a      	ldrb	r2, [r3, #0]
 80005ac:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 80005ae:	2a42      	cmp	r2, #66	; 0x42
 80005b0:	460d      	mov	r5, r1
 80005b2:	d10f      	bne.n	80005d4 <d_abi_tags+0x30>
 80005b4:	3301      	adds	r3, #1
 80005b6:	60e3      	str	r3, [r4, #12]
 80005b8:	4620      	mov	r0, r4
 80005ba:	f7ff ff97 	bl	80004ec <d_source_name>
 80005be:	462a      	mov	r2, r5
 80005c0:	4603      	mov	r3, r0
 80005c2:	214b      	movs	r1, #75	; 0x4b
 80005c4:	4620      	mov	r0, r4
 80005c6:	f7ff fdc1 	bl	800014c <d_make_comp>
 80005ca:	68e3      	ldr	r3, [r4, #12]
 80005cc:	4605      	mov	r5, r0
 80005ce:	781a      	ldrb	r2, [r3, #0]
 80005d0:	2a42      	cmp	r2, #66	; 0x42
 80005d2:	d0ef      	beq.n	80005b4 <d_abi_tags+0x10>
 80005d4:	62e6      	str	r6, [r4, #44]	; 0x2c
 80005d6:	4628      	mov	r0, r5
 80005d8:	bd70      	pop	{r4, r5, r6, pc}
 80005da:	bf00      	nop

080005dc <d_substitution>:
 80005dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80005e0:	4605      	mov	r5, r0
 80005e2:	68c0      	ldr	r0, [r0, #12]
 80005e4:	7803      	ldrb	r3, [r0, #0]
 80005e6:	2b53      	cmp	r3, #83	; 0x53
 80005e8:	d002      	beq.n	80005f0 <d_substitution+0x14>
 80005ea:	2000      	movs	r0, #0
 80005ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80005f0:	1c43      	adds	r3, r0, #1
 80005f2:	60eb      	str	r3, [r5, #12]
 80005f4:	7842      	ldrb	r2, [r0, #1]
 80005f6:	b1a2      	cbz	r2, 8000622 <d_substitution+0x46>
 80005f8:	1c83      	adds	r3, r0, #2
 80005fa:	60eb      	str	r3, [r5, #12]
 80005fc:	7842      	ldrb	r2, [r0, #1]
 80005fe:	2a5f      	cmp	r2, #95	; 0x5f
 8000600:	d15a      	bne.n	80006b8 <d_substitution+0xdc>
 8000602:	2300      	movs	r3, #0
 8000604:	6a2a      	ldr	r2, [r5, #32]
 8000606:	4293      	cmp	r3, r2
 8000608:	d2ef      	bcs.n	80005ea <d_substitution+0xe>
 800060a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800060c:	69e9      	ldr	r1, [r5, #28]
 800060e:	3201      	adds	r2, #1
 8000610:	62aa      	str	r2, [r5, #40]	; 0x28
 8000612:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8000616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800061a:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 800061e:	2b19      	cmp	r3, #25
 8000620:	d94f      	bls.n	80006c2 <d_substitution+0xe6>
 8000622:	68ab      	ldr	r3, [r5, #8]
 8000624:	f003 0308 	and.w	r3, r3, #8
 8000628:	2b00      	cmp	r3, #0
 800062a:	bf14      	ite	ne
 800062c:	2401      	movne	r4, #1
 800062e:	2400      	moveq	r4, #0
 8000630:	d101      	bne.n	8000636 <d_substitution+0x5a>
 8000632:	2900      	cmp	r1, #0
 8000634:	d169      	bne.n	800070a <d_substitution+0x12e>
 8000636:	4b46      	ldr	r3, [pc, #280]	; (8000750 <d_substitution+0x174>)
 8000638:	2174      	movs	r1, #116	; 0x74
 800063a:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 800063e:	e003      	b.n	8000648 <d_substitution+0x6c>
 8000640:	331c      	adds	r3, #28
 8000642:	4283      	cmp	r3, r0
 8000644:	d2d1      	bcs.n	80005ea <d_substitution+0xe>
 8000646:	7819      	ldrb	r1, [r3, #0]
 8000648:	428a      	cmp	r2, r1
 800064a:	d1f9      	bne.n	8000640 <d_substitution+0x64>
 800064c:	695e      	ldr	r6, [r3, #20]
 800064e:	2e00      	cmp	r6, #0
 8000650:	d07b      	beq.n	800074a <d_substitution+0x16e>
 8000652:	696a      	ldr	r2, [r5, #20]
 8000654:	69a9      	ldr	r1, [r5, #24]
 8000656:	428a      	cmp	r2, r1
 8000658:	da63      	bge.n	8000722 <d_substitution+0x146>
 800065a:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 800065e:	f8d5 e010 	ldr.w	lr, [r5, #16]
 8000662:	00bf      	lsls	r7, r7, #2
 8000664:	3201      	adds	r2, #1
 8000666:	eb1e 0007 	adds.w	r0, lr, r7
 800066a:	f8d3 8018 	ldr.w	r8, [r3, #24]
 800066e:	616a      	str	r2, [r5, #20]
 8000670:	d006      	beq.n	8000680 <d_substitution+0xa4>
 8000672:	f04f 0c18 	mov.w	ip, #24
 8000676:	f80e c007 	strb.w	ip, [lr, r7]
 800067a:	6046      	str	r6, [r0, #4]
 800067c:	f8c0 8008 	str.w	r8, [r0, #8]
 8000680:	62e8      	str	r0, [r5, #44]	; 0x2c
 8000682:	2c00      	cmp	r4, #0
 8000684:	d04a      	beq.n	800071c <d_substitution+0x140>
 8000686:	68de      	ldr	r6, [r3, #12]
 8000688:	691c      	ldr	r4, [r3, #16]
 800068a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800068c:	4291      	cmp	r1, r2
 800068e:	4423      	add	r3, r4
 8000690:	632b      	str	r3, [r5, #48]	; 0x30
 8000692:	dd41      	ble.n	8000718 <d_substitution+0x13c>
 8000694:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8000698:	6929      	ldr	r1, [r5, #16]
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	3201      	adds	r2, #1
 800069e:	18c8      	adds	r0, r1, r3
 80006a0:	616a      	str	r2, [r5, #20]
 80006a2:	d003      	beq.n	80006ac <d_substitution+0xd0>
 80006a4:	2218      	movs	r2, #24
 80006a6:	54ca      	strb	r2, [r1, r3]
 80006a8:	6046      	str	r6, [r0, #4]
 80006aa:	6084      	str	r4, [r0, #8]
 80006ac:	68eb      	ldr	r3, [r5, #12]
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b42      	cmp	r3, #66	; 0x42
 80006b2:	d038      	beq.n	8000726 <d_substitution+0x14a>
 80006b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80006b8:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 80006bc:	b2e3      	uxtb	r3, r4
 80006be:	2b09      	cmp	r3, #9
 80006c0:	d8ab      	bhi.n	800061a <d_substitution+0x3e>
 80006c2:	2100      	movs	r1, #0
 80006c4:	e00d      	b.n	80006e2 <d_substitution+0x106>
 80006c6:	3b30      	subs	r3, #48	; 0x30
 80006c8:	4299      	cmp	r1, r3
 80006ca:	d88e      	bhi.n	80005ea <d_substitution+0xe>
 80006cc:	68e9      	ldr	r1, [r5, #12]
 80006ce:	780a      	ldrb	r2, [r1, #0]
 80006d0:	1c48      	adds	r0, r1, #1
 80006d2:	b11a      	cbz	r2, 80006dc <d_substitution+0x100>
 80006d4:	60e8      	str	r0, [r5, #12]
 80006d6:	780a      	ldrb	r2, [r1, #0]
 80006d8:	2a5f      	cmp	r2, #95	; 0x5f
 80006da:	d014      	beq.n	8000706 <d_substitution+0x12a>
 80006dc:	4619      	mov	r1, r3
 80006de:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 80006e2:	b2e4      	uxtb	r4, r4
 80006e4:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80006e8:	2c09      	cmp	r4, #9
 80006ea:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
 80006ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80006f2:	d9e8      	bls.n	80006c6 <d_substitution+0xea>
 80006f4:	2819      	cmp	r0, #25
 80006f6:	f63f af78 	bhi.w	80005ea <d_substitution+0xe>
 80006fa:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80006fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000702:	3b37      	subs	r3, #55	; 0x37
 8000704:	e7e0      	b.n	80006c8 <d_substitution+0xec>
 8000706:	3301      	adds	r3, #1
 8000708:	e77c      	b.n	8000604 <d_substitution+0x28>
 800070a:	68eb      	ldr	r3, [r5, #12]
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	3b43      	subs	r3, #67	; 0x43
 8000710:	2b01      	cmp	r3, #1
 8000712:	bf98      	it	ls
 8000714:	2401      	movls	r4, #1
 8000716:	e78e      	b.n	8000636 <d_substitution+0x5a>
 8000718:	2000      	movs	r0, #0
 800071a:	e7c7      	b.n	80006ac <d_substitution+0xd0>
 800071c:	685e      	ldr	r6, [r3, #4]
 800071e:	689c      	ldr	r4, [r3, #8]
 8000720:	e7b3      	b.n	800068a <d_substitution+0xae>
 8000722:	2000      	movs	r0, #0
 8000724:	e7ac      	b.n	8000680 <d_substitution+0xa4>
 8000726:	4601      	mov	r1, r0
 8000728:	4628      	mov	r0, r5
 800072a:	f7ff ff3b 	bl	80005a4 <d_abi_tags>
 800072e:	2800      	cmp	r0, #0
 8000730:	f43f af5b 	beq.w	80005ea <d_substitution+0xe>
 8000734:	6a2b      	ldr	r3, [r5, #32]
 8000736:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000738:	4293      	cmp	r3, r2
 800073a:	dabb      	bge.n	80006b4 <d_substitution+0xd8>
 800073c:	69e9      	ldr	r1, [r5, #28]
 800073e:	1c5a      	adds	r2, r3, #1
 8000740:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8000744:	622a      	str	r2, [r5, #32]
 8000746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800074a:	69a9      	ldr	r1, [r5, #24]
 800074c:	696a      	ldr	r2, [r5, #20]
 800074e:	e798      	b.n	8000682 <d_substitution+0xa6>
 8000750:	0800cba0 	.word	0x0800cba0

08000754 <d_call_offset>:
 8000754:	b538      	push	{r3, r4, r5, lr}
 8000756:	4604      	mov	r4, r0
 8000758:	b929      	cbnz	r1, 8000766 <d_call_offset+0x12>
 800075a:	68c3      	ldr	r3, [r0, #12]
 800075c:	781a      	ldrb	r2, [r3, #0]
 800075e:	b132      	cbz	r2, 800076e <d_call_offset+0x1a>
 8000760:	1c5a      	adds	r2, r3, #1
 8000762:	60c2      	str	r2, [r0, #12]
 8000764:	7819      	ldrb	r1, [r3, #0]
 8000766:	2968      	cmp	r1, #104	; 0x68
 8000768:	d019      	beq.n	800079e <d_call_offset+0x4a>
 800076a:	2976      	cmp	r1, #118	; 0x76
 800076c:	d001      	beq.n	8000772 <d_call_offset+0x1e>
 800076e:	2000      	movs	r0, #0
 8000770:	bd38      	pop	{r3, r4, r5, pc}
 8000772:	f104 050c 	add.w	r5, r4, #12
 8000776:	4628      	mov	r0, r5
 8000778:	f7ff fe38 	bl	80003ec <d_number.isra.0>
 800077c:	68e3      	ldr	r3, [r4, #12]
 800077e:	781a      	ldrb	r2, [r3, #0]
 8000780:	2a5f      	cmp	r2, #95	; 0x5f
 8000782:	d1f4      	bne.n	800076e <d_call_offset+0x1a>
 8000784:	3301      	adds	r3, #1
 8000786:	60e3      	str	r3, [r4, #12]
 8000788:	4628      	mov	r0, r5
 800078a:	f7ff fe2f 	bl	80003ec <d_number.isra.0>
 800078e:	68e3      	ldr	r3, [r4, #12]
 8000790:	781a      	ldrb	r2, [r3, #0]
 8000792:	2a5f      	cmp	r2, #95	; 0x5f
 8000794:	d1eb      	bne.n	800076e <d_call_offset+0x1a>
 8000796:	2001      	movs	r0, #1
 8000798:	4403      	add	r3, r0
 800079a:	60e3      	str	r3, [r4, #12]
 800079c:	bd38      	pop	{r3, r4, r5, pc}
 800079e:	f104 000c 	add.w	r0, r4, #12
 80007a2:	f7ff fe23 	bl	80003ec <d_number.isra.0>
 80007a6:	e7f2      	b.n	800078e <d_call_offset+0x3a>

080007a8 <d_lookup_template_argument.isra.6>:
 80007a8:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 80007ac:	b19b      	cbz	r3, 80007d6 <d_lookup_template_argument.isra.6+0x2e>
 80007ae:	680a      	ldr	r2, [r1, #0]
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	2a00      	cmp	r2, #0
 80007b4:	689b      	ldr	r3, [r3, #8]
 80007b6:	db09      	blt.n	80007cc <d_lookup_template_argument.isra.6+0x24>
 80007b8:	b923      	cbnz	r3, 80007c4 <d_lookup_template_argument.isra.6+0x1c>
 80007ba:	e007      	b.n	80007cc <d_lookup_template_argument.isra.6+0x24>
 80007bc:	b142      	cbz	r2, 80007d0 <d_lookup_template_argument.isra.6+0x28>
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	3a01      	subs	r2, #1
 80007c2:	b11b      	cbz	r3, 80007cc <d_lookup_template_argument.isra.6+0x24>
 80007c4:	7819      	ldrb	r1, [r3, #0]
 80007c6:	292f      	cmp	r1, #47	; 0x2f
 80007c8:	d0f8      	beq.n	80007bc <d_lookup_template_argument.isra.6+0x14>
 80007ca:	2300      	movs	r3, #0
 80007cc:	4618      	mov	r0, r3
 80007ce:	4770      	bx	lr
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	4618      	mov	r0, r3
 80007d4:	4770      	bx	lr
 80007d6:	2201      	movs	r2, #1
 80007d8:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
 80007dc:	e7f6      	b.n	80007cc <d_lookup_template_argument.isra.6+0x24>
 80007de:	bf00      	nop

080007e0 <d_find_pack>:
 80007e0:	2900      	cmp	r1, #0
 80007e2:	d041      	beq.n	8000868 <d_find_pack+0x88>
 80007e4:	b538      	push	{r3, r4, r5, lr}
 80007e6:	4605      	mov	r5, r0
 80007e8:	460c      	mov	r4, r1
 80007ea:	7823      	ldrb	r3, [r4, #0]
 80007ec:	2b4b      	cmp	r3, #75	; 0x4b
 80007ee:	d827      	bhi.n	8000840 <d_find_pack+0x60>
 80007f0:	e8df f003 	tbb	[pc, r3]
 80007f4:	2626262e 	.word	0x2626262e
 80007f8:	2b2e3026 	.word	0x2b2e3026
 80007fc:	2626262b 	.word	0x2626262b
 8000800:	26262626 	.word	0x26262626
 8000804:	26262626 	.word	0x26262626
 8000808:	26262626 	.word	0x26262626
 800080c:	2626262e 	.word	0x2626262e
 8000810:	26262626 	.word	0x26262626
 8000814:	26262626 	.word	0x26262626
 8000818:	2e262626 	.word	0x2e262626
 800081c:	26262626 	.word	0x26262626
 8000820:	2626262e 	.word	0x2626262e
 8000824:	262b2e26 	.word	0x262b2e26
 8000828:	26262626 	.word	0x26262626
 800082c:	26262626 	.word	0x26262626
 8000830:	26262626 	.word	0x26262626
 8000834:	26262e2e 	.word	0x26262e2e
 8000838:	2e2e2e26 	.word	0x2e2e2e26
 800083c:	2e2e2626 	.word	0x2e2e2626
 8000840:	6861      	ldr	r1, [r4, #4]
 8000842:	4628      	mov	r0, r5
 8000844:	f7ff ffcc 	bl	80007e0 <d_find_pack>
 8000848:	b918      	cbnz	r0, 8000852 <d_find_pack+0x72>
 800084a:	68a4      	ldr	r4, [r4, #8]
 800084c:	2c00      	cmp	r4, #0
 800084e:	d1cc      	bne.n	80007ea <d_find_pack+0xa>
 8000850:	2000      	movs	r0, #0
 8000852:	bd38      	pop	{r3, r4, r5, pc}
 8000854:	1d21      	adds	r1, r4, #4
 8000856:	4628      	mov	r0, r5
 8000858:	f7ff ffa6 	bl	80007a8 <d_lookup_template_argument.isra.6>
 800085c:	2800      	cmp	r0, #0
 800085e:	d0f7      	beq.n	8000850 <d_find_pack+0x70>
 8000860:	7803      	ldrb	r3, [r0, #0]
 8000862:	2b2f      	cmp	r3, #47	; 0x2f
 8000864:	d1f4      	bne.n	8000850 <d_find_pack+0x70>
 8000866:	bd38      	pop	{r3, r4, r5, pc}
 8000868:	2000      	movs	r0, #0
 800086a:	4770      	bx	lr

0800086c <d_growable_string_callback_adapter>:
 800086c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800086e:	4615      	mov	r5, r2
 8000870:	6852      	ldr	r2, [r2, #4]
 8000872:	1c4b      	adds	r3, r1, #1
 8000874:	68ac      	ldr	r4, [r5, #8]
 8000876:	4413      	add	r3, r2
 8000878:	42a3      	cmp	r3, r4
 800087a:	b083      	sub	sp, #12
 800087c:	460e      	mov	r6, r1
 800087e:	4607      	mov	r7, r0
 8000880:	d813      	bhi.n	80008aa <d_growable_string_callback_adapter+0x3e>
 8000882:	68ec      	ldr	r4, [r5, #12]
 8000884:	b10c      	cbz	r4, 800088a <d_growable_string_callback_adapter+0x1e>
 8000886:	b003      	add	sp, #12
 8000888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088a:	e895 0009 	ldmia.w	r5, {r0, r3}
 800088e:	4632      	mov	r2, r6
 8000890:	4639      	mov	r1, r7
 8000892:	4418      	add	r0, r3
 8000894:	f00b f983 	bl	800bb9e <memcpy>
 8000898:	682b      	ldr	r3, [r5, #0]
 800089a:	686a      	ldr	r2, [r5, #4]
 800089c:	4433      	add	r3, r6
 800089e:	549c      	strb	r4, [r3, r2]
 80008a0:	686b      	ldr	r3, [r5, #4]
 80008a2:	441e      	add	r6, r3
 80008a4:	606e      	str	r6, [r5, #4]
 80008a6:	b003      	add	sp, #12
 80008a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008aa:	68ea      	ldr	r2, [r5, #12]
 80008ac:	2a00      	cmp	r2, #0
 80008ae:	d1ea      	bne.n	8000886 <d_growable_string_callback_adapter+0x1a>
 80008b0:	b91c      	cbnz	r4, 80008ba <d_growable_string_callback_adapter+0x4e>
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	f04f 0402 	mov.w	r4, #2
 80008b8:	d902      	bls.n	80008c0 <d_growable_string_callback_adapter+0x54>
 80008ba:	0064      	lsls	r4, r4, #1
 80008bc:	42a3      	cmp	r3, r4
 80008be:	d8fc      	bhi.n	80008ba <d_growable_string_callback_adapter+0x4e>
 80008c0:	4621      	mov	r1, r4
 80008c2:	6828      	ldr	r0, [r5, #0]
 80008c4:	f00b f9d2 	bl	800bc6c <realloc>
 80008c8:	b110      	cbz	r0, 80008d0 <d_growable_string_callback_adapter+0x64>
 80008ca:	6028      	str	r0, [r5, #0]
 80008cc:	60ac      	str	r4, [r5, #8]
 80008ce:	e7d8      	b.n	8000882 <d_growable_string_callback_adapter+0x16>
 80008d0:	9001      	str	r0, [sp, #4]
 80008d2:	6828      	ldr	r0, [r5, #0]
 80008d4:	f00a ff40 	bl	800b758 <free>
 80008d8:	2201      	movs	r2, #1
 80008da:	9b01      	ldr	r3, [sp, #4]
 80008dc:	60ea      	str	r2, [r5, #12]
 80008de:	602b      	str	r3, [r5, #0]
 80008e0:	606b      	str	r3, [r5, #4]
 80008e2:	60ab      	str	r3, [r5, #8]
 80008e4:	e7cf      	b.n	8000886 <d_growable_string_callback_adapter+0x1a>
 80008e6:	bf00      	nop

080008e8 <d_append_num>:
 80008e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008ec:	b088      	sub	sp, #32
 80008ee:	460a      	mov	r2, r1
 80008f0:	4604      	mov	r4, r0
 80008f2:	491b      	ldr	r1, [pc, #108]	; (8000960 <d_append_num+0x78>)
 80008f4:	a801      	add	r0, sp, #4
 80008f6:	f009 fdca 	bl	800a48e <siprintf>
 80008fa:	a801      	add	r0, sp, #4
 80008fc:	f005 ff7c 	bl	80067f8 <strlen>
 8000900:	b350      	cbz	r0, 8000958 <d_append_num+0x70>
 8000902:	ad01      	add	r5, sp, #4
 8000904:	f04f 0800 	mov.w	r8, #0
 8000908:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800090c:	182f      	adds	r7, r5, r0
 800090e:	e009      	b.n	8000924 <d_append_num+0x3c>
 8000910:	460b      	mov	r3, r1
 8000912:	42bd      	cmp	r5, r7
 8000914:	f101 0101 	add.w	r1, r1, #1
 8000918:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800091c:	54e6      	strb	r6, [r4, r3]
 800091e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8000922:	d019      	beq.n	8000958 <d_append_num+0x70>
 8000924:	29ff      	cmp	r1, #255	; 0xff
 8000926:	f815 6b01 	ldrb.w	r6, [r5], #1
 800092a:	d1f1      	bne.n	8000910 <d_append_num+0x28>
 800092c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8000930:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8000934:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8000938:	4620      	mov	r0, r4
 800093a:	4798      	blx	r3
 800093c:	2101      	movs	r1, #1
 800093e:	2300      	movs	r3, #0
 8000940:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8000944:	42bd      	cmp	r5, r7
 8000946:	440a      	add	r2, r1
 8000948:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800094c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000950:	54e6      	strb	r6, [r4, r3]
 8000952:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8000956:	d1e5      	bne.n	8000924 <d_append_num+0x3c>
 8000958:	b008      	add	sp, #32
 800095a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800095e:	bf00      	nop
 8000960:	0800d6bc 	.word	0x0800d6bc

08000964 <d_exprlist>:
 8000964:	2200      	movs	r2, #0
 8000966:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800096a:	68c3      	ldr	r3, [r0, #12]
 800096c:	b083      	sub	sp, #12
 800096e:	781d      	ldrb	r5, [r3, #0]
 8000970:	4604      	mov	r4, r0
 8000972:	428d      	cmp	r5, r1
 8000974:	9201      	str	r2, [sp, #4]
 8000976:	f000 81c6 	beq.w	8000d06 <d_exprlist+0x3a2>
 800097a:	4688      	mov	r8, r1
 800097c:	f8df 949c 	ldr.w	r9, [pc, #1180]	; 8000e1c <d_exprlist+0x4b8>
 8000980:	ae01      	add	r6, sp, #4
 8000982:	e023      	b.n	80009cc <d_exprlist+0x68>
 8000984:	2a66      	cmp	r2, #102	; 0x66
 8000986:	d04c      	beq.n	8000a22 <d_exprlist+0xbe>
 8000988:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800098c:	2909      	cmp	r1, #9
 800098e:	f200 8217 	bhi.w	8000dc0 <d_exprlist+0x45c>
 8000992:	4620      	mov	r0, r4
 8000994:	f001 fafe 	bl	8001f94 <d_unqualified_name>
 8000998:	4605      	mov	r5, r0
 800099a:	2800      	cmp	r0, #0
 800099c:	f000 8170 	beq.w	8000c80 <d_exprlist+0x31c>
 80009a0:	68e3      	ldr	r3, [r4, #12]
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b49      	cmp	r3, #73	; 0x49
 80009a6:	f000 8092 	beq.w	8000ace <d_exprlist+0x16a>
 80009aa:	6367      	str	r7, [r4, #52]	; 0x34
 80009ac:	462a      	mov	r2, r5
 80009ae:	2300      	movs	r3, #0
 80009b0:	212e      	movs	r1, #46	; 0x2e
 80009b2:	4620      	mov	r0, r4
 80009b4:	f7ff fbca 	bl	800014c <d_make_comp>
 80009b8:	6030      	str	r0, [r6, #0]
 80009ba:	2800      	cmp	r0, #0
 80009bc:	d05b      	beq.n	8000a76 <d_exprlist+0x112>
 80009be:	68e3      	ldr	r3, [r4, #12]
 80009c0:	f100 0608 	add.w	r6, r0, #8
 80009c4:	781a      	ldrb	r2, [r3, #0]
 80009c6:	4542      	cmp	r2, r8
 80009c8:	f000 8107 	beq.w	8000bda <d_exprlist+0x276>
 80009cc:	2501      	movs	r5, #1
 80009ce:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80009d0:	6365      	str	r5, [r4, #52]	; 0x34
 80009d2:	781a      	ldrb	r2, [r3, #0]
 80009d4:	2a4c      	cmp	r2, #76	; 0x4c
 80009d6:	d047      	beq.n	8000a68 <d_exprlist+0x104>
 80009d8:	2a54      	cmp	r2, #84	; 0x54
 80009da:	d051      	beq.n	8000a80 <d_exprlist+0x11c>
 80009dc:	2a73      	cmp	r2, #115	; 0x73
 80009de:	d1d1      	bne.n	8000984 <d_exprlist+0x20>
 80009e0:	785a      	ldrb	r2, [r3, #1]
 80009e2:	2a72      	cmp	r2, #114	; 0x72
 80009e4:	f000 80e2 	beq.w	8000bac <d_exprlist+0x248>
 80009e8:	2a70      	cmp	r2, #112	; 0x70
 80009ea:	f000 80fd 	beq.w	8000be8 <d_exprlist+0x284>
 80009ee:	4620      	mov	r0, r4
 80009f0:	f001 fa10 	bl	8001e14 <d_operator_name>
 80009f4:	4605      	mov	r5, r0
 80009f6:	2800      	cmp	r0, #0
 80009f8:	f000 8142 	beq.w	8000c80 <d_exprlist+0x31c>
 80009fc:	782b      	ldrb	r3, [r5, #0]
 80009fe:	2b31      	cmp	r3, #49	; 0x31
 8000a00:	d043      	beq.n	8000a8a <d_exprlist+0x126>
 8000a02:	2b32      	cmp	r3, #50	; 0x32
 8000a04:	d05c      	beq.n	8000ac0 <d_exprlist+0x15c>
 8000a06:	2b33      	cmp	r3, #51	; 0x33
 8000a08:	d17b      	bne.n	8000b02 <d_exprlist+0x19e>
 8000a0a:	68e3      	ldr	r3, [r4, #12]
 8000a0c:	781a      	ldrb	r2, [r3, #0]
 8000a0e:	2a5f      	cmp	r2, #95	; 0x5f
 8000a10:	f040 80c1 	bne.w	8000b96 <d_exprlist+0x232>
 8000a14:	3301      	adds	r3, #1
 8000a16:	60e3      	str	r3, [r4, #12]
 8000a18:	2145      	movs	r1, #69	; 0x45
 8000a1a:	4620      	mov	r0, r4
 8000a1c:	f7ff ffa2 	bl	8000964 <d_exprlist>
 8000a20:	e0bc      	b.n	8000b9c <d_exprlist+0x238>
 8000a22:	785a      	ldrb	r2, [r3, #1]
 8000a24:	2a70      	cmp	r2, #112	; 0x70
 8000a26:	d1e2      	bne.n	80009ee <d_exprlist+0x8a>
 8000a28:	1c9a      	adds	r2, r3, #2
 8000a2a:	60e2      	str	r2, [r4, #12]
 8000a2c:	789a      	ldrb	r2, [r3, #2]
 8000a2e:	2a54      	cmp	r2, #84	; 0x54
 8000a30:	d069      	beq.n	8000b06 <d_exprlist+0x1a2>
 8000a32:	4620      	mov	r0, r4
 8000a34:	f7ff fd1c 	bl	8000470 <d_compact_number>
 8000a38:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000a3c:	4298      	cmp	r0, r3
 8000a3e:	d060      	beq.n	8000b02 <d_exprlist+0x19e>
 8000a40:	1c43      	adds	r3, r0, #1
 8000a42:	d05e      	beq.n	8000b02 <d_exprlist+0x19e>
 8000a44:	3001      	adds	r0, #1
 8000a46:	6963      	ldr	r3, [r4, #20]
 8000a48:	69a2      	ldr	r2, [r4, #24]
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	da59      	bge.n	8000b02 <d_exprlist+0x19e>
 8000a4e:	6922      	ldr	r2, [r4, #16]
 8000a50:	1c59      	adds	r1, r3, #1
 8000a52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000a56:	eb12 0583 	adds.w	r5, r2, r3, lsl #2
 8000a5a:	6161      	str	r1, [r4, #20]
 8000a5c:	d051      	beq.n	8000b02 <d_exprlist+0x19e>
 8000a5e:	2106      	movs	r1, #6
 8000a60:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 8000a64:	6068      	str	r0, [r5, #4]
 8000a66:	e7a0      	b.n	80009aa <d_exprlist+0x46>
 8000a68:	4620      	mov	r0, r4
 8000a6a:	f001 fee1 	bl	8002830 <d_expr_primary>
 8000a6e:	4605      	mov	r5, r0
 8000a70:	6367      	str	r7, [r4, #52]	; 0x34
 8000a72:	2d00      	cmp	r5, #0
 8000a74:	d19a      	bne.n	80009ac <d_exprlist+0x48>
 8000a76:	2500      	movs	r5, #0
 8000a78:	4628      	mov	r0, r5
 8000a7a:	b003      	add	sp, #12
 8000a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a80:	4620      	mov	r0, r4
 8000a82:	f7ff fd11 	bl	80004a8 <d_template_param>
 8000a86:	4605      	mov	r5, r0
 8000a88:	e7f2      	b.n	8000a70 <d_exprlist+0x10c>
 8000a8a:	f8d5 b004 	ldr.w	fp, [r5, #4]
 8000a8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a90:	f8db 2008 	ldr.w	r2, [fp, #8]
 8000a94:	f8db a000 	ldr.w	sl, [fp]
 8000a98:	3a02      	subs	r2, #2
 8000a9a:	4413      	add	r3, r2
 8000a9c:	6323      	str	r3, [r4, #48]	; 0x30
 8000a9e:	4650      	mov	r0, sl
 8000aa0:	4649      	mov	r1, r9
 8000aa2:	f005 fe9f 	bl	80067e4 <strcmp>
 8000aa6:	2800      	cmp	r0, #0
 8000aa8:	f000 80e6 	beq.w	8000c78 <d_exprlist+0x314>
 8000aac:	f8db 300c 	ldr.w	r3, [fp, #12]
 8000ab0:	2b03      	cmp	r3, #3
 8000ab2:	d826      	bhi.n	8000b02 <d_exprlist+0x19e>
 8000ab4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000ab8:	0135002b 	.word	0x0135002b
 8000abc:	00a50033 	.word	0x00a50033
 8000ac0:	686b      	ldr	r3, [r5, #4]
 8000ac2:	2b03      	cmp	r3, #3
 8000ac4:	d81d      	bhi.n	8000b02 <d_exprlist+0x19e>
 8000ac6:	e8df f003 	tbb	[pc, r3]
 8000aca:	6622      	.short	0x6622
 8000acc:	1c1c      	.short	0x1c1c
 8000ace:	4620      	mov	r0, r4
 8000ad0:	f000 fbfe 	bl	80012d0 <d_template_args>
 8000ad4:	462a      	mov	r2, r5
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2104      	movs	r1, #4
 8000ada:	4620      	mov	r0, r4
 8000adc:	f7ff fb36 	bl	800014c <d_make_comp>
 8000ae0:	4605      	mov	r5, r0
 8000ae2:	e7c5      	b.n	8000a70 <d_exprlist+0x10c>
 8000ae4:	2a74      	cmp	r2, #116	; 0x74
 8000ae6:	d182      	bne.n	80009ee <d_exprlist+0x8a>
 8000ae8:	785b      	ldrb	r3, [r3, #1]
 8000aea:	2b6c      	cmp	r3, #108	; 0x6c
 8000aec:	f47f af7f 	bne.w	80009ee <d_exprlist+0x8a>
 8000af0:	4620      	mov	r0, r4
 8000af2:	f000 fdaf 	bl	8001654 <d_type>
 8000af6:	68e3      	ldr	r3, [r4, #12]
 8000af8:	4605      	mov	r5, r0
 8000afa:	785a      	ldrb	r2, [r3, #1]
 8000afc:	2a00      	cmp	r2, #0
 8000afe:	f040 8169 	bne.w	8000dd4 <d_exprlist+0x470>
 8000b02:	6367      	str	r7, [r4, #52]	; 0x34
 8000b04:	e7b7      	b.n	8000a76 <d_exprlist+0x112>
 8000b06:	3303      	adds	r3, #3
 8000b08:	60e3      	str	r3, [r4, #12]
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	e79b      	b.n	8000a46 <d_exprlist+0xe2>
 8000b0e:	462a      	mov	r2, r5
 8000b10:	2300      	movs	r3, #0
 8000b12:	2135      	movs	r1, #53	; 0x35
 8000b14:	4620      	mov	r0, r4
 8000b16:	f7ff fb19 	bl	800014c <d_make_comp>
 8000b1a:	4605      	mov	r5, r0
 8000b1c:	e7a8      	b.n	8000a70 <d_exprlist+0x10c>
 8000b1e:	f1ba 0f00 	cmp.w	sl, #0
 8000b22:	d0ee      	beq.n	8000b02 <d_exprlist+0x19e>
 8000b24:	686b      	ldr	r3, [r5, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	785a      	ldrb	r2, [r3, #1]
 8000b2a:	2a63      	cmp	r2, #99	; 0x63
 8000b2c:	f000 80d2 	beq.w	8000cd4 <d_exprlist+0x370>
 8000b30:	f89a 3000 	ldrb.w	r3, [sl]
 8000b34:	2b66      	cmp	r3, #102	; 0x66
 8000b36:	f000 80ef 	beq.w	8000d18 <d_exprlist+0x3b4>
 8000b3a:	4620      	mov	r0, r4
 8000b3c:	f000 f970 	bl	8000e20 <d_expression_1>
 8000b40:	4683      	mov	fp, r0
 8000b42:	49b1      	ldr	r1, [pc, #708]	; (8000e08 <d_exprlist+0x4a4>)
 8000b44:	4650      	mov	r0, sl
 8000b46:	f005 fe4d 	bl	80067e4 <strcmp>
 8000b4a:	2800      	cmp	r0, #0
 8000b4c:	f000 809d 	beq.w	8000c8a <d_exprlist+0x326>
 8000b50:	49ae      	ldr	r1, [pc, #696]	; (8000e0c <d_exprlist+0x4a8>)
 8000b52:	4650      	mov	r0, sl
 8000b54:	f005 fe46 	bl	80067e4 <strcmp>
 8000b58:	b130      	cbz	r0, 8000b68 <d_exprlist+0x204>
 8000b5a:	4650      	mov	r0, sl
 8000b5c:	49ac      	ldr	r1, [pc, #688]	; (8000e10 <d_exprlist+0x4ac>)
 8000b5e:	f005 fe41 	bl	80067e4 <strcmp>
 8000b62:	2800      	cmp	r0, #0
 8000b64:	f040 8083 	bne.w	8000c6e <d_exprlist+0x30a>
 8000b68:	4620      	mov	r0, r4
 8000b6a:	f001 fa13 	bl	8001f94 <d_unqualified_name>
 8000b6e:	68e3      	ldr	r3, [r4, #12]
 8000b70:	4682      	mov	sl, r0
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b49      	cmp	r3, #73	; 0x49
 8000b76:	f000 80e9 	beq.w	8000d4c <d_exprlist+0x3e8>
 8000b7a:	4653      	mov	r3, sl
 8000b7c:	465a      	mov	r2, fp
 8000b7e:	2138      	movs	r1, #56	; 0x38
 8000b80:	4620      	mov	r0, r4
 8000b82:	f7ff fae3 	bl	800014c <d_make_comp>
 8000b86:	462a      	mov	r2, r5
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2137      	movs	r1, #55	; 0x37
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	f7ff fadd 	bl	800014c <d_make_comp>
 8000b92:	4605      	mov	r5, r0
 8000b94:	e76c      	b.n	8000a70 <d_exprlist+0x10c>
 8000b96:	4620      	mov	r0, r4
 8000b98:	f000 f942 	bl	8000e20 <d_expression_1>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	462a      	mov	r2, r5
 8000ba0:	2136      	movs	r1, #54	; 0x36
 8000ba2:	4620      	mov	r0, r4
 8000ba4:	f7ff fad2 	bl	800014c <d_make_comp>
 8000ba8:	4605      	mov	r5, r0
 8000baa:	e761      	b.n	8000a70 <d_exprlist+0x10c>
 8000bac:	3302      	adds	r3, #2
 8000bae:	60e3      	str	r3, [r4, #12]
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	f000 fd4f 	bl	8001654 <d_type>
 8000bb6:	4682      	mov	sl, r0
 8000bb8:	4620      	mov	r0, r4
 8000bba:	f001 f9eb 	bl	8001f94 <d_unqualified_name>
 8000bbe:	68e3      	ldr	r3, [r4, #12]
 8000bc0:	4683      	mov	fp, r0
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b49      	cmp	r3, #73	; 0x49
 8000bc6:	f000 8093 	beq.w	8000cf0 <d_exprlist+0x38c>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	4629      	mov	r1, r5
 8000bce:	4652      	mov	r2, sl
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	f7ff fabb 	bl	800014c <d_make_comp>
 8000bd6:	4605      	mov	r5, r0
 8000bd8:	e74a      	b.n	8000a70 <d_exprlist+0x10c>
 8000bda:	9d01      	ldr	r5, [sp, #4]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	4628      	mov	r0, r5
 8000be0:	60e3      	str	r3, [r4, #12]
 8000be2:	b003      	add	sp, #12
 8000be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000be8:	3302      	adds	r3, #2
 8000bea:	60e3      	str	r3, [r4, #12]
 8000bec:	4620      	mov	r0, r4
 8000bee:	f000 f917 	bl	8000e20 <d_expression_1>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	214a      	movs	r1, #74	; 0x4a
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	f7ff faa7 	bl	800014c <d_make_comp>
 8000bfe:	4605      	mov	r5, r0
 8000c00:	e736      	b.n	8000a70 <d_exprlist+0x10c>
 8000c02:	f1ba 0f00 	cmp.w	sl, #0
 8000c06:	f43f af7c 	beq.w	8000b02 <d_exprlist+0x19e>
 8000c0a:	4982      	ldr	r1, [pc, #520]	; (8000e14 <d_exprlist+0x4b0>)
 8000c0c:	4650      	mov	r0, sl
 8000c0e:	f005 fde9 	bl	80067e4 <strcmp>
 8000c12:	2800      	cmp	r0, #0
 8000c14:	d03f      	beq.n	8000c96 <d_exprlist+0x332>
 8000c16:	f89a 3000 	ldrb.w	r3, [sl]
 8000c1a:	2b66      	cmp	r3, #102	; 0x66
 8000c1c:	f000 80bd 	beq.w	8000d9a <d_exprlist+0x436>
 8000c20:	2b6e      	cmp	r3, #110	; 0x6e
 8000c22:	f47f af6e 	bne.w	8000b02 <d_exprlist+0x19e>
 8000c26:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8000c2a:	2b77      	cmp	r3, #119	; 0x77
 8000c2c:	d002      	beq.n	8000c34 <d_exprlist+0x2d0>
 8000c2e:	2b61      	cmp	r3, #97	; 0x61
 8000c30:	f47f af67 	bne.w	8000b02 <d_exprlist+0x19e>
 8000c34:	215f      	movs	r1, #95	; 0x5f
 8000c36:	4620      	mov	r0, r4
 8000c38:	f7ff fe94 	bl	8000964 <d_exprlist>
 8000c3c:	4682      	mov	sl, r0
 8000c3e:	4620      	mov	r0, r4
 8000c40:	f000 fd08 	bl	8001654 <d_type>
 8000c44:	68e3      	ldr	r3, [r4, #12]
 8000c46:	4683      	mov	fp, r0
 8000c48:	781a      	ldrb	r2, [r3, #0]
 8000c4a:	2a45      	cmp	r2, #69	; 0x45
 8000c4c:	f000 80a1 	beq.w	8000d92 <d_exprlist+0x42e>
 8000c50:	2a70      	cmp	r2, #112	; 0x70
 8000c52:	f000 80a6 	beq.w	8000da2 <d_exprlist+0x43e>
 8000c56:	2a69      	cmp	r2, #105	; 0x69
 8000c58:	f47f af53 	bne.w	8000b02 <d_exprlist+0x19e>
 8000c5c:	785b      	ldrb	r3, [r3, #1]
 8000c5e:	2b6c      	cmp	r3, #108	; 0x6c
 8000c60:	f47f af4f 	bne.w	8000b02 <d_exprlist+0x19e>
 8000c64:	4620      	mov	r0, r4
 8000c66:	f000 f8db 	bl	8000e20 <d_expression_1>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	e01f      	b.n	8000cae <d_exprlist+0x34a>
 8000c6e:	4620      	mov	r0, r4
 8000c70:	f000 f8d6 	bl	8000e20 <d_expression_1>
 8000c74:	4682      	mov	sl, r0
 8000c76:	e780      	b.n	8000b7a <d_exprlist+0x216>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f000 fceb 	bl	8001654 <d_type>
 8000c7e:	e78d      	b.n	8000b9c <d_exprlist+0x238>
 8000c80:	4628      	mov	r0, r5
 8000c82:	6367      	str	r7, [r4, #52]	; 0x34
 8000c84:	b003      	add	sp, #12
 8000c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c8a:	2145      	movs	r1, #69	; 0x45
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	f7ff fe69 	bl	8000964 <d_exprlist>
 8000c92:	4682      	mov	sl, r0
 8000c94:	e771      	b.n	8000b7a <d_exprlist+0x216>
 8000c96:	4620      	mov	r0, r4
 8000c98:	f000 f8c2 	bl	8000e20 <d_expression_1>
 8000c9c:	4682      	mov	sl, r0
 8000c9e:	4620      	mov	r0, r4
 8000ca0:	f000 f8be 	bl	8000e20 <d_expression_1>
 8000ca4:	4683      	mov	fp, r0
 8000ca6:	4620      	mov	r0, r4
 8000ca8:	f000 f8ba 	bl	8000e20 <d_expression_1>
 8000cac:	4603      	mov	r3, r0
 8000cae:	465a      	mov	r2, fp
 8000cb0:	213b      	movs	r1, #59	; 0x3b
 8000cb2:	4620      	mov	r0, r4
 8000cb4:	f7ff fa4a 	bl	800014c <d_make_comp>
 8000cb8:	4652      	mov	r2, sl
 8000cba:	4603      	mov	r3, r0
 8000cbc:	213a      	movs	r1, #58	; 0x3a
 8000cbe:	4620      	mov	r0, r4
 8000cc0:	f7ff fa44 	bl	800014c <d_make_comp>
 8000cc4:	462a      	mov	r2, r5
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2139      	movs	r1, #57	; 0x39
 8000cca:	4620      	mov	r0, r4
 8000ccc:	f7ff fa3e 	bl	800014c <d_make_comp>
 8000cd0:	4605      	mov	r5, r0
 8000cd2:	e6cd      	b.n	8000a70 <d_exprlist+0x10c>
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8000cda:	2a01      	cmp	r2, #1
 8000cdc:	d903      	bls.n	8000ce6 <d_exprlist+0x382>
 8000cde:	3b72      	subs	r3, #114	; 0x72
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	f63f af25 	bhi.w	8000b30 <d_exprlist+0x1cc>
 8000ce6:	4620      	mov	r0, r4
 8000ce8:	f000 fcb4 	bl	8001654 <d_type>
 8000cec:	4683      	mov	fp, r0
 8000cee:	e728      	b.n	8000b42 <d_exprlist+0x1de>
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	f000 faed 	bl	80012d0 <d_template_args>
 8000cf6:	465a      	mov	r2, fp
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2104      	movs	r1, #4
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	f7ff fa25 	bl	800014c <d_make_comp>
 8000d02:	4603      	mov	r3, r0
 8000d04:	e762      	b.n	8000bcc <d_exprlist+0x268>
 8000d06:	3301      	adds	r3, #1
 8000d08:	60c3      	str	r3, [r0, #12]
 8000d0a:	212e      	movs	r1, #46	; 0x2e
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	b003      	add	sp, #12
 8000d10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d14:	f7ff ba1a 	b.w	800014c <d_make_comp>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	f001 f87b 	bl	8001e14 <d_operator_name>
 8000d1e:	4683      	mov	fp, r0
 8000d20:	e70f      	b.n	8000b42 <d_exprlist+0x1de>
 8000d22:	f1ba 0f00 	cmp.w	sl, #0
 8000d26:	f43f af36 	beq.w	8000b96 <d_exprlist+0x232>
 8000d2a:	f89a 3000 	ldrb.w	r3, [sl]
 8000d2e:	2b70      	cmp	r3, #112	; 0x70
 8000d30:	d017      	beq.n	8000d62 <d_exprlist+0x3fe>
 8000d32:	2b6d      	cmp	r3, #109	; 0x6d
 8000d34:	d015      	beq.n	8000d62 <d_exprlist+0x3fe>
 8000d36:	4650      	mov	r0, sl
 8000d38:	4937      	ldr	r1, [pc, #220]	; (8000e18 <d_exprlist+0x4b4>)
 8000d3a:	f005 fd53 	bl	80067e4 <strcmp>
 8000d3e:	2800      	cmp	r0, #0
 8000d40:	f47f af29 	bne.w	8000b96 <d_exprlist+0x232>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f000 fa65 	bl	8001214 <d_template_args_1>
 8000d4a:	e727      	b.n	8000b9c <d_exprlist+0x238>
 8000d4c:	4620      	mov	r0, r4
 8000d4e:	f000 fabf 	bl	80012d0 <d_template_args>
 8000d52:	4652      	mov	r2, sl
 8000d54:	4603      	mov	r3, r0
 8000d56:	2104      	movs	r1, #4
 8000d58:	4620      	mov	r0, r4
 8000d5a:	f7ff f9f7 	bl	800014c <d_make_comp>
 8000d5e:	4682      	mov	sl, r0
 8000d60:	e70b      	b.n	8000b7a <d_exprlist+0x216>
 8000d62:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d1e5      	bne.n	8000d36 <d_exprlist+0x3d2>
 8000d6a:	68e3      	ldr	r3, [r4, #12]
 8000d6c:	781a      	ldrb	r2, [r3, #0]
 8000d6e:	2a5f      	cmp	r2, #95	; 0x5f
 8000d70:	d023      	beq.n	8000dba <d_exprlist+0x456>
 8000d72:	4650      	mov	r0, sl
 8000d74:	4928      	ldr	r1, [pc, #160]	; (8000e18 <d_exprlist+0x4b4>)
 8000d76:	f005 fd35 	bl	80067e4 <strcmp>
 8000d7a:	2800      	cmp	r0, #0
 8000d7c:	d03f      	beq.n	8000dfe <d_exprlist+0x49a>
 8000d7e:	4620      	mov	r0, r4
 8000d80:	f000 f84e 	bl	8000e20 <d_expression_1>
 8000d84:	4603      	mov	r3, r0
 8000d86:	461a      	mov	r2, r3
 8000d88:	2138      	movs	r1, #56	; 0x38
 8000d8a:	4620      	mov	r0, r4
 8000d8c:	f7ff f9de 	bl	800014c <d_make_comp>
 8000d90:	e704      	b.n	8000b9c <d_exprlist+0x238>
 8000d92:	3301      	adds	r3, #1
 8000d94:	60e3      	str	r3, [r4, #12]
 8000d96:	2300      	movs	r3, #0
 8000d98:	e789      	b.n	8000cae <d_exprlist+0x34a>
 8000d9a:	4620      	mov	r0, r4
 8000d9c:	f001 f83a 	bl	8001e14 <d_operator_name>
 8000da0:	e77c      	b.n	8000c9c <d_exprlist+0x338>
 8000da2:	785a      	ldrb	r2, [r3, #1]
 8000da4:	2a69      	cmp	r2, #105	; 0x69
 8000da6:	f47f aeac 	bne.w	8000b02 <d_exprlist+0x19e>
 8000daa:	3302      	adds	r3, #2
 8000dac:	60e3      	str	r3, [r4, #12]
 8000dae:	2145      	movs	r1, #69	; 0x45
 8000db0:	4620      	mov	r0, r4
 8000db2:	f7ff fdd7 	bl	8000964 <d_exprlist>
 8000db6:	4603      	mov	r3, r0
 8000db8:	e779      	b.n	8000cae <d_exprlist+0x34a>
 8000dba:	3301      	adds	r3, #1
 8000dbc:	60e3      	str	r3, [r4, #12]
 8000dbe:	e7ba      	b.n	8000d36 <d_exprlist+0x3d2>
 8000dc0:	2a6f      	cmp	r2, #111	; 0x6f
 8000dc2:	d015      	beq.n	8000df0 <d_exprlist+0x48c>
 8000dc4:	2a69      	cmp	r2, #105	; 0x69
 8000dc6:	f47f ae8d 	bne.w	8000ae4 <d_exprlist+0x180>
 8000dca:	785a      	ldrb	r2, [r3, #1]
 8000dcc:	2a6c      	cmp	r2, #108	; 0x6c
 8000dce:	f47f ae0e 	bne.w	80009ee <d_exprlist+0x8a>
 8000dd2:	2500      	movs	r5, #0
 8000dd4:	3302      	adds	r3, #2
 8000dd6:	60e3      	str	r3, [r4, #12]
 8000dd8:	2145      	movs	r1, #69	; 0x45
 8000dda:	4620      	mov	r0, r4
 8000ddc:	f7ff fdc2 	bl	8000964 <d_exprlist>
 8000de0:	462a      	mov	r2, r5
 8000de2:	4603      	mov	r3, r0
 8000de4:	2130      	movs	r1, #48	; 0x30
 8000de6:	4620      	mov	r0, r4
 8000de8:	f7ff f9b0 	bl	800014c <d_make_comp>
 8000dec:	4605      	mov	r5, r0
 8000dee:	e63f      	b.n	8000a70 <d_exprlist+0x10c>
 8000df0:	785a      	ldrb	r2, [r3, #1]
 8000df2:	2a6e      	cmp	r2, #110	; 0x6e
 8000df4:	f47f adfb 	bne.w	80009ee <d_exprlist+0x8a>
 8000df8:	3302      	adds	r3, #2
 8000dfa:	60e3      	str	r3, [r4, #12]
 8000dfc:	e5c9      	b.n	8000992 <d_exprlist+0x2e>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	f000 fa08 	bl	8001214 <d_template_args_1>
 8000e04:	4603      	mov	r3, r0
 8000e06:	e7be      	b.n	8000d86 <d_exprlist+0x422>
 8000e08:	0800d6c4 	.word	0x0800d6c4
 8000e0c:	0800d6c8 	.word	0x0800d6c8
 8000e10:	0800d6cc 	.word	0x0800d6cc
 8000e14:	0800d6d0 	.word	0x0800d6d0
 8000e18:	0800d6c0 	.word	0x0800d6c0
 8000e1c:	0800dbc8 	.word	0x0800dbc8

08000e20 <d_expression_1>:
 8000e20:	68c1      	ldr	r1, [r0, #12]
 8000e22:	780b      	ldrb	r3, [r1, #0]
 8000e24:	2b4c      	cmp	r3, #76	; 0x4c
 8000e26:	f000 8087 	beq.w	8000f38 <d_expression_1+0x118>
 8000e2a:	2b54      	cmp	r3, #84	; 0x54
 8000e2c:	f000 8086 	beq.w	8000f3c <d_expression_1+0x11c>
 8000e30:	2b73      	cmp	r3, #115	; 0x73
 8000e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e36:	4604      	mov	r4, r0
 8000e38:	d037      	beq.n	8000eaa <d_expression_1+0x8a>
 8000e3a:	2b66      	cmp	r3, #102	; 0x66
 8000e3c:	d012      	beq.n	8000e64 <d_expression_1+0x44>
 8000e3e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000e42:	2a09      	cmp	r2, #9
 8000e44:	f200 81b8 	bhi.w	80011b8 <d_expression_1+0x398>
 8000e48:	4620      	mov	r0, r4
 8000e4a:	f001 f8a3 	bl	8001f94 <d_unqualified_name>
 8000e4e:	4605      	mov	r5, r0
 8000e50:	2800      	cmp	r0, #0
 8000e52:	d06d      	beq.n	8000f30 <d_expression_1+0x110>
 8000e54:	68e3      	ldr	r3, [r4, #12]
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b49      	cmp	r3, #73	; 0x49
 8000e5a:	f000 8088 	beq.w	8000f6e <d_expression_1+0x14e>
 8000e5e:	4628      	mov	r0, r5
 8000e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e64:	784b      	ldrb	r3, [r1, #1]
 8000e66:	2b70      	cmp	r3, #112	; 0x70
 8000e68:	d039      	beq.n	8000ede <d_expression_1+0xbe>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	f000 ffd2 	bl	8001e14 <d_operator_name>
 8000e70:	4605      	mov	r5, r0
 8000e72:	2800      	cmp	r0, #0
 8000e74:	d05c      	beq.n	8000f30 <d_expression_1+0x110>
 8000e76:	7803      	ldrb	r3, [r0, #0]
 8000e78:	2b31      	cmp	r3, #49	; 0x31
 8000e7a:	d061      	beq.n	8000f40 <d_expression_1+0x120>
 8000e7c:	2b32      	cmp	r3, #50	; 0x32
 8000e7e:	d025      	beq.n	8000ecc <d_expression_1+0xac>
 8000e80:	2b33      	cmp	r3, #51	; 0x33
 8000e82:	d155      	bne.n	8000f30 <d_expression_1+0x110>
 8000e84:	68e3      	ldr	r3, [r4, #12]
 8000e86:	781a      	ldrb	r2, [r3, #0]
 8000e88:	2a5f      	cmp	r2, #95	; 0x5f
 8000e8a:	f040 81b4 	bne.w	80011f6 <d_expression_1+0x3d6>
 8000e8e:	3301      	adds	r3, #1
 8000e90:	60e3      	str	r3, [r4, #12]
 8000e92:	2145      	movs	r1, #69	; 0x45
 8000e94:	4620      	mov	r0, r4
 8000e96:	f7ff fd65 	bl	8000964 <d_exprlist>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	462a      	mov	r2, r5
 8000e9e:	4620      	mov	r0, r4
 8000ea0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000ea4:	2136      	movs	r1, #54	; 0x36
 8000ea6:	f7ff b951 	b.w	800014c <d_make_comp>
 8000eaa:	784b      	ldrb	r3, [r1, #1]
 8000eac:	2b72      	cmp	r3, #114	; 0x72
 8000eae:	d069      	beq.n	8000f84 <d_expression_1+0x164>
 8000eb0:	2b70      	cmp	r3, #112	; 0x70
 8000eb2:	d1da      	bne.n	8000e6a <d_expression_1+0x4a>
 8000eb4:	3102      	adds	r1, #2
 8000eb6:	60c1      	str	r1, [r0, #12]
 8000eb8:	f7ff ffb2 	bl	8000e20 <d_expression_1>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	214a      	movs	r1, #74	; 0x4a
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000ec8:	f7ff b940 	b.w	800014c <d_make_comp>
 8000ecc:	6843      	ldr	r3, [r0, #4]
 8000ece:	2b03      	cmp	r3, #3
 8000ed0:	d82e      	bhi.n	8000f30 <d_expression_1+0x110>
 8000ed2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000ed6:	0071      	.short	0x0071
 8000ed8:	002d0190 	.word	0x002d0190
 8000edc:	002d      	.short	0x002d
 8000ede:	1c8b      	adds	r3, r1, #2
 8000ee0:	60c3      	str	r3, [r0, #12]
 8000ee2:	788b      	ldrb	r3, [r1, #2]
 8000ee4:	2b54      	cmp	r3, #84	; 0x54
 8000ee6:	d063      	beq.n	8000fb0 <d_expression_1+0x190>
 8000ee8:	f7ff fac2 	bl	8000470 <d_compact_number>
 8000eec:	43c3      	mvns	r3, r0
 8000eee:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 8000ef2:	d01d      	beq.n	8000f30 <d_expression_1+0x110>
 8000ef4:	3001      	adds	r0, #1
 8000ef6:	6963      	ldr	r3, [r4, #20]
 8000ef8:	69a2      	ldr	r2, [r4, #24]
 8000efa:	4293      	cmp	r3, r2
 8000efc:	da18      	bge.n	8000f30 <d_expression_1+0x110>
 8000efe:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000f02:	6921      	ldr	r1, [r4, #16]
 8000f04:	0092      	lsls	r2, r2, #2
 8000f06:	3301      	adds	r3, #1
 8000f08:	188d      	adds	r5, r1, r2
 8000f0a:	6163      	str	r3, [r4, #20]
 8000f0c:	d0a7      	beq.n	8000e5e <d_expression_1+0x3e>
 8000f0e:	2306      	movs	r3, #6
 8000f10:	548b      	strb	r3, [r1, r2]
 8000f12:	6068      	str	r0, [r5, #4]
 8000f14:	e7a3      	b.n	8000e5e <d_expression_1+0x3e>
 8000f16:	2b74      	cmp	r3, #116	; 0x74
 8000f18:	d1a7      	bne.n	8000e6a <d_expression_1+0x4a>
 8000f1a:	784b      	ldrb	r3, [r1, #1]
 8000f1c:	2b6c      	cmp	r3, #108	; 0x6c
 8000f1e:	d1a4      	bne.n	8000e6a <d_expression_1+0x4a>
 8000f20:	f000 fb98 	bl	8001654 <d_type>
 8000f24:	68e1      	ldr	r1, [r4, #12]
 8000f26:	4605      	mov	r5, r0
 8000f28:	784b      	ldrb	r3, [r1, #1]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	f040 814e 	bne.w	80011cc <d_expression_1+0x3ac>
 8000f30:	2500      	movs	r5, #0
 8000f32:	4628      	mov	r0, r5
 8000f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f38:	f001 bc7a 	b.w	8002830 <d_expr_primary>
 8000f3c:	f7ff bab4 	b.w	80004a8 <d_template_param>
 8000f40:	6847      	ldr	r7, [r0, #4]
 8000f42:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	683e      	ldr	r6, [r7, #0]
 8000f48:	3a02      	subs	r2, #2
 8000f4a:	4413      	add	r3, r2
 8000f4c:	6323      	str	r3, [r4, #48]	; 0x30
 8000f4e:	4630      	mov	r0, r6
 8000f50:	49aa      	ldr	r1, [pc, #680]	; (80011fc <d_expression_1+0x3dc>)
 8000f52:	f005 fc47 	bl	80067e4 <strcmp>
 8000f56:	2800      	cmp	r0, #0
 8000f58:	f000 80ab 	beq.w	80010b2 <d_expression_1+0x292>
 8000f5c:	68ff      	ldr	r7, [r7, #12]
 8000f5e:	2f03      	cmp	r7, #3
 8000f60:	d8e6      	bhi.n	8000f30 <d_expression_1+0x110>
 8000f62:	e8df f017 	tbh	[pc, r7, lsl #1]
 8000f66:	0029      	.short	0x0029
 8000f68:	007100ff 	.word	0x007100ff
 8000f6c:	0031      	.short	0x0031
 8000f6e:	4620      	mov	r0, r4
 8000f70:	f000 f9ae 	bl	80012d0 <d_template_args>
 8000f74:	462a      	mov	r2, r5
 8000f76:	4603      	mov	r3, r0
 8000f78:	2104      	movs	r1, #4
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f80:	f7ff b8e4 	b.w	800014c <d_make_comp>
 8000f84:	3102      	adds	r1, #2
 8000f86:	60c1      	str	r1, [r0, #12]
 8000f88:	f000 fb64 	bl	8001654 <d_type>
 8000f8c:	4605      	mov	r5, r0
 8000f8e:	4620      	mov	r0, r4
 8000f90:	f001 f800 	bl	8001f94 <d_unqualified_name>
 8000f94:	68e3      	ldr	r3, [r4, #12]
 8000f96:	4606      	mov	r6, r0
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b49      	cmp	r3, #73	; 0x49
 8000f9c:	f000 80ae 	beq.w	80010fc <d_expression_1+0x2dc>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	462a      	mov	r2, r5
 8000fa4:	4620      	mov	r0, r4
 8000fa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000faa:	2101      	movs	r1, #1
 8000fac:	f7ff b8ce 	b.w	800014c <d_make_comp>
 8000fb0:	3103      	adds	r1, #3
 8000fb2:	60c1      	str	r1, [r0, #12]
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	e79e      	b.n	8000ef6 <d_expression_1+0xd6>
 8000fb8:	462a      	mov	r2, r5
 8000fba:	4620      	mov	r0, r4
 8000fbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	2135      	movs	r1, #53	; 0x35
 8000fc4:	f7ff b8c2 	b.w	800014c <d_make_comp>
 8000fc8:	2e00      	cmp	r6, #0
 8000fca:	d0b1      	beq.n	8000f30 <d_expression_1+0x110>
 8000fcc:	498c      	ldr	r1, [pc, #560]	; (8001200 <d_expression_1+0x3e0>)
 8000fce:	4630      	mov	r0, r6
 8000fd0:	f005 fc08 	bl	80067e4 <strcmp>
 8000fd4:	2800      	cmp	r0, #0
 8000fd6:	d071      	beq.n	80010bc <d_expression_1+0x29c>
 8000fd8:	7833      	ldrb	r3, [r6, #0]
 8000fda:	2b66      	cmp	r3, #102	; 0x66
 8000fdc:	f000 80b2 	beq.w	8001144 <d_expression_1+0x324>
 8000fe0:	2b6e      	cmp	r3, #110	; 0x6e
 8000fe2:	d1a5      	bne.n	8000f30 <d_expression_1+0x110>
 8000fe4:	7873      	ldrb	r3, [r6, #1]
 8000fe6:	2b77      	cmp	r3, #119	; 0x77
 8000fe8:	d001      	beq.n	8000fee <d_expression_1+0x1ce>
 8000fea:	2b61      	cmp	r3, #97	; 0x61
 8000fec:	d1a0      	bne.n	8000f30 <d_expression_1+0x110>
 8000fee:	215f      	movs	r1, #95	; 0x5f
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	f7ff fcb7 	bl	8000964 <d_exprlist>
 8000ff6:	4606      	mov	r6, r0
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	f000 fb2b 	bl	8001654 <d_type>
 8000ffe:	68e3      	ldr	r3, [r4, #12]
 8001000:	4607      	mov	r7, r0
 8001002:	781a      	ldrb	r2, [r3, #0]
 8001004:	2a45      	cmp	r2, #69	; 0x45
 8001006:	f000 8099 	beq.w	800113c <d_expression_1+0x31c>
 800100a:	2a70      	cmp	r2, #112	; 0x70
 800100c:	f000 809e 	beq.w	800114c <d_expression_1+0x32c>
 8001010:	2a69      	cmp	r2, #105	; 0x69
 8001012:	d18d      	bne.n	8000f30 <d_expression_1+0x110>
 8001014:	785b      	ldrb	r3, [r3, #1]
 8001016:	2b6c      	cmp	r3, #108	; 0x6c
 8001018:	d18a      	bne.n	8000f30 <d_expression_1+0x110>
 800101a:	4620      	mov	r0, r4
 800101c:	f7ff ff00 	bl	8000e20 <d_expression_1>
 8001020:	4603      	mov	r3, r0
 8001022:	463a      	mov	r2, r7
 8001024:	213b      	movs	r1, #59	; 0x3b
 8001026:	4620      	mov	r0, r4
 8001028:	f7ff f890 	bl	800014c <d_make_comp>
 800102c:	4632      	mov	r2, r6
 800102e:	4603      	mov	r3, r0
 8001030:	213a      	movs	r1, #58	; 0x3a
 8001032:	4620      	mov	r0, r4
 8001034:	f7ff f88a 	bl	800014c <d_make_comp>
 8001038:	462a      	mov	r2, r5
 800103a:	4603      	mov	r3, r0
 800103c:	2139      	movs	r1, #57	; 0x39
 800103e:	4620      	mov	r0, r4
 8001040:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001044:	f7ff b882 	b.w	800014c <d_make_comp>
 8001048:	2e00      	cmp	r6, #0
 800104a:	f43f af71 	beq.w	8000f30 <d_expression_1+0x110>
 800104e:	686b      	ldr	r3, [r5, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	785a      	ldrb	r2, [r3, #1]
 8001054:	2a63      	cmp	r2, #99	; 0x63
 8001056:	d044      	beq.n	80010e2 <d_expression_1+0x2c2>
 8001058:	7833      	ldrb	r3, [r6, #0]
 800105a:	2b66      	cmp	r3, #102	; 0x66
 800105c:	d059      	beq.n	8001112 <d_expression_1+0x2f2>
 800105e:	4620      	mov	r0, r4
 8001060:	f7ff fede 	bl	8000e20 <d_expression_1>
 8001064:	4607      	mov	r7, r0
 8001066:	4967      	ldr	r1, [pc, #412]	; (8001204 <d_expression_1+0x3e4>)
 8001068:	4630      	mov	r0, r6
 800106a:	f005 fbbb 	bl	80067e4 <strcmp>
 800106e:	b390      	cbz	r0, 80010d6 <d_expression_1+0x2b6>
 8001070:	4965      	ldr	r1, [pc, #404]	; (8001208 <d_expression_1+0x3e8>)
 8001072:	4630      	mov	r0, r6
 8001074:	f005 fbb6 	bl	80067e4 <strcmp>
 8001078:	b128      	cbz	r0, 8001086 <d_expression_1+0x266>
 800107a:	4630      	mov	r0, r6
 800107c:	4963      	ldr	r1, [pc, #396]	; (800120c <d_expression_1+0x3ec>)
 800107e:	f005 fbb1 	bl	80067e4 <strcmp>
 8001082:	2800      	cmp	r0, #0
 8001084:	d14a      	bne.n	800111c <d_expression_1+0x2fc>
 8001086:	4620      	mov	r0, r4
 8001088:	f000 ff84 	bl	8001f94 <d_unqualified_name>
 800108c:	68e3      	ldr	r3, [r4, #12]
 800108e:	4606      	mov	r6, r0
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b49      	cmp	r3, #73	; 0x49
 8001094:	d047      	beq.n	8001126 <d_expression_1+0x306>
 8001096:	4633      	mov	r3, r6
 8001098:	463a      	mov	r2, r7
 800109a:	2138      	movs	r1, #56	; 0x38
 800109c:	4620      	mov	r0, r4
 800109e:	f7ff f855 	bl	800014c <d_make_comp>
 80010a2:	462a      	mov	r2, r5
 80010a4:	4603      	mov	r3, r0
 80010a6:	2137      	movs	r1, #55	; 0x37
 80010a8:	4620      	mov	r0, r4
 80010aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010ae:	f7ff b84d 	b.w	800014c <d_make_comp>
 80010b2:	4620      	mov	r0, r4
 80010b4:	f000 face 	bl	8001654 <d_type>
 80010b8:	4603      	mov	r3, r0
 80010ba:	e6ef      	b.n	8000e9c <d_expression_1+0x7c>
 80010bc:	4620      	mov	r0, r4
 80010be:	f7ff feaf 	bl	8000e20 <d_expression_1>
 80010c2:	4606      	mov	r6, r0
 80010c4:	4620      	mov	r0, r4
 80010c6:	f7ff feab 	bl	8000e20 <d_expression_1>
 80010ca:	4607      	mov	r7, r0
 80010cc:	4620      	mov	r0, r4
 80010ce:	f7ff fea7 	bl	8000e20 <d_expression_1>
 80010d2:	4603      	mov	r3, r0
 80010d4:	e7a5      	b.n	8001022 <d_expression_1+0x202>
 80010d6:	2145      	movs	r1, #69	; 0x45
 80010d8:	4620      	mov	r0, r4
 80010da:	f7ff fc43 	bl	8000964 <d_exprlist>
 80010de:	4606      	mov	r6, r0
 80010e0:	e7d9      	b.n	8001096 <d_expression_1+0x276>
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 80010e8:	2a01      	cmp	r2, #1
 80010ea:	d902      	bls.n	80010f2 <d_expression_1+0x2d2>
 80010ec:	3b72      	subs	r3, #114	; 0x72
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d8b2      	bhi.n	8001058 <d_expression_1+0x238>
 80010f2:	4620      	mov	r0, r4
 80010f4:	f000 faae 	bl	8001654 <d_type>
 80010f8:	4607      	mov	r7, r0
 80010fa:	e7b4      	b.n	8001066 <d_expression_1+0x246>
 80010fc:	4620      	mov	r0, r4
 80010fe:	f000 f8e7 	bl	80012d0 <d_template_args>
 8001102:	4632      	mov	r2, r6
 8001104:	4603      	mov	r3, r0
 8001106:	2104      	movs	r1, #4
 8001108:	4620      	mov	r0, r4
 800110a:	f7ff f81f 	bl	800014c <d_make_comp>
 800110e:	4603      	mov	r3, r0
 8001110:	e747      	b.n	8000fa2 <d_expression_1+0x182>
 8001112:	4620      	mov	r0, r4
 8001114:	f000 fe7e 	bl	8001e14 <d_operator_name>
 8001118:	4607      	mov	r7, r0
 800111a:	e7a4      	b.n	8001066 <d_expression_1+0x246>
 800111c:	4620      	mov	r0, r4
 800111e:	f7ff fe7f 	bl	8000e20 <d_expression_1>
 8001122:	4606      	mov	r6, r0
 8001124:	e7b7      	b.n	8001096 <d_expression_1+0x276>
 8001126:	4620      	mov	r0, r4
 8001128:	f000 f8d2 	bl	80012d0 <d_template_args>
 800112c:	4632      	mov	r2, r6
 800112e:	4603      	mov	r3, r0
 8001130:	2104      	movs	r1, #4
 8001132:	4620      	mov	r0, r4
 8001134:	f7ff f80a 	bl	800014c <d_make_comp>
 8001138:	4606      	mov	r6, r0
 800113a:	e7ac      	b.n	8001096 <d_expression_1+0x276>
 800113c:	3301      	adds	r3, #1
 800113e:	60e3      	str	r3, [r4, #12]
 8001140:	2300      	movs	r3, #0
 8001142:	e76e      	b.n	8001022 <d_expression_1+0x202>
 8001144:	4620      	mov	r0, r4
 8001146:	f000 fe65 	bl	8001e14 <d_operator_name>
 800114a:	e7ba      	b.n	80010c2 <d_expression_1+0x2a2>
 800114c:	785a      	ldrb	r2, [r3, #1]
 800114e:	2a69      	cmp	r2, #105	; 0x69
 8001150:	f47f aeee 	bne.w	8000f30 <d_expression_1+0x110>
 8001154:	3302      	adds	r3, #2
 8001156:	60e3      	str	r3, [r4, #12]
 8001158:	2145      	movs	r1, #69	; 0x45
 800115a:	4620      	mov	r0, r4
 800115c:	f7ff fc02 	bl	8000964 <d_exprlist>
 8001160:	4603      	mov	r3, r0
 8001162:	e75e      	b.n	8001022 <d_expression_1+0x202>
 8001164:	2e00      	cmp	r6, #0
 8001166:	d046      	beq.n	80011f6 <d_expression_1+0x3d6>
 8001168:	7833      	ldrb	r3, [r6, #0]
 800116a:	2b70      	cmp	r3, #112	; 0x70
 800116c:	d015      	beq.n	800119a <d_expression_1+0x37a>
 800116e:	2b6d      	cmp	r3, #109	; 0x6d
 8001170:	d013      	beq.n	800119a <d_expression_1+0x37a>
 8001172:	2700      	movs	r7, #0
 8001174:	4630      	mov	r0, r6
 8001176:	4926      	ldr	r1, [pc, #152]	; (8001210 <d_expression_1+0x3f0>)
 8001178:	f005 fb34 	bl	80067e4 <strcmp>
 800117c:	b1b8      	cbz	r0, 80011ae <d_expression_1+0x38e>
 800117e:	4620      	mov	r0, r4
 8001180:	f7ff fe4e 	bl	8000e20 <d_expression_1>
 8001184:	4603      	mov	r3, r0
 8001186:	2f00      	cmp	r7, #0
 8001188:	f43f ae88 	beq.w	8000e9c <d_expression_1+0x7c>
 800118c:	461a      	mov	r2, r3
 800118e:	2138      	movs	r1, #56	; 0x38
 8001190:	4620      	mov	r0, r4
 8001192:	f7fe ffdb 	bl	800014c <d_make_comp>
 8001196:	4603      	mov	r3, r0
 8001198:	e680      	b.n	8000e9c <d_expression_1+0x7c>
 800119a:	7872      	ldrb	r2, [r6, #1]
 800119c:	429a      	cmp	r2, r3
 800119e:	d1e8      	bne.n	8001172 <d_expression_1+0x352>
 80011a0:	68e3      	ldr	r3, [r4, #12]
 80011a2:	781a      	ldrb	r2, [r3, #0]
 80011a4:	2a5f      	cmp	r2, #95	; 0x5f
 80011a6:	d1e5      	bne.n	8001174 <d_expression_1+0x354>
 80011a8:	3301      	adds	r3, #1
 80011aa:	60e3      	str	r3, [r4, #12]
 80011ac:	e7e1      	b.n	8001172 <d_expression_1+0x352>
 80011ae:	4620      	mov	r0, r4
 80011b0:	f000 f830 	bl	8001214 <d_template_args_1>
 80011b4:	4603      	mov	r3, r0
 80011b6:	e7e6      	b.n	8001186 <d_expression_1+0x366>
 80011b8:	2b6f      	cmp	r3, #111	; 0x6f
 80011ba:	d015      	beq.n	80011e8 <d_expression_1+0x3c8>
 80011bc:	2b69      	cmp	r3, #105	; 0x69
 80011be:	f47f aeaa 	bne.w	8000f16 <d_expression_1+0xf6>
 80011c2:	784b      	ldrb	r3, [r1, #1]
 80011c4:	2b6c      	cmp	r3, #108	; 0x6c
 80011c6:	f47f ae50 	bne.w	8000e6a <d_expression_1+0x4a>
 80011ca:	2500      	movs	r5, #0
 80011cc:	3102      	adds	r1, #2
 80011ce:	60e1      	str	r1, [r4, #12]
 80011d0:	4620      	mov	r0, r4
 80011d2:	2145      	movs	r1, #69	; 0x45
 80011d4:	f7ff fbc6 	bl	8000964 <d_exprlist>
 80011d8:	462a      	mov	r2, r5
 80011da:	4603      	mov	r3, r0
 80011dc:	2130      	movs	r1, #48	; 0x30
 80011de:	4620      	mov	r0, r4
 80011e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80011e4:	f7fe bfb2 	b.w	800014c <d_make_comp>
 80011e8:	784b      	ldrb	r3, [r1, #1]
 80011ea:	2b6e      	cmp	r3, #110	; 0x6e
 80011ec:	f47f ae3d 	bne.w	8000e6a <d_expression_1+0x4a>
 80011f0:	3102      	adds	r1, #2
 80011f2:	60c1      	str	r1, [r0, #12]
 80011f4:	e628      	b.n	8000e48 <d_expression_1+0x28>
 80011f6:	2700      	movs	r7, #0
 80011f8:	e7c1      	b.n	800117e <d_expression_1+0x35e>
 80011fa:	bf00      	nop
 80011fc:	0800dbc8 	.word	0x0800dbc8
 8001200:	0800d6d0 	.word	0x0800d6d0
 8001204:	0800d6c4 	.word	0x0800d6c4
 8001208:	0800d6c8 	.word	0x0800d6c8
 800120c:	0800d6cc 	.word	0x0800d6cc
 8001210:	0800d6c0 	.word	0x0800d6c0

08001214 <d_template_args_1>:
 8001214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001218:	68c2      	ldr	r2, [r0, #12]
 800121a:	b082      	sub	sp, #8
 800121c:	7813      	ldrb	r3, [r2, #0]
 800121e:	4604      	mov	r4, r0
 8001220:	2b45      	cmp	r3, #69	; 0x45
 8001222:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8001224:	d049      	beq.n	80012ba <d_template_args_1+0xa6>
 8001226:	2100      	movs	r1, #0
 8001228:	2601      	movs	r6, #1
 800122a:	ad02      	add	r5, sp, #8
 800122c:	f845 1d04 	str.w	r1, [r5, #-4]!
 8001230:	3b49      	subs	r3, #73	; 0x49
 8001232:	2b0f      	cmp	r3, #15
 8001234:	d83a      	bhi.n	80012ac <d_template_args_1+0x98>
 8001236:	e8df f003 	tbb	[pc, r3]
 800123a:	3535      	.short	0x3535
 800123c:	39391a39 	.word	0x39391a39
 8001240:	39393939 	.word	0x39393939
 8001244:	39393939 	.word	0x39393939
 8001248:	0839      	.short	0x0839
 800124a:	3201      	adds	r2, #1
 800124c:	f8d4 8034 	ldr.w	r8, [r4, #52]	; 0x34
 8001250:	60e2      	str	r2, [r4, #12]
 8001252:	4620      	mov	r0, r4
 8001254:	6366      	str	r6, [r4, #52]	; 0x34
 8001256:	f7ff fde3 	bl	8000e20 <d_expression_1>
 800125a:	68e3      	ldr	r3, [r4, #12]
 800125c:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
 8001260:	781a      	ldrb	r2, [r3, #0]
 8001262:	2a45      	cmp	r2, #69	; 0x45
 8001264:	d026      	beq.n	80012b4 <d_template_args_1+0xa0>
 8001266:	2000      	movs	r0, #0
 8001268:	b002      	add	sp, #8
 800126a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800126e:	4620      	mov	r0, r4
 8001270:	f001 fade 	bl	8002830 <d_expr_primary>
 8001274:	2800      	cmp	r0, #0
 8001276:	d0f6      	beq.n	8001266 <d_template_args_1+0x52>
 8001278:	4602      	mov	r2, r0
 800127a:	2300      	movs	r3, #0
 800127c:	212f      	movs	r1, #47	; 0x2f
 800127e:	4620      	mov	r0, r4
 8001280:	f7fe ff64 	bl	800014c <d_make_comp>
 8001284:	6028      	str	r0, [r5, #0]
 8001286:	f100 0508 	add.w	r5, r0, #8
 800128a:	2800      	cmp	r0, #0
 800128c:	d0eb      	beq.n	8001266 <d_template_args_1+0x52>
 800128e:	68e2      	ldr	r2, [r4, #12]
 8001290:	7813      	ldrb	r3, [r2, #0]
 8001292:	2b45      	cmp	r3, #69	; 0x45
 8001294:	d1cc      	bne.n	8001230 <d_template_args_1+0x1c>
 8001296:	9801      	ldr	r0, [sp, #4]
 8001298:	3201      	adds	r2, #1
 800129a:	60e2      	str	r2, [r4, #12]
 800129c:	62e7      	str	r7, [r4, #44]	; 0x2c
 800129e:	b002      	add	sp, #8
 80012a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012a4:	4620      	mov	r0, r4
 80012a6:	f000 f813 	bl	80012d0 <d_template_args>
 80012aa:	e7e3      	b.n	8001274 <d_template_args_1+0x60>
 80012ac:	4620      	mov	r0, r4
 80012ae:	f000 f9d1 	bl	8001654 <d_type>
 80012b2:	e7df      	b.n	8001274 <d_template_args_1+0x60>
 80012b4:	3301      	adds	r3, #1
 80012b6:	60e3      	str	r3, [r4, #12]
 80012b8:	e7dc      	b.n	8001274 <d_template_args_1+0x60>
 80012ba:	2300      	movs	r3, #0
 80012bc:	3201      	adds	r2, #1
 80012be:	60c2      	str	r2, [r0, #12]
 80012c0:	212f      	movs	r1, #47	; 0x2f
 80012c2:	461a      	mov	r2, r3
 80012c4:	b002      	add	sp, #8
 80012c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012ca:	f7fe bf3f 	b.w	800014c <d_make_comp>
 80012ce:	bf00      	nop

080012d0 <d_template_args>:
 80012d0:	68c2      	ldr	r2, [r0, #12]
 80012d2:	7813      	ldrb	r3, [r2, #0]
 80012d4:	3b49      	subs	r3, #73	; 0x49
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d802      	bhi.n	80012e0 <d_template_args+0x10>
 80012da:	3201      	adds	r2, #1
 80012dc:	60c2      	str	r2, [r0, #12]
 80012de:	e799      	b.n	8001214 <d_template_args_1>
 80012e0:	2000      	movs	r0, #0
 80012e2:	4770      	bx	lr

080012e4 <d_name>:
 80012e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012e8:	68c2      	ldr	r2, [r0, #12]
 80012ea:	b085      	sub	sp, #20
 80012ec:	7813      	ldrb	r3, [r2, #0]
 80012ee:	4605      	mov	r5, r0
 80012f0:	3b4e      	subs	r3, #78	; 0x4e
 80012f2:	2b0c      	cmp	r3, #12
 80012f4:	d870      	bhi.n	80013d8 <d_name+0xf4>
 80012f6:	e8df f003 	tbb	[pc, r3]
 80012fa:	6f1e      	.short	0x6f1e
 80012fc:	5b6f6f6f 	.word	0x5b6f6f6f
 8001300:	6f6f176f 	.word	0x6f6f176f
 8001304:	6f6f      	.short	0x6f6f
 8001306:	07          	.byte	0x07
 8001307:	00          	.byte	0x00
 8001308:	3201      	adds	r2, #1
 800130a:	2100      	movs	r1, #0
 800130c:	60c2      	str	r2, [r0, #12]
 800130e:	f000 ffb1 	bl	8002274 <d_encoding>
 8001312:	68eb      	ldr	r3, [r5, #12]
 8001314:	4606      	mov	r6, r0
 8001316:	7819      	ldrb	r1, [r3, #0]
 8001318:	2945      	cmp	r1, #69	; 0x45
 800131a:	f000 8099 	beq.w	8001450 <d_name+0x16c>
 800131e:	2200      	movs	r2, #0
 8001320:	4610      	mov	r0, r2
 8001322:	b005      	add	sp, #20
 8001324:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001328:	f000 fe34 	bl	8001f94 <d_unqualified_name>
 800132c:	4602      	mov	r2, r0
 800132e:	4610      	mov	r0, r2
 8001330:	b005      	add	sp, #20
 8001332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001336:	3201      	adds	r2, #1
 8001338:	60c2      	str	r2, [r0, #12]
 800133a:	a903      	add	r1, sp, #12
 800133c:	2201      	movs	r2, #1
 800133e:	f7fe ff51 	bl	80001e4 <d_cv_qualifiers>
 8001342:	4681      	mov	r9, r0
 8001344:	2800      	cmp	r0, #0
 8001346:	d0ea      	beq.n	800131e <d_name+0x3a>
 8001348:	2100      	movs	r1, #0
 800134a:	4628      	mov	r0, r5
 800134c:	f7fe ffb0 	bl	80002b0 <d_ref_qualifier>
 8001350:	2700      	movs	r7, #0
 8001352:	4680      	mov	r8, r0
 8001354:	68ea      	ldr	r2, [r5, #12]
 8001356:	4ebc      	ldr	r6, [pc, #752]	; (8001648 <d_name+0x364>)
 8001358:	7814      	ldrb	r4, [r2, #0]
 800135a:	2c00      	cmp	r4, #0
 800135c:	f000 80ef 	beq.w	800153e <d_name+0x25a>
 8001360:	2c44      	cmp	r4, #68	; 0x44
 8001362:	f000 80d1 	beq.w	8001508 <d_name+0x224>
 8001366:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b1c      	cmp	r3, #28
 800136e:	f240 80a8 	bls.w	80014c2 <d_name+0x1de>
 8001372:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8001376:	2b19      	cmp	r3, #25
 8001378:	f240 80a8 	bls.w	80014cc <d_name+0x1e8>
 800137c:	2c55      	cmp	r4, #85	; 0x55
 800137e:	f000 80e5 	beq.w	800154c <d_name+0x268>
 8001382:	2c53      	cmp	r4, #83	; 0x53
 8001384:	f000 80cc 	beq.w	8001520 <d_name+0x23c>
 8001388:	2c49      	cmp	r4, #73	; 0x49
 800138a:	f000 80e1 	beq.w	8001550 <d_name+0x26c>
 800138e:	2c54      	cmp	r4, #84	; 0x54
 8001390:	f000 811c 	beq.w	80015cc <d_name+0x2e8>
 8001394:	2c45      	cmp	r4, #69	; 0x45
 8001396:	f000 8142 	beq.w	800161e <d_name+0x33a>
 800139a:	2c4d      	cmp	r4, #77	; 0x4d
 800139c:	f040 80cf 	bne.w	800153e <d_name+0x25a>
 80013a0:	2f00      	cmp	r7, #0
 80013a2:	f000 80cc 	beq.w	800153e <d_name+0x25a>
 80013a6:	1c53      	adds	r3, r2, #1
 80013a8:	60eb      	str	r3, [r5, #12]
 80013aa:	7854      	ldrb	r4, [r2, #1]
 80013ac:	461a      	mov	r2, r3
 80013ae:	e7d4      	b.n	800135a <d_name+0x76>
 80013b0:	7853      	ldrb	r3, [r2, #1]
 80013b2:	2b74      	cmp	r3, #116	; 0x74
 80013b4:	d031      	beq.n	800141a <d_name+0x136>
 80013b6:	2100      	movs	r1, #0
 80013b8:	f7ff f910 	bl	80005dc <d_substitution>
 80013bc:	68eb      	ldr	r3, [r5, #12]
 80013be:	4602      	mov	r2, r0
 80013c0:	7819      	ldrb	r1, [r3, #0]
 80013c2:	2949      	cmp	r1, #73	; 0x49
 80013c4:	d1b3      	bne.n	800132e <d_name+0x4a>
 80013c6:	3301      	adds	r3, #1
 80013c8:	60eb      	str	r3, [r5, #12]
 80013ca:	4628      	mov	r0, r5
 80013cc:	9201      	str	r2, [sp, #4]
 80013ce:	f7ff ff21 	bl	8001214 <d_template_args_1>
 80013d2:	9a01      	ldr	r2, [sp, #4]
 80013d4:	4603      	mov	r3, r0
 80013d6:	e017      	b.n	8001408 <d_name+0x124>
 80013d8:	f000 fddc 	bl	8001f94 <d_unqualified_name>
 80013dc:	68eb      	ldr	r3, [r5, #12]
 80013de:	4602      	mov	r2, r0
 80013e0:	7819      	ldrb	r1, [r3, #0]
 80013e2:	2949      	cmp	r1, #73	; 0x49
 80013e4:	d1a3      	bne.n	800132e <d_name+0x4a>
 80013e6:	2a00      	cmp	r2, #0
 80013e8:	d099      	beq.n	800131e <d_name+0x3a>
 80013ea:	6a29      	ldr	r1, [r5, #32]
 80013ec:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80013ee:	4281      	cmp	r1, r0
 80013f0:	da95      	bge.n	800131e <d_name+0x3a>
 80013f2:	69ec      	ldr	r4, [r5, #28]
 80013f4:	1c48      	adds	r0, r1, #1
 80013f6:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
 80013fa:	6228      	str	r0, [r5, #32]
 80013fc:	7819      	ldrb	r1, [r3, #0]
 80013fe:	3949      	subs	r1, #73	; 0x49
 8001400:	2901      	cmp	r1, #1
 8001402:	bf88      	it	hi
 8001404:	2300      	movhi	r3, #0
 8001406:	d9de      	bls.n	80013c6 <d_name+0xe2>
 8001408:	4628      	mov	r0, r5
 800140a:	2104      	movs	r1, #4
 800140c:	f7fe fe9e 	bl	800014c <d_make_comp>
 8001410:	4602      	mov	r2, r0
 8001412:	4610      	mov	r0, r2
 8001414:	b005      	add	sp, #20
 8001416:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800141a:	6943      	ldr	r3, [r0, #20]
 800141c:	6981      	ldr	r1, [r0, #24]
 800141e:	3202      	adds	r2, #2
 8001420:	428b      	cmp	r3, r1
 8001422:	60c2      	str	r2, [r0, #12]
 8001424:	f2c0 80a8 	blt.w	8001578 <d_name+0x294>
 8001428:	2400      	movs	r4, #0
 800142a:	4628      	mov	r0, r5
 800142c:	f000 fdb2 	bl	8001f94 <d_unqualified_name>
 8001430:	4622      	mov	r2, r4
 8001432:	4603      	mov	r3, r0
 8001434:	2101      	movs	r1, #1
 8001436:	4628      	mov	r0, r5
 8001438:	f7fe fe88 	bl	800014c <d_make_comp>
 800143c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800143e:	68eb      	ldr	r3, [r5, #12]
 8001440:	3103      	adds	r1, #3
 8001442:	6329      	str	r1, [r5, #48]	; 0x30
 8001444:	7819      	ldrb	r1, [r3, #0]
 8001446:	4602      	mov	r2, r0
 8001448:	2949      	cmp	r1, #73	; 0x49
 800144a:	f47f af70 	bne.w	800132e <d_name+0x4a>
 800144e:	e7ca      	b.n	80013e6 <d_name+0x102>
 8001450:	1c5a      	adds	r2, r3, #1
 8001452:	60ea      	str	r2, [r5, #12]
 8001454:	7859      	ldrb	r1, [r3, #1]
 8001456:	2973      	cmp	r1, #115	; 0x73
 8001458:	f000 80a0 	beq.w	800159c <d_name+0x2b8>
 800145c:	2964      	cmp	r1, #100	; 0x64
 800145e:	f000 80b9 	beq.w	80015d4 <d_name+0x2f0>
 8001462:	4628      	mov	r0, r5
 8001464:	f7ff ff3e 	bl	80012e4 <d_name>
 8001468:	4604      	mov	r4, r0
 800146a:	2800      	cmp	r0, #0
 800146c:	d079      	beq.n	8001562 <d_name+0x27e>
 800146e:	7803      	ldrb	r3, [r0, #0]
 8001470:	2b45      	cmp	r3, #69	; 0x45
 8001472:	f000 8091 	beq.w	8001598 <d_name+0x2b4>
 8001476:	2b47      	cmp	r3, #71	; 0x47
 8001478:	f000 808e 	beq.w	8001598 <d_name+0x2b4>
 800147c:	68eb      	ldr	r3, [r5, #12]
 800147e:	781a      	ldrb	r2, [r3, #0]
 8001480:	2a5f      	cmp	r2, #95	; 0x5f
 8001482:	f040 8089 	bne.w	8001598 <d_name+0x2b4>
 8001486:	f04f 37ff 	mov.w	r7, #4294967295
 800148a:	4628      	mov	r0, r5
 800148c:	3301      	adds	r3, #1
 800148e:	f840 3f0c 	str.w	r3, [r0, #12]!
 8001492:	f7fe ffab 	bl	80003ec <d_number.isra.0>
 8001496:	2800      	cmp	r0, #0
 8001498:	f6ff af41 	blt.w	800131e <d_name+0x3a>
 800149c:	1c7b      	adds	r3, r7, #1
 800149e:	d07b      	beq.n	8001598 <d_name+0x2b4>
 80014a0:	696b      	ldr	r3, [r5, #20]
 80014a2:	69aa      	ldr	r2, [r5, #24]
 80014a4:	4293      	cmp	r3, r2
 80014a6:	da5c      	bge.n	8001562 <d_name+0x27e>
 80014a8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80014ac:	6929      	ldr	r1, [r5, #16]
 80014ae:	3301      	adds	r3, #1
 80014b0:	0092      	lsls	r2, r2, #2
 80014b2:	616b      	str	r3, [r5, #20]
 80014b4:	188b      	adds	r3, r1, r2
 80014b6:	d055      	beq.n	8001564 <d_name+0x280>
 80014b8:	2046      	movs	r0, #70	; 0x46
 80014ba:	5488      	strb	r0, [r1, r2]
 80014bc:	609f      	str	r7, [r3, #8]
 80014be:	605c      	str	r4, [r3, #4]
 80014c0:	e050      	b.n	8001564 <d_name+0x280>
 80014c2:	fa26 f303 	lsr.w	r3, r6, r3
 80014c6:	07d9      	lsls	r1, r3, #31
 80014c8:	f57f af53 	bpl.w	8001372 <d_name+0x8e>
 80014cc:	4628      	mov	r0, r5
 80014ce:	f000 fd61 	bl	8001f94 <d_unqualified_name>
 80014d2:	b37f      	cbz	r7, 8001534 <d_name+0x250>
 80014d4:	2101      	movs	r1, #1
 80014d6:	4603      	mov	r3, r0
 80014d8:	463a      	mov	r2, r7
 80014da:	4628      	mov	r0, r5
 80014dc:	f7fe fe36 	bl	800014c <d_make_comp>
 80014e0:	4607      	mov	r7, r0
 80014e2:	2c53      	cmp	r4, #83	; 0x53
 80014e4:	d023      	beq.n	800152e <d_name+0x24a>
 80014e6:	68ea      	ldr	r2, [r5, #12]
 80014e8:	7814      	ldrb	r4, [r2, #0]
 80014ea:	2c45      	cmp	r4, #69	; 0x45
 80014ec:	f43f af3b 	beq.w	8001366 <d_name+0x82>
 80014f0:	b32f      	cbz	r7, 800153e <d_name+0x25a>
 80014f2:	6a2b      	ldr	r3, [r5, #32]
 80014f4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80014f6:	428b      	cmp	r3, r1
 80014f8:	da21      	bge.n	800153e <d_name+0x25a>
 80014fa:	69e9      	ldr	r1, [r5, #28]
 80014fc:	1c58      	adds	r0, r3, #1
 80014fe:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
 8001502:	6228      	str	r0, [r5, #32]
 8001504:	7814      	ldrb	r4, [r2, #0]
 8001506:	e728      	b.n	800135a <d_name+0x76>
 8001508:	7853      	ldrb	r3, [r2, #1]
 800150a:	4628      	mov	r0, r5
 800150c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8001510:	2b54      	cmp	r3, #84	; 0x54
 8001512:	d011      	beq.n	8001538 <d_name+0x254>
 8001514:	f000 fd3e 	bl	8001f94 <d_unqualified_name>
 8001518:	2f00      	cmp	r7, #0
 800151a:	d1db      	bne.n	80014d4 <d_name+0x1f0>
 800151c:	4607      	mov	r7, r0
 800151e:	e7e2      	b.n	80014e6 <d_name+0x202>
 8001520:	2101      	movs	r1, #1
 8001522:	4628      	mov	r0, r5
 8001524:	f7ff f85a 	bl	80005dc <d_substitution>
 8001528:	2f00      	cmp	r7, #0
 800152a:	d1d3      	bne.n	80014d4 <d_name+0x1f0>
 800152c:	4607      	mov	r7, r0
 800152e:	68ea      	ldr	r2, [r5, #12]
 8001530:	7814      	ldrb	r4, [r2, #0]
 8001532:	e712      	b.n	800135a <d_name+0x76>
 8001534:	4607      	mov	r7, r0
 8001536:	e7d4      	b.n	80014e2 <d_name+0x1fe>
 8001538:	f000 f88c 	bl	8001654 <d_type>
 800153c:	e7ec      	b.n	8001518 <d_name+0x234>
 800153e:	2200      	movs	r2, #0
 8001540:	4610      	mov	r0, r2
 8001542:	f8c9 2000 	str.w	r2, [r9]
 8001546:	b005      	add	sp, #20
 8001548:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800154c:	4628      	mov	r0, r5
 800154e:	e7e1      	b.n	8001514 <d_name+0x230>
 8001550:	2f00      	cmp	r7, #0
 8001552:	d0f4      	beq.n	800153e <d_name+0x25a>
 8001554:	3201      	adds	r2, #1
 8001556:	60ea      	str	r2, [r5, #12]
 8001558:	4628      	mov	r0, r5
 800155a:	f7ff fe5b 	bl	8001214 <d_template_args_1>
 800155e:	2104      	movs	r1, #4
 8001560:	e7b9      	b.n	80014d6 <d_name+0x1f2>
 8001562:	2300      	movs	r3, #0
 8001564:	4632      	mov	r2, r6
 8001566:	4628      	mov	r0, r5
 8001568:	2102      	movs	r1, #2
 800156a:	f7fe fdef 	bl	800014c <d_make_comp>
 800156e:	4602      	mov	r2, r0
 8001570:	4610      	mov	r0, r2
 8001572:	b005      	add	sp, #20
 8001574:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001578:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800157c:	6901      	ldr	r1, [r0, #16]
 800157e:	0092      	lsls	r2, r2, #2
 8001580:	3301      	adds	r3, #1
 8001582:	188c      	adds	r4, r1, r2
 8001584:	6143      	str	r3, [r0, #20]
 8001586:	f43f af50 	beq.w	800142a <d_name+0x146>
 800158a:	2600      	movs	r6, #0
 800158c:	2003      	movs	r0, #3
 800158e:	4b2f      	ldr	r3, [pc, #188]	; (800164c <d_name+0x368>)
 8001590:	548e      	strb	r6, [r1, r2]
 8001592:	60a0      	str	r0, [r4, #8]
 8001594:	6063      	str	r3, [r4, #4]
 8001596:	e748      	b.n	800142a <d_name+0x146>
 8001598:	4623      	mov	r3, r4
 800159a:	e7e3      	b.n	8001564 <d_name+0x280>
 800159c:	1c9a      	adds	r2, r3, #2
 800159e:	60ea      	str	r2, [r5, #12]
 80015a0:	789a      	ldrb	r2, [r3, #2]
 80015a2:	2a5f      	cmp	r2, #95	; 0x5f
 80015a4:	d032      	beq.n	800160c <d_name+0x328>
 80015a6:	696b      	ldr	r3, [r5, #20]
 80015a8:	69aa      	ldr	r2, [r5, #24]
 80015aa:	4293      	cmp	r3, r2
 80015ac:	dad9      	bge.n	8001562 <d_name+0x27e>
 80015ae:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80015b2:	6929      	ldr	r1, [r5, #16]
 80015b4:	3301      	adds	r3, #1
 80015b6:	0092      	lsls	r2, r2, #2
 80015b8:	616b      	str	r3, [r5, #20]
 80015ba:	188b      	adds	r3, r1, r2
 80015bc:	d0d2      	beq.n	8001564 <d_name+0x280>
 80015be:	2700      	movs	r7, #0
 80015c0:	240e      	movs	r4, #14
 80015c2:	4823      	ldr	r0, [pc, #140]	; (8001650 <d_name+0x36c>)
 80015c4:	548f      	strb	r7, [r1, r2]
 80015c6:	609c      	str	r4, [r3, #8]
 80015c8:	6058      	str	r0, [r3, #4]
 80015ca:	e7cb      	b.n	8001564 <d_name+0x280>
 80015cc:	4628      	mov	r0, r5
 80015ce:	f7fe ff6b 	bl	80004a8 <d_template_param>
 80015d2:	e7a1      	b.n	8001518 <d_name+0x234>
 80015d4:	3302      	adds	r3, #2
 80015d6:	60eb      	str	r3, [r5, #12]
 80015d8:	4628      	mov	r0, r5
 80015da:	f7fe ff49 	bl	8000470 <d_compact_number>
 80015de:	1e07      	subs	r7, r0, #0
 80015e0:	f6ff ae9d 	blt.w	800131e <d_name+0x3a>
 80015e4:	4628      	mov	r0, r5
 80015e6:	f7ff fe7d 	bl	80012e4 <d_name>
 80015ea:	4604      	mov	r4, r0
 80015ec:	2800      	cmp	r0, #0
 80015ee:	f43f af57 	beq.w	80014a0 <d_name+0x1bc>
 80015f2:	7803      	ldrb	r3, [r0, #0]
 80015f4:	2b45      	cmp	r3, #69	; 0x45
 80015f6:	f43f af53 	beq.w	80014a0 <d_name+0x1bc>
 80015fa:	2b47      	cmp	r3, #71	; 0x47
 80015fc:	f43f af50 	beq.w	80014a0 <d_name+0x1bc>
 8001600:	68eb      	ldr	r3, [r5, #12]
 8001602:	781a      	ldrb	r2, [r3, #0]
 8001604:	2a5f      	cmp	r2, #95	; 0x5f
 8001606:	f47f af4b 	bne.w	80014a0 <d_name+0x1bc>
 800160a:	e73e      	b.n	800148a <d_name+0x1a6>
 800160c:	4628      	mov	r0, r5
 800160e:	3303      	adds	r3, #3
 8001610:	f840 3f0c 	str.w	r3, [r0, #12]!
 8001614:	f7fe feea 	bl	80003ec <d_number.isra.0>
 8001618:	2800      	cmp	r0, #0
 800161a:	dac4      	bge.n	80015a6 <d_name+0x2c2>
 800161c:	e67f      	b.n	800131e <d_name+0x3a>
 800161e:	f8c9 7000 	str.w	r7, [r9]
 8001622:	2f00      	cmp	r7, #0
 8001624:	f43f ae7b 	beq.w	800131e <d_name+0x3a>
 8001628:	f1b8 0f00 	cmp.w	r8, #0
 800162c:	d004      	beq.n	8001638 <d_name+0x354>
 800162e:	9b03      	ldr	r3, [sp, #12]
 8001630:	f8cd 800c 	str.w	r8, [sp, #12]
 8001634:	f8c8 3004 	str.w	r3, [r8, #4]
 8001638:	7813      	ldrb	r3, [r2, #0]
 800163a:	2b45      	cmp	r3, #69	; 0x45
 800163c:	f47f ae6f 	bne.w	800131e <d_name+0x3a>
 8001640:	3201      	adds	r2, #1
 8001642:	60ea      	str	r2, [r5, #12]
 8001644:	9a03      	ldr	r2, [sp, #12]
 8001646:	e672      	b.n	800132e <d_name+0x4a>
 8001648:	100803ff 	.word	0x100803ff
 800164c:	0800d6e4 	.word	0x0800d6e4
 8001650:	0800d6d4 	.word	0x0800d6d4

08001654 <d_type>:
 8001654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001658:	68c2      	ldr	r2, [r0, #12]
 800165a:	b083      	sub	sp, #12
 800165c:	7813      	ldrb	r3, [r2, #0]
 800165e:	4604      	mov	r4, r0
 8001660:	2b72      	cmp	r3, #114	; 0x72
 8001662:	d058      	beq.n	8001716 <d_type+0xc2>
 8001664:	2b56      	cmp	r3, #86	; 0x56
 8001666:	d056      	beq.n	8001716 <d_type+0xc2>
 8001668:	2b4b      	cmp	r3, #75	; 0x4b
 800166a:	d054      	beq.n	8001716 <d_type+0xc2>
 800166c:	2b44      	cmp	r3, #68	; 0x44
 800166e:	f000 809f 	beq.w	80017b0 <d_type+0x15c>
 8001672:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8001676:	294a      	cmp	r1, #74	; 0x4a
 8001678:	f200 808a 	bhi.w	8001790 <d_type+0x13c>
 800167c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001680:	012a012a 	.word	0x012a012a
 8001684:	012a012a 	.word	0x012a012a
 8001688:	012a012a 	.word	0x012a012a
 800168c:	012a012a 	.word	0x012a012a
 8001690:	012a012a 	.word	0x012a012a
 8001694:	00880088 	.word	0x00880088
 8001698:	00880088 	.word	0x00880088
 800169c:	00880088 	.word	0x00880088
 80016a0:	020b0088 	.word	0x020b0088
 80016a4:	01520088 	.word	0x01520088
 80016a8:	00880088 	.word	0x00880088
 80016ac:	0160014c 	.word	0x0160014c
 80016b0:	00880088 	.word	0x00880088
 80016b4:	00880088 	.word	0x00880088
 80016b8:	016e0088 	.word	0x016e0088
 80016bc:	0186012a 	.word	0x0186012a
 80016c0:	008801c3 	.word	0x008801c3
 80016c4:	01a20194 	.word	0x01a20194
 80016c8:	01f301d1 	.word	0x01f301d1
 80016cc:	00880088 	.word	0x00880088
 80016d0:	00880088 	.word	0x00880088
 80016d4:	0088012a 	.word	0x0088012a
 80016d8:	00880088 	.word	0x00880088
 80016dc:	00880088 	.word	0x00880088
 80016e0:	010c0088 	.word	0x010c0088
 80016e4:	010c010c 	.word	0x010c010c
 80016e8:	010c010c 	.word	0x010c010c
 80016ec:	010c010c 	.word	0x010c010c
 80016f0:	010c010c 	.word	0x010c010c
 80016f4:	0088010c 	.word	0x0088010c
 80016f8:	010c010c 	.word	0x010c010c
 80016fc:	010c010c 	.word	0x010c010c
 8001700:	00880088 	.word	0x00880088
 8001704:	010c0088 	.word	0x010c0088
 8001708:	013e010c 	.word	0x013e010c
 800170c:	010c010c 	.word	0x010c010c
 8001710:	010c010c 	.word	0x010c010c
 8001714:	010c      	.short	0x010c
 8001716:	2200      	movs	r2, #0
 8001718:	a901      	add	r1, sp, #4
 800171a:	4620      	mov	r0, r4
 800171c:	f7fe fd62 	bl	80001e4 <d_cv_qualifiers>
 8001720:	4605      	mov	r5, r0
 8001722:	2800      	cmp	r0, #0
 8001724:	d034      	beq.n	8001790 <d_type+0x13c>
 8001726:	68e3      	ldr	r3, [r4, #12]
 8001728:	4620      	mov	r0, r4
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b46      	cmp	r3, #70	; 0x46
 800172e:	d034      	beq.n	800179a <d_type+0x146>
 8001730:	f7ff ff90 	bl	8001654 <d_type>
 8001734:	6028      	str	r0, [r5, #0]
 8001736:	b358      	cbz	r0, 8001790 <d_type+0x13c>
 8001738:	7803      	ldrb	r3, [r0, #0]
 800173a:	3b1f      	subs	r3, #31
 800173c:	2b01      	cmp	r3, #1
 800173e:	d930      	bls.n	80017a2 <d_type+0x14e>
 8001740:	9a01      	ldr	r2, [sp, #4]
 8001742:	b32a      	cbz	r2, 8001790 <d_type+0x13c>
 8001744:	6a23      	ldr	r3, [r4, #32]
 8001746:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001748:	428b      	cmp	r3, r1
 800174a:	da21      	bge.n	8001790 <d_type+0x13c>
 800174c:	69e0      	ldr	r0, [r4, #28]
 800174e:	1c59      	adds	r1, r3, #1
 8001750:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8001754:	9d01      	ldr	r5, [sp, #4]
 8001756:	6221      	str	r1, [r4, #32]
 8001758:	4628      	mov	r0, r5
 800175a:	b003      	add	sp, #12
 800175c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001760:	2301      	movs	r3, #1
 8001762:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8001764:	6343      	str	r3, [r0, #52]	; 0x34
 8001766:	f7ff fb5b 	bl	8000e20 <d_expression_1>
 800176a:	6365      	str	r5, [r4, #52]	; 0x34
 800176c:	4602      	mov	r2, r0
 800176e:	2300      	movs	r3, #0
 8001770:	2142      	movs	r1, #66	; 0x42
 8001772:	4620      	mov	r0, r4
 8001774:	f7fe fcea 	bl	800014c <d_make_comp>
 8001778:	4605      	mov	r5, r0
 800177a:	9001      	str	r0, [sp, #4]
 800177c:	b140      	cbz	r0, 8001790 <d_type+0x13c>
 800177e:	68e3      	ldr	r3, [r4, #12]
 8001780:	781a      	ldrb	r2, [r3, #0]
 8001782:	b12a      	cbz	r2, 8001790 <d_type+0x13c>
 8001784:	1c5a      	adds	r2, r3, #1
 8001786:	60e2      	str	r2, [r4, #12]
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b45      	cmp	r3, #69	; 0x45
 800178c:	f000 80aa 	beq.w	80018e4 <d_type+0x290>
 8001790:	2500      	movs	r5, #0
 8001792:	4628      	mov	r0, r5
 8001794:	b003      	add	sp, #12
 8001796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800179a:	f000 fd4b 	bl	8002234 <d_function_type>
 800179e:	6028      	str	r0, [r5, #0]
 80017a0:	e7c9      	b.n	8001736 <d_type+0xe2>
 80017a2:	9a01      	ldr	r2, [sp, #4]
 80017a4:	6843      	ldr	r3, [r0, #4]
 80017a6:	6042      	str	r2, [r0, #4]
 80017a8:	682a      	ldr	r2, [r5, #0]
 80017aa:	9201      	str	r2, [sp, #4]
 80017ac:	602b      	str	r3, [r5, #0]
 80017ae:	e7c7      	b.n	8001740 <d_type+0xec>
 80017b0:	7853      	ldrb	r3, [r2, #1]
 80017b2:	2b78      	cmp	r3, #120	; 0x78
 80017b4:	d0af      	beq.n	8001716 <d_type+0xc2>
 80017b6:	1c53      	adds	r3, r2, #1
 80017b8:	60c3      	str	r3, [r0, #12]
 80017ba:	7853      	ldrb	r3, [r2, #1]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0e7      	beq.n	8001790 <d_type+0x13c>
 80017c0:	1c93      	adds	r3, r2, #2
 80017c2:	60c3      	str	r3, [r0, #12]
 80017c4:	7853      	ldrb	r3, [r2, #1]
 80017c6:	3b46      	subs	r3, #70	; 0x46
 80017c8:	2b30      	cmp	r3, #48	; 0x30
 80017ca:	d8e1      	bhi.n	8001790 <d_type+0x13c>
 80017cc:	a101      	add	r1, pc, #4	; (adr r1, 80017d4 <d_type+0x180>)
 80017ce:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80017d2:	bf00      	nop
 80017d4:	08001cad 	.word	0x08001cad
 80017d8:	08001791 	.word	0x08001791
 80017dc:	08001791 	.word	0x08001791
 80017e0:	08001791 	.word	0x08001791
 80017e4:	08001791 	.word	0x08001791
 80017e8:	08001791 	.word	0x08001791
 80017ec:	08001791 	.word	0x08001791
 80017f0:	08001791 	.word	0x08001791
 80017f4:	08001791 	.word	0x08001791
 80017f8:	08001791 	.word	0x08001791
 80017fc:	08001791 	.word	0x08001791
 8001800:	08001791 	.word	0x08001791
 8001804:	08001791 	.word	0x08001791
 8001808:	08001791 	.word	0x08001791
 800180c:	08001761 	.word	0x08001761
 8001810:	08001791 	.word	0x08001791
 8001814:	08001791 	.word	0x08001791
 8001818:	08001791 	.word	0x08001791
 800181c:	08001791 	.word	0x08001791
 8001820:	08001791 	.word	0x08001791
 8001824:	08001791 	.word	0x08001791
 8001828:	08001791 	.word	0x08001791
 800182c:	08001791 	.word	0x08001791
 8001830:	08001791 	.word	0x08001791
 8001834:	08001791 	.word	0x08001791
 8001838:	08001791 	.word	0x08001791
 800183c:	08001791 	.word	0x08001791
 8001840:	08001c83 	.word	0x08001c83
 8001844:	08001791 	.word	0x08001791
 8001848:	08001c59 	.word	0x08001c59
 800184c:	08001c3b 	.word	0x08001c3b
 8001850:	08001c13 	.word	0x08001c13
 8001854:	08001be7 	.word	0x08001be7
 8001858:	08001791 	.word	0x08001791
 800185c:	08001bbb 	.word	0x08001bbb
 8001860:	08001b99 	.word	0x08001b99
 8001864:	08001791 	.word	0x08001791
 8001868:	08001791 	.word	0x08001791
 800186c:	08001791 	.word	0x08001791
 8001870:	08001791 	.word	0x08001791
 8001874:	08001b61 	.word	0x08001b61
 8001878:	08001791 	.word	0x08001791
 800187c:	08001b4b 	.word	0x08001b4b
 8001880:	08001791 	.word	0x08001791
 8001884:	08001791 	.word	0x08001791
 8001888:	08001b1f 	.word	0x08001b1f
 800188c:	08001761 	.word	0x08001761
 8001890:	08001791 	.word	0x08001791
 8001894:	08001ae9 	.word	0x08001ae9
 8001898:	6960      	ldr	r0, [r4, #20]
 800189a:	69a5      	ldr	r5, [r4, #24]
 800189c:	3b61      	subs	r3, #97	; 0x61
 800189e:	49bb      	ldr	r1, [pc, #748]	; (8001b8c <d_type+0x538>)
 80018a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80018a4:	42a8      	cmp	r0, r5
 80018a6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80018aa:	f280 8231 	bge.w	8001d10 <d_type+0x6bc>
 80018ae:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80018b2:	6926      	ldr	r6, [r4, #16]
 80018b4:	0089      	lsls	r1, r1, #2
 80018b6:	3001      	adds	r0, #1
 80018b8:	1875      	adds	r5, r6, r1
 80018ba:	6160      	str	r0, [r4, #20]
 80018bc:	f000 8228 	beq.w	8001d10 <d_type+0x6bc>
 80018c0:	2027      	movs	r0, #39	; 0x27
 80018c2:	5470      	strb	r0, [r6, r1]
 80018c4:	606b      	str	r3, [r5, #4]
 80018c6:	6859      	ldr	r1, [r3, #4]
 80018c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80018ca:	3201      	adds	r2, #1
 80018cc:	440b      	add	r3, r1
 80018ce:	60e2      	str	r2, [r4, #12]
 80018d0:	6323      	str	r3, [r4, #48]	; 0x30
 80018d2:	e75e      	b.n	8001792 <d_type+0x13e>
 80018d4:	4620      	mov	r0, r4
 80018d6:	f7ff fd05 	bl	80012e4 <d_name>
 80018da:	4605      	mov	r5, r0
 80018dc:	9001      	str	r0, [sp, #4]
 80018de:	2d00      	cmp	r5, #0
 80018e0:	f43f af56 	beq.w	8001790 <d_type+0x13c>
 80018e4:	6a23      	ldr	r3, [r4, #32]
 80018e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80018e8:	4293      	cmp	r3, r2
 80018ea:	f6bf af51 	bge.w	8001790 <d_type+0x13c>
 80018ee:	69e1      	ldr	r1, [r4, #28]
 80018f0:	1c5a      	adds	r2, r3, #1
 80018f2:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 80018f6:	9d01      	ldr	r5, [sp, #4]
 80018f8:	6222      	str	r2, [r4, #32]
 80018fa:	e74a      	b.n	8001792 <d_type+0x13e>
 80018fc:	3201      	adds	r2, #1
 80018fe:	60e2      	str	r2, [r4, #12]
 8001900:	4620      	mov	r0, r4
 8001902:	f7fe fdf3 	bl	80004ec <d_source_name>
 8001906:	2300      	movs	r3, #0
 8001908:	4602      	mov	r2, r0
 800190a:	2128      	movs	r1, #40	; 0x28
 800190c:	4620      	mov	r0, r4
 800190e:	f7fe fc1d 	bl	800014c <d_make_comp>
 8001912:	4605      	mov	r5, r0
 8001914:	9001      	str	r0, [sp, #4]
 8001916:	e7e2      	b.n	80018de <d_type+0x28a>
 8001918:	4620      	mov	r0, r4
 800191a:	f000 fc8b 	bl	8002234 <d_function_type>
 800191e:	4605      	mov	r5, r0
 8001920:	9001      	str	r0, [sp, #4]
 8001922:	e7dc      	b.n	80018de <d_type+0x28a>
 8001924:	3201      	adds	r2, #1
 8001926:	60e2      	str	r2, [r4, #12]
 8001928:	4620      	mov	r0, r4
 800192a:	f7ff fe93 	bl	8001654 <d_type>
 800192e:	2300      	movs	r3, #0
 8001930:	4602      	mov	r2, r0
 8001932:	2125      	movs	r1, #37	; 0x25
 8001934:	4620      	mov	r0, r4
 8001936:	f7fe fc09 	bl	800014c <d_make_comp>
 800193a:	4605      	mov	r5, r0
 800193c:	9001      	str	r0, [sp, #4]
 800193e:	e7ce      	b.n	80018de <d_type+0x28a>
 8001940:	3201      	adds	r2, #1
 8001942:	60e2      	str	r2, [r4, #12]
 8001944:	4620      	mov	r0, r4
 8001946:	f7ff fe85 	bl	8001654 <d_type>
 800194a:	2300      	movs	r3, #0
 800194c:	4602      	mov	r2, r0
 800194e:	2126      	movs	r1, #38	; 0x26
 8001950:	4620      	mov	r0, r4
 8001952:	f7fe fbfb 	bl	800014c <d_make_comp>
 8001956:	4605      	mov	r5, r0
 8001958:	9001      	str	r0, [sp, #4]
 800195a:	e7c0      	b.n	80018de <d_type+0x28a>
 800195c:	3201      	adds	r2, #1
 800195e:	60e2      	str	r2, [r4, #12]
 8001960:	4620      	mov	r0, r4
 8001962:	f7ff fe77 	bl	8001654 <d_type>
 8001966:	4605      	mov	r5, r0
 8001968:	2800      	cmp	r0, #0
 800196a:	f000 80bb 	beq.w	8001ae4 <d_type+0x490>
 800196e:	4620      	mov	r0, r4
 8001970:	f7ff fe70 	bl	8001654 <d_type>
 8001974:	2800      	cmp	r0, #0
 8001976:	f000 80b5 	beq.w	8001ae4 <d_type+0x490>
 800197a:	4603      	mov	r3, r0
 800197c:	462a      	mov	r2, r5
 800197e:	212b      	movs	r1, #43	; 0x2b
 8001980:	4620      	mov	r0, r4
 8001982:	f7fe fbe3 	bl	800014c <d_make_comp>
 8001986:	4605      	mov	r5, r0
 8001988:	9501      	str	r5, [sp, #4]
 800198a:	e7a8      	b.n	80018de <d_type+0x28a>
 800198c:	3201      	adds	r2, #1
 800198e:	60e2      	str	r2, [r4, #12]
 8001990:	4620      	mov	r0, r4
 8001992:	f7ff fe5f 	bl	8001654 <d_type>
 8001996:	2300      	movs	r3, #0
 8001998:	4602      	mov	r2, r0
 800199a:	2124      	movs	r1, #36	; 0x24
 800199c:	4620      	mov	r0, r4
 800199e:	f7fe fbd5 	bl	800014c <d_make_comp>
 80019a2:	4605      	mov	r5, r0
 80019a4:	9001      	str	r0, [sp, #4]
 80019a6:	e79a      	b.n	80018de <d_type+0x28a>
 80019a8:	3201      	adds	r2, #1
 80019aa:	60e2      	str	r2, [r4, #12]
 80019ac:	4620      	mov	r0, r4
 80019ae:	f7ff fe51 	bl	8001654 <d_type>
 80019b2:	2300      	movs	r3, #0
 80019b4:	4602      	mov	r2, r0
 80019b6:	2123      	movs	r1, #35	; 0x23
 80019b8:	4620      	mov	r0, r4
 80019ba:	f7fe fbc7 	bl	800014c <d_make_comp>
 80019be:	4605      	mov	r5, r0
 80019c0:	9001      	str	r0, [sp, #4]
 80019c2:	e78c      	b.n	80018de <d_type+0x28a>
 80019c4:	7853      	ldrb	r3, [r2, #1]
 80019c6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80019ca:	2a09      	cmp	r2, #9
 80019cc:	d905      	bls.n	80019da <d_type+0x386>
 80019ce:	2b5f      	cmp	r3, #95	; 0x5f
 80019d0:	d003      	beq.n	80019da <d_type+0x386>
 80019d2:	3b41      	subs	r3, #65	; 0x41
 80019d4:	2b19      	cmp	r3, #25
 80019d6:	f200 81ba 	bhi.w	8001d4e <d_type+0x6fa>
 80019da:	2100      	movs	r1, #0
 80019dc:	4620      	mov	r0, r4
 80019de:	f7fe fdfd 	bl	80005dc <d_substitution>
 80019e2:	68e3      	ldr	r3, [r4, #12]
 80019e4:	9001      	str	r0, [sp, #4]
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	4605      	mov	r5, r0
 80019ea:	2b49      	cmp	r3, #73	; 0x49
 80019ec:	f47f aed1 	bne.w	8001792 <d_type+0x13e>
 80019f0:	4620      	mov	r0, r4
 80019f2:	f7ff fc6d 	bl	80012d0 <d_template_args>
 80019f6:	462a      	mov	r2, r5
 80019f8:	4603      	mov	r3, r0
 80019fa:	2104      	movs	r1, #4
 80019fc:	4620      	mov	r0, r4
 80019fe:	f7fe fba5 	bl	800014c <d_make_comp>
 8001a02:	4605      	mov	r5, r0
 8001a04:	e7c0      	b.n	8001988 <d_type+0x334>
 8001a06:	3201      	adds	r2, #1
 8001a08:	60e2      	str	r2, [r4, #12]
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	f7ff fe22 	bl	8001654 <d_type>
 8001a10:	2300      	movs	r3, #0
 8001a12:	4602      	mov	r2, r0
 8001a14:	2122      	movs	r1, #34	; 0x22
 8001a16:	4620      	mov	r0, r4
 8001a18:	f7fe fb98 	bl	800014c <d_make_comp>
 8001a1c:	4605      	mov	r5, r0
 8001a1e:	9001      	str	r0, [sp, #4]
 8001a20:	e75d      	b.n	80018de <d_type+0x28a>
 8001a22:	4620      	mov	r0, r4
 8001a24:	f7fe fd40 	bl	80004a8 <d_template_param>
 8001a28:	68e6      	ldr	r6, [r4, #12]
 8001a2a:	9001      	str	r0, [sp, #4]
 8001a2c:	7833      	ldrb	r3, [r6, #0]
 8001a2e:	4605      	mov	r5, r0
 8001a30:	2b49      	cmp	r3, #73	; 0x49
 8001a32:	f47f af54 	bne.w	80018de <d_type+0x28a>
 8001a36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f040 81a0 	bne.w	8001d7e <d_type+0x72a>
 8001a3e:	2800      	cmp	r0, #0
 8001a40:	f43f aea6 	beq.w	8001790 <d_type+0x13c>
 8001a44:	6a23      	ldr	r3, [r4, #32]
 8001a46:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	f6bf aea1 	bge.w	8001790 <d_type+0x13c>
 8001a4e:	69e1      	ldr	r1, [r4, #28]
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8001a56:	6222      	str	r2, [r4, #32]
 8001a58:	4620      	mov	r0, r4
 8001a5a:	9d01      	ldr	r5, [sp, #4]
 8001a5c:	f7ff fc38 	bl	80012d0 <d_template_args>
 8001a60:	462a      	mov	r2, r5
 8001a62:	4603      	mov	r3, r0
 8001a64:	e7c9      	b.n	80019fa <d_type+0x3a6>
 8001a66:	3201      	adds	r2, #1
 8001a68:	60e2      	str	r2, [r4, #12]
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	f7fe fd3e 	bl	80004ec <d_source_name>
 8001a70:	68e3      	ldr	r3, [r4, #12]
 8001a72:	9001      	str	r0, [sp, #4]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	4605      	mov	r5, r0
 8001a78:	2b49      	cmp	r3, #73	; 0x49
 8001a7a:	f000 8175 	beq.w	8001d68 <d_type+0x714>
 8001a7e:	4620      	mov	r0, r4
 8001a80:	f7ff fde8 	bl	8001654 <d_type>
 8001a84:	9b01      	ldr	r3, [sp, #4]
 8001a86:	4602      	mov	r2, r0
 8001a88:	2121      	movs	r1, #33	; 0x21
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	f7fe fb5e 	bl	800014c <d_make_comp>
 8001a90:	4605      	mov	r5, r0
 8001a92:	9001      	str	r0, [sp, #4]
 8001a94:	e723      	b.n	80018de <d_type+0x28a>
 8001a96:	1c51      	adds	r1, r2, #1
 8001a98:	60e1      	str	r1, [r4, #12]
 8001a9a:	7853      	ldrb	r3, [r2, #1]
 8001a9c:	2b5f      	cmp	r3, #95	; 0x5f
 8001a9e:	f000 813b 	beq.w	8001d18 <d_type+0x6c4>
 8001aa2:	3b30      	subs	r3, #48	; 0x30
 8001aa4:	2b09      	cmp	r3, #9
 8001aa6:	f200 8145 	bhi.w	8001d34 <d_type+0x6e0>
 8001aaa:	460b      	mov	r3, r1
 8001aac:	3301      	adds	r3, #1
 8001aae:	60e3      	str	r3, [r4, #12]
 8001ab0:	781a      	ldrb	r2, [r3, #0]
 8001ab2:	3a30      	subs	r2, #48	; 0x30
 8001ab4:	2a09      	cmp	r2, #9
 8001ab6:	d9f9      	bls.n	8001aac <d_type+0x458>
 8001ab8:	6962      	ldr	r2, [r4, #20]
 8001aba:	69a0      	ldr	r0, [r4, #24]
 8001abc:	4282      	cmp	r2, r0
 8001abe:	da11      	bge.n	8001ae4 <d_type+0x490>
 8001ac0:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 8001ac4:	6926      	ldr	r6, [r4, #16]
 8001ac6:	0080      	lsls	r0, r0, #2
 8001ac8:	3201      	adds	r2, #1
 8001aca:	1835      	adds	r5, r6, r0
 8001acc:	6162      	str	r2, [r4, #20]
 8001ace:	d009      	beq.n	8001ae4 <d_type+0x490>
 8001ad0:	1a5a      	subs	r2, r3, r1
 8001ad2:	d007      	beq.n	8001ae4 <d_type+0x490>
 8001ad4:	2700      	movs	r7, #0
 8001ad6:	5437      	strb	r7, [r6, r0]
 8001ad8:	6069      	str	r1, [r5, #4]
 8001ada:	60aa      	str	r2, [r5, #8]
 8001adc:	781a      	ldrb	r2, [r3, #0]
 8001ade:	2a5f      	cmp	r2, #95	; 0x5f
 8001ae0:	f000 8187 	beq.w	8001df2 <d_type+0x79e>
 8001ae4:	2500      	movs	r5, #0
 8001ae6:	e74f      	b.n	8001988 <d_type+0x334>
 8001ae8:	7893      	ldrb	r3, [r2, #2]
 8001aea:	2b5f      	cmp	r3, #95	; 0x5f
 8001aec:	f000 8177 	beq.w	8001dde <d_type+0x78a>
 8001af0:	f7fe fca6 	bl	8000440 <d_number_component>
 8001af4:	4605      	mov	r5, r0
 8001af6:	2d00      	cmp	r5, #0
 8001af8:	f43f af46 	beq.w	8001988 <d_type+0x334>
 8001afc:	68e3      	ldr	r3, [r4, #12]
 8001afe:	781a      	ldrb	r2, [r3, #0]
 8001b00:	2a5f      	cmp	r2, #95	; 0x5f
 8001b02:	d1ef      	bne.n	8001ae4 <d_type+0x490>
 8001b04:	3301      	adds	r3, #1
 8001b06:	60e3      	str	r3, [r4, #12]
 8001b08:	4620      	mov	r0, r4
 8001b0a:	f7ff fda3 	bl	8001654 <d_type>
 8001b0e:	462a      	mov	r2, r5
 8001b10:	4603      	mov	r3, r0
 8001b12:	212d      	movs	r1, #45	; 0x2d
 8001b14:	4620      	mov	r0, r4
 8001b16:	f7fe fb19 	bl	800014c <d_make_comp>
 8001b1a:	4605      	mov	r5, r0
 8001b1c:	e734      	b.n	8001988 <d_type+0x334>
 8001b1e:	6942      	ldr	r2, [r0, #20]
 8001b20:	6983      	ldr	r3, [r0, #24]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	f280 80f4 	bge.w	8001d10 <d_type+0x6bc>
 8001b28:	230c      	movs	r3, #12
 8001b2a:	fb03 f302 	mul.w	r3, r3, r2
 8001b2e:	6901      	ldr	r1, [r0, #16]
 8001b30:	3201      	adds	r2, #1
 8001b32:	18cd      	adds	r5, r1, r3
 8001b34:	6142      	str	r2, [r0, #20]
 8001b36:	f000 80eb 	beq.w	8001d10 <d_type+0x6bc>
 8001b3a:	2027      	movs	r0, #39	; 0x27
 8001b3c:	4a14      	ldr	r2, [pc, #80]	; (8001b90 <d_type+0x53c>)
 8001b3e:	54c8      	strb	r0, [r1, r3]
 8001b40:	606a      	str	r2, [r5, #4]
 8001b42:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b44:	3308      	adds	r3, #8
 8001b46:	6323      	str	r3, [r4, #48]	; 0x30
 8001b48:	e623      	b.n	8001792 <d_type+0x13e>
 8001b4a:	f7ff fd83 	bl	8001654 <d_type>
 8001b4e:	2300      	movs	r3, #0
 8001b50:	4602      	mov	r2, r0
 8001b52:	214a      	movs	r1, #74	; 0x4a
 8001b54:	4620      	mov	r0, r4
 8001b56:	f7fe faf9 	bl	800014c <d_make_comp>
 8001b5a:	4605      	mov	r5, r0
 8001b5c:	9001      	str	r0, [sp, #4]
 8001b5e:	e6be      	b.n	80018de <d_type+0x28a>
 8001b60:	6942      	ldr	r2, [r0, #20]
 8001b62:	6983      	ldr	r3, [r0, #24]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	f280 80d3 	bge.w	8001d10 <d_type+0x6bc>
 8001b6a:	230c      	movs	r3, #12
 8001b6c:	fb03 f302 	mul.w	r3, r3, r2
 8001b70:	6901      	ldr	r1, [r0, #16]
 8001b72:	3201      	adds	r2, #1
 8001b74:	18cd      	adds	r5, r1, r3
 8001b76:	6142      	str	r2, [r0, #20]
 8001b78:	f000 80ca 	beq.w	8001d10 <d_type+0x6bc>
 8001b7c:	2027      	movs	r0, #39	; 0x27
 8001b7e:	4a05      	ldr	r2, [pc, #20]	; (8001b94 <d_type+0x540>)
 8001b80:	54c8      	strb	r0, [r1, r3]
 8001b82:	606a      	str	r2, [r5, #4]
 8001b84:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b86:	3311      	adds	r3, #17
 8001b88:	6323      	str	r3, [r4, #48]	; 0x30
 8001b8a:	e602      	b.n	8001792 <d_type+0x13e>
 8001b8c:	0800cc64 	.word	0x0800cc64
 8001b90:	0800cebc 	.word	0x0800cebc
 8001b94:	0800cee4 	.word	0x0800cee4
 8001b98:	6942      	ldr	r2, [r0, #20]
 8001b9a:	6983      	ldr	r3, [r0, #24]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	f280 80b7 	bge.w	8001d10 <d_type+0x6bc>
 8001ba2:	230c      	movs	r3, #12
 8001ba4:	fb03 f302 	mul.w	r3, r3, r2
 8001ba8:	6901      	ldr	r1, [r0, #16]
 8001baa:	3201      	adds	r2, #1
 8001bac:	18cd      	adds	r5, r1, r3
 8001bae:	6142      	str	r2, [r0, #20]
 8001bb0:	f000 80ae 	beq.w	8001d10 <d_type+0x6bc>
 8001bb4:	2027      	movs	r0, #39	; 0x27
 8001bb6:	4a90      	ldr	r2, [pc, #576]	; (8001df8 <d_type+0x7a4>)
 8001bb8:	e7c1      	b.n	8001b3e <d_type+0x4ea>
 8001bba:	6942      	ldr	r2, [r0, #20]
 8001bbc:	6983      	ldr	r3, [r0, #24]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	f280 80a6 	bge.w	8001d10 <d_type+0x6bc>
 8001bc4:	230c      	movs	r3, #12
 8001bc6:	fb03 f302 	mul.w	r3, r3, r2
 8001bca:	6901      	ldr	r1, [r0, #16]
 8001bcc:	3201      	adds	r2, #1
 8001bce:	18cd      	adds	r5, r1, r3
 8001bd0:	6142      	str	r2, [r0, #20]
 8001bd2:	f000 809d 	beq.w	8001d10 <d_type+0x6bc>
 8001bd6:	2027      	movs	r0, #39	; 0x27
 8001bd8:	4a88      	ldr	r2, [pc, #544]	; (8001dfc <d_type+0x7a8>)
 8001bda:	54c8      	strb	r0, [r1, r3]
 8001bdc:	606a      	str	r2, [r5, #4]
 8001bde:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001be0:	3304      	adds	r3, #4
 8001be2:	6323      	str	r3, [r4, #48]	; 0x30
 8001be4:	e5d5      	b.n	8001792 <d_type+0x13e>
 8001be6:	6942      	ldr	r2, [r0, #20]
 8001be8:	6983      	ldr	r3, [r0, #24]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	f280 8090 	bge.w	8001d10 <d_type+0x6bc>
 8001bf0:	230c      	movs	r3, #12
 8001bf2:	fb03 f302 	mul.w	r3, r3, r2
 8001bf6:	6901      	ldr	r1, [r0, #16]
 8001bf8:	3201      	adds	r2, #1
 8001bfa:	18cd      	adds	r5, r1, r3
 8001bfc:	6142      	str	r2, [r0, #20]
 8001bfe:	f000 8087 	beq.w	8001d10 <d_type+0x6bc>
 8001c02:	2027      	movs	r0, #39	; 0x27
 8001c04:	4a7e      	ldr	r2, [pc, #504]	; (8001e00 <d_type+0x7ac>)
 8001c06:	54c8      	strb	r0, [r1, r3]
 8001c08:	606a      	str	r2, [r5, #4]
 8001c0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c0c:	3309      	adds	r3, #9
 8001c0e:	6323      	str	r3, [r4, #48]	; 0x30
 8001c10:	e5bf      	b.n	8001792 <d_type+0x13e>
 8001c12:	6942      	ldr	r2, [r0, #20]
 8001c14:	6983      	ldr	r3, [r0, #24]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	da7a      	bge.n	8001d10 <d_type+0x6bc>
 8001c1a:	230c      	movs	r3, #12
 8001c1c:	fb03 f302 	mul.w	r3, r3, r2
 8001c20:	6901      	ldr	r1, [r0, #16]
 8001c22:	3201      	adds	r2, #1
 8001c24:	18cd      	adds	r5, r1, r3
 8001c26:	6142      	str	r2, [r0, #20]
 8001c28:	d072      	beq.n	8001d10 <d_type+0x6bc>
 8001c2a:	2027      	movs	r0, #39	; 0x27
 8001c2c:	4a75      	ldr	r2, [pc, #468]	; (8001e04 <d_type+0x7b0>)
 8001c2e:	54c8      	strb	r0, [r1, r3]
 8001c30:	606a      	str	r2, [r5, #4]
 8001c32:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c34:	330a      	adds	r3, #10
 8001c36:	6323      	str	r3, [r4, #48]	; 0x30
 8001c38:	e5ab      	b.n	8001792 <d_type+0x13e>
 8001c3a:	6942      	ldr	r2, [r0, #20]
 8001c3c:	6983      	ldr	r3, [r0, #24]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	da66      	bge.n	8001d10 <d_type+0x6bc>
 8001c42:	230c      	movs	r3, #12
 8001c44:	fb03 f302 	mul.w	r3, r3, r2
 8001c48:	6901      	ldr	r1, [r0, #16]
 8001c4a:	3201      	adds	r2, #1
 8001c4c:	18cd      	adds	r5, r1, r3
 8001c4e:	6142      	str	r2, [r0, #20]
 8001c50:	d05e      	beq.n	8001d10 <d_type+0x6bc>
 8001c52:	2027      	movs	r0, #39	; 0x27
 8001c54:	4a6c      	ldr	r2, [pc, #432]	; (8001e08 <d_type+0x7b4>)
 8001c56:	e7d6      	b.n	8001c06 <d_type+0x5b2>
 8001c58:	6942      	ldr	r2, [r0, #20]
 8001c5a:	6983      	ldr	r3, [r0, #24]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	f6bf ad97 	bge.w	8001790 <d_type+0x13c>
 8001c62:	230c      	movs	r3, #12
 8001c64:	fb03 f302 	mul.w	r3, r3, r2
 8001c68:	6901      	ldr	r1, [r0, #16]
 8001c6a:	3201      	adds	r2, #1
 8001c6c:	18cd      	adds	r5, r1, r3
 8001c6e:	6142      	str	r2, [r0, #20]
 8001c70:	f43f ad8f 	beq.w	8001792 <d_type+0x13e>
 8001c74:	2400      	movs	r4, #0
 8001c76:	200e      	movs	r0, #14
 8001c78:	4a64      	ldr	r2, [pc, #400]	; (8001e0c <d_type+0x7b8>)
 8001c7a:	54cc      	strb	r4, [r1, r3]
 8001c7c:	60a8      	str	r0, [r5, #8]
 8001c7e:	606a      	str	r2, [r5, #4]
 8001c80:	e587      	b.n	8001792 <d_type+0x13e>
 8001c82:	6942      	ldr	r2, [r0, #20]
 8001c84:	6983      	ldr	r3, [r0, #24]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	f6bf ad82 	bge.w	8001790 <d_type+0x13c>
 8001c8c:	230c      	movs	r3, #12
 8001c8e:	fb03 f302 	mul.w	r3, r3, r2
 8001c92:	6901      	ldr	r1, [r0, #16]
 8001c94:	3201      	adds	r2, #1
 8001c96:	18cd      	adds	r5, r1, r3
 8001c98:	6142      	str	r2, [r0, #20]
 8001c9a:	f43f ad7a 	beq.w	8001792 <d_type+0x13e>
 8001c9e:	2400      	movs	r4, #0
 8001ca0:	2004      	movs	r0, #4
 8001ca2:	4a5b      	ldr	r2, [pc, #364]	; (8001e10 <d_type+0x7bc>)
 8001ca4:	54cc      	strb	r4, [r1, r3]
 8001ca6:	60a8      	str	r0, [r5, #8]
 8001ca8:	606a      	str	r2, [r5, #4]
 8001caa:	e572      	b.n	8001792 <d_type+0x13e>
 8001cac:	6943      	ldr	r3, [r0, #20]
 8001cae:	6981      	ldr	r1, [r0, #24]
 8001cb0:	428b      	cmp	r3, r1
 8001cb2:	da7a      	bge.n	8001daa <d_type+0x756>
 8001cb4:	262c      	movs	r6, #44	; 0x2c
 8001cb6:	6900      	ldr	r0, [r0, #16]
 8001cb8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8001cbc:	0089      	lsls	r1, r1, #2
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	1845      	adds	r5, r0, r1
 8001cc2:	6163      	str	r3, [r4, #20]
 8001cc4:	9501      	str	r5, [sp, #4]
 8001cc6:	5446      	strb	r6, [r0, r1]
 8001cc8:	7893      	ldrb	r3, [r2, #2]
 8001cca:	3b30      	subs	r3, #48	; 0x30
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b09      	cmp	r3, #9
 8001cd0:	bf94      	ite	ls
 8001cd2:	2301      	movls	r3, #1
 8001cd4:	2300      	movhi	r3, #0
 8001cd6:	812b      	strh	r3, [r5, #8]
 8001cd8:	d97b      	bls.n	8001dd2 <d_type+0x77e>
 8001cda:	4620      	mov	r0, r4
 8001cdc:	f7ff fcba 	bl	8001654 <d_type>
 8001ce0:	9b01      	ldr	r3, [sp, #4]
 8001ce2:	6068      	str	r0, [r5, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f43f ad52 	beq.w	8001790 <d_type+0x13c>
 8001cec:	f104 000c 	add.w	r0, r4, #12
 8001cf0:	f7fe fb7c 	bl	80003ec <d_number.isra.0>
 8001cf4:	68e2      	ldr	r2, [r4, #12]
 8001cf6:	7813      	ldrb	r3, [r2, #0]
 8001cf8:	b113      	cbz	r3, 8001d00 <d_type+0x6ac>
 8001cfa:	1c53      	adds	r3, r2, #1
 8001cfc:	60e3      	str	r3, [r4, #12]
 8001cfe:	7813      	ldrb	r3, [r2, #0]
 8001d00:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
 8001d04:	fab3 f383 	clz	r3, r3
 8001d08:	9d01      	ldr	r5, [sp, #4]
 8001d0a:	095b      	lsrs	r3, r3, #5
 8001d0c:	816b      	strh	r3, [r5, #10]
 8001d0e:	e540      	b.n	8001792 <d_type+0x13e>
 8001d10:	2300      	movs	r3, #0
 8001d12:	9301      	str	r3, [sp, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	deff      	udf	#255	; 0xff
 8001d18:	2500      	movs	r5, #0
 8001d1a:	3101      	adds	r1, #1
 8001d1c:	60e1      	str	r1, [r4, #12]
 8001d1e:	4620      	mov	r0, r4
 8001d20:	f7ff fc98 	bl	8001654 <d_type>
 8001d24:	462a      	mov	r2, r5
 8001d26:	4603      	mov	r3, r0
 8001d28:	212a      	movs	r1, #42	; 0x2a
 8001d2a:	4620      	mov	r0, r4
 8001d2c:	f7fe fa0e 	bl	800014c <d_make_comp>
 8001d30:	4605      	mov	r5, r0
 8001d32:	e629      	b.n	8001988 <d_type+0x334>
 8001d34:	2301      	movs	r3, #1
 8001d36:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001d38:	4620      	mov	r0, r4
 8001d3a:	6363      	str	r3, [r4, #52]	; 0x34
 8001d3c:	f7ff f870 	bl	8000e20 <d_expression_1>
 8001d40:	6365      	str	r5, [r4, #52]	; 0x34
 8001d42:	4605      	mov	r5, r0
 8001d44:	2800      	cmp	r0, #0
 8001d46:	f43f aecd 	beq.w	8001ae4 <d_type+0x490>
 8001d4a:	68e3      	ldr	r3, [r4, #12]
 8001d4c:	e6c6      	b.n	8001adc <d_type+0x488>
 8001d4e:	4620      	mov	r0, r4
 8001d50:	f7ff fac8 	bl	80012e4 <d_name>
 8001d54:	4605      	mov	r5, r0
 8001d56:	9001      	str	r0, [sp, #4]
 8001d58:	2800      	cmp	r0, #0
 8001d5a:	f43f ad19 	beq.w	8001790 <d_type+0x13c>
 8001d5e:	7803      	ldrb	r3, [r0, #0]
 8001d60:	2b18      	cmp	r3, #24
 8001d62:	f47f adbf 	bne.w	80018e4 <d_type+0x290>
 8001d66:	e514      	b.n	8001792 <d_type+0x13e>
 8001d68:	4620      	mov	r0, r4
 8001d6a:	f7ff fab1 	bl	80012d0 <d_template_args>
 8001d6e:	462a      	mov	r2, r5
 8001d70:	4603      	mov	r3, r0
 8001d72:	2104      	movs	r1, #4
 8001d74:	4620      	mov	r0, r4
 8001d76:	f7fe f9e9 	bl	800014c <d_make_comp>
 8001d7a:	9001      	str	r0, [sp, #4]
 8001d7c:	e67f      	b.n	8001a7e <d_type+0x42a>
 8001d7e:	4620      	mov	r0, r4
 8001d80:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8001d84:	f8d4 8020 	ldr.w	r8, [r4, #32]
 8001d88:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8001d8a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001d8c:	f7ff faa0 	bl	80012d0 <d_template_args>
 8001d90:	68e2      	ldr	r2, [r4, #12]
 8001d92:	7812      	ldrb	r2, [r2, #0]
 8001d94:	2a49      	cmp	r2, #73	; 0x49
 8001d96:	d00b      	beq.n	8001db0 <d_type+0x75c>
 8001d98:	6325      	str	r5, [r4, #48]	; 0x30
 8001d9a:	60e6      	str	r6, [r4, #12]
 8001d9c:	f8c4 9014 	str.w	r9, [r4, #20]
 8001da0:	f8c4 8020 	str.w	r8, [r4, #32]
 8001da4:	62a7      	str	r7, [r4, #40]	; 0x28
 8001da6:	9d01      	ldr	r5, [sp, #4]
 8001da8:	e599      	b.n	80018de <d_type+0x28a>
 8001daa:	2300      	movs	r3, #0
 8001dac:	701b      	strb	r3, [r3, #0]
 8001dae:	deff      	udf	#255	; 0xff
 8001db0:	9b01      	ldr	r3, [sp, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f43f acec 	beq.w	8001790 <d_type+0x13c>
 8001db8:	6a22      	ldr	r2, [r4, #32]
 8001dba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001dbc:	428a      	cmp	r2, r1
 8001dbe:	f6bf ace7 	bge.w	8001790 <d_type+0x13c>
 8001dc2:	69e5      	ldr	r5, [r4, #28]
 8001dc4:	1c51      	adds	r1, r2, #1
 8001dc6:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
 8001dca:	9a01      	ldr	r2, [sp, #4]
 8001dcc:	4603      	mov	r3, r0
 8001dce:	6221      	str	r1, [r4, #32]
 8001dd0:	e613      	b.n	80019fa <d_type+0x3a6>
 8001dd2:	f104 000c 	add.w	r0, r4, #12
 8001dd6:	f7fe fb09 	bl	80003ec <d_number.isra.0>
 8001dda:	9d01      	ldr	r5, [sp, #4]
 8001ddc:	e77d      	b.n	8001cda <d_type+0x686>
 8001dde:	2301      	movs	r3, #1
 8001de0:	3203      	adds	r2, #3
 8001de2:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001de4:	60c2      	str	r2, [r0, #12]
 8001de6:	6343      	str	r3, [r0, #52]	; 0x34
 8001de8:	f7ff f81a 	bl	8000e20 <d_expression_1>
 8001dec:	6366      	str	r6, [r4, #52]	; 0x34
 8001dee:	4605      	mov	r5, r0
 8001df0:	e681      	b.n	8001af6 <d_type+0x4a2>
 8001df2:	4619      	mov	r1, r3
 8001df4:	e791      	b.n	8001d1a <d_type+0x6c6>
 8001df6:	bf00      	nop
 8001df8:	0800ced0 	.word	0x0800ced0
 8001dfc:	0800cea8 	.word	0x0800cea8
 8001e00:	0800ce6c 	.word	0x0800ce6c
 8001e04:	0800ce94 	.word	0x0800ce94
 8001e08:	0800ce80 	.word	0x0800ce80
 8001e0c:	0800d6f0 	.word	0x0800d6f0
 8001e10:	0800d6e8 	.word	0x0800d6e8

08001e14 <d_operator_name>:
 8001e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e16:	68c3      	ldr	r3, [r0, #12]
 8001e18:	4684      	mov	ip, r0
 8001e1a:	781f      	ldrb	r7, [r3, #0]
 8001e1c:	b327      	cbz	r7, 8001e68 <d_operator_name+0x54>
 8001e1e:	1c5a      	adds	r2, r3, #1
 8001e20:	60c2      	str	r2, [r0, #12]
 8001e22:	785a      	ldrb	r2, [r3, #1]
 8001e24:	781f      	ldrb	r7, [r3, #0]
 8001e26:	2a00      	cmp	r2, #0
 8001e28:	d058      	beq.n	8001edc <d_operator_name+0xc8>
 8001e2a:	1c9a      	adds	r2, r3, #2
 8001e2c:	60c2      	str	r2, [r0, #12]
 8001e2e:	2f76      	cmp	r7, #118	; 0x76
 8001e30:	4604      	mov	r4, r0
 8001e32:	f893 e001 	ldrb.w	lr, [r3, #1]
 8001e36:	d043      	beq.n	8001ec0 <d_operator_name+0xac>
 8001e38:	2f63      	cmp	r7, #99	; 0x63
 8001e3a:	d116      	bne.n	8001e6a <d_operator_name+0x56>
 8001e3c:	f1be 0f76 	cmp.w	lr, #118	; 0x76
 8001e40:	d113      	bne.n	8001e6a <d_operator_name+0x56>
 8001e42:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001e44:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8001e46:	fab3 f383 	clz	r3, r3
 8001e4a:	095b      	lsrs	r3, r3, #5
 8001e4c:	6383      	str	r3, [r0, #56]	; 0x38
 8001e4e:	f7ff fc01 	bl	8001654 <d_type>
 8001e52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e54:	4602      	mov	r2, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d052      	beq.n	8001f00 <d_operator_name+0xec>
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	2134      	movs	r1, #52	; 0x34
 8001e5e:	4620      	mov	r0, r4
 8001e60:	f7fe f974 	bl	800014c <d_make_comp>
 8001e64:	63a5      	str	r5, [r4, #56]	; 0x38
 8001e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e68:	46be      	mov	lr, r7
 8001e6a:	2043      	movs	r0, #67	; 0x43
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	4d27      	ldr	r5, [pc, #156]	; (8001f0c <d_operator_name+0xf8>)
 8001e70:	e004      	b.n	8001e7c <d_operator_name+0x68>
 8001e72:	bf8c      	ite	hi
 8001e74:	4618      	movhi	r0, r3
 8001e76:	1c5a      	addls	r2, r3, #1
 8001e78:	4282      	cmp	r2, r0
 8001e7a:	d02d      	beq.n	8001ed8 <d_operator_name+0xc4>
 8001e7c:	1a83      	subs	r3, r0, r2
 8001e7e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8001e82:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8001e86:	0119      	lsls	r1, r3, #4
 8001e88:	586c      	ldr	r4, [r5, r1]
 8001e8a:	4429      	add	r1, r5
 8001e8c:	7826      	ldrb	r6, [r4, #0]
 8001e8e:	42be      	cmp	r6, r7
 8001e90:	d1ef      	bne.n	8001e72 <d_operator_name+0x5e>
 8001e92:	7864      	ldrb	r4, [r4, #1]
 8001e94:	4574      	cmp	r4, lr
 8001e96:	d1ec      	bne.n	8001e72 <d_operator_name+0x5e>
 8001e98:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8001e9c:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	da19      	bge.n	8001ed8 <d_operator_name+0xc4>
 8001ea4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001ea8:	f8dc 4010 	ldr.w	r4, [ip, #16]
 8001eac:	0092      	lsls	r2, r2, #2
 8001eae:	3301      	adds	r3, #1
 8001eb0:	18a0      	adds	r0, r4, r2
 8001eb2:	f8cc 3014 	str.w	r3, [ip, #20]
 8001eb6:	d013      	beq.n	8001ee0 <d_operator_name+0xcc>
 8001eb8:	2331      	movs	r3, #49	; 0x31
 8001eba:	54a3      	strb	r3, [r4, r2]
 8001ebc:	6041      	str	r1, [r0, #4]
 8001ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ec0:	f1ae 0530 	sub.w	r5, lr, #48	; 0x30
 8001ec4:	b2eb      	uxtb	r3, r5
 8001ec6:	2b09      	cmp	r3, #9
 8001ec8:	d8cf      	bhi.n	8001e6a <d_operator_name+0x56>
 8001eca:	f7fe fb0f 	bl	80004ec <d_source_name>
 8001ece:	6963      	ldr	r3, [r4, #20]
 8001ed0:	69a2      	ldr	r2, [r4, #24]
 8001ed2:	4601      	mov	r1, r0
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	db04      	blt.n	8001ee2 <d_operator_name+0xce>
 8001ed8:	2000      	movs	r0, #0
 8001eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001edc:	4696      	mov	lr, r2
 8001ede:	e7c4      	b.n	8001e6a <d_operator_name+0x56>
 8001ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ee2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001ee6:	6926      	ldr	r6, [r4, #16]
 8001ee8:	0092      	lsls	r2, r2, #2
 8001eea:	3301      	adds	r3, #1
 8001eec:	18b0      	adds	r0, r6, r2
 8001eee:	6163      	str	r3, [r4, #20]
 8001ef0:	d0f2      	beq.n	8001ed8 <d_operator_name+0xc4>
 8001ef2:	2900      	cmp	r1, #0
 8001ef4:	d0f0      	beq.n	8001ed8 <d_operator_name+0xc4>
 8001ef6:	2332      	movs	r3, #50	; 0x32
 8001ef8:	54b3      	strb	r3, [r6, r2]
 8001efa:	6045      	str	r5, [r0, #4]
 8001efc:	6081      	str	r1, [r0, #8]
 8001efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f00:	2133      	movs	r1, #51	; 0x33
 8001f02:	4620      	mov	r0, r4
 8001f04:	f7fe f922 	bl	800014c <d_make_comp>
 8001f08:	e7ac      	b.n	8001e64 <d_operator_name+0x50>
 8001f0a:	bf00      	nop
 8001f0c:	0800cef8 	.word	0x0800cef8

08001f10 <d_parmlist>:
 8001f10:	2300      	movs	r3, #0
 8001f12:	b530      	push	{r4, r5, lr}
 8001f14:	68c2      	ldr	r2, [r0, #12]
 8001f16:	b083      	sub	sp, #12
 8001f18:	9301      	str	r3, [sp, #4]
 8001f1a:	7813      	ldrb	r3, [r2, #0]
 8001f1c:	b343      	cbz	r3, 8001f70 <d_parmlist+0x60>
 8001f1e:	2b45      	cmp	r3, #69	; 0x45
 8001f20:	d026      	beq.n	8001f70 <d_parmlist+0x60>
 8001f22:	2b2e      	cmp	r3, #46	; 0x2e
 8001f24:	d024      	beq.n	8001f70 <d_parmlist+0x60>
 8001f26:	4604      	mov	r4, r0
 8001f28:	ad01      	add	r5, sp, #4
 8001f2a:	e016      	b.n	8001f5a <d_parmlist+0x4a>
 8001f2c:	2b4f      	cmp	r3, #79	; 0x4f
 8001f2e:	d016      	beq.n	8001f5e <d_parmlist+0x4e>
 8001f30:	4620      	mov	r0, r4
 8001f32:	f7ff fb8f 	bl	8001654 <d_type>
 8001f36:	b1d8      	cbz	r0, 8001f70 <d_parmlist+0x60>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	212e      	movs	r1, #46	; 0x2e
 8001f3e:	4620      	mov	r0, r4
 8001f40:	f7fe f904 	bl	800014c <d_make_comp>
 8001f44:	6028      	str	r0, [r5, #0]
 8001f46:	b198      	cbz	r0, 8001f70 <d_parmlist+0x60>
 8001f48:	68e2      	ldr	r2, [r4, #12]
 8001f4a:	f100 0508 	add.w	r5, r0, #8
 8001f4e:	7813      	ldrb	r3, [r2, #0]
 8001f50:	b143      	cbz	r3, 8001f64 <d_parmlist+0x54>
 8001f52:	2b45      	cmp	r3, #69	; 0x45
 8001f54:	d006      	beq.n	8001f64 <d_parmlist+0x54>
 8001f56:	2b2e      	cmp	r3, #46	; 0x2e
 8001f58:	d004      	beq.n	8001f64 <d_parmlist+0x54>
 8001f5a:	2b52      	cmp	r3, #82	; 0x52
 8001f5c:	d1e6      	bne.n	8001f2c <d_parmlist+0x1c>
 8001f5e:	7853      	ldrb	r3, [r2, #1]
 8001f60:	2b45      	cmp	r3, #69	; 0x45
 8001f62:	d1e5      	bne.n	8001f30 <d_parmlist+0x20>
 8001f64:	9801      	ldr	r0, [sp, #4]
 8001f66:	b118      	cbz	r0, 8001f70 <d_parmlist+0x60>
 8001f68:	6883      	ldr	r3, [r0, #8]
 8001f6a:	b123      	cbz	r3, 8001f76 <d_parmlist+0x66>
 8001f6c:	b003      	add	sp, #12
 8001f6e:	bd30      	pop	{r4, r5, pc}
 8001f70:	2000      	movs	r0, #0
 8001f72:	b003      	add	sp, #12
 8001f74:	bd30      	pop	{r4, r5, pc}
 8001f76:	6842      	ldr	r2, [r0, #4]
 8001f78:	7811      	ldrb	r1, [r2, #0]
 8001f7a:	2927      	cmp	r1, #39	; 0x27
 8001f7c:	d1f6      	bne.n	8001f6c <d_parmlist+0x5c>
 8001f7e:	6852      	ldr	r2, [r2, #4]
 8001f80:	7c11      	ldrb	r1, [r2, #16]
 8001f82:	2909      	cmp	r1, #9
 8001f84:	d1f2      	bne.n	8001f6c <d_parmlist+0x5c>
 8001f86:	6851      	ldr	r1, [r2, #4]
 8001f88:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001f8a:	1a52      	subs	r2, r2, r1
 8001f8c:	6322      	str	r2, [r4, #48]	; 0x30
 8001f8e:	6043      	str	r3, [r0, #4]
 8001f90:	e7ec      	b.n	8001f6c <d_parmlist+0x5c>
 8001f92:	bf00      	nop

08001f94 <d_unqualified_name>:
 8001f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f96:	68c1      	ldr	r1, [r0, #12]
 8001f98:	4604      	mov	r4, r0
 8001f9a:	780b      	ldrb	r3, [r1, #0]
 8001f9c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001fa0:	2a09      	cmp	r2, #9
 8001fa2:	d920      	bls.n	8001fe6 <d_unqualified_name+0x52>
 8001fa4:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8001fa8:	2a19      	cmp	r2, #25
 8001faa:	d925      	bls.n	8001ff8 <d_unqualified_name+0x64>
 8001fac:	f1a3 0243 	sub.w	r2, r3, #67	; 0x43
 8001fb0:	2a01      	cmp	r2, #1
 8001fb2:	d92c      	bls.n	800200e <d_unqualified_name+0x7a>
 8001fb4:	2b4c      	cmp	r3, #76	; 0x4c
 8001fb6:	f000 8088 	beq.w	80020ca <d_unqualified_name+0x136>
 8001fba:	2b55      	cmp	r3, #85	; 0x55
 8001fbc:	d133      	bne.n	8002026 <d_unqualified_name+0x92>
 8001fbe:	784b      	ldrb	r3, [r1, #1]
 8001fc0:	2b6c      	cmp	r3, #108	; 0x6c
 8001fc2:	d033      	beq.n	800202c <d_unqualified_name+0x98>
 8001fc4:	2b74      	cmp	r3, #116	; 0x74
 8001fc6:	d12e      	bne.n	8002026 <d_unqualified_name+0x92>
 8001fc8:	1c4b      	adds	r3, r1, #1
 8001fca:	60c3      	str	r3, [r0, #12]
 8001fcc:	784b      	ldrb	r3, [r1, #1]
 8001fce:	2b74      	cmp	r3, #116	; 0x74
 8001fd0:	d05a      	beq.n	8002088 <d_unqualified_name+0xf4>
 8001fd2:	2b42      	cmp	r3, #66	; 0x42
 8001fd4:	f04f 0500 	mov.w	r5, #0
 8001fd8:	d10c      	bne.n	8001ff4 <d_unqualified_name+0x60>
 8001fda:	4629      	mov	r1, r5
 8001fdc:	4620      	mov	r0, r4
 8001fde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001fe2:	f7fe badf 	b.w	80005a4 <d_abi_tags>
 8001fe6:	f7fe fa81 	bl	80004ec <d_source_name>
 8001fea:	4605      	mov	r5, r0
 8001fec:	68e3      	ldr	r3, [r4, #12]
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b42      	cmp	r3, #66	; 0x42
 8001ff2:	d0f2      	beq.n	8001fda <d_unqualified_name+0x46>
 8001ff4:	4628      	mov	r0, r5
 8001ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ff8:	f7ff ff0c 	bl	8001e14 <d_operator_name>
 8001ffc:	4605      	mov	r5, r0
 8001ffe:	b118      	cbz	r0, 8002008 <d_unqualified_name+0x74>
 8002000:	7803      	ldrb	r3, [r0, #0]
 8002002:	2b31      	cmp	r3, #49	; 0x31
 8002004:	f000 80b2 	beq.w	800216c <d_unqualified_name+0x1d8>
 8002008:	68e3      	ldr	r3, [r4, #12]
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	e7f0      	b.n	8001ff0 <d_unqualified_name+0x5c>
 800200e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8002010:	b125      	cbz	r5, 800201c <d_unqualified_name+0x88>
 8002012:	782a      	ldrb	r2, [r5, #0]
 8002014:	2a00      	cmp	r2, #0
 8002016:	d06c      	beq.n	80020f2 <d_unqualified_name+0x15e>
 8002018:	2a18      	cmp	r2, #24
 800201a:	d06a      	beq.n	80020f2 <d_unqualified_name+0x15e>
 800201c:	2b43      	cmp	r3, #67	; 0x43
 800201e:	f000 80bf 	beq.w	80021a0 <d_unqualified_name+0x20c>
 8002022:	2b44      	cmp	r3, #68	; 0x44
 8002024:	d06f      	beq.n	8002106 <d_unqualified_name+0x172>
 8002026:	2500      	movs	r5, #0
 8002028:	4628      	mov	r0, r5
 800202a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800202c:	1c4b      	adds	r3, r1, #1
 800202e:	60c3      	str	r3, [r0, #12]
 8002030:	784b      	ldrb	r3, [r1, #1]
 8002032:	2b6c      	cmp	r3, #108	; 0x6c
 8002034:	d1cd      	bne.n	8001fd2 <d_unqualified_name+0x3e>
 8002036:	3102      	adds	r1, #2
 8002038:	60c1      	str	r1, [r0, #12]
 800203a:	f7ff ff69 	bl	8001f10 <d_parmlist>
 800203e:	4606      	mov	r6, r0
 8002040:	b1f0      	cbz	r0, 8002080 <d_unqualified_name+0xec>
 8002042:	68e2      	ldr	r2, [r4, #12]
 8002044:	7813      	ldrb	r3, [r2, #0]
 8002046:	2b45      	cmp	r3, #69	; 0x45
 8002048:	d1c3      	bne.n	8001fd2 <d_unqualified_name+0x3e>
 800204a:	3201      	adds	r2, #1
 800204c:	60e2      	str	r2, [r4, #12]
 800204e:	4620      	mov	r0, r4
 8002050:	f7fe fa0e 	bl	8000470 <d_compact_number>
 8002054:	2800      	cmp	r0, #0
 8002056:	db13      	blt.n	8002080 <d_unqualified_name+0xec>
 8002058:	6963      	ldr	r3, [r4, #20]
 800205a:	69a2      	ldr	r2, [r4, #24]
 800205c:	4293      	cmp	r3, r2
 800205e:	da0f      	bge.n	8002080 <d_unqualified_name+0xec>
 8002060:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002064:	6921      	ldr	r1, [r4, #16]
 8002066:	0092      	lsls	r2, r2, #2
 8002068:	3301      	adds	r3, #1
 800206a:	188d      	adds	r5, r1, r2
 800206c:	6163      	str	r3, [r4, #20]
 800206e:	d0cb      	beq.n	8002008 <d_unqualified_name+0x74>
 8002070:	2345      	movs	r3, #69	; 0x45
 8002072:	548b      	strb	r3, [r1, r2]
 8002074:	606e      	str	r6, [r5, #4]
 8002076:	60a8      	str	r0, [r5, #8]
 8002078:	6a23      	ldr	r3, [r4, #32]
 800207a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800207c:	4293      	cmp	r3, r2
 800207e:	db1c      	blt.n	80020ba <d_unqualified_name+0x126>
 8002080:	68e3      	ldr	r3, [r4, #12]
 8002082:	2500      	movs	r5, #0
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	e7b3      	b.n	8001ff0 <d_unqualified_name+0x5c>
 8002088:	3102      	adds	r1, #2
 800208a:	60c1      	str	r1, [r0, #12]
 800208c:	f7fe f9f0 	bl	8000470 <d_compact_number>
 8002090:	2800      	cmp	r0, #0
 8002092:	dbf5      	blt.n	8002080 <d_unqualified_name+0xec>
 8002094:	6963      	ldr	r3, [r4, #20]
 8002096:	69a2      	ldr	r2, [r4, #24]
 8002098:	4293      	cmp	r3, r2
 800209a:	daf1      	bge.n	8002080 <d_unqualified_name+0xec>
 800209c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80020a0:	6921      	ldr	r1, [r4, #16]
 80020a2:	0092      	lsls	r2, r2, #2
 80020a4:	3301      	adds	r3, #1
 80020a6:	188d      	adds	r5, r1, r2
 80020a8:	6163      	str	r3, [r4, #20]
 80020aa:	d0ad      	beq.n	8002008 <d_unqualified_name+0x74>
 80020ac:	2347      	movs	r3, #71	; 0x47
 80020ae:	548b      	strb	r3, [r1, r2]
 80020b0:	6068      	str	r0, [r5, #4]
 80020b2:	6a23      	ldr	r3, [r4, #32]
 80020b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80020b6:	4293      	cmp	r3, r2
 80020b8:	dae2      	bge.n	8002080 <d_unqualified_name+0xec>
 80020ba:	69e0      	ldr	r0, [r4, #28]
 80020bc:	1c59      	adds	r1, r3, #1
 80020be:	68e2      	ldr	r2, [r4, #12]
 80020c0:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
 80020c4:	6221      	str	r1, [r4, #32]
 80020c6:	7813      	ldrb	r3, [r2, #0]
 80020c8:	e792      	b.n	8001ff0 <d_unqualified_name+0x5c>
 80020ca:	3101      	adds	r1, #1
 80020cc:	60c1      	str	r1, [r0, #12]
 80020ce:	f7fe fa0d 	bl	80004ec <d_source_name>
 80020d2:	4605      	mov	r5, r0
 80020d4:	2800      	cmp	r0, #0
 80020d6:	d0a6      	beq.n	8002026 <d_unqualified_name+0x92>
 80020d8:	68e2      	ldr	r2, [r4, #12]
 80020da:	7813      	ldrb	r3, [r2, #0]
 80020dc:	2b5f      	cmp	r3, #95	; 0x5f
 80020de:	d187      	bne.n	8001ff0 <d_unqualified_name+0x5c>
 80020e0:	4620      	mov	r0, r4
 80020e2:	3201      	adds	r2, #1
 80020e4:	f840 2f0c 	str.w	r2, [r0, #12]!
 80020e8:	f7fe f980 	bl	80003ec <d_number.isra.0>
 80020ec:	2800      	cmp	r0, #0
 80020ee:	da8b      	bge.n	8002008 <d_unqualified_name+0x74>
 80020f0:	e799      	b.n	8002026 <d_unqualified_name+0x92>
 80020f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80020f4:	68aa      	ldr	r2, [r5, #8]
 80020f6:	4413      	add	r3, r2
 80020f8:	6323      	str	r3, [r4, #48]	; 0x30
 80020fa:	780b      	ldrb	r3, [r1, #0]
 80020fc:	2b43      	cmp	r3, #67	; 0x43
 80020fe:	d04f      	beq.n	80021a0 <d_unqualified_name+0x20c>
 8002100:	2b44      	cmp	r3, #68	; 0x44
 8002102:	f47f af66 	bne.w	8001fd2 <d_unqualified_name+0x3e>
 8002106:	784b      	ldrb	r3, [r1, #1]
 8002108:	3b30      	subs	r3, #48	; 0x30
 800210a:	2b05      	cmp	r3, #5
 800210c:	d88b      	bhi.n	8002026 <d_unqualified_name+0x92>
 800210e:	a201      	add	r2, pc, #4	; (adr r2, 8002114 <d_unqualified_name+0x180>)
 8002110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002114:	08002169 	.word	0x08002169
 8002118:	0800212d 	.word	0x0800212d
 800211c:	08002165 	.word	0x08002165
 8002120:	08002027 	.word	0x08002027
 8002124:	08002161 	.word	0x08002161
 8002128:	0800215d 	.word	0x0800215d
 800212c:	2702      	movs	r7, #2
 800212e:	6963      	ldr	r3, [r4, #20]
 8002130:	69a2      	ldr	r2, [r4, #24]
 8002132:	1c88      	adds	r0, r1, #2
 8002134:	4293      	cmp	r3, r2
 8002136:	60e0      	str	r0, [r4, #12]
 8002138:	da56      	bge.n	80021e8 <d_unqualified_name+0x254>
 800213a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800213e:	6920      	ldr	r0, [r4, #16]
 8002140:	0092      	lsls	r2, r2, #2
 8002142:	3301      	adds	r3, #1
 8002144:	1886      	adds	r6, r0, r2
 8002146:	6163      	str	r3, [r4, #20]
 8002148:	d005      	beq.n	8002156 <d_unqualified_name+0x1c2>
 800214a:	2d00      	cmp	r5, #0
 800214c:	d04f      	beq.n	80021ee <d_unqualified_name+0x25a>
 800214e:	2308      	movs	r3, #8
 8002150:	5483      	strb	r3, [r0, r2]
 8002152:	7137      	strb	r7, [r6, #4]
 8002154:	60b5      	str	r5, [r6, #8]
 8002156:	788b      	ldrb	r3, [r1, #2]
 8002158:	4635      	mov	r5, r6
 800215a:	e749      	b.n	8001ff0 <d_unqualified_name+0x5c>
 800215c:	2705      	movs	r7, #5
 800215e:	e7e6      	b.n	800212e <d_unqualified_name+0x19a>
 8002160:	2704      	movs	r7, #4
 8002162:	e7e4      	b.n	800212e <d_unqualified_name+0x19a>
 8002164:	2703      	movs	r7, #3
 8002166:	e7e2      	b.n	800212e <d_unqualified_name+0x19a>
 8002168:	2701      	movs	r7, #1
 800216a:	e7e0      	b.n	800212e <d_unqualified_name+0x19a>
 800216c:	6842      	ldr	r2, [r0, #4]
 800216e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002170:	6891      	ldr	r1, [r2, #8]
 8002172:	3307      	adds	r3, #7
 8002174:	440b      	add	r3, r1
 8002176:	6810      	ldr	r0, [r2, #0]
 8002178:	491e      	ldr	r1, [pc, #120]	; (80021f4 <d_unqualified_name+0x260>)
 800217a:	6323      	str	r3, [r4, #48]	; 0x30
 800217c:	f004 fb32 	bl	80067e4 <strcmp>
 8002180:	2800      	cmp	r0, #0
 8002182:	f47f af41 	bne.w	8002008 <d_unqualified_name+0x74>
 8002186:	4620      	mov	r0, r4
 8002188:	f7fe f9b0 	bl	80004ec <d_source_name>
 800218c:	462a      	mov	r2, r5
 800218e:	4603      	mov	r3, r0
 8002190:	2136      	movs	r1, #54	; 0x36
 8002192:	4620      	mov	r0, r4
 8002194:	f7fd ffda 	bl	800014c <d_make_comp>
 8002198:	68e3      	ldr	r3, [r4, #12]
 800219a:	4605      	mov	r5, r0
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	e727      	b.n	8001ff0 <d_unqualified_name+0x5c>
 80021a0:	784b      	ldrb	r3, [r1, #1]
 80021a2:	3b31      	subs	r3, #49	; 0x31
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	f63f af3e 	bhi.w	8002026 <d_unqualified_name+0x92>
 80021aa:	e8df f003 	tbb	[pc, r3]
 80021ae:	0315      	.short	0x0315
 80021b0:	191b      	.short	0x191b
 80021b2:	17          	.byte	0x17
 80021b3:	00          	.byte	0x00
 80021b4:	2702      	movs	r7, #2
 80021b6:	6963      	ldr	r3, [r4, #20]
 80021b8:	69a2      	ldr	r2, [r4, #24]
 80021ba:	1c88      	adds	r0, r1, #2
 80021bc:	4293      	cmp	r3, r2
 80021be:	60e0      	str	r0, [r4, #12]
 80021c0:	da12      	bge.n	80021e8 <d_unqualified_name+0x254>
 80021c2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80021c6:	6920      	ldr	r0, [r4, #16]
 80021c8:	0092      	lsls	r2, r2, #2
 80021ca:	3301      	adds	r3, #1
 80021cc:	1886      	adds	r6, r0, r2
 80021ce:	6163      	str	r3, [r4, #20]
 80021d0:	d0c1      	beq.n	8002156 <d_unqualified_name+0x1c2>
 80021d2:	b165      	cbz	r5, 80021ee <d_unqualified_name+0x25a>
 80021d4:	2307      	movs	r3, #7
 80021d6:	e7bb      	b.n	8002150 <d_unqualified_name+0x1bc>
 80021d8:	2701      	movs	r7, #1
 80021da:	e7ec      	b.n	80021b6 <d_unqualified_name+0x222>
 80021dc:	2705      	movs	r7, #5
 80021de:	e7ea      	b.n	80021b6 <d_unqualified_name+0x222>
 80021e0:	2704      	movs	r7, #4
 80021e2:	e7e8      	b.n	80021b6 <d_unqualified_name+0x222>
 80021e4:	2703      	movs	r7, #3
 80021e6:	e7e6      	b.n	80021b6 <d_unqualified_name+0x222>
 80021e8:	788b      	ldrb	r3, [r1, #2]
 80021ea:	2500      	movs	r5, #0
 80021ec:	e700      	b.n	8001ff0 <d_unqualified_name+0x5c>
 80021ee:	788b      	ldrb	r3, [r1, #2]
 80021f0:	e6fe      	b.n	8001ff0 <d_unqualified_name+0x5c>
 80021f2:	bf00      	nop
 80021f4:	0800d700 	.word	0x0800d700

080021f8 <d_bare_function_type>:
 80021f8:	b570      	push	{r4, r5, r6, lr}
 80021fa:	68c3      	ldr	r3, [r0, #12]
 80021fc:	4604      	mov	r4, r0
 80021fe:	781a      	ldrb	r2, [r3, #0]
 8002200:	2a4a      	cmp	r2, #74	; 0x4a
 8002202:	d00d      	beq.n	8002220 <d_bare_function_type+0x28>
 8002204:	b971      	cbnz	r1, 8002224 <d_bare_function_type+0x2c>
 8002206:	460d      	mov	r5, r1
 8002208:	4620      	mov	r0, r4
 800220a:	f7ff fe81 	bl	8001f10 <d_parmlist>
 800220e:	b178      	cbz	r0, 8002230 <d_bare_function_type+0x38>
 8002210:	4603      	mov	r3, r0
 8002212:	462a      	mov	r2, r5
 8002214:	4620      	mov	r0, r4
 8002216:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800221a:	2129      	movs	r1, #41	; 0x29
 800221c:	f7fd bf96 	b.w	800014c <d_make_comp>
 8002220:	3301      	adds	r3, #1
 8002222:	60c3      	str	r3, [r0, #12]
 8002224:	4620      	mov	r0, r4
 8002226:	f7ff fa15 	bl	8001654 <d_type>
 800222a:	4605      	mov	r5, r0
 800222c:	2800      	cmp	r0, #0
 800222e:	d1eb      	bne.n	8002208 <d_bare_function_type+0x10>
 8002230:	2000      	movs	r0, #0
 8002232:	bd70      	pop	{r4, r5, r6, pc}

08002234 <d_function_type>:
 8002234:	68c3      	ldr	r3, [r0, #12]
 8002236:	781a      	ldrb	r2, [r3, #0]
 8002238:	2a46      	cmp	r2, #70	; 0x46
 800223a:	d001      	beq.n	8002240 <d_function_type+0xc>
 800223c:	2000      	movs	r0, #0
 800223e:	4770      	bx	lr
 8002240:	b510      	push	{r4, lr}
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	60c2      	str	r2, [r0, #12]
 8002246:	785a      	ldrb	r2, [r3, #1]
 8002248:	2101      	movs	r1, #1
 800224a:	2a59      	cmp	r2, #89	; 0x59
 800224c:	bf04      	itt	eq
 800224e:	3302      	addeq	r3, #2
 8002250:	60c3      	streq	r3, [r0, #12]
 8002252:	4604      	mov	r4, r0
 8002254:	f7ff ffd0 	bl	80021f8 <d_bare_function_type>
 8002258:	4601      	mov	r1, r0
 800225a:	4620      	mov	r0, r4
 800225c:	f7fe f828 	bl	80002b0 <d_ref_qualifier>
 8002260:	68e3      	ldr	r3, [r4, #12]
 8002262:	781a      	ldrb	r2, [r3, #0]
 8002264:	2a45      	cmp	r2, #69	; 0x45
 8002266:	d001      	beq.n	800226c <d_function_type+0x38>
 8002268:	2000      	movs	r0, #0
 800226a:	bd10      	pop	{r4, pc}
 800226c:	3301      	adds	r3, #1
 800226e:	60e3      	str	r3, [r4, #12]
 8002270:	bd10      	pop	{r4, pc}
 8002272:	bf00      	nop

08002274 <d_encoding>:
 8002274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002278:	68c3      	ldr	r3, [r0, #12]
 800227a:	4605      	mov	r5, r0
 800227c:	781a      	ldrb	r2, [r3, #0]
 800227e:	2a47      	cmp	r2, #71	; 0x47
 8002280:	d01f      	beq.n	80022c2 <d_encoding+0x4e>
 8002282:	2a54      	cmp	r2, #84	; 0x54
 8002284:	d01d      	beq.n	80022c2 <d_encoding+0x4e>
 8002286:	460e      	mov	r6, r1
 8002288:	f7ff f82c 	bl	80012e4 <d_name>
 800228c:	4604      	mov	r4, r0
 800228e:	b310      	cbz	r0, 80022d6 <d_encoding+0x62>
 8002290:	b32e      	cbz	r6, 80022de <d_encoding+0x6a>
 8002292:	68ab      	ldr	r3, [r5, #8]
 8002294:	07db      	lsls	r3, r3, #31
 8002296:	d422      	bmi.n	80022de <d_encoding+0x6a>
 8002298:	7823      	ldrb	r3, [r4, #0]
 800229a:	f1a3 021c 	sub.w	r2, r3, #28
 800229e:	2a04      	cmp	r2, #4
 80022a0:	d940      	bls.n	8002324 <d_encoding+0xb0>
 80022a2:	2b4c      	cmp	r3, #76	; 0x4c
 80022a4:	d03e      	beq.n	8002324 <d_encoding+0xb0>
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d116      	bne.n	80022d8 <d_encoding+0x64>
 80022aa:	68a3      	ldr	r3, [r4, #8]
 80022ac:	781a      	ldrb	r2, [r3, #0]
 80022ae:	f1a2 011c 	sub.w	r1, r2, #28
 80022b2:	2904      	cmp	r1, #4
 80022b4:	f240 8283 	bls.w	80027be <d_encoding+0x54a>
 80022b8:	2a4c      	cmp	r2, #76	; 0x4c
 80022ba:	f000 8280 	beq.w	80027be <d_encoding+0x54a>
 80022be:	60a3      	str	r3, [r4, #8]
 80022c0:	e00a      	b.n	80022d8 <d_encoding+0x64>
 80022c2:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80022c4:	f101 0214 	add.w	r2, r1, #20
 80022c8:	632a      	str	r2, [r5, #48]	; 0x30
 80022ca:	781a      	ldrb	r2, [r3, #0]
 80022cc:	2a54      	cmp	r2, #84	; 0x54
 80022ce:	d02b      	beq.n	8002328 <d_encoding+0xb4>
 80022d0:	2a47      	cmp	r2, #71	; 0x47
 80022d2:	f000 809f 	beq.w	8002414 <d_encoding+0x1a0>
 80022d6:	2400      	movs	r4, #0
 80022d8:	4620      	mov	r0, r4
 80022da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022de:	68eb      	ldr	r3, [r5, #12]
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f8      	beq.n	80022d8 <d_encoding+0x64>
 80022e6:	2b45      	cmp	r3, #69	; 0x45
 80022e8:	d0f6      	beq.n	80022d8 <d_encoding+0x64>
 80022ea:	4621      	mov	r1, r4
 80022ec:	780a      	ldrb	r2, [r1, #0]
 80022ee:	2a20      	cmp	r2, #32
 80022f0:	f200 8113 	bhi.w	800251a <d_encoding+0x2a6>
 80022f4:	2a1c      	cmp	r2, #28
 80022f6:	f080 8112 	bcs.w	800251e <d_encoding+0x2aa>
 80022fa:	2a04      	cmp	r2, #4
 80022fc:	f040 8101 	bne.w	8002502 <d_encoding+0x28e>
 8002300:	684a      	ldr	r2, [r1, #4]
 8002302:	b16a      	cbz	r2, 8002320 <d_encoding+0xac>
 8002304:	7813      	ldrb	r3, [r2, #0]
 8002306:	2b08      	cmp	r3, #8
 8002308:	f103 31ff 	add.w	r1, r3, #4294967295
 800230c:	f200 80f6 	bhi.w	80024fc <d_encoding+0x288>
 8002310:	2b07      	cmp	r3, #7
 8002312:	f080 80f6 	bcs.w	8002502 <d_encoding+0x28e>
 8002316:	2901      	cmp	r1, #1
 8002318:	d802      	bhi.n	8002320 <d_encoding+0xac>
 800231a:	6892      	ldr	r2, [r2, #8]
 800231c:	2a00      	cmp	r2, #0
 800231e:	d1f1      	bne.n	8002304 <d_encoding+0x90>
 8002320:	2101      	movs	r1, #1
 8002322:	e0ef      	b.n	8002504 <d_encoding+0x290>
 8002324:	6864      	ldr	r4, [r4, #4]
 8002326:	e7b7      	b.n	8002298 <d_encoding+0x24>
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	60ea      	str	r2, [r5, #12]
 800232c:	785a      	ldrb	r2, [r3, #1]
 800232e:	2a00      	cmp	r2, #0
 8002330:	d0d1      	beq.n	80022d6 <d_encoding+0x62>
 8002332:	1c9a      	adds	r2, r3, #2
 8002334:	60ea      	str	r2, [r5, #12]
 8002336:	785b      	ldrb	r3, [r3, #1]
 8002338:	3b43      	subs	r3, #67	; 0x43
 800233a:	2b33      	cmp	r3, #51	; 0x33
 800233c:	d8cb      	bhi.n	80022d6 <d_encoding+0x62>
 800233e:	a201      	add	r2, pc, #4	; (adr r2, 8002344 <d_encoding+0xd0>)
 8002340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002344:	0800277f 	.word	0x0800277f
 8002348:	080022d7 	.word	0x080022d7
 800234c:	080022d7 	.word	0x080022d7
 8002350:	08002769 	.word	0x08002769
 8002354:	080022d7 	.word	0x080022d7
 8002358:	08002753 	.word	0x08002753
 800235c:	0800273d 	.word	0x0800273d
 8002360:	08002727 	.word	0x08002727
 8002364:	080022d7 	.word	0x080022d7
 8002368:	080022d7 	.word	0x080022d7
 800236c:	080022d7 	.word	0x080022d7
 8002370:	080022d7 	.word	0x080022d7
 8002374:	080022d7 	.word	0x080022d7
 8002378:	080022d7 	.word	0x080022d7
 800237c:	080022d7 	.word	0x080022d7
 8002380:	080022d7 	.word	0x080022d7
 8002384:	08002711 	.word	0x08002711
 8002388:	080026f7 	.word	0x080026f7
 800238c:	080022d7 	.word	0x080022d7
 8002390:	080026dd 	.word	0x080026dd
 8002394:	080026c7 	.word	0x080026c7
 8002398:	080022d7 	.word	0x080022d7
 800239c:	080022d7 	.word	0x080022d7
 80023a0:	080022d7 	.word	0x080022d7
 80023a4:	080022d7 	.word	0x080022d7
 80023a8:	080022d7 	.word	0x080022d7
 80023ac:	080022d7 	.word	0x080022d7
 80023b0:	080022d7 	.word	0x080022d7
 80023b4:	080022d7 	.word	0x080022d7
 80023b8:	080022d7 	.word	0x080022d7
 80023bc:	080022d7 	.word	0x080022d7
 80023c0:	080022d7 	.word	0x080022d7
 80023c4:	08002693 	.word	0x08002693
 80023c8:	080022d7 	.word	0x080022d7
 80023cc:	080022d7 	.word	0x080022d7
 80023d0:	080022d7 	.word	0x080022d7
 80023d4:	080022d7 	.word	0x080022d7
 80023d8:	0800266d 	.word	0x0800266d
 80023dc:	080022d7 	.word	0x080022d7
 80023e0:	080022d7 	.word	0x080022d7
 80023e4:	080022d7 	.word	0x080022d7
 80023e8:	080022d7 	.word	0x080022d7
 80023ec:	080022d7 	.word	0x080022d7
 80023f0:	080022d7 	.word	0x080022d7
 80023f4:	080022d7 	.word	0x080022d7
 80023f8:	080022d7 	.word	0x080022d7
 80023fc:	080022d7 	.word	0x080022d7
 8002400:	080022d7 	.word	0x080022d7
 8002404:	080022d7 	.word	0x080022d7
 8002408:	080022d7 	.word	0x080022d7
 800240c:	080022d7 	.word	0x080022d7
 8002410:	08002647 	.word	0x08002647
 8002414:	1c5a      	adds	r2, r3, #1
 8002416:	60ea      	str	r2, [r5, #12]
 8002418:	785a      	ldrb	r2, [r3, #1]
 800241a:	2a00      	cmp	r2, #0
 800241c:	f43f af5b 	beq.w	80022d6 <d_encoding+0x62>
 8002420:	1c9a      	adds	r2, r3, #2
 8002422:	60ea      	str	r2, [r5, #12]
 8002424:	785a      	ldrb	r2, [r3, #1]
 8002426:	3a41      	subs	r2, #65	; 0x41
 8002428:	2a31      	cmp	r2, #49	; 0x31
 800242a:	f63f af54 	bhi.w	80022d6 <d_encoding+0x62>
 800242e:	a101      	add	r1, pc, #4	; (adr r1, 8002434 <d_encoding+0x1c0>)
 8002430:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002434:	08002529 	.word	0x08002529
 8002438:	080022d7 	.word	0x080022d7
 800243c:	080022d7 	.word	0x080022d7
 8002440:	080022d7 	.word	0x080022d7
 8002444:	080022d7 	.word	0x080022d7
 8002448:	080022d7 	.word	0x080022d7
 800244c:	080022d7 	.word	0x080022d7
 8002450:	080022d7 	.word	0x080022d7
 8002454:	080022d7 	.word	0x080022d7
 8002458:	080022d7 	.word	0x080022d7
 800245c:	080022d7 	.word	0x080022d7
 8002460:	080022d7 	.word	0x080022d7
 8002464:	080022d7 	.word	0x080022d7
 8002468:	080022d7 	.word	0x080022d7
 800246c:	080022d7 	.word	0x080022d7
 8002470:	080022d7 	.word	0x080022d7
 8002474:	080022d7 	.word	0x080022d7
 8002478:	08002629 	.word	0x08002629
 800247c:	080022d7 	.word	0x080022d7
 8002480:	080025fd 	.word	0x080025fd
 8002484:	080022d7 	.word	0x080022d7
 8002488:	080025e7 	.word	0x080025e7
 800248c:	080022d7 	.word	0x080022d7
 8002490:	080022d7 	.word	0x080022d7
 8002494:	080022d7 	.word	0x080022d7
 8002498:	080022d7 	.word	0x080022d7
 800249c:	080022d7 	.word	0x080022d7
 80024a0:	080022d7 	.word	0x080022d7
 80024a4:	080022d7 	.word	0x080022d7
 80024a8:	080022d7 	.word	0x080022d7
 80024ac:	080022d7 	.word	0x080022d7
 80024b0:	080022d7 	.word	0x080022d7
 80024b4:	080022d7 	.word	0x080022d7
 80024b8:	080022d7 	.word	0x080022d7
 80024bc:	080022d7 	.word	0x080022d7
 80024c0:	080022d7 	.word	0x080022d7
 80024c4:	080022d7 	.word	0x080022d7
 80024c8:	080022d7 	.word	0x080022d7
 80024cc:	080022d7 	.word	0x080022d7
 80024d0:	080022d7 	.word	0x080022d7
 80024d4:	080022d7 	.word	0x080022d7
 80024d8:	080022d7 	.word	0x080022d7
 80024dc:	080022d7 	.word	0x080022d7
 80024e0:	080022d7 	.word	0x080022d7
 80024e4:	080022d7 	.word	0x080022d7
 80024e8:	080022d7 	.word	0x080022d7
 80024ec:	080022d7 	.word	0x080022d7
 80024f0:	080022d7 	.word	0x080022d7
 80024f4:	080022d7 	.word	0x080022d7
 80024f8:	08002541 	.word	0x08002541
 80024fc:	2b34      	cmp	r3, #52	; 0x34
 80024fe:	f47f af0f 	bne.w	8002320 <d_encoding+0xac>
 8002502:	2100      	movs	r1, #0
 8002504:	4628      	mov	r0, r5
 8002506:	f7ff fe77 	bl	80021f8 <d_bare_function_type>
 800250a:	4622      	mov	r2, r4
 800250c:	4603      	mov	r3, r0
 800250e:	2103      	movs	r1, #3
 8002510:	4628      	mov	r0, r5
 8002512:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002516:	f7fd be19 	b.w	800014c <d_make_comp>
 800251a:	2a4c      	cmp	r2, #76	; 0x4c
 800251c:	d1f1      	bne.n	8002502 <d_encoding+0x28e>
 800251e:	6849      	ldr	r1, [r1, #4]
 8002520:	2900      	cmp	r1, #0
 8002522:	f47f aee3 	bne.w	80022ec <d_encoding+0x78>
 8002526:	e7ed      	b.n	8002504 <d_encoding+0x290>
 8002528:	2100      	movs	r1, #0
 800252a:	4628      	mov	r0, r5
 800252c:	f7ff fea2 	bl	8002274 <d_encoding>
 8002530:	2300      	movs	r3, #0
 8002532:	4602      	mov	r2, r0
 8002534:	2117      	movs	r1, #23
 8002536:	4628      	mov	r0, r5
 8002538:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800253c:	f7fd be06 	b.w	800014c <d_make_comp>
 8002540:	f105 000c 	add.w	r0, r5, #12
 8002544:	f7fd ff52 	bl	80003ec <d_number.isra.0>
 8002548:	2801      	cmp	r0, #1
 800254a:	f77f aec4 	ble.w	80022d6 <d_encoding+0x62>
 800254e:	68eb      	ldr	r3, [r5, #12]
 8002550:	781a      	ldrb	r2, [r3, #0]
 8002552:	2a00      	cmp	r2, #0
 8002554:	f43f aebf 	beq.w	80022d6 <d_encoding+0x62>
 8002558:	1c5f      	adds	r7, r3, #1
 800255a:	60ef      	str	r7, [r5, #12]
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b5f      	cmp	r3, #95	; 0x5f
 8002560:	f47f aeb9 	bne.w	80022d6 <d_encoding+0x62>
 8002564:	2200      	movs	r2, #0
 8002566:	f04f 0940 	mov.w	r9, #64	; 0x40
 800256a:	4690      	mov	r8, r2
 800256c:	1e46      	subs	r6, r0, #1
 800256e:	783b      	ldrb	r3, [r7, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	f43f aeb0 	beq.w	80022d6 <d_encoding+0x62>
 8002576:	2b24      	cmp	r3, #36	; 0x24
 8002578:	f000 8128 	beq.w	80027cc <d_encoding+0x558>
 800257c:	463c      	mov	r4, r7
 800257e:	2100      	movs	r1, #0
 8002580:	e004      	b.n	800258c <d_encoding+0x318>
 8002582:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002586:	b123      	cbz	r3, 8002592 <d_encoding+0x31e>
 8002588:	2b24      	cmp	r3, #36	; 0x24
 800258a:	d002      	beq.n	8002592 <d_encoding+0x31e>
 800258c:	3101      	adds	r1, #1
 800258e:	42b1      	cmp	r1, r6
 8002590:	dbf7      	blt.n	8002582 <d_encoding+0x30e>
 8002592:	696c      	ldr	r4, [r5, #20]
 8002594:	69a8      	ldr	r0, [r5, #24]
 8002596:	4284      	cmp	r4, r0
 8002598:	f280 8113 	bge.w	80027c2 <d_encoding+0x54e>
 800259c:	6928      	ldr	r0, [r5, #16]
 800259e:	1c63      	adds	r3, r4, #1
 80025a0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80025a4:	616b      	str	r3, [r5, #20]
 80025a6:	eb10 0384 	adds.w	r3, r0, r4, lsl #2
 80025aa:	f000 810a 	beq.w	80027c2 <d_encoding+0x54e>
 80025ae:	f800 8024 	strb.w	r8, [r0, r4, lsl #2]
 80025b2:	605f      	str	r7, [r3, #4]
 80025b4:	6099      	str	r1, [r3, #8]
 80025b6:	68ef      	ldr	r7, [r5, #12]
 80025b8:	1a76      	subs	r6, r6, r1
 80025ba:	440f      	add	r7, r1
 80025bc:	60ef      	str	r7, [r5, #12]
 80025be:	2a00      	cmp	r2, #0
 80025c0:	f000 8121 	beq.w	8002806 <d_encoding+0x592>
 80025c4:	213f      	movs	r1, #63	; 0x3f
 80025c6:	4628      	mov	r0, r5
 80025c8:	f7fd fdc0 	bl	800014c <d_make_comp>
 80025cc:	4602      	mov	r2, r0
 80025ce:	2800      	cmp	r0, #0
 80025d0:	f43f ae81 	beq.w	80022d6 <d_encoding+0x62>
 80025d4:	2e00      	cmp	r6, #0
 80025d6:	dcca      	bgt.n	800256e <d_encoding+0x2fa>
 80025d8:	4628      	mov	r0, r5
 80025da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025de:	2300      	movs	r3, #0
 80025e0:	213e      	movs	r1, #62	; 0x3e
 80025e2:	f7fd bdb3 	b.w	800014c <d_make_comp>
 80025e6:	4628      	mov	r0, r5
 80025e8:	f7fe fe7c 	bl	80012e4 <d_name>
 80025ec:	2300      	movs	r3, #0
 80025ee:	4602      	mov	r2, r0
 80025f0:	2113      	movs	r1, #19
 80025f2:	4628      	mov	r0, r5
 80025f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025f8:	f7fd bda8 	b.w	800014c <d_make_comp>
 80025fc:	789a      	ldrb	r2, [r3, #2]
 80025fe:	2100      	movs	r1, #0
 8002600:	4628      	mov	r0, r5
 8002602:	2a00      	cmp	r2, #0
 8002604:	f000 8101 	beq.w	800280a <d_encoding+0x596>
 8002608:	1cda      	adds	r2, r3, #3
 800260a:	60ea      	str	r2, [r5, #12]
 800260c:	789b      	ldrb	r3, [r3, #2]
 800260e:	2b6e      	cmp	r3, #110	; 0x6e
 8002610:	f040 80fb 	bne.w	800280a <d_encoding+0x596>
 8002614:	f7ff fe2e 	bl	8002274 <d_encoding>
 8002618:	2300      	movs	r3, #0
 800261a:	4602      	mov	r2, r0
 800261c:	2149      	movs	r1, #73	; 0x49
 800261e:	4628      	mov	r0, r5
 8002620:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002624:	f7fd bd92 	b.w	800014c <d_make_comp>
 8002628:	4628      	mov	r0, r5
 800262a:	f7fe fe5b 	bl	80012e4 <d_name>
 800262e:	4604      	mov	r4, r0
 8002630:	4628      	mov	r0, r5
 8002632:	f7fd ff05 	bl	8000440 <d_number_component>
 8002636:	4622      	mov	r2, r4
 8002638:	4603      	mov	r3, r0
 800263a:	2116      	movs	r1, #22
 800263c:	4628      	mov	r0, r5
 800263e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002642:	f7fd bd83 	b.w	800014c <d_make_comp>
 8002646:	2176      	movs	r1, #118	; 0x76
 8002648:	4628      	mov	r0, r5
 800264a:	f7fe f883 	bl	8000754 <d_call_offset>
 800264e:	2800      	cmp	r0, #0
 8002650:	f43f ae41 	beq.w	80022d6 <d_encoding+0x62>
 8002654:	2100      	movs	r1, #0
 8002656:	4628      	mov	r0, r5
 8002658:	f7ff fe0c 	bl	8002274 <d_encoding>
 800265c:	2300      	movs	r3, #0
 800265e:	4602      	mov	r2, r0
 8002660:	2110      	movs	r1, #16
 8002662:	4628      	mov	r0, r5
 8002664:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002668:	f7fd bd70 	b.w	800014c <d_make_comp>
 800266c:	2168      	movs	r1, #104	; 0x68
 800266e:	4628      	mov	r0, r5
 8002670:	f7fe f870 	bl	8000754 <d_call_offset>
 8002674:	2800      	cmp	r0, #0
 8002676:	f43f ae2e 	beq.w	80022d6 <d_encoding+0x62>
 800267a:	2100      	movs	r1, #0
 800267c:	4628      	mov	r0, r5
 800267e:	f7ff fdf9 	bl	8002274 <d_encoding>
 8002682:	2300      	movs	r3, #0
 8002684:	4602      	mov	r2, r0
 8002686:	210f      	movs	r1, #15
 8002688:	4628      	mov	r0, r5
 800268a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800268e:	f7fd bd5d 	b.w	800014c <d_make_comp>
 8002692:	2100      	movs	r1, #0
 8002694:	4628      	mov	r0, r5
 8002696:	f7fe f85d 	bl	8000754 <d_call_offset>
 800269a:	2800      	cmp	r0, #0
 800269c:	f43f ae1b 	beq.w	80022d6 <d_encoding+0x62>
 80026a0:	2100      	movs	r1, #0
 80026a2:	4628      	mov	r0, r5
 80026a4:	f7fe f856 	bl	8000754 <d_call_offset>
 80026a8:	2800      	cmp	r0, #0
 80026aa:	f43f ae14 	beq.w	80022d6 <d_encoding+0x62>
 80026ae:	2100      	movs	r1, #0
 80026b0:	4628      	mov	r0, r5
 80026b2:	f7ff fddf 	bl	8002274 <d_encoding>
 80026b6:	2300      	movs	r3, #0
 80026b8:	4602      	mov	r2, r0
 80026ba:	2111      	movs	r1, #17
 80026bc:	4628      	mov	r0, r5
 80026be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026c2:	f7fd bd43 	b.w	800014c <d_make_comp>
 80026c6:	4628      	mov	r0, r5
 80026c8:	f7fe fe0c 	bl	80012e4 <d_name>
 80026cc:	2300      	movs	r3, #0
 80026ce:	4602      	mov	r2, r0
 80026d0:	2115      	movs	r1, #21
 80026d2:	4628      	mov	r0, r5
 80026d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026d8:	f7fd bd38 	b.w	800014c <d_make_comp>
 80026dc:	310f      	adds	r1, #15
 80026de:	6329      	str	r1, [r5, #48]	; 0x30
 80026e0:	4628      	mov	r0, r5
 80026e2:	f7fe ffb7 	bl	8001654 <d_type>
 80026e6:	2300      	movs	r3, #0
 80026e8:	4602      	mov	r2, r0
 80026ea:	2109      	movs	r1, #9
 80026ec:	4628      	mov	r0, r5
 80026ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026f2:	f7fd bd2b 	b.w	800014c <d_make_comp>
 80026f6:	310a      	adds	r1, #10
 80026f8:	6329      	str	r1, [r5, #48]	; 0x30
 80026fa:	4628      	mov	r0, r5
 80026fc:	f7fe ffaa 	bl	8001654 <d_type>
 8002700:	2300      	movs	r3, #0
 8002702:	4602      	mov	r2, r0
 8002704:	210a      	movs	r1, #10
 8002706:	4628      	mov	r0, r5
 8002708:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800270c:	f7fd bd1e 	b.w	800014c <d_make_comp>
 8002710:	4628      	mov	r0, r5
 8002712:	f7fe ff9f 	bl	8001654 <d_type>
 8002716:	2300      	movs	r3, #0
 8002718:	4602      	mov	r2, r0
 800271a:	210d      	movs	r1, #13
 800271c:	4628      	mov	r0, r5
 800271e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002722:	f7fd bd13 	b.w	800014c <d_make_comp>
 8002726:	4628      	mov	r0, r5
 8002728:	f7fe ff94 	bl	8001654 <d_type>
 800272c:	2300      	movs	r3, #0
 800272e:	4602      	mov	r2, r0
 8002730:	2112      	movs	r1, #18
 8002732:	4628      	mov	r0, r5
 8002734:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002738:	f7fd bd08 	b.w	800014c <d_make_comp>
 800273c:	4628      	mov	r0, r5
 800273e:	f7fe ff89 	bl	8001654 <d_type>
 8002742:	2300      	movs	r3, #0
 8002744:	4602      	mov	r2, r0
 8002746:	210c      	movs	r1, #12
 8002748:	4628      	mov	r0, r5
 800274a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800274e:	f7fd bcfd 	b.w	800014c <d_make_comp>
 8002752:	4628      	mov	r0, r5
 8002754:	f7fe fdc6 	bl	80012e4 <d_name>
 8002758:	2300      	movs	r3, #0
 800275a:	4602      	mov	r2, r0
 800275c:	2114      	movs	r1, #20
 800275e:	4628      	mov	r0, r5
 8002760:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002764:	f7fd bcf2 	b.w	800014c <d_make_comp>
 8002768:	4628      	mov	r0, r5
 800276a:	f7fe ff73 	bl	8001654 <d_type>
 800276e:	2300      	movs	r3, #0
 8002770:	4602      	mov	r2, r0
 8002772:	210e      	movs	r1, #14
 8002774:	4628      	mov	r0, r5
 8002776:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800277a:	f7fd bce7 	b.w	800014c <d_make_comp>
 800277e:	4628      	mov	r0, r5
 8002780:	f7fe ff68 	bl	8001654 <d_type>
 8002784:	4604      	mov	r4, r0
 8002786:	f105 000c 	add.w	r0, r5, #12
 800278a:	f7fd fe2f 	bl	80003ec <d_number.isra.0>
 800278e:	2800      	cmp	r0, #0
 8002790:	f6ff ada1 	blt.w	80022d6 <d_encoding+0x62>
 8002794:	68eb      	ldr	r3, [r5, #12]
 8002796:	781a      	ldrb	r2, [r3, #0]
 8002798:	2a5f      	cmp	r2, #95	; 0x5f
 800279a:	f47f ad9c 	bne.w	80022d6 <d_encoding+0x62>
 800279e:	3301      	adds	r3, #1
 80027a0:	60eb      	str	r3, [r5, #12]
 80027a2:	4628      	mov	r0, r5
 80027a4:	f7fe ff56 	bl	8001654 <d_type>
 80027a8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80027aa:	4602      	mov	r2, r0
 80027ac:	1d59      	adds	r1, r3, #5
 80027ae:	6329      	str	r1, [r5, #48]	; 0x30
 80027b0:	4623      	mov	r3, r4
 80027b2:	4628      	mov	r0, r5
 80027b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027b8:	210b      	movs	r1, #11
 80027ba:	f7fd bcc7 	b.w	800014c <d_make_comp>
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	e574      	b.n	80022ac <d_encoding+0x38>
 80027c2:	68eb      	ldr	r3, [r5, #12]
 80027c4:	2400      	movs	r4, #0
 80027c6:	440b      	add	r3, r1
 80027c8:	60eb      	str	r3, [r5, #12]
 80027ca:	e585      	b.n	80022d8 <d_encoding+0x64>
 80027cc:	787b      	ldrb	r3, [r7, #1]
 80027ce:	2b53      	cmp	r3, #83	; 0x53
 80027d0:	d027      	beq.n	8002822 <d_encoding+0x5ae>
 80027d2:	2b5f      	cmp	r3, #95	; 0x5f
 80027d4:	d023      	beq.n	800281e <d_encoding+0x5aa>
 80027d6:	2b24      	cmp	r3, #36	; 0x24
 80027d8:	f47f ad7d 	bne.w	80022d6 <d_encoding+0x62>
 80027dc:	4618      	mov	r0, r3
 80027de:	6969      	ldr	r1, [r5, #20]
 80027e0:	69ab      	ldr	r3, [r5, #24]
 80027e2:	4299      	cmp	r1, r3
 80027e4:	da1f      	bge.n	8002826 <d_encoding+0x5b2>
 80027e6:	692c      	ldr	r4, [r5, #16]
 80027e8:	1c4f      	adds	r7, r1, #1
 80027ea:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80027ee:	eb14 0381 	adds.w	r3, r4, r1, lsl #2
 80027f2:	616f      	str	r7, [r5, #20]
 80027f4:	d017      	beq.n	8002826 <d_encoding+0x5b2>
 80027f6:	f804 9021 	strb.w	r9, [r4, r1, lsl #2]
 80027fa:	6058      	str	r0, [r3, #4]
 80027fc:	68ef      	ldr	r7, [r5, #12]
 80027fe:	3e02      	subs	r6, #2
 8002800:	3702      	adds	r7, #2
 8002802:	60ef      	str	r7, [r5, #12]
 8002804:	e6db      	b.n	80025be <d_encoding+0x34a>
 8002806:	461a      	mov	r2, r3
 8002808:	e6e4      	b.n	80025d4 <d_encoding+0x360>
 800280a:	f7ff fd33 	bl	8002274 <d_encoding>
 800280e:	2300      	movs	r3, #0
 8002810:	4602      	mov	r2, r0
 8002812:	2148      	movs	r1, #72	; 0x48
 8002814:	4628      	mov	r0, r5
 8002816:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800281a:	f7fd bc97 	b.w	800014c <d_make_comp>
 800281e:	202e      	movs	r0, #46	; 0x2e
 8002820:	e7dd      	b.n	80027de <d_encoding+0x56a>
 8002822:	202f      	movs	r0, #47	; 0x2f
 8002824:	e7db      	b.n	80027de <d_encoding+0x56a>
 8002826:	68eb      	ldr	r3, [r5, #12]
 8002828:	2400      	movs	r4, #0
 800282a:	3302      	adds	r3, #2
 800282c:	60eb      	str	r3, [r5, #12]
 800282e:	e553      	b.n	80022d8 <d_encoding+0x64>

08002830 <d_expr_primary>:
 8002830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002832:	68c2      	ldr	r2, [r0, #12]
 8002834:	7813      	ldrb	r3, [r2, #0]
 8002836:	2b4c      	cmp	r3, #76	; 0x4c
 8002838:	d001      	beq.n	800283e <d_expr_primary+0xe>
 800283a:	2000      	movs	r0, #0
 800283c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800283e:	1c53      	adds	r3, r2, #1
 8002840:	60c3      	str	r3, [r0, #12]
 8002842:	7851      	ldrb	r1, [r2, #1]
 8002844:	4605      	mov	r5, r0
 8002846:	295f      	cmp	r1, #95	; 0x5f
 8002848:	d03a      	beq.n	80028c0 <d_expr_primary+0x90>
 800284a:	295a      	cmp	r1, #90	; 0x5a
 800284c:	d03f      	beq.n	80028ce <d_expr_primary+0x9e>
 800284e:	f7fe ff01 	bl	8001654 <d_type>
 8002852:	2800      	cmp	r0, #0
 8002854:	d0f1      	beq.n	800283a <d_expr_primary+0xa>
 8002856:	7803      	ldrb	r3, [r0, #0]
 8002858:	2b27      	cmp	r3, #39	; 0x27
 800285a:	d046      	beq.n	80028ea <d_expr_primary+0xba>
 800285c:	68ee      	ldr	r6, [r5, #12]
 800285e:	7833      	ldrb	r3, [r6, #0]
 8002860:	2b6e      	cmp	r3, #110	; 0x6e
 8002862:	d04b      	beq.n	80028fc <d_expr_primary+0xcc>
 8002864:	213c      	movs	r1, #60	; 0x3c
 8002866:	2b45      	cmp	r3, #69	; 0x45
 8002868:	d04e      	beq.n	8002908 <d_expr_primary+0xd8>
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0e5      	beq.n	800283a <d_expr_primary+0xa>
 800286e:	4633      	mov	r3, r6
 8002870:	e001      	b.n	8002876 <d_expr_primary+0x46>
 8002872:	2c00      	cmp	r4, #0
 8002874:	d0e1      	beq.n	800283a <d_expr_primary+0xa>
 8002876:	3301      	adds	r3, #1
 8002878:	60eb      	str	r3, [r5, #12]
 800287a:	781c      	ldrb	r4, [r3, #0]
 800287c:	2c45      	cmp	r4, #69	; 0x45
 800287e:	d1f8      	bne.n	8002872 <d_expr_primary+0x42>
 8002880:	1b9c      	subs	r4, r3, r6
 8002882:	696b      	ldr	r3, [r5, #20]
 8002884:	69aa      	ldr	r2, [r5, #24]
 8002886:	4293      	cmp	r3, r2
 8002888:	da2d      	bge.n	80028e6 <d_expr_primary+0xb6>
 800288a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800288e:	692f      	ldr	r7, [r5, #16]
 8002890:	3301      	adds	r3, #1
 8002892:	0092      	lsls	r2, r2, #2
 8002894:	616b      	str	r3, [r5, #20]
 8002896:	18bb      	adds	r3, r7, r2
 8002898:	d025      	beq.n	80028e6 <d_expr_primary+0xb6>
 800289a:	b326      	cbz	r6, 80028e6 <d_expr_primary+0xb6>
 800289c:	b31c      	cbz	r4, 80028e6 <d_expr_primary+0xb6>
 800289e:	f04f 0e00 	mov.w	lr, #0
 80028a2:	f807 e002 	strb.w	lr, [r7, r2]
 80028a6:	605e      	str	r6, [r3, #4]
 80028a8:	609c      	str	r4, [r3, #8]
 80028aa:	4602      	mov	r2, r0
 80028ac:	4628      	mov	r0, r5
 80028ae:	f7fd fc4d 	bl	800014c <d_make_comp>
 80028b2:	68eb      	ldr	r3, [r5, #12]
 80028b4:	781a      	ldrb	r2, [r3, #0]
 80028b6:	2a45      	cmp	r2, #69	; 0x45
 80028b8:	d1bf      	bne.n	800283a <d_expr_primary+0xa>
 80028ba:	3301      	adds	r3, #1
 80028bc:	60eb      	str	r3, [r5, #12]
 80028be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028c0:	1c93      	adds	r3, r2, #2
 80028c2:	60c3      	str	r3, [r0, #12]
 80028c4:	7892      	ldrb	r2, [r2, #2]
 80028c6:	2a5a      	cmp	r2, #90	; 0x5a
 80028c8:	bf18      	it	ne
 80028ca:	2000      	movne	r0, #0
 80028cc:	d107      	bne.n	80028de <d_expr_primary+0xae>
 80028ce:	3301      	adds	r3, #1
 80028d0:	60eb      	str	r3, [r5, #12]
 80028d2:	2100      	movs	r1, #0
 80028d4:	4628      	mov	r0, r5
 80028d6:	f7ff fccd 	bl	8002274 <d_encoding>
 80028da:	68eb      	ldr	r3, [r5, #12]
 80028dc:	781a      	ldrb	r2, [r3, #0]
 80028de:	2a45      	cmp	r2, #69	; 0x45
 80028e0:	d0eb      	beq.n	80028ba <d_expr_primary+0x8a>
 80028e2:	2000      	movs	r0, #0
 80028e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028e6:	2300      	movs	r3, #0
 80028e8:	e7df      	b.n	80028aa <d_expr_primary+0x7a>
 80028ea:	6843      	ldr	r3, [r0, #4]
 80028ec:	7c1a      	ldrb	r2, [r3, #16]
 80028ee:	2a00      	cmp	r2, #0
 80028f0:	d0b4      	beq.n	800285c <d_expr_primary+0x2c>
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80028f6:	1a9b      	subs	r3, r3, r2
 80028f8:	632b      	str	r3, [r5, #48]	; 0x30
 80028fa:	e7af      	b.n	800285c <d_expr_primary+0x2c>
 80028fc:	1c72      	adds	r2, r6, #1
 80028fe:	60ea      	str	r2, [r5, #12]
 8002900:	7873      	ldrb	r3, [r6, #1]
 8002902:	213d      	movs	r1, #61	; 0x3d
 8002904:	4616      	mov	r6, r2
 8002906:	e7ae      	b.n	8002866 <d_expr_primary+0x36>
 8002908:	2400      	movs	r4, #0
 800290a:	e7ba      	b.n	8002882 <d_expr_primary+0x52>

0800290c <d_print_comp_inner>:
 800290c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002910:	4604      	mov	r4, r0
 8002912:	b095      	sub	sp, #84	; 0x54
 8002914:	2a00      	cmp	r2, #0
 8002916:	f000 80db 	beq.w	8002ad0 <d_print_comp_inner+0x1c4>
 800291a:	f8d0 7118 	ldr.w	r7, [r0, #280]	; 0x118
 800291e:	2f00      	cmp	r7, #0
 8002920:	f040 80c2 	bne.w	8002aa8 <d_print_comp_inner+0x19c>
 8002924:	7813      	ldrb	r3, [r2, #0]
 8002926:	4688      	mov	r8, r1
 8002928:	4615      	mov	r5, r2
 800292a:	2b4d      	cmp	r3, #77	; 0x4d
 800292c:	f201 81ea 	bhi.w	8003d04 <d_print_comp_inner+0x13f8>
 8002930:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002934:	043b0459 	.word	0x043b0459
 8002938:	03a4043b 	.word	0x03a4043b
 800293c:	048804a4 	.word	0x048804a4
 8002940:	038e04e9 	.word	0x038e04e9
 8002944:	0330037c 	.word	0x0330037c
 8002948:	030a0356 	.word	0x030a0356
 800294c:	029802e4 	.word	0x029802e4
 8002950:	027202be 	.word	0x027202be
 8002954:	01f0024c 	.word	0x01f0024c
 8002958:	01ca0226 	.word	0x01ca0226
 800295c:	015801a4 	.word	0x015801a4
 8002960:	0132017e 	.word	0x0132017e
 8002964:	00f2010b 	.word	0x00f2010b
 8002968:	00f200f2 	.word	0x00f200f2
 800296c:	00d400d4 	.word	0x00d400d4
 8002970:	00d400d4 	.word	0x00d400d4
 8002974:	00d400d4 	.word	0x00d400d4
 8002978:	06d800d4 	.word	0x06d800d4
 800297c:	00d406d8 	.word	0x00d406d8
 8002980:	06ac00d4 	.word	0x06ac00d4
 8002984:	069606ff 	.word	0x069606ff
 8002988:	07040720 	.word	0x07040720
 800298c:	0704078c 	.word	0x0704078c
 8002990:	057b057b 	.word	0x057b057b
 8002994:	06080632 	.word	0x06080632
 8002998:	09e805e2 	.word	0x09e805e2
 800299c:	069105af 	.word	0x069105af
 80029a0:	004e0656 	.word	0x004e0656
 80029a4:	09500484 	.word	0x09500484
 80029a8:	08e308e3 	.word	0x08e308e3
 80029ac:	08b208b2 	.word	0x08b208b2
 80029b0:	0548088c 	.word	0x0548088c
 80029b4:	08e8053a 	.word	0x08e8053a
 80029b8:	09c20514 	.word	0x09c20514
 80029bc:	099c0918 	.word	0x099c0918
 80029c0:	07cf09e8 	.word	0x07cf09e8
 80029c4:	07f50866 	.word	0x07f50866
 80029c8:	0412081b 	.word	0x0412081b
 80029cc:	055200d4 	.word	0x055200d4
 80029d0:	68ab      	ldr	r3, [r5, #8]
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b38      	cmp	r3, #56	; 0x38
 80029d6:	d17b      	bne.n	8002ad0 <d_print_comp_inner+0x1c4>
 80029d8:	686a      	ldr	r2, [r5, #4]
 80029da:	6853      	ldr	r3, [r2, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	7859      	ldrb	r1, [r3, #1]
 80029e0:	2963      	cmp	r1, #99	; 0x63
 80029e2:	f002 8150 	beq.w	8004c86 <d_print_comp_inner+0x237a>
 80029e6:	f105 0308 	add.w	r3, r5, #8
 80029ea:	4641      	mov	r1, r8
 80029ec:	4620      	mov	r0, r4
 80029ee:	f003 fbc9 	bl	8006184 <d_maybe_print_fold_expression.isra.15>
 80029f2:	4606      	mov	r6, r0
 80029f4:	2800      	cmp	r0, #0
 80029f6:	d157      	bne.n	8002aa8 <d_print_comp_inner+0x19c>
 80029f8:	686b      	ldr	r3, [r5, #4]
 80029fa:	781a      	ldrb	r2, [r3, #0]
 80029fc:	2a31      	cmp	r2, #49	; 0x31
 80029fe:	f002 8371 	beq.w	80050e4 <d_print_comp_inner+0x27d8>
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	49c7      	ldr	r1, [pc, #796]	; (8002d24 <d_print_comp_inner+0x418>)
 8002a06:	6818      	ldr	r0, [r3, #0]
 8002a08:	f003 feec 	bl	80067e4 <strcmp>
 8002a0c:	68ab      	ldr	r3, [r5, #8]
 8002a0e:	b920      	cbnz	r0, 8002a1a <d_print_comp_inner+0x10e>
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	7811      	ldrb	r1, [r2, #0]
 8002a14:	2903      	cmp	r1, #3
 8002a16:	f002 83ab 	beq.w	8005170 <d_print_comp_inner+0x2864>
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	4641      	mov	r1, r8
 8002a1e:	4620      	mov	r0, r4
 8002a20:	f003 fb4c 	bl	80060bc <d_print_subexpr>
 8002a24:	686f      	ldr	r7, [r5, #4]
 8002a26:	49c0      	ldr	r1, [pc, #768]	; (8002d28 <d_print_comp_inner+0x41c>)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f8d3 9000 	ldr.w	r9, [r3]
 8002a2e:	4648      	mov	r0, r9
 8002a30:	f003 fed8 	bl	80067e4 <strcmp>
 8002a34:	4606      	mov	r6, r0
 8002a36:	2800      	cmp	r0, #0
 8002a38:	f042 8275 	bne.w	8004f26 <d_print_comp_inner+0x261a>
 8002a3c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002a40:	29ff      	cmp	r1, #255	; 0xff
 8002a42:	f002 8450 	beq.w	80052e6 <d_print_comp_inner+0x29da>
 8002a46:	235b      	movs	r3, #91	; 0x5b
 8002a48:	1c4a      	adds	r2, r1, #1
 8002a4a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002a4e:	5463      	strb	r3, [r4, r1]
 8002a50:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002a54:	68ab      	ldr	r3, [r5, #8]
 8002a56:	4641      	mov	r1, r8
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	4620      	mov	r0, r4
 8002a5c:	f002 fd00 	bl	8005460 <d_print_comp>
 8002a60:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002a64:	29ff      	cmp	r1, #255	; 0xff
 8002a66:	f002 842b 	beq.w	80052c0 <d_print_comp_inner+0x29b4>
 8002a6a:	235d      	movs	r3, #93	; 0x5d
 8002a6c:	1c4a      	adds	r2, r1, #1
 8002a6e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002a72:	5463      	strb	r3, [r4, r1]
 8002a74:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002a78:	686b      	ldr	r3, [r5, #4]
 8002a7a:	781a      	ldrb	r2, [r3, #0]
 8002a7c:	2a31      	cmp	r2, #49	; 0x31
 8002a7e:	d113      	bne.n	8002aa8 <d_print_comp_inner+0x19c>
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	2a01      	cmp	r2, #1
 8002a86:	d10f      	bne.n	8002aa8 <d_print_comp_inner+0x19c>
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b3e      	cmp	r3, #62	; 0x3e
 8002a8e:	d10b      	bne.n	8002aa8 <d_print_comp_inner+0x19c>
 8002a90:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002a94:	29ff      	cmp	r1, #255	; 0xff
 8002a96:	f002 8488 	beq.w	80053aa <d_print_comp_inner+0x2a9e>
 8002a9a:	2329      	movs	r3, #41	; 0x29
 8002a9c:	1c4a      	adds	r2, r1, #1
 8002a9e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002aa2:	5463      	strb	r3, [r4, r1]
 8002aa4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002aa8:	b015      	add	sp, #84	; 0x54
 8002aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002aae:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f2c1 84a8 	blt.w	8004408 <d_print_comp_inner+0x1afc>
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f002 8438 	beq.w	800532e <d_print_comp_inner+0x2a22>
 8002abe:	6880      	ldr	r0, [r0, #8]
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b110      	cbz	r0, 8002aca <d_print_comp_inner+0x1be>
 8002ac4:	7802      	ldrb	r2, [r0, #0]
 8002ac6:	2a2f      	cmp	r2, #47	; 0x2f
 8002ac8:	d0f6      	beq.n	8002ab8 <d_print_comp_inner+0x1ac>
 8002aca:	b10f      	cbz	r7, 8002ad0 <d_print_comp_inner+0x1c4>
 8002acc:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8002ad6:	b015      	add	sp, #84	; 0x54
 8002ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002adc:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	ab14      	add	r3, sp, #80	; 0x50
 8002ae4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 8002ae8:	f843 cd40 	str.w	ip, [r3, #-64]!
 8002aec:	9505      	str	r5, [sp, #20]
 8002aee:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8002af2:	9106      	str	r1, [sp, #24]
 8002af4:	9207      	str	r2, [sp, #28]
 8002af6:	686a      	ldr	r2, [r5, #4]
 8002af8:	4641      	mov	r1, r8
 8002afa:	4620      	mov	r0, r4
 8002afc:	f002 fcb0 	bl	8005460 <d_print_comp>
 8002b00:	9b06      	ldr	r3, [sp, #24]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f001 838d 	beq.w	8004222 <d_print_comp_inner+0x1916>
 8002b08:	9b04      	ldr	r3, [sp, #16]
 8002b0a:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8002b0e:	2f00      	cmp	r7, #0
 8002b10:	d0ca      	beq.n	8002aa8 <d_print_comp_inner+0x19c>
 8002b12:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
 8002b16:	e7c7      	b.n	8002aa8 <d_print_comp_inner+0x19c>
 8002b18:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
 8002b1c:	f1bc 0f00 	cmp.w	ip, #0
 8002b20:	d0de      	beq.n	8002ae0 <d_print_comp_inner+0x1d4>
 8002b22:	4662      	mov	r2, ip
 8002b24:	e005      	b.n	8002b32 <d_print_comp_inner+0x226>
 8002b26:	428b      	cmp	r3, r1
 8002b28:	f001 86bc 	beq.w	80048a4 <d_print_comp_inner+0x1f98>
 8002b2c:	6812      	ldr	r2, [r2, #0]
 8002b2e:	2a00      	cmp	r2, #0
 8002b30:	d0d6      	beq.n	8002ae0 <d_print_comp_inner+0x1d4>
 8002b32:	6890      	ldr	r0, [r2, #8]
 8002b34:	2800      	cmp	r0, #0
 8002b36:	d1f9      	bne.n	8002b2c <d_print_comp_inner+0x220>
 8002b38:	6851      	ldr	r1, [r2, #4]
 8002b3a:	7809      	ldrb	r1, [r1, #0]
 8002b3c:	f1a1 0e19 	sub.w	lr, r1, #25
 8002b40:	f1be 0f02 	cmp.w	lr, #2
 8002b44:	d9ef      	bls.n	8002b26 <d_print_comp_inner+0x21a>
 8002b46:	4607      	mov	r7, r0
 8002b48:	e7ca      	b.n	8002ae0 <d_print_comp_inner+0x1d4>
 8002b4a:	68af      	ldr	r7, [r5, #8]
 8002b4c:	686d      	ldr	r5, [r5, #4]
 8002b4e:	2f00      	cmp	r7, #0
 8002b50:	d0aa      	beq.n	8002aa8 <d_print_comp_inner+0x19c>
 8002b52:	f04f 0800 	mov.w	r8, #0
 8002b56:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002b5a:	442f      	add	r7, r5
 8002b5c:	e008      	b.n	8002b70 <d_print_comp_inner+0x264>
 8002b5e:	460b      	mov	r3, r1
 8002b60:	3101      	adds	r1, #1
 8002b62:	42bd      	cmp	r5, r7
 8002b64:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002b68:	54e6      	strb	r6, [r4, r3]
 8002b6a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8002b6e:	d09b      	beq.n	8002aa8 <d_print_comp_inner+0x19c>
 8002b70:	29ff      	cmp	r1, #255	; 0xff
 8002b72:	f815 6b01 	ldrb.w	r6, [r5], #1
 8002b76:	d1f2      	bne.n	8002b5e <d_print_comp_inner+0x252>
 8002b78:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002b7c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002b80:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002b84:	4620      	mov	r0, r4
 8002b86:	4798      	blx	r3
 8002b88:	2101      	movs	r1, #1
 8002b8a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8002b8e:	2300      	movs	r3, #0
 8002b90:	440a      	add	r2, r1
 8002b92:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8002b96:	e7e4      	b.n	8002b62 <d_print_comp_inner+0x256>
 8002b98:	4e64      	ldr	r6, [pc, #400]	; (8002d2c <d_print_comp_inner+0x420>)
 8002b9a:	f04f 0900 	mov.w	r9, #0
 8002b9e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002ba2:	f106 0a11 	add.w	sl, r6, #17
 8002ba6:	e009      	b.n	8002bbc <d_print_comp_inner+0x2b0>
 8002ba8:	460b      	mov	r3, r1
 8002baa:	3101      	adds	r1, #1
 8002bac:	4556      	cmp	r6, sl
 8002bae:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002bb2:	54e7      	strb	r7, [r4, r3]
 8002bb4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002bb8:	f001 829a 	beq.w	80040f0 <d_print_comp_inner+0x17e4>
 8002bbc:	29ff      	cmp	r1, #255	; 0xff
 8002bbe:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002bc2:	d1f1      	bne.n	8002ba8 <d_print_comp_inner+0x29c>
 8002bc4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002bc8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002bcc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002bd0:	4620      	mov	r0, r4
 8002bd2:	4798      	blx	r3
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8002bda:	2300      	movs	r3, #0
 8002bdc:	440a      	add	r2, r1
 8002bde:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8002be2:	e7e3      	b.n	8002bac <d_print_comp_inner+0x2a0>
 8002be4:	4e52      	ldr	r6, [pc, #328]	; (8002d30 <d_print_comp_inner+0x424>)
 8002be6:	f04f 0900 	mov.w	r9, #0
 8002bea:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002bee:	f106 0a19 	add.w	sl, r6, #25
 8002bf2:	e009      	b.n	8002c08 <d_print_comp_inner+0x2fc>
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	3101      	adds	r1, #1
 8002bf8:	4556      	cmp	r6, sl
 8002bfa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002bfe:	54e7      	strb	r7, [r4, r3]
 8002c00:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002c04:	f001 82ac 	beq.w	8004160 <d_print_comp_inner+0x1854>
 8002c08:	29ff      	cmp	r1, #255	; 0xff
 8002c0a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002c0e:	d1f1      	bne.n	8002bf4 <d_print_comp_inner+0x2e8>
 8002c10:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002c14:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002c18:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	4798      	blx	r3
 8002c20:	2101      	movs	r1, #1
 8002c22:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8002c26:	2300      	movs	r3, #0
 8002c28:	440a      	add	r2, r1
 8002c2a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8002c2e:	e7e3      	b.n	8002bf8 <d_print_comp_inner+0x2ec>
 8002c30:	4e40      	ldr	r6, [pc, #256]	; (8002d34 <d_print_comp_inner+0x428>)
 8002c32:	f04f 0900 	mov.w	r9, #0
 8002c36:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002c3a:	f106 0a15 	add.w	sl, r6, #21
 8002c3e:	e009      	b.n	8002c54 <d_print_comp_inner+0x348>
 8002c40:	460b      	mov	r3, r1
 8002c42:	3101      	adds	r1, #1
 8002c44:	4556      	cmp	r6, sl
 8002c46:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002c4a:	54e7      	strb	r7, [r4, r3]
 8002c4c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002c50:	f001 8255 	beq.w	80040fe <d_print_comp_inner+0x17f2>
 8002c54:	29ff      	cmp	r1, #255	; 0xff
 8002c56:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002c5a:	d1f1      	bne.n	8002c40 <d_print_comp_inner+0x334>
 8002c5c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002c60:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002c64:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002c68:	4620      	mov	r0, r4
 8002c6a:	4798      	blx	r3
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8002c72:	2300      	movs	r3, #0
 8002c74:	440a      	add	r2, r1
 8002c76:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8002c7a:	e7e3      	b.n	8002c44 <d_print_comp_inner+0x338>
 8002c7c:	4e2e      	ldr	r6, [pc, #184]	; (8002d38 <d_print_comp_inner+0x42c>)
 8002c7e:	f04f 0900 	mov.w	r9, #0
 8002c82:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002c86:	f106 0a16 	add.w	sl, r6, #22
 8002c8a:	e009      	b.n	8002ca0 <d_print_comp_inner+0x394>
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	3101      	adds	r1, #1
 8002c90:	4556      	cmp	r6, sl
 8002c92:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002c96:	54e7      	strb	r7, [r4, r3]
 8002c98:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002c9c:	f001 8267 	beq.w	800416e <d_print_comp_inner+0x1862>
 8002ca0:	29ff      	cmp	r1, #255	; 0xff
 8002ca2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002ca6:	d1f1      	bne.n	8002c8c <d_print_comp_inner+0x380>
 8002ca8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002cac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002cb0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	4798      	blx	r3
 8002cb8:	2101      	movs	r1, #1
 8002cba:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	440a      	add	r2, r1
 8002cc2:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8002cc6:	e7e3      	b.n	8002c90 <d_print_comp_inner+0x384>
 8002cc8:	4e1c      	ldr	r6, [pc, #112]	; (8002d3c <d_print_comp_inner+0x430>)
 8002cca:	f04f 0900 	mov.w	r9, #0
 8002cce:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002cd2:	f106 0a13 	add.w	sl, r6, #19
 8002cd6:	e009      	b.n	8002cec <d_print_comp_inner+0x3e0>
 8002cd8:	460b      	mov	r3, r1
 8002cda:	3101      	adds	r1, #1
 8002cdc:	45b2      	cmp	sl, r6
 8002cde:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002ce2:	54e7      	strb	r7, [r4, r3]
 8002ce4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002ce8:	f001 807c 	beq.w	8003de4 <d_print_comp_inner+0x14d8>
 8002cec:	29ff      	cmp	r1, #255	; 0xff
 8002cee:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002cf2:	d1f1      	bne.n	8002cd8 <d_print_comp_inner+0x3cc>
 8002cf4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002cf8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002cfc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002d00:	4620      	mov	r0, r4
 8002d02:	4798      	blx	r3
 8002d04:	2101      	movs	r1, #1
 8002d06:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	440a      	add	r2, r1
 8002d0e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8002d12:	e7e3      	b.n	8002cdc <d_print_comp_inner+0x3d0>
 8002d14:	4e0a      	ldr	r6, [pc, #40]	; (8002d40 <d_print_comp_inner+0x434>)
 8002d16:	f04f 0900 	mov.w	r9, #0
 8002d1a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002d1e:	f106 0a1a 	add.w	sl, r6, #26
 8002d22:	e019      	b.n	8002d58 <d_print_comp_inner+0x44c>
 8002d24:	0800d6c4 	.word	0x0800d6c4
 8002d28:	0800d8c0 	.word	0x0800d8c0
 8002d2c:	0800d84f 	.word	0x0800d84f
 8002d30:	0800d81b 	.word	0x0800d81b
 8002d34:	0800d837 	.word	0x0800d837
 8002d38:	0800d803 	.word	0x0800d803
 8002d3c:	0800d7ef 	.word	0x0800d7ef
 8002d40:	0800d7c3 	.word	0x0800d7c3
 8002d44:	460b      	mov	r3, r1
 8002d46:	3101      	adds	r1, #1
 8002d48:	4556      	cmp	r6, sl
 8002d4a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002d4e:	54e7      	strb	r7, [r4, r3]
 8002d50:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002d54:	f001 8054 	beq.w	8003e00 <d_print_comp_inner+0x14f4>
 8002d58:	29ff      	cmp	r1, #255	; 0xff
 8002d5a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002d5e:	d1f1      	bne.n	8002d44 <d_print_comp_inner+0x438>
 8002d60:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d64:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d68:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	4798      	blx	r3
 8002d70:	2101      	movs	r1, #1
 8002d72:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8002d76:	2300      	movs	r3, #0
 8002d78:	440a      	add	r2, r1
 8002d7a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8002d7e:	e7e3      	b.n	8002d48 <d_print_comp_inner+0x43c>
 8002d80:	4eb5      	ldr	r6, [pc, #724]	; (8003058 <d_print_comp_inner+0x74c>)
 8002d82:	f04f 0900 	mov.w	r9, #0
 8002d86:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002d8a:	f106 0a0f 	add.w	sl, r6, #15
 8002d8e:	e009      	b.n	8002da4 <d_print_comp_inner+0x498>
 8002d90:	460b      	mov	r3, r1
 8002d92:	3101      	adds	r1, #1
 8002d94:	4556      	cmp	r6, sl
 8002d96:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002d9a:	54e7      	strb	r7, [r4, r3]
 8002d9c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002da0:	f001 8027 	beq.w	8003df2 <d_print_comp_inner+0x14e6>
 8002da4:	29ff      	cmp	r1, #255	; 0xff
 8002da6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002daa:	d1f1      	bne.n	8002d90 <d_print_comp_inner+0x484>
 8002dac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002db0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002db4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002db8:	4620      	mov	r0, r4
 8002dba:	4798      	blx	r3
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	440a      	add	r2, r1
 8002dc6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8002dca:	e7e3      	b.n	8002d94 <d_print_comp_inner+0x488>
 8002dcc:	4ea3      	ldr	r6, [pc, #652]	; (800305c <d_print_comp_inner+0x750>)
 8002dce:	f04f 0900 	mov.w	r9, #0
 8002dd2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002dd6:	f106 0a11 	add.w	sl, r6, #17
 8002dda:	e009      	b.n	8002df0 <d_print_comp_inner+0x4e4>
 8002ddc:	460b      	mov	r3, r1
 8002dde:	3101      	adds	r1, #1
 8002de0:	4556      	cmp	r6, sl
 8002de2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002de6:	54e7      	strb	r7, [r4, r3]
 8002de8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002dec:	f001 800f 	beq.w	8003e0e <d_print_comp_inner+0x1502>
 8002df0:	29ff      	cmp	r1, #255	; 0xff
 8002df2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002df6:	d1f1      	bne.n	8002ddc <d_print_comp_inner+0x4d0>
 8002df8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002dfc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002e00:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002e04:	4620      	mov	r0, r4
 8002e06:	4798      	blx	r3
 8002e08:	2101      	movs	r1, #1
 8002e0a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8002e0e:	2300      	movs	r3, #0
 8002e10:	440a      	add	r2, r1
 8002e12:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8002e16:	e7e3      	b.n	8002de0 <d_print_comp_inner+0x4d4>
 8002e18:	4e91      	ldr	r6, [pc, #580]	; (8003060 <d_print_comp_inner+0x754>)
 8002e1a:	f04f 0900 	mov.w	r9, #0
 8002e1e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002e22:	f106 0a15 	add.w	sl, r6, #21
 8002e26:	e009      	b.n	8002e3c <d_print_comp_inner+0x530>
 8002e28:	460b      	mov	r3, r1
 8002e2a:	3101      	adds	r1, #1
 8002e2c:	4556      	cmp	r6, sl
 8002e2e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002e32:	54e7      	strb	r7, [r4, r3]
 8002e34:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002e38:	f000 87b8 	beq.w	8003dac <d_print_comp_inner+0x14a0>
 8002e3c:	29ff      	cmp	r1, #255	; 0xff
 8002e3e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002e42:	d1f1      	bne.n	8002e28 <d_print_comp_inner+0x51c>
 8002e44:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002e48:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002e4c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002e50:	4620      	mov	r0, r4
 8002e52:	4798      	blx	r3
 8002e54:	2101      	movs	r1, #1
 8002e56:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	440a      	add	r2, r1
 8002e5e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8002e62:	e7e3      	b.n	8002e2c <d_print_comp_inner+0x520>
 8002e64:	4e7f      	ldr	r6, [pc, #508]	; (8003064 <d_print_comp_inner+0x758>)
 8002e66:	f04f 0900 	mov.w	r9, #0
 8002e6a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002e6e:	f106 0a12 	add.w	sl, r6, #18
 8002e72:	e009      	b.n	8002e88 <d_print_comp_inner+0x57c>
 8002e74:	460b      	mov	r3, r1
 8002e76:	3101      	adds	r1, #1
 8002e78:	45b2      	cmp	sl, r6
 8002e7a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002e7e:	54e7      	strb	r7, [r4, r3]
 8002e80:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002e84:	f000 87a0 	beq.w	8003dc8 <d_print_comp_inner+0x14bc>
 8002e88:	29ff      	cmp	r1, #255	; 0xff
 8002e8a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002e8e:	d1f1      	bne.n	8002e74 <d_print_comp_inner+0x568>
 8002e90:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002e94:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002e98:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002e9c:	4620      	mov	r0, r4
 8002e9e:	4798      	blx	r3
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	440a      	add	r2, r1
 8002eaa:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8002eae:	e7e3      	b.n	8002e78 <d_print_comp_inner+0x56c>
 8002eb0:	4e6d      	ldr	r6, [pc, #436]	; (8003068 <d_print_comp_inner+0x75c>)
 8002eb2:	f04f 0900 	mov.w	r9, #0
 8002eb6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002eba:	f106 0a10 	add.w	sl, r6, #16
 8002ebe:	e009      	b.n	8002ed4 <d_print_comp_inner+0x5c8>
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	3101      	adds	r1, #1
 8002ec4:	4556      	cmp	r6, sl
 8002ec6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002eca:	54e7      	strb	r7, [r4, r3]
 8002ecc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002ed0:	f000 8773 	beq.w	8003dba <d_print_comp_inner+0x14ae>
 8002ed4:	29ff      	cmp	r1, #255	; 0xff
 8002ed6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002eda:	d1f1      	bne.n	8002ec0 <d_print_comp_inner+0x5b4>
 8002edc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002ee0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002ee4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002ee8:	4620      	mov	r0, r4
 8002eea:	4798      	blx	r3
 8002eec:	2101      	movs	r1, #1
 8002eee:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	440a      	add	r2, r1
 8002ef6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8002efa:	e7e3      	b.n	8002ec4 <d_print_comp_inner+0x5b8>
 8002efc:	4e5b      	ldr	r6, [pc, #364]	; (800306c <d_print_comp_inner+0x760>)
 8002efe:	f04f 0900 	mov.w	r9, #0
 8002f02:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002f06:	f106 0a0d 	add.w	sl, r6, #13
 8002f0a:	e009      	b.n	8002f20 <d_print_comp_inner+0x614>
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	3101      	adds	r1, #1
 8002f10:	4556      	cmp	r6, sl
 8002f12:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002f16:	54e7      	strb	r7, [r4, r3]
 8002f18:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002f1c:	f000 875b 	beq.w	8003dd6 <d_print_comp_inner+0x14ca>
 8002f20:	29ff      	cmp	r1, #255	; 0xff
 8002f22:	f816 7b01 	ldrb.w	r7, [r6], #1
 8002f26:	d1f1      	bne.n	8002f0c <d_print_comp_inner+0x600>
 8002f28:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f2c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f30:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002f34:	4620      	mov	r0, r4
 8002f36:	4798      	blx	r3
 8002f38:	2101      	movs	r1, #1
 8002f3a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8002f3e:	2300      	movs	r3, #0
 8002f40:	440a      	add	r2, r1
 8002f42:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8002f46:	e7e3      	b.n	8002f10 <d_print_comp_inner+0x604>
 8002f48:	4e49      	ldr	r6, [pc, #292]	; (8003070 <d_print_comp_inner+0x764>)
 8002f4a:	f04f 0900 	mov.w	r9, #0
 8002f4e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002f52:	f106 0a18 	add.w	sl, r6, #24
 8002f56:	e009      	b.n	8002f6c <d_print_comp_inner+0x660>
 8002f58:	460b      	mov	r3, r1
 8002f5a:	3101      	adds	r1, #1
 8002f5c:	45b2      	cmp	sl, r6
 8002f5e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002f62:	54e7      	strb	r7, [r4, r3]
 8002f64:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002f68:	f000 86e8 	beq.w	8003d3c <d_print_comp_inner+0x1430>
 8002f6c:	29ff      	cmp	r1, #255	; 0xff
 8002f6e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002f72:	d1f1      	bne.n	8002f58 <d_print_comp_inner+0x64c>
 8002f74:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f78:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f7c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002f80:	4620      	mov	r0, r4
 8002f82:	4798      	blx	r3
 8002f84:	2101      	movs	r1, #1
 8002f86:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	440a      	add	r2, r1
 8002f8e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8002f92:	e7e3      	b.n	8002f5c <d_print_comp_inner+0x650>
 8002f94:	4e37      	ldr	r6, [pc, #220]	; (8003074 <d_print_comp_inner+0x768>)
 8002f96:	f04f 0900 	mov.w	r9, #0
 8002f9a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002f9e:	f106 0a0b 	add.w	sl, r6, #11
 8002fa2:	e009      	b.n	8002fb8 <d_print_comp_inner+0x6ac>
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	3101      	adds	r1, #1
 8002fa8:	45b2      	cmp	sl, r6
 8002faa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002fae:	54e7      	strb	r7, [r4, r3]
 8002fb0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002fb4:	f000 87cf 	beq.w	8003f56 <d_print_comp_inner+0x164a>
 8002fb8:	29ff      	cmp	r1, #255	; 0xff
 8002fba:	f816 7b01 	ldrb.w	r7, [r6], #1
 8002fbe:	d1f1      	bne.n	8002fa4 <d_print_comp_inner+0x698>
 8002fc0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002fc4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002fc8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002fcc:	4620      	mov	r0, r4
 8002fce:	4798      	blx	r3
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	440a      	add	r2, r1
 8002fda:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8002fde:	e7e3      	b.n	8002fa8 <d_print_comp_inner+0x69c>
 8002fe0:	4e25      	ldr	r6, [pc, #148]	; (8003078 <d_print_comp_inner+0x76c>)
 8002fe2:	f04f 0900 	mov.w	r9, #0
 8002fe6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002fea:	f106 0a08 	add.w	sl, r6, #8
 8002fee:	e009      	b.n	8003004 <d_print_comp_inner+0x6f8>
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	3101      	adds	r1, #1
 8002ff4:	45b2      	cmp	sl, r6
 8002ff6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002ffa:	54e7      	strb	r7, [r4, r3]
 8002ffc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003000:	f000 86cd 	beq.w	8003d9e <d_print_comp_inner+0x1492>
 8003004:	29ff      	cmp	r1, #255	; 0xff
 8003006:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 800300a:	d1f1      	bne.n	8002ff0 <d_print_comp_inner+0x6e4>
 800300c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003010:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003014:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003018:	4620      	mov	r0, r4
 800301a:	4798      	blx	r3
 800301c:	2101      	movs	r1, #1
 800301e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8003022:	2300      	movs	r3, #0
 8003024:	440a      	add	r2, r1
 8003026:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800302a:	e7e3      	b.n	8002ff4 <d_print_comp_inner+0x6e8>
 800302c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003030:	29ff      	cmp	r1, #255	; 0xff
 8003032:	f001 8480 	beq.w	8004936 <d_print_comp_inner+0x202a>
 8003036:	1c4a      	adds	r2, r1, #1
 8003038:	237e      	movs	r3, #126	; 0x7e
 800303a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800303e:	5463      	strb	r3, [r4, r1]
 8003040:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003044:	4641      	mov	r1, r8
 8003046:	68aa      	ldr	r2, [r5, #8]
 8003048:	4620      	mov	r0, r4
 800304a:	f002 fa09 	bl	8005460 <d_print_comp>
 800304e:	e52b      	b.n	8002aa8 <d_print_comp_inner+0x19c>
 8003050:	68aa      	ldr	r2, [r5, #8]
 8003052:	f002 fa05 	bl	8005460 <d_print_comp>
 8003056:	e527      	b.n	8002aa8 <d_print_comp_inner+0x19c>
 8003058:	0800d7df 	.word	0x0800d7df
 800305c:	0800d7af 	.word	0x0800d7af
 8003060:	0800d7ab 	.word	0x0800d7ab
 8003064:	0800d783 	.word	0x0800d783
 8003068:	0800d797 	.word	0x0800d797
 800306c:	0800d774 	.word	0x0800d774
 8003070:	0800d74f 	.word	0x0800d74f
 8003074:	0800d738 	.word	0x0800d738
 8003078:	0800d743 	.word	0x0800d743
 800307c:	2200      	movs	r2, #0
 800307e:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8003082:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
 8003086:	686e      	ldr	r6, [r5, #4]
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	2e00      	cmp	r6, #0
 800308c:	f000 8651 	beq.w	8003d32 <d_print_comp_inner+0x1426>
 8003090:	f10d 0910 	add.w	r9, sp, #16
 8003094:	4617      	mov	r7, r2
 8003096:	4696      	mov	lr, r2
 8003098:	464b      	mov	r3, r9
 800309a:	f8d0 c110 	ldr.w	ip, [r0, #272]	; 0x110
 800309e:	7831      	ldrb	r1, [r6, #0]
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	f1a1 021c 	sub.w	r2, r1, #28
 80030a6:	2a04      	cmp	r2, #4
 80030a8:	605e      	str	r6, [r3, #4]
 80030aa:	f8c3 e008 	str.w	lr, [r3, #8]
 80030ae:	f8c3 c00c 	str.w	ip, [r3, #12]
 80030b2:	f107 0701 	add.w	r7, r7, #1
 80030b6:	4618      	mov	r0, r3
 80030b8:	f240 862f 	bls.w	8003d1a <d_print_comp_inner+0x140e>
 80030bc:	294c      	cmp	r1, #76	; 0x4c
 80030be:	f000 862c 	beq.w	8003d1a <d_print_comp_inner+0x140e>
 80030c2:	2904      	cmp	r1, #4
 80030c4:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80030c8:	f001 87c2 	beq.w	8005050 <d_print_comp_inner+0x2744>
 80030cc:	2902      	cmp	r1, #2
 80030ce:	d11a      	bne.n	8003106 <d_print_comp_inner+0x7fa>
 80030d0:	f8d6 b008 	ldr.w	fp, [r6, #8]
 80030d4:	f89b 3000 	ldrb.w	r3, [fp]
 80030d8:	2b46      	cmp	r3, #70	; 0x46
 80030da:	f002 803c 	beq.w	8005156 <d_print_comp_inner+0x284a>
 80030de:	462b      	mov	r3, r5
 80030e0:	eb09 1e07 	add.w	lr, r9, r7, lsl #4
 80030e4:	9601      	str	r6, [sp, #4]
 80030e6:	465d      	mov	r5, fp
 80030e8:	4676      	mov	r6, lr
 80030ea:	46a2      	mov	sl, r4
 80030ec:	469b      	mov	fp, r3
 80030ee:	782b      	ldrb	r3, [r5, #0]
 80030f0:	f1a3 021c 	sub.w	r2, r3, #28
 80030f4:	2a04      	cmp	r2, #4
 80030f6:	f241 8062 	bls.w	80041be <d_print_comp_inner+0x18b2>
 80030fa:	2b4c      	cmp	r3, #76	; 0x4c
 80030fc:	f001 805f 	beq.w	80041be <d_print_comp_inner+0x18b2>
 8003100:	4654      	mov	r4, sl
 8003102:	465d      	mov	r5, fp
 8003104:	9e01      	ldr	r6, [sp, #4]
 8003106:	68aa      	ldr	r2, [r5, #8]
 8003108:	4641      	mov	r1, r8
 800310a:	4620      	mov	r0, r4
 800310c:	f002 f9a8 	bl	8005460 <d_print_comp>
 8003110:	7833      	ldrb	r3, [r6, #0]
 8003112:	2b04      	cmp	r3, #4
 8003114:	f002 8027 	beq.w	8005166 <d_print_comp_inner+0x285a>
 8003118:	2520      	movs	r5, #32
 800311a:	eb09 1907 	add.w	r9, r9, r7, lsl #4
 800311e:	f859 6c08 	ldr.w	r6, [r9, #-8]
 8003122:	3f01      	subs	r7, #1
 8003124:	b986      	cbnz	r6, 8003148 <d_print_comp_inner+0x83c>
 8003126:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800312a:	29ff      	cmp	r1, #255	; 0xff
 800312c:	f002 804a 	beq.w	80051c4 <d_print_comp_inner+0x28b8>
 8003130:	1c4b      	adds	r3, r1, #1
 8003132:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003136:	f859 2c0c 	ldr.w	r2, [r9, #-12]
 800313a:	5465      	strb	r5, [r4, r1]
 800313c:	4620      	mov	r0, r4
 800313e:	4641      	mov	r1, r8
 8003140:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003144:	f002 f99c 	bl	8005480 <d_print_mod>
 8003148:	f1a9 0910 	sub.w	r9, r9, #16
 800314c:	2f00      	cmp	r7, #0
 800314e:	d1e6      	bne.n	800311e <d_print_comp_inner+0x812>
 8003150:	9b00      	ldr	r3, [sp, #0]
 8003152:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003156:	e4a7      	b.n	8002aa8 <d_print_comp_inner+0x19c>
 8003158:	4ed2      	ldr	r6, [pc, #840]	; (80034a4 <d_print_comp_inner+0xb98>)
 800315a:	686a      	ldr	r2, [r5, #4]
 800315c:	f002 f980 	bl	8005460 <d_print_comp>
 8003160:	f04f 0900 	mov.w	r9, #0
 8003164:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003168:	f106 0a05 	add.w	sl, r6, #5
 800316c:	e009      	b.n	8003182 <d_print_comp_inner+0x876>
 800316e:	460b      	mov	r3, r1
 8003170:	3101      	adds	r1, #1
 8003172:	45b2      	cmp	sl, r6
 8003174:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003178:	54e7      	strb	r7, [r4, r3]
 800317a:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 800317e:	f000 86d7 	beq.w	8003f30 <d_print_comp_inner+0x1624>
 8003182:	29ff      	cmp	r1, #255	; 0xff
 8003184:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003188:	d1f1      	bne.n	800316e <d_print_comp_inner+0x862>
 800318a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800318e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003192:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003196:	4620      	mov	r0, r4
 8003198:	4798      	blx	r3
 800319a:	2101      	movs	r1, #1
 800319c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80031a0:	2300      	movs	r3, #0
 80031a2:	440a      	add	r2, r1
 80031a4:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80031a8:	e7e3      	b.n	8003172 <d_print_comp_inner+0x866>
 80031aa:	686a      	ldr	r2, [r5, #4]
 80031ac:	f002 f958 	bl	8005460 <d_print_comp>
 80031b0:	f018 0904 	ands.w	r9, r8, #4
 80031b4:	f001 82af 	beq.w	8004716 <d_print_comp_inner+0x1e0a>
 80031b8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80031bc:	29ff      	cmp	r1, #255	; 0xff
 80031be:	f001 85a1 	beq.w	8004d04 <d_print_comp_inner+0x23f8>
 80031c2:	1c4a      	adds	r2, r1, #1
 80031c4:	232e      	movs	r3, #46	; 0x2e
 80031c6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80031ca:	5463      	strb	r3, [r4, r1]
 80031cc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80031d0:	68ad      	ldr	r5, [r5, #8]
 80031d2:	782b      	ldrb	r3, [r5, #0]
 80031d4:	2b46      	cmp	r3, #70	; 0x46
 80031d6:	f001 83d1 	beq.w	800497c <d_print_comp_inner+0x2070>
 80031da:	462a      	mov	r2, r5
 80031dc:	4641      	mov	r1, r8
 80031de:	4620      	mov	r0, r4
 80031e0:	f002 f93e 	bl	8005460 <d_print_comp>
 80031e4:	e460      	b.n	8002aa8 <d_print_comp_inner+0x19c>
 80031e6:	f011 0804 	ands.w	r8, r1, #4
 80031ea:	f041 8090 	bne.w	800430e <d_print_comp_inner+0x1a02>
 80031ee:	68af      	ldr	r7, [r5, #8]
 80031f0:	686d      	ldr	r5, [r5, #4]
 80031f2:	2f00      	cmp	r7, #0
 80031f4:	f43f ac58 	beq.w	8002aa8 <d_print_comp_inner+0x19c>
 80031f8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80031fc:	442f      	add	r7, r5
 80031fe:	e009      	b.n	8003214 <d_print_comp_inner+0x908>
 8003200:	460b      	mov	r3, r1
 8003202:	3101      	adds	r1, #1
 8003204:	42bd      	cmp	r5, r7
 8003206:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800320a:	54e6      	strb	r6, [r4, r3]
 800320c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003210:	f43f ac4a 	beq.w	8002aa8 <d_print_comp_inner+0x19c>
 8003214:	29ff      	cmp	r1, #255	; 0xff
 8003216:	f815 6b01 	ldrb.w	r6, [r5], #1
 800321a:	d1f1      	bne.n	8003200 <d_print_comp_inner+0x8f4>
 800321c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003220:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003224:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003228:	4620      	mov	r0, r4
 800322a:	4798      	blx	r3
 800322c:	2101      	movs	r1, #1
 800322e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8003232:	2300      	movs	r3, #0
 8003234:	440a      	add	r2, r1
 8003236:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800323a:	e7e3      	b.n	8003204 <d_print_comp_inner+0x8f8>
 800323c:	2301      	movs	r3, #1
 800323e:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8003242:	e431      	b.n	8002aa8 <d_print_comp_inner+0x19c>
 8003244:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
 8003248:	2b00      	cmp	r3, #0
 800324a:	f041 810a 	bne.w	8004462 <d_print_comp_inner+0x1b56>
 800324e:	1d29      	adds	r1, r5, #4
 8003250:	f7fd faaa 	bl	80007a8 <d_lookup_template_argument.isra.6>
 8003254:	2800      	cmp	r0, #0
 8003256:	f43f ac3b 	beq.w	8002ad0 <d_print_comp_inner+0x1c4>
 800325a:	7803      	ldrb	r3, [r0, #0]
 800325c:	2b2f      	cmp	r3, #47	; 0x2f
 800325e:	f001 8401 	beq.w	8004a64 <d_print_comp_inner+0x2158>
 8003262:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 8003266:	4602      	mov	r2, r0
 8003268:	682b      	ldr	r3, [r5, #0]
 800326a:	4641      	mov	r1, r8
 800326c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8003270:	4620      	mov	r0, r4
 8003272:	f002 f8f5 	bl	8005460 <d_print_comp>
 8003276:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
 800327a:	e415      	b.n	8002aa8 <d_print_comp_inner+0x19c>
 800327c:	2300      	movs	r3, #0
 800327e:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
 8003282:	f8d0 7144 	ldr.w	r7, [r0, #324]	; 0x144
 8003286:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 800328a:	f8c0 5144 	str.w	r5, [r0, #324]	; 0x144
 800328e:	f011 0f04 	tst.w	r1, #4
 8003292:	686e      	ldr	r6, [r5, #4]
 8003294:	d005      	beq.n	80032a2 <d_print_comp_inner+0x996>
 8003296:	7833      	ldrb	r3, [r6, #0]
 8003298:	b91b      	cbnz	r3, 80032a2 <d_print_comp_inner+0x996>
 800329a:	68b2      	ldr	r2, [r6, #8]
 800329c:	2a06      	cmp	r2, #6
 800329e:	f001 8543 	beq.w	8004d28 <d_print_comp_inner+0x241c>
 80032a2:	4632      	mov	r2, r6
 80032a4:	4641      	mov	r1, r8
 80032a6:	4620      	mov	r0, r4
 80032a8:	f002 f8da 	bl	8005460 <d_print_comp>
 80032ac:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 80032b0:	2b3c      	cmp	r3, #60	; 0x3c
 80032b2:	f001 8279 	beq.w	80047a8 <d_print_comp_inner+0x1e9c>
 80032b6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80032ba:	2bff      	cmp	r3, #255	; 0xff
 80032bc:	f001 8490 	beq.w	8004be0 <d_print_comp_inner+0x22d4>
 80032c0:	1c59      	adds	r1, r3, #1
 80032c2:	223c      	movs	r2, #60	; 0x3c
 80032c4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80032c8:	54e2      	strb	r2, [r4, r3]
 80032ca:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80032ce:	4641      	mov	r1, r8
 80032d0:	68aa      	ldr	r2, [r5, #8]
 80032d2:	4620      	mov	r0, r4
 80032d4:	f002 f8c4 	bl	8005460 <d_print_comp>
 80032d8:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 80032dc:	2b3e      	cmp	r3, #62	; 0x3e
 80032de:	f001 823e 	beq.w	800475e <d_print_comp_inner+0x1e52>
 80032e2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80032e6:	2bff      	cmp	r3, #255	; 0xff
 80032e8:	f001 8467 	beq.w	8004bba <d_print_comp_inner+0x22ae>
 80032ec:	1c59      	adds	r1, r3, #1
 80032ee:	223e      	movs	r2, #62	; 0x3e
 80032f0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80032f4:	54e2      	strb	r2, [r4, r3]
 80032f6:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80032fa:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 80032fe:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
 8003302:	f7ff bbd1 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8003306:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800330a:	f1b9 0f00 	cmp.w	r9, #0
 800330e:	f001 8085 	beq.w	800441c <d_print_comp_inner+0x1b10>
 8003312:	4d65      	ldr	r5, [pc, #404]	; (80034a8 <d_print_comp_inner+0xb9c>)
 8003314:	f04f 0800 	mov.w	r8, #0
 8003318:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800331c:	1daf      	adds	r7, r5, #6
 800331e:	e009      	b.n	8003334 <d_print_comp_inner+0xa28>
 8003320:	460b      	mov	r3, r1
 8003322:	3101      	adds	r1, #1
 8003324:	42af      	cmp	r7, r5
 8003326:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800332a:	54e6      	strb	r6, [r4, r3]
 800332c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003330:	f000 8786 	beq.w	8004240 <d_print_comp_inner+0x1934>
 8003334:	29ff      	cmp	r1, #255	; 0xff
 8003336:	f815 6b01 	ldrb.w	r6, [r5], #1
 800333a:	d1f1      	bne.n	8003320 <d_print_comp_inner+0xa14>
 800333c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003340:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003344:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003348:	4620      	mov	r0, r4
 800334a:	4798      	blx	r3
 800334c:	2101      	movs	r1, #1
 800334e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8003352:	2300      	movs	r3, #0
 8003354:	440a      	add	r2, r1
 8003356:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800335a:	e7e3      	b.n	8003324 <d_print_comp_inner+0xa18>
 800335c:	4e53      	ldr	r6, [pc, #332]	; (80034ac <d_print_comp_inner+0xba0>)
 800335e:	f04f 0900 	mov.w	r9, #0
 8003362:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003366:	f106 0a0a 	add.w	sl, r6, #10
 800336a:	e009      	b.n	8003380 <d_print_comp_inner+0xa74>
 800336c:	460b      	mov	r3, r1
 800336e:	3101      	adds	r1, #1
 8003370:	4556      	cmp	r6, sl
 8003372:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003376:	54e7      	strb	r7, [r4, r3]
 8003378:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 800337c:	f000 8705 	beq.w	800418a <d_print_comp_inner+0x187e>
 8003380:	29ff      	cmp	r1, #255	; 0xff
 8003382:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003386:	d1f1      	bne.n	800336c <d_print_comp_inner+0xa60>
 8003388:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800338c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003390:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003394:	4620      	mov	r0, r4
 8003396:	4798      	blx	r3
 8003398:	2101      	movs	r1, #1
 800339a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 800339e:	2300      	movs	r3, #0
 80033a0:	440a      	add	r2, r1
 80033a2:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80033a6:	e7e3      	b.n	8003370 <d_print_comp_inner+0xa64>
 80033a8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80033ac:	792d      	ldrb	r5, [r5, #4]
 80033ae:	29ff      	cmp	r1, #255	; 0xff
 80033b0:	f001 82af 	beq.w	8004912 <d_print_comp_inner+0x2006>
 80033b4:	1c4b      	adds	r3, r1, #1
 80033b6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80033ba:	5465      	strb	r5, [r4, r1]
 80033bc:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80033c0:	f7ff bb72 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 80033c4:	686a      	ldr	r2, [r5, #4]
 80033c6:	f002 f84b 	bl	8005460 <d_print_comp>
 80033ca:	68aa      	ldr	r2, [r5, #8]
 80033cc:	4641      	mov	r1, r8
 80033ce:	4620      	mov	r0, r4
 80033d0:	f002 f846 	bl	8005460 <d_print_comp>
 80033d4:	f7ff bb68 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 80033d8:	4e35      	ldr	r6, [pc, #212]	; (80034b0 <d_print_comp_inner+0xba4>)
 80033da:	686a      	ldr	r2, [r5, #4]
 80033dc:	f002 f840 	bl	8005460 <d_print_comp>
 80033e0:	f04f 0900 	mov.w	r9, #0
 80033e4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80033e8:	f106 0a08 	add.w	sl, r6, #8
 80033ec:	e009      	b.n	8003402 <d_print_comp_inner+0xaf6>
 80033ee:	460b      	mov	r3, r1
 80033f0:	3101      	adds	r1, #1
 80033f2:	4556      	cmp	r6, sl
 80033f4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80033f8:	54e7      	strb	r7, [r4, r3]
 80033fa:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80033fe:	f000 850d 	beq.w	8003e1c <d_print_comp_inner+0x1510>
 8003402:	29ff      	cmp	r1, #255	; 0xff
 8003404:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003408:	d1f1      	bne.n	80033ee <d_print_comp_inner+0xae2>
 800340a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800340e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003412:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003416:	4620      	mov	r0, r4
 8003418:	4798      	blx	r3
 800341a:	2101      	movs	r1, #1
 800341c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8003420:	2300      	movs	r3, #0
 8003422:	440a      	add	r2, r1
 8003424:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003428:	e7e3      	b.n	80033f2 <d_print_comp_inner+0xae6>
 800342a:	686a      	ldr	r2, [r5, #4]
 800342c:	b10a      	cbz	r2, 8003432 <d_print_comp_inner+0xb26>
 800342e:	f002 f817 	bl	8005460 <d_print_comp>
 8003432:	68ab      	ldr	r3, [r5, #8]
 8003434:	2b00      	cmp	r3, #0
 8003436:	f43f ab37 	beq.w	8002aa8 <d_print_comp_inner+0x19c>
 800343a:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
 800343e:	2efd      	cmp	r6, #253	; 0xfd
 8003440:	f201 81c0 	bhi.w	80047c4 <d_print_comp_inner+0x1eb8>
 8003444:	4f1b      	ldr	r7, [pc, #108]	; (80034b4 <d_print_comp_inner+0xba8>)
 8003446:	f107 0b02 	add.w	fp, r7, #2
 800344a:	e00a      	b.n	8003462 <d_print_comp_inner+0xb56>
 800344c:	46b2      	mov	sl, r6
 800344e:	3601      	adds	r6, #1
 8003450:	455f      	cmp	r7, fp
 8003452:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8003456:	f804 900a 	strb.w	r9, [r4, sl]
 800345a:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 800345e:	f000 86c9 	beq.w	80041f4 <d_print_comp_inner+0x18e8>
 8003462:	2eff      	cmp	r6, #255	; 0xff
 8003464:	f817 9b01 	ldrb.w	r9, [r7], #1
 8003468:	d1f0      	bne.n	800344c <d_print_comp_inner+0xb40>
 800346a:	f04f 0300 	mov.w	r3, #0
 800346e:	4631      	mov	r1, r6
 8003470:	2601      	movs	r6, #1
 8003472:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8003476:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800347a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800347e:	4620      	mov	r0, r4
 8003480:	4798      	blx	r3
 8003482:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003486:	f04f 0a00 	mov.w	sl, #0
 800348a:	4433      	add	r3, r6
 800348c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003490:	e7de      	b.n	8003450 <d_print_comp_inner+0xb44>
 8003492:	4e09      	ldr	r6, [pc, #36]	; (80034b8 <d_print_comp_inner+0xbac>)
 8003494:	f04f 0900 	mov.w	r9, #0
 8003498:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800349c:	f106 0a09 	add.w	sl, r6, #9
 80034a0:	e016      	b.n	80034d0 <d_print_comp_inner+0xbc4>
 80034a2:	bf00      	nop
 80034a4:	0800d704 	.word	0x0800d704
 80034a8:	0800d914 	.word	0x0800d914
 80034ac:	0800d8fc 	.word	0x0800d8fc
 80034b0:	0800d97b 	.word	0x0800d97b
 80034b4:	0800d898 	.word	0x0800d898
 80034b8:	0800d8a7 	.word	0x0800d8a7
 80034bc:	460b      	mov	r3, r1
 80034be:	3101      	adds	r1, #1
 80034c0:	4556      	cmp	r6, sl
 80034c2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80034c6:	54e7      	strb	r7, [r4, r3]
 80034c8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80034cc:	f000 8596 	beq.w	8003ffc <d_print_comp_inner+0x16f0>
 80034d0:	29ff      	cmp	r1, #255	; 0xff
 80034d2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 80034d6:	d1f1      	bne.n	80034bc <d_print_comp_inner+0xbb0>
 80034d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80034dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80034e0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80034e4:	4620      	mov	r0, r4
 80034e6:	4798      	blx	r3
 80034e8:	2101      	movs	r1, #1
 80034ea:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80034ee:	2300      	movs	r3, #0
 80034f0:	440a      	add	r2, r1
 80034f2:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80034f6:	e7e3      	b.n	80034c0 <d_print_comp_inner+0xbb4>
 80034f8:	4ed2      	ldr	r6, [pc, #840]	; (8003844 <d_print_comp_inner+0xf38>)
 80034fa:	f04f 0900 	mov.w	r9, #0
 80034fe:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003502:	f106 0a09 	add.w	sl, r6, #9
 8003506:	e009      	b.n	800351c <d_print_comp_inner+0xc10>
 8003508:	460b      	mov	r3, r1
 800350a:	3101      	adds	r1, #1
 800350c:	4556      	cmp	r6, sl
 800350e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003512:	54e7      	strb	r7, [r4, r3]
 8003514:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003518:	f000 8599 	beq.w	800404e <d_print_comp_inner+0x1742>
 800351c:	29ff      	cmp	r1, #255	; 0xff
 800351e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003522:	d1f1      	bne.n	8003508 <d_print_comp_inner+0xbfc>
 8003524:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003528:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800352c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003530:	4620      	mov	r0, r4
 8003532:	4798      	blx	r3
 8003534:	2101      	movs	r1, #1
 8003536:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 800353a:	2300      	movs	r3, #0
 800353c:	440a      	add	r2, r1
 800353e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003542:	e7e3      	b.n	800350c <d_print_comp_inner+0xc00>
 8003544:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8003548:	4dbf      	ldr	r5, [pc, #764]	; (8003848 <d_print_comp_inner+0xf3c>)
 800354a:	f04f 0800 	mov.w	r8, #0
 800354e:	f8da 7008 	ldr.w	r7, [sl, #8]
 8003552:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003556:	f105 0908 	add.w	r9, r5, #8
 800355a:	e009      	b.n	8003570 <d_print_comp_inner+0xc64>
 800355c:	460b      	mov	r3, r1
 800355e:	3101      	adds	r1, #1
 8003560:	45a9      	cmp	r9, r5
 8003562:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003566:	54e6      	strb	r6, [r4, r3]
 8003568:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800356c:	f000 8508 	beq.w	8003f80 <d_print_comp_inner+0x1674>
 8003570:	29ff      	cmp	r1, #255	; 0xff
 8003572:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003576:	d1f1      	bne.n	800355c <d_print_comp_inner+0xc50>
 8003578:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800357c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003580:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003584:	4620      	mov	r0, r4
 8003586:	4798      	blx	r3
 8003588:	2101      	movs	r1, #1
 800358a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 800358e:	2300      	movs	r3, #0
 8003590:	440a      	add	r2, r1
 8003592:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003596:	e7e3      	b.n	8003560 <d_print_comp_inner+0xc54>
 8003598:	686a      	ldr	r2, [r5, #4]
 800359a:	68ae      	ldr	r6, [r5, #8]
 800359c:	b10a      	cbz	r2, 80035a2 <d_print_comp_inner+0xc96>
 800359e:	f001 ff5f 	bl	8005460 <d_print_comp>
 80035a2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80035a6:	2bff      	cmp	r3, #255	; 0xff
 80035a8:	f001 82b5 	beq.w	8004b16 <d_print_comp_inner+0x220a>
 80035ac:	1c5a      	adds	r2, r3, #1
 80035ae:	257b      	movs	r5, #123	; 0x7b
 80035b0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80035b4:	4641      	mov	r1, r8
 80035b6:	54e5      	strb	r5, [r4, r3]
 80035b8:	4632      	mov	r2, r6
 80035ba:	4620      	mov	r0, r4
 80035bc:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80035c0:	f001 ff4e 	bl	8005460 <d_print_comp>
 80035c4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80035c8:	29ff      	cmp	r1, #255	; 0xff
 80035ca:	f001 81e9 	beq.w	80049a0 <d_print_comp_inner+0x2094>
 80035ce:	1c4a      	adds	r2, r1, #1
 80035d0:	237d      	movs	r3, #125	; 0x7d
 80035d2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80035d6:	5463      	strb	r3, [r4, r1]
 80035d8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80035dc:	f7ff ba64 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 80035e0:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80035e4:	68ae      	ldr	r6, [r5, #8]
 80035e6:	f899 3000 	ldrb.w	r3, [r9]
 80035ea:	2b31      	cmp	r3, #49	; 0x31
 80035ec:	f000 87cc 	beq.w	8004588 <d_print_comp_inner+0x1c7c>
 80035f0:	2b33      	cmp	r3, #51	; 0x33
 80035f2:	f041 86d7 	bne.w	80053a4 <d_print_comp_inner+0x2a98>
 80035f6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80035fa:	29ff      	cmp	r1, #255	; 0xff
 80035fc:	f001 84c7 	beq.w	8004f8e <d_print_comp_inner+0x2682>
 8003600:	2328      	movs	r3, #40	; 0x28
 8003602:	1c4a      	adds	r2, r1, #1
 8003604:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003608:	5463      	strb	r3, [r4, r1]
 800360a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800360e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003612:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
 8003616:	a904      	add	r1, sp, #16
 8003618:	461a      	mov	r2, r3
 800361a:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
 800361e:	4620      	mov	r0, r4
 8003620:	4641      	mov	r1, r8
 8003622:	9304      	str	r3, [sp, #16]
 8003624:	9505      	str	r5, [sp, #20]
 8003626:	f7ff f971 	bl	800290c <d_print_comp_inner>
 800362a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800362e:	9b05      	ldr	r3, [sp, #20]
 8003630:	29ff      	cmp	r1, #255	; 0xff
 8003632:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003636:	f001 8499 	beq.w	8004f6c <d_print_comp_inner+0x2660>
 800363a:	2329      	movs	r3, #41	; 0x29
 800363c:	1c4a      	adds	r2, r1, #1
 800363e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003642:	5463      	strb	r3, [r4, r1]
 8003644:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003648:	4632      	mov	r2, r6
 800364a:	4641      	mov	r1, r8
 800364c:	4620      	mov	r0, r4
 800364e:	f002 fd35 	bl	80060bc <d_print_subexpr>
 8003652:	f7ff ba29 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8003656:	686a      	ldr	r2, [r5, #4]
 8003658:	f002 fcf2 	bl	8006040 <d_print_expr_op>
 800365c:	f7ff ba24 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8003660:	f011 0f20 	tst.w	r1, #32
 8003664:	f040 8753 	bne.w	800450e <d_print_comp_inner+0x1c02>
 8003668:	686a      	ldr	r2, [r5, #4]
 800366a:	b11a      	cbz	r2, 8003674 <d_print_comp_inner+0xd68>
 800366c:	f018 0640 	ands.w	r6, r8, #64	; 0x40
 8003670:	f001 81d1 	beq.w	8004a16 <d_print_comp_inner+0x210a>
 8003674:	f028 0860 	bic.w	r8, r8, #96	; 0x60
 8003678:	f105 0208 	add.w	r2, r5, #8
 800367c:	4641      	mov	r1, r8
 800367e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8003682:	4620      	mov	r0, r4
 8003684:	f002 fbe8 	bl	8005e58 <d_print_function_type.isra.11>
 8003688:	f7ff ba0e 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 800368c:	f011 0804 	ands.w	r8, r1, #4
 8003690:	686b      	ldr	r3, [r5, #4]
 8003692:	f040 8613 	bne.w	80042bc <d_print_comp_inner+0x19b0>
 8003696:	e893 00a0 	ldmia.w	r3, {r5, r7}
 800369a:	2f00      	cmp	r7, #0
 800369c:	f43f aa04 	beq.w	8002aa8 <d_print_comp_inner+0x19c>
 80036a0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80036a4:	442f      	add	r7, r5
 80036a6:	e009      	b.n	80036bc <d_print_comp_inner+0xdb0>
 80036a8:	460b      	mov	r3, r1
 80036aa:	3101      	adds	r1, #1
 80036ac:	42bd      	cmp	r5, r7
 80036ae:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80036b2:	54e6      	strb	r6, [r4, r3]
 80036b4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80036b8:	f43f a9f6 	beq.w	8002aa8 <d_print_comp_inner+0x19c>
 80036bc:	29ff      	cmp	r1, #255	; 0xff
 80036be:	f815 6b01 	ldrb.w	r6, [r5], #1
 80036c2:	d1f1      	bne.n	80036a8 <d_print_comp_inner+0xd9c>
 80036c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80036c8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80036cc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80036d0:	4620      	mov	r0, r4
 80036d2:	4798      	blx	r3
 80036d4:	2101      	movs	r1, #1
 80036d6:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80036da:	2300      	movs	r3, #0
 80036dc:	440a      	add	r2, r1
 80036de:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80036e2:	e7e3      	b.n	80036ac <d_print_comp_inner+0xda0>
 80036e4:	6869      	ldr	r1, [r5, #4]
 80036e6:	f8d0 711c 	ldr.w	r7, [r0, #284]	; 0x11c
 80036ea:	780b      	ldrb	r3, [r1, #0]
 80036ec:	2f00      	cmp	r7, #0
 80036ee:	f040 85e2 	bne.w	80042b6 <d_print_comp_inner+0x19aa>
 80036f2:	2b05      	cmp	r3, #5
 80036f4:	f001 81c8 	beq.w	8004a88 <d_print_comp_inner+0x217c>
 80036f8:	2b23      	cmp	r3, #35	; 0x23
 80036fa:	f000 868a 	beq.w	8004412 <d_print_comp_inner+0x1b06>
 80036fe:	782a      	ldrb	r2, [r5, #0]
 8003700:	429a      	cmp	r2, r3
 8003702:	f000 8686 	beq.w	8004412 <d_print_comp_inner+0x1b06>
 8003706:	2b24      	cmp	r3, #36	; 0x24
 8003708:	f47f a9e8 	bne.w	8002adc <d_print_comp_inner+0x1d0>
 800370c:	2300      	movs	r3, #0
 800370e:	684a      	ldr	r2, [r1, #4]
 8003710:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 8003714:	a814      	add	r0, sp, #80	; 0x50
 8003716:	f840 1d40 	str.w	r1, [r0, #-64]!
 800371a:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 800371e:	9505      	str	r5, [sp, #20]
 8003720:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 8003724:	9306      	str	r3, [sp, #24]
 8003726:	9107      	str	r1, [sp, #28]
 8003728:	2a00      	cmp	r2, #0
 800372a:	f47f a9e5 	bne.w	8002af8 <d_print_comp_inner+0x1ec>
 800372e:	f7ff b9e2 	b.w	8002af6 <d_print_comp_inner+0x1ea>
 8003732:	686a      	ldr	r2, [r5, #4]
 8003734:	f001 fe94 	bl	8005460 <d_print_comp>
 8003738:	f7ff b9b6 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 800373c:	2700      	movs	r7, #0
 800373e:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
 8003742:	ab14      	add	r3, sp, #80	; 0x50
 8003744:	f843 2d40 	str.w	r2, [r3, #-64]!
 8003748:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 800374c:	f8d0 6110 	ldr.w	r6, [r0, #272]	; 0x110
 8003750:	68aa      	ldr	r2, [r5, #8]
 8003752:	9505      	str	r5, [sp, #20]
 8003754:	9706      	str	r7, [sp, #24]
 8003756:	9607      	str	r6, [sp, #28]
 8003758:	f001 fe82 	bl	8005460 <d_print_comp>
 800375c:	9b06      	ldr	r3, [sp, #24]
 800375e:	b923      	cbnz	r3, 800376a <d_print_comp_inner+0xe5e>
 8003760:	462a      	mov	r2, r5
 8003762:	4641      	mov	r1, r8
 8003764:	4620      	mov	r0, r4
 8003766:	f001 fe8b 	bl	8005480 <d_print_mod>
 800376a:	9b04      	ldr	r3, [sp, #16]
 800376c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003770:	f7ff b99a 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8003774:	f8d0 a114 	ldr.w	sl, [r0, #276]	; 0x114
 8003778:	2200      	movs	r2, #0
 800377a:	4651      	mov	r1, sl
 800377c:	f10d 0950 	add.w	r9, sp, #80	; 0x50
 8003780:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8003784:	f849 ad40 	str.w	sl, [r9, #-64]!
 8003788:	f8cd a000 	str.w	sl, [sp]
 800378c:	f8c0 9114 	str.w	r9, [r0, #276]	; 0x114
 8003790:	9505      	str	r5, [sp, #20]
 8003792:	9206      	str	r2, [sp, #24]
 8003794:	9307      	str	r3, [sp, #28]
 8003796:	2900      	cmp	r1, #0
 8003798:	f001 83a3 	beq.w	8004ee2 <d_print_comp_inner+0x25d6>
 800379c:	684b      	ldr	r3, [r1, #4]
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	3b19      	subs	r3, #25
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	f201 839d 	bhi.w	8004ee2 <d_print_comp_inner+0x25d6>
 80037a8:	46ac      	mov	ip, r5
 80037aa:	2701      	movs	r7, #1
 80037ac:	460e      	mov	r6, r1
 80037ae:	464d      	mov	r5, r9
 80037b0:	e004      	b.n	80037bc <d_print_comp_inner+0xeb0>
 80037b2:	6873      	ldr	r3, [r6, #4]
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	3b19      	subs	r3, #25
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d81c      	bhi.n	80037f6 <d_print_comp_inner+0xeea>
 80037bc:	68b3      	ldr	r3, [r6, #8]
 80037be:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 80037c2:	b9ab      	cbnz	r3, 80037f0 <d_print_comp_inner+0xee4>
 80037c4:	2f03      	cmp	r7, #3
 80037c6:	f201 80fd 	bhi.w	80049c4 <d_print_comp_inner+0x20b8>
 80037ca:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80037ce:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
 80037d2:	eb0e 0b0a 	add.w	fp, lr, sl
 80037d6:	f1ab 0e40 	sub.w	lr, fp, #64	; 0x40
 80037da:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80037de:	2301      	movs	r3, #1
 80037e0:	f84b 5c40 	str.w	r5, [fp, #-64]
 80037e4:	eb09 050a 	add.w	r5, r9, sl
 80037e8:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 80037ec:	3701      	adds	r7, #1
 80037ee:	60b3      	str	r3, [r6, #8]
 80037f0:	6836      	ldr	r6, [r6, #0]
 80037f2:	2e00      	cmp	r6, #0
 80037f4:	d1dd      	bne.n	80037b2 <d_print_comp_inner+0xea6>
 80037f6:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80037fa:	4641      	mov	r1, r8
 80037fc:	4620      	mov	r0, r4
 80037fe:	4665      	mov	r5, ip
 8003800:	f001 fe2e 	bl	8005460 <d_print_comp>
 8003804:	9a00      	ldr	r2, [sp, #0]
 8003806:	9b06      	ldr	r3, [sp, #24]
 8003808:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 800380c:	2b00      	cmp	r3, #0
 800380e:	f47f a94b 	bne.w	8002aa8 <d_print_comp_inner+0x19c>
 8003812:	2f01      	cmp	r7, #1
 8003814:	d00c      	beq.n	8003830 <d_print_comp_inner+0xf24>
 8003816:	eb09 1907 	add.w	r9, r9, r7, lsl #4
 800381a:	f859 2c0c 	ldr.w	r2, [r9, #-12]
 800381e:	3f01      	subs	r7, #1
 8003820:	4641      	mov	r1, r8
 8003822:	4620      	mov	r0, r4
 8003824:	f001 fe2c 	bl	8005480 <d_print_mod>
 8003828:	2f01      	cmp	r7, #1
 800382a:	f1a9 0910 	sub.w	r9, r9, #16
 800382e:	d1f4      	bne.n	800381a <d_print_comp_inner+0xf0e>
 8003830:	1d2a      	adds	r2, r5, #4
 8003832:	4641      	mov	r1, r8
 8003834:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8003838:	4620      	mov	r0, r4
 800383a:	f002 fa31 	bl	8005ca0 <d_print_array_type.isra.10>
 800383e:	f7ff b933 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8003842:	bf00      	nop
 8003844:	0800d8a7 	.word	0x0800d8a7
 8003848:	0800d89b 	.word	0x0800d89b
 800384c:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8003850:	2b00      	cmp	r3, #0
 8003852:	f040 8673 	bne.w	800453c <d_print_comp_inner+0x1c30>
 8003856:	686a      	ldr	r2, [r5, #4]
 8003858:	4bd5      	ldr	r3, [pc, #852]	; (8003bb0 <d_print_comp_inner+0x12a4>)
 800385a:	6851      	ldr	r1, [r2, #4]
 800385c:	4299      	cmp	r1, r3
 800385e:	f000 8669 	beq.w	8004534 <d_print_comp_inner+0x1c28>
 8003862:	4641      	mov	r1, r8
 8003864:	4620      	mov	r0, r4
 8003866:	f001 fdfb 	bl	8005460 <d_print_comp>
 800386a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800386e:	2bff      	cmp	r3, #255	; 0xff
 8003870:	f001 82b4 	beq.w	8004ddc <d_print_comp_inner+0x24d0>
 8003874:	1c59      	adds	r1, r3, #1
 8003876:	2220      	movs	r2, #32
 8003878:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800387c:	54e2      	strb	r2, [r4, r3]
 800387e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8003882:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 8595 	beq.w	80043b6 <d_print_comp_inner+0x1aaa>
 800388c:	4dc9      	ldr	r5, [pc, #804]	; (8003bb4 <d_print_comp_inner+0x12a8>)
 800388e:	f04f 0800 	mov.w	r8, #0
 8003892:	1daf      	adds	r7, r5, #6
 8003894:	e009      	b.n	80038aa <d_print_comp_inner+0xf9e>
 8003896:	460b      	mov	r3, r1
 8003898:	3101      	adds	r1, #1
 800389a:	42bd      	cmp	r5, r7
 800389c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80038a0:	54e6      	strb	r6, [r4, r3]
 80038a2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80038a6:	f43f a8ff 	beq.w	8002aa8 <d_print_comp_inner+0x19c>
 80038aa:	29ff      	cmp	r1, #255	; 0xff
 80038ac:	f815 6b01 	ldrb.w	r6, [r5], #1
 80038b0:	d1f1      	bne.n	8003896 <d_print_comp_inner+0xf8a>
 80038b2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80038b6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80038ba:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80038be:	4620      	mov	r0, r4
 80038c0:	4798      	blx	r3
 80038c2:	2101      	movs	r1, #1
 80038c4:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80038c8:	2300      	movs	r3, #0
 80038ca:	440a      	add	r2, r1
 80038cc:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80038d0:	e7e3      	b.n	800389a <d_print_comp_inner+0xf8e>
 80038d2:	4eb9      	ldr	r6, [pc, #740]	; (8003bb8 <d_print_comp_inner+0x12ac>)
 80038d4:	f04f 0800 	mov.w	r8, #0
 80038d8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80038dc:	f106 090e 	add.w	r9, r6, #14
 80038e0:	e009      	b.n	80038f6 <d_print_comp_inner+0xfea>
 80038e2:	460b      	mov	r3, r1
 80038e4:	3101      	adds	r1, #1
 80038e6:	45b1      	cmp	r9, r6
 80038e8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80038ec:	54e7      	strb	r7, [r4, r3]
 80038ee:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80038f2:	f000 83b3 	beq.w	800405c <d_print_comp_inner+0x1750>
 80038f6:	29ff      	cmp	r1, #255	; 0xff
 80038f8:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 80038fc:	d1f1      	bne.n	80038e2 <d_print_comp_inner+0xfd6>
 80038fe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003902:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003906:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800390a:	4620      	mov	r0, r4
 800390c:	4798      	blx	r3
 800390e:	2101      	movs	r1, #1
 8003910:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8003914:	2300      	movs	r3, #0
 8003916:	440a      	add	r2, r1
 8003918:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800391c:	e7e3      	b.n	80038e6 <d_print_comp_inner+0xfda>
 800391e:	4ea7      	ldr	r6, [pc, #668]	; (8003bbc <d_print_comp_inner+0x12b0>)
 8003920:	f04f 0900 	mov.w	r9, #0
 8003924:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003928:	f106 0a1a 	add.w	sl, r6, #26
 800392c:	e009      	b.n	8003942 <d_print_comp_inner+0x1036>
 800392e:	460b      	mov	r3, r1
 8003930:	3101      	adds	r1, #1
 8003932:	4556      	cmp	r6, sl
 8003934:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003938:	54e7      	strb	r7, [r4, r3]
 800393a:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 800393e:	f000 82f0 	beq.w	8003f22 <d_print_comp_inner+0x1616>
 8003942:	29ff      	cmp	r1, #255	; 0xff
 8003944:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003948:	d1f1      	bne.n	800392e <d_print_comp_inner+0x1022>
 800394a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800394e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003952:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003956:	4620      	mov	r0, r4
 8003958:	4798      	blx	r3
 800395a:	2101      	movs	r1, #1
 800395c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8003960:	2300      	movs	r3, #0
 8003962:	440a      	add	r2, r1
 8003964:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003968:	e7e3      	b.n	8003932 <d_print_comp_inner+0x1026>
 800396a:	6869      	ldr	r1, [r5, #4]
 800396c:	f7fc ff38 	bl	80007e0 <d_find_pack>
 8003970:	f04f 0900 	mov.w	r9, #0
 8003974:	2800      	cmp	r0, #0
 8003976:	f001 835f 	beq.w	8005038 <d_print_comp_inner+0x272c>
 800397a:	7803      	ldrb	r3, [r0, #0]
 800397c:	2b2f      	cmp	r3, #47	; 0x2f
 800397e:	f040 8457 	bne.w	8004230 <d_print_comp_inner+0x1924>
 8003982:	6843      	ldr	r3, [r0, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 8453 	beq.w	8004230 <d_print_comp_inner+0x1924>
 800398a:	6880      	ldr	r0, [r0, #8]
 800398c:	f109 0901 	add.w	r9, r9, #1
 8003990:	2800      	cmp	r0, #0
 8003992:	d1f2      	bne.n	800397a <d_print_comp_inner+0x106e>
 8003994:	686b      	ldr	r3, [r5, #4]
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	f04f 0a00 	mov.w	sl, #0
 800399c:	f109 33ff 	add.w	r3, r9, #4294967295
 80039a0:	9301      	str	r3, [sp, #4]
 80039a2:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
 80039a6:	9a00      	ldr	r2, [sp, #0]
 80039a8:	4641      	mov	r1, r8
 80039aa:	4620      	mov	r0, r4
 80039ac:	f001 fd58 	bl	8005460 <d_print_comp>
 80039b0:	9b01      	ldr	r3, [sp, #4]
 80039b2:	42bb      	cmp	r3, r7
 80039b4:	f340 81ab 	ble.w	8003d0e <d_print_comp_inner+0x1402>
 80039b8:	4d81      	ldr	r5, [pc, #516]	; (8003bc0 <d_print_comp_inner+0x12b4>)
 80039ba:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80039be:	f105 0b02 	add.w	fp, r5, #2
 80039c2:	e009      	b.n	80039d8 <d_print_comp_inner+0x10cc>
 80039c4:	460b      	mov	r3, r1
 80039c6:	3101      	adds	r1, #1
 80039c8:	45ab      	cmp	fp, r5
 80039ca:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80039ce:	54e6      	strb	r6, [r4, r3]
 80039d0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80039d4:	f000 819b 	beq.w	8003d0e <d_print_comp_inner+0x1402>
 80039d8:	29ff      	cmp	r1, #255	; 0xff
 80039da:	f815 6b01 	ldrb.w	r6, [r5], #1
 80039de:	d1f1      	bne.n	80039c4 <d_print_comp_inner+0x10b8>
 80039e0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80039e4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80039e8:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 80039ec:	4620      	mov	r0, r4
 80039ee:	4798      	blx	r3
 80039f0:	2101      	movs	r1, #1
 80039f2:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80039f6:	2300      	movs	r3, #0
 80039f8:	440a      	add	r2, r1
 80039fa:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80039fe:	e7e3      	b.n	80039c8 <d_print_comp_inner+0x10bc>
 8003a00:	4e70      	ldr	r6, [pc, #448]	; (8003bc4 <d_print_comp_inner+0x12b8>)
 8003a02:	f04f 0900 	mov.w	r9, #0
 8003a06:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003a0a:	f106 0a16 	add.w	sl, r6, #22
 8003a0e:	e009      	b.n	8003a24 <d_print_comp_inner+0x1118>
 8003a10:	460b      	mov	r3, r1
 8003a12:	3101      	adds	r1, #1
 8003a14:	45b2      	cmp	sl, r6
 8003a16:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003a1a:	54e7      	strb	r7, [r4, r3]
 8003a1c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003a20:	f000 835f 	beq.w	80040e2 <d_print_comp_inner+0x17d6>
 8003a24:	29ff      	cmp	r1, #255	; 0xff
 8003a26:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003a2a:	d1f1      	bne.n	8003a10 <d_print_comp_inner+0x1104>
 8003a2c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a30:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003a34:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003a38:	4620      	mov	r0, r4
 8003a3a:	4798      	blx	r3
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8003a42:	2300      	movs	r3, #0
 8003a44:	440a      	add	r2, r1
 8003a46:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003a4a:	e7e3      	b.n	8003a14 <d_print_comp_inner+0x1108>
 8003a4c:	4e5e      	ldr	r6, [pc, #376]	; (8003bc8 <d_print_comp_inner+0x12bc>)
 8003a4e:	f04f 0900 	mov.w	r9, #0
 8003a52:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003a56:	f106 0a0e 	add.w	sl, r6, #14
 8003a5a:	e009      	b.n	8003a70 <d_print_comp_inner+0x1164>
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	3101      	adds	r1, #1
 8003a60:	4556      	cmp	r6, sl
 8003a62:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003a66:	54e7      	strb	r7, [r4, r3]
 8003a68:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003a6c:	f000 83a0 	beq.w	80041b0 <d_print_comp_inner+0x18a4>
 8003a70:	29ff      	cmp	r1, #255	; 0xff
 8003a72:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003a76:	d1f1      	bne.n	8003a5c <d_print_comp_inner+0x1150>
 8003a78:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a7c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003a80:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003a84:	4620      	mov	r0, r4
 8003a86:	4798      	blx	r3
 8003a88:	2101      	movs	r1, #1
 8003a8a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8003a8e:	2300      	movs	r3, #0
 8003a90:	440a      	add	r2, r1
 8003a92:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003a96:	e7e3      	b.n	8003a60 <d_print_comp_inner+0x1154>
 8003a98:	686a      	ldr	r2, [r5, #4]
 8003a9a:	7811      	ldrb	r1, [r2, #0]
 8003a9c:	2927      	cmp	r1, #39	; 0x27
 8003a9e:	f000 8615 	beq.w	80046cc <d_print_comp_inner+0x1dc0>
 8003aa2:	2600      	movs	r6, #0
 8003aa4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003aa8:	29ff      	cmp	r1, #255	; 0xff
 8003aaa:	f001 80c7 	beq.w	8004c3c <d_print_comp_inner+0x2330>
 8003aae:	2328      	movs	r3, #40	; 0x28
 8003ab0:	1c4a      	adds	r2, r1, #1
 8003ab2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003ab6:	5463      	strb	r3, [r4, r1]
 8003ab8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003abc:	686a      	ldr	r2, [r5, #4]
 8003abe:	4641      	mov	r1, r8
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	f001 fccd 	bl	8005460 <d_print_comp>
 8003ac6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003aca:	2bff      	cmp	r3, #255	; 0xff
 8003acc:	f001 809b 	beq.w	8004c06 <d_print_comp_inner+0x22fa>
 8003ad0:	2229      	movs	r2, #41	; 0x29
 8003ad2:	1c59      	adds	r1, r3, #1
 8003ad4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003ad8:	54e2      	strb	r2, [r4, r3]
 8003ada:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8003ade:	782b      	ldrb	r3, [r5, #0]
 8003ae0:	2b3d      	cmp	r3, #61	; 0x3d
 8003ae2:	f000 86e6 	beq.w	80048b2 <d_print_comp_inner+0x1fa6>
 8003ae6:	2e08      	cmp	r6, #8
 8003ae8:	f000 867f 	beq.w	80047ea <d_print_comp_inner+0x1ede>
 8003aec:	68aa      	ldr	r2, [r5, #8]
 8003aee:	4641      	mov	r1, r8
 8003af0:	4620      	mov	r0, r4
 8003af2:	f001 fcb5 	bl	8005460 <d_print_comp>
 8003af6:	f7fe bfd7 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8003afa:	2301      	movs	r3, #1
 8003afc:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8003b00:	f7fe bfd2 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8003b04:	686a      	ldr	r2, [r5, #4]
 8003b06:	a804      	add	r0, sp, #16
 8003b08:	4930      	ldr	r1, [pc, #192]	; (8003bcc <d_print_comp_inner+0x12c0>)
 8003b0a:	f006 fcc0 	bl	800a48e <siprintf>
 8003b0e:	a804      	add	r0, sp, #16
 8003b10:	f002 fe72 	bl	80067f8 <strlen>
 8003b14:	2800      	cmp	r0, #0
 8003b16:	f43e afc7 	beq.w	8002aa8 <d_print_comp_inner+0x19c>
 8003b1a:	ad04      	add	r5, sp, #16
 8003b1c:	f04f 0800 	mov.w	r8, #0
 8003b20:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003b24:	182f      	adds	r7, r5, r0
 8003b26:	e009      	b.n	8003b3c <d_print_comp_inner+0x1230>
 8003b28:	460b      	mov	r3, r1
 8003b2a:	3101      	adds	r1, #1
 8003b2c:	42bd      	cmp	r5, r7
 8003b2e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003b32:	54e6      	strb	r6, [r4, r3]
 8003b34:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003b38:	f43e afb6 	beq.w	8002aa8 <d_print_comp_inner+0x19c>
 8003b3c:	29ff      	cmp	r1, #255	; 0xff
 8003b3e:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003b42:	d1f1      	bne.n	8003b28 <d_print_comp_inner+0x121c>
 8003b44:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003b48:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003b4c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003b50:	4620      	mov	r0, r4
 8003b52:	4798      	blx	r3
 8003b54:	2101      	movs	r1, #1
 8003b56:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	440a      	add	r2, r1
 8003b5e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003b62:	e7e3      	b.n	8003b2c <d_print_comp_inner+0x1220>
 8003b64:	4e1a      	ldr	r6, [pc, #104]	; (8003bd0 <d_print_comp_inner+0x12c4>)
 8003b66:	f04f 0900 	mov.w	r9, #0
 8003b6a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003b6e:	f106 0a1c 	add.w	sl, r6, #28
 8003b72:	e009      	b.n	8003b88 <d_print_comp_inner+0x127c>
 8003b74:	460b      	mov	r3, r1
 8003b76:	3101      	adds	r1, #1
 8003b78:	4556      	cmp	r6, sl
 8003b7a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003b7e:	54e7      	strb	r7, [r4, r3]
 8003b80:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003b84:	f000 82fa 	beq.w	800417c <d_print_comp_inner+0x1870>
 8003b88:	29ff      	cmp	r1, #255	; 0xff
 8003b8a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003b8e:	d1f1      	bne.n	8003b74 <d_print_comp_inner+0x1268>
 8003b90:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003b94:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003b98:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003b9c:	4620      	mov	r0, r4
 8003b9e:	4798      	blx	r3
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	440a      	add	r2, r1
 8003baa:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003bae:	e7e3      	b.n	8003b78 <d_print_comp_inner+0x126c>
 8003bb0:	0800cd04 	.word	0x0800cd04
 8003bb4:	0800d888 	.word	0x0800d888
 8003bb8:	0800d96b 	.word	0x0800d96b
 8003bbc:	0800d863 	.word	0x0800d863
 8003bc0:	0800d898 	.word	0x0800d898
 8003bc4:	0800d867 	.word	0x0800d867
 8003bc8:	0800d8eb 	.word	0x0800d8eb
 8003bcc:	0800d6bc 	.word	0x0800d6bc
 8003bd0:	0800d93b 	.word	0x0800d93b
 8003bd4:	68ab      	ldr	r3, [r5, #8]
 8003bd6:	781a      	ldrb	r2, [r3, #0]
 8003bd8:	2a3a      	cmp	r2, #58	; 0x3a
 8003bda:	f47e af79 	bne.w	8002ad0 <d_print_comp_inner+0x1c4>
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b3b      	cmp	r3, #59	; 0x3b
 8003be4:	f47e af74 	bne.w	8002ad0 <d_print_comp_inner+0x1c4>
 8003be8:	f105 0308 	add.w	r3, r5, #8
 8003bec:	686a      	ldr	r2, [r5, #4]
 8003bee:	f002 fac9 	bl	8006184 <d_maybe_print_fold_expression.isra.15>
 8003bf2:	4606      	mov	r6, r0
 8003bf4:	2800      	cmp	r0, #0
 8003bf6:	f47e af57 	bne.w	8002aa8 <d_print_comp_inner+0x19c>
 8003bfa:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8003bfe:	68aa      	ldr	r2, [r5, #8]
 8003c00:	f8da 1004 	ldr.w	r1, [sl, #4]
 8003c04:	6893      	ldr	r3, [r2, #8]
 8003c06:	6808      	ldr	r0, [r1, #0]
 8003c08:	49d6      	ldr	r1, [pc, #856]	; (8003f64 <d_print_comp_inner+0x1658>)
 8003c0a:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8003c0e:	685f      	ldr	r7, [r3, #4]
 8003c10:	689d      	ldr	r5, [r3, #8]
 8003c12:	f002 fde7 	bl	80067e4 <strcmp>
 8003c16:	2800      	cmp	r0, #0
 8003c18:	f001 82e4 	beq.w	80051e4 <d_print_comp_inner+0x28d8>
 8003c1c:	2204      	movs	r2, #4
 8003c1e:	49d2      	ldr	r1, [pc, #840]	; (8003f68 <d_print_comp_inner+0x165c>)
 8003c20:	4620      	mov	r0, r4
 8003c22:	f7fc fbb1 	bl	8000388 <d_append_buffer>
 8003c26:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003c2a:	b183      	cbz	r3, 8003c4e <d_print_comp_inner+0x1342>
 8003c2c:	4641      	mov	r1, r8
 8003c2e:	464a      	mov	r2, r9
 8003c30:	4620      	mov	r0, r4
 8003c32:	f002 fa43 	bl	80060bc <d_print_subexpr>
 8003c36:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003c3a:	29ff      	cmp	r1, #255	; 0xff
 8003c3c:	f001 83ee 	beq.w	800541c <d_print_comp_inner+0x2b10>
 8003c40:	2320      	movs	r3, #32
 8003c42:	1c4a      	adds	r2, r1, #1
 8003c44:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003c48:	5463      	strb	r3, [r4, r1]
 8003c4a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003c4e:	463a      	mov	r2, r7
 8003c50:	4641      	mov	r1, r8
 8003c52:	4620      	mov	r0, r4
 8003c54:	f001 fc04 	bl	8005460 <d_print_comp>
 8003c58:	2d00      	cmp	r5, #0
 8003c5a:	f43e af25 	beq.w	8002aa8 <d_print_comp_inner+0x19c>
 8003c5e:	462a      	mov	r2, r5
 8003c60:	4641      	mov	r1, r8
 8003c62:	4620      	mov	r0, r4
 8003c64:	f002 fa2a 	bl	80060bc <d_print_subexpr>
 8003c68:	f7fe bf1e 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8003c6c:	4ebf      	ldr	r6, [pc, #764]	; (8003f6c <d_print_comp_inner+0x1660>)
 8003c6e:	f04f 0900 	mov.w	r9, #0
 8003c72:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003c76:	f106 0a08 	add.w	sl, r6, #8
 8003c7a:	e009      	b.n	8003c90 <d_print_comp_inner+0x1384>
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	3101      	adds	r1, #1
 8003c80:	4556      	cmp	r6, sl
 8003c82:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003c86:	54e7      	strb	r7, [r4, r3]
 8003c88:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003c8c:	f000 80d9 	beq.w	8003e42 <d_print_comp_inner+0x1536>
 8003c90:	29ff      	cmp	r1, #255	; 0xff
 8003c92:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003c96:	d1f1      	bne.n	8003c7c <d_print_comp_inner+0x1370>
 8003c98:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c9c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003ca0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003ca4:	4620      	mov	r0, r4
 8003ca6:	4798      	blx	r3
 8003ca8:	2101      	movs	r1, #1
 8003caa:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8003cae:	2300      	movs	r3, #0
 8003cb0:	440a      	add	r2, r1
 8003cb2:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003cb6:	e7e3      	b.n	8003c80 <d_print_comp_inner+0x1374>
 8003cb8:	4ead      	ldr	r6, [pc, #692]	; (8003f70 <d_print_comp_inner+0x1664>)
 8003cba:	f04f 0900 	mov.w	r9, #0
 8003cbe:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003cc2:	f106 0a1d 	add.w	sl, r6, #29
 8003cc6:	e009      	b.n	8003cdc <d_print_comp_inner+0x13d0>
 8003cc8:	460b      	mov	r3, r1
 8003cca:	3101      	adds	r1, #1
 8003ccc:	45b2      	cmp	sl, r6
 8003cce:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003cd2:	54e7      	strb	r7, [r4, r3]
 8003cd4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003cd8:	f000 81fc 	beq.w	80040d4 <d_print_comp_inner+0x17c8>
 8003cdc:	29ff      	cmp	r1, #255	; 0xff
 8003cde:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003ce2:	d1f1      	bne.n	8003cc8 <d_print_comp_inner+0x13bc>
 8003ce4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003ce8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003cec:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003cf0:	4620      	mov	r0, r4
 8003cf2:	4798      	blx	r3
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	440a      	add	r2, r1
 8003cfe:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003d02:	e7e3      	b.n	8003ccc <d_print_comp_inner+0x13c0>
 8003d04:	2301      	movs	r3, #1
 8003d06:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8003d0a:	f7fe becd 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8003d0e:	3701      	adds	r7, #1
 8003d10:	454f      	cmp	r7, r9
 8003d12:	f47f ae46 	bne.w	80039a2 <d_print_comp_inner+0x1096>
 8003d16:	f7fe bec7 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8003d1a:	6876      	ldr	r6, [r6, #4]
 8003d1c:	2e00      	cmp	r6, #0
 8003d1e:	f001 8070 	beq.w	8004e02 <d_print_comp_inner+0x24f6>
 8003d22:	2f04      	cmp	r7, #4
 8003d24:	f103 0310 	add.w	r3, r3, #16
 8003d28:	4602      	mov	r2, r0
 8003d2a:	f47f a9b8 	bne.w	800309e <d_print_comp_inner+0x792>
 8003d2e:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 8003d32:	2301      	movs	r3, #1
 8003d34:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8003d38:	f7fe beb6 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8003d3c:	4e8d      	ldr	r6, [pc, #564]	; (8003f74 <d_print_comp_inner+0x1668>)
 8003d3e:	4641      	mov	r1, r8
 8003d40:	686a      	ldr	r2, [r5, #4]
 8003d42:	4620      	mov	r0, r4
 8003d44:	f001 fb8c 	bl	8005460 <d_print_comp>
 8003d48:	f04f 0900 	mov.w	r9, #0
 8003d4c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003d50:	f106 0a04 	add.w	sl, r6, #4
 8003d54:	e008      	b.n	8003d68 <d_print_comp_inner+0x145c>
 8003d56:	460b      	mov	r3, r1
 8003d58:	3101      	adds	r1, #1
 8003d5a:	45b2      	cmp	sl, r6
 8003d5c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003d60:	54e7      	strb	r7, [r4, r3]
 8003d62:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003d66:	d013      	beq.n	8003d90 <d_print_comp_inner+0x1484>
 8003d68:	29ff      	cmp	r1, #255	; 0xff
 8003d6a:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003d6e:	d1f2      	bne.n	8003d56 <d_print_comp_inner+0x144a>
 8003d70:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003d74:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003d78:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003d7c:	4620      	mov	r0, r4
 8003d7e:	4798      	blx	r3
 8003d80:	2101      	movs	r1, #1
 8003d82:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8003d86:	2300      	movs	r3, #0
 8003d88:	440a      	add	r2, r1
 8003d8a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003d8e:	e7e4      	b.n	8003d5a <d_print_comp_inner+0x144e>
 8003d90:	68aa      	ldr	r2, [r5, #8]
 8003d92:	4641      	mov	r1, r8
 8003d94:	4620      	mov	r0, r4
 8003d96:	f001 fb63 	bl	8005460 <d_print_comp>
 8003d9a:	f7fe be85 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8003d9e:	686a      	ldr	r2, [r5, #4]
 8003da0:	4641      	mov	r1, r8
 8003da2:	4620      	mov	r0, r4
 8003da4:	f001 fb5c 	bl	8005460 <d_print_comp>
 8003da8:	f7fe be7e 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8003dac:	686a      	ldr	r2, [r5, #4]
 8003dae:	4641      	mov	r1, r8
 8003db0:	4620      	mov	r0, r4
 8003db2:	f001 fb55 	bl	8005460 <d_print_comp>
 8003db6:	f7fe be77 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8003dba:	686a      	ldr	r2, [r5, #4]
 8003dbc:	4641      	mov	r1, r8
 8003dbe:	4620      	mov	r0, r4
 8003dc0:	f001 fb4e 	bl	8005460 <d_print_comp>
 8003dc4:	f7fe be70 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8003dc8:	686a      	ldr	r2, [r5, #4]
 8003dca:	4641      	mov	r1, r8
 8003dcc:	4620      	mov	r0, r4
 8003dce:	f001 fb47 	bl	8005460 <d_print_comp>
 8003dd2:	f7fe be69 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8003dd6:	686a      	ldr	r2, [r5, #4]
 8003dd8:	4641      	mov	r1, r8
 8003dda:	4620      	mov	r0, r4
 8003ddc:	f001 fb40 	bl	8005460 <d_print_comp>
 8003de0:	f7fe be62 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8003de4:	686a      	ldr	r2, [r5, #4]
 8003de6:	4641      	mov	r1, r8
 8003de8:	4620      	mov	r0, r4
 8003dea:	f001 fb39 	bl	8005460 <d_print_comp>
 8003dee:	f7fe be5b 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8003df2:	686a      	ldr	r2, [r5, #4]
 8003df4:	4641      	mov	r1, r8
 8003df6:	4620      	mov	r0, r4
 8003df8:	f001 fb32 	bl	8005460 <d_print_comp>
 8003dfc:	f7fe be54 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8003e00:	686a      	ldr	r2, [r5, #4]
 8003e02:	4641      	mov	r1, r8
 8003e04:	4620      	mov	r0, r4
 8003e06:	f001 fb2b 	bl	8005460 <d_print_comp>
 8003e0a:	f7fe be4d 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8003e0e:	686a      	ldr	r2, [r5, #4]
 8003e10:	4641      	mov	r1, r8
 8003e12:	4620      	mov	r0, r4
 8003e14:	f001 fb24 	bl	8005460 <d_print_comp>
 8003e18:	f7fe be46 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8003e1c:	4641      	mov	r1, r8
 8003e1e:	68aa      	ldr	r2, [r5, #8]
 8003e20:	4620      	mov	r0, r4
 8003e22:	f001 fb1d 	bl	8005460 <d_print_comp>
 8003e26:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003e2a:	29ff      	cmp	r1, #255	; 0xff
 8003e2c:	f000 855f 	beq.w	80048ee <d_print_comp_inner+0x1fe2>
 8003e30:	1c4a      	adds	r2, r1, #1
 8003e32:	235d      	movs	r3, #93	; 0x5d
 8003e34:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003e38:	5463      	strb	r3, [r4, r1]
 8003e3a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003e3e:	f7fe be33 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8003e42:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8003e46:	4641      	mov	r1, r8
 8003e48:	3301      	adds	r3, #1
 8003e4a:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 8003e4e:	686a      	ldr	r2, [r5, #4]
 8003e50:	4620      	mov	r0, r4
 8003e52:	f001 fb05 	bl	8005460 <d_print_comp>
 8003e56:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8003e5a:	4e47      	ldr	r6, [pc, #284]	; (8003f78 <d_print_comp_inner+0x166c>)
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	f04f 0900 	mov.w	r9, #0
 8003e62:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003e66:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 8003e6a:	f106 0802 	add.w	r8, r6, #2
 8003e6e:	e008      	b.n	8003e82 <d_print_comp_inner+0x1576>
 8003e70:	460b      	mov	r3, r1
 8003e72:	3101      	adds	r1, #1
 8003e74:	4546      	cmp	r6, r8
 8003e76:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003e7a:	54e7      	strb	r7, [r4, r3]
 8003e7c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003e80:	d013      	beq.n	8003eaa <d_print_comp_inner+0x159e>
 8003e82:	29ff      	cmp	r1, #255	; 0xff
 8003e84:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003e88:	d1f2      	bne.n	8003e70 <d_print_comp_inner+0x1564>
 8003e8a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003e8e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003e92:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003e96:	4620      	mov	r0, r4
 8003e98:	4798      	blx	r3
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	440a      	add	r2, r1
 8003ea4:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003ea8:	e7e4      	b.n	8003e74 <d_print_comp_inner+0x1568>
 8003eaa:	68aa      	ldr	r2, [r5, #8]
 8003eac:	a804      	add	r0, sp, #16
 8003eae:	3201      	adds	r2, #1
 8003eb0:	4932      	ldr	r1, [pc, #200]	; (8003f7c <d_print_comp_inner+0x1670>)
 8003eb2:	f006 faec 	bl	800a48e <siprintf>
 8003eb6:	a804      	add	r0, sp, #16
 8003eb8:	f002 fc9e 	bl	80067f8 <strlen>
 8003ebc:	b318      	cbz	r0, 8003f06 <d_print_comp_inner+0x15fa>
 8003ebe:	ad04      	add	r5, sp, #16
 8003ec0:	f04f 0800 	mov.w	r8, #0
 8003ec4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003ec8:	182f      	adds	r7, r5, r0
 8003eca:	e008      	b.n	8003ede <d_print_comp_inner+0x15d2>
 8003ecc:	460b      	mov	r3, r1
 8003ece:	3101      	adds	r1, #1
 8003ed0:	42af      	cmp	r7, r5
 8003ed2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003ed6:	54e6      	strb	r6, [r4, r3]
 8003ed8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003edc:	d015      	beq.n	8003f0a <d_print_comp_inner+0x15fe>
 8003ede:	29ff      	cmp	r1, #255	; 0xff
 8003ee0:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003ee4:	d1f2      	bne.n	8003ecc <d_print_comp_inner+0x15c0>
 8003ee6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003eea:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003eee:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003ef2:	4620      	mov	r0, r4
 8003ef4:	4798      	blx	r3
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8003efc:	2300      	movs	r3, #0
 8003efe:	440a      	add	r2, r1
 8003f00:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003f04:	e7e4      	b.n	8003ed0 <d_print_comp_inner+0x15c4>
 8003f06:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003f0a:	29ff      	cmp	r1, #255	; 0xff
 8003f0c:	f000 855f 	beq.w	80049ce <d_print_comp_inner+0x20c2>
 8003f10:	1c4a      	adds	r2, r1, #1
 8003f12:	237d      	movs	r3, #125	; 0x7d
 8003f14:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003f18:	5463      	strb	r3, [r4, r1]
 8003f1a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003f1e:	f7fe bdc3 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8003f22:	686a      	ldr	r2, [r5, #4]
 8003f24:	4641      	mov	r1, r8
 8003f26:	4620      	mov	r0, r4
 8003f28:	f001 fa9a 	bl	8005460 <d_print_comp>
 8003f2c:	f7fe bdbc 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8003f30:	4641      	mov	r1, r8
 8003f32:	68aa      	ldr	r2, [r5, #8]
 8003f34:	4620      	mov	r0, r4
 8003f36:	f001 fa93 	bl	8005460 <d_print_comp>
 8003f3a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003f3e:	29ff      	cmp	r1, #255	; 0xff
 8003f40:	f000 850a 	beq.w	8004958 <d_print_comp_inner+0x204c>
 8003f44:	1c4a      	adds	r2, r1, #1
 8003f46:	235d      	movs	r3, #93	; 0x5d
 8003f48:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003f4c:	5463      	strb	r3, [r4, r1]
 8003f4e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003f52:	f7fe bda9 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8003f56:	686a      	ldr	r2, [r5, #4]
 8003f58:	4641      	mov	r1, r8
 8003f5a:	4620      	mov	r0, r4
 8003f5c:	f001 fa80 	bl	8005460 <d_print_comp>
 8003f60:	f7fe bda2 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8003f64:	0800d6d0 	.word	0x0800d6d0
 8003f68:	0800d8c8 	.word	0x0800d8c8
 8003f6c:	0800d95b 	.word	0x0800d95b
 8003f70:	0800d91b 	.word	0x0800d91b
 8003f74:	0800d76c 	.word	0x0800d76c
 8003f78:	0800d968 	.word	0x0800d968
 8003f7c:	0800d6bc 	.word	0x0800d6bc
 8003f80:	f8da 5004 	ldr.w	r5, [sl, #4]
 8003f84:	782b      	ldrb	r3, [r5, #0]
 8003f86:	3b61      	subs	r3, #97	; 0x61
 8003f88:	2b19      	cmp	r3, #25
 8003f8a:	d809      	bhi.n	8003fa0 <d_print_comp_inner+0x1694>
 8003f8c:	29ff      	cmp	r1, #255	; 0xff
 8003f8e:	f000 8795 	beq.w	8004ebc <d_print_comp_inner+0x25b0>
 8003f92:	2320      	movs	r3, #32
 8003f94:	1c4a      	adds	r2, r1, #1
 8003f96:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003f9a:	5463      	strb	r3, [r4, r1]
 8003f9c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003fa0:	19eb      	adds	r3, r5, r7
 8003fa2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8003fa6:	2b20      	cmp	r3, #32
 8003fa8:	bf08      	it	eq
 8003faa:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8003fae:	2f00      	cmp	r7, #0
 8003fb0:	f43e ad7a 	beq.w	8002aa8 <d_print_comp_inner+0x19c>
 8003fb4:	f04f 0800 	mov.w	r8, #0
 8003fb8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003fbc:	442f      	add	r7, r5
 8003fbe:	e009      	b.n	8003fd4 <d_print_comp_inner+0x16c8>
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	3101      	adds	r1, #1
 8003fc4:	42af      	cmp	r7, r5
 8003fc6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003fca:	54e6      	strb	r6, [r4, r3]
 8003fcc:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003fd0:	f43e ad6a 	beq.w	8002aa8 <d_print_comp_inner+0x19c>
 8003fd4:	29ff      	cmp	r1, #255	; 0xff
 8003fd6:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003fda:	d1f1      	bne.n	8003fc0 <d_print_comp_inner+0x16b4>
 8003fdc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003fe0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003fe4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003fe8:	4620      	mov	r0, r4
 8003fea:	4798      	blx	r3
 8003fec:	2101      	movs	r1, #1
 8003fee:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	440a      	add	r2, r1
 8003ff6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003ffa:	e7e3      	b.n	8003fc4 <d_print_comp_inner+0x16b8>
 8003ffc:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
 8004000:	b13a      	cbz	r2, 8004012 <d_print_comp_inner+0x1706>
 8004002:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 8004006:	ab14      	add	r3, sp, #80	; 0x50
 8004008:	f843 1d48 	str.w	r1, [r3, #-72]!
 800400c:	9203      	str	r2, [sp, #12]
 800400e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004012:	686b      	ldr	r3, [r5, #4]
 8004014:	781a      	ldrb	r2, [r3, #0]
 8004016:	2a04      	cmp	r2, #4
 8004018:	f000 830d 	beq.w	8004636 <d_print_comp_inner+0x1d2a>
 800401c:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
 8004020:	a804      	add	r0, sp, #16
 8004022:	461a      	mov	r2, r3
 8004024:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 8004028:	4641      	mov	r1, r8
 800402a:	4620      	mov	r0, r4
 800402c:	9304      	str	r3, [sp, #16]
 800402e:	9505      	str	r5, [sp, #20]
 8004030:	f7fe fc6c 	bl	800290c <d_print_comp_inner>
 8004034:	9a05      	ldr	r2, [sp, #20]
 8004036:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 800403a:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 800403e:	2b00      	cmp	r3, #0
 8004040:	f43e ad32 	beq.w	8002aa8 <d_print_comp_inner+0x19c>
 8004044:	9b02      	ldr	r3, [sp, #8]
 8004046:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800404a:	f7fe bd2d 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 800404e:	68aa      	ldr	r2, [r5, #8]
 8004050:	4641      	mov	r1, r8
 8004052:	4620      	mov	r0, r4
 8004054:	f001 fa04 	bl	8005460 <d_print_comp>
 8004058:	f7fe bd26 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 800405c:	686a      	ldr	r2, [r5, #4]
 800405e:	a804      	add	r0, sp, #16
 8004060:	3201      	adds	r2, #1
 8004062:	49d7      	ldr	r1, [pc, #860]	; (80043c0 <d_print_comp_inner+0x1ab4>)
 8004064:	f006 fa13 	bl	800a48e <siprintf>
 8004068:	a804      	add	r0, sp, #16
 800406a:	f002 fbc5 	bl	80067f8 <strlen>
 800406e:	b318      	cbz	r0, 80040b8 <d_print_comp_inner+0x17ac>
 8004070:	ad04      	add	r5, sp, #16
 8004072:	f04f 0800 	mov.w	r8, #0
 8004076:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800407a:	182f      	adds	r7, r5, r0
 800407c:	e008      	b.n	8004090 <d_print_comp_inner+0x1784>
 800407e:	460b      	mov	r3, r1
 8004080:	3101      	adds	r1, #1
 8004082:	42bd      	cmp	r5, r7
 8004084:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004088:	54e6      	strb	r6, [r4, r3]
 800408a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800408e:	d015      	beq.n	80040bc <d_print_comp_inner+0x17b0>
 8004090:	29ff      	cmp	r1, #255	; 0xff
 8004092:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004096:	d1f2      	bne.n	800407e <d_print_comp_inner+0x1772>
 8004098:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800409c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80040a0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80040a4:	4620      	mov	r0, r4
 80040a6:	4798      	blx	r3
 80040a8:	2101      	movs	r1, #1
 80040aa:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80040ae:	2300      	movs	r3, #0
 80040b0:	440a      	add	r2, r1
 80040b2:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80040b6:	e7e4      	b.n	8004082 <d_print_comp_inner+0x1776>
 80040b8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80040bc:	29ff      	cmp	r1, #255	; 0xff
 80040be:	f000 8404 	beq.w	80048ca <d_print_comp_inner+0x1fbe>
 80040c2:	1c4a      	adds	r2, r1, #1
 80040c4:	237d      	movs	r3, #125	; 0x7d
 80040c6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80040ca:	5463      	strb	r3, [r4, r1]
 80040cc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80040d0:	f7fe bcea 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 80040d4:	686a      	ldr	r2, [r5, #4]
 80040d6:	4641      	mov	r1, r8
 80040d8:	4620      	mov	r0, r4
 80040da:	f001 f9c1 	bl	8005460 <d_print_comp>
 80040de:	f7fe bce3 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 80040e2:	686a      	ldr	r2, [r5, #4]
 80040e4:	4641      	mov	r1, r8
 80040e6:	4620      	mov	r0, r4
 80040e8:	f001 f9ba 	bl	8005460 <d_print_comp>
 80040ec:	f7fe bcdc 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 80040f0:	686a      	ldr	r2, [r5, #4]
 80040f2:	4641      	mov	r1, r8
 80040f4:	4620      	mov	r0, r4
 80040f6:	f001 f9b3 	bl	8005460 <d_print_comp>
 80040fa:	f7fe bcd5 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 80040fe:	4eb1      	ldr	r6, [pc, #708]	; (80043c4 <d_print_comp_inner+0x1ab8>)
 8004100:	4641      	mov	r1, r8
 8004102:	68aa      	ldr	r2, [r5, #8]
 8004104:	4620      	mov	r0, r4
 8004106:	f001 f9ab 	bl	8005460 <d_print_comp>
 800410a:	f04f 0900 	mov.w	r9, #0
 800410e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004112:	f106 0a05 	add.w	sl, r6, #5
 8004116:	e008      	b.n	800412a <d_print_comp_inner+0x181e>
 8004118:	460b      	mov	r3, r1
 800411a:	3101      	adds	r1, #1
 800411c:	4556      	cmp	r6, sl
 800411e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004122:	54e7      	strb	r7, [r4, r3]
 8004124:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004128:	d013      	beq.n	8004152 <d_print_comp_inner+0x1846>
 800412a:	29ff      	cmp	r1, #255	; 0xff
 800412c:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004130:	d1f2      	bne.n	8004118 <d_print_comp_inner+0x180c>
 8004132:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004136:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800413a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800413e:	4620      	mov	r0, r4
 8004140:	4798      	blx	r3
 8004142:	2101      	movs	r1, #1
 8004144:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8004148:	2300      	movs	r3, #0
 800414a:	440a      	add	r2, r1
 800414c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004150:	e7e4      	b.n	800411c <d_print_comp_inner+0x1810>
 8004152:	686a      	ldr	r2, [r5, #4]
 8004154:	4641      	mov	r1, r8
 8004156:	4620      	mov	r0, r4
 8004158:	f001 f982 	bl	8005460 <d_print_comp>
 800415c:	f7fe bca4 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8004160:	686a      	ldr	r2, [r5, #4]
 8004162:	4641      	mov	r1, r8
 8004164:	4620      	mov	r0, r4
 8004166:	f001 f97b 	bl	8005460 <d_print_comp>
 800416a:	f7fe bc9d 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 800416e:	686a      	ldr	r2, [r5, #4]
 8004170:	4641      	mov	r1, r8
 8004172:	4620      	mov	r0, r4
 8004174:	f001 f974 	bl	8005460 <d_print_comp>
 8004178:	f7fe bc96 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 800417c:	686a      	ldr	r2, [r5, #4]
 800417e:	4641      	mov	r1, r8
 8004180:	4620      	mov	r0, r4
 8004182:	f001 f96d 	bl	8005460 <d_print_comp>
 8004186:	f7fe bc8f 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 800418a:	4641      	mov	r1, r8
 800418c:	686a      	ldr	r2, [r5, #4]
 800418e:	4620      	mov	r0, r4
 8004190:	f001 f966 	bl	8005460 <d_print_comp>
 8004194:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004198:	29ff      	cmp	r1, #255	; 0xff
 800419a:	f000 842a 	beq.w	80049f2 <d_print_comp_inner+0x20e6>
 800419e:	1c4a      	adds	r2, r1, #1
 80041a0:	2329      	movs	r3, #41	; 0x29
 80041a2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80041a6:	5463      	strb	r3, [r4, r1]
 80041a8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80041ac:	f7fe bc7c 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 80041b0:	686a      	ldr	r2, [r5, #4]
 80041b2:	4641      	mov	r1, r8
 80041b4:	4620      	mov	r0, r4
 80041b6:	f001 f953 	bl	8005460 <d_print_comp>
 80041ba:	f7fe bc75 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 80041be:	2f04      	cmp	r7, #4
 80041c0:	f106 0e10 	add.w	lr, r6, #16
 80041c4:	f1a6 0410 	sub.w	r4, r6, #16
 80041c8:	f000 8724 	beq.w	8005014 <d_print_comp_inner+0x2708>
 80041cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80041d0:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80041d4:	2300      	movs	r3, #0
 80041d6:	f8ca 6114 	str.w	r6, [sl, #276]	; 0x114
 80041da:	f84e 4c10 	str.w	r4, [lr, #-16]
 80041de:	f84e 5c1c 	str.w	r5, [lr, #-28]
 80041e2:	f84e 3c18 	str.w	r3, [lr, #-24]
 80041e6:	f84e cc14 	str.w	ip, [lr, #-20]
 80041ea:	4676      	mov	r6, lr
 80041ec:	686d      	ldr	r5, [r5, #4]
 80041ee:	3701      	adds	r7, #1
 80041f0:	f7fe bf7d 	b.w	80030ee <d_print_comp_inner+0x7e2>
 80041f4:	68aa      	ldr	r2, [r5, #8]
 80041f6:	4641      	mov	r1, r8
 80041f8:	4620      	mov	r0, r4
 80041fa:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
 80041fe:	f001 f92f 	bl	8005460 <d_print_comp>
 8004202:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004206:	429d      	cmp	r5, r3
 8004208:	f47e ac4e 	bne.w	8002aa8 <d_print_comp_inner+0x19c>
 800420c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8004210:	42b3      	cmp	r3, r6
 8004212:	f47e ac49 	bne.w	8002aa8 <d_print_comp_inner+0x19c>
 8004216:	f10a 33ff 	add.w	r3, sl, #4294967295
 800421a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800421e:	f7fe bc43 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8004222:	462a      	mov	r2, r5
 8004224:	4641      	mov	r1, r8
 8004226:	4620      	mov	r0, r4
 8004228:	f001 f92a 	bl	8005480 <d_print_mod>
 800422c:	f7fe bc6c 	b.w	8002b08 <d_print_comp_inner+0x1fc>
 8004230:	686b      	ldr	r3, [r5, #4]
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	f1b9 0f00 	cmp.w	r9, #0
 8004238:	f47f abae 	bne.w	8003998 <d_print_comp_inner+0x108c>
 800423c:	f7fe bc34 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8004240:	464a      	mov	r2, r9
 8004242:	a804      	add	r0, sp, #16
 8004244:	495e      	ldr	r1, [pc, #376]	; (80043c0 <d_print_comp_inner+0x1ab4>)
 8004246:	f006 f922 	bl	800a48e <siprintf>
 800424a:	a804      	add	r0, sp, #16
 800424c:	f002 fad4 	bl	80067f8 <strlen>
 8004250:	b318      	cbz	r0, 800429a <d_print_comp_inner+0x198e>
 8004252:	ad04      	add	r5, sp, #16
 8004254:	f04f 0800 	mov.w	r8, #0
 8004258:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800425c:	182f      	adds	r7, r5, r0
 800425e:	e008      	b.n	8004272 <d_print_comp_inner+0x1966>
 8004260:	460b      	mov	r3, r1
 8004262:	3101      	adds	r1, #1
 8004264:	42af      	cmp	r7, r5
 8004266:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800426a:	54e6      	strb	r6, [r4, r3]
 800426c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004270:	d015      	beq.n	800429e <d_print_comp_inner+0x1992>
 8004272:	29ff      	cmp	r1, #255	; 0xff
 8004274:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004278:	d1f2      	bne.n	8004260 <d_print_comp_inner+0x1954>
 800427a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800427e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004282:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004286:	4620      	mov	r0, r4
 8004288:	4798      	blx	r3
 800428a:	2101      	movs	r1, #1
 800428c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8004290:	2300      	movs	r3, #0
 8004292:	440a      	add	r2, r1
 8004294:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004298:	e7e4      	b.n	8004264 <d_print_comp_inner+0x1958>
 800429a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800429e:	29ff      	cmp	r1, #255	; 0xff
 80042a0:	f000 84df 	beq.w	8004c62 <d_print_comp_inner+0x2356>
 80042a4:	1c4a      	adds	r2, r1, #1
 80042a6:	237d      	movs	r3, #125	; 0x7d
 80042a8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80042ac:	5463      	strb	r3, [r4, r1]
 80042ae:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80042b2:	f7fe bbf9 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 80042b6:	2700      	movs	r7, #0
 80042b8:	f7ff ba1e 	b.w	80036f8 <d_print_comp_inner+0xdec>
 80042bc:	68df      	ldr	r7, [r3, #12]
 80042be:	689d      	ldr	r5, [r3, #8]
 80042c0:	2f00      	cmp	r7, #0
 80042c2:	f43e abf1 	beq.w	8002aa8 <d_print_comp_inner+0x19c>
 80042c6:	f04f 0800 	mov.w	r8, #0
 80042ca:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80042ce:	442f      	add	r7, r5
 80042d0:	e009      	b.n	80042e6 <d_print_comp_inner+0x19da>
 80042d2:	460b      	mov	r3, r1
 80042d4:	3101      	adds	r1, #1
 80042d6:	42bd      	cmp	r5, r7
 80042d8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80042dc:	54e6      	strb	r6, [r4, r3]
 80042de:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80042e2:	f43e abe1 	beq.w	8002aa8 <d_print_comp_inner+0x19c>
 80042e6:	29ff      	cmp	r1, #255	; 0xff
 80042e8:	f815 6b01 	ldrb.w	r6, [r5], #1
 80042ec:	d1f1      	bne.n	80042d2 <d_print_comp_inner+0x19c6>
 80042ee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80042f2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80042f6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80042fa:	4620      	mov	r0, r4
 80042fc:	4798      	blx	r3
 80042fe:	2101      	movs	r1, #1
 8004300:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8004304:	2300      	movs	r3, #0
 8004306:	440a      	add	r2, r1
 8004308:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800430c:	e7e3      	b.n	80042d6 <d_print_comp_inner+0x19ca>
 800430e:	686e      	ldr	r6, [r5, #4]
 8004310:	68af      	ldr	r7, [r5, #8]
 8004312:	4437      	add	r7, r6
 8004314:	42be      	cmp	r6, r7
 8004316:	f4be abc7 	bcs.w	8002aa8 <d_print_comp_inner+0x19c>
 800431a:	f04f 0800 	mov.w	r8, #0
 800431e:	e00d      	b.n	800433c <d_print_comp_inner+0x1a30>
 8004320:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004324:	29ff      	cmp	r1, #255	; 0xff
 8004326:	d036      	beq.n	8004396 <d_print_comp_inner+0x1a8a>
 8004328:	1c4b      	adds	r3, r1, #1
 800432a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800432e:	5465      	strb	r5, [r4, r1]
 8004330:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8004334:	3601      	adds	r6, #1
 8004336:	42b7      	cmp	r7, r6
 8004338:	f67e abb6 	bls.w	8002aa8 <d_print_comp_inner+0x19c>
 800433c:	1bbb      	subs	r3, r7, r6
 800433e:	2b03      	cmp	r3, #3
 8004340:	7835      	ldrb	r5, [r6, #0]
 8004342:	dded      	ble.n	8004320 <d_print_comp_inner+0x1a14>
 8004344:	2d5f      	cmp	r5, #95	; 0x5f
 8004346:	d1eb      	bne.n	8004320 <d_print_comp_inner+0x1a14>
 8004348:	7873      	ldrb	r3, [r6, #1]
 800434a:	2b5f      	cmp	r3, #95	; 0x5f
 800434c:	d1e8      	bne.n	8004320 <d_print_comp_inner+0x1a14>
 800434e:	78b3      	ldrb	r3, [r6, #2]
 8004350:	2b55      	cmp	r3, #85	; 0x55
 8004352:	d1e5      	bne.n	8004320 <d_print_comp_inner+0x1a14>
 8004354:	1cf3      	adds	r3, r6, #3
 8004356:	429f      	cmp	r7, r3
 8004358:	d9e2      	bls.n	8004320 <d_print_comp_inner+0x1a14>
 800435a:	2000      	movs	r0, #0
 800435c:	e006      	b.n	800436c <d_print_comp_inner+0x1a60>
 800435e:	f1a5 0237 	sub.w	r2, r5, #55	; 0x37
 8004362:	429f      	cmp	r7, r3
 8004364:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 8004368:	f000 85c9 	beq.w	8004efe <d_print_comp_inner+0x25f2>
 800436c:	4699      	mov	r9, r3
 800436e:	f813 5b01 	ldrb.w	r5, [r3], #1
 8004372:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 8004376:	b2d1      	uxtb	r1, r2
 8004378:	2909      	cmp	r1, #9
 800437a:	f1a5 0e41 	sub.w	lr, r5, #65	; 0x41
 800437e:	d9f0      	bls.n	8004362 <d_print_comp_inner+0x1a56>
 8004380:	f1be 0f05 	cmp.w	lr, #5
 8004384:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
 8004388:	d9e9      	bls.n	800435e <d_print_comp_inner+0x1a52>
 800438a:	2a05      	cmp	r2, #5
 800438c:	f200 8745 	bhi.w	800521a <d_print_comp_inner+0x290e>
 8004390:	f1a5 0257 	sub.w	r2, r5, #87	; 0x57
 8004394:	e7e5      	b.n	8004362 <d_print_comp_inner+0x1a56>
 8004396:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800439a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800439e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80043a2:	4620      	mov	r0, r4
 80043a4:	4798      	blx	r3
 80043a6:	2301      	movs	r3, #1
 80043a8:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80043ac:	2100      	movs	r1, #0
 80043ae:	441a      	add	r2, r3
 80043b0:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80043b4:	e7b9      	b.n	800432a <d_print_comp_inner+0x1a1e>
 80043b6:	4d04      	ldr	r5, [pc, #16]	; (80043c8 <d_print_comp_inner+0x1abc>)
 80043b8:	4698      	mov	r8, r3
 80043ba:	1daf      	adds	r7, r5, #6
 80043bc:	e010      	b.n	80043e0 <d_print_comp_inner+0x1ad4>
 80043be:	bf00      	nop
 80043c0:	0800d6bc 	.word	0x0800d6bc
 80043c4:	0800d830 	.word	0x0800d830
 80043c8:	0800d890 	.word	0x0800d890
 80043cc:	460b      	mov	r3, r1
 80043ce:	3101      	adds	r1, #1
 80043d0:	42bd      	cmp	r5, r7
 80043d2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80043d6:	54e6      	strb	r6, [r4, r3]
 80043d8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80043dc:	f43e ab64 	beq.w	8002aa8 <d_print_comp_inner+0x19c>
 80043e0:	29ff      	cmp	r1, #255	; 0xff
 80043e2:	f815 6b01 	ldrb.w	r6, [r5], #1
 80043e6:	d1f1      	bne.n	80043cc <d_print_comp_inner+0x1ac0>
 80043e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80043ec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80043f0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80043f4:	4620      	mov	r0, r4
 80043f6:	4798      	blx	r3
 80043f8:	2101      	movs	r1, #1
 80043fa:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80043fe:	2300      	movs	r3, #0
 8004400:	440a      	add	r2, r1
 8004402:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004406:	e7e3      	b.n	80043d0 <d_print_comp_inner+0x1ac4>
 8004408:	782b      	ldrb	r3, [r5, #0]
 800440a:	2b2f      	cmp	r3, #47	; 0x2f
 800440c:	f47e ab66 	bne.w	8002adc <d_print_comp_inner+0x1d0>
 8004410:	4601      	mov	r1, r0
 8004412:	460d      	mov	r5, r1
 8004414:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8004418:	f7fe bb62 	b.w	8002ae0 <d_print_comp_inner+0x1d4>
 800441c:	4dd7      	ldr	r5, [pc, #860]	; (800477c <d_print_comp_inner+0x1e70>)
 800441e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004422:	1d2f      	adds	r7, r5, #4
 8004424:	e009      	b.n	800443a <d_print_comp_inner+0x1b2e>
 8004426:	460b      	mov	r3, r1
 8004428:	3101      	adds	r1, #1
 800442a:	42af      	cmp	r7, r5
 800442c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004430:	54e6      	strb	r6, [r4, r3]
 8004432:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004436:	f43e ab37 	beq.w	8002aa8 <d_print_comp_inner+0x19c>
 800443a:	29ff      	cmp	r1, #255	; 0xff
 800443c:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004440:	d1f1      	bne.n	8004426 <d_print_comp_inner+0x1b1a>
 8004442:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004446:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800444a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800444e:	4620      	mov	r0, r4
 8004450:	4798      	blx	r3
 8004452:	2101      	movs	r1, #1
 8004454:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8004458:	2300      	movs	r3, #0
 800445a:	440a      	add	r2, r1
 800445c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004460:	e7e3      	b.n	800442a <d_print_comp_inner+0x1b1e>
 8004462:	4ec7      	ldr	r6, [pc, #796]	; (8004780 <d_print_comp_inner+0x1e74>)
 8004464:	f04f 0800 	mov.w	r8, #0
 8004468:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800446c:	f106 0905 	add.w	r9, r6, #5
 8004470:	e008      	b.n	8004484 <d_print_comp_inner+0x1b78>
 8004472:	460b      	mov	r3, r1
 8004474:	3101      	adds	r1, #1
 8004476:	45b1      	cmp	r9, r6
 8004478:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800447c:	54e7      	strb	r7, [r4, r3]
 800447e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004482:	d013      	beq.n	80044ac <d_print_comp_inner+0x1ba0>
 8004484:	29ff      	cmp	r1, #255	; 0xff
 8004486:	f816 7b01 	ldrb.w	r7, [r6], #1
 800448a:	d1f2      	bne.n	8004472 <d_print_comp_inner+0x1b66>
 800448c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004490:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004494:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004498:	4620      	mov	r0, r4
 800449a:	4798      	blx	r3
 800449c:	2101      	movs	r1, #1
 800449e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80044a2:	2300      	movs	r3, #0
 80044a4:	440a      	add	r2, r1
 80044a6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80044aa:	e7e4      	b.n	8004476 <d_print_comp_inner+0x1b6a>
 80044ac:	686a      	ldr	r2, [r5, #4]
 80044ae:	a804      	add	r0, sp, #16
 80044b0:	3201      	adds	r2, #1
 80044b2:	49b4      	ldr	r1, [pc, #720]	; (8004784 <d_print_comp_inner+0x1e78>)
 80044b4:	f005 ffeb 	bl	800a48e <siprintf>
 80044b8:	a804      	add	r0, sp, #16
 80044ba:	f002 f99d 	bl	80067f8 <strlen>
 80044be:	2800      	cmp	r0, #0
 80044c0:	f43e aaf2 	beq.w	8002aa8 <d_print_comp_inner+0x19c>
 80044c4:	ad04      	add	r5, sp, #16
 80044c6:	f04f 0800 	mov.w	r8, #0
 80044ca:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80044ce:	182f      	adds	r7, r5, r0
 80044d0:	e009      	b.n	80044e6 <d_print_comp_inner+0x1bda>
 80044d2:	460b      	mov	r3, r1
 80044d4:	3101      	adds	r1, #1
 80044d6:	42af      	cmp	r7, r5
 80044d8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80044dc:	54e6      	strb	r6, [r4, r3]
 80044de:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80044e2:	f43e aae1 	beq.w	8002aa8 <d_print_comp_inner+0x19c>
 80044e6:	29ff      	cmp	r1, #255	; 0xff
 80044e8:	f815 6b01 	ldrb.w	r6, [r5], #1
 80044ec:	d1f1      	bne.n	80044d2 <d_print_comp_inner+0x1bc6>
 80044ee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80044f2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80044f6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80044fa:	4620      	mov	r0, r4
 80044fc:	4798      	blx	r3
 80044fe:	2101      	movs	r1, #1
 8004500:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8004504:	2300      	movs	r3, #0
 8004506:	440a      	add	r2, r1
 8004508:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800450c:	e7e3      	b.n	80044d6 <d_print_comp_inner+0x1bca>
 800450e:	f021 0860 	bic.w	r8, r1, #96	; 0x60
 8004512:	f105 0208 	add.w	r2, r5, #8
 8004516:	4641      	mov	r1, r8
 8004518:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800451c:	f001 fc9c 	bl	8005e58 <d_print_function_type.isra.11>
 8004520:	686a      	ldr	r2, [r5, #4]
 8004522:	2a00      	cmp	r2, #0
 8004524:	f43e aac0 	beq.w	8002aa8 <d_print_comp_inner+0x19c>
 8004528:	4641      	mov	r1, r8
 800452a:	4620      	mov	r0, r4
 800452c:	f000 ff98 	bl	8005460 <d_print_comp>
 8004530:	f7fe baba 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8004534:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004538:	f7ff b9a3 	b.w	8003882 <d_print_comp_inner+0xf76>
 800453c:	4e92      	ldr	r6, [pc, #584]	; (8004788 <d_print_comp_inner+0x1e7c>)
 800453e:	f04f 0900 	mov.w	r9, #0
 8004542:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8004546:	f106 0a05 	add.w	sl, r6, #5
 800454a:	e009      	b.n	8004560 <d_print_comp_inner+0x1c54>
 800454c:	460b      	mov	r3, r1
 800454e:	3101      	adds	r1, #1
 8004550:	45b2      	cmp	sl, r6
 8004552:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004556:	54e7      	strb	r7, [r4, r3]
 8004558:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 800455c:	f43f a97b 	beq.w	8003856 <d_print_comp_inner+0xf4a>
 8004560:	29ff      	cmp	r1, #255	; 0xff
 8004562:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004566:	d1f1      	bne.n	800454c <d_print_comp_inner+0x1c40>
 8004568:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800456c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004570:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004574:	4620      	mov	r0, r4
 8004576:	4798      	blx	r3
 8004578:	2101      	movs	r1, #1
 800457a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 800457e:	2300      	movs	r3, #0
 8004580:	440a      	add	r2, r1
 8004582:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004586:	e7e3      	b.n	8004550 <d_print_comp_inner+0x1c44>
 8004588:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800458c:	497f      	ldr	r1, [pc, #508]	; (800478c <d_print_comp_inner+0x1e80>)
 800458e:	681f      	ldr	r7, [r3, #0]
 8004590:	4638      	mov	r0, r7
 8004592:	f002 f927 	bl	80067e4 <strcmp>
 8004596:	f896 a000 	ldrb.w	sl, [r6]
 800459a:	b918      	cbnz	r0, 80045a4 <d_print_comp_inner+0x1c98>
 800459c:	f1ba 0f03 	cmp.w	sl, #3
 80045a0:	f000 851e 	beq.w	8004fe0 <d_print_comp_inner+0x26d4>
 80045a4:	f1ba 0f38 	cmp.w	sl, #56	; 0x38
 80045a8:	f000 8600 	beq.w	80051ac <d_print_comp_inner+0x28a0>
 80045ac:	4978      	ldr	r1, [pc, #480]	; (8004790 <d_print_comp_inner+0x1e84>)
 80045ae:	4638      	mov	r0, r7
 80045b0:	f002 f918 	bl	80067e4 <strcmp>
 80045b4:	4605      	mov	r5, r0
 80045b6:	2800      	cmp	r0, #0
 80045b8:	f000 8136 	beq.w	8004828 <d_print_comp_inner+0x1f1c>
 80045bc:	4975      	ldr	r1, [pc, #468]	; (8004794 <d_print_comp_inner+0x1e88>)
 80045be:	4638      	mov	r0, r7
 80045c0:	f002 f910 	bl	80067e4 <strcmp>
 80045c4:	2800      	cmp	r0, #0
 80045c6:	f000 82b9 	beq.w	8004b3c <d_print_comp_inner+0x2230>
 80045ca:	464a      	mov	r2, r9
 80045cc:	4641      	mov	r1, r8
 80045ce:	4620      	mov	r0, r4
 80045d0:	f001 fd36 	bl	8006040 <d_print_expr_op>
 80045d4:	2f00      	cmp	r7, #0
 80045d6:	f43f a837 	beq.w	8003648 <d_print_comp_inner+0xd3c>
 80045da:	496f      	ldr	r1, [pc, #444]	; (8004798 <d_print_comp_inner+0x1e8c>)
 80045dc:	4638      	mov	r0, r7
 80045de:	f002 f901 	bl	80067e4 <strcmp>
 80045e2:	2800      	cmp	r0, #0
 80045e4:	f000 8387 	beq.w	8004cf6 <d_print_comp_inner+0x23ea>
 80045e8:	4638      	mov	r0, r7
 80045ea:	496c      	ldr	r1, [pc, #432]	; (800479c <d_print_comp_inner+0x1e90>)
 80045ec:	f002 f8fa 	bl	80067e4 <strcmp>
 80045f0:	4605      	mov	r5, r0
 80045f2:	2800      	cmp	r0, #0
 80045f4:	f47f a828 	bne.w	8003648 <d_print_comp_inner+0xd3c>
 80045f8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80045fc:	2bff      	cmp	r3, #255	; 0xff
 80045fe:	f000 84de 	beq.w	8004fbe <d_print_comp_inner+0x26b2>
 8004602:	2528      	movs	r5, #40	; 0x28
 8004604:	1c58      	adds	r0, r3, #1
 8004606:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 800460a:	4641      	mov	r1, r8
 800460c:	54e5      	strb	r5, [r4, r3]
 800460e:	4632      	mov	r2, r6
 8004610:	4620      	mov	r0, r4
 8004612:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8004616:	f000 ff23 	bl	8005460 <d_print_comp>
 800461a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800461e:	29ff      	cmp	r1, #255	; 0xff
 8004620:	f000 8470 	beq.w	8004f04 <d_print_comp_inner+0x25f8>
 8004624:	2329      	movs	r3, #41	; 0x29
 8004626:	1c4a      	adds	r2, r1, #1
 8004628:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800462c:	5463      	strb	r3, [r4, r1]
 800462e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004632:	f7fe ba39 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8004636:	6858      	ldr	r0, [r3, #4]
 8004638:	f10d 0910 	add.w	r9, sp, #16
 800463c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8004640:	4602      	mov	r2, r0
 8004642:	9004      	str	r0, [sp, #16]
 8004644:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
 8004648:	4641      	mov	r1, r8
 800464a:	4620      	mov	r0, r4
 800464c:	9305      	str	r3, [sp, #20]
 800464e:	f7fe f95d 	bl	800290c <d_print_comp_inner>
 8004652:	9a05      	ldr	r2, [sp, #20]
 8004654:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8004658:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 800465c:	b113      	cbz	r3, 8004664 <d_print_comp_inner+0x1d58>
 800465e:	9b02      	ldr	r3, [sp, #8]
 8004660:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004664:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8004668:	2b3c      	cmp	r3, #60	; 0x3c
 800466a:	f000 83db 	beq.w	8004e24 <d_print_comp_inner+0x2518>
 800466e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004672:	29ff      	cmp	r1, #255	; 0xff
 8004674:	f000 8469 	beq.w	8004f4a <d_print_comp_inner+0x263e>
 8004678:	233c      	movs	r3, #60	; 0x3c
 800467a:	1c4a      	adds	r2, r1, #1
 800467c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004680:	5463      	strb	r3, [r4, r1]
 8004682:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004686:	686b      	ldr	r3, [r5, #4]
 8004688:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	4641      	mov	r1, r8
 8004690:	461a      	mov	r2, r3
 8004692:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
 8004696:	4620      	mov	r0, r4
 8004698:	9304      	str	r3, [sp, #16]
 800469a:	9505      	str	r5, [sp, #20]
 800469c:	f7fe f936 	bl	800290c <d_print_comp_inner>
 80046a0:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 80046a4:	9a05      	ldr	r2, [sp, #20]
 80046a6:	2b3e      	cmp	r3, #62	; 0x3e
 80046a8:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 80046ac:	f000 83ad 	beq.w	8004e0a <d_print_comp_inner+0x24fe>
 80046b0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80046b4:	29ff      	cmp	r1, #255	; 0xff
 80046b6:	f000 849c 	beq.w	8004ff2 <d_print_comp_inner+0x26e6>
 80046ba:	233e      	movs	r3, #62	; 0x3e
 80046bc:	1c4a      	adds	r2, r1, #1
 80046be:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80046c2:	5463      	strb	r3, [r4, r1]
 80046c4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80046c8:	f7fe b9ee 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 80046cc:	6852      	ldr	r2, [r2, #4]
 80046ce:	7c16      	ldrb	r6, [r2, #16]
 80046d0:	2e00      	cmp	r6, #0
 80046d2:	f43f a9e7 	beq.w	8003aa4 <d_print_comp_inner+0x1198>
 80046d6:	2e06      	cmp	r6, #6
 80046d8:	f240 8339 	bls.w	8004d4e <d_print_comp_inner+0x2442>
 80046dc:	2e07      	cmp	r6, #7
 80046de:	f47f a9e1 	bne.w	8003aa4 <d_print_comp_inner+0x1198>
 80046e2:	68aa      	ldr	r2, [r5, #8]
 80046e4:	7811      	ldrb	r1, [r2, #0]
 80046e6:	2900      	cmp	r1, #0
 80046e8:	f47f a9dc 	bne.w	8003aa4 <d_print_comp_inner+0x1198>
 80046ec:	6891      	ldr	r1, [r2, #8]
 80046ee:	2901      	cmp	r1, #1
 80046f0:	f47f a9d8 	bne.w	8003aa4 <d_print_comp_inner+0x1198>
 80046f4:	2b3c      	cmp	r3, #60	; 0x3c
 80046f6:	f47f a9d5 	bne.w	8003aa4 <d_print_comp_inner+0x1198>
 80046fa:	6853      	ldr	r3, [r2, #4]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	2b30      	cmp	r3, #48	; 0x30
 8004700:	f000 8628 	beq.w	8005354 <d_print_comp_inner+0x2a48>
 8004704:	2b31      	cmp	r3, #49	; 0x31
 8004706:	f47f a9cd 	bne.w	8003aa4 <d_print_comp_inner+0x1198>
 800470a:	2204      	movs	r2, #4
 800470c:	4924      	ldr	r1, [pc, #144]	; (80047a0 <d_print_comp_inner+0x1e94>)
 800470e:	f7fb fe3b 	bl	8000388 <d_append_buffer>
 8004712:	f7fe b9c9 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8004716:	4e23      	ldr	r6, [pc, #140]	; (80047a4 <d_print_comp_inner+0x1e98>)
 8004718:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800471c:	f106 0a02 	add.w	sl, r6, #2
 8004720:	e009      	b.n	8004736 <d_print_comp_inner+0x1e2a>
 8004722:	460b      	mov	r3, r1
 8004724:	3101      	adds	r1, #1
 8004726:	45b2      	cmp	sl, r6
 8004728:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800472c:	54e7      	strb	r7, [r4, r3]
 800472e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004732:	f43e ad4d 	beq.w	80031d0 <d_print_comp_inner+0x8c4>
 8004736:	29ff      	cmp	r1, #255	; 0xff
 8004738:	f816 7b01 	ldrb.w	r7, [r6], #1
 800473c:	d1f1      	bne.n	8004722 <d_print_comp_inner+0x1e16>
 800473e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004742:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004746:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800474a:	4620      	mov	r0, r4
 800474c:	4798      	blx	r3
 800474e:	2101      	movs	r1, #1
 8004750:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8004754:	2300      	movs	r3, #0
 8004756:	440a      	add	r2, r1
 8004758:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800475c:	e7e3      	b.n	8004726 <d_print_comp_inner+0x1e1a>
 800475e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004762:	29ff      	cmp	r1, #255	; 0xff
 8004764:	f000 84e6 	beq.w	8005134 <d_print_comp_inner+0x2828>
 8004768:	2220      	movs	r2, #32
 800476a:	1c4b      	adds	r3, r1, #1
 800476c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004770:	5462      	strb	r2, [r4, r1]
 8004772:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8004776:	f7fe bdb6 	b.w	80032e6 <d_print_comp_inner+0x9da>
 800477a:	bf00      	nop
 800477c:	0800d90c 	.word	0x0800d90c
 8004780:	0800d730 	.word	0x0800d730
 8004784:	0800d6bc 	.word	0x0800d6bc
 8004788:	0800d880 	.word	0x0800d880
 800478c:	0800d8b4 	.word	0x0800d8b4
 8004790:	0800d988 	.word	0x0800d988
 8004794:	0800d6c0 	.word	0x0800d6c0
 8004798:	0800d8b8 	.word	0x0800d8b8
 800479c:	0800dbc8 	.word	0x0800dbc8
 80047a0:	0800d8e4 	.word	0x0800d8e4
 80047a4:	0800d70c 	.word	0x0800d70c
 80047a8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80047ac:	29ff      	cmp	r1, #255	; 0xff
 80047ae:	f000 8467 	beq.w	8005080 <d_print_comp_inner+0x2774>
 80047b2:	2220      	movs	r2, #32
 80047b4:	1c4b      	adds	r3, r1, #1
 80047b6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80047ba:	5462      	strb	r2, [r4, r1]
 80047bc:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80047c0:	f7fe bd7b 	b.w	80032ba <d_print_comp_inner+0x9ae>
 80047c4:	2700      	movs	r7, #0
 80047c6:	55a7      	strb	r7, [r4, r6]
 80047c8:	4631      	mov	r1, r6
 80047ca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80047ce:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80047d2:	4620      	mov	r0, r4
 80047d4:	4798      	blx	r3
 80047d6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80047da:	463e      	mov	r6, r7
 80047dc:	3301      	adds	r3, #1
 80047de:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 80047e2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80047e6:	f7fe be2d 	b.w	8003444 <d_print_comp_inner+0xb38>
 80047ea:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80047ee:	29ff      	cmp	r1, #255	; 0xff
 80047f0:	f000 8467 	beq.w	80050c2 <d_print_comp_inner+0x27b6>
 80047f4:	235b      	movs	r3, #91	; 0x5b
 80047f6:	1c4a      	adds	r2, r1, #1
 80047f8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80047fc:	5463      	strb	r3, [r4, r1]
 80047fe:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004802:	4641      	mov	r1, r8
 8004804:	68aa      	ldr	r2, [r5, #8]
 8004806:	4620      	mov	r0, r4
 8004808:	f000 fe2a 	bl	8005460 <d_print_comp>
 800480c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004810:	29ff      	cmp	r1, #255	; 0xff
 8004812:	f000 8314 	beq.w	8004e3e <d_print_comp_inner+0x2532>
 8004816:	235d      	movs	r3, #93	; 0x5d
 8004818:	1c4a      	adds	r2, r1, #1
 800481a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800481e:	5463      	strb	r3, [r4, r1]
 8004820:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004824:	f7fe b940 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8004828:	4631      	mov	r1, r6
 800482a:	4620      	mov	r0, r4
 800482c:	f7fb ffd8 	bl	80007e0 <d_find_pack>
 8004830:	b928      	cbnz	r0, 800483e <d_print_comp_inner+0x1f32>
 8004832:	e007      	b.n	8004844 <d_print_comp_inner+0x1f38>
 8004834:	6843      	ldr	r3, [r0, #4]
 8004836:	b12b      	cbz	r3, 8004844 <d_print_comp_inner+0x1f38>
 8004838:	6880      	ldr	r0, [r0, #8]
 800483a:	3501      	adds	r5, #1
 800483c:	b110      	cbz	r0, 8004844 <d_print_comp_inner+0x1f38>
 800483e:	7803      	ldrb	r3, [r0, #0]
 8004840:	2b2f      	cmp	r3, #47	; 0x2f
 8004842:	d0f7      	beq.n	8004834 <d_print_comp_inner+0x1f28>
 8004844:	462a      	mov	r2, r5
 8004846:	a804      	add	r0, sp, #16
 8004848:	49d5      	ldr	r1, [pc, #852]	; (8004ba0 <d_print_comp_inner+0x2294>)
 800484a:	f005 fe20 	bl	800a48e <siprintf>
 800484e:	a804      	add	r0, sp, #16
 8004850:	f001 ffd2 	bl	80067f8 <strlen>
 8004854:	2800      	cmp	r0, #0
 8004856:	f43e a927 	beq.w	8002aa8 <d_print_comp_inner+0x19c>
 800485a:	ad04      	add	r5, sp, #16
 800485c:	f04f 0800 	mov.w	r8, #0
 8004860:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004864:	182f      	adds	r7, r5, r0
 8004866:	e009      	b.n	800487c <d_print_comp_inner+0x1f70>
 8004868:	460b      	mov	r3, r1
 800486a:	3101      	adds	r1, #1
 800486c:	42bd      	cmp	r5, r7
 800486e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004872:	54e6      	strb	r6, [r4, r3]
 8004874:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004878:	f43e a916 	beq.w	8002aa8 <d_print_comp_inner+0x19c>
 800487c:	29ff      	cmp	r1, #255	; 0xff
 800487e:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004882:	d1f1      	bne.n	8004868 <d_print_comp_inner+0x1f5c>
 8004884:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004888:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800488c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004890:	4620      	mov	r0, r4
 8004892:	4798      	blx	r3
 8004894:	2101      	movs	r1, #1
 8004896:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 800489a:	2300      	movs	r3, #0
 800489c:	440a      	add	r2, r1
 800489e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80048a2:	e7e3      	b.n	800486c <d_print_comp_inner+0x1f60>
 80048a4:	686a      	ldr	r2, [r5, #4]
 80048a6:	4641      	mov	r1, r8
 80048a8:	4620      	mov	r0, r4
 80048aa:	f000 fdd9 	bl	8005460 <d_print_comp>
 80048ae:	f7fe b8fb 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 80048b2:	29ff      	cmp	r1, #255	; 0xff
 80048b4:	f000 83d4 	beq.w	8005060 <d_print_comp_inner+0x2754>
 80048b8:	232d      	movs	r3, #45	; 0x2d
 80048ba:	1c4a      	adds	r2, r1, #1
 80048bc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80048c0:	5463      	strb	r3, [r4, r1]
 80048c2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80048c6:	f7ff b90e 	b.w	8003ae6 <d_print_comp_inner+0x11da>
 80048ca:	2500      	movs	r5, #0
 80048cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80048d0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80048d4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80048d8:	4620      	mov	r0, r4
 80048da:	4798      	blx	r3
 80048dc:	2201      	movs	r2, #1
 80048de:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80048e2:	4629      	mov	r1, r5
 80048e4:	4413      	add	r3, r2
 80048e6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80048ea:	f7ff bbeb 	b.w	80040c4 <d_print_comp_inner+0x17b8>
 80048ee:	2500      	movs	r5, #0
 80048f0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80048f4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80048f8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80048fc:	4620      	mov	r0, r4
 80048fe:	4798      	blx	r3
 8004900:	2201      	movs	r2, #1
 8004902:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004906:	4629      	mov	r1, r5
 8004908:	4413      	add	r3, r2
 800490a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800490e:	f7ff ba90 	b.w	8003e32 <d_print_comp_inner+0x1526>
 8004912:	2600      	movs	r6, #0
 8004914:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8004918:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 800491c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8004920:	4798      	blx	r3
 8004922:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004926:	4631      	mov	r1, r6
 8004928:	3301      	adds	r3, #1
 800492a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800492e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004932:	f7fe bd3f 	b.w	80033b4 <d_print_comp_inner+0xaa8>
 8004936:	2600      	movs	r6, #0
 8004938:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800493c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8004940:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8004944:	4798      	blx	r3
 8004946:	2201      	movs	r2, #1
 8004948:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800494c:	4631      	mov	r1, r6
 800494e:	4413      	add	r3, r2
 8004950:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004954:	f7fe bb70 	b.w	8003038 <d_print_comp_inner+0x72c>
 8004958:	2500      	movs	r5, #0
 800495a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800495e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004962:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004966:	4620      	mov	r0, r4
 8004968:	4798      	blx	r3
 800496a:	2201      	movs	r2, #1
 800496c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004970:	4629      	mov	r1, r5
 8004972:	4413      	add	r3, r2
 8004974:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004978:	f7ff bae5 	b.w	8003f46 <d_print_comp_inner+0x163a>
 800497c:	220d      	movs	r2, #13
 800497e:	4989      	ldr	r1, [pc, #548]	; (8004ba4 <d_print_comp_inner+0x2298>)
 8004980:	4620      	mov	r0, r4
 8004982:	f7fb fd01 	bl	8000388 <d_append_buffer>
 8004986:	68a9      	ldr	r1, [r5, #8]
 8004988:	4620      	mov	r0, r4
 800498a:	3101      	adds	r1, #1
 800498c:	f7fb ffac 	bl	80008e8 <d_append_num>
 8004990:	2203      	movs	r2, #3
 8004992:	4985      	ldr	r1, [pc, #532]	; (8004ba8 <d_print_comp_inner+0x229c>)
 8004994:	4620      	mov	r0, r4
 8004996:	f7fb fcf7 	bl	8000388 <d_append_buffer>
 800499a:	686d      	ldr	r5, [r5, #4]
 800499c:	f7fe bc1d 	b.w	80031da <d_print_comp_inner+0x8ce>
 80049a0:	2500      	movs	r5, #0
 80049a2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80049a6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80049aa:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80049ae:	4620      	mov	r0, r4
 80049b0:	4798      	blx	r3
 80049b2:	2201      	movs	r2, #1
 80049b4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80049b8:	4629      	mov	r1, r5
 80049ba:	4413      	add	r3, r2
 80049bc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80049c0:	f7fe be06 	b.w	80035d0 <d_print_comp_inner+0xcc4>
 80049c4:	2301      	movs	r3, #1
 80049c6:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80049ca:	f7fe b86d 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 80049ce:	2500      	movs	r5, #0
 80049d0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80049d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80049d8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80049dc:	4620      	mov	r0, r4
 80049de:	4798      	blx	r3
 80049e0:	2201      	movs	r2, #1
 80049e2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80049e6:	4629      	mov	r1, r5
 80049e8:	4413      	add	r3, r2
 80049ea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80049ee:	f7ff ba90 	b.w	8003f12 <d_print_comp_inner+0x1606>
 80049f2:	2500      	movs	r5, #0
 80049f4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80049f8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80049fc:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004a00:	4620      	mov	r0, r4
 8004a02:	4798      	blx	r3
 8004a04:	2201      	movs	r2, #1
 8004a06:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004a0a:	4629      	mov	r1, r5
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004a12:	f7ff bbc5 	b.w	80041a0 <d_print_comp_inner+0x1894>
 8004a16:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8004a1a:	a914      	add	r1, sp, #80	; 0x50
 8004a1c:	f841 3d40 	str.w	r3, [r1, #-64]!
 8004a20:	f028 0860 	bic.w	r8, r8, #96	; 0x60
 8004a24:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8004a28:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	4641      	mov	r1, r8
 8004a30:	9606      	str	r6, [sp, #24]
 8004a32:	9307      	str	r3, [sp, #28]
 8004a34:	9505      	str	r5, [sp, #20]
 8004a36:	f000 fd13 	bl	8005460 <d_print_comp>
 8004a3a:	9b04      	ldr	r3, [sp, #16]
 8004a3c:	9e06      	ldr	r6, [sp, #24]
 8004a3e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8004a42:	2e00      	cmp	r6, #0
 8004a44:	f47e a830 	bne.w	8002aa8 <d_print_comp_inner+0x19c>
 8004a48:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004a4c:	29ff      	cmp	r1, #255	; 0xff
 8004a4e:	f000 840b 	beq.w	8005268 <d_print_comp_inner+0x295c>
 8004a52:	2320      	movs	r3, #32
 8004a54:	1c4a      	adds	r2, r1, #1
 8004a56:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004a5a:	5463      	strb	r3, [r4, r1]
 8004a5c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004a60:	f7fe be0a 	b.w	8003678 <d_print_comp_inner+0xd6c>
 8004a64:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f6fe abfa 	blt.w	8003262 <d_print_comp_inner+0x956>
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 829f 	beq.w	8004fb2 <d_print_comp_inner+0x26a6>
 8004a74:	6880      	ldr	r0, [r0, #8]
 8004a76:	3b01      	subs	r3, #1
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	f43e a829 	beq.w	8002ad0 <d_print_comp_inner+0x1c4>
 8004a7e:	7802      	ldrb	r2, [r0, #0]
 8004a80:	2a2f      	cmp	r2, #47	; 0x2f
 8004a82:	d0f4      	beq.n	8004a6e <d_print_comp_inner+0x2162>
 8004a84:	f7fe b824 	b.w	8002ad0 <d_print_comp_inner+0x1c4>
 8004a88:	f8d0 e130 	ldr.w	lr, [r0, #304]	; 0x130
 8004a8c:	f8d0 212c 	ldr.w	r2, [r0, #300]	; 0x12c
 8004a90:	f1be 0f00 	cmp.w	lr, #0
 8004a94:	dd14      	ble.n	8004ac0 <d_print_comp_inner+0x21b4>
 8004a96:	6813      	ldr	r3, [r2, #0]
 8004a98:	4299      	cmp	r1, r3
 8004a9a:	f000 83f7 	beq.w	800528c <d_print_comp_inner+0x2980>
 8004a9e:	463b      	mov	r3, r7
 8004aa0:	f102 0008 	add.w	r0, r2, #8
 8004aa4:	46a4      	mov	ip, r4
 8004aa6:	e007      	b.n	8004ab8 <d_print_comp_inner+0x21ac>
 8004aa8:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8004aac:	4681      	mov	r9, r0
 8004aae:	42a1      	cmp	r1, r4
 8004ab0:	f100 0008 	add.w	r0, r0, #8
 8004ab4:	f000 81d3 	beq.w	8004e5e <d_print_comp_inner+0x2552>
 8004ab8:	3301      	adds	r3, #1
 8004aba:	459e      	cmp	lr, r3
 8004abc:	d1f4      	bne.n	8004aa8 <d_print_comp_inner+0x219c>
 8004abe:	4664      	mov	r4, ip
 8004ac0:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 8004ac4:	459e      	cmp	lr, r3
 8004ac6:	f280 84bb 	bge.w	8005440 <d_print_comp_inner+0x2b34>
 8004aca:	f10e 0301 	add.w	r3, lr, #1
 8004ace:	eb02 09ce 	add.w	r9, r2, lr, lsl #3
 8004ad2:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
 8004ad6:	f842 103e 	str.w	r1, [r2, lr, lsl #3]
 8004ada:	f8d4 e110 	ldr.w	lr, [r4, #272]	; 0x110
 8004ade:	f109 0904 	add.w	r9, r9, #4
 8004ae2:	4672      	mov	r2, lr
 8004ae4:	2a00      	cmp	r2, #0
 8004ae6:	f000 848e 	beq.w	8005406 <d_print_comp_inner+0x2afa>
 8004aea:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8004aee:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 8004af2:	f100 0e01 	add.w	lr, r0, #1
 8004af6:	4298      	cmp	r0, r3
 8004af8:	f280 84a2 	bge.w	8005440 <d_print_comp_inner+0x2b34>
 8004afc:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8004b00:	f8c4 e13c 	str.w	lr, [r4, #316]	; 0x13c
 8004b04:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8004b08:	6850      	ldr	r0, [r2, #4]
 8004b0a:	6058      	str	r0, [r3, #4]
 8004b0c:	f8c9 3000 	str.w	r3, [r9]
 8004b10:	6812      	ldr	r2, [r2, #0]
 8004b12:	4699      	mov	r9, r3
 8004b14:	e7e6      	b.n	8004ae4 <d_print_comp_inner+0x21d8>
 8004b16:	2500      	movs	r5, #0
 8004b18:	4619      	mov	r1, r3
 8004b1a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004b1e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004b22:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004b26:	4620      	mov	r0, r4
 8004b28:	4798      	blx	r3
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
 8004b30:	462b      	mov	r3, r5
 8004b32:	4411      	add	r1, r2
 8004b34:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
 8004b38:	f7fe bd39 	b.w	80035ae <d_print_comp_inner+0xca2>
 8004b3c:	2e00      	cmp	r6, #0
 8004b3e:	f000 844d 	beq.w	80053dc <d_print_comp_inner+0x2ad0>
 8004b42:	f1ba 0f2f 	cmp.w	sl, #47	; 0x2f
 8004b46:	f040 8488 	bne.w	800545a <d_print_comp_inner+0x2b4e>
 8004b4a:	6873      	ldr	r3, [r6, #4]
 8004b4c:	b373      	cbz	r3, 8004bac <d_print_comp_inner+0x22a0>
 8004b4e:	4607      	mov	r7, r0
 8004b50:	e007      	b.n	8004b62 <d_print_comp_inner+0x2256>
 8004b52:	3701      	adds	r7, #1
 8004b54:	68b6      	ldr	r6, [r6, #8]
 8004b56:	b356      	cbz	r6, 8004bae <d_print_comp_inner+0x22a2>
 8004b58:	7833      	ldrb	r3, [r6, #0]
 8004b5a:	2b2f      	cmp	r3, #47	; 0x2f
 8004b5c:	d127      	bne.n	8004bae <d_print_comp_inner+0x22a2>
 8004b5e:	6873      	ldr	r3, [r6, #4]
 8004b60:	b32b      	cbz	r3, 8004bae <d_print_comp_inner+0x22a2>
 8004b62:	781a      	ldrb	r2, [r3, #0]
 8004b64:	2a4a      	cmp	r2, #74	; 0x4a
 8004b66:	d1f4      	bne.n	8004b52 <d_print_comp_inner+0x2246>
 8004b68:	6859      	ldr	r1, [r3, #4]
 8004b6a:	4620      	mov	r0, r4
 8004b6c:	f7fb fe38 	bl	80007e0 <d_find_pack>
 8004b70:	b198      	cbz	r0, 8004b9a <d_print_comp_inner+0x228e>
 8004b72:	7803      	ldrb	r3, [r0, #0]
 8004b74:	2b2f      	cmp	r3, #47	; 0x2f
 8004b76:	f040 846c 	bne.w	8005452 <d_print_comp_inner+0x2b46>
 8004b7a:	6843      	ldr	r3, [r0, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 8464 	beq.w	800544a <d_print_comp_inner+0x2b3e>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2000      	movs	r0, #0
 8004b86:	e004      	b.n	8004b92 <d_print_comp_inner+0x2286>
 8004b88:	781a      	ldrb	r2, [r3, #0]
 8004b8a:	2a2f      	cmp	r2, #47	; 0x2f
 8004b8c:	d105      	bne.n	8004b9a <d_print_comp_inner+0x228e>
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	b11a      	cbz	r2, 8004b9a <d_print_comp_inner+0x228e>
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	3001      	adds	r0, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1f6      	bne.n	8004b88 <d_print_comp_inner+0x227c>
 8004b9a:	4407      	add	r7, r0
 8004b9c:	e7da      	b.n	8004b54 <d_print_comp_inner+0x2248>
 8004b9e:	bf00      	nop
 8004ba0:	0800d6bc 	.word	0x0800d6bc
 8004ba4:	0800d710 	.word	0x0800d710
 8004ba8:	0800d720 	.word	0x0800d720
 8004bac:	461f      	mov	r7, r3
 8004bae:	4639      	mov	r1, r7
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	f7fb fe99 	bl	80008e8 <d_append_num>
 8004bb6:	f7fd bf77 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8004bba:	2500      	movs	r5, #0
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004bc2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004bc6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004bca:	4620      	mov	r0, r4
 8004bcc:	4798      	blx	r3
 8004bce:	2101      	movs	r1, #1
 8004bd0:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8004bd4:	462b      	mov	r3, r5
 8004bd6:	440a      	add	r2, r1
 8004bd8:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004bdc:	f7fe bb87 	b.w	80032ee <d_print_comp_inner+0x9e2>
 8004be0:	2600      	movs	r6, #0
 8004be2:	4619      	mov	r1, r3
 8004be4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004be8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004bec:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004bf0:	4620      	mov	r0, r4
 8004bf2:	4798      	blx	r3
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8004bfa:	4633      	mov	r3, r6
 8004bfc:	440a      	add	r2, r1
 8004bfe:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004c02:	f7fe bb5e 	b.w	80032c2 <d_print_comp_inner+0x9b6>
 8004c06:	2200      	movs	r2, #0
 8004c08:	4619      	mov	r1, r3
 8004c0a:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 8004c0e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004c12:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004c16:	4620      	mov	r0, r4
 8004c18:	4798      	blx	r3
 8004c1a:	2329      	movs	r3, #41	; 0x29
 8004c1c:	2101      	movs	r1, #1
 8004c1e:	7023      	strb	r3, [r4, #0]
 8004c20:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004c24:	782a      	ldrb	r2, [r5, #0]
 8004c26:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004c2a:	2a3d      	cmp	r2, #61	; 0x3d
 8004c2c:	440b      	add	r3, r1
 8004c2e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004c32:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004c36:	f47e af56 	bne.w	8003ae6 <d_print_comp_inner+0x11da>
 8004c3a:	e63d      	b.n	80048b8 <d_print_comp_inner+0x1fac>
 8004c3c:	2700      	movs	r7, #0
 8004c3e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004c42:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8004c46:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004c4a:	4620      	mov	r0, r4
 8004c4c:	4798      	blx	r3
 8004c4e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004c52:	4639      	mov	r1, r7
 8004c54:	3301      	adds	r3, #1
 8004c56:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8004c5a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004c5e:	f7fe bf26 	b.w	8003aae <d_print_comp_inner+0x11a2>
 8004c62:	2500      	movs	r5, #0
 8004c64:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004c68:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004c6c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004c70:	4620      	mov	r0, r4
 8004c72:	4798      	blx	r3
 8004c74:	2201      	movs	r2, #1
 8004c76:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004c82:	f7ff bb10 	b.w	80042a6 <d_print_comp_inner+0x199a>
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	f1a3 0163 	sub.w	r1, r3, #99	; 0x63
 8004c8c:	2901      	cmp	r1, #1
 8004c8e:	d903      	bls.n	8004c98 <d_print_comp_inner+0x238c>
 8004c90:	3b72      	subs	r3, #114	; 0x72
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	f63d aea7 	bhi.w	80029e6 <d_print_comp_inner+0xda>
 8004c98:	4641      	mov	r1, r8
 8004c9a:	4620      	mov	r0, r4
 8004c9c:	f001 f9d0 	bl	8006040 <d_print_expr_op>
 8004ca0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004ca4:	29ff      	cmp	r1, #255	; 0xff
 8004ca6:	f000 8271 	beq.w	800518c <d_print_comp_inner+0x2880>
 8004caa:	233c      	movs	r3, #60	; 0x3c
 8004cac:	1c4a      	adds	r2, r1, #1
 8004cae:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004cb2:	5463      	strb	r3, [r4, r1]
 8004cb4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004cb8:	68ab      	ldr	r3, [r5, #8]
 8004cba:	4641      	mov	r1, r8
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	f000 fbce 	bl	8005460 <d_print_comp>
 8004cc4:	2202      	movs	r2, #2
 8004cc6:	49d5      	ldr	r1, [pc, #852]	; (800501c <d_print_comp_inner+0x2710>)
 8004cc8:	4620      	mov	r0, r4
 8004cca:	f7fb fb5d 	bl	8000388 <d_append_buffer>
 8004cce:	68ab      	ldr	r3, [r5, #8]
 8004cd0:	4641      	mov	r1, r8
 8004cd2:	689a      	ldr	r2, [r3, #8]
 8004cd4:	4620      	mov	r0, r4
 8004cd6:	f000 fbc3 	bl	8005460 <d_print_comp>
 8004cda:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004cde:	29ff      	cmp	r1, #255	; 0xff
 8004ce0:	f000 81df 	beq.w	80050a2 <d_print_comp_inner+0x2796>
 8004ce4:	2329      	movs	r3, #41	; 0x29
 8004ce6:	1c4a      	adds	r2, r1, #1
 8004ce8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004cec:	5463      	strb	r3, [r4, r1]
 8004cee:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004cf2:	f7fd bed9 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8004cf6:	4632      	mov	r2, r6
 8004cf8:	4641      	mov	r1, r8
 8004cfa:	4620      	mov	r0, r4
 8004cfc:	f000 fbb0 	bl	8005460 <d_print_comp>
 8004d00:	f7fd bed2 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8004d04:	2600      	movs	r6, #0
 8004d06:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004d0a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004d0e:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004d12:	4620      	mov	r0, r4
 8004d14:	4798      	blx	r3
 8004d16:	2201      	movs	r2, #1
 8004d18:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004d1c:	4631      	mov	r1, r6
 8004d1e:	4413      	add	r3, r2
 8004d20:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004d24:	f7fe ba4e 	b.w	80031c4 <d_print_comp_inner+0x8b8>
 8004d28:	49bd      	ldr	r1, [pc, #756]	; (8005020 <d_print_comp_inner+0x2714>)
 8004d2a:	6870      	ldr	r0, [r6, #4]
 8004d2c:	f007 f97c 	bl	800c028 <strncmp>
 8004d30:	2800      	cmp	r0, #0
 8004d32:	f47e aab6 	bne.w	80032a2 <d_print_comp_inner+0x996>
 8004d36:	68aa      	ldr	r2, [r5, #8]
 8004d38:	4641      	mov	r1, r8
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	f000 fb90 	bl	8005460 <d_print_comp>
 8004d40:	2202      	movs	r2, #2
 8004d42:	49b8      	ldr	r1, [pc, #736]	; (8005024 <d_print_comp_inner+0x2718>)
 8004d44:	4620      	mov	r0, r4
 8004d46:	f7fb fb1f 	bl	8000388 <d_append_buffer>
 8004d4a:	f7fe bad6 	b.w	80032fa <d_print_comp_inner+0x9ee>
 8004d4e:	68aa      	ldr	r2, [r5, #8]
 8004d50:	7817      	ldrb	r7, [r2, #0]
 8004d52:	2f00      	cmp	r7, #0
 8004d54:	f47e aea6 	bne.w	8003aa4 <d_print_comp_inner+0x1198>
 8004d58:	2b3d      	cmp	r3, #61	; 0x3d
 8004d5a:	f000 82ef 	beq.w	800533c <d_print_comp_inner+0x2a30>
 8004d5e:	68aa      	ldr	r2, [r5, #8]
 8004d60:	4641      	mov	r1, r8
 8004d62:	4620      	mov	r0, r4
 8004d64:	3e02      	subs	r6, #2
 8004d66:	f000 fb7b 	bl	8005460 <d_print_comp>
 8004d6a:	2e04      	cmp	r6, #4
 8004d6c:	f63d ae9c 	bhi.w	8002aa8 <d_print_comp_inner+0x19c>
 8004d70:	e8df f006 	tbb	[pc, r6]
 8004d74:	0a111826 	.word	0x0a111826
 8004d78:	03          	.byte	0x03
 8004d79:	00          	.byte	0x00
 8004d7a:	4620      	mov	r0, r4
 8004d7c:	2203      	movs	r2, #3
 8004d7e:	49aa      	ldr	r1, [pc, #680]	; (8005028 <d_print_comp_inner+0x271c>)
 8004d80:	f7fb fb02 	bl	8000388 <d_append_buffer>
 8004d84:	f7fd be90 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8004d88:	4620      	mov	r0, r4
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	49a7      	ldr	r1, [pc, #668]	; (800502c <d_print_comp_inner+0x2720>)
 8004d8e:	f7fb fafb 	bl	8000388 <d_append_buffer>
 8004d92:	f7fd be89 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8004d96:	4620      	mov	r0, r4
 8004d98:	2202      	movs	r2, #2
 8004d9a:	49a5      	ldr	r1, [pc, #660]	; (8005030 <d_print_comp_inner+0x2724>)
 8004d9c:	f7fb faf4 	bl	8000388 <d_append_buffer>
 8004da0:	f7fd be82 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8004da4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004da8:	29ff      	cmp	r1, #255	; 0xff
 8004daa:	f000 831a 	beq.w	80053e2 <d_print_comp_inner+0x2ad6>
 8004dae:	236c      	movs	r3, #108	; 0x6c
 8004db0:	1c4a      	adds	r2, r1, #1
 8004db2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004db6:	5463      	strb	r3, [r4, r1]
 8004db8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004dbc:	f7fd be74 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8004dc0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004dc4:	29ff      	cmp	r1, #255	; 0xff
 8004dc6:	f000 82db 	beq.w	8005380 <d_print_comp_inner+0x2a74>
 8004dca:	2375      	movs	r3, #117	; 0x75
 8004dcc:	1c4a      	adds	r2, r1, #1
 8004dce:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004dd2:	5463      	strb	r3, [r4, r1]
 8004dd4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004dd8:	f7fd be66 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8004ddc:	2600      	movs	r6, #0
 8004dde:	4619      	mov	r1, r3
 8004de0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004de4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004de8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004dec:	4620      	mov	r0, r4
 8004dee:	4798      	blx	r3
 8004df0:	2101      	movs	r1, #1
 8004df2:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8004df6:	4633      	mov	r3, r6
 8004df8:	440a      	add	r2, r1
 8004dfa:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004dfe:	f7fe bd3a 	b.w	8003876 <d_print_comp_inner+0xf6a>
 8004e02:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8004e06:	f7fe bf94 	b.w	8003d32 <d_print_comp_inner+0x1426>
 8004e0a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004e0e:	29ff      	cmp	r1, #255	; 0xff
 8004e10:	f000 8244 	beq.w	800529c <d_print_comp_inner+0x2990>
 8004e14:	2320      	movs	r3, #32
 8004e16:	1c4a      	adds	r2, r1, #1
 8004e18:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004e1c:	5463      	strb	r3, [r4, r1]
 8004e1e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004e22:	e445      	b.n	80046b0 <d_print_comp_inner+0x1da4>
 8004e24:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004e28:	29ff      	cmp	r1, #255	; 0xff
 8004e2a:	f000 826e 	beq.w	800530a <d_print_comp_inner+0x29fe>
 8004e2e:	2320      	movs	r3, #32
 8004e30:	1c4a      	adds	r2, r1, #1
 8004e32:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004e36:	5463      	strb	r3, [r4, r1]
 8004e38:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004e3c:	e417      	b.n	800466e <d_print_comp_inner+0x1d62>
 8004e3e:	2500      	movs	r5, #0
 8004e40:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004e44:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004e48:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004e4c:	4620      	mov	r0, r4
 8004e4e:	4798      	blx	r3
 8004e50:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004e54:	4629      	mov	r1, r5
 8004e56:	3301      	adds	r3, #1
 8004e58:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004e5c:	e4db      	b.n	8004816 <d_print_comp_inner+0x1f0a>
 8004e5e:	4664      	mov	r4, ip
 8004e60:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 8004e64:	b1d8      	cbz	r0, 8004e9e <d_print_comp_inner+0x2592>
 8004e66:	6802      	ldr	r2, [r0, #0]
 8004e68:	4291      	cmp	r1, r2
 8004e6a:	d00a      	beq.n	8004e82 <d_print_comp_inner+0x2576>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	e004      	b.n	8004e7a <d_print_comp_inner+0x256e>
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	b1a3      	cbz	r3, 8004e9e <d_print_comp_inner+0x2592>
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	4291      	cmp	r1, r2
 8004e78:	d003      	beq.n	8004e82 <d_print_comp_inner+0x2576>
 8004e7a:	4295      	cmp	r5, r2
 8004e7c:	d1f8      	bne.n	8004e70 <d_print_comp_inner+0x2564>
 8004e7e:	4298      	cmp	r0, r3
 8004e80:	d0f6      	beq.n	8004e70 <d_print_comp_inner+0x2564>
 8004e82:	3104      	adds	r1, #4
 8004e84:	4620      	mov	r0, r4
 8004e86:	f7fb fc8f 	bl	80007a8 <d_lookup_template_argument.isra.6>
 8004e8a:	2800      	cmp	r0, #0
 8004e8c:	f43d ae20 	beq.w	8002ad0 <d_print_comp_inner+0x1c4>
 8004e90:	7803      	ldrb	r3, [r0, #0]
 8004e92:	2b2f      	cmp	r3, #47	; 0x2f
 8004e94:	f43d ae0b 	beq.w	8002aae <d_print_comp_inner+0x1a2>
 8004e98:	4601      	mov	r1, r0
 8004e9a:	f7fe bc2d 	b.w	80036f8 <d_print_comp_inner+0xdec>
 8004e9e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004ea2:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
 8004ea6:	3104      	adds	r1, #4
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004eae:	f7fb fc7b 	bl	80007a8 <d_lookup_template_argument.isra.6>
 8004eb2:	2800      	cmp	r0, #0
 8004eb4:	f43d ae0a 	beq.w	8002acc <d_print_comp_inner+0x1c0>
 8004eb8:	2701      	movs	r7, #1
 8004eba:	e7e9      	b.n	8004e90 <d_print_comp_inner+0x2584>
 8004ebc:	2500      	movs	r5, #0
 8004ebe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004ec2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004ec6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004eca:	4620      	mov	r0, r4
 8004ecc:	4798      	blx	r3
 8004ece:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004ed2:	4629      	mov	r1, r5
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	f8da 5004 	ldr.w	r5, [sl, #4]
 8004eda:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004ede:	f7ff b858 	b.w	8003f92 <d_print_comp_inner+0x1686>
 8004ee2:	68aa      	ldr	r2, [r5, #8]
 8004ee4:	4641      	mov	r1, r8
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	f000 faba 	bl	8005460 <d_print_comp>
 8004eec:	9a00      	ldr	r2, [sp, #0]
 8004eee:	9b06      	ldr	r3, [sp, #24]
 8004ef0:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f43e ac9b 	beq.w	8003830 <d_print_comp_inner+0xf24>
 8004efa:	f7fd bdd5 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8004efe:	255f      	movs	r5, #95	; 0x5f
 8004f00:	f7ff ba0e 	b.w	8004320 <d_print_comp_inner+0x1a14>
 8004f04:	2500      	movs	r5, #0
 8004f06:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f0a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004f0e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004f12:	4620      	mov	r0, r4
 8004f14:	4798      	blx	r3
 8004f16:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004f1a:	4629      	mov	r1, r5
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004f22:	f7ff bb7f 	b.w	8004624 <d_print_comp_inner+0x1d18>
 8004f26:	4648      	mov	r0, r9
 8004f28:	4942      	ldr	r1, [pc, #264]	; (8005034 <d_print_comp_inner+0x2728>)
 8004f2a:	f001 fc5b 	bl	80067e4 <strcmp>
 8004f2e:	b120      	cbz	r0, 8004f3a <d_print_comp_inner+0x262e>
 8004f30:	463a      	mov	r2, r7
 8004f32:	4641      	mov	r1, r8
 8004f34:	4620      	mov	r0, r4
 8004f36:	f001 f883 	bl	8006040 <d_print_expr_op>
 8004f3a:	68ab      	ldr	r3, [r5, #8]
 8004f3c:	4641      	mov	r1, r8
 8004f3e:	689a      	ldr	r2, [r3, #8]
 8004f40:	4620      	mov	r0, r4
 8004f42:	f001 f8bb 	bl	80060bc <d_print_subexpr>
 8004f46:	f7fd bd97 	b.w	8002a78 <d_print_comp_inner+0x16c>
 8004f4a:	2600      	movs	r6, #0
 8004f4c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f50:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004f54:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004f58:	4620      	mov	r0, r4
 8004f5a:	4798      	blx	r3
 8004f5c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004f60:	4631      	mov	r1, r6
 8004f62:	3301      	adds	r3, #1
 8004f64:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004f68:	f7ff bb86 	b.w	8004678 <d_print_comp_inner+0x1d6c>
 8004f6c:	2500      	movs	r5, #0
 8004f6e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f72:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004f76:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	4798      	blx	r3
 8004f7e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004f82:	4629      	mov	r1, r5
 8004f84:	3301      	adds	r3, #1
 8004f86:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004f8a:	f7fe bb56 	b.w	800363a <d_print_comp_inner+0xd2e>
 8004f8e:	2500      	movs	r5, #0
 8004f90:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8004f94:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8004f98:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8004f9c:	4798      	blx	r3
 8004f9e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004fa2:	4629      	mov	r1, r5
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8004faa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004fae:	f7fe bb27 	b.w	8003600 <d_print_comp_inner+0xcf4>
 8004fb2:	6840      	ldr	r0, [r0, #4]
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	f43d ad8b 	beq.w	8002ad0 <d_print_comp_inner+0x1c4>
 8004fba:	f7fe b952 	b.w	8003262 <d_print_comp_inner+0x956>
 8004fbe:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004fc8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004fcc:	4620      	mov	r0, r4
 8004fce:	4798      	blx	r3
 8004fd0:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8004fd4:	462b      	mov	r3, r5
 8004fd6:	3201      	adds	r2, #1
 8004fd8:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004fdc:	f7ff bb11 	b.w	8004602 <d_print_comp_inner+0x1cf6>
 8004fe0:	6873      	ldr	r3, [r6, #4]
 8004fe2:	781a      	ldrb	r2, [r3, #0]
 8004fe4:	2a01      	cmp	r2, #1
 8004fe6:	f000 8153 	beq.w	8005290 <d_print_comp_inner+0x2984>
 8004fea:	f896 a000 	ldrb.w	sl, [r6]
 8004fee:	f7ff badd 	b.w	80045ac <d_print_comp_inner+0x1ca0>
 8004ff2:	2500      	movs	r5, #0
 8004ff4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004ff8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004ffc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005000:	4620      	mov	r0, r4
 8005002:	4798      	blx	r3
 8005004:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005008:	4629      	mov	r1, r5
 800500a:	3301      	adds	r3, #1
 800500c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005010:	f7ff bb53 	b.w	80046ba <d_print_comp_inner+0x1dae>
 8005014:	4654      	mov	r4, sl
 8005016:	f7fe be8c 	b.w	8003d32 <d_print_comp_inner+0x1426>
 800501a:	bf00      	nop
 800501c:	0800d8bc 	.word	0x0800d8bc
 8005020:	0800d724 	.word	0x0800d724
 8005024:	0800d72c 	.word	0x0800d72c
 8005028:	0800d8d8 	.word	0x0800d8d8
 800502c:	0800d8d4 	.word	0x0800d8d4
 8005030:	0800d8d0 	.word	0x0800d8d0
 8005034:	0800d6c4 	.word	0x0800d6c4
 8005038:	686a      	ldr	r2, [r5, #4]
 800503a:	4641      	mov	r1, r8
 800503c:	4620      	mov	r0, r4
 800503e:	f001 f83d 	bl	80060bc <d_print_subexpr>
 8005042:	4620      	mov	r0, r4
 8005044:	2203      	movs	r2, #3
 8005046:	49e2      	ldr	r1, [pc, #904]	; (80053d0 <d_print_comp_inner+0x2ac4>)
 8005048:	f7fb f99e 	bl	8000388 <d_append_buffer>
 800504c:	f7fd bd2c 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8005050:	ab14      	add	r3, sp, #80	; 0x50
 8005052:	f843 cd48 	str.w	ip, [r3, #-72]!
 8005056:	9603      	str	r6, [sp, #12]
 8005058:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800505c:	f7fe b853 	b.w	8003106 <d_print_comp_inner+0x7fa>
 8005060:	2700      	movs	r7, #0
 8005062:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005066:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800506a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800506e:	4620      	mov	r0, r4
 8005070:	4798      	blx	r3
 8005072:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005076:	4639      	mov	r1, r7
 8005078:	3301      	adds	r3, #1
 800507a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800507e:	e41b      	b.n	80048b8 <d_print_comp_inner+0x1fac>
 8005080:	2600      	movs	r6, #0
 8005082:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005086:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800508a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800508e:	4620      	mov	r0, r4
 8005090:	4798      	blx	r3
 8005092:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005096:	4631      	mov	r1, r6
 8005098:	3301      	adds	r3, #1
 800509a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800509e:	f7ff bb88 	b.w	80047b2 <d_print_comp_inner+0x1ea6>
 80050a2:	2500      	movs	r5, #0
 80050a4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80050a8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80050ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80050b0:	4620      	mov	r0, r4
 80050b2:	4798      	blx	r3
 80050b4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80050b8:	4629      	mov	r1, r5
 80050ba:	3301      	adds	r3, #1
 80050bc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80050c0:	e610      	b.n	8004ce4 <d_print_comp_inner+0x23d8>
 80050c2:	2600      	movs	r6, #0
 80050c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80050c8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80050cc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80050d0:	4620      	mov	r0, r4
 80050d2:	4798      	blx	r3
 80050d4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80050d8:	4631      	mov	r1, r6
 80050da:	3301      	adds	r3, #1
 80050dc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80050e0:	f7ff bb88 	b.w	80047f4 <d_print_comp_inner+0x1ee8>
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	6891      	ldr	r1, [r2, #8]
 80050e8:	2901      	cmp	r1, #1
 80050ea:	f47d ac8a 	bne.w	8002a02 <d_print_comp_inner+0xf6>
 80050ee:	6852      	ldr	r2, [r2, #4]
 80050f0:	7812      	ldrb	r2, [r2, #0]
 80050f2:	2a3e      	cmp	r2, #62	; 0x3e
 80050f4:	f47d ac85 	bne.w	8002a02 <d_print_comp_inner+0xf6>
 80050f8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80050fc:	29ff      	cmp	r1, #255	; 0xff
 80050fe:	d10f      	bne.n	8005120 <d_print_comp_inner+0x2814>
 8005100:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005104:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005108:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800510c:	4620      	mov	r0, r4
 800510e:	4798      	blx	r3
 8005110:	4631      	mov	r1, r6
 8005112:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005116:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800511a:	3301      	adds	r3, #1
 800511c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005120:	2328      	movs	r3, #40	; 0x28
 8005122:	1c4a      	adds	r2, r1, #1
 8005124:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005128:	5463      	strb	r3, [r4, r1]
 800512a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800512e:	686b      	ldr	r3, [r5, #4]
 8005130:	f7fd bc67 	b.w	8002a02 <d_print_comp_inner+0xf6>
 8005134:	2500      	movs	r5, #0
 8005136:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800513a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800513e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005142:	4620      	mov	r0, r4
 8005144:	4798      	blx	r3
 8005146:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800514a:	4629      	mov	r1, r5
 800514c:	3301      	adds	r3, #1
 800514e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005152:	f7ff bb09 	b.w	8004768 <d_print_comp_inner+0x1e5c>
 8005156:	f8db b004 	ldr.w	fp, [fp, #4]
 800515a:	f1bb 0f00 	cmp.w	fp, #0
 800515e:	f43e ade8 	beq.w	8003d32 <d_print_comp_inner+0x1426>
 8005162:	f7fd bfbc 	b.w	80030de <d_print_comp_inner+0x7d2>
 8005166:	9b02      	ldr	r3, [sp, #8]
 8005168:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800516c:	f7fd bfd4 	b.w	8003118 <d_print_comp_inner+0x80c>
 8005170:	6893      	ldr	r3, [r2, #8]
 8005172:	4641      	mov	r1, r8
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	4620      	mov	r0, r4
 8005178:	2b29      	cmp	r3, #41	; 0x29
 800517a:	bf1c      	itt	ne
 800517c:	2301      	movne	r3, #1
 800517e:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
 8005182:	6852      	ldr	r2, [r2, #4]
 8005184:	f000 ff9a 	bl	80060bc <d_print_subexpr>
 8005188:	f7fd bc4c 	b.w	8002a24 <d_print_comp_inner+0x118>
 800518c:	2600      	movs	r6, #0
 800518e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005192:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005196:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800519a:	4620      	mov	r0, r4
 800519c:	4798      	blx	r3
 800519e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80051a2:	4631      	mov	r1, r6
 80051a4:	3301      	adds	r3, #1
 80051a6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80051aa:	e57e      	b.n	8004caa <d_print_comp_inner+0x239e>
 80051ac:	6872      	ldr	r2, [r6, #4]
 80051ae:	4641      	mov	r1, r8
 80051b0:	4620      	mov	r0, r4
 80051b2:	f000 ff83 	bl	80060bc <d_print_subexpr>
 80051b6:	464a      	mov	r2, r9
 80051b8:	4641      	mov	r1, r8
 80051ba:	4620      	mov	r0, r4
 80051bc:	f000 ff40 	bl	8006040 <d_print_expr_op>
 80051c0:	f7fd bc72 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 80051c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80051c8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80051cc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80051d0:	4620      	mov	r0, r4
 80051d2:	4798      	blx	r3
 80051d4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80051d8:	4631      	mov	r1, r6
 80051da:	3301      	adds	r3, #1
 80051dc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80051e0:	f7fd bfa6 	b.w	8003130 <d_print_comp_inner+0x824>
 80051e4:	464a      	mov	r2, r9
 80051e6:	4641      	mov	r1, r8
 80051e8:	4620      	mov	r0, r4
 80051ea:	f000 ff67 	bl	80060bc <d_print_subexpr>
 80051ee:	4652      	mov	r2, sl
 80051f0:	4641      	mov	r1, r8
 80051f2:	4620      	mov	r0, r4
 80051f4:	f000 ff24 	bl	8006040 <d_print_expr_op>
 80051f8:	463a      	mov	r2, r7
 80051fa:	4641      	mov	r1, r8
 80051fc:	4620      	mov	r0, r4
 80051fe:	f000 ff5d 	bl	80060bc <d_print_subexpr>
 8005202:	4620      	mov	r0, r4
 8005204:	2203      	movs	r2, #3
 8005206:	4973      	ldr	r1, [pc, #460]	; (80053d4 <d_print_comp_inner+0x2ac8>)
 8005208:	f7fb f8be 	bl	8000388 <d_append_buffer>
 800520c:	462a      	mov	r2, r5
 800520e:	4641      	mov	r1, r8
 8005210:	4620      	mov	r0, r4
 8005212:	f000 ff53 	bl	80060bc <d_print_subexpr>
 8005216:	f7fd bc47 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 800521a:	454f      	cmp	r7, r9
 800521c:	f67f ae6f 	bls.w	8004efe <d_print_comp_inner+0x25f2>
 8005220:	2d5f      	cmp	r5, #95	; 0x5f
 8005222:	f47f ae6c 	bne.w	8004efe <d_print_comp_inner+0x25f2>
 8005226:	28ff      	cmp	r0, #255	; 0xff
 8005228:	f63f a87a 	bhi.w	8004320 <d_print_comp_inner+0x1a14>
 800522c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005230:	b2c5      	uxtb	r5, r0
 8005232:	29ff      	cmp	r1, #255	; 0xff
 8005234:	d10f      	bne.n	8005256 <d_print_comp_inner+0x294a>
 8005236:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800523a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800523e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005242:	4620      	mov	r0, r4
 8005244:	4798      	blx	r3
 8005246:	2100      	movs	r1, #0
 8005248:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800524c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8005250:	3301      	adds	r3, #1
 8005252:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005256:	1c4b      	adds	r3, r1, #1
 8005258:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800525c:	464e      	mov	r6, r9
 800525e:	5465      	strb	r5, [r4, r1]
 8005260:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8005264:	f7ff b866 	b.w	8004334 <d_print_comp_inner+0x1a28>
 8005268:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800526c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005270:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005274:	4620      	mov	r0, r4
 8005276:	4798      	blx	r3
 8005278:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800527c:	4631      	mov	r1, r6
 800527e:	3301      	adds	r3, #1
 8005280:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005284:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005288:	f7ff bbe3 	b.w	8004a52 <d_print_comp_inner+0x2146>
 800528c:	4691      	mov	r9, r2
 800528e:	e5e7      	b.n	8004e60 <d_print_comp_inner+0x2554>
 8005290:	68b2      	ldr	r2, [r6, #8]
 8005292:	7812      	ldrb	r2, [r2, #0]
 8005294:	2a29      	cmp	r2, #41	; 0x29
 8005296:	bf08      	it	eq
 8005298:	461e      	moveq	r6, r3
 800529a:	e6a6      	b.n	8004fea <d_print_comp_inner+0x26de>
 800529c:	2500      	movs	r5, #0
 800529e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80052a2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80052a6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80052aa:	4620      	mov	r0, r4
 80052ac:	4798      	blx	r3
 80052ae:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80052b2:	4629      	mov	r1, r5
 80052b4:	3301      	adds	r3, #1
 80052b6:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 80052ba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80052be:	e5a9      	b.n	8004e14 <d_print_comp_inner+0x2508>
 80052c0:	2600      	movs	r6, #0
 80052c2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80052c6:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80052ca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80052ce:	4620      	mov	r0, r4
 80052d0:	4798      	blx	r3
 80052d2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80052d6:	4631      	mov	r1, r6
 80052d8:	3301      	adds	r3, #1
 80052da:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80052de:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80052e2:	f7fd bbc2 	b.w	8002a6a <d_print_comp_inner+0x15e>
 80052e6:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 80052ea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80052ee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80052f2:	4620      	mov	r0, r4
 80052f4:	4798      	blx	r3
 80052f6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80052fa:	4631      	mov	r1, r6
 80052fc:	3301      	adds	r3, #1
 80052fe:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005302:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005306:	f7fd bb9e 	b.w	8002a46 <d_print_comp_inner+0x13a>
 800530a:	2600      	movs	r6, #0
 800530c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005310:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005314:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005318:	4620      	mov	r0, r4
 800531a:	4798      	blx	r3
 800531c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005320:	4631      	mov	r1, r6
 8005322:	3301      	adds	r3, #1
 8005324:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005328:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800532c:	e57f      	b.n	8004e2e <d_print_comp_inner+0x2522>
 800532e:	6841      	ldr	r1, [r0, #4]
 8005330:	2900      	cmp	r1, #0
 8005332:	f43d abca 	beq.w	8002aca <d_print_comp_inner+0x1be>
 8005336:	780b      	ldrb	r3, [r1, #0]
 8005338:	f7fe b9de 	b.w	80036f8 <d_print_comp_inner+0xdec>
 800533c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005340:	29ff      	cmp	r1, #255	; 0xff
 8005342:	d00d      	beq.n	8005360 <d_print_comp_inner+0x2a54>
 8005344:	232d      	movs	r3, #45	; 0x2d
 8005346:	1c4a      	adds	r2, r1, #1
 8005348:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800534c:	5463      	strb	r3, [r4, r1]
 800534e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005352:	e504      	b.n	8004d5e <d_print_comp_inner+0x2452>
 8005354:	2205      	movs	r2, #5
 8005356:	4920      	ldr	r1, [pc, #128]	; (80053d8 <d_print_comp_inner+0x2acc>)
 8005358:	f7fb f816 	bl	8000388 <d_append_buffer>
 800535c:	f7fd bba4 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 8005360:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005364:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
 8005368:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 800536c:	4798      	blx	r3
 800536e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005372:	4639      	mov	r1, r7
 8005374:	3301      	adds	r3, #1
 8005376:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 800537a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800537e:	e7e1      	b.n	8005344 <d_print_comp_inner+0x2a38>
 8005380:	2500      	movs	r5, #0
 8005382:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005386:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800538a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800538e:	4620      	mov	r0, r4
 8005390:	4798      	blx	r3
 8005392:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005396:	4629      	mov	r1, r5
 8005398:	3301      	adds	r3, #1
 800539a:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 800539e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80053a2:	e512      	b.n	8004dca <d_print_comp_inner+0x24be>
 80053a4:	2700      	movs	r7, #0
 80053a6:	f7ff b910 	b.w	80045ca <d_print_comp_inner+0x1cbe>
 80053aa:	2500      	movs	r5, #0
 80053ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80053b0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80053b4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80053b8:	4620      	mov	r0, r4
 80053ba:	4798      	blx	r3
 80053bc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80053c0:	4629      	mov	r1, r5
 80053c2:	3301      	adds	r3, #1
 80053c4:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 80053c8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80053cc:	f7fd bb65 	b.w	8002a9a <d_print_comp_inner+0x18e>
 80053d0:	0800d908 	.word	0x0800d908
 80053d4:	0800d8c4 	.word	0x0800d8c4
 80053d8:	0800d8dc 	.word	0x0800d8dc
 80053dc:	4637      	mov	r7, r6
 80053de:	f7ff bbe6 	b.w	8004bae <d_print_comp_inner+0x22a2>
 80053e2:	2500      	movs	r5, #0
 80053e4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80053e8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80053ec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80053f0:	4620      	mov	r0, r4
 80053f2:	4798      	blx	r3
 80053f4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80053f8:	4629      	mov	r1, r5
 80053fa:	3301      	adds	r3, #1
 80053fc:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005400:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005404:	e4d3      	b.n	8004dae <d_print_comp_inner+0x24a2>
 8005406:	f8c9 2000 	str.w	r2, [r9]
 800540a:	3104      	adds	r1, #4
 800540c:	4620      	mov	r0, r4
 800540e:	f7fb f9cb 	bl	80007a8 <d_lookup_template_argument.isra.6>
 8005412:	2800      	cmp	r0, #0
 8005414:	f47f ad3c 	bne.w	8004e90 <d_print_comp_inner+0x2584>
 8005418:	f7fd bb5a 	b.w	8002ad0 <d_print_comp_inner+0x1c4>
 800541c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005420:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005424:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005428:	4620      	mov	r0, r4
 800542a:	4798      	blx	r3
 800542c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005430:	4631      	mov	r1, r6
 8005432:	3301      	adds	r3, #1
 8005434:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005438:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800543c:	f7fe bc00 	b.w	8003c40 <d_print_comp_inner+0x1334>
 8005440:	2301      	movs	r3, #1
 8005442:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8005446:	f7fd bb2f 	b.w	8002aa8 <d_print_comp_inner+0x19c>
 800544a:	4618      	mov	r0, r3
 800544c:	4407      	add	r7, r0
 800544e:	f7ff bb81 	b.w	8004b54 <d_print_comp_inner+0x2248>
 8005452:	2000      	movs	r0, #0
 8005454:	4407      	add	r7, r0
 8005456:	f7ff bb7d 	b.w	8004b54 <d_print_comp_inner+0x2248>
 800545a:	4607      	mov	r7, r0
 800545c:	f7ff bba7 	b.w	8004bae <d_print_comp_inner+0x22a2>

08005460 <d_print_comp>:
 8005460:	b510      	push	{r4, lr}
 8005462:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
 8005466:	b082      	sub	sp, #8
 8005468:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
 800546c:	4604      	mov	r4, r0
 800546e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8005472:	f7fd fa4b 	bl	800290c <d_print_comp_inner>
 8005476:	9b01      	ldr	r3, [sp, #4]
 8005478:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800547c:	b002      	add	sp, #8
 800547e:	bd10      	pop	{r4, pc}

08005480 <d_print_mod>:
 8005480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005484:	7813      	ldrb	r3, [r2, #0]
 8005486:	b082      	sub	sp, #8
 8005488:	3b03      	subs	r3, #3
 800548a:	4615      	mov	r5, r2
 800548c:	4604      	mov	r4, r0
 800548e:	4688      	mov	r8, r1
 8005490:	2b49      	cmp	r3, #73	; 0x49
 8005492:	f200 8229 	bhi.w	80058e8 <d_print_mod+0x468>
 8005496:	e8df f013 	tbh	[pc, r3, lsl #1]
 800549a:	01e9      	.short	0x01e9
 800549c:	02270227 	.word	0x02270227
 80054a0:	02270227 	.word	0x02270227
 80054a4:	02270227 	.word	0x02270227
 80054a8:	02270227 	.word	0x02270227
 80054ac:	02270227 	.word	0x02270227
 80054b0:	02270227 	.word	0x02270227
 80054b4:	02270227 	.word	0x02270227
 80054b8:	02270227 	.word	0x02270227
 80054bc:	02270227 	.word	0x02270227
 80054c0:	02270227 	.word	0x02270227
 80054c4:	01ee0227 	.word	0x01ee0227
 80054c8:	01aa0184 	.word	0x01aa0184
 80054cc:	018401ee 	.word	0x018401ee
 80054d0:	01cf01aa 	.word	0x01cf01aa
 80054d4:	006f01dc 	.word	0x006f01dc
 80054d8:	009d008d 	.word	0x009d008d
 80054dc:	00d000ac 	.word	0x00d000ac
 80054e0:	022700f5 	.word	0x022700f5
 80054e4:	02270227 	.word	0x02270227
 80054e8:	011a0227 	.word	0x011a0227
 80054ec:	015e0227 	.word	0x015e0227
 80054f0:	02270227 	.word	0x02270227
 80054f4:	02270227 	.word	0x02270227
 80054f8:	02270227 	.word	0x02270227
 80054fc:	02270227 	.word	0x02270227
 8005500:	02270227 	.word	0x02270227
 8005504:	02270227 	.word	0x02270227
 8005508:	02270227 	.word	0x02270227
 800550c:	02270227 	.word	0x02270227
 8005510:	02270227 	.word	0x02270227
 8005514:	02270227 	.word	0x02270227
 8005518:	02270227 	.word	0x02270227
 800551c:	02270227 	.word	0x02270227
 8005520:	02270227 	.word	0x02270227
 8005524:	02270227 	.word	0x02270227
 8005528:	02270227 	.word	0x02270227
 800552c:	004a      	.short	0x004a
 800552e:	4dd6      	ldr	r5, [pc, #856]	; (8005888 <d_print_mod+0x408>)
 8005530:	f04f 0800 	mov.w	r8, #0
 8005534:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005538:	f105 0711 	add.w	r7, r5, #17
 800553c:	e008      	b.n	8005550 <d_print_mod+0xd0>
 800553e:	460b      	mov	r3, r1
 8005540:	3101      	adds	r1, #1
 8005542:	42bd      	cmp	r5, r7
 8005544:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005548:	54e6      	strb	r6, [r4, r3]
 800554a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800554e:	d02e      	beq.n	80055ae <d_print_mod+0x12e>
 8005550:	29ff      	cmp	r1, #255	; 0xff
 8005552:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005556:	d1f2      	bne.n	800553e <d_print_mod+0xbe>
 8005558:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800555c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005560:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005564:	4620      	mov	r0, r4
 8005566:	4798      	blx	r3
 8005568:	2101      	movs	r1, #1
 800556a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 800556e:	2300      	movs	r3, #0
 8005570:	440a      	add	r2, r1
 8005572:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005576:	e7e4      	b.n	8005542 <d_print_mod+0xc2>
 8005578:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800557c:	29ff      	cmp	r1, #255	; 0xff
 800557e:	f000 81fe 	beq.w	800597e <d_print_mod+0x4fe>
 8005582:	1c4a      	adds	r2, r1, #1
 8005584:	2320      	movs	r3, #32
 8005586:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800558a:	5463      	strb	r3, [r4, r1]
 800558c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005590:	68ab      	ldr	r3, [r5, #8]
 8005592:	4641      	mov	r1, r8
 8005594:	461a      	mov	r2, r3
 8005596:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
 800559a:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 800559e:	4620      	mov	r0, r4
 80055a0:	e88d 0028 	stmia.w	sp, {r3, r5}
 80055a4:	f7fd f9b2 	bl	800290c <d_print_comp_inner>
 80055a8:	9b01      	ldr	r3, [sp, #4]
 80055aa:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80055ae:	b002      	add	sp, #8
 80055b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055b4:	f011 0504 	ands.w	r5, r1, #4
 80055b8:	d1f9      	bne.n	80055ae <d_print_mod+0x12e>
 80055ba:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80055be:	2bff      	cmp	r3, #255	; 0xff
 80055c0:	f000 8222 	beq.w	8005a08 <d_print_mod+0x588>
 80055c4:	222a      	movs	r2, #42	; 0x2a
 80055c6:	1c59      	adds	r1, r3, #1
 80055c8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80055cc:	54e2      	strb	r2, [r4, r3]
 80055ce:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80055d2:	e7ec      	b.n	80055ae <d_print_mod+0x12e>
 80055d4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80055d8:	29ff      	cmp	r1, #255	; 0xff
 80055da:	f000 81bf 	beq.w	800595c <d_print_mod+0x4dc>
 80055de:	1c4a      	adds	r2, r1, #1
 80055e0:	2326      	movs	r3, #38	; 0x26
 80055e2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80055e6:	5463      	strb	r3, [r4, r1]
 80055e8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80055ec:	b002      	add	sp, #8
 80055ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055f2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80055f6:	4da5      	ldr	r5, [pc, #660]	; (800588c <d_print_mod+0x40c>)
 80055f8:	f04f 0800 	mov.w	r8, #0
 80055fc:	1caf      	adds	r7, r5, #2
 80055fe:	e008      	b.n	8005612 <d_print_mod+0x192>
 8005600:	460b      	mov	r3, r1
 8005602:	3101      	adds	r1, #1
 8005604:	42bd      	cmp	r5, r7
 8005606:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800560a:	54e6      	strb	r6, [r4, r3]
 800560c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8005610:	d0cd      	beq.n	80055ae <d_print_mod+0x12e>
 8005612:	29ff      	cmp	r1, #255	; 0xff
 8005614:	f815 6b01 	ldrb.w	r6, [r5], #1
 8005618:	d1f2      	bne.n	8005600 <d_print_mod+0x180>
 800561a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800561e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005622:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005626:	4620      	mov	r0, r4
 8005628:	4798      	blx	r3
 800562a:	2101      	movs	r1, #1
 800562c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8005630:	2300      	movs	r3, #0
 8005632:	440a      	add	r2, r1
 8005634:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005638:	e7e4      	b.n	8005604 <d_print_mod+0x184>
 800563a:	4d95      	ldr	r5, [pc, #596]	; (8005890 <d_print_mod+0x410>)
 800563c:	f04f 0800 	mov.w	r8, #0
 8005640:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005644:	f105 0708 	add.w	r7, r5, #8
 8005648:	e008      	b.n	800565c <d_print_mod+0x1dc>
 800564a:	460b      	mov	r3, r1
 800564c:	3101      	adds	r1, #1
 800564e:	42bd      	cmp	r5, r7
 8005650:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005654:	54e6      	strb	r6, [r4, r3]
 8005656:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800565a:	d0a8      	beq.n	80055ae <d_print_mod+0x12e>
 800565c:	29ff      	cmp	r1, #255	; 0xff
 800565e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005662:	d1f2      	bne.n	800564a <d_print_mod+0x1ca>
 8005664:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005668:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800566c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005670:	4620      	mov	r0, r4
 8005672:	4798      	blx	r3
 8005674:	2101      	movs	r1, #1
 8005676:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 800567a:	2300      	movs	r3, #0
 800567c:	440a      	add	r2, r1
 800567e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005682:	e7e4      	b.n	800564e <d_print_mod+0x1ce>
 8005684:	4d83      	ldr	r5, [pc, #524]	; (8005894 <d_print_mod+0x414>)
 8005686:	f04f 0800 	mov.w	r8, #0
 800568a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800568e:	f105 070a 	add.w	r7, r5, #10
 8005692:	e008      	b.n	80056a6 <d_print_mod+0x226>
 8005694:	460b      	mov	r3, r1
 8005696:	3101      	adds	r1, #1
 8005698:	42bd      	cmp	r5, r7
 800569a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800569e:	54e6      	strb	r6, [r4, r3]
 80056a0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80056a4:	d083      	beq.n	80055ae <d_print_mod+0x12e>
 80056a6:	29ff      	cmp	r1, #255	; 0xff
 80056a8:	f815 6b01 	ldrb.w	r6, [r5], #1
 80056ac:	d1f2      	bne.n	8005694 <d_print_mod+0x214>
 80056ae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80056b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80056b6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80056ba:	4620      	mov	r0, r4
 80056bc:	4798      	blx	r3
 80056be:	2101      	movs	r1, #1
 80056c0:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80056c4:	2300      	movs	r3, #0
 80056c6:	440a      	add	r2, r1
 80056c8:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80056cc:	e7e4      	b.n	8005698 <d_print_mod+0x218>
 80056ce:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 80056d2:	2b28      	cmp	r3, #40	; 0x28
 80056d4:	d00b      	beq.n	80056ee <d_print_mod+0x26e>
 80056d6:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80056da:	2bff      	cmp	r3, #255	; 0xff
 80056dc:	f000 812c 	beq.w	8005938 <d_print_mod+0x4b8>
 80056e0:	2220      	movs	r2, #32
 80056e2:	1c59      	adds	r1, r3, #1
 80056e4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80056e8:	54e2      	strb	r2, [r4, r3]
 80056ea:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80056ee:	686b      	ldr	r3, [r5, #4]
 80056f0:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
 80056f4:	4641      	mov	r1, r8
 80056f6:	461a      	mov	r2, r3
 80056f8:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 80056fc:	4620      	mov	r0, r4
 80056fe:	e88d 0028 	stmia.w	sp, {r3, r5}
 8005702:	f7fd f903 	bl	800290c <d_print_comp_inner>
 8005706:	4d64      	ldr	r5, [pc, #400]	; (8005898 <d_print_mod+0x418>)
 8005708:	9b01      	ldr	r3, [sp, #4]
 800570a:	2700      	movs	r7, #0
 800570c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005710:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005714:	f105 0803 	add.w	r8, r5, #3
 8005718:	e009      	b.n	800572e <d_print_mod+0x2ae>
 800571a:	460b      	mov	r3, r1
 800571c:	3101      	adds	r1, #1
 800571e:	4545      	cmp	r5, r8
 8005720:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005724:	54e6      	strb	r6, [r4, r3]
 8005726:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800572a:	f43f af40 	beq.w	80055ae <d_print_mod+0x12e>
 800572e:	29ff      	cmp	r1, #255	; 0xff
 8005730:	f815 6b01 	ldrb.w	r6, [r5], #1
 8005734:	d1f1      	bne.n	800571a <d_print_mod+0x29a>
 8005736:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800573a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800573e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005742:	4620      	mov	r0, r4
 8005744:	4798      	blx	r3
 8005746:	2101      	movs	r1, #1
 8005748:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 800574c:	2300      	movs	r3, #0
 800574e:	440a      	add	r2, r1
 8005750:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005754:	e7e3      	b.n	800571e <d_print_mod+0x29e>
 8005756:	4e51      	ldr	r6, [pc, #324]	; (800589c <d_print_mod+0x41c>)
 8005758:	f04f 0900 	mov.w	r9, #0
 800575c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005760:	f106 0a0a 	add.w	sl, r6, #10
 8005764:	e009      	b.n	800577a <d_print_mod+0x2fa>
 8005766:	460b      	mov	r3, r1
 8005768:	3101      	adds	r1, #1
 800576a:	4556      	cmp	r6, sl
 800576c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005770:	54e7      	strb	r7, [r4, r3]
 8005772:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8005776:	f000 80c4 	beq.w	8005902 <d_print_mod+0x482>
 800577a:	29ff      	cmp	r1, #255	; 0xff
 800577c:	f816 7b01 	ldrb.w	r7, [r6], #1
 8005780:	d1f1      	bne.n	8005766 <d_print_mod+0x2e6>
 8005782:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005786:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800578a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800578e:	4620      	mov	r0, r4
 8005790:	4798      	blx	r3
 8005792:	2101      	movs	r1, #1
 8005794:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8005798:	2300      	movs	r3, #0
 800579a:	440a      	add	r2, r1
 800579c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80057a0:	e7e3      	b.n	800576a <d_print_mod+0x2ea>
 80057a2:	4d3f      	ldr	r5, [pc, #252]	; (80058a0 <d_print_mod+0x420>)
 80057a4:	f04f 0800 	mov.w	r8, #0
 80057a8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80057ac:	f105 0709 	add.w	r7, r5, #9
 80057b0:	e009      	b.n	80057c6 <d_print_mod+0x346>
 80057b2:	460b      	mov	r3, r1
 80057b4:	3101      	adds	r1, #1
 80057b6:	42bd      	cmp	r5, r7
 80057b8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80057bc:	54e6      	strb	r6, [r4, r3]
 80057be:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80057c2:	f43f aef4 	beq.w	80055ae <d_print_mod+0x12e>
 80057c6:	29ff      	cmp	r1, #255	; 0xff
 80057c8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80057cc:	d1f1      	bne.n	80057b2 <d_print_mod+0x332>
 80057ce:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80057d2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80057d6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80057da:	4620      	mov	r0, r4
 80057dc:	4798      	blx	r3
 80057de:	2101      	movs	r1, #1
 80057e0:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80057e4:	2300      	movs	r3, #0
 80057e6:	440a      	add	r2, r1
 80057e8:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80057ec:	e7e3      	b.n	80057b6 <d_print_mod+0x336>
 80057ee:	4d2d      	ldr	r5, [pc, #180]	; (80058a4 <d_print_mod+0x424>)
 80057f0:	f04f 0800 	mov.w	r8, #0
 80057f4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80057f8:	1daf      	adds	r7, r5, #6
 80057fa:	e009      	b.n	8005810 <d_print_mod+0x390>
 80057fc:	460b      	mov	r3, r1
 80057fe:	3101      	adds	r1, #1
 8005800:	42bd      	cmp	r5, r7
 8005802:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005806:	54e6      	strb	r6, [r4, r3]
 8005808:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800580c:	f43f aecf 	beq.w	80055ae <d_print_mod+0x12e>
 8005810:	29ff      	cmp	r1, #255	; 0xff
 8005812:	f815 6b01 	ldrb.w	r6, [r5], #1
 8005816:	d1f1      	bne.n	80057fc <d_print_mod+0x37c>
 8005818:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800581c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005820:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005824:	4620      	mov	r0, r4
 8005826:	4798      	blx	r3
 8005828:	2101      	movs	r1, #1
 800582a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 800582e:	2300      	movs	r3, #0
 8005830:	440a      	add	r2, r1
 8005832:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005836:	e7e3      	b.n	8005800 <d_print_mod+0x380>
 8005838:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800583c:	2bff      	cmp	r3, #255	; 0xff
 800583e:	f000 80d1 	beq.w	80059e4 <d_print_mod+0x564>
 8005842:	2220      	movs	r2, #32
 8005844:	1c59      	adds	r1, r3, #1
 8005846:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800584a:	54e2      	strb	r2, [r4, r3]
 800584c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005850:	e6c2      	b.n	80055d8 <d_print_mod+0x158>
 8005852:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005856:	2bff      	cmp	r3, #255	; 0xff
 8005858:	f000 80b2 	beq.w	80059c0 <d_print_mod+0x540>
 800585c:	2220      	movs	r2, #32
 800585e:	1c59      	adds	r1, r3, #1
 8005860:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005864:	54e2      	strb	r2, [r4, r3]
 8005866:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800586a:	e6c4      	b.n	80055f6 <d_print_mod+0x176>
 800586c:	686b      	ldr	r3, [r5, #4]
 800586e:	f8d0 5128 	ldr.w	r5, [r0, #296]	; 0x128
 8005872:	461a      	mov	r2, r3
 8005874:	e691      	b.n	800559a <d_print_mod+0x11a>
 8005876:	4d0c      	ldr	r5, [pc, #48]	; (80058a8 <d_print_mod+0x428>)
 8005878:	f04f 0800 	mov.w	r8, #0
 800587c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005880:	f105 0709 	add.w	r7, r5, #9
 8005884:	e01c      	b.n	80058c0 <d_print_mod+0x440>
 8005886:	bf00      	nop
 8005888:	0800d9ab 	.word	0x0800d9ab
 800588c:	0800d9c0 	.word	0x0800d9c0
 8005890:	0800d9c3 	.word	0x0800d9c3
 8005894:	0800d9d0 	.word	0x0800d9d0
 8005898:	0800d9dc 	.word	0x0800d9dc
 800589c:	0800d9e0 	.word	0x0800d9e0
 80058a0:	0800d997 	.word	0x0800d997
 80058a4:	0800d9a4 	.word	0x0800d9a4
 80058a8:	0800d98b 	.word	0x0800d98b
 80058ac:	460b      	mov	r3, r1
 80058ae:	3101      	adds	r1, #1
 80058b0:	42af      	cmp	r7, r5
 80058b2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80058b6:	54e6      	strb	r6, [r4, r3]
 80058b8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80058bc:	f43f ae77 	beq.w	80055ae <d_print_mod+0x12e>
 80058c0:	29ff      	cmp	r1, #255	; 0xff
 80058c2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80058c6:	d1f1      	bne.n	80058ac <d_print_mod+0x42c>
 80058c8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80058cc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80058d0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80058d4:	4620      	mov	r0, r4
 80058d6:	4798      	blx	r3
 80058d8:	2101      	movs	r1, #1
 80058da:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80058de:	2300      	movs	r3, #0
 80058e0:	440a      	add	r2, r1
 80058e2:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80058e6:	e7e3      	b.n	80058b0 <d_print_mod+0x430>
 80058e8:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
 80058ec:	462a      	mov	r2, r5
 80058ee:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
 80058f2:	9301      	str	r3, [sp, #4]
 80058f4:	9500      	str	r5, [sp, #0]
 80058f6:	f7fd f809 	bl	800290c <d_print_comp_inner>
 80058fa:	9b01      	ldr	r3, [sp, #4]
 80058fc:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005900:	e655      	b.n	80055ae <d_print_mod+0x12e>
 8005902:	686b      	ldr	r3, [r5, #4]
 8005904:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
 8005908:	461a      	mov	r2, r3
 800590a:	4641      	mov	r1, r8
 800590c:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 8005910:	4620      	mov	r0, r4
 8005912:	e88d 0028 	stmia.w	sp, {r3, r5}
 8005916:	f7fc fff9 	bl	800290c <d_print_comp_inner>
 800591a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800591e:	9b01      	ldr	r3, [sp, #4]
 8005920:	29ff      	cmp	r1, #255	; 0xff
 8005922:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005926:	d03a      	beq.n	800599e <d_print_mod+0x51e>
 8005928:	1c4a      	adds	r2, r1, #1
 800592a:	2329      	movs	r3, #41	; 0x29
 800592c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005930:	5463      	strb	r3, [r4, r1]
 8005932:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005936:	e63a      	b.n	80055ae <d_print_mod+0x12e>
 8005938:	2600      	movs	r6, #0
 800593a:	4619      	mov	r1, r3
 800593c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005940:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005944:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8005948:	4798      	blx	r3
 800594a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 800594e:	4633      	mov	r3, r6
 8005950:	3201      	adds	r2, #1
 8005952:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005956:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800595a:	e6c1      	b.n	80056e0 <d_print_mod+0x260>
 800595c:	2500      	movs	r5, #0
 800595e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005962:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005966:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800596a:	4620      	mov	r0, r4
 800596c:	4798      	blx	r3
 800596e:	2201      	movs	r2, #1
 8005970:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005974:	4629      	mov	r1, r5
 8005976:	4413      	add	r3, r2
 8005978:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800597c:	e630      	b.n	80055e0 <d_print_mod+0x160>
 800597e:	2600      	movs	r6, #0
 8005980:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005984:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005988:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 800598c:	4798      	blx	r3
 800598e:	2201      	movs	r2, #1
 8005990:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005994:	4631      	mov	r1, r6
 8005996:	4413      	add	r3, r2
 8005998:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800599c:	e5f2      	b.n	8005584 <d_print_mod+0x104>
 800599e:	2500      	movs	r5, #0
 80059a0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80059a4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80059a8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80059ac:	4620      	mov	r0, r4
 80059ae:	4798      	blx	r3
 80059b0:	2201      	movs	r2, #1
 80059b2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80059b6:	4629      	mov	r1, r5
 80059b8:	4413      	add	r3, r2
 80059ba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80059be:	e7b4      	b.n	800592a <d_print_mod+0x4aa>
 80059c0:	2500      	movs	r5, #0
 80059c2:	4619      	mov	r1, r3
 80059c4:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80059c8:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80059cc:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 80059d0:	4798      	blx	r3
 80059d2:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80059d6:	462b      	mov	r3, r5
 80059d8:	3201      	adds	r2, #1
 80059da:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 80059de:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80059e2:	e73b      	b.n	800585c <d_print_mod+0x3dc>
 80059e4:	2500      	movs	r5, #0
 80059e6:	4619      	mov	r1, r3
 80059e8:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80059ec:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80059f0:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 80059f4:	4798      	blx	r3
 80059f6:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80059fa:	462b      	mov	r3, r5
 80059fc:	3201      	adds	r2, #1
 80059fe:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005a02:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005a06:	e71c      	b.n	8005842 <d_print_mod+0x3c2>
 8005a08:	4619      	mov	r1, r3
 8005a0a:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005a0e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005a12:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005a16:	4798      	blx	r3
 8005a18:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8005a1c:	462b      	mov	r3, r5
 8005a1e:	3201      	adds	r2, #1
 8005a20:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005a24:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005a28:	e5cc      	b.n	80055c4 <d_print_mod+0x144>
 8005a2a:	bf00      	nop

08005a2c <d_print_mod_list>:
 8005a2c:	2a00      	cmp	r2, #0
 8005a2e:	f000 80a1 	beq.w	8005b74 <d_print_mod_list+0x148>
 8005a32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a36:	461e      	mov	r6, r3
 8005a38:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 8005a3c:	b089      	sub	sp, #36	; 0x24
 8005a3e:	4605      	mov	r5, r0
 8005a40:	bb43      	cbnz	r3, 8005a94 <d_print_mod_list+0x68>
 8005a42:	460f      	mov	r7, r1
 8005a44:	4614      	mov	r4, r2
 8005a46:	f04f 0801 	mov.w	r8, #1
 8005a4a:	e002      	b.n	8005a52 <d_print_mod_list+0x26>
 8005a4c:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8005a50:	bb03      	cbnz	r3, 8005a94 <d_print_mod_list+0x68>
 8005a52:	68a3      	ldr	r3, [r4, #8]
 8005a54:	b9db      	cbnz	r3, 8005a8e <d_print_mod_list+0x62>
 8005a56:	6862      	ldr	r2, [r4, #4]
 8005a58:	7813      	ldrb	r3, [r2, #0]
 8005a5a:	b92e      	cbnz	r6, 8005a68 <d_print_mod_list+0x3c>
 8005a5c:	f1a3 011c 	sub.w	r1, r3, #28
 8005a60:	2904      	cmp	r1, #4
 8005a62:	d914      	bls.n	8005a8e <d_print_mod_list+0x62>
 8005a64:	2b4c      	cmp	r3, #76	; 0x4c
 8005a66:	d012      	beq.n	8005a8e <d_print_mod_list+0x62>
 8005a68:	68e1      	ldr	r1, [r4, #12]
 8005a6a:	2b29      	cmp	r3, #41	; 0x29
 8005a6c:	f8c4 8008 	str.w	r8, [r4, #8]
 8005a70:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
 8005a74:	f8c5 1110 	str.w	r1, [r5, #272]	; 0x110
 8005a78:	d00f      	beq.n	8005a9a <d_print_mod_list+0x6e>
 8005a7a:	2b2a      	cmp	r3, #42	; 0x2a
 8005a7c:	d018      	beq.n	8005ab0 <d_print_mod_list+0x84>
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d021      	beq.n	8005ac6 <d_print_mod_list+0x9a>
 8005a82:	4639      	mov	r1, r7
 8005a84:	4628      	mov	r0, r5
 8005a86:	f7ff fcfb 	bl	8005480 <d_print_mod>
 8005a8a:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8005a8e:	6824      	ldr	r4, [r4, #0]
 8005a90:	2c00      	cmp	r4, #0
 8005a92:	d1db      	bne.n	8005a4c <d_print_mod_list+0x20>
 8005a94:	b009      	add	sp, #36	; 0x24
 8005a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	3208      	adds	r2, #8
 8005a9e:	4639      	mov	r1, r7
 8005aa0:	4628      	mov	r0, r5
 8005aa2:	f000 f9d9 	bl	8005e58 <d_print_function_type.isra.11>
 8005aa6:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8005aaa:	b009      	add	sp, #36	; 0x24
 8005aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ab0:	6823      	ldr	r3, [r4, #0]
 8005ab2:	3204      	adds	r2, #4
 8005ab4:	4639      	mov	r1, r7
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	f000 f8f2 	bl	8005ca0 <d_print_array_type.isra.10>
 8005abc:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8005ac0:	b009      	add	sp, #36	; 0x24
 8005ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ac6:	2600      	movs	r6, #0
 8005ac8:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
 8005acc:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
 8005ad0:	6852      	ldr	r2, [r2, #4]
 8005ad2:	4639      	mov	r1, r7
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	f7ff fcc3 	bl	8005460 <d_print_comp>
 8005ada:	f017 0a04 	ands.w	sl, r7, #4
 8005ade:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
 8005ae2:	d023      	beq.n	8005b2c <d_print_mod_list+0x100>
 8005ae4:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005ae8:	29ff      	cmp	r1, #255	; 0xff
 8005aea:	f000 80c1 	beq.w	8005c70 <d_print_mod_list+0x244>
 8005aee:	1c4a      	adds	r2, r1, #1
 8005af0:	232e      	movs	r3, #46	; 0x2e
 8005af2:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
 8005af6:	546b      	strb	r3, [r5, r1]
 8005af8:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
 8005afc:	6863      	ldr	r3, [r4, #4]
 8005afe:	689c      	ldr	r4, [r3, #8]
 8005b00:	7823      	ldrb	r3, [r4, #0]
 8005b02:	2b46      	cmp	r3, #70	; 0x46
 8005b04:	d037      	beq.n	8005b76 <d_print_mod_list+0x14a>
 8005b06:	f1a3 021c 	sub.w	r2, r3, #28
 8005b0a:	2a04      	cmp	r2, #4
 8005b0c:	d90b      	bls.n	8005b26 <d_print_mod_list+0xfa>
 8005b0e:	2b4c      	cmp	r3, #76	; 0x4c
 8005b10:	d009      	beq.n	8005b26 <d_print_mod_list+0xfa>
 8005b12:	4622      	mov	r2, r4
 8005b14:	4639      	mov	r1, r7
 8005b16:	4628      	mov	r0, r5
 8005b18:	f7ff fca2 	bl	8005460 <d_print_comp>
 8005b1c:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8005b20:	b009      	add	sp, #36	; 0x24
 8005b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b26:	6864      	ldr	r4, [r4, #4]
 8005b28:	7823      	ldrb	r3, [r4, #0]
 8005b2a:	e7ec      	b.n	8005b06 <d_print_mod_list+0xda>
 8005b2c:	4e58      	ldr	r6, [pc, #352]	; (8005c90 <d_print_mod_list+0x264>)
 8005b2e:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005b32:	f106 0b02 	add.w	fp, r6, #2
 8005b36:	e009      	b.n	8005b4c <d_print_mod_list+0x120>
 8005b38:	460b      	mov	r3, r1
 8005b3a:	3101      	adds	r1, #1
 8005b3c:	455e      	cmp	r6, fp
 8005b3e:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8005b42:	f805 8003 	strb.w	r8, [r5, r3]
 8005b46:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8005b4a:	d0d7      	beq.n	8005afc <d_print_mod_list+0xd0>
 8005b4c:	29ff      	cmp	r1, #255	; 0xff
 8005b4e:	f816 8b01 	ldrb.w	r8, [r6], #1
 8005b52:	d1f1      	bne.n	8005b38 <d_print_mod_list+0x10c>
 8005b54:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005b58:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8005b5c:	f885 a0ff 	strb.w	sl, [r5, #255]	; 0xff
 8005b60:	4628      	mov	r0, r5
 8005b62:	4798      	blx	r3
 8005b64:	2101      	movs	r1, #1
 8005b66:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	440a      	add	r2, r1
 8005b6e:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
 8005b72:	e7e3      	b.n	8005b3c <d_print_mod_list+0x110>
 8005b74:	4770      	bx	lr
 8005b76:	4e47      	ldr	r6, [pc, #284]	; (8005c94 <d_print_mod_list+0x268>)
 8005b78:	f04f 0b00 	mov.w	fp, #0
 8005b7c:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005b80:	f106 0a0d 	add.w	sl, r6, #13
 8005b84:	e009      	b.n	8005b9a <d_print_mod_list+0x16e>
 8005b86:	460b      	mov	r3, r1
 8005b88:	3101      	adds	r1, #1
 8005b8a:	45b2      	cmp	sl, r6
 8005b8c:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8005b90:	f805 8003 	strb.w	r8, [r5, r3]
 8005b94:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8005b98:	d013      	beq.n	8005bc2 <d_print_mod_list+0x196>
 8005b9a:	29ff      	cmp	r1, #255	; 0xff
 8005b9c:	f816 8b01 	ldrb.w	r8, [r6], #1
 8005ba0:	d1f1      	bne.n	8005b86 <d_print_mod_list+0x15a>
 8005ba2:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005ba6:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8005baa:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 8005bae:	4628      	mov	r0, r5
 8005bb0:	4798      	blx	r3
 8005bb2:	2101      	movs	r1, #1
 8005bb4:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
 8005bb8:	2300      	movs	r3, #0
 8005bba:	440a      	add	r2, r1
 8005bbc:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
 8005bc0:	e7e3      	b.n	8005b8a <d_print_mod_list+0x15e>
 8005bc2:	68a2      	ldr	r2, [r4, #8]
 8005bc4:	a801      	add	r0, sp, #4
 8005bc6:	3201      	adds	r2, #1
 8005bc8:	4933      	ldr	r1, [pc, #204]	; (8005c98 <d_print_mod_list+0x26c>)
 8005bca:	f004 fc60 	bl	800a48e <siprintf>
 8005bce:	a801      	add	r0, sp, #4
 8005bd0:	f000 fe12 	bl	80067f8 <strlen>
 8005bd4:	b328      	cbz	r0, 8005c22 <d_print_mod_list+0x1f6>
 8005bd6:	ae01      	add	r6, sp, #4
 8005bd8:	f04f 0b00 	mov.w	fp, #0
 8005bdc:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005be0:	eb06 0a00 	add.w	sl, r6, r0
 8005be4:	e009      	b.n	8005bfa <d_print_mod_list+0x1ce>
 8005be6:	460b      	mov	r3, r1
 8005be8:	3101      	adds	r1, #1
 8005bea:	45b2      	cmp	sl, r6
 8005bec:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8005bf0:	f805 8003 	strb.w	r8, [r5, r3]
 8005bf4:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8005bf8:	d015      	beq.n	8005c26 <d_print_mod_list+0x1fa>
 8005bfa:	29ff      	cmp	r1, #255	; 0xff
 8005bfc:	f816 8b01 	ldrb.w	r8, [r6], #1
 8005c00:	d1f1      	bne.n	8005be6 <d_print_mod_list+0x1ba>
 8005c02:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005c06:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8005c0a:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 8005c0e:	4628      	mov	r0, r5
 8005c10:	4798      	blx	r3
 8005c12:	2101      	movs	r1, #1
 8005c14:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
 8005c18:	2300      	movs	r3, #0
 8005c1a:	440a      	add	r2, r1
 8005c1c:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
 8005c20:	e7e3      	b.n	8005bea <d_print_mod_list+0x1be>
 8005c22:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005c26:	4e1d      	ldr	r6, [pc, #116]	; (8005c9c <d_print_mod_list+0x270>)
 8005c28:	f04f 0b00 	mov.w	fp, #0
 8005c2c:	f106 0a03 	add.w	sl, r6, #3
 8005c30:	e00a      	b.n	8005c48 <d_print_mod_list+0x21c>
 8005c32:	460b      	mov	r3, r1
 8005c34:	3101      	adds	r1, #1
 8005c36:	45b2      	cmp	sl, r6
 8005c38:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8005c3c:	f805 8003 	strb.w	r8, [r5, r3]
 8005c40:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8005c44:	f43f af6f 	beq.w	8005b26 <d_print_mod_list+0xfa>
 8005c48:	29ff      	cmp	r1, #255	; 0xff
 8005c4a:	f816 8b01 	ldrb.w	r8, [r6], #1
 8005c4e:	d1f0      	bne.n	8005c32 <d_print_mod_list+0x206>
 8005c50:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005c54:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8005c58:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	4798      	blx	r3
 8005c60:	2101      	movs	r1, #1
 8005c62:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
 8005c66:	2300      	movs	r3, #0
 8005c68:	440a      	add	r2, r1
 8005c6a:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
 8005c6e:	e7e2      	b.n	8005c36 <d_print_mod_list+0x20a>
 8005c70:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005c74:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8005c78:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	4798      	blx	r3
 8005c80:	2201      	movs	r2, #1
 8005c82:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8005c86:	4631      	mov	r1, r6
 8005c88:	4413      	add	r3, r2
 8005c8a:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8005c8e:	e72f      	b.n	8005af0 <d_print_mod_list+0xc4>
 8005c90:	0800d70c 	.word	0x0800d70c
 8005c94:	0800d710 	.word	0x0800d710
 8005c98:	0800d6bc 	.word	0x0800d6bc
 8005c9c:	0800d720 	.word	0x0800d720

08005ca0 <d_print_array_type.isra.10>:
 8005ca0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca4:	4604      	mov	r4, r0
 8005ca6:	460f      	mov	r7, r1
 8005ca8:	4690      	mov	r8, r2
 8005caa:	b163      	cbz	r3, 8005cc6 <d_print_array_type.isra.10+0x26>
 8005cac:	461e      	mov	r6, r3
 8005cae:	461a      	mov	r2, r3
 8005cb0:	6893      	ldr	r3, [r2, #8]
 8005cb2:	b393      	cbz	r3, 8005d1a <d_print_array_type.isra.10+0x7a>
 8005cb4:	6812      	ldr	r2, [r2, #0]
 8005cb6:	2a00      	cmp	r2, #0
 8005cb8:	d1fa      	bne.n	8005cb0 <d_print_array_type.isra.10+0x10>
 8005cba:	4613      	mov	r3, r2
 8005cbc:	4639      	mov	r1, r7
 8005cbe:	4632      	mov	r2, r6
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	f7ff feb3 	bl	8005a2c <d_print_mod_list>
 8005cc6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005cca:	29ff      	cmp	r1, #255	; 0xff
 8005ccc:	f000 808d 	beq.w	8005dea <d_print_array_type.isra.10+0x14a>
 8005cd0:	1c4b      	adds	r3, r1, #1
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	2bff      	cmp	r3, #255	; 0xff
 8005cd6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005cda:	5462      	strb	r2, [r4, r1]
 8005cdc:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005ce0:	d068      	beq.n	8005db4 <d_print_array_type.isra.10+0x114>
 8005ce2:	225b      	movs	r2, #91	; 0x5b
 8005ce4:	1c59      	adds	r1, r3, #1
 8005ce6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005cea:	54e2      	strb	r2, [r4, r3]
 8005cec:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005cf0:	f8d8 2000 	ldr.w	r2, [r8]
 8005cf4:	b12a      	cbz	r2, 8005d02 <d_print_array_type.isra.10+0x62>
 8005cf6:	4639      	mov	r1, r7
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	f7ff fbb1 	bl	8005460 <d_print_comp>
 8005cfe:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005d02:	29ff      	cmp	r1, #255	; 0xff
 8005d04:	f000 8082 	beq.w	8005e0c <d_print_array_type.isra.10+0x16c>
 8005d08:	1c4a      	adds	r2, r1, #1
 8005d0a:	235d      	movs	r3, #93	; 0x5d
 8005d0c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005d10:	5463      	strb	r3, [r4, r1]
 8005d12:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005d16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d1a:	6852      	ldr	r2, [r2, #4]
 8005d1c:	7812      	ldrb	r2, [r2, #0]
 8005d1e:	2a2a      	cmp	r2, #42	; 0x2a
 8005d20:	d03f      	beq.n	8005da2 <d_print_array_type.isra.10+0x102>
 8005d22:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8005e54 <d_print_array_type.isra.10+0x1b4>
 8005d26:	461d      	mov	r5, r3
 8005d28:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005d2c:	f109 0b02 	add.w	fp, r9, #2
 8005d30:	e00a      	b.n	8005d48 <d_print_array_type.isra.10+0xa8>
 8005d32:	460b      	mov	r3, r1
 8005d34:	45cb      	cmp	fp, r9
 8005d36:	f101 0101 	add.w	r1, r1, #1
 8005d3a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005d3e:	f804 a003 	strb.w	sl, [r4, r3]
 8005d42:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005d46:	d01a      	beq.n	8005d7e <d_print_array_type.isra.10+0xde>
 8005d48:	29ff      	cmp	r1, #255	; 0xff
 8005d4a:	f819 ab01 	ldrb.w	sl, [r9], #1
 8005d4e:	d1f0      	bne.n	8005d32 <d_print_array_type.isra.10+0x92>
 8005d50:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005d54:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005d58:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	4798      	blx	r3
 8005d60:	2101      	movs	r1, #1
 8005d62:	2300      	movs	r3, #0
 8005d64:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8005d68:	45cb      	cmp	fp, r9
 8005d6a:	440a      	add	r2, r1
 8005d6c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005d70:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005d74:	f804 a003 	strb.w	sl, [r4, r3]
 8005d78:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005d7c:	d1e4      	bne.n	8005d48 <d_print_array_type.isra.10+0xa8>
 8005d7e:	2300      	movs	r3, #0
 8005d80:	4632      	mov	r2, r6
 8005d82:	4639      	mov	r1, r7
 8005d84:	4620      	mov	r0, r4
 8005d86:	f7ff fe51 	bl	8005a2c <d_print_mod_list>
 8005d8a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005d8e:	2bff      	cmp	r3, #255	; 0xff
 8005d90:	d04d      	beq.n	8005e2e <d_print_array_type.isra.10+0x18e>
 8005d92:	1c59      	adds	r1, r3, #1
 8005d94:	2229      	movs	r2, #41	; 0x29
 8005d96:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005d9a:	54e2      	strb	r2, [r4, r3]
 8005d9c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005da0:	e793      	b.n	8005cca <d_print_array_type.isra.10+0x2a>
 8005da2:	4632      	mov	r2, r6
 8005da4:	4639      	mov	r1, r7
 8005da6:	4620      	mov	r0, r4
 8005da8:	f7ff fe40 	bl	8005a2c <d_print_mod_list>
 8005dac:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005db0:	2bff      	cmp	r3, #255	; 0xff
 8005db2:	d196      	bne.n	8005ce2 <d_print_array_type.isra.10+0x42>
 8005db4:	2200      	movs	r2, #0
 8005db6:	4619      	mov	r1, r3
 8005db8:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 8005dbc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005dc0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	4798      	blx	r3
 8005dc8:	235b      	movs	r3, #91	; 0x5b
 8005dca:	2101      	movs	r1, #1
 8005dcc:	7023      	strb	r3, [r4, #0]
 8005dce:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005dd2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005dd6:	f8d8 2000 	ldr.w	r2, [r8]
 8005dda:	440b      	add	r3, r1
 8005ddc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005de0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005de4:	2a00      	cmp	r2, #0
 8005de6:	d186      	bne.n	8005cf6 <d_print_array_type.isra.10+0x56>
 8005de8:	e78e      	b.n	8005d08 <d_print_array_type.isra.10+0x68>
 8005dea:	2500      	movs	r5, #0
 8005dec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005df0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005df4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005df8:	4620      	mov	r0, r4
 8005dfa:	4798      	blx	r3
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8005e02:	4629      	mov	r1, r5
 8005e04:	441a      	add	r2, r3
 8005e06:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005e0a:	e762      	b.n	8005cd2 <d_print_array_type.isra.10+0x32>
 8005e0c:	2500      	movs	r5, #0
 8005e0e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e12:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e16:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	4798      	blx	r3
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005e24:	4629      	mov	r1, r5
 8005e26:	4413      	add	r3, r2
 8005e28:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005e2c:	e76d      	b.n	8005d0a <d_print_array_type.isra.10+0x6a>
 8005e2e:	2500      	movs	r5, #0
 8005e30:	4619      	mov	r1, r3
 8005e32:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e36:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e3a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005e3e:	4620      	mov	r0, r4
 8005e40:	4798      	blx	r3
 8005e42:	2101      	movs	r1, #1
 8005e44:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8005e48:	462b      	mov	r3, r5
 8005e4a:	440a      	add	r2, r1
 8005e4c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005e50:	e7a0      	b.n	8005d94 <d_print_array_type.isra.10+0xf4>
 8005e52:	bf00      	nop
 8005e54:	0800d904 	.word	0x0800d904

08005e58 <d_print_function_type.isra.11>:
 8005e58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e5c:	4604      	mov	r4, r0
 8005e5e:	b083      	sub	sp, #12
 8005e60:	460e      	mov	r6, r1
 8005e62:	4617      	mov	r7, r2
 8005e64:	461d      	mov	r5, r3
 8005e66:	b34b      	cbz	r3, 8005ebc <d_print_function_type.isra.11+0x64>
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	bb3b      	cbnz	r3, 8005ebc <d_print_function_type.isra.11+0x64>
 8005e6c:	462a      	mov	r2, r5
 8005e6e:	2001      	movs	r0, #1
 8005e70:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 800603c <d_print_function_type.isra.11+0x1e4>
 8005e74:	e006      	b.n	8005e84 <d_print_function_type.isra.11+0x2c>
 8005e76:	f411 6f60 	tst.w	r1, #3584	; 0xe00
 8005e7a:	d15b      	bne.n	8005f34 <d_print_function_type.isra.11+0xdc>
 8005e7c:	6812      	ldr	r2, [r2, #0]
 8005e7e:	b1ea      	cbz	r2, 8005ebc <d_print_function_type.isra.11+0x64>
 8005e80:	6893      	ldr	r3, [r2, #8]
 8005e82:	b9db      	cbnz	r3, 8005ebc <d_print_function_type.isra.11+0x64>
 8005e84:	6853      	ldr	r3, [r2, #4]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	3b19      	subs	r3, #25
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b12      	cmp	r3, #18
 8005e8e:	fa00 f103 	lsl.w	r1, r0, r3
 8005e92:	d8f3      	bhi.n	8005e7c <d_print_function_type.isra.11+0x24>
 8005e94:	ea11 0f0e 	tst.w	r1, lr
 8005e98:	d0ed      	beq.n	8005e76 <d_print_function_type.isra.11+0x1e>
 8005e9a:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8005e9e:	2b20      	cmp	r3, #32
 8005ea0:	d04e      	beq.n	8005f40 <d_print_function_type.isra.11+0xe8>
 8005ea2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005ea6:	2bff      	cmp	r3, #255	; 0xff
 8005ea8:	f000 80b5 	beq.w	8006016 <d_print_function_type.isra.11+0x1be>
 8005eac:	1c59      	adds	r1, r3, #1
 8005eae:	2220      	movs	r2, #32
 8005eb0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005eb4:	54e2      	strb	r2, [r4, r3]
 8005eb6:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005eba:	e043      	b.n	8005f44 <d_print_function_type.isra.11+0xec>
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8005ec8:	4631      	mov	r1, r6
 8005eca:	462a      	mov	r2, r5
 8005ecc:	4620      	mov	r0, r4
 8005ece:	f7ff fdad 	bl	8005a2c <d_print_mod_list>
 8005ed2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005ed6:	29ff      	cmp	r1, #255	; 0xff
 8005ed8:	d056      	beq.n	8005f88 <d_print_function_type.isra.11+0x130>
 8005eda:	1c4b      	adds	r3, r1, #1
 8005edc:	2228      	movs	r2, #40	; 0x28
 8005ede:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005ee2:	5462      	strb	r2, [r4, r1]
 8005ee4:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005ee8:	6838      	ldr	r0, [r7, #0]
 8005eea:	b178      	cbz	r0, 8005f0c <d_print_function_type.isra.11+0xb4>
 8005eec:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	9000      	str	r0, [sp, #0]
 8005ef4:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 8005ef8:	4631      	mov	r1, r6
 8005efa:	4620      	mov	r0, r4
 8005efc:	9301      	str	r3, [sp, #4]
 8005efe:	f7fc fd05 	bl	800290c <d_print_comp_inner>
 8005f02:	9a01      	ldr	r2, [sp, #4]
 8005f04:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005f08:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 8005f0c:	2bff      	cmp	r3, #255	; 0xff
 8005f0e:	d04d      	beq.n	8005fac <d_print_function_type.isra.11+0x154>
 8005f10:	1c5a      	adds	r2, r3, #1
 8005f12:	2029      	movs	r0, #41	; 0x29
 8005f14:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005f18:	4631      	mov	r1, r6
 8005f1a:	54e0      	strb	r0, [r4, r3]
 8005f1c:	462a      	mov	r2, r5
 8005f1e:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
 8005f22:	2301      	movs	r3, #1
 8005f24:	4620      	mov	r0, r4
 8005f26:	f7ff fd81 	bl	8005a2c <d_print_mod_list>
 8005f2a:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
 8005f2e:	b003      	add	sp, #12
 8005f30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f34:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8005f38:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8005f3c:	2a28      	cmp	r2, #40	; 0x28
 8005f3e:	d1ae      	bne.n	8005e9e <d_print_function_type.isra.11+0x46>
 8005f40:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005f44:	29ff      	cmp	r1, #255	; 0xff
 8005f46:	d054      	beq.n	8005ff2 <d_print_function_type.isra.11+0x19a>
 8005f48:	1c4a      	adds	r2, r1, #1
 8005f4a:	2328      	movs	r3, #40	; 0x28
 8005f4c:	f04f 0900 	mov.w	r9, #0
 8005f50:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005f54:	5463      	strb	r3, [r4, r1]
 8005f56:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 8005f5a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005f5e:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8005f62:	464b      	mov	r3, r9
 8005f64:	462a      	mov	r2, r5
 8005f66:	4631      	mov	r1, r6
 8005f68:	4620      	mov	r0, r4
 8005f6a:	f7ff fd5f 	bl	8005a2c <d_print_mod_list>
 8005f6e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005f72:	2bff      	cmp	r3, #255	; 0xff
 8005f74:	d02c      	beq.n	8005fd0 <d_print_function_type.isra.11+0x178>
 8005f76:	1c59      	adds	r1, r3, #1
 8005f78:	2229      	movs	r2, #41	; 0x29
 8005f7a:	29ff      	cmp	r1, #255	; 0xff
 8005f7c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005f80:	54e2      	strb	r2, [r4, r3]
 8005f82:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005f86:	d1a8      	bne.n	8005eda <d_print_function_type.isra.11+0x82>
 8005f88:	f04f 0900 	mov.w	r9, #0
 8005f8c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005f90:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005f94:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005f98:	4620      	mov	r0, r4
 8005f9a:	4798      	blx	r3
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8005fa2:	4649      	mov	r1, r9
 8005fa4:	441a      	add	r2, r3
 8005fa6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005faa:	e797      	b.n	8005edc <d_print_function_type.isra.11+0x84>
 8005fac:	2700      	movs	r7, #0
 8005fae:	4619      	mov	r1, r3
 8005fb0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005fb4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005fb8:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	4798      	blx	r3
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
 8005fc6:	463b      	mov	r3, r7
 8005fc8:	4411      	add	r1, r2
 8005fca:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
 8005fce:	e7a0      	b.n	8005f12 <d_print_function_type.isra.11+0xba>
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005fd6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005fda:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005fde:	4620      	mov	r0, r4
 8005fe0:	4798      	blx	r3
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8005fe8:	464b      	mov	r3, r9
 8005fea:	440a      	add	r2, r1
 8005fec:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005ff0:	e7c2      	b.n	8005f78 <d_print_function_type.isra.11+0x120>
 8005ff2:	f04f 0800 	mov.w	r8, #0
 8005ff6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005ffa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005ffe:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006002:	4620      	mov	r0, r4
 8006004:	4798      	blx	r3
 8006006:	2201      	movs	r2, #1
 8006008:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800600c:	4641      	mov	r1, r8
 800600e:	4413      	add	r3, r2
 8006010:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006014:	e799      	b.n	8005f4a <d_print_function_type.isra.11+0xf2>
 8006016:	f04f 0800 	mov.w	r8, #0
 800601a:	4619      	mov	r1, r3
 800601c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006020:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006024:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006028:	4620      	mov	r0, r4
 800602a:	4798      	blx	r3
 800602c:	2101      	movs	r1, #1
 800602e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8006032:	4643      	mov	r3, r8
 8006034:	440a      	add	r2, r1
 8006036:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800603a:	e738      	b.n	8005eae <d_print_function_type.isra.11+0x56>
 800603c:	00043107 	.word	0x00043107

08006040 <d_print_expr_op>:
 8006040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006044:	7815      	ldrb	r5, [r2, #0]
 8006046:	b082      	sub	sp, #8
 8006048:	2d31      	cmp	r5, #49	; 0x31
 800604a:	4613      	mov	r3, r2
 800604c:	4604      	mov	r4, r0
 800604e:	d00d      	beq.n	800606c <d_print_expr_op+0x2c>
 8006050:	f8d0 5128 	ldr.w	r5, [r0, #296]	; 0x128
 8006054:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
 8006058:	e88d 0028 	stmia.w	sp, {r3, r5}
 800605c:	f7fc fc56 	bl	800290c <d_print_comp_inner>
 8006060:	9b01      	ldr	r3, [sp, #4]
 8006062:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8006066:	b002      	add	sp, #8
 8006068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800606c:	6853      	ldr	r3, [r2, #4]
 800606e:	689f      	ldr	r7, [r3, #8]
 8006070:	685d      	ldr	r5, [r3, #4]
 8006072:	2f00      	cmp	r7, #0
 8006074:	d0f7      	beq.n	8006066 <d_print_expr_op+0x26>
 8006076:	f04f 0800 	mov.w	r8, #0
 800607a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800607e:	442f      	add	r7, r5
 8006080:	e008      	b.n	8006094 <d_print_expr_op+0x54>
 8006082:	460b      	mov	r3, r1
 8006084:	3101      	adds	r1, #1
 8006086:	42bd      	cmp	r5, r7
 8006088:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800608c:	54e6      	strb	r6, [r4, r3]
 800608e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8006092:	d0e8      	beq.n	8006066 <d_print_expr_op+0x26>
 8006094:	29ff      	cmp	r1, #255	; 0xff
 8006096:	f815 6b01 	ldrb.w	r6, [r5], #1
 800609a:	d1f2      	bne.n	8006082 <d_print_expr_op+0x42>
 800609c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80060a0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80060a4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80060a8:	4620      	mov	r0, r4
 80060aa:	4798      	blx	r3
 80060ac:	2101      	movs	r1, #1
 80060ae:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80060b2:	2300      	movs	r3, #0
 80060b4:	440a      	add	r2, r1
 80060b6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80060ba:	e7e4      	b.n	8006086 <d_print_expr_op+0x46>

080060bc <d_print_subexpr>:
 80060bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060be:	7813      	ldrb	r3, [r2, #0]
 80060c0:	b083      	sub	sp, #12
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	4615      	mov	r5, r2
 80060c6:	460e      	mov	r6, r1
 80060c8:	4604      	mov	r4, r0
 80060ca:	d929      	bls.n	8006120 <d_print_subexpr+0x64>
 80060cc:	2b30      	cmp	r3, #48	; 0x30
 80060ce:	d027      	beq.n	8006120 <d_print_subexpr+0x64>
 80060d0:	2b06      	cmp	r3, #6
 80060d2:	d025      	beq.n	8006120 <d_print_subexpr+0x64>
 80060d4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80060d8:	29ff      	cmp	r1, #255	; 0xff
 80060da:	d031      	beq.n	8006140 <d_print_subexpr+0x84>
 80060dc:	1c4a      	adds	r2, r1, #1
 80060de:	2328      	movs	r3, #40	; 0x28
 80060e0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80060e4:	5463      	strb	r3, [r4, r1]
 80060e6:	f8d4 7128 	ldr.w	r7, [r4, #296]	; 0x128
 80060ea:	4631      	mov	r1, r6
 80060ec:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80060f0:	462a      	mov	r2, r5
 80060f2:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 80060f6:	4620      	mov	r0, r4
 80060f8:	e88d 00a0 	stmia.w	sp, {r5, r7}
 80060fc:	f7fc fc06 	bl	800290c <d_print_comp_inner>
 8006100:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006104:	9b01      	ldr	r3, [sp, #4]
 8006106:	29ff      	cmp	r1, #255	; 0xff
 8006108:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800610c:	d028      	beq.n	8006160 <d_print_subexpr+0xa4>
 800610e:	1c4a      	adds	r2, r1, #1
 8006110:	2329      	movs	r3, #41	; 0x29
 8006112:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8006116:	5463      	strb	r3, [r4, r1]
 8006118:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800611c:	b003      	add	sp, #12
 800611e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006120:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8006124:	4631      	mov	r1, r6
 8006126:	462a      	mov	r2, r5
 8006128:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 800612c:	4620      	mov	r0, r4
 800612e:	9301      	str	r3, [sp, #4]
 8006130:	9500      	str	r5, [sp, #0]
 8006132:	f7fc fbeb 	bl	800290c <d_print_comp_inner>
 8006136:	9b01      	ldr	r3, [sp, #4]
 8006138:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800613c:	b003      	add	sp, #12
 800613e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006140:	2700      	movs	r7, #0
 8006142:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006146:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800614a:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800614e:	4798      	blx	r3
 8006150:	2201      	movs	r2, #1
 8006152:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006156:	4639      	mov	r1, r7
 8006158:	4413      	add	r3, r2
 800615a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800615e:	e7be      	b.n	80060de <d_print_subexpr+0x22>
 8006160:	2500      	movs	r5, #0
 8006162:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006166:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800616a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800616e:	4620      	mov	r0, r4
 8006170:	4798      	blx	r3
 8006172:	2201      	movs	r2, #1
 8006174:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006178:	4629      	mov	r1, r5
 800617a:	4413      	add	r3, r2
 800617c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006180:	e7c6      	b.n	8006110 <d_print_subexpr+0x54>
 8006182:	bf00      	nop

08006184 <d_maybe_print_fold_expression.isra.15>:
 8006184:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006188:	6852      	ldr	r2, [r2, #4]
 800618a:	6812      	ldr	r2, [r2, #0]
 800618c:	7815      	ldrb	r5, [r2, #0]
 800618e:	2d66      	cmp	r5, #102	; 0x66
 8006190:	d002      	beq.n	8006198 <d_maybe_print_fold_expression.isra.15+0x14>
 8006192:	2000      	movs	r0, #0
 8006194:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
 800619e:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80061a2:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80061a6:	f899 3000 	ldrb.w	r3, [r9]
 80061aa:	460e      	mov	r6, r1
 80061ac:	2b3b      	cmp	r3, #59	; 0x3b
 80061ae:	f04f 33ff 	mov.w	r3, #4294967295
 80061b2:	bf04      	itt	eq
 80061b4:	f8d9 5008 	ldreq.w	r5, [r9, #8]
 80061b8:	f8d9 9004 	ldreq.w	r9, [r9, #4]
 80061bc:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 80061c0:	7853      	ldrb	r3, [r2, #1]
 80061c2:	bf18      	it	ne
 80061c4:	2500      	movne	r5, #0
 80061c6:	3b4c      	subs	r3, #76	; 0x4c
 80061c8:	4604      	mov	r4, r0
 80061ca:	2b26      	cmp	r3, #38	; 0x26
 80061cc:	d82b      	bhi.n	8006226 <d_maybe_print_fold_expression.isra.15+0xa2>
 80061ce:	e8df f003 	tbb	[pc, r3]
 80061d2:	2a90      	.short	0x2a90
 80061d4:	2a2a2a2a 	.word	0x2a2a2a2a
 80061d8:	2a2a2a90 	.word	0x2a2a2a90
 80061dc:	2a2a2a2a 	.word	0x2a2a2a2a
 80061e0:	2a2a2a2a 	.word	0x2a2a2a2a
 80061e4:	2a2a2a2a 	.word	0x2a2a2a2a
 80061e8:	2a2a2a2a 	.word	0x2a2a2a2a
 80061ec:	2a2a2a2a 	.word	0x2a2a2a2a
 80061f0:	2a6a2a2a 	.word	0x2a6a2a2a
 80061f4:	2a2a2a2a 	.word	0x2a2a2a2a
 80061f8:	2f          	.byte	0x2f
 80061f9:	00          	.byte	0x00
 80061fa:	4642      	mov	r2, r8
 80061fc:	4631      	mov	r1, r6
 80061fe:	4620      	mov	r0, r4
 8006200:	f7ff ff1e 	bl	8006040 <d_print_expr_op>
 8006204:	464a      	mov	r2, r9
 8006206:	4631      	mov	r1, r6
 8006208:	4620      	mov	r0, r4
 800620a:	f7ff ff57 	bl	80060bc <d_print_subexpr>
 800620e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006212:	29ff      	cmp	r1, #255	; 0xff
 8006214:	f000 80b0 	beq.w	8006378 <d_maybe_print_fold_expression.isra.15+0x1f4>
 8006218:	1c4a      	adds	r2, r1, #1
 800621a:	2329      	movs	r3, #41	; 0x29
 800621c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8006220:	5463      	strb	r3, [r4, r1]
 8006222:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006226:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
 800622a:	2001      	movs	r0, #1
 800622c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006230:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8006234:	29ff      	cmp	r1, #255	; 0xff
 8006236:	f000 80c2 	beq.w	80063be <d_maybe_print_fold_expression.isra.15+0x23a>
 800623a:	1c4a      	adds	r2, r1, #1
 800623c:	2328      	movs	r3, #40	; 0x28
 800623e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8006242:	4620      	mov	r0, r4
 8006244:	5463      	strb	r3, [r4, r1]
 8006246:	464a      	mov	r2, r9
 8006248:	4631      	mov	r1, r6
 800624a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800624e:	4d64      	ldr	r5, [pc, #400]	; (80063e0 <d_maybe_print_fold_expression.isra.15+0x25c>)
 8006250:	f7ff ff34 	bl	80060bc <d_print_subexpr>
 8006254:	4642      	mov	r2, r8
 8006256:	4631      	mov	r1, r6
 8006258:	4620      	mov	r0, r4
 800625a:	f7ff fef1 	bl	8006040 <d_print_expr_op>
 800625e:	f04f 0a00 	mov.w	sl, #0
 8006262:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006266:	f105 0804 	add.w	r8, r5, #4
 800626a:	e008      	b.n	800627e <d_maybe_print_fold_expression.isra.15+0xfa>
 800626c:	460b      	mov	r3, r1
 800626e:	3101      	adds	r1, #1
 8006270:	45a8      	cmp	r8, r5
 8006272:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006276:	54e6      	strb	r6, [r4, r3]
 8006278:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800627c:	d0d3      	beq.n	8006226 <d_maybe_print_fold_expression.isra.15+0xa2>
 800627e:	29ff      	cmp	r1, #255	; 0xff
 8006280:	f815 6b01 	ldrb.w	r6, [r5], #1
 8006284:	d1f2      	bne.n	800626c <d_maybe_print_fold_expression.isra.15+0xe8>
 8006286:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800628a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800628e:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8006292:	4620      	mov	r0, r4
 8006294:	4798      	blx	r3
 8006296:	2101      	movs	r1, #1
 8006298:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 800629c:	2300      	movs	r3, #0
 800629e:	440a      	add	r2, r1
 80062a0:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80062a4:	e7e4      	b.n	8006270 <d_maybe_print_fold_expression.isra.15+0xec>
 80062a6:	4d4f      	ldr	r5, [pc, #316]	; (80063e4 <d_maybe_print_fold_expression.isra.15+0x260>)
 80062a8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80062ac:	f105 0b04 	add.w	fp, r5, #4
 80062b0:	e009      	b.n	80062c6 <d_maybe_print_fold_expression.isra.15+0x142>
 80062b2:	460b      	mov	r3, r1
 80062b4:	3101      	adds	r1, #1
 80062b6:	455d      	cmp	r5, fp
 80062b8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80062bc:	f804 a003 	strb.w	sl, [r4, r3]
 80062c0:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80062c4:	d099      	beq.n	80061fa <d_maybe_print_fold_expression.isra.15+0x76>
 80062c6:	29ff      	cmp	r1, #255	; 0xff
 80062c8:	f815 ab01 	ldrb.w	sl, [r5], #1
 80062cc:	d1f1      	bne.n	80062b2 <d_maybe_print_fold_expression.isra.15+0x12e>
 80062ce:	f04f 0300 	mov.w	r3, #0
 80062d2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80062d6:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 80062da:	4620      	mov	r0, r4
 80062dc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80062e0:	4798      	blx	r3
 80062e2:	2101      	movs	r1, #1
 80062e4:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80062e8:	2300      	movs	r3, #0
 80062ea:	440a      	add	r2, r1
 80062ec:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80062f0:	e7e1      	b.n	80062b6 <d_maybe_print_fold_expression.isra.15+0x132>
 80062f2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80062f6:	29ff      	cmp	r1, #255	; 0xff
 80062f8:	d04f      	beq.n	800639a <d_maybe_print_fold_expression.isra.15+0x216>
 80062fa:	2328      	movs	r3, #40	; 0x28
 80062fc:	1c48      	adds	r0, r1, #1
 80062fe:	464a      	mov	r2, r9
 8006300:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 8006304:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 80063e8 <d_maybe_print_fold_expression.isra.15+0x264>
 8006308:	5463      	strb	r3, [r4, r1]
 800630a:	4620      	mov	r0, r4
 800630c:	4631      	mov	r1, r6
 800630e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8006312:	f7ff fed3 	bl	80060bc <d_print_subexpr>
 8006316:	4631      	mov	r1, r6
 8006318:	4642      	mov	r2, r8
 800631a:	4620      	mov	r0, r4
 800631c:	f7ff fe90 	bl	8006040 <d_print_expr_op>
 8006320:	f109 0b03 	add.w	fp, r9, #3
 8006324:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006328:	e009      	b.n	800633e <d_maybe_print_fold_expression.isra.15+0x1ba>
 800632a:	460b      	mov	r3, r1
 800632c:	3101      	adds	r1, #1
 800632e:	45cb      	cmp	fp, r9
 8006330:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006334:	f804 a003 	strb.w	sl, [r4, r3]
 8006338:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 800633c:	d015      	beq.n	800636a <d_maybe_print_fold_expression.isra.15+0x1e6>
 800633e:	29ff      	cmp	r1, #255	; 0xff
 8006340:	f819 ab01 	ldrb.w	sl, [r9], #1
 8006344:	d1f1      	bne.n	800632a <d_maybe_print_fold_expression.isra.15+0x1a6>
 8006346:	f04f 0300 	mov.w	r3, #0
 800634a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800634e:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8006352:	4620      	mov	r0, r4
 8006354:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006358:	4798      	blx	r3
 800635a:	2101      	movs	r1, #1
 800635c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8006360:	2300      	movs	r3, #0
 8006362:	440a      	add	r2, r1
 8006364:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8006368:	e7e1      	b.n	800632e <d_maybe_print_fold_expression.isra.15+0x1aa>
 800636a:	4642      	mov	r2, r8
 800636c:	4631      	mov	r1, r6
 800636e:	4620      	mov	r0, r4
 8006370:	f7ff fe66 	bl	8006040 <d_print_expr_op>
 8006374:	462a      	mov	r2, r5
 8006376:	e746      	b.n	8006206 <d_maybe_print_fold_expression.isra.15+0x82>
 8006378:	2500      	movs	r5, #0
 800637a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800637e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006382:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8006386:	4620      	mov	r0, r4
 8006388:	4798      	blx	r3
 800638a:	2201      	movs	r2, #1
 800638c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006390:	4629      	mov	r1, r5
 8006392:	4413      	add	r3, r2
 8006394:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006398:	e73f      	b.n	800621a <d_maybe_print_fold_expression.isra.15+0x96>
 800639a:	f04f 0a00 	mov.w	sl, #0
 800639e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80063a2:	f880 a0ff 	strb.w	sl, [r0, #255]	; 0xff
 80063a6:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80063aa:	4798      	blx	r3
 80063ac:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80063b0:	4651      	mov	r1, sl
 80063b2:	3301      	adds	r3, #1
 80063b4:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
 80063b8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80063bc:	e79d      	b.n	80062fa <d_maybe_print_fold_expression.isra.15+0x176>
 80063be:	2500      	movs	r5, #0
 80063c0:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80063c4:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80063c8:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 80063cc:	4798      	blx	r3
 80063ce:	2201      	movs	r2, #1
 80063d0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80063d4:	4629      	mov	r1, r5
 80063d6:	4413      	add	r3, r2
 80063d8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80063dc:	e72e      	b.n	800623c <d_maybe_print_fold_expression.isra.15+0xb8>
 80063de:	bf00      	nop
 80063e0:	0800d9f4 	.word	0x0800d9f4
 80063e4:	0800d9ec 	.word	0x0800d9ec
 80063e8:	0800d908 	.word	0x0800d908

080063ec <d_demangle_callback.constprop.17>:
 80063ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f0:	b0e7      	sub	sp, #412	; 0x19c
 80063f2:	f890 9000 	ldrb.w	r9, [r0]
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
 80063fc:	4605      	mov	r5, r0
 80063fe:	6079      	str	r1, [r7, #4]
 8006400:	4616      	mov	r6, r2
 8006402:	f000 80f3 	beq.w	80065ec <d_demangle_callback.constprop.17+0x200>
 8006406:	2208      	movs	r2, #8
 8006408:	49be      	ldr	r1, [pc, #760]	; (8006704 <d_demangle_callback.constprop.17+0x318>)
 800640a:	4628      	mov	r0, r5
 800640c:	f005 fe0c 	bl	800c028 <strncmp>
 8006410:	b948      	cbnz	r0, 8006426 <d_demangle_callback.constprop.17+0x3a>
 8006412:	7a2b      	ldrb	r3, [r5, #8]
 8006414:	2b2e      	cmp	r3, #46	; 0x2e
 8006416:	f000 80d8 	beq.w	80065ca <d_demangle_callback.constprop.17+0x1de>
 800641a:	2b5f      	cmp	r3, #95	; 0x5f
 800641c:	f000 80d5 	beq.w	80065ca <d_demangle_callback.constprop.17+0x1de>
 8006420:	2b24      	cmp	r3, #36	; 0x24
 8006422:	f000 80d2 	beq.w	80065ca <d_demangle_callback.constprop.17+0x1de>
 8006426:	f04f 0800 	mov.w	r8, #0
 800642a:	4628      	mov	r0, r5
 800642c:	f000 f9e4 	bl	80067f8 <strlen>
 8006430:	ea4f 0a40 	mov.w	sl, r0, lsl #1
 8006434:	0083      	lsls	r3, r0, #2
 8006436:	eb03 020a 	add.w	r2, r3, sl
 800643a:	0092      	lsls	r2, r2, #2
 800643c:	3208      	adds	r2, #8
 800643e:	ebad 0d02 	sub.w	sp, sp, r2
 8006442:	2400      	movs	r4, #0
 8006444:	46eb      	mov	fp, sp
 8006446:	2211      	movs	r2, #17
 8006448:	330a      	adds	r3, #10
 800644a:	f023 0307 	bic.w	r3, r3, #7
 800644e:	ebad 0d03 	sub.w	sp, sp, r3
 8006452:	63b8      	str	r0, [r7, #56]	; 0x38
 8006454:	f1b8 0f01 	cmp.w	r8, #1
 8006458:	4428      	add	r0, r5
 800645a:	f8c7 b024 	str.w	fp, [r7, #36]	; 0x24
 800645e:	f8c7 d030 	str.w	sp, [r7, #48]	; 0x30
 8006462:	f8c7 a02c 	str.w	sl, [r7, #44]	; 0x2c
 8006466:	617d      	str	r5, [r7, #20]
 8006468:	623d      	str	r5, [r7, #32]
 800646a:	61b8      	str	r0, [r7, #24]
 800646c:	61fa      	str	r2, [r7, #28]
 800646e:	62bc      	str	r4, [r7, #40]	; 0x28
 8006470:	637c      	str	r4, [r7, #52]	; 0x34
 8006472:	63fc      	str	r4, [r7, #60]	; 0x3c
 8006474:	643c      	str	r4, [r7, #64]	; 0x40
 8006476:	647c      	str	r4, [r7, #68]	; 0x44
 8006478:	64bc      	str	r4, [r7, #72]	; 0x48
 800647a:	64fc      	str	r4, [r7, #76]	; 0x4c
 800647c:	f000 80bd 	beq.w	80065fa <d_demangle_callback.constprop.17+0x20e>
 8006480:	f0c0 80d1 	bcc.w	8006626 <d_demangle_callback.constprop.17+0x23a>
 8006484:	7aea      	ldrb	r2, [r5, #11]
 8006486:	f1b8 0f02 	cmp.w	r8, #2
 800648a:	f105 030b 	add.w	r3, r5, #11
 800648e:	bf14      	ite	ne
 8006490:	f04f 0944 	movne.w	r9, #68	; 0x44
 8006494:	f04f 0943 	moveq.w	r9, #67	; 0x43
 8006498:	2a5f      	cmp	r2, #95	; 0x5f
 800649a:	623b      	str	r3, [r7, #32]
 800649c:	f000 80b6 	beq.w	800660c <d_demangle_callback.constprop.17+0x220>
 80064a0:	4618      	mov	r0, r3
 80064a2:	603b      	str	r3, [r7, #0]
 80064a4:	f000 f9a8 	bl	80067f8 <strlen>
 80064a8:	f1ba 0f00 	cmp.w	sl, #0
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	f340 80c3 	ble.w	8006638 <d_demangle_callback.constprop.17+0x24c>
 80064b2:	2201      	movs	r2, #1
 80064b4:	62ba      	str	r2, [r7, #40]	; 0x28
 80064b6:	2800      	cmp	r0, #0
 80064b8:	f000 80be 	beq.w	8006638 <d_demangle_callback.constprop.17+0x24c>
 80064bc:	2200      	movs	r2, #0
 80064be:	f88b 2000 	strb.w	r2, [fp]
 80064c2:	465a      	mov	r2, fp
 80064c4:	f8cb 3004 	str.w	r3, [fp, #4]
 80064c8:	f8cb 0008 	str.w	r0, [fp, #8]
 80064cc:	4649      	mov	r1, r9
 80064ce:	2300      	movs	r3, #0
 80064d0:	f107 0014 	add.w	r0, r7, #20
 80064d4:	f7f9 fe3a 	bl	800014c <d_make_comp>
 80064d8:	6a3c      	ldr	r4, [r7, #32]
 80064da:	4605      	mov	r5, r0
 80064dc:	4620      	mov	r0, r4
 80064de:	f000 f98b 	bl	80067f8 <strlen>
 80064e2:	1823      	adds	r3, r4, r0
 80064e4:	623b      	str	r3, [r7, #32]
 80064e6:	f814 9000 	ldrb.w	r9, [r4, r0]
 80064ea:	f1b9 0f00 	cmp.w	r9, #0
 80064ee:	f040 8087 	bne.w	8006600 <d_demangle_callback.constprop.17+0x214>
 80064f2:	2d00      	cmp	r5, #0
 80064f4:	f000 8084 	beq.w	8006600 <d_demangle_callback.constprop.17+0x214>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80064fe:	462a      	mov	r2, r5
 8006500:	f507 71c2 	add.w	r1, r7, #388	; 0x184
 8006504:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8006508:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
 800650c:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
 8006510:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 8006514:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 8006518:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
 800651c:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8006520:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
 8006524:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
 8006528:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
 800652c:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
 8006530:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
 8006534:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
 8006538:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
 800653c:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
 8006540:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
 8006544:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
 8006548:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
 800654c:	f7f9 feca 	bl	80002e4 <d_count_templates_scopes>
 8006550:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
 8006554:	46e8      	mov	r8, sp
 8006556:	00d3      	lsls	r3, r2, #3
 8006558:	3308      	adds	r3, #8
 800655a:	ebad 0d03 	sub.w	sp, sp, r3
 800655e:	4668      	mov	r0, sp
 8006560:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
 8006564:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8006568:	fb01 f102 	mul.w	r1, r1, r2
 800656c:	00ca      	lsls	r2, r1, #3
 800656e:	3208      	adds	r2, #8
 8006570:	ebad 0d02 	sub.w	sp, sp, r2
 8006574:	f107 060c 	add.w	r6, r7, #12
 8006578:	462a      	mov	r2, r5
 800657a:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
 800657e:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
 8006582:	4620      	mov	r0, r4
 8006584:	2111      	movs	r1, #17
 8006586:	f8c4 d138 	str.w	sp, [r4, #312]	; 0x138
 800658a:	613b      	str	r3, [r7, #16]
 800658c:	60fd      	str	r5, [r7, #12]
 800658e:	f8c4 9144 	str.w	r9, [r4, #324]	; 0x144
 8006592:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
 8006596:	f7fc f9b9 	bl	800290c <d_print_comp_inner>
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	4620      	mov	r0, r4
 800659e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80065a2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80065a6:	46c5      	mov	sp, r8
 80065a8:	f804 9001 	strb.w	r9, [r4, r1]
 80065ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80065b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80065b4:	4798      	blx	r3
 80065b6:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
 80065ba:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 80065be:	fab0 f080 	clz	r0, r0
 80065c2:	0940      	lsrs	r0, r0, #5
 80065c4:	46bd      	mov	sp, r7
 80065c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ca:	7a6b      	ldrb	r3, [r5, #9]
 80065cc:	2b44      	cmp	r3, #68	; 0x44
 80065ce:	d002      	beq.n	80065d6 <d_demangle_callback.constprop.17+0x1ea>
 80065d0:	2b49      	cmp	r3, #73	; 0x49
 80065d2:	f47f af28 	bne.w	8006426 <d_demangle_callback.constprop.17+0x3a>
 80065d6:	7aaa      	ldrb	r2, [r5, #10]
 80065d8:	2a5f      	cmp	r2, #95	; 0x5f
 80065da:	f47f af24 	bne.w	8006426 <d_demangle_callback.constprop.17+0x3a>
 80065de:	2b49      	cmp	r3, #73	; 0x49
 80065e0:	bf14      	ite	ne
 80065e2:	f04f 0803 	movne.w	r8, #3
 80065e6:	f04f 0802 	moveq.w	r8, #2
 80065ea:	e71e      	b.n	800642a <d_demangle_callback.constprop.17+0x3e>
 80065ec:	7843      	ldrb	r3, [r0, #1]
 80065ee:	2b5a      	cmp	r3, #90	; 0x5a
 80065f0:	f47f af09 	bne.w	8006406 <d_demangle_callback.constprop.17+0x1a>
 80065f4:	f04f 0801 	mov.w	r8, #1
 80065f8:	e717      	b.n	800642a <d_demangle_callback.constprop.17+0x3e>
 80065fa:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
 80065fe:	d01d      	beq.n	800663c <d_demangle_callback.constprop.17+0x250>
 8006600:	2000      	movs	r0, #0
 8006602:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 8006606:	46bd      	mov	sp, r7
 8006608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800660c:	7b2a      	ldrb	r2, [r5, #12]
 800660e:	2a5a      	cmp	r2, #90	; 0x5a
 8006610:	f47f af46 	bne.w	80064a0 <d_demangle_callback.constprop.17+0xb4>
 8006614:	350d      	adds	r5, #13
 8006616:	4621      	mov	r1, r4
 8006618:	f107 0014 	add.w	r0, r7, #20
 800661c:	623d      	str	r5, [r7, #32]
 800661e:	f7fb fe29 	bl	8002274 <d_encoding>
 8006622:	4602      	mov	r2, r0
 8006624:	e752      	b.n	80064cc <d_demangle_callback.constprop.17+0xe0>
 8006626:	f107 0014 	add.w	r0, r7, #20
 800662a:	f7fb f813 	bl	8001654 <d_type>
 800662e:	6a3b      	ldr	r3, [r7, #32]
 8006630:	4605      	mov	r5, r0
 8006632:	f893 9000 	ldrb.w	r9, [r3]
 8006636:	e758      	b.n	80064ea <d_demangle_callback.constprop.17+0xfe>
 8006638:	2200      	movs	r2, #0
 800663a:	e747      	b.n	80064cc <d_demangle_callback.constprop.17+0xe0>
 800663c:	786b      	ldrb	r3, [r5, #1]
 800663e:	2b5a      	cmp	r3, #90	; 0x5a
 8006640:	d1de      	bne.n	8006600 <d_demangle_callback.constprop.17+0x214>
 8006642:	3502      	adds	r5, #2
 8006644:	4641      	mov	r1, r8
 8006646:	f107 0014 	add.w	r0, r7, #20
 800664a:	623d      	str	r5, [r7, #32]
 800664c:	f7fb fe12 	bl	8002274 <d_encoding>
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	4605      	mov	r5, r0
 8006654:	07db      	lsls	r3, r3, #31
 8006656:	d550      	bpl.n	80066fa <d_demangle_callback.constprop.17+0x30e>
 8006658:	6a38      	ldr	r0, [r7, #32]
 800665a:	f890 9000 	ldrb.w	r9, [r0]
 800665e:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 8006662:	f47f af42 	bne.w	80064ea <d_demangle_callback.constprop.17+0xfe>
 8006666:	7843      	ldrb	r3, [r0, #1]
 8006668:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800666c:	2a19      	cmp	r2, #25
 800666e:	d938      	bls.n	80066e2 <d_demangle_callback.constprop.17+0x2f6>
 8006670:	2b5f      	cmp	r3, #95	; 0x5f
 8006672:	d036      	beq.n	80066e2 <d_demangle_callback.constprop.17+0x2f6>
 8006674:	3b30      	subs	r3, #48	; 0x30
 8006676:	2b09      	cmp	r3, #9
 8006678:	d83f      	bhi.n	80066fa <d_demangle_callback.constprop.17+0x30e>
 800667a:	4602      	mov	r2, r0
 800667c:	7803      	ldrb	r3, [r0, #0]
 800667e:	2b2e      	cmp	r3, #46	; 0x2e
 8006680:	d111      	bne.n	80066a6 <d_demangle_callback.constprop.17+0x2ba>
 8006682:	7853      	ldrb	r3, [r2, #1]
 8006684:	3b30      	subs	r3, #48	; 0x30
 8006686:	2b09      	cmp	r3, #9
 8006688:	d80d      	bhi.n	80066a6 <d_demangle_callback.constprop.17+0x2ba>
 800668a:	7893      	ldrb	r3, [r2, #2]
 800668c:	3202      	adds	r2, #2
 800668e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006692:	2909      	cmp	r1, #9
 8006694:	d8f3      	bhi.n	800667e <d_demangle_callback.constprop.17+0x292>
 8006696:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800669a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800669e:	2909      	cmp	r1, #9
 80066a0:	d9f9      	bls.n	8006696 <d_demangle_callback.constprop.17+0x2aa>
 80066a2:	2b2e      	cmp	r3, #46	; 0x2e
 80066a4:	d0ed      	beq.n	8006682 <d_demangle_callback.constprop.17+0x296>
 80066a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066aa:	623a      	str	r2, [r7, #32]
 80066ac:	4299      	cmp	r1, r3
 80066ae:	da16      	bge.n	80066de <d_demangle_callback.constprop.17+0x2f2>
 80066b0:	f8d7 e024 	ldr.w	lr, [r7, #36]	; 0x24
 80066b4:	1c4b      	adds	r3, r1, #1
 80066b6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80066ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80066bc:	eb1e 0381 	adds.w	r3, lr, r1, lsl #2
 80066c0:	d00d      	beq.n	80066de <d_demangle_callback.constprop.17+0x2f2>
 80066c2:	1a12      	subs	r2, r2, r0
 80066c4:	d00b      	beq.n	80066de <d_demangle_callback.constprop.17+0x2f2>
 80066c6:	f80e 4021 	strb.w	r4, [lr, r1, lsl #2]
 80066ca:	6058      	str	r0, [r3, #4]
 80066cc:	609a      	str	r2, [r3, #8]
 80066ce:	462a      	mov	r2, r5
 80066d0:	214d      	movs	r1, #77	; 0x4d
 80066d2:	f107 0014 	add.w	r0, r7, #20
 80066d6:	f7f9 fd39 	bl	800014c <d_make_comp>
 80066da:	4605      	mov	r5, r0
 80066dc:	e7bc      	b.n	8006658 <d_demangle_callback.constprop.17+0x26c>
 80066de:	2300      	movs	r3, #0
 80066e0:	e7f5      	b.n	80066ce <d_demangle_callback.constprop.17+0x2e2>
 80066e2:	1c81      	adds	r1, r0, #2
 80066e4:	460a      	mov	r2, r1
 80066e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066ea:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
 80066ee:	f1be 0f19 	cmp.w	lr, #25
 80066f2:	d9f7      	bls.n	80066e4 <d_demangle_callback.constprop.17+0x2f8>
 80066f4:	2b5f      	cmp	r3, #95	; 0x5f
 80066f6:	d0f5      	beq.n	80066e4 <d_demangle_callback.constprop.17+0x2f8>
 80066f8:	e7c1      	b.n	800667e <d_demangle_callback.constprop.17+0x292>
 80066fa:	6a3b      	ldr	r3, [r7, #32]
 80066fc:	f893 9000 	ldrb.w	r9, [r3]
 8006700:	e6f3      	b.n	80064ea <d_demangle_callback.constprop.17+0xfe>
 8006702:	bf00      	nop
 8006704:	0800d698 	.word	0x0800d698

08006708 <__cxa_demangle>:
 8006708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800670c:	b084      	sub	sp, #16
 800670e:	b378      	cbz	r0, 8006770 <__cxa_demangle+0x68>
 8006710:	b101      	cbz	r1, 8006714 <__cxa_demangle+0xc>
 8006712:	b36a      	cbz	r2, 8006770 <__cxa_demangle+0x68>
 8006714:	2400      	movs	r4, #0
 8006716:	4616      	mov	r6, r2
 8006718:	460d      	mov	r5, r1
 800671a:	466a      	mov	r2, sp
 800671c:	4927      	ldr	r1, [pc, #156]	; (80067bc <__cxa_demangle+0xb4>)
 800671e:	461f      	mov	r7, r3
 8006720:	9400      	str	r4, [sp, #0]
 8006722:	9401      	str	r4, [sp, #4]
 8006724:	9402      	str	r4, [sp, #8]
 8006726:	9403      	str	r4, [sp, #12]
 8006728:	f7ff fe60 	bl	80063ec <d_demangle_callback.constprop.17>
 800672c:	2800      	cmp	r0, #0
 800672e:	d03e      	beq.n	80067ae <__cxa_demangle+0xa6>
 8006730:	9b03      	ldr	r3, [sp, #12]
 8006732:	b1d3      	cbz	r3, 800676a <__cxa_demangle+0x62>
 8006734:	f04f 0801 	mov.w	r8, #1
 8006738:	9c00      	ldr	r4, [sp, #0]
 800673a:	b35c      	cbz	r4, 8006794 <__cxa_demangle+0x8c>
 800673c:	b33d      	cbz	r5, 800678e <__cxa_demangle+0x86>
 800673e:	4620      	mov	r0, r4
 8006740:	f000 f85a 	bl	80067f8 <strlen>
 8006744:	6833      	ldr	r3, [r6, #0]
 8006746:	4298      	cmp	r0, r3
 8006748:	d21b      	bcs.n	8006782 <__cxa_demangle+0x7a>
 800674a:	1c42      	adds	r2, r0, #1
 800674c:	4621      	mov	r1, r4
 800674e:	4628      	mov	r0, r5
 8006750:	f005 fa25 	bl	800bb9e <memcpy>
 8006754:	4620      	mov	r0, r4
 8006756:	f004 ffff 	bl	800b758 <free>
 800675a:	462c      	mov	r4, r5
 800675c:	b10f      	cbz	r7, 8006762 <__cxa_demangle+0x5a>
 800675e:	2300      	movs	r3, #0
 8006760:	603b      	str	r3, [r7, #0]
 8006762:	4620      	mov	r0, r4
 8006764:	b004      	add	sp, #16
 8006766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800676a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800676e:	e7e3      	b.n	8006738 <__cxa_demangle+0x30>
 8006770:	b313      	cbz	r3, 80067b8 <__cxa_demangle+0xb0>
 8006772:	2400      	movs	r4, #0
 8006774:	f06f 0202 	mvn.w	r2, #2
 8006778:	4620      	mov	r0, r4
 800677a:	601a      	str	r2, [r3, #0]
 800677c:	b004      	add	sp, #16
 800677e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006782:	4628      	mov	r0, r5
 8006784:	f004 ffe8 	bl	800b758 <free>
 8006788:	f8c6 8000 	str.w	r8, [r6]
 800678c:	e7e6      	b.n	800675c <__cxa_demangle+0x54>
 800678e:	2e00      	cmp	r6, #0
 8006790:	d1fa      	bne.n	8006788 <__cxa_demangle+0x80>
 8006792:	e7e3      	b.n	800675c <__cxa_demangle+0x54>
 8006794:	b187      	cbz	r7, 80067b8 <__cxa_demangle+0xb0>
 8006796:	f1b8 0f01 	cmp.w	r8, #1
 800679a:	d004      	beq.n	80067a6 <__cxa_demangle+0x9e>
 800679c:	f06f 0301 	mvn.w	r3, #1
 80067a0:	2400      	movs	r4, #0
 80067a2:	603b      	str	r3, [r7, #0]
 80067a4:	e7dd      	b.n	8006762 <__cxa_demangle+0x5a>
 80067a6:	f04f 33ff 	mov.w	r3, #4294967295
 80067aa:	603b      	str	r3, [r7, #0]
 80067ac:	e7d9      	b.n	8006762 <__cxa_demangle+0x5a>
 80067ae:	9800      	ldr	r0, [sp, #0]
 80067b0:	f004 ffd2 	bl	800b758 <free>
 80067b4:	2f00      	cmp	r7, #0
 80067b6:	d1f1      	bne.n	800679c <__cxa_demangle+0x94>
 80067b8:	2400      	movs	r4, #0
 80067ba:	e7d2      	b.n	8006762 <__cxa_demangle+0x5a>
 80067bc:	0800086d 	.word	0x0800086d

080067c0 <__gcclibcxx_demangle_callback>:
 80067c0:	b160      	cbz	r0, 80067dc <__gcclibcxx_demangle_callback+0x1c>
 80067c2:	b508      	push	{r3, lr}
 80067c4:	b139      	cbz	r1, 80067d6 <__gcclibcxx_demangle_callback+0x16>
 80067c6:	f7ff fe11 	bl	80063ec <d_demangle_callback.constprop.17>
 80067ca:	2800      	cmp	r0, #0
 80067cc:	bf0c      	ite	eq
 80067ce:	f06f 0001 	mvneq.w	r0, #1
 80067d2:	2000      	movne	r0, #0
 80067d4:	bd08      	pop	{r3, pc}
 80067d6:	f06f 0002 	mvn.w	r0, #2
 80067da:	bd08      	pop	{r3, pc}
 80067dc:	f06f 0002 	mvn.w	r0, #2
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop

080067e4 <strcmp>:
 80067e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067ec:	2a01      	cmp	r2, #1
 80067ee:	bf28      	it	cs
 80067f0:	429a      	cmpcs	r2, r3
 80067f2:	d0f7      	beq.n	80067e4 <strcmp>
 80067f4:	1ad0      	subs	r0, r2, r3
 80067f6:	4770      	bx	lr

080067f8 <strlen>:
 80067f8:	4603      	mov	r3, r0
 80067fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067fe:	2a00      	cmp	r2, #0
 8006800:	d1fb      	bne.n	80067fa <strlen+0x2>
 8006802:	1a18      	subs	r0, r3, r0
 8006804:	3801      	subs	r0, #1
 8006806:	4770      	bx	lr

08006808 <__aeabi_frsub>:
 8006808:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800680c:	e002      	b.n	8006814 <__addsf3>
 800680e:	bf00      	nop

08006810 <__aeabi_fsub>:
 8006810:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08006814 <__addsf3>:
 8006814:	0042      	lsls	r2, r0, #1
 8006816:	bf1f      	itttt	ne
 8006818:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800681c:	ea92 0f03 	teqne	r2, r3
 8006820:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8006824:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8006828:	d06a      	beq.n	8006900 <__addsf3+0xec>
 800682a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800682e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8006832:	bfc1      	itttt	gt
 8006834:	18d2      	addgt	r2, r2, r3
 8006836:	4041      	eorgt	r1, r0
 8006838:	4048      	eorgt	r0, r1
 800683a:	4041      	eorgt	r1, r0
 800683c:	bfb8      	it	lt
 800683e:	425b      	neglt	r3, r3
 8006840:	2b19      	cmp	r3, #25
 8006842:	bf88      	it	hi
 8006844:	4770      	bxhi	lr
 8006846:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800684a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800684e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8006852:	bf18      	it	ne
 8006854:	4240      	negne	r0, r0
 8006856:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800685a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800685e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8006862:	bf18      	it	ne
 8006864:	4249      	negne	r1, r1
 8006866:	ea92 0f03 	teq	r2, r3
 800686a:	d03f      	beq.n	80068ec <__addsf3+0xd8>
 800686c:	f1a2 0201 	sub.w	r2, r2, #1
 8006870:	fa41 fc03 	asr.w	ip, r1, r3
 8006874:	eb10 000c 	adds.w	r0, r0, ip
 8006878:	f1c3 0320 	rsb	r3, r3, #32
 800687c:	fa01 f103 	lsl.w	r1, r1, r3
 8006880:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8006884:	d502      	bpl.n	800688c <__addsf3+0x78>
 8006886:	4249      	negs	r1, r1
 8006888:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800688c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8006890:	d313      	bcc.n	80068ba <__addsf3+0xa6>
 8006892:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006896:	d306      	bcc.n	80068a6 <__addsf3+0x92>
 8006898:	0840      	lsrs	r0, r0, #1
 800689a:	ea4f 0131 	mov.w	r1, r1, rrx
 800689e:	f102 0201 	add.w	r2, r2, #1
 80068a2:	2afe      	cmp	r2, #254	; 0xfe
 80068a4:	d251      	bcs.n	800694a <__addsf3+0x136>
 80068a6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80068aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80068ae:	bf08      	it	eq
 80068b0:	f020 0001 	biceq.w	r0, r0, #1
 80068b4:	ea40 0003 	orr.w	r0, r0, r3
 80068b8:	4770      	bx	lr
 80068ba:	0049      	lsls	r1, r1, #1
 80068bc:	eb40 0000 	adc.w	r0, r0, r0
 80068c0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80068c4:	f1a2 0201 	sub.w	r2, r2, #1
 80068c8:	d1ed      	bne.n	80068a6 <__addsf3+0x92>
 80068ca:	fab0 fc80 	clz	ip, r0
 80068ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80068d2:	ebb2 020c 	subs.w	r2, r2, ip
 80068d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80068da:	bfaa      	itet	ge
 80068dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80068e0:	4252      	neglt	r2, r2
 80068e2:	4318      	orrge	r0, r3
 80068e4:	bfbc      	itt	lt
 80068e6:	40d0      	lsrlt	r0, r2
 80068e8:	4318      	orrlt	r0, r3
 80068ea:	4770      	bx	lr
 80068ec:	f092 0f00 	teq	r2, #0
 80068f0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80068f4:	bf06      	itte	eq
 80068f6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80068fa:	3201      	addeq	r2, #1
 80068fc:	3b01      	subne	r3, #1
 80068fe:	e7b5      	b.n	800686c <__addsf3+0x58>
 8006900:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8006904:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8006908:	bf18      	it	ne
 800690a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800690e:	d021      	beq.n	8006954 <__addsf3+0x140>
 8006910:	ea92 0f03 	teq	r2, r3
 8006914:	d004      	beq.n	8006920 <__addsf3+0x10c>
 8006916:	f092 0f00 	teq	r2, #0
 800691a:	bf08      	it	eq
 800691c:	4608      	moveq	r0, r1
 800691e:	4770      	bx	lr
 8006920:	ea90 0f01 	teq	r0, r1
 8006924:	bf1c      	itt	ne
 8006926:	2000      	movne	r0, #0
 8006928:	4770      	bxne	lr
 800692a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800692e:	d104      	bne.n	800693a <__addsf3+0x126>
 8006930:	0040      	lsls	r0, r0, #1
 8006932:	bf28      	it	cs
 8006934:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8006938:	4770      	bx	lr
 800693a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800693e:	bf3c      	itt	cc
 8006940:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8006944:	4770      	bxcc	lr
 8006946:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800694a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800694e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006952:	4770      	bx	lr
 8006954:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8006958:	bf16      	itet	ne
 800695a:	4608      	movne	r0, r1
 800695c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8006960:	4601      	movne	r1, r0
 8006962:	0242      	lsls	r2, r0, #9
 8006964:	bf06      	itte	eq
 8006966:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800696a:	ea90 0f01 	teqeq	r0, r1
 800696e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8006972:	4770      	bx	lr

08006974 <__aeabi_ui2f>:
 8006974:	f04f 0300 	mov.w	r3, #0
 8006978:	e004      	b.n	8006984 <__aeabi_i2f+0x8>
 800697a:	bf00      	nop

0800697c <__aeabi_i2f>:
 800697c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8006980:	bf48      	it	mi
 8006982:	4240      	negmi	r0, r0
 8006984:	ea5f 0c00 	movs.w	ip, r0
 8006988:	bf08      	it	eq
 800698a:	4770      	bxeq	lr
 800698c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8006990:	4601      	mov	r1, r0
 8006992:	f04f 0000 	mov.w	r0, #0
 8006996:	e01c      	b.n	80069d2 <__aeabi_l2f+0x2a>

08006998 <__aeabi_ul2f>:
 8006998:	ea50 0201 	orrs.w	r2, r0, r1
 800699c:	bf08      	it	eq
 800699e:	4770      	bxeq	lr
 80069a0:	f04f 0300 	mov.w	r3, #0
 80069a4:	e00a      	b.n	80069bc <__aeabi_l2f+0x14>
 80069a6:	bf00      	nop

080069a8 <__aeabi_l2f>:
 80069a8:	ea50 0201 	orrs.w	r2, r0, r1
 80069ac:	bf08      	it	eq
 80069ae:	4770      	bxeq	lr
 80069b0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80069b4:	d502      	bpl.n	80069bc <__aeabi_l2f+0x14>
 80069b6:	4240      	negs	r0, r0
 80069b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80069bc:	ea5f 0c01 	movs.w	ip, r1
 80069c0:	bf02      	ittt	eq
 80069c2:	4684      	moveq	ip, r0
 80069c4:	4601      	moveq	r1, r0
 80069c6:	2000      	moveq	r0, #0
 80069c8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80069cc:	bf08      	it	eq
 80069ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80069d2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80069d6:	fabc f28c 	clz	r2, ip
 80069da:	3a08      	subs	r2, #8
 80069dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80069e0:	db10      	blt.n	8006a04 <__aeabi_l2f+0x5c>
 80069e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80069e6:	4463      	add	r3, ip
 80069e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80069ec:	f1c2 0220 	rsb	r2, r2, #32
 80069f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80069f4:	fa20 f202 	lsr.w	r2, r0, r2
 80069f8:	eb43 0002 	adc.w	r0, r3, r2
 80069fc:	bf08      	it	eq
 80069fe:	f020 0001 	biceq.w	r0, r0, #1
 8006a02:	4770      	bx	lr
 8006a04:	f102 0220 	add.w	r2, r2, #32
 8006a08:	fa01 fc02 	lsl.w	ip, r1, r2
 8006a0c:	f1c2 0220 	rsb	r2, r2, #32
 8006a10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8006a14:	fa21 f202 	lsr.w	r2, r1, r2
 8006a18:	eb43 0002 	adc.w	r0, r3, r2
 8006a1c:	bf08      	it	eq
 8006a1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8006a22:	4770      	bx	lr

08006a24 <__aeabi_fmul>:
 8006a24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006a28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8006a2c:	bf1e      	ittt	ne
 8006a2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8006a32:	ea92 0f0c 	teqne	r2, ip
 8006a36:	ea93 0f0c 	teqne	r3, ip
 8006a3a:	d06f      	beq.n	8006b1c <__aeabi_fmul+0xf8>
 8006a3c:	441a      	add	r2, r3
 8006a3e:	ea80 0c01 	eor.w	ip, r0, r1
 8006a42:	0240      	lsls	r0, r0, #9
 8006a44:	bf18      	it	ne
 8006a46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8006a4a:	d01e      	beq.n	8006a8a <__aeabi_fmul+0x66>
 8006a4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8006a54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8006a58:	fba0 3101 	umull	r3, r1, r0, r1
 8006a5c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8006a60:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8006a64:	bf3e      	ittt	cc
 8006a66:	0049      	lslcc	r1, r1, #1
 8006a68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8006a6c:	005b      	lslcc	r3, r3, #1
 8006a6e:	ea40 0001 	orr.w	r0, r0, r1
 8006a72:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8006a76:	2afd      	cmp	r2, #253	; 0xfd
 8006a78:	d81d      	bhi.n	8006ab6 <__aeabi_fmul+0x92>
 8006a7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8006a82:	bf08      	it	eq
 8006a84:	f020 0001 	biceq.w	r0, r0, #1
 8006a88:	4770      	bx	lr
 8006a8a:	f090 0f00 	teq	r0, #0
 8006a8e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8006a92:	bf08      	it	eq
 8006a94:	0249      	lsleq	r1, r1, #9
 8006a96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8006a9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8006a9e:	3a7f      	subs	r2, #127	; 0x7f
 8006aa0:	bfc2      	ittt	gt
 8006aa2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8006aa6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8006aaa:	4770      	bxgt	lr
 8006aac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006ab0:	f04f 0300 	mov.w	r3, #0
 8006ab4:	3a01      	subs	r2, #1
 8006ab6:	dc5d      	bgt.n	8006b74 <__aeabi_fmul+0x150>
 8006ab8:	f112 0f19 	cmn.w	r2, #25
 8006abc:	bfdc      	itt	le
 8006abe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8006ac2:	4770      	bxle	lr
 8006ac4:	f1c2 0200 	rsb	r2, r2, #0
 8006ac8:	0041      	lsls	r1, r0, #1
 8006aca:	fa21 f102 	lsr.w	r1, r1, r2
 8006ace:	f1c2 0220 	rsb	r2, r2, #32
 8006ad2:	fa00 fc02 	lsl.w	ip, r0, r2
 8006ad6:	ea5f 0031 	movs.w	r0, r1, rrx
 8006ada:	f140 0000 	adc.w	r0, r0, #0
 8006ade:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8006ae2:	bf08      	it	eq
 8006ae4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8006ae8:	4770      	bx	lr
 8006aea:	f092 0f00 	teq	r2, #0
 8006aee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8006af2:	bf02      	ittt	eq
 8006af4:	0040      	lsleq	r0, r0, #1
 8006af6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8006afa:	3a01      	subeq	r2, #1
 8006afc:	d0f9      	beq.n	8006af2 <__aeabi_fmul+0xce>
 8006afe:	ea40 000c 	orr.w	r0, r0, ip
 8006b02:	f093 0f00 	teq	r3, #0
 8006b06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8006b0a:	bf02      	ittt	eq
 8006b0c:	0049      	lsleq	r1, r1, #1
 8006b0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8006b12:	3b01      	subeq	r3, #1
 8006b14:	d0f9      	beq.n	8006b0a <__aeabi_fmul+0xe6>
 8006b16:	ea41 010c 	orr.w	r1, r1, ip
 8006b1a:	e78f      	b.n	8006a3c <__aeabi_fmul+0x18>
 8006b1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8006b20:	ea92 0f0c 	teq	r2, ip
 8006b24:	bf18      	it	ne
 8006b26:	ea93 0f0c 	teqne	r3, ip
 8006b2a:	d00a      	beq.n	8006b42 <__aeabi_fmul+0x11e>
 8006b2c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8006b30:	bf18      	it	ne
 8006b32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8006b36:	d1d8      	bne.n	8006aea <__aeabi_fmul+0xc6>
 8006b38:	ea80 0001 	eor.w	r0, r0, r1
 8006b3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006b40:	4770      	bx	lr
 8006b42:	f090 0f00 	teq	r0, #0
 8006b46:	bf17      	itett	ne
 8006b48:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8006b4c:	4608      	moveq	r0, r1
 8006b4e:	f091 0f00 	teqne	r1, #0
 8006b52:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8006b56:	d014      	beq.n	8006b82 <__aeabi_fmul+0x15e>
 8006b58:	ea92 0f0c 	teq	r2, ip
 8006b5c:	d101      	bne.n	8006b62 <__aeabi_fmul+0x13e>
 8006b5e:	0242      	lsls	r2, r0, #9
 8006b60:	d10f      	bne.n	8006b82 <__aeabi_fmul+0x15e>
 8006b62:	ea93 0f0c 	teq	r3, ip
 8006b66:	d103      	bne.n	8006b70 <__aeabi_fmul+0x14c>
 8006b68:	024b      	lsls	r3, r1, #9
 8006b6a:	bf18      	it	ne
 8006b6c:	4608      	movne	r0, r1
 8006b6e:	d108      	bne.n	8006b82 <__aeabi_fmul+0x15e>
 8006b70:	ea80 0001 	eor.w	r0, r0, r1
 8006b74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006b78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8006b7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006b80:	4770      	bx	lr
 8006b82:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8006b86:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8006b8a:	4770      	bx	lr

08006b8c <__aeabi_fdiv>:
 8006b8c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006b90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8006b94:	bf1e      	ittt	ne
 8006b96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8006b9a:	ea92 0f0c 	teqne	r2, ip
 8006b9e:	ea93 0f0c 	teqne	r3, ip
 8006ba2:	d069      	beq.n	8006c78 <__aeabi_fdiv+0xec>
 8006ba4:	eba2 0203 	sub.w	r2, r2, r3
 8006ba8:	ea80 0c01 	eor.w	ip, r0, r1
 8006bac:	0249      	lsls	r1, r1, #9
 8006bae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8006bb2:	d037      	beq.n	8006c24 <__aeabi_fdiv+0x98>
 8006bb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006bb8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8006bbc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8006bc0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8006bc4:	428b      	cmp	r3, r1
 8006bc6:	bf38      	it	cc
 8006bc8:	005b      	lslcc	r3, r3, #1
 8006bca:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8006bce:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8006bd2:	428b      	cmp	r3, r1
 8006bd4:	bf24      	itt	cs
 8006bd6:	1a5b      	subcs	r3, r3, r1
 8006bd8:	ea40 000c 	orrcs.w	r0, r0, ip
 8006bdc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8006be0:	bf24      	itt	cs
 8006be2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8006be6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8006bea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8006bee:	bf24      	itt	cs
 8006bf0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8006bf4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8006bf8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8006bfc:	bf24      	itt	cs
 8006bfe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8006c02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006c06:	011b      	lsls	r3, r3, #4
 8006c08:	bf18      	it	ne
 8006c0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8006c0e:	d1e0      	bne.n	8006bd2 <__aeabi_fdiv+0x46>
 8006c10:	2afd      	cmp	r2, #253	; 0xfd
 8006c12:	f63f af50 	bhi.w	8006ab6 <__aeabi_fmul+0x92>
 8006c16:	428b      	cmp	r3, r1
 8006c18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8006c1c:	bf08      	it	eq
 8006c1e:	f020 0001 	biceq.w	r0, r0, #1
 8006c22:	4770      	bx	lr
 8006c24:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8006c28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8006c2c:	327f      	adds	r2, #127	; 0x7f
 8006c2e:	bfc2      	ittt	gt
 8006c30:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8006c34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8006c38:	4770      	bxgt	lr
 8006c3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006c3e:	f04f 0300 	mov.w	r3, #0
 8006c42:	3a01      	subs	r2, #1
 8006c44:	e737      	b.n	8006ab6 <__aeabi_fmul+0x92>
 8006c46:	f092 0f00 	teq	r2, #0
 8006c4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8006c4e:	bf02      	ittt	eq
 8006c50:	0040      	lsleq	r0, r0, #1
 8006c52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8006c56:	3a01      	subeq	r2, #1
 8006c58:	d0f9      	beq.n	8006c4e <__aeabi_fdiv+0xc2>
 8006c5a:	ea40 000c 	orr.w	r0, r0, ip
 8006c5e:	f093 0f00 	teq	r3, #0
 8006c62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8006c66:	bf02      	ittt	eq
 8006c68:	0049      	lsleq	r1, r1, #1
 8006c6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8006c6e:	3b01      	subeq	r3, #1
 8006c70:	d0f9      	beq.n	8006c66 <__aeabi_fdiv+0xda>
 8006c72:	ea41 010c 	orr.w	r1, r1, ip
 8006c76:	e795      	b.n	8006ba4 <__aeabi_fdiv+0x18>
 8006c78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8006c7c:	ea92 0f0c 	teq	r2, ip
 8006c80:	d108      	bne.n	8006c94 <__aeabi_fdiv+0x108>
 8006c82:	0242      	lsls	r2, r0, #9
 8006c84:	f47f af7d 	bne.w	8006b82 <__aeabi_fmul+0x15e>
 8006c88:	ea93 0f0c 	teq	r3, ip
 8006c8c:	f47f af70 	bne.w	8006b70 <__aeabi_fmul+0x14c>
 8006c90:	4608      	mov	r0, r1
 8006c92:	e776      	b.n	8006b82 <__aeabi_fmul+0x15e>
 8006c94:	ea93 0f0c 	teq	r3, ip
 8006c98:	d104      	bne.n	8006ca4 <__aeabi_fdiv+0x118>
 8006c9a:	024b      	lsls	r3, r1, #9
 8006c9c:	f43f af4c 	beq.w	8006b38 <__aeabi_fmul+0x114>
 8006ca0:	4608      	mov	r0, r1
 8006ca2:	e76e      	b.n	8006b82 <__aeabi_fmul+0x15e>
 8006ca4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8006ca8:	bf18      	it	ne
 8006caa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8006cae:	d1ca      	bne.n	8006c46 <__aeabi_fdiv+0xba>
 8006cb0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8006cb4:	f47f af5c 	bne.w	8006b70 <__aeabi_fmul+0x14c>
 8006cb8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8006cbc:	f47f af3c 	bne.w	8006b38 <__aeabi_fmul+0x114>
 8006cc0:	e75f      	b.n	8006b82 <__aeabi_fmul+0x15e>
 8006cc2:	bf00      	nop

08006cc4 <selfrel_offset31>:
 8006cc4:	6803      	ldr	r3, [r0, #0]
 8006cc6:	005a      	lsls	r2, r3, #1
 8006cc8:	bf4c      	ite	mi
 8006cca:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006cce:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8006cd2:	4418      	add	r0, r3
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop

08006cd8 <search_EIT_table>:
 8006cd8:	b361      	cbz	r1, 8006d34 <search_EIT_table+0x5c>
 8006cda:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cde:	f101 3aff 	add.w	sl, r1, #4294967295
 8006ce2:	4690      	mov	r8, r2
 8006ce4:	4606      	mov	r6, r0
 8006ce6:	46d1      	mov	r9, sl
 8006ce8:	2700      	movs	r7, #0
 8006cea:	eb07 0409 	add.w	r4, r7, r9
 8006cee:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8006cf2:	1064      	asrs	r4, r4, #1
 8006cf4:	00e5      	lsls	r5, r4, #3
 8006cf6:	1971      	adds	r1, r6, r5
 8006cf8:	4608      	mov	r0, r1
 8006cfa:	f7ff ffe3 	bl	8006cc4 <selfrel_offset31>
 8006cfe:	45a2      	cmp	sl, r4
 8006d00:	4683      	mov	fp, r0
 8006d02:	f105 0008 	add.w	r0, r5, #8
 8006d06:	4430      	add	r0, r6
 8006d08:	d009      	beq.n	8006d1e <search_EIT_table+0x46>
 8006d0a:	f7ff ffdb 	bl	8006cc4 <selfrel_offset31>
 8006d0e:	45c3      	cmp	fp, r8
 8006d10:	f100 30ff 	add.w	r0, r0, #4294967295
 8006d14:	d805      	bhi.n	8006d22 <search_EIT_table+0x4a>
 8006d16:	4540      	cmp	r0, r8
 8006d18:	d209      	bcs.n	8006d2e <search_EIT_table+0x56>
 8006d1a:	1c67      	adds	r7, r4, #1
 8006d1c:	e7e5      	b.n	8006cea <search_EIT_table+0x12>
 8006d1e:	45c3      	cmp	fp, r8
 8006d20:	d905      	bls.n	8006d2e <search_EIT_table+0x56>
 8006d22:	42a7      	cmp	r7, r4
 8006d24:	d002      	beq.n	8006d2c <search_EIT_table+0x54>
 8006d26:	f104 39ff 	add.w	r9, r4, #4294967295
 8006d2a:	e7de      	b.n	8006cea <search_EIT_table+0x12>
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	4608      	mov	r0, r1
 8006d30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d34:	4608      	mov	r0, r1
 8006d36:	4770      	bx	lr

08006d38 <__gnu_unwind_get_pr_addr>:
 8006d38:	2801      	cmp	r0, #1
 8006d3a:	d007      	beq.n	8006d4c <__gnu_unwind_get_pr_addr+0x14>
 8006d3c:	2802      	cmp	r0, #2
 8006d3e:	d007      	beq.n	8006d50 <__gnu_unwind_get_pr_addr+0x18>
 8006d40:	4b04      	ldr	r3, [pc, #16]	; (8006d54 <__gnu_unwind_get_pr_addr+0x1c>)
 8006d42:	2800      	cmp	r0, #0
 8006d44:	bf0c      	ite	eq
 8006d46:	4618      	moveq	r0, r3
 8006d48:	2000      	movne	r0, #0
 8006d4a:	4770      	bx	lr
 8006d4c:	4802      	ldr	r0, [pc, #8]	; (8006d58 <__gnu_unwind_get_pr_addr+0x20>)
 8006d4e:	4770      	bx	lr
 8006d50:	4802      	ldr	r0, [pc, #8]	; (8006d5c <__gnu_unwind_get_pr_addr+0x24>)
 8006d52:	4770      	bx	lr
 8006d54:	08007449 	.word	0x08007449
 8006d58:	0800744d 	.word	0x0800744d
 8006d5c:	08007451 	.word	0x08007451

08006d60 <get_eit_entry>:
 8006d60:	b530      	push	{r4, r5, lr}
 8006d62:	4b25      	ldr	r3, [pc, #148]	; (8006df8 <get_eit_entry+0x98>)
 8006d64:	b083      	sub	sp, #12
 8006d66:	4604      	mov	r4, r0
 8006d68:	1e8d      	subs	r5, r1, #2
 8006d6a:	b373      	cbz	r3, 8006dca <get_eit_entry+0x6a>
 8006d6c:	a901      	add	r1, sp, #4
 8006d6e:	4628      	mov	r0, r5
 8006d70:	f3af 8000 	nop.w
 8006d74:	b318      	cbz	r0, 8006dbe <get_eit_entry+0x5e>
 8006d76:	9901      	ldr	r1, [sp, #4]
 8006d78:	462a      	mov	r2, r5
 8006d7a:	f7ff ffad 	bl	8006cd8 <search_EIT_table>
 8006d7e:	4601      	mov	r1, r0
 8006d80:	b1e8      	cbz	r0, 8006dbe <get_eit_entry+0x5e>
 8006d82:	f7ff ff9f 	bl	8006cc4 <selfrel_offset31>
 8006d86:	684b      	ldr	r3, [r1, #4]
 8006d88:	64a0      	str	r0, [r4, #72]	; 0x48
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d011      	beq.n	8006db2 <get_eit_entry+0x52>
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	db22      	blt.n	8006dd8 <get_eit_entry+0x78>
 8006d92:	1d08      	adds	r0, r1, #4
 8006d94:	f7ff ff96 	bl	8006cc4 <selfrel_offset31>
 8006d98:	2300      	movs	r3, #0
 8006d9a:	64e0      	str	r0, [r4, #76]	; 0x4c
 8006d9c:	6523      	str	r3, [r4, #80]	; 0x50
 8006d9e:	6803      	ldr	r3, [r0, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	db1e      	blt.n	8006de2 <get_eit_entry+0x82>
 8006da4:	f7ff ff8e 	bl	8006cc4 <selfrel_offset31>
 8006da8:	2300      	movs	r3, #0
 8006daa:	6120      	str	r0, [r4, #16]
 8006dac:	4618      	mov	r0, r3
 8006dae:	b003      	add	sp, #12
 8006db0:	bd30      	pop	{r4, r5, pc}
 8006db2:	2305      	movs	r3, #5
 8006db4:	2200      	movs	r2, #0
 8006db6:	4618      	mov	r0, r3
 8006db8:	6122      	str	r2, [r4, #16]
 8006dba:	b003      	add	sp, #12
 8006dbc:	bd30      	pop	{r4, r5, pc}
 8006dbe:	2309      	movs	r3, #9
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	6122      	str	r2, [r4, #16]
 8006dc6:	b003      	add	sp, #12
 8006dc8:	bd30      	pop	{r4, r5, pc}
 8006dca:	4b0c      	ldr	r3, [pc, #48]	; (8006dfc <get_eit_entry+0x9c>)
 8006dcc:	490c      	ldr	r1, [pc, #48]	; (8006e00 <get_eit_entry+0xa0>)
 8006dce:	4618      	mov	r0, r3
 8006dd0:	1ac9      	subs	r1, r1, r3
 8006dd2:	10c9      	asrs	r1, r1, #3
 8006dd4:	9101      	str	r1, [sp, #4]
 8006dd6:	e7cf      	b.n	8006d78 <get_eit_entry+0x18>
 8006dd8:	2301      	movs	r3, #1
 8006dda:	1d08      	adds	r0, r1, #4
 8006ddc:	64e0      	str	r0, [r4, #76]	; 0x4c
 8006dde:	6523      	str	r3, [r4, #80]	; 0x50
 8006de0:	e7dd      	b.n	8006d9e <get_eit_entry+0x3e>
 8006de2:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8006de6:	f7ff ffa7 	bl	8006d38 <__gnu_unwind_get_pr_addr>
 8006dea:	2800      	cmp	r0, #0
 8006dec:	6120      	str	r0, [r4, #16]
 8006dee:	bf14      	ite	ne
 8006df0:	2300      	movne	r3, #0
 8006df2:	2309      	moveq	r3, #9
 8006df4:	e7da      	b.n	8006dac <get_eit_entry+0x4c>
 8006df6:	bf00      	nop
 8006df8:	00000000 	.word	0x00000000
 8006dfc:	0800e048 	.word	0x0800e048
 8006e00:	0800e1c8 	.word	0x0800e1c8

08006e04 <restore_non_core_regs>:
 8006e04:	6803      	ldr	r3, [r0, #0]
 8006e06:	b510      	push	{r4, lr}
 8006e08:	07da      	lsls	r2, r3, #31
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	d406      	bmi.n	8006e1c <restore_non_core_regs+0x18>
 8006e0e:	079b      	lsls	r3, r3, #30
 8006e10:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8006e14:	d509      	bpl.n	8006e2a <restore_non_core_regs+0x26>
 8006e16:	f000 fc57 	bl	80076c8 <__gnu_Unwind_Restore_VFP_D>
 8006e1a:	6823      	ldr	r3, [r4, #0]
 8006e1c:	0759      	lsls	r1, r3, #29
 8006e1e:	d509      	bpl.n	8006e34 <restore_non_core_regs+0x30>
 8006e20:	071a      	lsls	r2, r3, #28
 8006e22:	d50e      	bpl.n	8006e42 <restore_non_core_regs+0x3e>
 8006e24:	06db      	lsls	r3, r3, #27
 8006e26:	d513      	bpl.n	8006e50 <restore_non_core_regs+0x4c>
 8006e28:	bd10      	pop	{r4, pc}
 8006e2a:	f000 fc45 	bl	80076b8 <__gnu_Unwind_Restore_VFP>
 8006e2e:	6823      	ldr	r3, [r4, #0]
 8006e30:	0759      	lsls	r1, r3, #29
 8006e32:	d4f5      	bmi.n	8006e20 <restore_non_core_regs+0x1c>
 8006e34:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006e38:	f000 fc4e 	bl	80076d8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8006e3c:	6823      	ldr	r3, [r4, #0]
 8006e3e:	071a      	lsls	r2, r3, #28
 8006e40:	d4f0      	bmi.n	8006e24 <restore_non_core_regs+0x20>
 8006e42:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8006e46:	f000 fc4f 	bl	80076e8 <__gnu_Unwind_Restore_WMMXD>
 8006e4a:	6823      	ldr	r3, [r4, #0]
 8006e4c:	06db      	lsls	r3, r3, #27
 8006e4e:	d4eb      	bmi.n	8006e28 <restore_non_core_regs+0x24>
 8006e50:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8006e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e58:	f000 bc8a 	b.w	8007770 <__gnu_Unwind_Restore_WMMXC>

08006e5c <_Unwind_decode_typeinfo_ptr.isra.0>:
 8006e5c:	6803      	ldr	r3, [r0, #0]
 8006e5e:	b103      	cbz	r3, 8006e62 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8006e60:	4403      	add	r3, r0
 8006e62:	4618      	mov	r0, r3
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop

08006e68 <__gnu_unwind_24bit.isra.1>:
 8006e68:	2009      	movs	r0, #9
 8006e6a:	4770      	bx	lr

08006e6c <_Unwind_DebugHook>:
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop

08006e70 <unwind_phase2>:
 8006e70:	b570      	push	{r4, r5, r6, lr}
 8006e72:	4604      	mov	r4, r0
 8006e74:	460d      	mov	r5, r1
 8006e76:	e008      	b.n	8006e8a <unwind_phase2+0x1a>
 8006e78:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8006e7a:	6923      	ldr	r3, [r4, #16]
 8006e7c:	6162      	str	r2, [r4, #20]
 8006e7e:	4621      	mov	r1, r4
 8006e80:	462a      	mov	r2, r5
 8006e82:	2001      	movs	r0, #1
 8006e84:	4798      	blx	r3
 8006e86:	2808      	cmp	r0, #8
 8006e88:	d108      	bne.n	8006e9c <unwind_phase2+0x2c>
 8006e8a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	f7ff ff67 	bl	8006d60 <get_eit_entry>
 8006e92:	4606      	mov	r6, r0
 8006e94:	2800      	cmp	r0, #0
 8006e96:	d0ef      	beq.n	8006e78 <unwind_phase2+0x8>
 8006e98:	f004 fbe6 	bl	800b668 <abort>
 8006e9c:	2807      	cmp	r0, #7
 8006e9e:	d1fb      	bne.n	8006e98 <unwind_phase2+0x28>
 8006ea0:	4630      	mov	r0, r6
 8006ea2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8006ea4:	f7ff ffe2 	bl	8006e6c <_Unwind_DebugHook>
 8006ea8:	1d28      	adds	r0, r5, #4
 8006eaa:	f000 fbf9 	bl	80076a0 <__restore_core_regs>
 8006eae:	bf00      	nop

08006eb0 <unwind_phase2_forced>:
 8006eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb4:	4605      	mov	r5, r0
 8006eb6:	2700      	movs	r7, #0
 8006eb8:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8006ebc:	ac03      	add	r4, sp, #12
 8006ebe:	1d0e      	adds	r6, r1, #4
 8006ec0:	4692      	mov	sl, r2
 8006ec2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006ec4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ec6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006ec8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006ecc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ece:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8006ed2:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8006ed6:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8006eda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006ede:	ac02      	add	r4, sp, #8
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006ee4:	6027      	str	r7, [r4, #0]
 8006ee6:	f7ff ff3b 	bl	8006d60 <get_eit_entry>
 8006eea:	f1ba 0f00 	cmp.w	sl, #0
 8006eee:	4607      	mov	r7, r0
 8006ef0:	bf14      	ite	ne
 8006ef2:	260a      	movne	r6, #10
 8006ef4:	2609      	moveq	r6, #9
 8006ef6:	b17f      	cbz	r7, 8006f18 <unwind_phase2_forced+0x68>
 8006ef8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006efa:	f046 0110 	orr.w	r1, r6, #16
 8006efe:	e88d 0210 	stmia.w	sp, {r4, r9}
 8006f02:	462a      	mov	r2, r5
 8006f04:	6463      	str	r3, [r4, #68]	; 0x44
 8006f06:	2001      	movs	r0, #1
 8006f08:	462b      	mov	r3, r5
 8006f0a:	47c0      	blx	r8
 8006f0c:	bb78      	cbnz	r0, 8006f6e <unwind_phase2_forced+0xbe>
 8006f0e:	4638      	mov	r0, r7
 8006f10:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8006f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f1a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006f1e:	616b      	str	r3, [r5, #20]
 8006f20:	4621      	mov	r1, r4
 8006f22:	a87a      	add	r0, sp, #488	; 0x1e8
 8006f24:	f004 fe3b 	bl	800bb9e <memcpy>
 8006f28:	692b      	ldr	r3, [r5, #16]
 8006f2a:	aa7a      	add	r2, sp, #488	; 0x1e8
 8006f2c:	4629      	mov	r1, r5
 8006f2e:	4630      	mov	r0, r6
 8006f30:	4798      	blx	r3
 8006f32:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8006f34:	4682      	mov	sl, r0
 8006f36:	e88d 0210 	stmia.w	sp, {r4, r9}
 8006f3a:	4631      	mov	r1, r6
 8006f3c:	6463      	str	r3, [r4, #68]	; 0x44
 8006f3e:	462a      	mov	r2, r5
 8006f40:	462b      	mov	r3, r5
 8006f42:	2001      	movs	r0, #1
 8006f44:	47c0      	blx	r8
 8006f46:	b990      	cbnz	r0, 8006f6e <unwind_phase2_forced+0xbe>
 8006f48:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006f4c:	a97a      	add	r1, sp, #488	; 0x1e8
 8006f4e:	4620      	mov	r0, r4
 8006f50:	f004 fe25 	bl	800bb9e <memcpy>
 8006f54:	f1ba 0f08 	cmp.w	sl, #8
 8006f58:	d106      	bne.n	8006f68 <unwind_phase2_forced+0xb8>
 8006f5a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	f7ff feff 	bl	8006d60 <get_eit_entry>
 8006f62:	2609      	movs	r6, #9
 8006f64:	4607      	mov	r7, r0
 8006f66:	e7c6      	b.n	8006ef6 <unwind_phase2_forced+0x46>
 8006f68:	f1ba 0f07 	cmp.w	sl, #7
 8006f6c:	d005      	beq.n	8006f7a <unwind_phase2_forced+0xca>
 8006f6e:	2709      	movs	r7, #9
 8006f70:	4638      	mov	r0, r7
 8006f72:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8006f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f7a:	4638      	mov	r0, r7
 8006f7c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006f7e:	f7ff ff75 	bl	8006e6c <_Unwind_DebugHook>
 8006f82:	a803      	add	r0, sp, #12
 8006f84:	f000 fb8c 	bl	80076a0 <__restore_core_regs>

08006f88 <_Unwind_GetCFA>:
 8006f88:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8006f8a:	4770      	bx	lr

08006f8c <__gnu_Unwind_RaiseException>:
 8006f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f8e:	f04f 3eff 	mov.w	lr, #4294967295
 8006f92:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8006f94:	b0f9      	sub	sp, #484	; 0x1e4
 8006f96:	640b      	str	r3, [r1, #64]	; 0x40
 8006f98:	1d0e      	adds	r6, r1, #4
 8006f9a:	ad01      	add	r5, sp, #4
 8006f9c:	460f      	mov	r7, r1
 8006f9e:	4604      	mov	r4, r0
 8006fa0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006fa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006fa4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006fa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006fa8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006faa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006fac:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8006fb0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8006fb4:	f8cd e000 	str.w	lr, [sp]
 8006fb8:	e006      	b.n	8006fc8 <__gnu_Unwind_RaiseException+0x3c>
 8006fba:	6923      	ldr	r3, [r4, #16]
 8006fbc:	466a      	mov	r2, sp
 8006fbe:	4621      	mov	r1, r4
 8006fc0:	4798      	blx	r3
 8006fc2:	2808      	cmp	r0, #8
 8006fc4:	4605      	mov	r5, r0
 8006fc6:	d108      	bne.n	8006fda <__gnu_Unwind_RaiseException+0x4e>
 8006fc8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006fca:	4620      	mov	r0, r4
 8006fcc:	f7ff fec8 	bl	8006d60 <get_eit_entry>
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	d0f2      	beq.n	8006fba <__gnu_Unwind_RaiseException+0x2e>
 8006fd4:	2009      	movs	r0, #9
 8006fd6:	b079      	add	sp, #484	; 0x1e4
 8006fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fda:	4668      	mov	r0, sp
 8006fdc:	f7ff ff12 	bl	8006e04 <restore_non_core_regs>
 8006fe0:	2d06      	cmp	r5, #6
 8006fe2:	d1f7      	bne.n	8006fd4 <__gnu_Unwind_RaiseException+0x48>
 8006fe4:	4639      	mov	r1, r7
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	f7ff ff42 	bl	8006e70 <unwind_phase2>

08006fec <__gnu_Unwind_ForcedUnwind>:
 8006fec:	b430      	push	{r4, r5}
 8006fee:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8006ff0:	60c1      	str	r1, [r0, #12]
 8006ff2:	6182      	str	r2, [r0, #24]
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	641d      	str	r5, [r3, #64]	; 0x40
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	bc30      	pop	{r4, r5}
 8006ffc:	e758      	b.n	8006eb0 <unwind_phase2_forced>
 8006ffe:	bf00      	nop

08007000 <__gnu_Unwind_Resume>:
 8007000:	b570      	push	{r4, r5, r6, lr}
 8007002:	6943      	ldr	r3, [r0, #20]
 8007004:	68c6      	ldr	r6, [r0, #12]
 8007006:	640b      	str	r3, [r1, #64]	; 0x40
 8007008:	b126      	cbz	r6, 8007014 <__gnu_Unwind_Resume+0x14>
 800700a:	2201      	movs	r2, #1
 800700c:	f7ff ff50 	bl	8006eb0 <unwind_phase2_forced>
 8007010:	f004 fb2a 	bl	800b668 <abort>
 8007014:	6903      	ldr	r3, [r0, #16]
 8007016:	460a      	mov	r2, r1
 8007018:	4604      	mov	r4, r0
 800701a:	460d      	mov	r5, r1
 800701c:	4601      	mov	r1, r0
 800701e:	2002      	movs	r0, #2
 8007020:	4798      	blx	r3
 8007022:	2807      	cmp	r0, #7
 8007024:	d007      	beq.n	8007036 <__gnu_Unwind_Resume+0x36>
 8007026:	2808      	cmp	r0, #8
 8007028:	d103      	bne.n	8007032 <__gnu_Unwind_Resume+0x32>
 800702a:	4629      	mov	r1, r5
 800702c:	4620      	mov	r0, r4
 800702e:	f7ff ff1f 	bl	8006e70 <unwind_phase2>
 8007032:	f004 fb19 	bl	800b668 <abort>
 8007036:	4630      	mov	r0, r6
 8007038:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800703a:	f7ff ff17 	bl	8006e6c <_Unwind_DebugHook>
 800703e:	1d28      	adds	r0, r5, #4
 8007040:	f000 fb2e 	bl	80076a0 <__restore_core_regs>

08007044 <__gnu_Unwind_Resume_or_Rethrow>:
 8007044:	68c2      	ldr	r2, [r0, #12]
 8007046:	b12a      	cbz	r2, 8007054 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 8007048:	b410      	push	{r4}
 800704a:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 800704c:	2200      	movs	r2, #0
 800704e:	640c      	str	r4, [r1, #64]	; 0x40
 8007050:	bc10      	pop	{r4}
 8007052:	e72d      	b.n	8006eb0 <unwind_phase2_forced>
 8007054:	e79a      	b.n	8006f8c <__gnu_Unwind_RaiseException>
 8007056:	bf00      	nop

08007058 <_Unwind_Complete>:
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop

0800705c <_Unwind_DeleteException>:
 800705c:	6883      	ldr	r3, [r0, #8]
 800705e:	b113      	cbz	r3, 8007066 <_Unwind_DeleteException+0xa>
 8007060:	4601      	mov	r1, r0
 8007062:	2001      	movs	r0, #1
 8007064:	4718      	bx	r3
 8007066:	4770      	bx	lr

08007068 <_Unwind_VRS_Get>:
 8007068:	b500      	push	{lr}
 800706a:	2904      	cmp	r1, #4
 800706c:	d807      	bhi.n	800707e <_Unwind_VRS_Get+0x16>
 800706e:	e8df f001 	tbb	[pc, r1]
 8007072:	0903      	.short	0x0903
 8007074:	0906      	.short	0x0906
 8007076:	09          	.byte	0x09
 8007077:	00          	.byte	0x00
 8007078:	b90b      	cbnz	r3, 800707e <_Unwind_VRS_Get+0x16>
 800707a:	2a0f      	cmp	r2, #15
 800707c:	d905      	bls.n	800708a <_Unwind_VRS_Get+0x22>
 800707e:	2002      	movs	r0, #2
 8007080:	f85d fb04 	ldr.w	pc, [sp], #4
 8007084:	2001      	movs	r0, #1
 8007086:	f85d fb04 	ldr.w	pc, [sp], #4
 800708a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800708e:	6852      	ldr	r2, [r2, #4]
 8007090:	4618      	mov	r0, r3
 8007092:	9b01      	ldr	r3, [sp, #4]
 8007094:	601a      	str	r2, [r3, #0]
 8007096:	f85d fb04 	ldr.w	pc, [sp], #4
 800709a:	bf00      	nop

0800709c <_Unwind_GetGR>:
 800709c:	2300      	movs	r3, #0
 800709e:	b510      	push	{r4, lr}
 80070a0:	b084      	sub	sp, #16
 80070a2:	ac03      	add	r4, sp, #12
 80070a4:	460a      	mov	r2, r1
 80070a6:	9400      	str	r4, [sp, #0]
 80070a8:	4619      	mov	r1, r3
 80070aa:	f7ff ffdd 	bl	8007068 <_Unwind_VRS_Get>
 80070ae:	9803      	ldr	r0, [sp, #12]
 80070b0:	b004      	add	sp, #16
 80070b2:	bd10      	pop	{r4, pc}

080070b4 <_Unwind_VRS_Set>:
 80070b4:	b500      	push	{lr}
 80070b6:	2904      	cmp	r1, #4
 80070b8:	d807      	bhi.n	80070ca <_Unwind_VRS_Set+0x16>
 80070ba:	e8df f001 	tbb	[pc, r1]
 80070be:	0903      	.short	0x0903
 80070c0:	0906      	.short	0x0906
 80070c2:	09          	.byte	0x09
 80070c3:	00          	.byte	0x00
 80070c4:	b90b      	cbnz	r3, 80070ca <_Unwind_VRS_Set+0x16>
 80070c6:	2a0f      	cmp	r2, #15
 80070c8:	d905      	bls.n	80070d6 <_Unwind_VRS_Set+0x22>
 80070ca:	2002      	movs	r0, #2
 80070cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80070d0:	2001      	movs	r0, #1
 80070d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80070d6:	9901      	ldr	r1, [sp, #4]
 80070d8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80070dc:	6809      	ldr	r1, [r1, #0]
 80070de:	4618      	mov	r0, r3
 80070e0:	6051      	str	r1, [r2, #4]
 80070e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80070e6:	bf00      	nop

080070e8 <_Unwind_SetGR>:
 80070e8:	2300      	movs	r3, #0
 80070ea:	b510      	push	{r4, lr}
 80070ec:	b084      	sub	sp, #16
 80070ee:	ac04      	add	r4, sp, #16
 80070f0:	f844 2d04 	str.w	r2, [r4, #-4]!
 80070f4:	9400      	str	r4, [sp, #0]
 80070f6:	460a      	mov	r2, r1
 80070f8:	4619      	mov	r1, r3
 80070fa:	f7ff ffdb 	bl	80070b4 <_Unwind_VRS_Set>
 80070fe:	b004      	add	sp, #16
 8007100:	bd10      	pop	{r4, pc}
 8007102:	bf00      	nop

08007104 <__gnu_Unwind_Backtrace>:
 8007104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007106:	f04f 3eff 	mov.w	lr, #4294967295
 800710a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800710c:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8007110:	6413      	str	r3, [r2, #64]	; 0x40
 8007112:	1d15      	adds	r5, r2, #4
 8007114:	ac17      	add	r4, sp, #92	; 0x5c
 8007116:	4607      	mov	r7, r0
 8007118:	460e      	mov	r6, r1
 800711a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800711c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800711e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007120:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007122:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007124:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007126:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800712a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800712e:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8007132:	e012      	b.n	800715a <__gnu_Unwind_Backtrace+0x56>
 8007134:	210c      	movs	r1, #12
 8007136:	a816      	add	r0, sp, #88	; 0x58
 8007138:	466a      	mov	r2, sp
 800713a:	f7ff ffd5 	bl	80070e8 <_Unwind_SetGR>
 800713e:	4631      	mov	r1, r6
 8007140:	a816      	add	r0, sp, #88	; 0x58
 8007142:	47b8      	blx	r7
 8007144:	b978      	cbnz	r0, 8007166 <__gnu_Unwind_Backtrace+0x62>
 8007146:	9b04      	ldr	r3, [sp, #16]
 8007148:	aa16      	add	r2, sp, #88	; 0x58
 800714a:	4669      	mov	r1, sp
 800714c:	2008      	movs	r0, #8
 800714e:	4798      	blx	r3
 8007150:	2805      	cmp	r0, #5
 8007152:	4604      	mov	r4, r0
 8007154:	d008      	beq.n	8007168 <__gnu_Unwind_Backtrace+0x64>
 8007156:	2809      	cmp	r0, #9
 8007158:	d005      	beq.n	8007166 <__gnu_Unwind_Backtrace+0x62>
 800715a:	9926      	ldr	r1, [sp, #152]	; 0x98
 800715c:	4668      	mov	r0, sp
 800715e:	f7ff fdff 	bl	8006d60 <get_eit_entry>
 8007162:	2800      	cmp	r0, #0
 8007164:	d0e6      	beq.n	8007134 <__gnu_Unwind_Backtrace+0x30>
 8007166:	2409      	movs	r4, #9
 8007168:	a816      	add	r0, sp, #88	; 0x58
 800716a:	f7ff fe4b 	bl	8006e04 <restore_non_core_regs>
 800716e:	4620      	mov	r0, r4
 8007170:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8007174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007176:	bf00      	nop

08007178 <__gnu_unwind_pr_common>:
 8007178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800717c:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 800717e:	4691      	mov	r9, r2
 8007180:	6822      	ldr	r2, [r4, #0]
 8007182:	b08b      	sub	sp, #44	; 0x2c
 8007184:	3404      	adds	r4, #4
 8007186:	460d      	mov	r5, r1
 8007188:	9207      	str	r2, [sp, #28]
 800718a:	9408      	str	r4, [sp, #32]
 800718c:	f000 0b03 	and.w	fp, r0, #3
 8007190:	461e      	mov	r6, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	d160      	bne.n	8007258 <__gnu_unwind_pr_common+0xe0>
 8007196:	2303      	movs	r3, #3
 8007198:	0212      	lsls	r2, r2, #8
 800719a:	9207      	str	r2, [sp, #28]
 800719c:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 80071a0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80071a4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80071a6:	f1bb 0f02 	cmp.w	fp, #2
 80071aa:	bf08      	it	eq
 80071ac:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80071ae:	f013 0301 	ands.w	r3, r3, #1
 80071b2:	d140      	bne.n	8007236 <__gnu_unwind_pr_common+0xbe>
 80071b4:	9301      	str	r3, [sp, #4]
 80071b6:	f000 0308 	and.w	r3, r0, #8
 80071ba:	9303      	str	r3, [sp, #12]
 80071bc:	f8d4 8000 	ldr.w	r8, [r4]
 80071c0:	f1b8 0f00 	cmp.w	r8, #0
 80071c4:	d039      	beq.n	800723a <__gnu_unwind_pr_common+0xc2>
 80071c6:	2e02      	cmp	r6, #2
 80071c8:	d043      	beq.n	8007252 <__gnu_unwind_pr_common+0xda>
 80071ca:	f8b4 8000 	ldrh.w	r8, [r4]
 80071ce:	8867      	ldrh	r7, [r4, #2]
 80071d0:	3404      	adds	r4, #4
 80071d2:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80071d4:	f027 0a01 	bic.w	sl, r7, #1
 80071d8:	210f      	movs	r1, #15
 80071da:	4648      	mov	r0, r9
 80071dc:	449a      	add	sl, r3
 80071de:	f7ff ff5d 	bl	800709c <_Unwind_GetGR>
 80071e2:	4582      	cmp	sl, r0
 80071e4:	d833      	bhi.n	800724e <__gnu_unwind_pr_common+0xd6>
 80071e6:	f028 0301 	bic.w	r3, r8, #1
 80071ea:	449a      	add	sl, r3
 80071ec:	4550      	cmp	r0, sl
 80071ee:	bf2c      	ite	cs
 80071f0:	2000      	movcs	r0, #0
 80071f2:	2001      	movcc	r0, #1
 80071f4:	007f      	lsls	r7, r7, #1
 80071f6:	f007 0702 	and.w	r7, r7, #2
 80071fa:	f008 0801 	and.w	r8, r8, #1
 80071fe:	ea47 0708 	orr.w	r7, r7, r8
 8007202:	2f01      	cmp	r7, #1
 8007204:	d03e      	beq.n	8007284 <__gnu_unwind_pr_common+0x10c>
 8007206:	d335      	bcc.n	8007274 <__gnu_unwind_pr_common+0xfc>
 8007208:	2f02      	cmp	r7, #2
 800720a:	d11c      	bne.n	8007246 <__gnu_unwind_pr_common+0xce>
 800720c:	6823      	ldr	r3, [r4, #0]
 800720e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007212:	9202      	str	r2, [sp, #8]
 8007214:	f1bb 0f00 	cmp.w	fp, #0
 8007218:	d176      	bne.n	8007308 <__gnu_unwind_pr_common+0x190>
 800721a:	b128      	cbz	r0, 8007228 <__gnu_unwind_pr_common+0xb0>
 800721c:	9903      	ldr	r1, [sp, #12]
 800721e:	2900      	cmp	r1, #0
 8007220:	d07e      	beq.n	8007320 <__gnu_unwind_pr_common+0x1a8>
 8007222:	2a00      	cmp	r2, #0
 8007224:	f000 80a6 	beq.w	8007374 <__gnu_unwind_pr_common+0x1fc>
 8007228:	2b00      	cmp	r3, #0
 800722a:	db77      	blt.n	800731c <__gnu_unwind_pr_common+0x1a4>
 800722c:	9b02      	ldr	r3, [sp, #8]
 800722e:	3301      	adds	r3, #1
 8007230:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8007234:	e7c2      	b.n	80071bc <__gnu_unwind_pr_common+0x44>
 8007236:	2300      	movs	r3, #0
 8007238:	9301      	str	r3, [sp, #4]
 800723a:	2e02      	cmp	r6, #2
 800723c:	dd3e      	ble.n	80072bc <__gnu_unwind_pr_common+0x144>
 800723e:	f7ff fe13 	bl	8006e68 <__gnu_unwind_24bit.isra.1>
 8007242:	2800      	cmp	r0, #0
 8007244:	d040      	beq.n	80072c8 <__gnu_unwind_pr_common+0x150>
 8007246:	2009      	movs	r0, #9
 8007248:	b00b      	add	sp, #44	; 0x2c
 800724a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800724e:	2000      	movs	r0, #0
 8007250:	e7d0      	b.n	80071f4 <__gnu_unwind_pr_common+0x7c>
 8007252:	6867      	ldr	r7, [r4, #4]
 8007254:	3408      	adds	r4, #8
 8007256:	e7bc      	b.n	80071d2 <__gnu_unwind_pr_common+0x5a>
 8007258:	2b02      	cmp	r3, #2
 800725a:	dca3      	bgt.n	80071a4 <__gnu_unwind_pr_common+0x2c>
 800725c:	2102      	movs	r1, #2
 800725e:	0c13      	lsrs	r3, r2, #16
 8007260:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8007264:	0412      	lsls	r2, r2, #16
 8007266:	b2db      	uxtb	r3, r3
 8007268:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800726c:	9207      	str	r2, [sp, #28]
 800726e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8007272:	e797      	b.n	80071a4 <__gnu_unwind_pr_common+0x2c>
 8007274:	f1bb 0f00 	cmp.w	fp, #0
 8007278:	d002      	beq.n	8007280 <__gnu_unwind_pr_common+0x108>
 800727a:	2800      	cmp	r0, #0
 800727c:	f040 80bd 	bne.w	80073fa <__gnu_unwind_pr_common+0x282>
 8007280:	3404      	adds	r4, #4
 8007282:	e79b      	b.n	80071bc <__gnu_unwind_pr_common+0x44>
 8007284:	f1bb 0f00 	cmp.w	fp, #0
 8007288:	d125      	bne.n	80072d6 <__gnu_unwind_pr_common+0x15e>
 800728a:	b1a8      	cbz	r0, 80072b8 <__gnu_unwind_pr_common+0x140>
 800728c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8007290:	1c99      	adds	r1, r3, #2
 8007292:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8007296:	d0d6      	beq.n	8007246 <__gnu_unwind_pr_common+0xce>
 8007298:	f105 0158 	add.w	r1, r5, #88	; 0x58
 800729c:	3301      	adds	r3, #1
 800729e:	9106      	str	r1, [sp, #24]
 80072a0:	f000 80a3 	beq.w	80073ea <__gnu_unwind_pr_common+0x272>
 80072a4:	1d20      	adds	r0, r4, #4
 80072a6:	f7ff fdd9 	bl	8006e5c <_Unwind_decode_typeinfo_ptr.isra.0>
 80072aa:	ab06      	add	r3, sp, #24
 80072ac:	4601      	mov	r1, r0
 80072ae:	4628      	mov	r0, r5
 80072b0:	f003 f9a2 	bl	800a5f8 <__cxa_type_match>
 80072b4:	2800      	cmp	r0, #0
 80072b6:	d177      	bne.n	80073a8 <__gnu_unwind_pr_common+0x230>
 80072b8:	3408      	adds	r4, #8
 80072ba:	e77f      	b.n	80071bc <__gnu_unwind_pr_common+0x44>
 80072bc:	a907      	add	r1, sp, #28
 80072be:	4648      	mov	r0, r9
 80072c0:	f000 faf0 	bl	80078a4 <__gnu_unwind_execute>
 80072c4:	2800      	cmp	r0, #0
 80072c6:	d1be      	bne.n	8007246 <__gnu_unwind_pr_common+0xce>
 80072c8:	9b01      	ldr	r3, [sp, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d15c      	bne.n	8007388 <__gnu_unwind_pr_common+0x210>
 80072ce:	2008      	movs	r0, #8
 80072d0:	b00b      	add	sp, #44	; 0x2c
 80072d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072d6:	210d      	movs	r1, #13
 80072d8:	4648      	mov	r0, r9
 80072da:	6a2f      	ldr	r7, [r5, #32]
 80072dc:	f7ff fede 	bl	800709c <_Unwind_GetGR>
 80072e0:	4287      	cmp	r7, r0
 80072e2:	d1e9      	bne.n	80072b8 <__gnu_unwind_pr_common+0x140>
 80072e4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80072e6:	429c      	cmp	r4, r3
 80072e8:	d1e6      	bne.n	80072b8 <__gnu_unwind_pr_common+0x140>
 80072ea:	4620      	mov	r0, r4
 80072ec:	f7ff fcea 	bl	8006cc4 <selfrel_offset31>
 80072f0:	210f      	movs	r1, #15
 80072f2:	4602      	mov	r2, r0
 80072f4:	4648      	mov	r0, r9
 80072f6:	f7ff fef7 	bl	80070e8 <_Unwind_SetGR>
 80072fa:	4648      	mov	r0, r9
 80072fc:	462a      	mov	r2, r5
 80072fe:	2100      	movs	r1, #0
 8007300:	f7ff fef2 	bl	80070e8 <_Unwind_SetGR>
 8007304:	2007      	movs	r0, #7
 8007306:	e79f      	b.n	8007248 <__gnu_unwind_pr_common+0xd0>
 8007308:	210d      	movs	r1, #13
 800730a:	4648      	mov	r0, r9
 800730c:	6a2f      	ldr	r7, [r5, #32]
 800730e:	f7ff fec5 	bl	800709c <_Unwind_GetGR>
 8007312:	4287      	cmp	r7, r0
 8007314:	d058      	beq.n	80073c8 <__gnu_unwind_pr_common+0x250>
 8007316:	6823      	ldr	r3, [r4, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	da87      	bge.n	800722c <__gnu_unwind_pr_common+0xb4>
 800731c:	3404      	adds	r4, #4
 800731e:	e785      	b.n	800722c <__gnu_unwind_pr_common+0xb4>
 8007320:	9b02      	ldr	r3, [sp, #8]
 8007322:	b33b      	cbz	r3, 8007374 <__gnu_unwind_pr_common+0x1fc>
 8007324:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8007328:	1d27      	adds	r7, r4, #4
 800732a:	f8cd b010 	str.w	fp, [sp, #16]
 800732e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007332:	46a3      	mov	fp, r4
 8007334:	f8dd a008 	ldr.w	sl, [sp, #8]
 8007338:	461c      	mov	r4, r3
 800733a:	9605      	str	r6, [sp, #20]
 800733c:	e002      	b.n	8007344 <__gnu_unwind_pr_common+0x1cc>
 800733e:	45b2      	cmp	sl, r6
 8007340:	46b0      	mov	r8, r6
 8007342:	d016      	beq.n	8007372 <__gnu_unwind_pr_common+0x1fa>
 8007344:	4638      	mov	r0, r7
 8007346:	9406      	str	r4, [sp, #24]
 8007348:	f7ff fd88 	bl	8006e5c <_Unwind_decode_typeinfo_ptr.isra.0>
 800734c:	ab06      	add	r3, sp, #24
 800734e:	4601      	mov	r1, r0
 8007350:	2200      	movs	r2, #0
 8007352:	4628      	mov	r0, r5
 8007354:	f003 f950 	bl	800a5f8 <__cxa_type_match>
 8007358:	f108 0601 	add.w	r6, r8, #1
 800735c:	3704      	adds	r7, #4
 800735e:	2800      	cmp	r0, #0
 8007360:	d0ed      	beq.n	800733e <__gnu_unwind_pr_common+0x1c6>
 8007362:	9b02      	ldr	r3, [sp, #8]
 8007364:	465c      	mov	r4, fp
 8007366:	4543      	cmp	r3, r8
 8007368:	f8dd b010 	ldr.w	fp, [sp, #16]
 800736c:	9e05      	ldr	r6, [sp, #20]
 800736e:	d1d2      	bne.n	8007316 <__gnu_unwind_pr_common+0x19e>
 8007370:	e000      	b.n	8007374 <__gnu_unwind_pr_common+0x1fc>
 8007372:	465c      	mov	r4, fp
 8007374:	4648      	mov	r0, r9
 8007376:	210d      	movs	r1, #13
 8007378:	f7ff fe90 	bl	800709c <_Unwind_GetGR>
 800737c:	9b06      	ldr	r3, [sp, #24]
 800737e:	6228      	str	r0, [r5, #32]
 8007380:	62ac      	str	r4, [r5, #40]	; 0x28
 8007382:	626b      	str	r3, [r5, #36]	; 0x24
 8007384:	2006      	movs	r0, #6
 8007386:	e75f      	b.n	8007248 <__gnu_unwind_pr_common+0xd0>
 8007388:	210f      	movs	r1, #15
 800738a:	4648      	mov	r0, r9
 800738c:	f7ff fe86 	bl	800709c <_Unwind_GetGR>
 8007390:	210e      	movs	r1, #14
 8007392:	4602      	mov	r2, r0
 8007394:	4648      	mov	r0, r9
 8007396:	f7ff fea7 	bl	80070e8 <_Unwind_SetGR>
 800739a:	4648      	mov	r0, r9
 800739c:	4a29      	ldr	r2, [pc, #164]	; (8007444 <__gnu_unwind_pr_common+0x2cc>)
 800739e:	210f      	movs	r1, #15
 80073a0:	f7ff fea2 	bl	80070e8 <_Unwind_SetGR>
 80073a4:	2007      	movs	r0, #7
 80073a6:	e74f      	b.n	8007248 <__gnu_unwind_pr_common+0xd0>
 80073a8:	4607      	mov	r7, r0
 80073aa:	210d      	movs	r1, #13
 80073ac:	4648      	mov	r0, r9
 80073ae:	f7ff fe75 	bl	800709c <_Unwind_GetGR>
 80073b2:	2f02      	cmp	r7, #2
 80073b4:	6228      	str	r0, [r5, #32]
 80073b6:	d11d      	bne.n	80073f4 <__gnu_unwind_pr_common+0x27c>
 80073b8:	462b      	mov	r3, r5
 80073ba:	9a06      	ldr	r2, [sp, #24]
 80073bc:	f843 2f2c 	str.w	r2, [r3, #44]!
 80073c0:	626b      	str	r3, [r5, #36]	; 0x24
 80073c2:	62ac      	str	r4, [r5, #40]	; 0x28
 80073c4:	2006      	movs	r0, #6
 80073c6:	e73f      	b.n	8007248 <__gnu_unwind_pr_common+0xd0>
 80073c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80073ca:	429c      	cmp	r4, r3
 80073cc:	d1a3      	bne.n	8007316 <__gnu_unwind_pr_common+0x19e>
 80073ce:	2204      	movs	r2, #4
 80073d0:	2700      	movs	r7, #0
 80073d2:	9902      	ldr	r1, [sp, #8]
 80073d4:	18a3      	adds	r3, r4, r2
 80073d6:	62a9      	str	r1, [r5, #40]	; 0x28
 80073d8:	62ef      	str	r7, [r5, #44]	; 0x2c
 80073da:	632a      	str	r2, [r5, #48]	; 0x30
 80073dc:	636b      	str	r3, [r5, #52]	; 0x34
 80073de:	6823      	ldr	r3, [r4, #0]
 80073e0:	42bb      	cmp	r3, r7
 80073e2:	db1d      	blt.n	8007420 <__gnu_unwind_pr_common+0x2a8>
 80073e4:	2301      	movs	r3, #1
 80073e6:	9301      	str	r3, [sp, #4]
 80073e8:	e720      	b.n	800722c <__gnu_unwind_pr_common+0xb4>
 80073ea:	4648      	mov	r0, r9
 80073ec:	210d      	movs	r1, #13
 80073ee:	f7ff fe55 	bl	800709c <_Unwind_GetGR>
 80073f2:	6228      	str	r0, [r5, #32]
 80073f4:	9b06      	ldr	r3, [sp, #24]
 80073f6:	626b      	str	r3, [r5, #36]	; 0x24
 80073f8:	e7e3      	b.n	80073c2 <__gnu_unwind_pr_common+0x24a>
 80073fa:	4620      	mov	r0, r4
 80073fc:	f7ff fc62 	bl	8006cc4 <selfrel_offset31>
 8007400:	3404      	adds	r4, #4
 8007402:	4606      	mov	r6, r0
 8007404:	63ac      	str	r4, [r5, #56]	; 0x38
 8007406:	4628      	mov	r0, r5
 8007408:	f003 f952 	bl	800a6b0 <__cxa_begin_cleanup>
 800740c:	2800      	cmp	r0, #0
 800740e:	f43f af1a 	beq.w	8007246 <__gnu_unwind_pr_common+0xce>
 8007412:	4648      	mov	r0, r9
 8007414:	4632      	mov	r2, r6
 8007416:	210f      	movs	r1, #15
 8007418:	f7ff fe66 	bl	80070e8 <_Unwind_SetGR>
 800741c:	2007      	movs	r0, #7
 800741e:	e713      	b.n	8007248 <__gnu_unwind_pr_common+0xd0>
 8007420:	4608      	mov	r0, r1
 8007422:	3001      	adds	r0, #1
 8007424:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8007428:	f7ff fc4c 	bl	8006cc4 <selfrel_offset31>
 800742c:	210f      	movs	r1, #15
 800742e:	4602      	mov	r2, r0
 8007430:	4648      	mov	r0, r9
 8007432:	f7ff fe59 	bl	80070e8 <_Unwind_SetGR>
 8007436:	4648      	mov	r0, r9
 8007438:	462a      	mov	r2, r5
 800743a:	4639      	mov	r1, r7
 800743c:	f7ff fe54 	bl	80070e8 <_Unwind_SetGR>
 8007440:	2007      	movs	r0, #7
 8007442:	e701      	b.n	8007248 <__gnu_unwind_pr_common+0xd0>
 8007444:	0800b08d 	.word	0x0800b08d

08007448 <__aeabi_unwind_cpp_pr0>:
 8007448:	2300      	movs	r3, #0
 800744a:	e695      	b.n	8007178 <__gnu_unwind_pr_common>

0800744c <__aeabi_unwind_cpp_pr1>:
 800744c:	2301      	movs	r3, #1
 800744e:	e693      	b.n	8007178 <__gnu_unwind_pr_common>

08007450 <__aeabi_unwind_cpp_pr2>:
 8007450:	2302      	movs	r3, #2
 8007452:	e691      	b.n	8007178 <__gnu_unwind_pr_common>

08007454 <_Unwind_VRS_Pop>:
 8007454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007456:	4604      	mov	r4, r0
 8007458:	b0c5      	sub	sp, #276	; 0x114
 800745a:	2904      	cmp	r1, #4
 800745c:	d80d      	bhi.n	800747a <_Unwind_VRS_Pop+0x26>
 800745e:	e8df f001 	tbb	[pc, r1]
 8007462:	0355      	.short	0x0355
 8007464:	310c      	.short	0x310c
 8007466:	0f          	.byte	0x0f
 8007467:	00          	.byte	0x00
 8007468:	2b01      	cmp	r3, #1
 800746a:	ea4f 4612 	mov.w	r6, r2, lsr #16
 800746e:	b295      	uxth	r5, r2
 8007470:	d164      	bne.n	800753c <_Unwind_VRS_Pop+0xe8>
 8007472:	1972      	adds	r2, r6, r5
 8007474:	2a10      	cmp	r2, #16
 8007476:	f240 809d 	bls.w	80075b4 <_Unwind_VRS_Pop+0x160>
 800747a:	2002      	movs	r0, #2
 800747c:	b045      	add	sp, #276	; 0x114
 800747e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1fa      	bne.n	800747a <_Unwind_VRS_Pop+0x26>
 8007484:	2a10      	cmp	r2, #16
 8007486:	d8f8      	bhi.n	800747a <_Unwind_VRS_Pop+0x26>
 8007488:	6823      	ldr	r3, [r4, #0]
 800748a:	06d8      	lsls	r0, r3, #27
 800748c:	f100 80c8 	bmi.w	8007620 <_Unwind_VRS_Pop+0x1cc>
 8007490:	ae22      	add	r6, sp, #136	; 0x88
 8007492:	4630      	mov	r0, r6
 8007494:	9201      	str	r2, [sp, #4]
 8007496:	2501      	movs	r5, #1
 8007498:	f000 f974 	bl	8007784 <__gnu_Unwind_Save_WMMXC>
 800749c:	2300      	movs	r3, #0
 800749e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80074a0:	9a01      	ldr	r2, [sp, #4]
 80074a2:	fa05 f103 	lsl.w	r1, r5, r3
 80074a6:	4211      	tst	r1, r2
 80074a8:	d003      	beq.n	80074b2 <_Unwind_VRS_Pop+0x5e>
 80074aa:	6801      	ldr	r1, [r0, #0]
 80074ac:	3004      	adds	r0, #4
 80074ae:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 80074b2:	3301      	adds	r3, #1
 80074b4:	2b04      	cmp	r3, #4
 80074b6:	d1f4      	bne.n	80074a2 <_Unwind_VRS_Pop+0x4e>
 80074b8:	63a0      	str	r0, [r4, #56]	; 0x38
 80074ba:	4630      	mov	r0, r6
 80074bc:	f000 f958 	bl	8007770 <__gnu_Unwind_Restore_WMMXC>
 80074c0:	2000      	movs	r0, #0
 80074c2:	e7db      	b.n	800747c <_Unwind_VRS_Pop+0x28>
 80074c4:	2b03      	cmp	r3, #3
 80074c6:	d1d8      	bne.n	800747a <_Unwind_VRS_Pop+0x26>
 80074c8:	0c15      	lsrs	r5, r2, #16
 80074ca:	b297      	uxth	r7, r2
 80074cc:	19eb      	adds	r3, r5, r7
 80074ce:	2b10      	cmp	r3, #16
 80074d0:	d8d3      	bhi.n	800747a <_Unwind_VRS_Pop+0x26>
 80074d2:	6823      	ldr	r3, [r4, #0]
 80074d4:	071e      	lsls	r6, r3, #28
 80074d6:	f100 80b7 	bmi.w	8007648 <_Unwind_VRS_Pop+0x1f4>
 80074da:	ae22      	add	r6, sp, #136	; 0x88
 80074dc:	4630      	mov	r0, r6
 80074de:	f000 f925 	bl	800772c <__gnu_Unwind_Save_WMMXD>
 80074e2:	00ed      	lsls	r5, r5, #3
 80074e4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80074e6:	b15f      	cbz	r7, 8007500 <_Unwind_VRS_Pop+0xac>
 80074e8:	3d04      	subs	r5, #4
 80074ea:	4603      	mov	r3, r0
 80074ec:	1971      	adds	r1, r6, r5
 80074ee:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 80074f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80074f6:	4283      	cmp	r3, r0
 80074f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80074fc:	d1f9      	bne.n	80074f2 <_Unwind_VRS_Pop+0x9e>
 80074fe:	4618      	mov	r0, r3
 8007500:	63a0      	str	r0, [r4, #56]	; 0x38
 8007502:	4630      	mov	r0, r6
 8007504:	f000 f8f0 	bl	80076e8 <__gnu_Unwind_Restore_WMMXD>
 8007508:	2000      	movs	r0, #0
 800750a:	e7b7      	b.n	800747c <_Unwind_VRS_Pop+0x28>
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1b4      	bne.n	800747a <_Unwind_VRS_Pop+0x26>
 8007510:	2701      	movs	r7, #1
 8007512:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8007514:	b296      	uxth	r6, r2
 8007516:	1d20      	adds	r0, r4, #4
 8007518:	fa07 f103 	lsl.w	r1, r7, r3
 800751c:	4231      	tst	r1, r6
 800751e:	f103 0301 	add.w	r3, r3, #1
 8007522:	d002      	beq.n	800752a <_Unwind_VRS_Pop+0xd6>
 8007524:	6829      	ldr	r1, [r5, #0]
 8007526:	3504      	adds	r5, #4
 8007528:	6001      	str	r1, [r0, #0]
 800752a:	2b10      	cmp	r3, #16
 800752c:	f100 0004 	add.w	r0, r0, #4
 8007530:	d1f2      	bne.n	8007518 <_Unwind_VRS_Pop+0xc4>
 8007532:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8007536:	d13b      	bne.n	80075b0 <_Unwind_VRS_Pop+0x15c>
 8007538:	63a5      	str	r5, [r4, #56]	; 0x38
 800753a:	e79f      	b.n	800747c <_Unwind_VRS_Pop+0x28>
 800753c:	2b05      	cmp	r3, #5
 800753e:	d19c      	bne.n	800747a <_Unwind_VRS_Pop+0x26>
 8007540:	1977      	adds	r7, r6, r5
 8007542:	2f20      	cmp	r7, #32
 8007544:	d899      	bhi.n	800747a <_Unwind_VRS_Pop+0x26>
 8007546:	2e0f      	cmp	r6, #15
 8007548:	d966      	bls.n	8007618 <_Unwind_VRS_Pop+0x1c4>
 800754a:	462f      	mov	r7, r5
 800754c:	2d00      	cmp	r5, #0
 800754e:	d13a      	bne.n	80075c6 <_Unwind_VRS_Pop+0x172>
 8007550:	462a      	mov	r2, r5
 8007552:	2700      	movs	r7, #0
 8007554:	2a00      	cmp	r2, #0
 8007556:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007558:	dd72      	ble.n	8007640 <_Unwind_VRS_Pop+0x1ec>
 800755a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800755e:	4601      	mov	r1, r0
 8007560:	a844      	add	r0, sp, #272	; 0x110
 8007562:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8007566:	388c      	subs	r0, #140	; 0x8c
 8007568:	f851 5b04 	ldr.w	r5, [r1], #4
 800756c:	4291      	cmp	r1, r2
 800756e:	f840 5f04 	str.w	r5, [r0, #4]!
 8007572:	d1f9      	bne.n	8007568 <_Unwind_VRS_Pop+0x114>
 8007574:	4608      	mov	r0, r1
 8007576:	b197      	cbz	r7, 800759e <_Unwind_VRS_Pop+0x14a>
 8007578:	2e10      	cmp	r6, #16
 800757a:	4632      	mov	r2, r6
 800757c:	bf38      	it	cc
 800757e:	2210      	movcc	r2, #16
 8007580:	a944      	add	r1, sp, #272	; 0x110
 8007582:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8007586:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 800758a:	0079      	lsls	r1, r7, #1
 800758c:	3a04      	subs	r2, #4
 800758e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007592:	f850 5b04 	ldr.w	r5, [r0], #4
 8007596:	4288      	cmp	r0, r1
 8007598:	f842 5f04 	str.w	r5, [r2, #4]!
 800759c:	d1f9      	bne.n	8007592 <_Unwind_VRS_Pop+0x13e>
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d048      	beq.n	8007634 <_Unwind_VRS_Pop+0x1e0>
 80075a2:	2e0f      	cmp	r6, #15
 80075a4:	63a1      	str	r1, [r4, #56]	; 0x38
 80075a6:	d933      	bls.n	8007610 <_Unwind_VRS_Pop+0x1bc>
 80075a8:	b117      	cbz	r7, 80075b0 <_Unwind_VRS_Pop+0x15c>
 80075aa:	a802      	add	r0, sp, #8
 80075ac:	f000 f894 	bl	80076d8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80075b0:	2000      	movs	r0, #0
 80075b2:	e763      	b.n	800747c <_Unwind_VRS_Pop+0x28>
 80075b4:	2e0f      	cmp	r6, #15
 80075b6:	f63f af60 	bhi.w	800747a <_Unwind_VRS_Pop+0x26>
 80075ba:	2700      	movs	r7, #0
 80075bc:	6822      	ldr	r2, [r4, #0]
 80075be:	07d1      	lsls	r1, r2, #31
 80075c0:	d417      	bmi.n	80075f2 <_Unwind_VRS_Pop+0x19e>
 80075c2:	2f00      	cmp	r7, #0
 80075c4:	d060      	beq.n	8007688 <_Unwind_VRS_Pop+0x234>
 80075c6:	6822      	ldr	r2, [r4, #0]
 80075c8:	0751      	lsls	r1, r2, #29
 80075ca:	d445      	bmi.n	8007658 <_Unwind_VRS_Pop+0x204>
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d04d      	beq.n	800766c <_Unwind_VRS_Pop+0x218>
 80075d0:	2e0f      	cmp	r6, #15
 80075d2:	d806      	bhi.n	80075e2 <_Unwind_VRS_Pop+0x18e>
 80075d4:	a822      	add	r0, sp, #136	; 0x88
 80075d6:	9301      	str	r3, [sp, #4]
 80075d8:	f000 f87a 	bl	80076d0 <__gnu_Unwind_Save_VFP_D>
 80075dc:	9b01      	ldr	r3, [sp, #4]
 80075de:	2f00      	cmp	r7, #0
 80075e0:	d0b6      	beq.n	8007550 <_Unwind_VRS_Pop+0xfc>
 80075e2:	a802      	add	r0, sp, #8
 80075e4:	9301      	str	r3, [sp, #4]
 80075e6:	f000 f87b 	bl	80076e0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80075ea:	9b01      	ldr	r3, [sp, #4]
 80075ec:	f1c6 0210 	rsb	r2, r6, #16
 80075f0:	e7b0      	b.n	8007554 <_Unwind_VRS_Pop+0x100>
 80075f2:	f022 0101 	bic.w	r1, r2, #1
 80075f6:	2b05      	cmp	r3, #5
 80075f8:	6021      	str	r1, [r4, #0]
 80075fa:	9301      	str	r3, [sp, #4]
 80075fc:	4620      	mov	r0, r4
 80075fe:	d03b      	beq.n	8007678 <_Unwind_VRS_Pop+0x224>
 8007600:	f022 0203 	bic.w	r2, r2, #3
 8007604:	f840 2b48 	str.w	r2, [r0], #72
 8007608:	f000 f85a 	bl	80076c0 <__gnu_Unwind_Save_VFP>
 800760c:	9b01      	ldr	r3, [sp, #4]
 800760e:	e7d8      	b.n	80075c2 <_Unwind_VRS_Pop+0x16e>
 8007610:	a822      	add	r0, sp, #136	; 0x88
 8007612:	f000 f859 	bl	80076c8 <__gnu_Unwind_Restore_VFP_D>
 8007616:	e7c7      	b.n	80075a8 <_Unwind_VRS_Pop+0x154>
 8007618:	2f10      	cmp	r7, #16
 800761a:	d9ce      	bls.n	80075ba <_Unwind_VRS_Pop+0x166>
 800761c:	3f10      	subs	r7, #16
 800761e:	e7cd      	b.n	80075bc <_Unwind_VRS_Pop+0x168>
 8007620:	f023 0310 	bic.w	r3, r3, #16
 8007624:	6023      	str	r3, [r4, #0]
 8007626:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 800762a:	9201      	str	r2, [sp, #4]
 800762c:	f000 f8aa 	bl	8007784 <__gnu_Unwind_Save_WMMXC>
 8007630:	9a01      	ldr	r2, [sp, #4]
 8007632:	e72d      	b.n	8007490 <_Unwind_VRS_Pop+0x3c>
 8007634:	3104      	adds	r1, #4
 8007636:	63a1      	str	r1, [r4, #56]	; 0x38
 8007638:	a822      	add	r0, sp, #136	; 0x88
 800763a:	f000 f83d 	bl	80076b8 <__gnu_Unwind_Restore_VFP>
 800763e:	e7b7      	b.n	80075b0 <_Unwind_VRS_Pop+0x15c>
 8007640:	2f00      	cmp	r7, #0
 8007642:	d199      	bne.n	8007578 <_Unwind_VRS_Pop+0x124>
 8007644:	4601      	mov	r1, r0
 8007646:	e7aa      	b.n	800759e <_Unwind_VRS_Pop+0x14a>
 8007648:	f023 0308 	bic.w	r3, r3, #8
 800764c:	6023      	str	r3, [r4, #0]
 800764e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8007652:	f000 f86b 	bl	800772c <__gnu_Unwind_Save_WMMXD>
 8007656:	e740      	b.n	80074da <_Unwind_VRS_Pop+0x86>
 8007658:	4620      	mov	r0, r4
 800765a:	f022 0204 	bic.w	r2, r2, #4
 800765e:	f840 2bd0 	str.w	r2, [r0], #208
 8007662:	9301      	str	r3, [sp, #4]
 8007664:	f000 f83c 	bl	80076e0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8007668:	9b01      	ldr	r3, [sp, #4]
 800766a:	e7af      	b.n	80075cc <_Unwind_VRS_Pop+0x178>
 800766c:	a822      	add	r0, sp, #136	; 0x88
 800766e:	9301      	str	r3, [sp, #4]
 8007670:	f000 f826 	bl	80076c0 <__gnu_Unwind_Save_VFP>
 8007674:	9b01      	ldr	r3, [sp, #4]
 8007676:	e7b9      	b.n	80075ec <_Unwind_VRS_Pop+0x198>
 8007678:	f041 0102 	orr.w	r1, r1, #2
 800767c:	f840 1b48 	str.w	r1, [r0], #72
 8007680:	f000 f826 	bl	80076d0 <__gnu_Unwind_Save_VFP_D>
 8007684:	9b01      	ldr	r3, [sp, #4]
 8007686:	e79c      	b.n	80075c2 <_Unwind_VRS_Pop+0x16e>
 8007688:	2b01      	cmp	r3, #1
 800768a:	d003      	beq.n	8007694 <_Unwind_VRS_Pop+0x240>
 800768c:	2e0f      	cmp	r6, #15
 800768e:	f63f af5f 	bhi.w	8007550 <_Unwind_VRS_Pop+0xfc>
 8007692:	e79f      	b.n	80075d4 <_Unwind_VRS_Pop+0x180>
 8007694:	a822      	add	r0, sp, #136	; 0x88
 8007696:	9301      	str	r3, [sp, #4]
 8007698:	f000 f812 	bl	80076c0 <__gnu_Unwind_Save_VFP>
 800769c:	9b01      	ldr	r3, [sp, #4]
 800769e:	e757      	b.n	8007550 <_Unwind_VRS_Pop+0xfc>

080076a0 <__restore_core_regs>:
 80076a0:	f100 0134 	add.w	r1, r0, #52	; 0x34
 80076a4:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80076a8:	469c      	mov	ip, r3
 80076aa:	46a6      	mov	lr, r4
 80076ac:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80076b0:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80076b4:	46e5      	mov	sp, ip
 80076b6:	bd00      	pop	{pc}

080076b8 <__gnu_Unwind_Restore_VFP>:
 80076b8:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop

080076c0 <__gnu_Unwind_Save_VFP>:
 80076c0:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop

080076c8 <__gnu_Unwind_Restore_VFP_D>:
 80076c8:	ec90 0b20 	vldmia	r0, {d0-d15}
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop

080076d0 <__gnu_Unwind_Save_VFP_D>:
 80076d0:	ec80 0b20 	vstmia	r0, {d0-d15}
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop

080076d8 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80076d8:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop

080076e0 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80076e0:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop

080076e8 <__gnu_Unwind_Restore_WMMXD>:
 80076e8:	ecf0 0102 	ldfe	f0, [r0], #8
 80076ec:	ecf0 1102 	ldfe	f1, [r0], #8
 80076f0:	ecf0 2102 	ldfe	f2, [r0], #8
 80076f4:	ecf0 3102 	ldfe	f3, [r0], #8
 80076f8:	ecf0 4102 	ldfe	f4, [r0], #8
 80076fc:	ecf0 5102 	ldfe	f5, [r0], #8
 8007700:	ecf0 6102 	ldfe	f6, [r0], #8
 8007704:	ecf0 7102 	ldfe	f7, [r0], #8
 8007708:	ecf0 8102 	ldfp	f0, [r0], #8
 800770c:	ecf0 9102 	ldfp	f1, [r0], #8
 8007710:	ecf0 a102 	ldfp	f2, [r0], #8
 8007714:	ecf0 b102 	ldfp	f3, [r0], #8
 8007718:	ecf0 c102 	ldfp	f4, [r0], #8
 800771c:	ecf0 d102 	ldfp	f5, [r0], #8
 8007720:	ecf0 e102 	ldfp	f6, [r0], #8
 8007724:	ecf0 f102 	ldfp	f7, [r0], #8
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop

0800772c <__gnu_Unwind_Save_WMMXD>:
 800772c:	ece0 0102 	stfe	f0, [r0], #8
 8007730:	ece0 1102 	stfe	f1, [r0], #8
 8007734:	ece0 2102 	stfe	f2, [r0], #8
 8007738:	ece0 3102 	stfe	f3, [r0], #8
 800773c:	ece0 4102 	stfe	f4, [r0], #8
 8007740:	ece0 5102 	stfe	f5, [r0], #8
 8007744:	ece0 6102 	stfe	f6, [r0], #8
 8007748:	ece0 7102 	stfe	f7, [r0], #8
 800774c:	ece0 8102 	stfp	f0, [r0], #8
 8007750:	ece0 9102 	stfp	f1, [r0], #8
 8007754:	ece0 a102 	stfp	f2, [r0], #8
 8007758:	ece0 b102 	stfp	f3, [r0], #8
 800775c:	ece0 c102 	stfp	f4, [r0], #8
 8007760:	ece0 d102 	stfp	f5, [r0], #8
 8007764:	ece0 e102 	stfp	f6, [r0], #8
 8007768:	ece0 f102 	stfp	f7, [r0], #8
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop

08007770 <__gnu_Unwind_Restore_WMMXC>:
 8007770:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8007774:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8007778:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 800777c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop

08007784 <__gnu_Unwind_Save_WMMXC>:
 8007784:	fca0 8101 	stc2	1, cr8, [r0], #4
 8007788:	fca0 9101 	stc2	1, cr9, [r0], #4
 800778c:	fca0 a101 	stc2	1, cr10, [r0], #4
 8007790:	fca0 b101 	stc2	1, cr11, [r0], #4
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop

08007798 <_Unwind_RaiseException>:
 8007798:	46ec      	mov	ip, sp
 800779a:	b500      	push	{lr}
 800779c:	e92d 5000 	stmdb	sp!, {ip, lr}
 80077a0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80077a4:	f04f 0300 	mov.w	r3, #0
 80077a8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80077ac:	a901      	add	r1, sp, #4
 80077ae:	f7ff fbed 	bl	8006f8c <__gnu_Unwind_RaiseException>
 80077b2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80077b6:	b012      	add	sp, #72	; 0x48
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop

080077bc <_Unwind_Resume>:
 80077bc:	46ec      	mov	ip, sp
 80077be:	b500      	push	{lr}
 80077c0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80077c4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80077c8:	f04f 0300 	mov.w	r3, #0
 80077cc:	e92d 000c 	stmdb	sp!, {r2, r3}
 80077d0:	a901      	add	r1, sp, #4
 80077d2:	f7ff fc15 	bl	8007000 <__gnu_Unwind_Resume>
 80077d6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80077da:	b012      	add	sp, #72	; 0x48
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop

080077e0 <_Unwind_Resume_or_Rethrow>:
 80077e0:	46ec      	mov	ip, sp
 80077e2:	b500      	push	{lr}
 80077e4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80077e8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80077ec:	f04f 0300 	mov.w	r3, #0
 80077f0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80077f4:	a901      	add	r1, sp, #4
 80077f6:	f7ff fc25 	bl	8007044 <__gnu_Unwind_Resume_or_Rethrow>
 80077fa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80077fe:	b012      	add	sp, #72	; 0x48
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop

08007804 <_Unwind_ForcedUnwind>:
 8007804:	46ec      	mov	ip, sp
 8007806:	b500      	push	{lr}
 8007808:	e92d 5000 	stmdb	sp!, {ip, lr}
 800780c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8007810:	f04f 0300 	mov.w	r3, #0
 8007814:	e92d 000c 	stmdb	sp!, {r2, r3}
 8007818:	ab01      	add	r3, sp, #4
 800781a:	f7ff fbe7 	bl	8006fec <__gnu_Unwind_ForcedUnwind>
 800781e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8007822:	b012      	add	sp, #72	; 0x48
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop

08007828 <_Unwind_Backtrace>:
 8007828:	46ec      	mov	ip, sp
 800782a:	b500      	push	{lr}
 800782c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8007830:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8007834:	f04f 0300 	mov.w	r3, #0
 8007838:	e92d 000c 	stmdb	sp!, {r2, r3}
 800783c:	aa01      	add	r2, sp, #4
 800783e:	f7ff fc61 	bl	8007104 <__gnu_Unwind_Backtrace>
 8007842:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8007846:	b012      	add	sp, #72	; 0x48
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop

0800784c <next_unwind_byte>:
 800784c:	7a02      	ldrb	r2, [r0, #8]
 800784e:	b91a      	cbnz	r2, 8007858 <next_unwind_byte+0xc>
 8007850:	7a43      	ldrb	r3, [r0, #9]
 8007852:	b943      	cbnz	r3, 8007866 <next_unwind_byte+0x1a>
 8007854:	20b0      	movs	r0, #176	; 0xb0
 8007856:	4770      	bx	lr
 8007858:	6803      	ldr	r3, [r0, #0]
 800785a:	3a01      	subs	r2, #1
 800785c:	7202      	strb	r2, [r0, #8]
 800785e:	021a      	lsls	r2, r3, #8
 8007860:	6002      	str	r2, [r0, #0]
 8007862:	0e18      	lsrs	r0, r3, #24
 8007864:	4770      	bx	lr
 8007866:	2103      	movs	r1, #3
 8007868:	6842      	ldr	r2, [r0, #4]
 800786a:	3b01      	subs	r3, #1
 800786c:	b410      	push	{r4}
 800786e:	7243      	strb	r3, [r0, #9]
 8007870:	6813      	ldr	r3, [r2, #0]
 8007872:	1d14      	adds	r4, r2, #4
 8007874:	7201      	strb	r1, [r0, #8]
 8007876:	021a      	lsls	r2, r3, #8
 8007878:	6044      	str	r4, [r0, #4]
 800787a:	6002      	str	r2, [r0, #0]
 800787c:	bc10      	pop	{r4}
 800787e:	0e18      	lsrs	r0, r3, #24
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop

08007884 <_Unwind_GetGR.constprop.0>:
 8007884:	2300      	movs	r3, #0
 8007886:	b500      	push	{lr}
 8007888:	b085      	sub	sp, #20
 800788a:	aa03      	add	r2, sp, #12
 800788c:	9200      	str	r2, [sp, #0]
 800788e:	4619      	mov	r1, r3
 8007890:	220c      	movs	r2, #12
 8007892:	f7ff fbe9 	bl	8007068 <_Unwind_VRS_Get>
 8007896:	9803      	ldr	r0, [sp, #12]
 8007898:	b005      	add	sp, #20
 800789a:	f85d fb04 	ldr.w	pc, [sp], #4
 800789e:	bf00      	nop

080078a0 <unwind_UCB_from_context>:
 80078a0:	e7f0      	b.n	8007884 <_Unwind_GetGR.constprop.0>
 80078a2:	bf00      	nop

080078a4 <__gnu_unwind_execute>:
 80078a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80078a8:	4606      	mov	r6, r0
 80078aa:	460f      	mov	r7, r1
 80078ac:	f04f 0800 	mov.w	r8, #0
 80078b0:	b085      	sub	sp, #20
 80078b2:	4638      	mov	r0, r7
 80078b4:	f7ff ffca 	bl	800784c <next_unwind_byte>
 80078b8:	28b0      	cmp	r0, #176	; 0xb0
 80078ba:	4604      	mov	r4, r0
 80078bc:	d023      	beq.n	8007906 <__gnu_unwind_execute+0x62>
 80078be:	0605      	lsls	r5, r0, #24
 80078c0:	d427      	bmi.n	8007912 <__gnu_unwind_execute+0x6e>
 80078c2:	2300      	movs	r3, #0
 80078c4:	f10d 090c 	add.w	r9, sp, #12
 80078c8:	4619      	mov	r1, r3
 80078ca:	0085      	lsls	r5, r0, #2
 80078cc:	220d      	movs	r2, #13
 80078ce:	f8cd 9000 	str.w	r9, [sp]
 80078d2:	4630      	mov	r0, r6
 80078d4:	f7ff fbc8 	bl	8007068 <_Unwind_VRS_Get>
 80078d8:	b2ed      	uxtb	r5, r5
 80078da:	9b03      	ldr	r3, [sp, #12]
 80078dc:	0660      	lsls	r0, r4, #25
 80078de:	f105 0504 	add.w	r5, r5, #4
 80078e2:	bf4c      	ite	mi
 80078e4:	1b5d      	submi	r5, r3, r5
 80078e6:	18ed      	addpl	r5, r5, r3
 80078e8:	2300      	movs	r3, #0
 80078ea:	220d      	movs	r2, #13
 80078ec:	4619      	mov	r1, r3
 80078ee:	f8cd 9000 	str.w	r9, [sp]
 80078f2:	4630      	mov	r0, r6
 80078f4:	9503      	str	r5, [sp, #12]
 80078f6:	f7ff fbdd 	bl	80070b4 <_Unwind_VRS_Set>
 80078fa:	4638      	mov	r0, r7
 80078fc:	f7ff ffa6 	bl	800784c <next_unwind_byte>
 8007900:	28b0      	cmp	r0, #176	; 0xb0
 8007902:	4604      	mov	r4, r0
 8007904:	d1db      	bne.n	80078be <__gnu_unwind_execute+0x1a>
 8007906:	f1b8 0f00 	cmp.w	r8, #0
 800790a:	f000 8094 	beq.w	8007a36 <__gnu_unwind_execute+0x192>
 800790e:	2000      	movs	r0, #0
 8007910:	e01c      	b.n	800794c <__gnu_unwind_execute+0xa8>
 8007912:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8007916:	2b80      	cmp	r3, #128	; 0x80
 8007918:	d05c      	beq.n	80079d4 <__gnu_unwind_execute+0x130>
 800791a:	2b90      	cmp	r3, #144	; 0x90
 800791c:	d019      	beq.n	8007952 <__gnu_unwind_execute+0xae>
 800791e:	2ba0      	cmp	r3, #160	; 0xa0
 8007920:	d02c      	beq.n	800797c <__gnu_unwind_execute+0xd8>
 8007922:	2bb0      	cmp	r3, #176	; 0xb0
 8007924:	d03e      	beq.n	80079a4 <__gnu_unwind_execute+0x100>
 8007926:	2bc0      	cmp	r3, #192	; 0xc0
 8007928:	d06b      	beq.n	8007a02 <__gnu_unwind_execute+0x15e>
 800792a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800792e:	2bd0      	cmp	r3, #208	; 0xd0
 8007930:	d10b      	bne.n	800794a <__gnu_unwind_execute+0xa6>
 8007932:	f000 0207 	and.w	r2, r0, #7
 8007936:	3201      	adds	r2, #1
 8007938:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800793c:	2305      	movs	r3, #5
 800793e:	2101      	movs	r1, #1
 8007940:	4630      	mov	r0, r6
 8007942:	f7ff fd87 	bl	8007454 <_Unwind_VRS_Pop>
 8007946:	2800      	cmp	r0, #0
 8007948:	d0b3      	beq.n	80078b2 <__gnu_unwind_execute+0xe>
 800794a:	2009      	movs	r0, #9
 800794c:	b005      	add	sp, #20
 800794e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007952:	f000 030d 	and.w	r3, r0, #13
 8007956:	2b0d      	cmp	r3, #13
 8007958:	d0f7      	beq.n	800794a <__gnu_unwind_execute+0xa6>
 800795a:	2300      	movs	r3, #0
 800795c:	ad03      	add	r5, sp, #12
 800795e:	f000 020f 	and.w	r2, r0, #15
 8007962:	4619      	mov	r1, r3
 8007964:	9500      	str	r5, [sp, #0]
 8007966:	4630      	mov	r0, r6
 8007968:	f7ff fb7e 	bl	8007068 <_Unwind_VRS_Get>
 800796c:	2300      	movs	r3, #0
 800796e:	9500      	str	r5, [sp, #0]
 8007970:	4619      	mov	r1, r3
 8007972:	220d      	movs	r2, #13
 8007974:	4630      	mov	r0, r6
 8007976:	f7ff fb9d 	bl	80070b4 <_Unwind_VRS_Set>
 800797a:	e79a      	b.n	80078b2 <__gnu_unwind_execute+0xe>
 800797c:	43c3      	mvns	r3, r0
 800797e:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8007982:	f003 0307 	and.w	r3, r3, #7
 8007986:	411a      	asrs	r2, r3
 8007988:	2300      	movs	r3, #0
 800798a:	0701      	lsls	r1, r0, #28
 800798c:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8007990:	bf48      	it	mi
 8007992:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8007996:	4619      	mov	r1, r3
 8007998:	4630      	mov	r0, r6
 800799a:	f7ff fd5b 	bl	8007454 <_Unwind_VRS_Pop>
 800799e:	2800      	cmp	r0, #0
 80079a0:	d1d3      	bne.n	800794a <__gnu_unwind_execute+0xa6>
 80079a2:	e786      	b.n	80078b2 <__gnu_unwind_execute+0xe>
 80079a4:	28b1      	cmp	r0, #177	; 0xb1
 80079a6:	d057      	beq.n	8007a58 <__gnu_unwind_execute+0x1b4>
 80079a8:	28b2      	cmp	r0, #178	; 0xb2
 80079aa:	d068      	beq.n	8007a7e <__gnu_unwind_execute+0x1da>
 80079ac:	28b3      	cmp	r0, #179	; 0xb3
 80079ae:	f000 8095 	beq.w	8007adc <__gnu_unwind_execute+0x238>
 80079b2:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 80079b6:	2bb4      	cmp	r3, #180	; 0xb4
 80079b8:	d0c7      	beq.n	800794a <__gnu_unwind_execute+0xa6>
 80079ba:	2301      	movs	r3, #1
 80079bc:	f000 0207 	and.w	r2, r0, #7
 80079c0:	441a      	add	r2, r3
 80079c2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80079c6:	4619      	mov	r1, r3
 80079c8:	4630      	mov	r0, r6
 80079ca:	f7ff fd43 	bl	8007454 <_Unwind_VRS_Pop>
 80079ce:	2800      	cmp	r0, #0
 80079d0:	d1bb      	bne.n	800794a <__gnu_unwind_execute+0xa6>
 80079d2:	e76e      	b.n	80078b2 <__gnu_unwind_execute+0xe>
 80079d4:	4638      	mov	r0, r7
 80079d6:	f7ff ff39 	bl	800784c <next_unwind_byte>
 80079da:	0224      	lsls	r4, r4, #8
 80079dc:	4304      	orrs	r4, r0
 80079de:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80079e2:	d0b2      	beq.n	800794a <__gnu_unwind_execute+0xa6>
 80079e4:	2300      	movs	r3, #0
 80079e6:	0124      	lsls	r4, r4, #4
 80079e8:	b2a2      	uxth	r2, r4
 80079ea:	4619      	mov	r1, r3
 80079ec:	4630      	mov	r0, r6
 80079ee:	f7ff fd31 	bl	8007454 <_Unwind_VRS_Pop>
 80079f2:	2800      	cmp	r0, #0
 80079f4:	d1a9      	bne.n	800794a <__gnu_unwind_execute+0xa6>
 80079f6:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80079fa:	bf18      	it	ne
 80079fc:	f04f 0801 	movne.w	r8, #1
 8007a00:	e757      	b.n	80078b2 <__gnu_unwind_execute+0xe>
 8007a02:	28c6      	cmp	r0, #198	; 0xc6
 8007a04:	d07d      	beq.n	8007b02 <__gnu_unwind_execute+0x25e>
 8007a06:	28c7      	cmp	r0, #199	; 0xc7
 8007a08:	f000 8086 	beq.w	8007b18 <__gnu_unwind_execute+0x274>
 8007a0c:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8007a10:	2bc0      	cmp	r3, #192	; 0xc0
 8007a12:	f000 8094 	beq.w	8007b3e <__gnu_unwind_execute+0x29a>
 8007a16:	28c8      	cmp	r0, #200	; 0xc8
 8007a18:	f000 809f 	beq.w	8007b5a <__gnu_unwind_execute+0x2b6>
 8007a1c:	28c9      	cmp	r0, #201	; 0xc9
 8007a1e:	d194      	bne.n	800794a <__gnu_unwind_execute+0xa6>
 8007a20:	4638      	mov	r0, r7
 8007a22:	f7ff ff13 	bl	800784c <next_unwind_byte>
 8007a26:	0302      	lsls	r2, r0, #12
 8007a28:	f000 000f 	and.w	r0, r0, #15
 8007a2c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8007a30:	3001      	adds	r0, #1
 8007a32:	4302      	orrs	r2, r0
 8007a34:	e782      	b.n	800793c <__gnu_unwind_execute+0x98>
 8007a36:	ac03      	add	r4, sp, #12
 8007a38:	4643      	mov	r3, r8
 8007a3a:	220e      	movs	r2, #14
 8007a3c:	4641      	mov	r1, r8
 8007a3e:	9400      	str	r4, [sp, #0]
 8007a40:	4630      	mov	r0, r6
 8007a42:	f7ff fb11 	bl	8007068 <_Unwind_VRS_Get>
 8007a46:	9400      	str	r4, [sp, #0]
 8007a48:	4630      	mov	r0, r6
 8007a4a:	4643      	mov	r3, r8
 8007a4c:	220f      	movs	r2, #15
 8007a4e:	4641      	mov	r1, r8
 8007a50:	f7ff fb30 	bl	80070b4 <_Unwind_VRS_Set>
 8007a54:	4640      	mov	r0, r8
 8007a56:	e779      	b.n	800794c <__gnu_unwind_execute+0xa8>
 8007a58:	4638      	mov	r0, r7
 8007a5a:	f7ff fef7 	bl	800784c <next_unwind_byte>
 8007a5e:	2800      	cmp	r0, #0
 8007a60:	f43f af73 	beq.w	800794a <__gnu_unwind_execute+0xa6>
 8007a64:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8007a68:	f47f af6f 	bne.w	800794a <__gnu_unwind_execute+0xa6>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	4619      	mov	r1, r3
 8007a70:	4630      	mov	r0, r6
 8007a72:	f7ff fcef 	bl	8007454 <_Unwind_VRS_Pop>
 8007a76:	2800      	cmp	r0, #0
 8007a78:	f47f af67 	bne.w	800794a <__gnu_unwind_execute+0xa6>
 8007a7c:	e719      	b.n	80078b2 <__gnu_unwind_execute+0xe>
 8007a7e:	2300      	movs	r3, #0
 8007a80:	f10d 090c 	add.w	r9, sp, #12
 8007a84:	220d      	movs	r2, #13
 8007a86:	4619      	mov	r1, r3
 8007a88:	f8cd 9000 	str.w	r9, [sp]
 8007a8c:	4630      	mov	r0, r6
 8007a8e:	f7ff faeb 	bl	8007068 <_Unwind_VRS_Get>
 8007a92:	4638      	mov	r0, r7
 8007a94:	f7ff feda 	bl	800784c <next_unwind_byte>
 8007a98:	0602      	lsls	r2, r0, #24
 8007a9a:	f04f 0402 	mov.w	r4, #2
 8007a9e:	d50c      	bpl.n	8007aba <__gnu_unwind_execute+0x216>
 8007aa0:	9b03      	ldr	r3, [sp, #12]
 8007aa2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8007aa6:	40a0      	lsls	r0, r4
 8007aa8:	4403      	add	r3, r0
 8007aaa:	4638      	mov	r0, r7
 8007aac:	9303      	str	r3, [sp, #12]
 8007aae:	f7ff fecd 	bl	800784c <next_unwind_byte>
 8007ab2:	0603      	lsls	r3, r0, #24
 8007ab4:	f104 0407 	add.w	r4, r4, #7
 8007ab8:	d4f2      	bmi.n	8007aa0 <__gnu_unwind_execute+0x1fc>
 8007aba:	2300      	movs	r3, #0
 8007abc:	9903      	ldr	r1, [sp, #12]
 8007abe:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8007ac2:	40a2      	lsls	r2, r4
 8007ac4:	f501 7101 	add.w	r1, r1, #516	; 0x204
 8007ac8:	188c      	adds	r4, r1, r2
 8007aca:	f8cd 9000 	str.w	r9, [sp]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	220d      	movs	r2, #13
 8007ad2:	4630      	mov	r0, r6
 8007ad4:	9403      	str	r4, [sp, #12]
 8007ad6:	f7ff faed 	bl	80070b4 <_Unwind_VRS_Set>
 8007ada:	e6ea      	b.n	80078b2 <__gnu_unwind_execute+0xe>
 8007adc:	4638      	mov	r0, r7
 8007ade:	f7ff feb5 	bl	800784c <next_unwind_byte>
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	0301      	lsls	r1, r0, #12
 8007ae6:	f000 000f 	and.w	r0, r0, #15
 8007aea:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8007aee:	18c2      	adds	r2, r0, r3
 8007af0:	430a      	orrs	r2, r1
 8007af2:	4630      	mov	r0, r6
 8007af4:	4619      	mov	r1, r3
 8007af6:	f7ff fcad 	bl	8007454 <_Unwind_VRS_Pop>
 8007afa:	2800      	cmp	r0, #0
 8007afc:	f47f af25 	bne.w	800794a <__gnu_unwind_execute+0xa6>
 8007b00:	e6d7      	b.n	80078b2 <__gnu_unwind_execute+0xe>
 8007b02:	4638      	mov	r0, r7
 8007b04:	f7ff fea2 	bl	800784c <next_unwind_byte>
 8007b08:	0301      	lsls	r1, r0, #12
 8007b0a:	f000 000f 	and.w	r0, r0, #15
 8007b0e:	2303      	movs	r3, #3
 8007b10:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8007b14:	1c42      	adds	r2, r0, #1
 8007b16:	e7eb      	b.n	8007af0 <__gnu_unwind_execute+0x24c>
 8007b18:	4638      	mov	r0, r7
 8007b1a:	f7ff fe97 	bl	800784c <next_unwind_byte>
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	f43f af13 	beq.w	800794a <__gnu_unwind_execute+0xa6>
 8007b24:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8007b28:	f47f af0f 	bne.w	800794a <__gnu_unwind_execute+0xa6>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	2104      	movs	r1, #4
 8007b30:	4630      	mov	r0, r6
 8007b32:	f7ff fc8f 	bl	8007454 <_Unwind_VRS_Pop>
 8007b36:	2800      	cmp	r0, #0
 8007b38:	f47f af07 	bne.w	800794a <__gnu_unwind_execute+0xa6>
 8007b3c:	e6b9      	b.n	80078b2 <__gnu_unwind_execute+0xe>
 8007b3e:	2303      	movs	r3, #3
 8007b40:	f000 020f 	and.w	r2, r0, #15
 8007b44:	3201      	adds	r2, #1
 8007b46:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	4630      	mov	r0, r6
 8007b4e:	f7ff fc81 	bl	8007454 <_Unwind_VRS_Pop>
 8007b52:	2800      	cmp	r0, #0
 8007b54:	f47f aef9 	bne.w	800794a <__gnu_unwind_execute+0xa6>
 8007b58:	e6ab      	b.n	80078b2 <__gnu_unwind_execute+0xe>
 8007b5a:	4638      	mov	r0, r7
 8007b5c:	f7ff fe76 	bl	800784c <next_unwind_byte>
 8007b60:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8007b64:	f000 030f 	and.w	r3, r0, #15
 8007b68:	3210      	adds	r2, #16
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8007b70:	e6e4      	b.n	800793c <__gnu_unwind_execute+0x98>
 8007b72:	bf00      	nop

08007b74 <__gnu_unwind_frame>:
 8007b74:	b530      	push	{r4, r5, lr}
 8007b76:	2403      	movs	r4, #3
 8007b78:	460d      	mov	r5, r1
 8007b7a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007b7c:	b085      	sub	sp, #20
 8007b7e:	685a      	ldr	r2, [r3, #4]
 8007b80:	f88d 400c 	strb.w	r4, [sp, #12]
 8007b84:	79dc      	ldrb	r4, [r3, #7]
 8007b86:	0212      	lsls	r2, r2, #8
 8007b88:	3308      	adds	r3, #8
 8007b8a:	a901      	add	r1, sp, #4
 8007b8c:	4628      	mov	r0, r5
 8007b8e:	9201      	str	r2, [sp, #4]
 8007b90:	f88d 400d 	strb.w	r4, [sp, #13]
 8007b94:	9302      	str	r3, [sp, #8]
 8007b96:	f7ff fe85 	bl	80078a4 <__gnu_unwind_execute>
 8007b9a:	b005      	add	sp, #20
 8007b9c:	bd30      	pop	{r4, r5, pc}
 8007b9e:	bf00      	nop

08007ba0 <_Unwind_GetRegionStart>:
 8007ba0:	b508      	push	{r3, lr}
 8007ba2:	f7ff fe7d 	bl	80078a0 <unwind_UCB_from_context>
 8007ba6:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8007ba8:	bd08      	pop	{r3, pc}
 8007baa:	bf00      	nop

08007bac <_Unwind_GetLanguageSpecificData>:
 8007bac:	b508      	push	{r3, lr}
 8007bae:	f7ff fe77 	bl	80078a0 <unwind_UCB_from_context>
 8007bb2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8007bb4:	79c3      	ldrb	r3, [r0, #7]
 8007bb6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007bba:	3008      	adds	r0, #8
 8007bbc:	bd08      	pop	{r3, pc}
 8007bbe:	bf00      	nop

08007bc0 <_Unwind_GetTextRelBase>:
 8007bc0:	b508      	push	{r3, lr}
 8007bc2:	f003 fd51 	bl	800b668 <abort>
 8007bc6:	bf00      	nop

08007bc8 <_Unwind_GetDataRelBase>:
 8007bc8:	b508      	push	{r3, lr}
 8007bca:	f7ff fff9 	bl	8007bc0 <_Unwind_GetTextRelBase>
 8007bce:	bf00      	nop

08007bd0 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8007bde:	2300      	movs	r3, #0
 8007be0:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	60fb      	str	r3, [r7, #12]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8007bee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bf2:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	791b      	ldrb	r3, [r3, #4]
 8007bfc:	021b      	lsls	r3, r3, #8
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	605a      	str	r2, [r3, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	4b16      	ldr	r3, [pc, #88]	; (8007c70 <ADC_Init+0xa0>)
 8007c16:	4013      	ands	r3, r2
 8007c18:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	68da      	ldr	r2, [r3, #12]
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	431a      	orrs	r2, r3
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	795b      	ldrb	r3, [r3, #5]
 8007c28:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	609a      	str	r2, [r3, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3c:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007c44:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	7c1b      	ldrb	r3, [r3, #16]
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	7afb      	ldrb	r3, [r7, #11]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
 8007c54:	7afb      	ldrb	r3, [r7, #11]
 8007c56:	051b      	lsls	r3, r3, #20
 8007c58:	68fa      	ldr	r2, [r7, #12]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007c64:	bf00      	nop
 8007c66:	3714      	adds	r7, #20
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bc80      	pop	{r7}
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop
 8007c70:	fff1f7fd 	.word	0xfff1f7fd

08007c74 <ADC_StructInit>:
  * @brief  Fills each ADC_InitStruct member with its default value.
  * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	601a      	str	r2, [r3, #0]
  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	711a      	strb	r2, [r3, #4]
  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	715a      	strb	r2, [r3, #5]
  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	609a      	str	r2, [r3, #8]
  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	60da      	str	r2, [r3, #12]
  /* Initialize the ADC_NbrOfChannel member */
  ADC_InitStruct->ADC_NbrOfChannel = 1;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	741a      	strb	r2, [r3, #16]
}
 8007ca0:	bf00      	nop
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bc80      	pop	{r7}
 8007ca8:	4770      	bx	lr

08007caa <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b083      	sub	sp, #12
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007cb6:	78fb      	ldrb	r3, [r7, #3]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d006      	beq.n	8007cca <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	f043 0201 	orr.w	r2, r3, #1
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
  }
}
 8007cc8:	e005      	b.n	8007cd6 <ADC_Cmd+0x2c>
    ADCx->CR2 &= CR2_ADON_Reset;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	f023 0201 	bic.w	r2, r3, #1
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	609a      	str	r2, [r3, #8]
}
 8007cd6:	bf00      	nop
 8007cd8:	370c      	adds	r7, #12
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bc80      	pop	{r7}
 8007cde:	4770      	bx	lr

08007ce0 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007cec:	78fb      	ldrb	r3, [r7, #3]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d006      	beq.n	8007d00 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= CR2_DMA_Reset;
  }
}
 8007cfe:	e005      	b.n	8007d0c <ADC_DMACmd+0x2c>
    ADCx->CR2 &= CR2_DMA_Reset;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	609a      	str	r2, [r3, #8]
}
 8007d0c:	bf00      	nop
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bc80      	pop	{r7}
 8007d14:	4770      	bx	lr

08007d16 <ADC_SoftwareStartConvCmd>:
  * @param  NewState: new state of the selected ADC software start conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8007d16:	b480      	push	{r7}
 8007d18:	b083      	sub	sp, #12
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
 8007d1e:	460b      	mov	r3, r1
 8007d20:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007d22:	78fb      	ldrb	r3, [r7, #3]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d006      	beq.n	8007d36 <ADC_SoftwareStartConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	609a      	str	r2, [r3, #8]
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
  }
}
 8007d34:	e005      	b.n	8007d42 <ADC_SoftwareStartConvCmd+0x2c>
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	f423 02a0 	bic.w	r2, r3, #5242880	; 0x500000
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	609a      	str	r2, [r3, #8]
}
 8007d42:	bf00      	nop
 8007d44:	370c      	adds	r7, #12
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bc80      	pop	{r7}
 8007d4a:	4770      	bx	lr

08007d4c <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b085      	sub	sp, #20
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	4608      	mov	r0, r1
 8007d56:	4611      	mov	r1, r2
 8007d58:	461a      	mov	r2, r3
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	70fb      	strb	r3, [r7, #3]
 8007d5e:	460b      	mov	r3, r1
 8007d60:	70bb      	strb	r3, [r7, #2]
 8007d62:	4613      	mov	r3, r2
 8007d64:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8007d66:	2300      	movs	r3, #0
 8007d68:	60fb      	str	r3, [r7, #12]
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8007d6e:	78fb      	ldrb	r3, [r7, #3]
 8007d70:	2b09      	cmp	r3, #9
 8007d72:	d923      	bls.n	8007dbc <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 8007d7a:	78fb      	ldrb	r3, [r7, #3]
 8007d7c:	f1a3 020a 	sub.w	r2, r3, #10
 8007d80:	4613      	mov	r3, r2
 8007d82:	005b      	lsls	r3, r3, #1
 8007d84:	4413      	add	r3, r2
 8007d86:	2207      	movs	r2, #7
 8007d88:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8c:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	43db      	mvns	r3, r3
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	4013      	ands	r3, r2
 8007d96:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8007d98:	7879      	ldrb	r1, [r7, #1]
 8007d9a:	78fb      	ldrb	r3, [r7, #3]
 8007d9c:	f1a3 020a 	sub.w	r2, r3, #10
 8007da0:	4613      	mov	r3, r2
 8007da2:	005b      	lsls	r3, r3, #1
 8007da4:	4413      	add	r3, r2
 8007da6:	fa01 f303 	lsl.w	r3, r1, r3
 8007daa:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	60da      	str	r2, [r3, #12]
 8007dba:	e01e      	b.n	8007dfa <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 8007dc2:	78fa      	ldrb	r2, [r7, #3]
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	005b      	lsls	r3, r3, #1
 8007dc8:	4413      	add	r3, r2
 8007dca:	2207      	movs	r2, #7
 8007dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd0:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	43db      	mvns	r3, r3
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	4013      	ands	r3, r2
 8007dda:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8007ddc:	7879      	ldrb	r1, [r7, #1]
 8007dde:	78fa      	ldrb	r2, [r7, #3]
 8007de0:	4613      	mov	r3, r2
 8007de2:	005b      	lsls	r3, r3, #1
 8007de4:	4413      	add	r3, r2
 8007de6:	fa01 f303 	lsl.w	r3, r1, r3
 8007dea:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8007dfa:	78bb      	ldrb	r3, [r7, #2]
 8007dfc:	2b06      	cmp	r3, #6
 8007dfe:	d821      	bhi.n	8007e44 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e04:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 8007e06:	78bb      	ldrb	r3, [r7, #2]
 8007e08:	1e5a      	subs	r2, r3, #1
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	4413      	add	r3, r2
 8007e10:	221f      	movs	r2, #31
 8007e12:	fa02 f303 	lsl.w	r3, r2, r3
 8007e16:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	43db      	mvns	r3, r3
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	4013      	ands	r3, r2
 8007e20:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8007e22:	78f9      	ldrb	r1, [r7, #3]
 8007e24:	78bb      	ldrb	r3, [r7, #2]
 8007e26:	1e5a      	subs	r2, r3, #1
 8007e28:	4613      	mov	r3, r2
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	4413      	add	r3, r2
 8007e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e32:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	68fa      	ldr	r2, [r7, #12]
 8007e40:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8007e42:	e047      	b.n	8007ed4 <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 8007e44:	78bb      	ldrb	r3, [r7, #2]
 8007e46:	2b0c      	cmp	r3, #12
 8007e48:	d821      	bhi.n	8007e8e <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4e:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 8007e50:	78bb      	ldrb	r3, [r7, #2]
 8007e52:	1fda      	subs	r2, r3, #7
 8007e54:	4613      	mov	r3, r2
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4413      	add	r3, r2
 8007e5a:	221f      	movs	r2, #31
 8007e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e60:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	43db      	mvns	r3, r3
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	4013      	ands	r3, r2
 8007e6a:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8007e6c:	78f9      	ldrb	r1, [r7, #3]
 8007e6e:	78bb      	ldrb	r3, [r7, #2]
 8007e70:	1fda      	subs	r2, r3, #7
 8007e72:	4613      	mov	r3, r2
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	4413      	add	r3, r2
 8007e78:	fa01 f303 	lsl.w	r3, r1, r3
 8007e7c:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007e8c:	e022      	b.n	8007ed4 <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e92:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 8007e94:	78bb      	ldrb	r3, [r7, #2]
 8007e96:	f1a3 020d 	sub.w	r2, r3, #13
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	4413      	add	r3, r2
 8007ea0:	221f      	movs	r2, #31
 8007ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea6:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	43db      	mvns	r3, r3
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	4013      	ands	r3, r2
 8007eb0:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8007eb2:	78f9      	ldrb	r1, [r7, #3]
 8007eb4:	78bb      	ldrb	r3, [r7, #2]
 8007eb6:	f1a3 020d 	sub.w	r2, r3, #13
 8007eba:	4613      	mov	r3, r2
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	4413      	add	r3, r2
 8007ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ec4:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007ed4:	bf00      	nop
 8007ed6:	3714      	adds	r7, #20
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bc80      	pop	{r7}
 8007edc:	4770      	bx	lr

08007ede <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8007ede:	b480      	push	{r7}
 8007ee0:	b085      	sub	sp, #20
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
 8007ee6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007efc:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	689a      	ldr	r2, [r3, #8]
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	6a1b      	ldr	r3, [r3, #32]
 8007f06:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	691b      	ldr	r3, [r3, #16]
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8007f0c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	695b      	ldr	r3, [r3, #20]
 8007f12:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	699b      	ldr	r3, [r3, #24]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8007f18:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	69db      	ldr	r3, [r3, #28]
 8007f1e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8007f24:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2a:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	68da      	ldr	r2, [r3, #12]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	685a      	ldr	r2, [r3, #4]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	60da      	str	r2, [r3, #12]
}
 8007f50:	bf00      	nop
 8007f52:	3714      	adds	r7, #20
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bc80      	pop	{r7}
 8007f58:	4770      	bx	lr

08007f5a <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8007f5a:	b480      	push	{r7}
 8007f5c:	b083      	sub	sp, #12
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
/*-------------- Reset DMA init structure parameters values ------------------*/
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	601a      	str	r2, [r3, #0]
  /* Initialize the DMA_MemoryBaseAddr member */
  DMA_InitStruct->DMA_MemoryBaseAddr = 0;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	605a      	str	r2, [r3, #4]
  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	609a      	str	r2, [r3, #8]
  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	60da      	str	r2, [r3, #12]
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	611a      	str	r2, [r3, #16]
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	615a      	str	r2, [r3, #20]
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	619a      	str	r2, [r3, #24]
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	61da      	str	r2, [r3, #28]
  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	621a      	str	r2, [r3, #32]
  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Initialize the DMA_M2M member */
  DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007fa4:	bf00      	nop
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bc80      	pop	{r7}
 8007fac:	4770      	bx	lr

08007fae <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b083      	sub	sp, #12
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007fba:	78fb      	ldrb	r3, [r7, #3]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d006      	beq.n	8007fce <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f043 0201 	orr.w	r2, r3, #1
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 8007fcc:	e006      	b.n	8007fdc <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	6013      	str	r3, [r2, #0]
}
 8007fdc:	bf00      	nop
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bc80      	pop	{r7}
 8007fe4:	4770      	bx	lr

08007fe6 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b089      	sub	sp, #36	; 0x24
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
 8007fee:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	61fb      	str	r3, [r7, #28]
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	613b      	str	r3, [r7, #16]
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	61bb      	str	r3, [r7, #24]
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8008000:	2300      	movs	r3, #0
 8008002:	617b      	str	r3, [r7, #20]
 8008004:	2300      	movs	r3, #0
 8008006:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	78db      	ldrb	r3, [r3, #3]
 800800c:	f003 030f 	and.w	r3, r3, #15
 8008010:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	78db      	ldrb	r3, [r3, #3]
 8008016:	f003 0310 	and.w	r3, r3, #16
 800801a:	2b00      	cmp	r3, #0
 800801c:	d005      	beq.n	800802a <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	789b      	ldrb	r3, [r3, #2]
 8008022:	461a      	mov	r2, r3
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	4313      	orrs	r3, r2
 8008028:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	881b      	ldrh	r3, [r3, #0]
 800802e:	b2db      	uxtb	r3, r3
 8008030:	2b00      	cmp	r3, #0
 8008032:	d044      	beq.n	80080be <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800803a:	2300      	movs	r3, #0
 800803c:	61bb      	str	r3, [r7, #24]
 800803e:	e038      	b.n	80080b2 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8008040:	2201      	movs	r2, #1
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	fa02 f303 	lsl.w	r3, r2, r3
 8008048:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	881b      	ldrh	r3, [r3, #0]
 800804e:	461a      	mov	r2, r3
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	4013      	ands	r3, r2
 8008054:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	429a      	cmp	r2, r3
 800805c:	d126      	bne.n	80080ac <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8008064:	220f      	movs	r2, #15
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	fa02 f303 	lsl.w	r3, r2, r3
 800806c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	43db      	mvns	r3, r3
 8008072:	697a      	ldr	r2, [r7, #20]
 8008074:	4013      	ands	r3, r2
 8008076:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8008078:	69fa      	ldr	r2, [r7, #28]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	fa02 f303 	lsl.w	r3, r2, r3
 8008080:	697a      	ldr	r2, [r7, #20]
 8008082:	4313      	orrs	r3, r2
 8008084:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	78db      	ldrb	r3, [r3, #3]
 800808a:	2b28      	cmp	r3, #40	; 0x28
 800808c:	d105      	bne.n	800809a <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800808e:	2201      	movs	r2, #1
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	409a      	lsls	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	615a      	str	r2, [r3, #20]
 8008098:	e008      	b.n	80080ac <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	78db      	ldrb	r3, [r3, #3]
 800809e:	2b48      	cmp	r3, #72	; 0x48
 80080a0:	d104      	bne.n	80080ac <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80080a2:	2201      	movs	r2, #1
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	409a      	lsls	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	3301      	adds	r3, #1
 80080b0:	61bb      	str	r3, [r7, #24]
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	2b07      	cmp	r3, #7
 80080b6:	d9c3      	bls.n	8008040 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	881b      	ldrh	r3, [r3, #0]
 80080c2:	2bff      	cmp	r3, #255	; 0xff
 80080c4:	d946      	bls.n	8008154 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80080cc:	2300      	movs	r3, #0
 80080ce:	61bb      	str	r3, [r7, #24]
 80080d0:	e03a      	b.n	8008148 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	3308      	adds	r3, #8
 80080d6:	2201      	movs	r2, #1
 80080d8:	fa02 f303 	lsl.w	r3, r2, r3
 80080dc:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	881b      	ldrh	r3, [r3, #0]
 80080e2:	461a      	mov	r2, r3
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	4013      	ands	r3, r2
 80080e8:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80080ea:	693a      	ldr	r2, [r7, #16]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d127      	bne.n	8008142 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80080f8:	220f      	movs	r2, #15
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008100:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	43db      	mvns	r3, r3
 8008106:	697a      	ldr	r2, [r7, #20]
 8008108:	4013      	ands	r3, r2
 800810a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800810c:	69fa      	ldr	r2, [r7, #28]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	fa02 f303 	lsl.w	r3, r2, r3
 8008114:	697a      	ldr	r2, [r7, #20]
 8008116:	4313      	orrs	r3, r2
 8008118:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	78db      	ldrb	r3, [r3, #3]
 800811e:	2b28      	cmp	r3, #40	; 0x28
 8008120:	d105      	bne.n	800812e <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	3308      	adds	r3, #8
 8008126:	2201      	movs	r2, #1
 8008128:	409a      	lsls	r2, r3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	78db      	ldrb	r3, [r3, #3]
 8008132:	2b48      	cmp	r3, #72	; 0x48
 8008134:	d105      	bne.n	8008142 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	3308      	adds	r3, #8
 800813a:	2201      	movs	r2, #1
 800813c:	409a      	lsls	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	3301      	adds	r3, #1
 8008146:	61bb      	str	r3, [r7, #24]
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	2b07      	cmp	r3, #7
 800814c:	d9c1      	bls.n	80080d2 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	697a      	ldr	r2, [r7, #20]
 8008152:	605a      	str	r2, [r3, #4]
  }
}
 8008154:	bf00      	nop
 8008156:	3724      	adds	r7, #36	; 0x24
 8008158:	46bd      	mov	sp, r7
 800815a:	bc80      	pop	{r7}
 800815c:	4770      	bx	lr

0800815e <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 800815e:	b480      	push	{r7}
 8008160:	b083      	sub	sp, #12
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800816c:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2202      	movs	r2, #2
 8008172:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2204      	movs	r2, #4
 8008178:	70da      	strb	r2, [r3, #3]
}
 800817a:	bf00      	nop
 800817c:	370c      	adds	r7, #12
 800817e:	46bd      	mov	sp, r7
 8008180:	bc80      	pop	{r7}
 8008182:	4770      	bx	lr

08008184 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800818c:	2300      	movs	r3, #0
 800818e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 8008190:	4b09      	ldr	r3, [pc, #36]	; (80081b8 <RCC_ADCCLKConfig+0x34>)
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800819c:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80081a6:	4a04      	ldr	r2, [pc, #16]	; (80081b8 <RCC_ADCCLKConfig+0x34>)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6053      	str	r3, [r2, #4]
}
 80081ac:	bf00      	nop
 80081ae:	3714      	adds	r7, #20
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bc80      	pop	{r7}
 80081b4:	4770      	bx	lr
 80081b6:	bf00      	nop
 80081b8:	40021000 	.word	0x40021000

080081bc <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80081bc:	b480      	push	{r7}
 80081be:	b087      	sub	sp, #28
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 80081c4:	2300      	movs	r3, #0
 80081c6:	617b      	str	r3, [r7, #20]
 80081c8:	2300      	movs	r3, #0
 80081ca:	613b      	str	r3, [r7, #16]
 80081cc:	2300      	movs	r3, #0
 80081ce:	60fb      	str	r3, [r7, #12]
 80081d0:	2300      	movs	r3, #0
 80081d2:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80081d4:	4b4c      	ldr	r3, [pc, #304]	; (8008308 <RCC_GetClocksFreq+0x14c>)
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	f003 030c 	and.w	r3, r3, #12
 80081dc:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	2b04      	cmp	r3, #4
 80081e2:	d007      	beq.n	80081f4 <RCC_GetClocksFreq+0x38>
 80081e4:	2b08      	cmp	r3, #8
 80081e6:	d009      	beq.n	80081fc <RCC_GetClocksFreq+0x40>
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d133      	bne.n	8008254 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a47      	ldr	r2, [pc, #284]	; (800830c <RCC_GetClocksFreq+0x150>)
 80081f0:	601a      	str	r2, [r3, #0]
      break;
 80081f2:	e033      	b.n	800825c <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4a45      	ldr	r2, [pc, #276]	; (800830c <RCC_GetClocksFreq+0x150>)
 80081f8:	601a      	str	r2, [r3, #0]
      break;
 80081fa:	e02f      	b.n	800825c <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80081fc:	4b42      	ldr	r3, [pc, #264]	; (8008308 <RCC_GetClocksFreq+0x14c>)
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8008204:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8008206:	4b40      	ldr	r3, [pc, #256]	; (8008308 <RCC_GetClocksFreq+0x14c>)
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800820e:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	0c9b      	lsrs	r3, r3, #18
 8008214:	3302      	adds	r3, #2
 8008216:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d106      	bne.n	800822c <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	4a3b      	ldr	r2, [pc, #236]	; (8008310 <RCC_GetClocksFreq+0x154>)
 8008222:	fb02 f203 	mul.w	r2, r2, r3
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 800822a:	e017      	b.n	800825c <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 800822c:	4b36      	ldr	r3, [pc, #216]	; (8008308 <RCC_GetClocksFreq+0x14c>)
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008234:	2b00      	cmp	r3, #0
 8008236:	d006      	beq.n	8008246 <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	4a35      	ldr	r2, [pc, #212]	; (8008310 <RCC_GetClocksFreq+0x154>)
 800823c:	fb02 f203 	mul.w	r2, r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	601a      	str	r2, [r3, #0]
      break;
 8008244:	e00a      	b.n	800825c <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	4a30      	ldr	r2, [pc, #192]	; (800830c <RCC_GetClocksFreq+0x150>)
 800824a:	fb02 f203 	mul.w	r2, r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	601a      	str	r2, [r3, #0]
      break;
 8008252:	e003      	b.n	800825c <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4a2d      	ldr	r2, [pc, #180]	; (800830c <RCC_GetClocksFreq+0x150>)
 8008258:	601a      	str	r2, [r3, #0]
      break;
 800825a:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 800825c:	4b2a      	ldr	r3, [pc, #168]	; (8008308 <RCC_GetClocksFreq+0x14c>)
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008264:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	091b      	lsrs	r3, r3, #4
 800826a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 800826c:	4a29      	ldr	r2, [pc, #164]	; (8008314 <RCC_GetClocksFreq+0x158>)
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	4413      	add	r3, r2
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	b2db      	uxtb	r3, r3
 8008276:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	40da      	lsrs	r2, r3
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8008284:	4b20      	ldr	r3, [pc, #128]	; (8008308 <RCC_GetClocksFreq+0x14c>)
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800828c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	0a1b      	lsrs	r3, r3, #8
 8008292:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8008294:	4a1f      	ldr	r2, [pc, #124]	; (8008314 <RCC_GetClocksFreq+0x158>)
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	4413      	add	r3, r2
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	b2db      	uxtb	r3, r3
 800829e:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	685a      	ldr	r2, [r3, #4]
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	40da      	lsrs	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 80082ac:	4b16      	ldr	r3, [pc, #88]	; (8008308 <RCC_GetClocksFreq+0x14c>)
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80082b4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	0adb      	lsrs	r3, r3, #11
 80082ba:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80082bc:	4a15      	ldr	r2, [pc, #84]	; (8008314 <RCC_GetClocksFreq+0x158>)
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	4413      	add	r3, r2
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	685a      	ldr	r2, [r3, #4]
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	40da      	lsrs	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 80082d4:	4b0c      	ldr	r3, [pc, #48]	; (8008308 <RCC_GetClocksFreq+0x14c>)
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80082dc:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	0b9b      	lsrs	r3, r3, #14
 80082e2:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 80082e4:	4a0c      	ldr	r2, [pc, #48]	; (8008318 <RCC_GetClocksFreq+0x15c>)
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	4413      	add	r3, r2
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	68da      	ldr	r2, [r3, #12]
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	611a      	str	r2, [r3, #16]
}
 80082fe:	bf00      	nop
 8008300:	371c      	adds	r7, #28
 8008302:	46bd      	mov	sp, r7
 8008304:	bc80      	pop	{r7}
 8008306:	4770      	bx	lr
 8008308:	40021000 	.word	0x40021000
 800830c:	007a1200 	.word	0x007a1200
 8008310:	003d0900 	.word	0x003d0900
 8008314:	20000000 	.word	0x20000000
 8008318:	20000010 	.word	0x20000010

0800831c <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	460b      	mov	r3, r1
 8008326:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008328:	78fb      	ldrb	r3, [r7, #3]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d006      	beq.n	800833c <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800832e:	4909      	ldr	r1, [pc, #36]	; (8008354 <RCC_AHBPeriphClockCmd+0x38>)
 8008330:	4b08      	ldr	r3, [pc, #32]	; (8008354 <RCC_AHBPeriphClockCmd+0x38>)
 8008332:	695a      	ldr	r2, [r3, #20]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4313      	orrs	r3, r2
 8008338:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 800833a:	e006      	b.n	800834a <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 800833c:	4905      	ldr	r1, [pc, #20]	; (8008354 <RCC_AHBPeriphClockCmd+0x38>)
 800833e:	4b05      	ldr	r3, [pc, #20]	; (8008354 <RCC_AHBPeriphClockCmd+0x38>)
 8008340:	695a      	ldr	r2, [r3, #20]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	43db      	mvns	r3, r3
 8008346:	4013      	ands	r3, r2
 8008348:	614b      	str	r3, [r1, #20]
}
 800834a:	bf00      	nop
 800834c:	370c      	adds	r7, #12
 800834e:	46bd      	mov	sp, r7
 8008350:	bc80      	pop	{r7}
 8008352:	4770      	bx	lr
 8008354:	40021000 	.word	0x40021000

08008358 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	460b      	mov	r3, r1
 8008362:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008364:	78fb      	ldrb	r3, [r7, #3]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d006      	beq.n	8008378 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800836a:	4909      	ldr	r1, [pc, #36]	; (8008390 <RCC_APB2PeriphClockCmd+0x38>)
 800836c:	4b08      	ldr	r3, [pc, #32]	; (8008390 <RCC_APB2PeriphClockCmd+0x38>)
 800836e:	699a      	ldr	r2, [r3, #24]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4313      	orrs	r3, r2
 8008374:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8008376:	e006      	b.n	8008386 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8008378:	4905      	ldr	r1, [pc, #20]	; (8008390 <RCC_APB2PeriphClockCmd+0x38>)
 800837a:	4b05      	ldr	r3, [pc, #20]	; (8008390 <RCC_APB2PeriphClockCmd+0x38>)
 800837c:	699a      	ldr	r2, [r3, #24]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	43db      	mvns	r3, r3
 8008382:	4013      	ands	r3, r2
 8008384:	618b      	str	r3, [r1, #24]
}
 8008386:	bf00      	nop
 8008388:	370c      	adds	r7, #12
 800838a:	46bd      	mov	sp, r7
 800838c:	bc80      	pop	{r7}
 800838e:	4770      	bx	lr
 8008390:	40021000 	.word	0x40021000

08008394 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	460b      	mov	r3, r1
 800839e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80083a0:	78fb      	ldrb	r3, [r7, #3]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d006      	beq.n	80083b4 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80083a6:	4909      	ldr	r1, [pc, #36]	; (80083cc <RCC_APB1PeriphClockCmd+0x38>)
 80083a8:	4b08      	ldr	r3, [pc, #32]	; (80083cc <RCC_APB1PeriphClockCmd+0x38>)
 80083aa:	69da      	ldr	r2, [r3, #28]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80083b2:	e006      	b.n	80083c2 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80083b4:	4905      	ldr	r1, [pc, #20]	; (80083cc <RCC_APB1PeriphClockCmd+0x38>)
 80083b6:	4b05      	ldr	r3, [pc, #20]	; (80083cc <RCC_APB1PeriphClockCmd+0x38>)
 80083b8:	69da      	ldr	r2, [r3, #28]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	43db      	mvns	r3, r3
 80083be:	4013      	ands	r3, r2
 80083c0:	61cb      	str	r3, [r1, #28]
}
 80083c2:	bf00      	nop
 80083c4:	370c      	adds	r7, #12
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bc80      	pop	{r7}
 80083ca:	4770      	bx	lr
 80083cc:	40021000 	.word	0x40021000

080083d0 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80083da:	2300      	movs	r3, #0
 80083dc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	881b      	ldrh	r3, [r3, #0]
 80083e2:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4a2e      	ldr	r2, [pc, #184]	; (80084a0 <TIM_TimeBaseInit+0xd0>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d013      	beq.n	8008414 <TIM_TimeBaseInit+0x44>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a2d      	ldr	r2, [pc, #180]	; (80084a4 <TIM_TimeBaseInit+0xd4>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d00f      	beq.n	8008414 <TIM_TimeBaseInit+0x44>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083fa:	d00b      	beq.n	8008414 <TIM_TimeBaseInit+0x44>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a2a      	ldr	r2, [pc, #168]	; (80084a8 <TIM_TimeBaseInit+0xd8>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d007      	beq.n	8008414 <TIM_TimeBaseInit+0x44>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a29      	ldr	r2, [pc, #164]	; (80084ac <TIM_TimeBaseInit+0xdc>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d003      	beq.n	8008414 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a28      	ldr	r2, [pc, #160]	; (80084b0 <TIM_TimeBaseInit+0xe0>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d108      	bne.n	8008426 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8008414:	89fb      	ldrh	r3, [r7, #14]
 8008416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800841a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	885a      	ldrh	r2, [r3, #2]
 8008420:	89fb      	ldrh	r3, [r7, #14]
 8008422:	4313      	orrs	r3, r2
 8008424:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a22      	ldr	r2, [pc, #136]	; (80084b4 <TIM_TimeBaseInit+0xe4>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d00c      	beq.n	8008448 <TIM_TimeBaseInit+0x78>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a21      	ldr	r2, [pc, #132]	; (80084b8 <TIM_TimeBaseInit+0xe8>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d008      	beq.n	8008448 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8008436:	89fb      	ldrh	r3, [r7, #14]
 8008438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800843c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	88da      	ldrh	r2, [r3, #6]
 8008442:	89fb      	ldrh	r3, [r7, #14]
 8008444:	4313      	orrs	r3, r2
 8008446:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	89fa      	ldrh	r2, [r7, #14]
 800844c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	889a      	ldrh	r2, [r3, #4]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	881a      	ldrh	r2, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a0f      	ldr	r2, [pc, #60]	; (80084a0 <TIM_TimeBaseInit+0xd0>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d00f      	beq.n	8008486 <TIM_TimeBaseInit+0xb6>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a0e      	ldr	r2, [pc, #56]	; (80084a4 <TIM_TimeBaseInit+0xd4>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d00b      	beq.n	8008486 <TIM_TimeBaseInit+0xb6>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a12      	ldr	r2, [pc, #72]	; (80084bc <TIM_TimeBaseInit+0xec>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d007      	beq.n	8008486 <TIM_TimeBaseInit+0xb6>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4a11      	ldr	r2, [pc, #68]	; (80084c0 <TIM_TimeBaseInit+0xf0>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d003      	beq.n	8008486 <TIM_TimeBaseInit+0xb6>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a10      	ldr	r2, [pc, #64]	; (80084c4 <TIM_TimeBaseInit+0xf4>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d104      	bne.n	8008490 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	7a1b      	ldrb	r3, [r3, #8]
 800848a:	b29a      	uxth	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	829a      	strh	r2, [r3, #20]
}
 8008496:	bf00      	nop
 8008498:	3714      	adds	r7, #20
 800849a:	46bd      	mov	sp, r7
 800849c:	bc80      	pop	{r7}
 800849e:	4770      	bx	lr
 80084a0:	40012c00 	.word	0x40012c00
 80084a4:	40013400 	.word	0x40013400
 80084a8:	40000400 	.word	0x40000400
 80084ac:	40000800 	.word	0x40000800
 80084b0:	40000c00 	.word	0x40000c00
 80084b4:	40001000 	.word	0x40001000
 80084b8:	40001400 	.word	0x40001400
 80084bc:	40014000 	.word	0x40014000
 80084c0:	40014400 	.word	0x40014400
 80084c4:	40014800 	.word	0x40014800

080084c8 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  }
  else
  {
    assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	881b      	ldrh	r3, [r3, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d10f      	bne.n	80084fa <TIM_ICInit+0x32>
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	8859      	ldrh	r1, [r3, #2]
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	889a      	ldrh	r2, [r3, #4]
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	891b      	ldrh	r3, [r3, #8]
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 f94e 	bl	8008788 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	88db      	ldrh	r3, [r3, #6]
 80084f0:	4619      	mov	r1, r3
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f88c 	bl	8008610 <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80084f8:	e036      	b.n	8008568 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	881b      	ldrh	r3, [r3, #0]
 80084fe:	2b04      	cmp	r3, #4
 8008500:	d10f      	bne.n	8008522 <TIM_ICInit+0x5a>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	8859      	ldrh	r1, [r3, #2]
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	889a      	ldrh	r2, [r3, #4]
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	891b      	ldrh	r3, [r3, #8]
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f9aa 	bl	8008868 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	88db      	ldrh	r3, [r3, #6]
 8008518:	4619      	mov	r1, r3
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 f893 	bl	8008646 <TIM_SetIC2Prescaler>
}
 8008520:	e022      	b.n	8008568 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	881b      	ldrh	r3, [r3, #0]
 8008526:	2b08      	cmp	r3, #8
 8008528:	d10f      	bne.n	800854a <TIM_ICInit+0x82>
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	8859      	ldrh	r1, [r3, #2]
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	889a      	ldrh	r2, [r3, #4]
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	891b      	ldrh	r3, [r3, #8]
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fa10 	bl	800895c <TI3_Config>
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	88db      	ldrh	r3, [r3, #6]
 8008540:	4619      	mov	r1, r3
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f89c 	bl	8008680 <TIM_SetIC3Prescaler>
}
 8008548:	e00e      	b.n	8008568 <TIM_ICInit+0xa0>
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	8859      	ldrh	r1, [r3, #2]
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	889a      	ldrh	r2, [r3, #4]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	891b      	ldrh	r3, [r3, #8]
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 fa76 	bl	8008a48 <TI4_Config>
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	88db      	ldrh	r3, [r3, #6]
 8008560:	4619      	mov	r1, r3
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 f8a7 	bl	80086b6 <TIM_SetIC4Prescaler>
}
 8008568:	bf00      	nop
 800856a:	3708      	adds	r7, #8
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800857e:	809a      	strh	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	80da      	strh	r2, [r3, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	721a      	strb	r2, [r3, #8]
}
 8008598:	bf00      	nop
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	bc80      	pop	{r7}
 80085a0:	4770      	bx	lr

080085a2 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80085a2:	b480      	push	{r7}
 80085a4:	b083      	sub	sp, #12
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	811a      	strh	r2, [r3, #8]
}
 80085c8:	bf00      	nop
 80085ca:	370c      	adds	r7, #12
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bc80      	pop	{r7}
 80085d0:	4770      	bx	lr

080085d2 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80085d2:	b480      	push	{r7}
 80085d4:	b083      	sub	sp, #12
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	460b      	mov	r3, r1
 80085dc:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80085de:	78fb      	ldrb	r3, [r7, #3]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d008      	beq.n	80085f6 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	881b      	ldrh	r3, [r3, #0]
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	f043 0301 	orr.w	r3, r3, #1
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 80085f4:	e007      	b.n	8008606 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	881b      	ldrh	r3, [r3, #0]
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	f023 0301 	bic.w	r3, r3, #1
 8008600:	b29a      	uxth	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	801a      	strh	r2, [r3, #0]
}
 8008606:	bf00      	nop
 8008608:	370c      	adds	r7, #12
 800860a:	46bd      	mov	sp, r7
 800860c:	bc80      	pop	{r7}
 800860e:	4770      	bx	lr

08008610 <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	460b      	mov	r3, r1
 800861a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	8b1b      	ldrh	r3, [r3, #24]
 8008620:	b29b      	uxth	r3, r3
 8008622:	f023 030c 	bic.w	r3, r3, #12
 8008626:	b29a      	uxth	r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	831a      	strh	r2, [r3, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	8b1b      	ldrh	r3, [r3, #24]
 8008630:	b29a      	uxth	r2, r3
 8008632:	887b      	ldrh	r3, [r7, #2]
 8008634:	4313      	orrs	r3, r2
 8008636:	b29a      	uxth	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	831a      	strh	r2, [r3, #24]
}
 800863c:	bf00      	nop
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	bc80      	pop	{r7}
 8008644:	4770      	bx	lr

08008646 <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8008646:	b480      	push	{r7}
 8008648:	b083      	sub	sp, #12
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
 800864e:	460b      	mov	r3, r1
 8008650:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	8b1b      	ldrh	r3, [r3, #24]
 8008656:	b29b      	uxth	r3, r3
 8008658:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800865c:	b29a      	uxth	r2, r3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	831a      	strh	r2, [r3, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	8b1b      	ldrh	r3, [r3, #24]
 8008666:	b29a      	uxth	r2, r3
 8008668:	887b      	ldrh	r3, [r7, #2]
 800866a:	021b      	lsls	r3, r3, #8
 800866c:	b29b      	uxth	r3, r3
 800866e:	4313      	orrs	r3, r2
 8008670:	b29a      	uxth	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	831a      	strh	r2, [r3, #24]
}
 8008676:	bf00      	nop
 8008678:	370c      	adds	r7, #12
 800867a:	46bd      	mov	sp, r7
 800867c:	bc80      	pop	{r7}
 800867e:	4770      	bx	lr

08008680 <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	460b      	mov	r3, r1
 800868a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	8b9b      	ldrh	r3, [r3, #28]
 8008690:	b29b      	uxth	r3, r3
 8008692:	f023 030c 	bic.w	r3, r3, #12
 8008696:	b29a      	uxth	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	839a      	strh	r2, [r3, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	8b9b      	ldrh	r3, [r3, #28]
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	887b      	ldrh	r3, [r7, #2]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	839a      	strh	r2, [r3, #28]
}
 80086ac:	bf00      	nop
 80086ae:	370c      	adds	r7, #12
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bc80      	pop	{r7}
 80086b4:	4770      	bx	lr

080086b6 <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 80086b6:	b480      	push	{r7}
 80086b8:	b083      	sub	sp, #12
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
 80086be:	460b      	mov	r3, r1
 80086c0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	8b9b      	ldrh	r3, [r3, #28]
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	839a      	strh	r2, [r3, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	8b9b      	ldrh	r3, [r3, #28]
 80086d6:	b29a      	uxth	r2, r3
 80086d8:	887b      	ldrh	r3, [r7, #2]
 80086da:	021b      	lsls	r3, r3, #8
 80086dc:	b29b      	uxth	r3, r3
 80086de:	4313      	orrs	r3, r2
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	839a      	strh	r2, [r3, #28]
}
 80086e6:	bf00      	nop
 80086e8:	370c      	adds	r7, #12
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bc80      	pop	{r7}
 80086ee:	4770      	bx	lr

080086f0 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80086fc:	b29b      	uxth	r3, r3
}
 80086fe:	4618      	mov	r0, r3
 8008700:	370c      	adds	r7, #12
 8008702:	46bd      	mov	sp, r7
 8008704:	bc80      	pop	{r7}
 8008706:	4770      	bx	lr

08008708 <TIM_GetCapture2>:
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8008714:	b29b      	uxth	r3, r3
}
 8008716:	4618      	mov	r0, r3
 8008718:	370c      	adds	r7, #12
 800871a:	46bd      	mov	sp, r7
 800871c:	bc80      	pop	{r7}
 800871e:	4770      	bx	lr

08008720 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800872c:	b29b      	uxth	r3, r3
}
 800872e:	4618      	mov	r0, r3
 8008730:	370c      	adds	r7, #12
 8008732:	46bd      	mov	sp, r7
 8008734:	bc80      	pop	{r7}
 8008736:	4770      	bx	lr

08008738 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008746:	b29b      	uxth	r3, r3
}
 8008748:	4618      	mov	r0, r3
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	bc80      	pop	{r7}
 8008750:	4770      	bx	lr

08008752 <TIM_GetFlagStatus>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 8008752:	b480      	push	{r7}
 8008754:	b085      	sub	sp, #20
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
 800875a:	460b      	mov	r3, r1
 800875c:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 800875e:	2300      	movs	r3, #0
 8008760:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	8a1b      	ldrh	r3, [r3, #16]
 8008766:	b29a      	uxth	r2, r3
 8008768:	887b      	ldrh	r3, [r7, #2]
 800876a:	4013      	ands	r3, r2
 800876c:	b29b      	uxth	r3, r3
 800876e:	2b00      	cmp	r3, #0
 8008770:	d002      	beq.n	8008778 <TIM_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8008772:	2301      	movs	r3, #1
 8008774:	73fb      	strb	r3, [r7, #15]
 8008776:	e001      	b.n	800877c <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8008778:	2300      	movs	r3, #0
 800877a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800877c:	7bfb      	ldrb	r3, [r7, #15]
}
 800877e:	4618      	mov	r0, r3
 8008780:	3714      	adds	r7, #20
 8008782:	46bd      	mov	sp, r7
 8008784:	bc80      	pop	{r7}
 8008786:	4770      	bx	lr

08008788 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8008788:	b480      	push	{r7}
 800878a:	b087      	sub	sp, #28
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	4608      	mov	r0, r1
 8008792:	4611      	mov	r1, r2
 8008794:	461a      	mov	r2, r3
 8008796:	4603      	mov	r3, r0
 8008798:	817b      	strh	r3, [r7, #10]
 800879a:	460b      	mov	r3, r1
 800879c:	813b      	strh	r3, [r7, #8]
 800879e:	4613      	mov	r3, r2
 80087a0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 80087a2:	2300      	movs	r3, #0
 80087a4:	82bb      	strh	r3, [r7, #20]
 80087a6:	2300      	movs	r3, #0
 80087a8:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	8c1b      	ldrh	r3, [r3, #32]
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	f023 0301 	bic.w	r3, r3, #1
 80087b4:	b29a      	uxth	r2, r3
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	8b1b      	ldrh	r3, [r3, #24]
 80087be:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	8c1b      	ldrh	r3, [r3, #32]
 80087c4:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 80087c6:	8abb      	ldrh	r3, [r7, #20]
 80087c8:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 80087cc:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80087ce:	88fb      	ldrh	r3, [r7, #6]
 80087d0:	011b      	lsls	r3, r3, #4
 80087d2:	b29a      	uxth	r2, r3
 80087d4:	893b      	ldrh	r3, [r7, #8]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	b29a      	uxth	r2, r3
 80087da:	8abb      	ldrh	r3, [r7, #20]
 80087dc:	4313      	orrs	r3, r2
 80087de:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	4a1c      	ldr	r2, [pc, #112]	; (8008854 <TI1_Config+0xcc>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d013      	beq.n	8008810 <TI1_Config+0x88>
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	4a1b      	ldr	r2, [pc, #108]	; (8008858 <TI1_Config+0xd0>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d00f      	beq.n	8008810 <TI1_Config+0x88>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087f6:	d00b      	beq.n	8008810 <TI1_Config+0x88>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	4a18      	ldr	r2, [pc, #96]	; (800885c <TI1_Config+0xd4>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d007      	beq.n	8008810 <TI1_Config+0x88>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	4a17      	ldr	r2, [pc, #92]	; (8008860 <TI1_Config+0xd8>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d003      	beq.n	8008810 <TI1_Config+0x88>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	4a16      	ldr	r2, [pc, #88]	; (8008864 <TI1_Config+0xdc>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d10b      	bne.n	8008828 <TI1_Config+0xa0>
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
 8008810:	8afb      	ldrh	r3, [r7, #22]
 8008812:	f023 0302 	bic.w	r3, r3, #2
 8008816:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8008818:	897a      	ldrh	r2, [r7, #10]
 800881a:	8afb      	ldrh	r3, [r7, #22]
 800881c:	4313      	orrs	r3, r2
 800881e:	b29b      	uxth	r3, r3
 8008820:	f043 0301 	orr.w	r3, r3, #1
 8008824:	82fb      	strh	r3, [r7, #22]
 8008826:	e00a      	b.n	800883e <TI1_Config+0xb6>
  }
  else
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008828:	8afb      	ldrh	r3, [r7, #22]
 800882a:	f023 030a 	bic.w	r3, r3, #10
 800882e:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8008830:	897a      	ldrh	r2, [r7, #10]
 8008832:	8afb      	ldrh	r3, [r7, #22]
 8008834:	4313      	orrs	r3, r2
 8008836:	b29b      	uxth	r3, r3
 8008838:	f043 0301 	orr.w	r3, r3, #1
 800883c:	82fb      	strh	r3, [r7, #22]
  }

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	8aba      	ldrh	r2, [r7, #20]
 8008842:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	8afa      	ldrh	r2, [r7, #22]
 8008848:	841a      	strh	r2, [r3, #32]
}
 800884a:	bf00      	nop
 800884c:	371c      	adds	r7, #28
 800884e:	46bd      	mov	sp, r7
 8008850:	bc80      	pop	{r7}
 8008852:	4770      	bx	lr
 8008854:	40012c00 	.word	0x40012c00
 8008858:	40013400 	.word	0x40013400
 800885c:	40000400 	.word	0x40000400
 8008860:	40000800 	.word	0x40000800
 8008864:	40000c00 	.word	0x40000c00

08008868 <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8008868:	b480      	push	{r7}
 800886a:	b087      	sub	sp, #28
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	4608      	mov	r0, r1
 8008872:	4611      	mov	r1, r2
 8008874:	461a      	mov	r2, r3
 8008876:	4603      	mov	r3, r0
 8008878:	817b      	strh	r3, [r7, #10]
 800887a:	460b      	mov	r3, r1
 800887c:	813b      	strh	r3, [r7, #8]
 800887e:	4613      	mov	r3, r2
 8008880:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 8008882:	2300      	movs	r3, #0
 8008884:	82bb      	strh	r3, [r7, #20]
 8008886:	2300      	movs	r3, #0
 8008888:	82fb      	strh	r3, [r7, #22]
 800888a:	2300      	movs	r3, #0
 800888c:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	8c1b      	ldrh	r3, [r3, #32]
 8008892:	b29b      	uxth	r3, r3
 8008894:	f023 0310 	bic.w	r3, r3, #16
 8008898:	b29a      	uxth	r2, r3
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	8b1b      	ldrh	r3, [r3, #24]
 80088a2:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	8c1b      	ldrh	r3, [r3, #32]
 80088a8:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 80088aa:	897b      	ldrh	r3, [r7, #10]
 80088ac:	011b      	lsls	r3, r3, #4
 80088ae:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 80088b0:	8abb      	ldrh	r3, [r7, #20]
 80088b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088b6:	051b      	lsls	r3, r3, #20
 80088b8:	0d1b      	lsrs	r3, r3, #20
 80088ba:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 80088bc:	88fb      	ldrh	r3, [r7, #6]
 80088be:	031b      	lsls	r3, r3, #12
 80088c0:	b29a      	uxth	r2, r3
 80088c2:	8abb      	ldrh	r3, [r7, #20]
 80088c4:	4313      	orrs	r3, r2
 80088c6:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 80088c8:	893b      	ldrh	r3, [r7, #8]
 80088ca:	021b      	lsls	r3, r3, #8
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	8abb      	ldrh	r3, [r7, #20]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	4a1c      	ldr	r2, [pc, #112]	; (8008948 <TI2_Config+0xe0>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d013      	beq.n	8008904 <TI2_Config+0x9c>
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	4a1b      	ldr	r2, [pc, #108]	; (800894c <TI2_Config+0xe4>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d00f      	beq.n	8008904 <TI2_Config+0x9c>
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088ea:	d00b      	beq.n	8008904 <TI2_Config+0x9c>
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	4a18      	ldr	r2, [pc, #96]	; (8008950 <TI2_Config+0xe8>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d007      	beq.n	8008904 <TI2_Config+0x9c>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	4a17      	ldr	r2, [pc, #92]	; (8008954 <TI2_Config+0xec>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d003      	beq.n	8008904 <TI2_Config+0x9c>
     (TIMx == TIM4) ||(TIMx == TIM5))
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	4a16      	ldr	r2, [pc, #88]	; (8008958 <TI2_Config+0xf0>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d10b      	bne.n	800891c <TI2_Config+0xb4>
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
 8008904:	8afb      	ldrh	r3, [r7, #22]
 8008906:	f023 0320 	bic.w	r3, r3, #32
 800890a:	82fb      	strh	r3, [r7, #22]
    tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800890c:	8a7a      	ldrh	r2, [r7, #18]
 800890e:	8afb      	ldrh	r3, [r7, #22]
 8008910:	4313      	orrs	r3, r2
 8008912:	b29b      	uxth	r3, r3
 8008914:	f043 0310 	orr.w	r3, r3, #16
 8008918:	82fb      	strh	r3, [r7, #22]
 800891a:	e00a      	b.n	8008932 <TI2_Config+0xca>
  }
  else
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800891c:	8afb      	ldrh	r3, [r7, #22]
 800891e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008922:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
 8008924:	897a      	ldrh	r2, [r7, #10]
 8008926:	8afb      	ldrh	r3, [r7, #22]
 8008928:	4313      	orrs	r3, r2
 800892a:	b29b      	uxth	r3, r3
 800892c:	f043 0310 	orr.w	r3, r3, #16
 8008930:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	8aba      	ldrh	r2, [r7, #20]
 8008936:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	8afa      	ldrh	r2, [r7, #22]
 800893c:	841a      	strh	r2, [r3, #32]
}
 800893e:	bf00      	nop
 8008940:	371c      	adds	r7, #28
 8008942:	46bd      	mov	sp, r7
 8008944:	bc80      	pop	{r7}
 8008946:	4770      	bx	lr
 8008948:	40012c00 	.word	0x40012c00
 800894c:	40013400 	.word	0x40013400
 8008950:	40000400 	.word	0x40000400
 8008954:	40000800 	.word	0x40000800
 8008958:	40000c00 	.word	0x40000c00

0800895c <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800895c:	b480      	push	{r7}
 800895e:	b087      	sub	sp, #28
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	4608      	mov	r0, r1
 8008966:	4611      	mov	r1, r2
 8008968:	461a      	mov	r2, r3
 800896a:	4603      	mov	r3, r0
 800896c:	817b      	strh	r3, [r7, #10]
 800896e:	460b      	mov	r3, r1
 8008970:	813b      	strh	r3, [r7, #8]
 8008972:	4613      	mov	r3, r2
 8008974:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8008976:	2300      	movs	r3, #0
 8008978:	82bb      	strh	r3, [r7, #20]
 800897a:	2300      	movs	r3, #0
 800897c:	82fb      	strh	r3, [r7, #22]
 800897e:	2300      	movs	r3, #0
 8008980:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	8c1b      	ldrh	r3, [r3, #32]
 8008986:	b29b      	uxth	r3, r3
 8008988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800898c:	b29a      	uxth	r2, r3
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	8b9b      	ldrh	r3, [r3, #28]
 8008996:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	8c1b      	ldrh	r3, [r3, #32]
 800899c:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 800899e:	897b      	ldrh	r3, [r7, #10]
 80089a0:	021b      	lsls	r3, r3, #8
 80089a2:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 80089a4:	8abb      	ldrh	r3, [r7, #20]
 80089a6:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 80089aa:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80089ac:	88fb      	ldrh	r3, [r7, #6]
 80089ae:	011b      	lsls	r3, r3, #4
 80089b0:	b29a      	uxth	r2, r3
 80089b2:	893b      	ldrh	r3, [r7, #8]
 80089b4:	4313      	orrs	r3, r2
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	8abb      	ldrh	r3, [r7, #20]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	82bb      	strh	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	4a1c      	ldr	r2, [pc, #112]	; (8008a34 <TI3_Config+0xd8>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d013      	beq.n	80089ee <TI3_Config+0x92>
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	4a1b      	ldr	r2, [pc, #108]	; (8008a38 <TI3_Config+0xdc>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d00f      	beq.n	80089ee <TI3_Config+0x92>
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089d4:	d00b      	beq.n	80089ee <TI3_Config+0x92>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	4a18      	ldr	r2, [pc, #96]	; (8008a3c <TI3_Config+0xe0>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d007      	beq.n	80089ee <TI3_Config+0x92>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	4a17      	ldr	r2, [pc, #92]	; (8008a40 <TI3_Config+0xe4>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d003      	beq.n	80089ee <TI3_Config+0x92>
     (TIMx == TIM4) ||(TIMx == TIM5))
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	4a16      	ldr	r2, [pc, #88]	; (8008a44 <TI3_Config+0xe8>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d10b      	bne.n	8008a06 <TI3_Config+0xaa>
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
 80089ee:	8afb      	ldrh	r3, [r7, #22]
 80089f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089f4:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 80089f6:	8a7a      	ldrh	r2, [r7, #18]
 80089f8:	8afb      	ldrh	r3, [r7, #22]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a02:	82fb      	strh	r3, [r7, #22]
 8008a04:	e00a      	b.n	8008a1c <TI3_Config+0xc0>
  }
  else
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008a06:	8afb      	ldrh	r3, [r7, #22]
 8008a08:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008a0c:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
 8008a0e:	897a      	ldrh	r2, [r7, #10]
 8008a10:	8afb      	ldrh	r3, [r7, #22]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a1a:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	8aba      	ldrh	r2, [r7, #20]
 8008a20:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	8afa      	ldrh	r2, [r7, #22]
 8008a26:	841a      	strh	r2, [r3, #32]
}
 8008a28:	bf00      	nop
 8008a2a:	371c      	adds	r7, #28
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bc80      	pop	{r7}
 8008a30:	4770      	bx	lr
 8008a32:	bf00      	nop
 8008a34:	40012c00 	.word	0x40012c00
 8008a38:	40013400 	.word	0x40013400
 8008a3c:	40000400 	.word	0x40000400
 8008a40:	40000800 	.word	0x40000800
 8008a44:	40000c00 	.word	0x40000c00

08008a48 <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b087      	sub	sp, #28
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	4608      	mov	r0, r1
 8008a52:	4611      	mov	r1, r2
 8008a54:	461a      	mov	r2, r3
 8008a56:	4603      	mov	r3, r0
 8008a58:	817b      	strh	r3, [r7, #10]
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	813b      	strh	r3, [r7, #8]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8008a62:	2300      	movs	r3, #0
 8008a64:	82bb      	strh	r3, [r7, #20]
 8008a66:	2300      	movs	r3, #0
 8008a68:	82fb      	strh	r3, [r7, #22]
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	827b      	strh	r3, [r7, #18]

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	8c1b      	ldrh	r3, [r3, #32]
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	8b9b      	ldrh	r3, [r3, #28]
 8008a82:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	8c1b      	ldrh	r3, [r3, #32]
 8008a88:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8008a8a:	897b      	ldrh	r3, [r7, #10]
 8008a8c:	031b      	lsls	r3, r3, #12
 8008a8e:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 8008a90:	8abb      	ldrh	r3, [r7, #20]
 8008a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a96:	051b      	lsls	r3, r3, #20
 8008a98:	0d1b      	lsrs	r3, r3, #20
 8008a9a:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8008a9c:	893b      	ldrh	r3, [r7, #8]
 8008a9e:	021b      	lsls	r3, r3, #8
 8008aa0:	b29a      	uxth	r2, r3
 8008aa2:	8abb      	ldrh	r3, [r7, #20]
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8008aa8:	88fb      	ldrh	r3, [r7, #6]
 8008aaa:	031b      	lsls	r3, r3, #12
 8008aac:	b29a      	uxth	r2, r3
 8008aae:	8abb      	ldrh	r3, [r7, #20]
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	4a1d      	ldr	r2, [pc, #116]	; (8008b2c <TI4_Config+0xe4>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d013      	beq.n	8008ae4 <TI4_Config+0x9c>
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	4a1c      	ldr	r2, [pc, #112]	; (8008b30 <TI4_Config+0xe8>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d00f      	beq.n	8008ae4 <TI4_Config+0x9c>
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aca:	d00b      	beq.n	8008ae4 <TI4_Config+0x9c>
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	4a19      	ldr	r2, [pc, #100]	; (8008b34 <TI4_Config+0xec>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d007      	beq.n	8008ae4 <TI4_Config+0x9c>
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	4a18      	ldr	r2, [pc, #96]	; (8008b38 <TI4_Config+0xf0>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d003      	beq.n	8008ae4 <TI4_Config+0x9c>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	4a17      	ldr	r2, [pc, #92]	; (8008b3c <TI4_Config+0xf4>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d10b      	bne.n	8008afc <TI4_Config+0xb4>
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
 8008ae4:	8afb      	ldrh	r3, [r7, #22]
 8008ae6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008aea:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8008aec:	8a7a      	ldrh	r2, [r7, #18]
 8008aee:	8afb      	ldrh	r3, [r7, #22]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008af8:	82fb      	strh	r3, [r7, #22]
 8008afa:	e00c      	b.n	8008b16 <TI4_Config+0xce>
  }
  else
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
 8008afc:	8afb      	ldrh	r3, [r7, #22]
 8008afe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b02:	045b      	lsls	r3, r3, #17
 8008b04:	0c5b      	lsrs	r3, r3, #17
 8008b06:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
 8008b08:	897a      	ldrh	r2, [r7, #10]
 8008b0a:	8afb      	ldrh	r3, [r7, #22]
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008b14:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	8aba      	ldrh	r2, [r7, #20]
 8008b1a:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	8afa      	ldrh	r2, [r7, #22]
 8008b20:	841a      	strh	r2, [r3, #32]
}
 8008b22:	bf00      	nop
 8008b24:	371c      	adds	r7, #28
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bc80      	pop	{r7}
 8008b2a:	4770      	bx	lr
 8008b2c:	40012c00 	.word	0x40012c00
 8008b30:	40013400 	.word	0x40013400
 8008b34:	40000400 	.word	0x40000400
 8008b38:	40000800 	.word	0x40000800
 8008b3c:	40000c00 	.word	0x40000c00

08008b40 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b08c      	sub	sp, #48	; 0x30
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b4e:	2300      	movs	r3, #0
 8008b50:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 8008b52:	2300      	movs	r3, #0
 8008b54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8008b56:	2300      	movs	r3, #0
 8008b58:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	8a1b      	ldrh	r3, [r3, #16]
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8008b6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b6c:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8008b70:	4013      	ands	r3, r2
 8008b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	88db      	ldrh	r3, [r3, #6]
 8008b78:	461a      	mov	r2, r3
 8008b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8008b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b82:	b29a      	uxth	r2, r3
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	899b      	ldrh	r3, [r3, #12]
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8008b90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b92:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8008b96:	4013      	ands	r3, r2
 8008b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	889a      	ldrh	r2, [r3, #4]
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	891b      	ldrh	r3, [r3, #8]
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8008baa:	4313      	orrs	r3, r2
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	461a      	mov	r2, r3
 8008bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8008bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb8:	b29a      	uxth	r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	8a9b      	ldrh	r3, [r3, #20]
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8008bc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bc8:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8008bcc:	4013      	ands	r3, r2
 8008bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	899b      	ldrh	r3, [r3, #12]
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8008bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bde:	b29a      	uxth	r2, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8008be4:	f107 0308 	add.w	r3, r7, #8
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7ff fae7 	bl	80081bc <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	4a2e      	ldr	r2, [pc, #184]	; (8008cac <USART_Init+0x16c>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d102      	bne.n	8008bfc <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bfa:	e001      	b.n	8008c00 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	899b      	ldrh	r3, [r3, #12]
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	b21b      	sxth	r3, r3
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	da0c      	bge.n	8008c26 <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8008c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c0e:	4613      	mov	r3, r2
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	4413      	add	r3, r2
 8008c14:	009a      	lsls	r2, r3, #2
 8008c16:	441a      	add	r2, r3
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	005b      	lsls	r3, r3, #1
 8008c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c22:	627b      	str	r3, [r7, #36]	; 0x24
 8008c24:	e00b      	b.n	8008c3e <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8008c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c28:	4613      	mov	r3, r2
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	4413      	add	r3, r2
 8008c2e:	009a      	lsls	r2, r3, #2
 8008c30:	441a      	add	r2, r3
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c3c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8008c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c40:	4a1b      	ldr	r2, [pc, #108]	; (8008cb0 <USART_Init+0x170>)
 8008c42:	fba2 2303 	umull	r2, r3, r2, r3
 8008c46:	095b      	lsrs	r3, r3, #5
 8008c48:	011b      	lsls	r3, r3, #4
 8008c4a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8008c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c4e:	091b      	lsrs	r3, r3, #4
 8008c50:	2264      	movs	r2, #100	; 0x64
 8008c52:	fb02 f303 	mul.w	r3, r2, r3
 8008c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c58:	1ad3      	subs	r3, r2, r3
 8008c5a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	899b      	ldrh	r3, [r3, #12]
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	b21b      	sxth	r3, r3
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	da0c      	bge.n	8008c82 <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8008c68:	6a3b      	ldr	r3, [r7, #32]
 8008c6a:	00db      	lsls	r3, r3, #3
 8008c6c:	3332      	adds	r3, #50	; 0x32
 8008c6e:	4a10      	ldr	r2, [pc, #64]	; (8008cb0 <USART_Init+0x170>)
 8008c70:	fba2 2303 	umull	r2, r3, r2, r3
 8008c74:	095b      	lsrs	r3, r3, #5
 8008c76:	f003 0307 	and.w	r3, r3, #7
 8008c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c80:	e00b      	b.n	8008c9a <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8008c82:	6a3b      	ldr	r3, [r7, #32]
 8008c84:	011b      	lsls	r3, r3, #4
 8008c86:	3332      	adds	r3, #50	; 0x32
 8008c88:	4a09      	ldr	r2, [pc, #36]	; (8008cb0 <USART_Init+0x170>)
 8008c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c8e:	095b      	lsrs	r3, r3, #5
 8008c90:	f003 030f 	and.w	r3, r3, #15
 8008c94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c96:	4313      	orrs	r3, r2
 8008c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8008c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c9c:	b29a      	uxth	r2, r3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	811a      	strh	r2, [r3, #8]
}
 8008ca2:	bf00      	nop
 8008ca4:	3730      	adds	r7, #48	; 0x30
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	40013800 	.word	0x40013800
 8008cb0:	51eb851f 	.word	0x51eb851f

08008cb4 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8008cc0:	78fb      	ldrb	r3, [r7, #3]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d008      	beq.n	8008cd8 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	899b      	ldrh	r3, [r3, #12]
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008cd0:	b29a      	uxth	r2, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8008cd6:	e007      	b.n	8008ce8 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	899b      	ldrh	r3, [r3, #12]
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ce2:	b29a      	uxth	r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	819a      	strh	r2, [r3, #12]
}
 8008ce8:	bf00      	nop
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bc80      	pop	{r7}
 8008cf0:	4770      	bx	lr

08008cf2 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 8008cf2:	b480      	push	{r7}
 8008cf4:	b083      	sub	sp, #12
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	807b      	strh	r3, [r7, #2]
 8008cfe:	4613      	mov	r3, r2
 8008d00:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
 8008d02:	787b      	ldrb	r3, [r7, #1]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d008      	beq.n	8008d1a <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	8a9b      	ldrh	r3, [r3, #20]
 8008d0c:	b29a      	uxth	r2, r3
 8008d0e:	887b      	ldrh	r3, [r7, #2]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	b29a      	uxth	r2, r3
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
 8008d18:	e009      	b.n	8008d2e <USART_DMACmd+0x3c>
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	8a9b      	ldrh	r3, [r3, #20]
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	887b      	ldrh	r3, [r7, #2]
 8008d22:	43db      	mvns	r3, r3
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	4013      	ands	r3, r2
 8008d28:	b29a      	uxth	r2, r3
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	829a      	strh	r2, [r3, #20]
}
 8008d2e:	bf00      	nop
 8008d30:	370c      	adds	r7, #12
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bc80      	pop	{r7}
 8008d36:	4770      	bx	lr

08008d38 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	460b      	mov	r3, r1
 8008d42:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8008d44:	887b      	ldrh	r3, [r7, #2]
 8008d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d4a:	b29a      	uxth	r2, r3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	809a      	strh	r2, [r3, #4]
}
 8008d50:	bf00      	nop
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bc80      	pop	{r7}
 8008d58:	4770      	bx	lr

08008d5a <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	b083      	sub	sp, #12
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	889b      	ldrh	r3, [r3, #4]
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d6c:	b29b      	uxth	r3, r3
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bc80      	pop	{r7}
 8008d76:	4770      	bx	lr

08008d78 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	460b      	mov	r3, r1
 8008d82:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8008d84:	2300      	movs	r3, #0
 8008d86:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	881b      	ldrh	r3, [r3, #0]
 8008d8c:	b29a      	uxth	r2, r3
 8008d8e:	887b      	ldrh	r3, [r7, #2]
 8008d90:	4013      	ands	r3, r2
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d002      	beq.n	8008d9e <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	73fb      	strb	r3, [r7, #15]
 8008d9c:	e001      	b.n	8008da2 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3714      	adds	r7, #20
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bc80      	pop	{r7}
 8008dac:	4770      	bx	lr

08008dae <_ZN5IGpio6ToggleEv>:
{
public:
	virtual void Set() = 0;
	virtual void Clear() = 0;
	virtual bool Get() const = 0;
	void Toggle()
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b082      	sub	sp, #8
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
	{
		if (Get()) Clear();
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	3308      	adds	r3, #8
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	4798      	blx	r3
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d006      	beq.n	8008dd6 <_ZN5IGpio6ToggleEv+0x28>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	3304      	adds	r3, #4
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	4798      	blx	r3
		else Set();
	}
 8008dd4:	e004      	b.n	8008de0 <_ZN5IGpio6ToggleEv+0x32>
		else Set();
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	4798      	blx	r3
	}
 8008de0:	bf00      	nop
 8008de2:	3708      	adds	r7, #8
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <_ZN10CHeartBeat4InitEP5IGpioP6ITimert>:
 */

#include <HeartBeat.h>

void CHeartBeat::Init(IGpio *pIo,ITimer *pTimer,uint16_t period)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	607a      	str	r2, [r7, #4]
 8008df4:	807b      	strh	r3, [r7, #2]
	m_pIo=pIo;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	68ba      	ldr	r2, [r7, #8]
 8008dfa:	615a      	str	r2, [r3, #20]
	m_timer.Init(pTimer);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	3304      	adds	r3, #4
 8008e00:	6879      	ldr	r1, [r7, #4]
 8008e02:	4618      	mov	r0, r3
 8008e04:	f000 fd2d 	bl	8009862 <_ZN8CTimeout4InitEP6ITimer>
	m_timer.SetExpiry(period);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	3304      	adds	r3, #4
 8008e0c:	887a      	ldrh	r2, [r7, #2]
 8008e0e:	4611      	mov	r1, r2
 8008e10:	4618      	mov	r0, r3
 8008e12:	f000 fd4a 	bl	80098aa <_ZN8CTimeout9SetExpiryEt>
}
 8008e16:	bf00      	nop
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <_ZN10CHeartBeat7ExecuteEv>:

void CHeartBeat::Execute()
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b082      	sub	sp, #8
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
	if(!m_timer.HasElapsed())
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	3304      	adds	r3, #4
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f000 fd4d 	bl	80098ca <_ZN8CTimeout10HasElapsedEv>
 8008e30:	4603      	mov	r3, r0
 8008e32:	f083 0301 	eor.w	r3, r3, #1
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d105      	bne.n	8008e48 <_ZN10CHeartBeat7ExecuteEv+0x2a>
		return;
	m_pIo->Toggle();
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	695b      	ldr	r3, [r3, #20]
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7ff ffb4 	bl	8008dae <_ZN5IGpio6ToggleEv>
 8008e46:	e000      	b.n	8008e4a <_ZN10CHeartBeat7ExecuteEv+0x2c>
		return;
 8008e48:	bf00      	nop

}
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <_ZN10CHeartBeatC1Ev>:

CHeartBeat::CHeartBeat()
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	4a06      	ldr	r2, [pc, #24]	; (8008e74 <_ZN10CHeartBeatC1Ev+0x24>)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	601a      	str	r2, [r3, #0]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	3304      	adds	r3, #4
 8008e62:	4618      	mov	r0, r3
 8008e64:	f000 fd5c 	bl	8009920 <_ZN8CTimeoutC1Ev>
{
	// TODO Auto-generated constructor stub

}
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3708      	adds	r7, #8
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	0800d340 	.word	0x0800d340

08008e78 <_ZN10CHeartBeatD1Ev>:

CHeartBeat::~CHeartBeat()
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	4a06      	ldr	r2, [pc, #24]	; (8008e9c <_ZN10CHeartBeatD1Ev+0x24>)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	601a      	str	r2, [r3, #0]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	3304      	adds	r3, #4
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f000 fd58 	bl	8009940 <_ZN8CTimeoutD1Ev>
{
	// TODO Auto-generated destructor stub
}
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4618      	mov	r0, r3
 8008e94:	3708      	adds	r7, #8
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	0800d340 	.word	0x0800d340

08008ea0 <_ZN10CHeartBeatD0Ev>:
CHeartBeat::~CHeartBeat()
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
}
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f7ff ffe5 	bl	8008e78 <_ZN10CHeartBeatD1Ev>
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f001 fb54 	bl	800a55c <_ZdlPv>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3708      	adds	r7, #8
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}

08008ebe <_ZN13CSTM32F10xADC4InitEPt>:
 */

#include <STM32F10xADC.h>

void CSTM32F10xADC::Init(uint16_t *pAdcBuffer)
{
 8008ebe:	b480      	push	{r7}
 8008ec0:	b083      	sub	sp, #12
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
 8008ec6:	6039      	str	r1, [r7, #0]
	m_pAdcBuffer = pAdcBuffer;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	683a      	ldr	r2, [r7, #0]
 8008ecc:	605a      	str	r2, [r3, #4]
}
 8008ece:	bf00      	nop
 8008ed0:	370c      	adds	r7, #12
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bc80      	pop	{r7}
 8008ed6:	4770      	bx	lr

08008ed8 <_ZN13CSTM32F10xADC4ReadEv>:

uint16_t CSTM32F10xADC::Read()
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
	return *m_pAdcBuffer;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	881b      	ldrh	r3, [r3, #0]
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	370c      	adds	r7, #12
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bc80      	pop	{r7}
 8008eee:	4770      	bx	lr

08008ef0 <_ZN4IAdcC1Ev>:
class ISpi
{
	virtual void Transfer(char *data,uint16_t lenght) = 0;
};

class IAdc
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	4a04      	ldr	r2, [pc, #16]	; (8008f0c <_ZN4IAdcC1Ev+0x1c>)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	601a      	str	r2, [r3, #0]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4618      	mov	r0, r3
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bc80      	pop	{r7}
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	0800d364 	.word	0x0800d364

08008f10 <_ZN13CSTM32F10xADCC1Ev>:

CSTM32F10xADC::CSTM32F10xADC()
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7ff ffe8 	bl	8008ef0 <_ZN4IAdcC1Ev>
 8008f20:	4a03      	ldr	r2, [pc, #12]	; (8008f30 <_ZN13CSTM32F10xADCC1Ev+0x20>)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3708      	adds	r7, #8
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	0800d350 	.word	0x0800d350

08008f34 <_ZN13CSTM32F10xADCD1Ev>:

CSTM32F10xADC::~CSTM32F10xADC()
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	4a04      	ldr	r2, [pc, #16]	; (8008f50 <_ZN13CSTM32F10xADCD1Ev+0x1c>)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4618      	mov	r0, r3
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bc80      	pop	{r7}
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop
 8008f50:	0800d350 	.word	0x0800d350

08008f54 <_ZN13CSTM32F10xADCD0Ev>:
CSTM32F10xADC::~CSTM32F10xADC()
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
}
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f7ff ffe9 	bl	8008f34 <_ZN13CSTM32F10xADCD1Ev>
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f001 fafa 	bl	800a55c <_ZdlPv>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3708      	adds	r7, #8
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <_ZN14CSTM32F10xGpio3SetEv>:
 */

#include <STM32F10xGpio.h>

void CSTM32F10xGpio::Set()
{
 8008f72:	b480      	push	{r7}
 8008f74:	b083      	sub	sp, #12
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
	m_pGpio->BSRR |= m_bitMask;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	6852      	ldr	r2, [r2, #4]
 8008f82:	6911      	ldr	r1, [r2, #16]
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	6892      	ldr	r2, [r2, #8]
 8008f88:	430a      	orrs	r2, r1
 8008f8a:	611a      	str	r2, [r3, #16]
}
 8008f8c:	bf00      	nop
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bc80      	pop	{r7}
 8008f94:	4770      	bx	lr

08008f96 <_ZN14CSTM32F10xGpio5ClearEv>:

void CSTM32F10xGpio::Clear()
{
 8008f96:	b480      	push	{r7}
 8008f98:	b083      	sub	sp, #12
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
	m_pGpio->BSRR |= m_clearBitMask;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	6852      	ldr	r2, [r2, #4]
 8008fa6:	6911      	ldr	r1, [r2, #16]
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	68d2      	ldr	r2, [r2, #12]
 8008fac:	430a      	orrs	r2, r1
 8008fae:	611a      	str	r2, [r3, #16]
}
 8008fb0:	bf00      	nop
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bc80      	pop	{r7}
 8008fb8:	4770      	bx	lr

08008fba <_ZNK14CSTM32F10xGpio3GetEv>:

bool CSTM32F10xGpio::Get() const
{
 8008fba:	b480      	push	{r7}
 8008fbc:	b083      	sub	sp, #12
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
	return m_pGpio->IDR & m_bitMask;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	689a      	ldr	r2, [r3, #8]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	4013      	ands	r3, r2
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	bf14      	ite	ne
 8008fd2:	2301      	movne	r3, #1
 8008fd4:	2300      	moveq	r3, #0
 8008fd6:	b2db      	uxtb	r3, r3
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bc80      	pop	{r7}
 8008fe0:	4770      	bx	lr

08008fe2 <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh>:

void CSTM32F10xGpio::Init(GPIO_TypeDef *pGpio, uint8_t pinNumber)
{
 8008fe2:	b480      	push	{r7}
 8008fe4:	b085      	sub	sp, #20
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	60f8      	str	r0, [r7, #12]
 8008fea:	60b9      	str	r1, [r7, #8]
 8008fec:	4613      	mov	r3, r2
 8008fee:	71fb      	strb	r3, [r7, #7]
	if (pinNumber > 15) return;
 8008ff0:	79fb      	ldrb	r3, [r7, #7]
 8008ff2:	2b0f      	cmp	r3, #15
 8008ff4:	dc12      	bgt.n	800901c <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh+0x3a>
	m_pGpio = pGpio;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	68ba      	ldr	r2, [r7, #8]
 8008ffa:	605a      	str	r2, [r3, #4]
	m_bitMask = 1 << pinNumber;
 8008ffc:	79fb      	ldrb	r3, [r7, #7]
 8008ffe:	2201      	movs	r2, #1
 8009000:	fa02 f303 	lsl.w	r3, r2, r3
 8009004:	461a      	mov	r2, r3
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	609a      	str	r2, [r3, #8]
	m_clearBitMask = 1 << (pinNumber + 16);
 800900a:	79fb      	ldrb	r3, [r7, #7]
 800900c:	3310      	adds	r3, #16
 800900e:	2201      	movs	r2, #1
 8009010:	fa02 f303 	lsl.w	r3, r2, r3
 8009014:	461a      	mov	r2, r3
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	60da      	str	r2, [r3, #12]
 800901a:	e000      	b.n	800901e <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh+0x3c>
	if (pinNumber > 15) return;
 800901c:	bf00      	nop
}
 800901e:	3714      	adds	r7, #20
 8009020:	46bd      	mov	sp, r7
 8009022:	bc80      	pop	{r7}
 8009024:	4770      	bx	lr
	...

08009028 <_ZN5IGpioC1Ev>:
class IGpio
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	4a04      	ldr	r2, [pc, #16]	; (8009044 <_ZN5IGpioC1Ev+0x1c>)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	601a      	str	r2, [r3, #0]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	4618      	mov	r0, r3
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	bc80      	pop	{r7}
 8009040:	4770      	bx	lr
 8009042:	bf00      	nop
 8009044:	0800d38c 	.word	0x0800d38c

08009048 <_ZN14CSTM32F10xGpioC1Ev>:

CSTM32F10xGpio::CSTM32F10xGpio()
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4618      	mov	r0, r3
 8009054:	f7ff ffe8 	bl	8009028 <_ZN5IGpioC1Ev>
 8009058:	4a06      	ldr	r2, [pc, #24]	; (8009074 <_ZN14CSTM32F10xGpioC1Ev+0x2c>)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub
	m_pGpio = NULL;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	605a      	str	r2, [r3, #4]
	m_bitMask = 0;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	609a      	str	r2, [r3, #8]

}
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	4618      	mov	r0, r3
 800906e:	3708      	adds	r7, #8
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	0800d370 	.word	0x0800d370

08009078 <_ZN14CSTM32F10xGpioD1Ev>:

CSTM32F10xGpio::~CSTM32F10xGpio()
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	4a04      	ldr	r2, [pc, #16]	; (8009094 <_ZN14CSTM32F10xGpioD1Ev+0x1c>)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4618      	mov	r0, r3
 800908a:	370c      	adds	r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	bc80      	pop	{r7}
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	0800d370 	.word	0x0800d370

08009098 <_ZN14CSTM32F10xGpioD0Ev>:
CSTM32F10xGpio::~CSTM32F10xGpio()
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
}
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f7ff ffe9 	bl	8009078 <_ZN14CSTM32F10xGpioD1Ev>
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f001 fa58 	bl	800a55c <_ZdlPv>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4618      	mov	r0, r3
 80090b0:	3708      	adds	r7, #8
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <_ZN22CSTM32F10xInputCapture4InitEP11TIM_TypeDeft>:
 */

#include <STM32F10xInputCapture.h>

void CSTM32F10xInputCapture::Init(TIM_TypeDef *pTim, uint16_t channel)
{
 80090b6:	b480      	push	{r7}
 80090b8:	b085      	sub	sp, #20
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	60f8      	str	r0, [r7, #12]
 80090be:	60b9      	str	r1, [r7, #8]
 80090c0:	4613      	mov	r3, r2
 80090c2:	80fb      	strh	r3, [r7, #6]
	m_pTim = pTim;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	68ba      	ldr	r2, [r7, #8]
 80090c8:	605a      	str	r2, [r3, #4]
	m_Channel = channel;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	88fa      	ldrh	r2, [r7, #6]
 80090ce:	811a      	strh	r2, [r3, #8]
}
 80090d0:	bf00      	nop
 80090d2:	3714      	adds	r7, #20
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bc80      	pop	{r7}
 80090d8:	4770      	bx	lr
	...

080090dc <_ZNK22CSTM32F10xInputCapture4ReadEv>:

uint16_t CSTM32F10xInputCapture::Read() const
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
	switch (m_Channel)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	891b      	ldrh	r3, [r3, #8]
 80090e8:	2b0c      	cmp	r3, #12
 80090ea:	d839      	bhi.n	8009160 <_ZNK22CSTM32F10xInputCapture4ReadEv+0x84>
 80090ec:	a201      	add	r2, pc, #4	; (adr r2, 80090f4 <_ZNK22CSTM32F10xInputCapture4ReadEv+0x18>)
 80090ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f2:	bf00      	nop
 80090f4:	08009129 	.word	0x08009129
 80090f8:	08009161 	.word	0x08009161
 80090fc:	08009161 	.word	0x08009161
 8009100:	08009161 	.word	0x08009161
 8009104:	08009137 	.word	0x08009137
 8009108:	08009161 	.word	0x08009161
 800910c:	08009161 	.word	0x08009161
 8009110:	08009161 	.word	0x08009161
 8009114:	08009145 	.word	0x08009145
 8009118:	08009161 	.word	0x08009161
 800911c:	08009161 	.word	0x08009161
 8009120:	08009161 	.word	0x08009161
 8009124:	08009153 	.word	0x08009153
	{
		case TIM_Channel_1:
			return TIM_GetCapture1(m_pTim);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	4618      	mov	r0, r3
 800912e:	f7ff fadf 	bl	80086f0 <TIM_GetCapture1>
 8009132:	4603      	mov	r3, r0
 8009134:	e015      	b.n	8009162 <_ZNK22CSTM32F10xInputCapture4ReadEv+0x86>

		case TIM_Channel_2:
			return TIM_GetCapture2(m_pTim);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	4618      	mov	r0, r3
 800913c:	f7ff fae4 	bl	8008708 <TIM_GetCapture2>
 8009140:	4603      	mov	r3, r0
 8009142:	e00e      	b.n	8009162 <_ZNK22CSTM32F10xInputCapture4ReadEv+0x86>

		case TIM_Channel_3:
			return TIM_GetCapture3(m_pTim);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	4618      	mov	r0, r3
 800914a:	f7ff fae9 	bl	8008720 <TIM_GetCapture3>
 800914e:	4603      	mov	r3, r0
 8009150:	e007      	b.n	8009162 <_ZNK22CSTM32F10xInputCapture4ReadEv+0x86>

		case TIM_Channel_4:
			return TIM_GetCapture4(m_pTim);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	4618      	mov	r0, r3
 8009158:	f7ff faee 	bl	8008738 <TIM_GetCapture4>
 800915c:	4603      	mov	r3, r0
 800915e:	e000      	b.n	8009162 <_ZNK22CSTM32F10xInputCapture4ReadEv+0x86>

	}
	return false;
 8009160:	2300      	movs	r3, #0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3708      	adds	r7, #8
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop

0800916c <_ZNK22CSTM32F10xInputCapture11IsTriggeredEv>:

bool CSTM32F10xInputCapture::IsTriggered() const
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
	switch (m_Channel)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	891b      	ldrh	r3, [r3, #8]
 8009178:	2b0c      	cmp	r3, #12
 800917a:	d851      	bhi.n	8009220 <_ZNK22CSTM32F10xInputCapture11IsTriggeredEv+0xb4>
 800917c:	a201      	add	r2, pc, #4	; (adr r2, 8009184 <_ZNK22CSTM32F10xInputCapture11IsTriggeredEv+0x18>)
 800917e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009182:	bf00      	nop
 8009184:	080091b9 	.word	0x080091b9
 8009188:	08009221 	.word	0x08009221
 800918c:	08009221 	.word	0x08009221
 8009190:	08009221 	.word	0x08009221
 8009194:	080091d3 	.word	0x080091d3
 8009198:	08009221 	.word	0x08009221
 800919c:	08009221 	.word	0x08009221
 80091a0:	08009221 	.word	0x08009221
 80091a4:	080091ed 	.word	0x080091ed
 80091a8:	08009221 	.word	0x08009221
 80091ac:	08009221 	.word	0x08009221
 80091b0:	08009221 	.word	0x08009221
 80091b4:	08009207 	.word	0x08009207
	{
		case TIM_Channel_1:
			return TIM_GetFlagStatus(m_pTim, TIM_FLAG_CC1);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	2102      	movs	r1, #2
 80091be:	4618      	mov	r0, r3
 80091c0:	f7ff fac7 	bl	8008752 <TIM_GetFlagStatus>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	bf14      	ite	ne
 80091ca:	2301      	movne	r3, #1
 80091cc:	2300      	moveq	r3, #0
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	e027      	b.n	8009222 <_ZNK22CSTM32F10xInputCapture11IsTriggeredEv+0xb6>

		case TIM_Channel_2:
			return TIM_GetFlagStatus(m_pTim, TIM_FLAG_CC2);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	2104      	movs	r1, #4
 80091d8:	4618      	mov	r0, r3
 80091da:	f7ff faba 	bl	8008752 <TIM_GetFlagStatus>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	bf14      	ite	ne
 80091e4:	2301      	movne	r3, #1
 80091e6:	2300      	moveq	r3, #0
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	e01a      	b.n	8009222 <_ZNK22CSTM32F10xInputCapture11IsTriggeredEv+0xb6>

		case TIM_Channel_3:
			return TIM_GetFlagStatus(m_pTim, TIM_FLAG_CC3);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	2108      	movs	r1, #8
 80091f2:	4618      	mov	r0, r3
 80091f4:	f7ff faad 	bl	8008752 <TIM_GetFlagStatus>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	bf14      	ite	ne
 80091fe:	2301      	movne	r3, #1
 8009200:	2300      	moveq	r3, #0
 8009202:	b2db      	uxtb	r3, r3
 8009204:	e00d      	b.n	8009222 <_ZNK22CSTM32F10xInputCapture11IsTriggeredEv+0xb6>

		case TIM_Channel_4:
			return TIM_GetFlagStatus(m_pTim, TIM_FLAG_CC4);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	2110      	movs	r1, #16
 800920c:	4618      	mov	r0, r3
 800920e:	f7ff faa0 	bl	8008752 <TIM_GetFlagStatus>
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	bf14      	ite	ne
 8009218:	2301      	movne	r3, #1
 800921a:	2300      	moveq	r3, #0
 800921c:	b2db      	uxtb	r3, r3
 800921e:	e000      	b.n	8009222 <_ZNK22CSTM32F10xInputCapture11IsTriggeredEv+0xb6>

	}
	return false;
 8009220:	2300      	movs	r3, #0
}
 8009222:	4618      	mov	r0, r3
 8009224:	3708      	adds	r7, #8
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop

0800922c <_ZN13IInputCaptureC1Ev>:
{
public:
	virtual uint16_t Read() = 0;
};

class IInputCapture
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	4a04      	ldr	r2, [pc, #16]	; (8009248 <_ZN13IInputCaptureC1Ev+0x1c>)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	601a      	str	r2, [r3, #0]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4618      	mov	r0, r3
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	bc80      	pop	{r7}
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	0800d3b8 	.word	0x0800d3b8

0800924c <_ZN22CSTM32F10xInputCaptureC1Ev>:

CSTM32F10xInputCapture::CSTM32F10xInputCapture()
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	4618      	mov	r0, r3
 8009258:	f7ff ffe8 	bl	800922c <_ZN13IInputCaptureC1Ev>
 800925c:	4a03      	ldr	r2, [pc, #12]	; (800926c <_ZN22CSTM32F10xInputCaptureC1Ev+0x20>)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4618      	mov	r0, r3
 8009266:	3708      	adds	r7, #8
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	0800d3a0 	.word	0x0800d3a0

08009270 <_ZN22CSTM32F10xInputCaptureD1Ev>:

CSTM32F10xInputCapture::~CSTM32F10xInputCapture()
 8009270:	b480      	push	{r7}
 8009272:	b083      	sub	sp, #12
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	4a04      	ldr	r2, [pc, #16]	; (800928c <_ZN22CSTM32F10xInputCaptureD1Ev+0x1c>)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4618      	mov	r0, r3
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	bc80      	pop	{r7}
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	0800d3a0 	.word	0x0800d3a0

08009290 <_ZN22CSTM32F10xInputCaptureD0Ev>:
CSTM32F10xInputCapture::~CSTM32F10xInputCapture()
 8009290:	b580      	push	{r7, lr}
 8009292:	b082      	sub	sp, #8
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
}
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f7ff ffe9 	bl	8009270 <_ZN22CSTM32F10xInputCaptureD1Ev>
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f001 f95c 	bl	800a55c <_ZdlPv>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	4618      	mov	r0, r3
 80092a8:	3708      	adds	r7, #8
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}

080092ae <_ZN15CSTM32F10xTimer4InitEP11TIM_TypeDef>:
 */

#include <STM32F10xTimer.h>

void CSTM32F10xTimer::Init(TIM_TypeDef *pTimer)
{
 80092ae:	b480      	push	{r7}
 80092b0:	b083      	sub	sp, #12
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
 80092b6:	6039      	str	r1, [r7, #0]
	m_pTimer=pTimer;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	683a      	ldr	r2, [r7, #0]
 80092bc:	605a      	str	r2, [r3, #4]
}
 80092be:	bf00      	nop
 80092c0:	370c      	adds	r7, #12
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bc80      	pop	{r7}
 80092c6:	4770      	bx	lr

080092c8 <_ZNK15CSTM32F10xTimer12CurrentTicksEv>:

uint16_t CSTM32F10xTimer::CurrentTicks() const
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
	return m_pTimer->CNT;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80092d6:	b29b      	uxth	r3, r3
}
 80092d8:	4618      	mov	r0, r3
 80092da:	370c      	adds	r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	bc80      	pop	{r7}
 80092e0:	4770      	bx	lr
	...

080092e4 <_ZN6ITimerC1Ev>:
class ITimer
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	4a04      	ldr	r2, [pc, #16]	; (8009300 <_ZN6ITimerC1Ev+0x1c>)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	601a      	str	r2, [r3, #0]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4618      	mov	r0, r3
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bc80      	pop	{r7}
 80092fc:	4770      	bx	lr
 80092fe:	bf00      	nop
 8009300:	0800d3dc 	.word	0x0800d3dc

08009304 <_ZN15CSTM32F10xTimerC1Ev>:

CSTM32F10xTimer::CSTM32F10xTimer()
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4618      	mov	r0, r3
 8009310:	f7ff ffe8 	bl	80092e4 <_ZN6ITimerC1Ev>
 8009314:	4a03      	ldr	r2, [pc, #12]	; (8009324 <_ZN15CSTM32F10xTimerC1Ev+0x20>)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	4618      	mov	r0, r3
 800931e:	3708      	adds	r7, #8
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	0800d3c8 	.word	0x0800d3c8

08009328 <_ZN15CSTM32F10xTimerD1Ev>:

CSTM32F10xTimer::~CSTM32F10xTimer()
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	4a04      	ldr	r2, [pc, #16]	; (8009344 <_ZN15CSTM32F10xTimerD1Ev+0x1c>)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	4618      	mov	r0, r3
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	bc80      	pop	{r7}
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop
 8009344:	0800d3c8 	.word	0x0800d3c8

08009348 <_ZN15CSTM32F10xTimerD0Ev>:
CSTM32F10xTimer::~CSTM32F10xTimer()
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
}
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f7ff ffe9 	bl	8009328 <_ZN15CSTM32F10xTimerD1Ev>
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f001 f900 	bl	800a55c <_ZdlPv>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4618      	mov	r0, r3
 8009360:	3708      	adds	r7, #8
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <_ZN15CSTM32F10xUSART5WriteEPKct>:
 */

#include <STM32F10xUSART.h>

uint16_t CSTM32F10xUSART::Write(const char* data, const uint16_t length)
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b086      	sub	sp, #24
 800936a:	af00      	add	r7, sp, #0
 800936c:	60f8      	str	r0, [r7, #12]
 800936e:	60b9      	str	r1, [r7, #8]
 8009370:	4613      	mov	r3, r2
 8009372:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0;
 8009374:	2300      	movs	r3, #0
 8009376:	82fb      	strh	r3, [r7, #22]
	char txData;
	for (i = 0; i < length; i++)
 8009378:	2300      	movs	r3, #0
 800937a:	82fb      	strh	r3, [r7, #22]
 800937c:	8afa      	ldrh	r2, [r7, #22]
 800937e:	88fb      	ldrh	r3, [r7, #6]
 8009380:	429a      	cmp	r2, r3
 8009382:	da17      	bge.n	80093b4 <_ZN15CSTM32F10xUSART5WriteEPKct+0x4e>
	{
		txData = *data++;
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	1c5a      	adds	r2, r3, #1
 8009388:	60ba      	str	r2, [r7, #8]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	757b      	strb	r3, [r7, #21]
		if (!m_TxBuffer.Push(txData)) break;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	3308      	adds	r3, #8
 8009392:	f107 0215 	add.w	r2, r7, #21
 8009396:	4611      	mov	r1, r2
 8009398:	4618      	mov	r0, r3
 800939a:	f000 f930 	bl	80095fe <_ZN13CCircularFifoIcLj322EE4PushERc>
 800939e:	4603      	mov	r3, r0
 80093a0:	f083 0301 	eor.w	r3, r3, #1
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d103      	bne.n	80093b2 <_ZN15CSTM32F10xUSART5WriteEPKct+0x4c>
	for (i = 0; i < length; i++)
 80093aa:	8afb      	ldrh	r3, [r7, #22]
 80093ac:	3301      	adds	r3, #1
 80093ae:	82fb      	strh	r3, [r7, #22]
 80093b0:	e7e4      	b.n	800937c <_ZN15CSTM32F10xUSART5WriteEPKct+0x16>
		if (!m_TxBuffer.Push(txData)) break;
 80093b2:	bf00      	nop
	}
	return i;
 80093b4:	8afb      	ldrh	r3, [r7, #22]
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3718      	adds	r7, #24
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <_ZN15CSTM32F10xUSART5WriteEPKc>:

uint16_t CSTM32F10xUSART::Write(const char* data)
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b084      	sub	sp, #16
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
 80093c6:	6039      	str	r1, [r7, #0]
	uint16_t dataSend = 0;
 80093c8:	2300      	movs	r3, #0
 80093ca:	81fb      	strh	r3, [r7, #14]
	char txData;
	while (data)
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d014      	beq.n	80093fc <_ZN15CSTM32F10xUSART5WriteEPKc+0x3e>
	{
		txData = *data++;
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	1c5a      	adds	r2, r3, #1
 80093d6:	603a      	str	r2, [r7, #0]
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	737b      	strb	r3, [r7, #13]
		if (m_TxBuffer.Push(txData)) dataSend++;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	3308      	adds	r3, #8
 80093e0:	f107 020d 	add.w	r2, r7, #13
 80093e4:	4611      	mov	r1, r2
 80093e6:	4618      	mov	r0, r3
 80093e8:	f000 f909 	bl	80095fe <_ZN13CCircularFifoIcLj322EE4PushERc>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d003      	beq.n	80093fa <_ZN15CSTM32F10xUSART5WriteEPKc+0x3c>
 80093f2:	89fb      	ldrh	r3, [r7, #14]
 80093f4:	3301      	adds	r3, #1
 80093f6:	81fb      	strh	r3, [r7, #14]
	while (data)
 80093f8:	e7e8      	b.n	80093cc <_ZN15CSTM32F10xUSART5WriteEPKc+0xe>
		else break;
 80093fa:	bf00      	nop
	}
	return dataSend;
 80093fc:	89fb      	ldrh	r3, [r7, #14]
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3710      	adds	r7, #16
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <_ZN15CSTM32F10xUSART7HasDataEv>:

bool CSTM32F10xUSART::HasData()
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b082      	sub	sp, #8
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
	return !m_RxBuffer.IsEmpty();
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009414:	4618      	mov	r0, r3
 8009416:	f000 f91b 	bl	8009650 <_ZNK13CCircularFifoIcLj322EE7IsEmptyEv>
 800941a:	4603      	mov	r3, r0
 800941c:	f083 0301 	eor.w	r3, r3, #1
 8009420:	b2db      	uxtb	r3, r3
}
 8009422:	4618      	mov	r0, r3
 8009424:	3708      	adds	r7, #8
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <_ZN15CSTM32F10xUSART4ReadEPhPt>:

bool CSTM32F10xUSART::Read(unsigned char* pData, uint16_t* pLength)
{
 800942a:	b480      	push	{r7}
 800942c:	b085      	sub	sp, #20
 800942e:	af00      	add	r7, sp, #0
 8009430:	60f8      	str	r0, [r7, #12]
 8009432:	60b9      	str	r1, [r7, #8]
 8009434:	607a      	str	r2, [r7, #4]
//	for(uint16_t i=0;i<)
//	pData
	return false;
 8009436:	2300      	movs	r3, #0
}
 8009438:	4618      	mov	r0, r3
 800943a:	3714      	adds	r7, #20
 800943c:	46bd      	mov	sp, r7
 800943e:	bc80      	pop	{r7}
 8009440:	4770      	bx	lr

08009442 <_ZN15CSTM32F10xUSART8ReadByteEv>:

char CSTM32F10xUSART::ReadByte()
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b084      	sub	sp, #16
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
	char data;
	m_RxBuffer.Pop(data);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009450:	f107 020f 	add.w	r2, r7, #15
 8009454:	4611      	mov	r1, r2
 8009456:	4618      	mov	r0, r3
 8009458:	f000 f90d 	bl	8009676 <_ZN13CCircularFifoIcLj322EE3PopERc>
	return data;
 800945c:	7bfb      	ldrb	r3, [r7, #15]
}
 800945e:	4618      	mov	r0, r3
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <_ZN15CSTM32F10xUSART4InitEP13USART_TypeDef>:

void CSTM32F10xUSART::Init(USART_TypeDef *pUsart)
{
 8009466:	b480      	push	{r7}
 8009468:	b083      	sub	sp, #12
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
 800946e:	6039      	str	r1, [r7, #0]
	m_pUsart = pUsart;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	683a      	ldr	r2, [r7, #0]
 8009474:	605a      	str	r2, [r3, #4]
}
 8009476:	bf00      	nop
 8009478:	370c      	adds	r7, #12
 800947a:	46bd      	mov	sp, r7
 800947c:	bc80      	pop	{r7}
 800947e:	4770      	bx	lr

08009480 <_ZN15CSTM32F10xUSART7ExecuteEv>:

void CSTM32F10xUSART::Execute()
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
	executeRx();
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 f807 	bl	800949c <_ZN15CSTM32F10xUSART9executeRxEv>
	executeTx();
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 f82c 	bl	80094ec <_ZN15CSTM32F10xUSART9executeTxEv>
}
 8009494:	bf00      	nop
 8009496:	3708      	adds	r7, #8
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <_ZN15CSTM32F10xUSART9executeRxEv>:

void CSTM32F10xUSART::executeRx()
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
	if (!USART_GetFlagStatus(m_pUsart, USART_FLAG_RXNE)) return;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	2120      	movs	r1, #32
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7ff fc64 	bl	8008d78 <USART_GetFlagStatus>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	bf0c      	ite	eq
 80094b6:	2301      	moveq	r3, #1
 80094b8:	2300      	movne	r3, #0
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d111      	bne.n	80094e4 <_ZN15CSTM32F10xUSART9executeRxEv+0x48>
	char data = USART_ReceiveData(m_pUsart);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7ff fc48 	bl	8008d5a <USART_ReceiveData>
 80094ca:	4603      	mov	r3, r0
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	73fb      	strb	r3, [r7, #15]
	m_RxBuffer.Push(data);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80094d6:	f107 020f 	add.w	r2, r7, #15
 80094da:	4611      	mov	r1, r2
 80094dc:	4618      	mov	r0, r3
 80094de:	f000 f88e 	bl	80095fe <_ZN13CCircularFifoIcLj322EE4PushERc>
 80094e2:	e000      	b.n	80094e6 <_ZN15CSTM32F10xUSART9executeRxEv+0x4a>
	if (!USART_GetFlagStatus(m_pUsart, USART_FLAG_RXNE)) return;
 80094e4:	bf00      	nop
}
 80094e6:	3710      	adds	r7, #16
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <_ZN15CSTM32F10xUSART9executeTxEv>:

void CSTM32F10xUSART::executeTx()
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
	if (m_TxBuffer.IsEmpty()) return;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	3308      	adds	r3, #8
 80094f8:	4618      	mov	r0, r3
 80094fa:	f000 f8a9 	bl	8009650 <_ZNK13CCircularFifoIcLj322EE7IsEmptyEv>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d11e      	bne.n	8009542 <_ZN15CSTM32F10xUSART9executeTxEv+0x56>
	if (!USART_GetFlagStatus(m_pUsart, USART_FLAG_TXE)) return;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	2180      	movs	r1, #128	; 0x80
 800950a:	4618      	mov	r0, r3
 800950c:	f7ff fc34 	bl	8008d78 <USART_GetFlagStatus>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	bf0c      	ite	eq
 8009516:	2301      	moveq	r3, #1
 8009518:	2300      	movne	r3, #0
 800951a:	b2db      	uxtb	r3, r3
 800951c:	2b00      	cmp	r3, #0
 800951e:	d112      	bne.n	8009546 <_ZN15CSTM32F10xUSART9executeTxEv+0x5a>
	char data;
	m_TxBuffer.Pop(data);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	3308      	adds	r3, #8
 8009524:	f107 020f 	add.w	r2, r7, #15
 8009528:	4611      	mov	r1, r2
 800952a:	4618      	mov	r0, r3
 800952c:	f000 f8a3 	bl	8009676 <_ZN13CCircularFifoIcLj322EE3PopERc>
	USART_SendData(m_pUsart, data);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	7bfa      	ldrb	r2, [r7, #15]
 8009536:	b292      	uxth	r2, r2
 8009538:	4611      	mov	r1, r2
 800953a:	4618      	mov	r0, r3
 800953c:	f7ff fbfc 	bl	8008d38 <USART_SendData>
 8009540:	e002      	b.n	8009548 <_ZN15CSTM32F10xUSART9executeTxEv+0x5c>
	if (m_TxBuffer.IsEmpty()) return;
 8009542:	bf00      	nop
 8009544:	e000      	b.n	8009548 <_ZN15CSTM32F10xUSART9executeTxEv+0x5c>
	if (!USART_GetFlagStatus(m_pUsart, USART_FLAG_TXE)) return;
 8009546:	bf00      	nop
}
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
	...

08009550 <_ZN6IUsartC1Ev>:
class IUsart
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	4a04      	ldr	r2, [pc, #16]	; (800956c <_ZN6IUsartC1Ev+0x1c>)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	601a      	str	r2, [r3, #0]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4618      	mov	r0, r3
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	bc80      	pop	{r7}
 8009568:	4770      	bx	lr
 800956a:	bf00      	nop
 800956c:	0800d41c 	.word	0x0800d41c

08009570 <_ZN15CSTM32F10xUSARTC1Ev>:

CSTM32F10xUSART::CSTM32F10xUSART()
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4618      	mov	r0, r3
 800957c:	f7ff ffe8 	bl	8009550 <_ZN6IUsartC1Ev>
 8009580:	4a09      	ldr	r2, [pc, #36]	; (80095a8 <_ZN15CSTM32F10xUSARTC1Ev+0x38>)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	601a      	str	r2, [r3, #0]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	3308      	adds	r3, #8
 800958a:	4618      	mov	r0, r3
 800958c:	f000 f89e 	bl	80096cc <_ZN13CCircularFifoIcLj322EEC1Ev>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009596:	4618      	mov	r0, r3
 8009598:	f000 f898 	bl	80096cc <_ZN13CCircularFifoIcLj322EEC1Ev>
{
	// TODO Auto-generated constructor stub

}
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4618      	mov	r0, r3
 80095a0:	3708      	adds	r7, #8
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	0800d3e8 	.word	0x0800d3e8

080095ac <_ZN15CSTM32F10xUSARTD1Ev>:

CSTM32F10xUSART::~CSTM32F10xUSART()
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	4a09      	ldr	r2, [pc, #36]	; (80095dc <_ZN15CSTM32F10xUSARTD1Ev+0x30>)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	601a      	str	r2, [r3, #0]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80095c0:	4618      	mov	r0, r3
 80095c2:	f000 f899 	bl	80096f8 <_ZN13CCircularFifoIcLj322EED1Ev>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	3308      	adds	r3, #8
 80095ca:	4618      	mov	r0, r3
 80095cc:	f000 f894 	bl	80096f8 <_ZN13CCircularFifoIcLj322EED1Ev>
{
	// TODO Auto-generated destructor stub
}
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4618      	mov	r0, r3
 80095d4:	3708      	adds	r7, #8
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	0800d3e8 	.word	0x0800d3e8

080095e0 <_ZN15CSTM32F10xUSARTD0Ev>:
CSTM32F10xUSART::~CSTM32F10xUSART()
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b082      	sub	sp, #8
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
}
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f7ff ffdf 	bl	80095ac <_ZN15CSTM32F10xUSARTD1Ev>
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 ffb4 	bl	800a55c <_ZdlPv>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4618      	mov	r0, r3
 80095f8:	3708      	adds	r7, #8
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}

080095fe <_ZN13CCircularFifoIcLj322EE4PushERc>:
 * will happen, it is up to the caller to handle this case
 *
 * \param item_ copy by reference the input item
 * \return whether operation was successful or not */
template<typename Element, unsigned int Size>
bool CCircularFifo<Element, Size>::Push(Element& item_)
 80095fe:	b580      	push	{r7, lr}
 8009600:	b084      	sub	sp, #16
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
 8009606:	6039      	str	r1, [r7, #0]
{
	unsigned int nextTail = increment(m_Tail);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	4619      	mov	r1, r3
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 f892 	bl	8009738 <_ZNK13CCircularFifoIcLj322EE9incrementEj>
 8009614:	60f8      	str	r0, [r7, #12]
	if (nextTail != m_Head)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	429a      	cmp	r2, r3
 8009620:	bf14      	ite	ne
 8009622:	2301      	movne	r3, #1
 8009624:	2300      	moveq	r3, #0
 8009626:	b2db      	uxtb	r3, r3
 8009628:	2b00      	cmp	r3, #0
 800962a:	d00c      	beq.n	8009646 <_ZN13CCircularFifoIcLj322EE4PushERc+0x48>
	{
		m_Array[m_Tail] = item_;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	683a      	ldr	r2, [r7, #0]
 8009632:	7811      	ldrb	r1, [r2, #0]
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	4413      	add	r3, r2
 8009638:	460a      	mov	r2, r1
 800963a:	721a      	strb	r2, [r3, #8]
		m_Tail = nextTail;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	68fa      	ldr	r2, [r7, #12]
 8009640:	605a      	str	r2, [r3, #4]
		return true;
 8009642:	2301      	movs	r3, #1
 8009644:	e000      	b.n	8009648 <_ZN13CCircularFifoIcLj322EE4PushERc+0x4a>
	}

	// queue was full
	return false;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	3710      	adds	r7, #16
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <_ZNK13CCircularFifoIcLj322EE7IsEmptyEv>:
 * Remember that the 'empty' status can change quickly
 * as the Procuder adds more items.
 *
 * \return true if circular buffer is empty */
template<typename Element, unsigned int Size>
bool CCircularFifo<Element, Size>::IsEmpty() const
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
{
	return (m_Head == m_Tail);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	429a      	cmp	r2, r3
 8009664:	bf0c      	ite	eq
 8009666:	2301      	moveq	r3, #1
 8009668:	2300      	movne	r3, #0
 800966a:	b2db      	uxtb	r3, r3
}
 800966c:	4618      	mov	r0, r3
 800966e:	370c      	adds	r7, #12
 8009670:	46bd      	mov	sp, r7
 8009672:	bc80      	pop	{r7}
 8009674:	4770      	bx	lr

08009676 <_ZN13CCircularFifoIcLj322EE3PopERc>:
bool CCircularFifo<Element, Size>::Pop(Element& item_)
 8009676:	b580      	push	{r7, lr}
 8009678:	b082      	sub	sp, #8
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
 800967e:	6039      	str	r1, [r7, #0]
	if (m_Head == m_Tail) return false;  // empty queue
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	429a      	cmp	r2, r3
 800968c:	bf0c      	ite	eq
 800968e:	2301      	moveq	r3, #1
 8009690:	2300      	movne	r3, #0
 8009692:	b2db      	uxtb	r3, r3
 8009694:	2b00      	cmp	r3, #0
 8009696:	d001      	beq.n	800969c <_ZN13CCircularFifoIcLj322EE3PopERc+0x26>
 8009698:	2300      	movs	r3, #0
 800969a:	e013      	b.n	80096c4 <_ZN13CCircularFifoIcLj322EE3PopERc+0x4e>
	item_ = m_Array[m_Head];
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	4413      	add	r3, r2
 80096a6:	7a1a      	ldrb	r2, [r3, #8]
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	701a      	strb	r2, [r3, #0]
	m_Head = increment(m_Head);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80096b2:	4619      	mov	r1, r3
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 f83f 	bl	8009738 <_ZNK13CCircularFifoIcLj322EE9incrementEj>
 80096ba:	4602      	mov	r2, r0
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	return true;
 80096c2:	2301      	movs	r3, #1
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3708      	adds	r7, #8
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <_ZN13CCircularFifoIcLj322EEC1Ev>:
	CCircularFifo() : m_Tail(0), m_Head(0) {}
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	4a07      	ldr	r2, [pc, #28]	; (80096f4 <_ZN13CCircularFifoIcLj322EEC1Ev+0x28>)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	601a      	str	r2, [r3, #0]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	605a      	str	r2, [r3, #4]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	4618      	mov	r0, r3
 80096ec:	370c      	adds	r7, #12
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bc80      	pop	{r7}
 80096f2:	4770      	bx	lr
 80096f4:	0800d40c 	.word	0x0800d40c

080096f8 <_ZN13CCircularFifoIcLj322EED1Ev>:
	virtual ~CCircularFifo() {}
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	4a04      	ldr	r2, [pc, #16]	; (8009714 <_ZN13CCircularFifoIcLj322EED1Ev+0x1c>)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	601a      	str	r2, [r3, #0]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	4618      	mov	r0, r3
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	bc80      	pop	{r7}
 8009710:	4770      	bx	lr
 8009712:	bf00      	nop
 8009714:	0800d40c 	.word	0x0800d40c

08009718 <_ZN13CCircularFifoIcLj322EED0Ev>:
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f7ff ffe9 	bl	80096f8 <_ZN13CCircularFifoIcLj322EED1Ev>
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 ff18 	bl	800a55c <_ZdlPv>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	4618      	mov	r0, r3
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
	...

08009738 <_ZNK13CCircularFifoIcLj322EE9incrementEj>:
 * index is incremented or wrapped
 *
 *  \param idx_ the index to the incremented/wrapped
 *  \return new value for the index */
template<typename Element, unsigned int Size>
unsigned int CCircularFifo<Element, Size>::increment(unsigned int idx_) const
 8009738:	b480      	push	{r7}
 800973a:	b083      	sub	sp, #12
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
	//    index++;
	//    if(index == array.lenght) -> index = 0;
	//
	//or as written below:
	//    index = (index+1) % array.length
	idx_ = (idx_ + 1) % Capacity;
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	3301      	adds	r3, #1
 8009746:	4a09      	ldr	r2, [pc, #36]	; (800976c <_ZNK13CCircularFifoIcLj322EE9incrementEj+0x34>)
 8009748:	fba2 1203 	umull	r1, r2, r2, r3
 800974c:	1a99      	subs	r1, r3, r2
 800974e:	0849      	lsrs	r1, r1, #1
 8009750:	440a      	add	r2, r1
 8009752:	0a12      	lsrs	r2, r2, #8
 8009754:	f240 1143 	movw	r1, #323	; 0x143
 8009758:	fb01 f202 	mul.w	r2, r1, r2
 800975c:	1a9b      	subs	r3, r3, r2
 800975e:	603b      	str	r3, [r7, #0]
	return idx_;
 8009760:	683b      	ldr	r3, [r7, #0]
}
 8009762:	4618      	mov	r0, r3
 8009764:	370c      	adds	r7, #12
 8009766:	46bd      	mov	sp, r7
 8009768:	bc80      	pop	{r7}
 800976a:	4770      	bx	lr
 800976c:	95cbb0bf 	.word	0x95cbb0bf

08009770 <_ZN17CACFrequencyMeter4InitEP13IInputCapture>:
 */

#include <ACFrequencyMeter.h>

void CACFrequencyMeter::Init(IInputCapture *pIc)
{
 8009770:	b480      	push	{r7}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
	m_pIc = pIc;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	683a      	ldr	r2, [r7, #0]
 800977e:	605a      	str	r2, [r3, #4]
}
 8009780:	bf00      	nop
 8009782:	370c      	adds	r7, #12
 8009784:	46bd      	mov	sp, r7
 8009786:	bc80      	pop	{r7}
 8009788:	4770      	bx	lr
	...

0800978c <_ZN17CACFrequencyMeter7ExecuteEv>:

void CACFrequencyMeter::Execute()
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
	if (!m_pIc->IsTriggered()) return;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	6852      	ldr	r2, [r2, #4]
 80097a0:	4610      	mov	r0, r2
 80097a2:	4798      	blx	r3
 80097a4:	4603      	mov	r3, r0
 80097a6:	f083 0301 	eor.w	r3, r3, #1
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d123      	bne.n	80097f8 <_ZN17CACFrequencyMeter7ExecuteEv+0x6c>
	m_CurrentTimeStamp = m_pIc->Read();
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	3304      	adds	r3, #4
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	6852      	ldr	r2, [r2, #4]
 80097be:	4610      	mov	r0, r2
 80097c0:	4798      	blx	r3
 80097c2:	4603      	mov	r3, r0
 80097c4:	461a      	mov	r2, r3
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	815a      	strh	r2, [r3, #10]
	m_Freq = 10000 / (float)(m_CurrentTimeStamp - m_PrevTimeStamp);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	895b      	ldrh	r3, [r3, #10]
 80097ce:	461a      	mov	r2, r3
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	891b      	ldrh	r3, [r3, #8]
 80097d4:	1ad3      	subs	r3, r2, r3
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7fd f8d0 	bl	800697c <__aeabi_i2f>
 80097dc:	4603      	mov	r3, r0
 80097de:	4619      	mov	r1, r3
 80097e0:	4807      	ldr	r0, [pc, #28]	; (8009800 <_ZN17CACFrequencyMeter7ExecuteEv+0x74>)
 80097e2:	f7fd f9d3 	bl	8006b8c <__aeabi_fdiv>
 80097e6:	4603      	mov	r3, r0
 80097e8:	461a      	mov	r2, r3
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	60da      	str	r2, [r3, #12]
	m_PrevTimeStamp = m_CurrentTimeStamp;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	895a      	ldrh	r2, [r3, #10]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	811a      	strh	r2, [r3, #8]
 80097f6:	e000      	b.n	80097fa <_ZN17CACFrequencyMeter7ExecuteEv+0x6e>
	if (!m_pIc->IsTriggered()) return;
 80097f8:	bf00      	nop
}
 80097fa:	3708      	adds	r7, #8
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	461c4000 	.word	0x461c4000

08009804 <_ZN17CACFrequencyMeterC1Ev>:
float CACFrequencyMeter::ReadFrequency()
{
	return m_Freq;
}

CACFrequencyMeter::CACFrequencyMeter()
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	4a04      	ldr	r2, [pc, #16]	; (8009820 <_ZN17CACFrequencyMeterC1Ev+0x1c>)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4618      	mov	r0, r3
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	bc80      	pop	{r7}
 800981c:	4770      	bx	lr
 800981e:	bf00      	nop
 8009820:	0800d438 	.word	0x0800d438

08009824 <_ZN17CACFrequencyMeterD1Ev>:

CACFrequencyMeter::~CACFrequencyMeter()
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	4a04      	ldr	r2, [pc, #16]	; (8009840 <_ZN17CACFrequencyMeterD1Ev+0x1c>)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	4618      	mov	r0, r3
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	bc80      	pop	{r7}
 800983c:	4770      	bx	lr
 800983e:	bf00      	nop
 8009840:	0800d438 	.word	0x0800d438

08009844 <_ZN17CACFrequencyMeterD0Ev>:
CACFrequencyMeter::~CACFrequencyMeter()
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
}
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f7ff ffe9 	bl	8009824 <_ZN17CACFrequencyMeterD1Ev>
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 fe82 	bl	800a55c <_ZdlPv>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4618      	mov	r0, r3
 800985c:	3708      	adds	r7, #8
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <_ZN8CTimeout4InitEP6ITimer>:
 */

#include <Timeout.h>

void CTimeout::Init(ITimer *pTimer)
{
 8009862:	b480      	push	{r7}
 8009864:	b083      	sub	sp, #12
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
 800986a:	6039      	str	r1, [r7, #0]
	m_timer = pTimer;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	683a      	ldr	r2, [r7, #0]
 8009870:	605a      	str	r2, [r3, #4]
}
 8009872:	bf00      	nop
 8009874:	370c      	adds	r7, #12
 8009876:	46bd      	mov	sp, r7
 8009878:	bc80      	pop	{r7}
 800987a:	4770      	bx	lr

0800987c <_ZN8CTimeout5ResetEv>:

void CTimeout::Reset()
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
	m_prevTimer = m_timer->CurrentTicks();
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	6852      	ldr	r2, [r2, #4]
 8009890:	4610      	mov	r0, r2
 8009892:	4798      	blx	r3
 8009894:	4603      	mov	r3, r0
 8009896:	461a      	mov	r2, r3
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	815a      	strh	r2, [r3, #10]
	m_hasElapsed = false;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	731a      	strb	r2, [r3, #12]
}
 80098a2:	bf00      	nop
 80098a4:	3708      	adds	r7, #8
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}

080098aa <_ZN8CTimeout9SetExpiryEt>:

void CTimeout::SetExpiry(uint16_t tick)
{
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b082      	sub	sp, #8
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
 80098b2:	460b      	mov	r3, r1
 80098b4:	807b      	strh	r3, [r7, #2]
	m_expiry = tick;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	887a      	ldrh	r2, [r7, #2]
 80098ba:	811a      	strh	r2, [r3, #8]
	Reset();
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f7ff ffdd 	bl	800987c <_ZN8CTimeout5ResetEv>
}
 80098c2:	bf00      	nop
 80098c4:	3708      	adds	r7, #8
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <_ZN8CTimeout10HasElapsedEv>:

bool CTimeout::HasElapsed()
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b082      	sub	sp, #8
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
	if (!m_hasElapsed) if (m_timer->CurrentTicks() - m_prevTimer >= m_expiry) m_hasElapsed = true;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	7b1b      	ldrb	r3, [r3, #12]
 80098d6:	f083 0301 	eor.w	r3, r3, #1
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d018      	beq.n	8009912 <_ZN8CTimeout10HasElapsedEv+0x48>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	6852      	ldr	r2, [r2, #4]
 80098ec:	4610      	mov	r0, r2
 80098ee:	4798      	blx	r3
 80098f0:	4603      	mov	r3, r0
 80098f2:	461a      	mov	r2, r3
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	895b      	ldrh	r3, [r3, #10]
 80098f8:	1ad3      	subs	r3, r2, r3
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	8912      	ldrh	r2, [r2, #8]
 80098fe:	4293      	cmp	r3, r2
 8009900:	bfac      	ite	ge
 8009902:	2301      	movge	r3, #1
 8009904:	2300      	movlt	r3, #0
 8009906:	b2db      	uxtb	r3, r3
 8009908:	2b00      	cmp	r3, #0
 800990a:	d002      	beq.n	8009912 <_ZN8CTimeout10HasElapsedEv+0x48>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2201      	movs	r2, #1
 8009910:	731a      	strb	r2, [r3, #12]
	return m_hasElapsed;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	7b1b      	ldrb	r3, [r3, #12]
}
 8009916:	4618      	mov	r0, r3
 8009918:	3708      	adds	r7, #8
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
	...

08009920 <_ZN8CTimeoutC1Ev>:

CTimeout::CTimeout()
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	4a04      	ldr	r2, [pc, #16]	; (800993c <_ZN8CTimeoutC1Ev+0x1c>)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	4618      	mov	r0, r3
 8009932:	370c      	adds	r7, #12
 8009934:	46bd      	mov	sp, r7
 8009936:	bc80      	pop	{r7}
 8009938:	4770      	bx	lr
 800993a:	bf00      	nop
 800993c:	0800d448 	.word	0x0800d448

08009940 <_ZN8CTimeoutD1Ev>:

CTimeout::~CTimeout()
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	4a04      	ldr	r2, [pc, #16]	; (800995c <_ZN8CTimeoutD1Ev+0x1c>)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	4618      	mov	r0, r3
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	bc80      	pop	{r7}
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop
 800995c:	0800d448 	.word	0x0800d448

08009960 <_ZN8CTimeoutD0Ev>:
CTimeout::~CTimeout()
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
}
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f7ff ffe9 	bl	8009940 <_ZN8CTimeoutD1Ev>
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 fdf4 	bl	800a55c <_ZdlPv>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	4618      	mov	r0, r3
 8009978:	3708      	adds	r7, #8
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}

0800997e <_ZnwjPv>:
  __attribute__((__externally_visible__));
#endif

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800997e:	b480      	push	{r7}
 8009980:	b083      	sub	sp, #12
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
 8009986:	6039      	str	r1, [r7, #0]
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	4618      	mov	r0, r3
 800998c:	370c      	adds	r7, #12
 800998e:	46bd      	mov	sp, r7
 8009990:	bc80      	pop	{r7}
 8009992:	4770      	bx	lr

08009994 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	4618      	mov	r0, r3
 80099a0:	370c      	adds	r7, #12
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bc80      	pop	{r7}
 80099a6:	4770      	bx	lr

080099a8 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	4618      	mov	r0, r3
 80099b4:	370c      	adds	r7, #12
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bc80      	pop	{r7}
 80099ba:	4770      	bx	lr

080099bc <_ZNSt14_Function_baseC1Ev>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	609a      	str	r2, [r3, #8]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	4618      	mov	r0, r3
 80099ce:	370c      	adds	r7, #12
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bc80      	pop	{r7}
 80099d4:	4770      	bx	lr
	...

080099d8 <_ZN12CAnalogInputC1Ev>:
	float m_Scale;
	float m_Offset;
	IAdc* m_pAdc;
};

inline CAnalogInput::CAnalogInput()
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	4a09      	ldr	r2, [pc, #36]	; (8009a08 <_ZN12CAnalogInputC1Ev+0x30>)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	601a      	str	r2, [r3, #0]
{
	m_pAdc = NULL;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	60da      	str	r2, [r3, #12]
	m_Scale = 1;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80099f2:	605a      	str	r2, [r3, #4]
	m_Offset = 0;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f04f 0200 	mov.w	r2, #0
 80099fa:	609a      	str	r2, [r3, #8]
}
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	4618      	mov	r0, r3
 8009a00:	370c      	adds	r7, #12
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bc80      	pop	{r7}
 8009a06:	4770      	bx	lr
 8009a08:	0800d458 	.word	0x0800d458

08009a0c <_ZN12CAnalogInputD1Ev>:

inline CAnalogInput::~CAnalogInput()
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	4a04      	ldr	r2, [pc, #16]	; (8009a28 <_ZN12CAnalogInputD1Ev+0x1c>)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	601a      	str	r2, [r3, #0]
{

}
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bc80      	pop	{r7}
 8009a24:	4770      	bx	lr
 8009a26:	bf00      	nop
 8009a28:	0800d458 	.word	0x0800d458

08009a2c <_ZN12CAnalogInputD0Ev>:
inline CAnalogInput::~CAnalogInput()
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
}
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f7ff ffe9 	bl	8009a0c <_ZN12CAnalogInputD1Ev>
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 fd8e 	bl	800a55c <_ZdlPv>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	4618      	mov	r0, r3
 8009a44:	3708      	adds	r7, #8
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}

08009a4a <_ZN12CAnalogInput10InitializeEP4IAdc>:

inline void CAnalogInput::Initialize(IAdc* pAdc)
{
 8009a4a:	b480      	push	{r7}
 8009a4c:	b083      	sub	sp, #12
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
 8009a52:	6039      	str	r1, [r7, #0]
	m_pAdc = pAdc;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	683a      	ldr	r2, [r7, #0]
 8009a58:	60da      	str	r2, [r3, #12]
}
 8009a5a:	bf00      	nop
 8009a5c:	370c      	adds	r7, #12
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bc80      	pop	{r7}
 8009a62:	4770      	bx	lr

08009a64 <main>:
#include <ACFrequencyMeter.h>
#include <AnalogInput.h>
#include <HeartBeat.h>

int main(void)
{
 8009a64:	b5b0      	push	{r4, r5, r7, lr}
 8009a66:	f5ad 7d6e 	sub.w	sp, sp, #952	; 0x3b8
 8009a6a:	af00      	add	r7, sp, #0
	// ----------------- INIT BASIC ---------------------------------------
	// all 72MHz clock and flash init
	SystemInit();
 8009a6c:	f000 fb76 	bl	800a15c <SystemInit>
	std::function<void()>pSi = SystemInit;
 8009a70:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8009a74:	49e4      	ldr	r1, [pc, #912]	; (8009e08 <main+0x3a4>)
 8009a76:	4618      	mov	r0, r3
 8009a78:	f000 fa18 	bl	8009eac <_ZNSt8functionIFvvEEC1IPS0_vvEET_>
	RCC_ADCCLKConfig(RCC_PCLK2_Div8);
 8009a7c:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8009a80:	f7fe fb80 	bl	8008184 <RCC_ADCCLKConfig>
	// peripheral clock enable
	uint32_t apb1Enable = RCC_APB1Periph_SPI2 | RCC_APB1Periph_TIM3 | RCC_APB1Periph_USART3;
 8009a84:	4be1      	ldr	r3, [pc, #900]	; (8009e0c <main+0x3a8>)
 8009a86:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
	RCC_APB1PeriphClockCmd(apb1Enable, ENABLE);
 8009a8a:	2101      	movs	r1, #1
 8009a8c:	f8d7 03b0 	ldr.w	r0, [r7, #944]	; 0x3b0
 8009a90:	f7fe fc80 	bl	8008394 <RCC_APB1PeriphClockCmd>
	uint32_t apb2Enable = RCC_APB2Periph_ADC1 | RCC_APB2Periph_GPIOA;
 8009a94:	f44f 7301 	mov.w	r3, #516	; 0x204
 8009a98:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
	RCC_APB2PeriphClockCmd(apb2Enable, ENABLE);
 8009a9c:	2101      	movs	r1, #1
 8009a9e:	f8d7 03ac 	ldr.w	r0, [r7, #940]	; 0x3ac
 8009aa2:	f7fe fc59 	bl	8008358 <RCC_APB2PeriphClockCmd>
	uint32_t ahbEnable = RCC_AHBPeriph_DMA1;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
	RCC_AHBPeriphClockCmd(ahbEnable, ENABLE);
 8009aac:	2101      	movs	r1, #1
 8009aae:	f8d7 03a8 	ldr.w	r0, [r7, #936]	; 0x3a8
 8009ab2:	f7fe fc33 	bl	800831c <RCC_AHBPeriphClockCmd>

	// main timer init
	TIM_TimeBaseInitTypeDef timer;
	TIM_TimeBaseStructInit(&timer);
 8009ab6:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7fe fd58 	bl	8008570 <TIM_TimeBaseStructInit>
	timer.TIM_Period = 0xffff;
 8009ac0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009ac4:	f8a7 3390 	strh.w	r3, [r7, #912]	; 0x390
	timer.TIM_Prescaler = 7199; // 100us timer period!
 8009ac8:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8009acc:	f8a7 338c 	strh.w	r3, [r7, #908]	; 0x38c
	TIM_TimeBaseInit(TIM3, &timer);
 8009ad0:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	48ce      	ldr	r0, [pc, #824]	; (8009e10 <main+0x3ac>)
 8009ad8:	f7fe fc7a 	bl	80083d0 <TIM_TimeBaseInit>
	TIM_Cmd(TIM3, ENABLE);
 8009adc:	2101      	movs	r1, #1
 8009ade:	48cc      	ldr	r0, [pc, #816]	; (8009e10 <main+0x3ac>)
 8009ae0:	f7fe fd77 	bl	80085d2 <TIM_Cmd>

	GPIO_InitTypeDef sGpio;
	// heartbeat
	sGpio.GPIO_Pin = GPIO_Pin_13;
 8009ae4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ae8:	f8a7 3388 	strh.w	r3, [r7, #904]	; 0x388
	sGpio.GPIO_Speed = GPIO_Speed_2MHz;
 8009aec:	2302      	movs	r3, #2
 8009aee:	f887 338a 	strb.w	r3, [r7, #906]	; 0x38a
	sGpio.GPIO_Mode = GPIO_Mode_Out_OD;
 8009af2:	2314      	movs	r3, #20
 8009af4:	f887 338b 	strb.w	r3, [r7, #907]	; 0x38b
	GPIO_Init(GPIOC, &sGpio); // pc13
 8009af8:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8009afc:	4619      	mov	r1, r3
 8009afe:	48c5      	ldr	r0, [pc, #788]	; (8009e14 <main+0x3b0>)
 8009b00:	f7fe fa71 	bl	8007fe6 <GPIO_Init>

	CSTM32F10xTimer MainTimer;
 8009b04:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7ff fbfb 	bl	8009304 <_ZN15CSTM32F10xTimerC1Ev>
	MainTimer.Init(TIM3);
 8009b0e:	f507 7360 	add.w	r3, r7, #896	; 0x380
 8009b12:	49bf      	ldr	r1, [pc, #764]	; (8009e10 <main+0x3ac>)
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7ff fbca 	bl	80092ae <_ZN15CSTM32F10xTimer4InitEP11TIM_TypeDef>
	CSTM32F10xGpio GpioHeartBeat;
 8009b1a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7ff fa92 	bl	8009048 <_ZN14CSTM32F10xGpioC1Ev>
	GpioHeartBeat.Init(GPIOC, 13);
 8009b24:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8009b28:	220d      	movs	r2, #13
 8009b2a:	49ba      	ldr	r1, [pc, #744]	; (8009e14 <main+0x3b0>)
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7ff fa58 	bl	8008fe2 <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh>
	CHeartBeat HeartBeat;
 8009b32:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7ff f98a 	bl	8008e50 <_ZN10CHeartBeatC1Ev>
	HeartBeat.Init(&GpioHeartBeat, &MainTimer, 5000);
 8009b3c:	f507 7260 	add.w	r2, r7, #896	; 0x380
 8009b40:	f507 715c 	add.w	r1, r7, #880	; 0x370
 8009b44:	f507 7056 	add.w	r0, r7, #856	; 0x358
 8009b48:	f241 3388 	movw	r3, #5000	; 0x1388
 8009b4c:	f7ff f94c 	bl	8008de8 <_ZN10CHeartBeat4InitEP5IGpioP6ITimert>

	// --------------------------------------------------------------------

	// --------------- INIT EEPROM ----------------------------------------
	sGpio.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7; // sda1 scl1
 8009b50:	23c0      	movs	r3, #192	; 0xc0
 8009b52:	f8a7 3388 	strh.w	r3, [r7, #904]	; 0x388
	sGpio.GPIO_Speed = GPIO_Speed_2MHz;
 8009b56:	2302      	movs	r3, #2
 8009b58:	f887 338a 	strb.w	r3, [r7, #906]	; 0x38a
	sGpio.GPIO_Mode = GPIO_Mode_AF_OD;
 8009b5c:	231c      	movs	r3, #28
 8009b5e:	f887 338b 	strb.w	r3, [r7, #907]	; 0x38b
	GPIO_Init(GPIOB, &sGpio);
 8009b62:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8009b66:	4619      	mov	r1, r3
 8009b68:	48ab      	ldr	r0, [pc, #684]	; (8009e18 <main+0x3b4>)
 8009b6a:	f7fe fa3c 	bl	8007fe6 <GPIO_Init>

	// --------------------------------------------------------------------

	// --------------- UART Initialization -----------------------------
	sGpio.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11; // tx3 rx3
 8009b6e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009b72:	f8a7 3388 	strh.w	r3, [r7, #904]	; 0x388
	sGpio.GPIO_Speed = GPIO_Speed_2MHz;
 8009b76:	2302      	movs	r3, #2
 8009b78:	f887 338a 	strb.w	r3, [r7, #906]	; 0x38a
	sGpio.GPIO_Mode = GPIO_Mode_AF_PP;
 8009b7c:	2318      	movs	r3, #24
 8009b7e:	f887 338b 	strb.w	r3, [r7, #907]	; 0x38b
	GPIO_Init(GPIOB, &sGpio);
 8009b82:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8009b86:	4619      	mov	r1, r3
 8009b88:	48a3      	ldr	r0, [pc, #652]	; (8009e18 <main+0x3b4>)
 8009b8a:	f7fe fa2c 	bl	8007fe6 <GPIO_Init>

	USART_InitTypeDef usart;
	usart.USART_BaudRate = 115200;
 8009b8e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8009b92:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
	usart.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8009b96:	2300      	movs	r3, #0
 8009b98:	f8a7 3354 	strh.w	r3, [r7, #852]	; 0x354
	usart.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8009b9c:	230c      	movs	r3, #12
 8009b9e:	f8a7 3352 	strh.w	r3, [r7, #850]	; 0x352
	usart.USART_Parity = USART_Parity_No;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	f8a7 3350 	strh.w	r3, [r7, #848]	; 0x350
	usart.USART_StopBits = USART_StopBits_1;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	f8a7 334e 	strh.w	r3, [r7, #846]	; 0x34e
	usart.USART_WordLength = USART_WordLength_8b;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	f8a7 334c 	strh.w	r3, [r7, #844]	; 0x34c
	USART_Init(USART3, &usart);
 8009bb4:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8009bb8:	4619      	mov	r1, r3
 8009bba:	4898      	ldr	r0, [pc, #608]	; (8009e1c <main+0x3b8>)
 8009bbc:	f7fe ffc0 	bl	8008b40 <USART_Init>
	USART_DMACmd(USART3, USART_DMAReq_Rx, ENABLE);
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	2140      	movs	r1, #64	; 0x40
 8009bc4:	4895      	ldr	r0, [pc, #596]	; (8009e1c <main+0x3b8>)
 8009bc6:	f7ff f894 	bl	8008cf2 <USART_DMACmd>
	USART_Cmd(USART3, ENABLE);
 8009bca:	2101      	movs	r1, #1
 8009bcc:	4893      	ldr	r0, [pc, #588]	; (8009e1c <main+0x3b8>)
 8009bce:	f7ff f871 	bl	8008cb4 <USART_Cmd>
	CSTM32F10xUSART Uart;
 8009bd2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f7ff fcca 	bl	8009570 <_ZN15CSTM32F10xUSARTC1Ev>
	Uart.Init(USART3);
 8009bdc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009be0:	498e      	ldr	r1, [pc, #568]	; (8009e1c <main+0x3b8>)
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7ff fc3f 	bl	8009466 <_ZN15CSTM32F10xUSART4InitEP13USART_TypeDef>
	// -----------------------------------------------------------------

	// ------------------------- Init ADC ------------------------------
	CSTM32F10xADC Adc[2];
 8009be8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8009bec:	2401      	movs	r4, #1
 8009bee:	461d      	mov	r5, r3
 8009bf0:	2c00      	cmp	r4, #0
 8009bf2:	db05      	blt.n	8009c00 <main+0x19c>
 8009bf4:	4628      	mov	r0, r5
 8009bf6:	f7ff f98b 	bl	8008f10 <_ZN13CSTM32F10xADCC1Ev>
 8009bfa:	3508      	adds	r5, #8
 8009bfc:	3c01      	subs	r4, #1
 8009bfe:	e7f7      	b.n	8009bf0 <main+0x18c>
	uint16_t adcBuffer[2];
	for (uint16_t i = 0; i < 2; i++)
 8009c00:	2300      	movs	r3, #0
 8009c02:	f8a7 33b6 	strh.w	r3, [r7, #950]	; 0x3b6
 8009c06:	f8b7 33b6 	ldrh.w	r3, [r7, #950]	; 0x3b6
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	dc14      	bgt.n	8009c38 <main+0x1d4>
	{
		Adc[i].Init(&adcBuffer[i]);
 8009c0e:	f8b7 33b6 	ldrh.w	r3, [r7, #950]	; 0x3b6
 8009c12:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8009c16:	00db      	lsls	r3, r3, #3
 8009c18:	18d0      	adds	r0, r2, r3
 8009c1a:	f8b7 33b6 	ldrh.w	r3, [r7, #950]	; 0x3b6
 8009c1e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8009c22:	005b      	lsls	r3, r3, #1
 8009c24:	4413      	add	r3, r2
 8009c26:	4619      	mov	r1, r3
 8009c28:	f7ff f949 	bl	8008ebe <_ZN13CSTM32F10xADC4InitEPt>
	for (uint16_t i = 0; i < 2; i++)
 8009c2c:	f8b7 33b6 	ldrh.w	r3, [r7, #950]	; 0x3b6
 8009c30:	3301      	adds	r3, #1
 8009c32:	f8a7 33b6 	strh.w	r3, [r7, #950]	; 0x3b6
 8009c36:	e7e6      	b.n	8009c06 <main+0x1a2>
	}
	// adc io init
	GPIO_StructInit(&sGpio);
 8009c38:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f7fe fa8e 	bl	800815e <GPIO_StructInit>
	sGpio.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1; // adc0 adc1
 8009c42:	2303      	movs	r3, #3
 8009c44:	f8a7 3388 	strh.w	r3, [r7, #904]	; 0x388
	sGpio.GPIO_Mode = GPIO_Mode_AIN;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	f887 338b 	strb.w	r3, [r7, #907]	; 0x38b
	GPIO_Init(GPIOA, &sGpio);
 8009c4e:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8009c52:	4619      	mov	r1, r3
 8009c54:	4872      	ldr	r0, [pc, #456]	; (8009e20 <main+0x3bc>)
 8009c56:	f7fe f9c6 	bl	8007fe6 <GPIO_Init>

	// adc dma init
	DMA_InitTypeDef dma;
	DMA_StructInit(&dma);
 8009c5a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7fe f97b 	bl	8007f5a <DMA_StructInit>
	dma.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8009c64:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009c68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009c6c:	61da      	str	r2, [r3, #28]
	dma.DMA_PeripheralDataSize = DMA_MemoryDataSize_HalfWord;
 8009c6e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009c72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009c76:	619a      	str	r2, [r3, #24]
	dma.DMA_DIR = DMA_DIR_PeripheralSRC;
 8009c78:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	609a      	str	r2, [r3, #8]
	dma.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8009c80:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009c84:	2280      	movs	r2, #128	; 0x80
 8009c86:	615a      	str	r2, [r3, #20]
	dma.DMA_Mode = DMA_Mode_Circular;
 8009c88:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009c8c:	2220      	movs	r2, #32
 8009c8e:	621a      	str	r2, [r3, #32]
	dma.DMA_BufferSize = 2;
 8009c90:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009c94:	2202      	movs	r2, #2
 8009c96:	60da      	str	r2, [r3, #12]
	dma.DMA_Priority = DMA_Priority_Low;
 8009c98:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	625a      	str	r2, [r3, #36]	; 0x24
	dma.DMA_MemoryBaseAddr = (uint32_t)adcBuffer;
 8009ca0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8009ca4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009ca8:	605a      	str	r2, [r3, #4]
	dma.DMA_PeripheralBaseAddr = (uint32_t)ADC1->DR;
 8009caa:	4b5e      	ldr	r3, [pc, #376]	; (8009e24 <main+0x3c0>)
 8009cac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009cae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009cb2:	601a      	str	r2, [r3, #0]
	DMA_Init(DMA1_Channel1, &dma);
 8009cb4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009cb8:	4619      	mov	r1, r3
 8009cba:	485b      	ldr	r0, [pc, #364]	; (8009e28 <main+0x3c4>)
 8009cbc:	f7fe f90f 	bl	8007ede <DMA_Init>
	DMA_Cmd(DMA1_Channel1, ENABLE);
 8009cc0:	2101      	movs	r1, #1
 8009cc2:	4859      	ldr	r0, [pc, #356]	; (8009e28 <main+0x3c4>)
 8009cc4:	f7fe f973 	bl	8007fae <DMA_Cmd>

	// adc peripheral init
	ADC_InitTypeDef adc;
	ADC_StructInit(&adc);
 8009cc8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f7fd ffd1 	bl	8007c74 <ADC_StructInit>
	adc.ADC_ContinuousConvMode = ENABLE;
 8009cd2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	715a      	strb	r2, [r3, #5]
	adc.ADC_NbrOfChannel = 2;
 8009cda:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009cde:	2202      	movs	r2, #2
 8009ce0:	741a      	strb	r2, [r3, #16]
	adc.ADC_ScanConvMode = ENABLE;
 8009ce2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	711a      	strb	r2, [r3, #4]
	ADC_Init(ADC1, &adc);
 8009cea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009cee:	4619      	mov	r1, r3
 8009cf0:	484c      	ldr	r0, [pc, #304]	; (8009e24 <main+0x3c0>)
 8009cf2:	f7fd ff6d 	bl	8007bd0 <ADC_Init>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_239Cycles5);
 8009cf6:	2307      	movs	r3, #7
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	2100      	movs	r1, #0
 8009cfc:	4849      	ldr	r0, [pc, #292]	; (8009e24 <main+0x3c0>)
 8009cfe:	f7fe f825 	bl	8007d4c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 2, ADC_SampleTime_239Cycles5);
 8009d02:	2307      	movs	r3, #7
 8009d04:	2202      	movs	r2, #2
 8009d06:	2101      	movs	r1, #1
 8009d08:	4846      	ldr	r0, [pc, #280]	; (8009e24 <main+0x3c0>)
 8009d0a:	f7fe f81f 	bl	8007d4c <ADC_RegularChannelConfig>
	ADC_DMACmd(ADC1, ENABLE);
 8009d0e:	2101      	movs	r1, #1
 8009d10:	4844      	ldr	r0, [pc, #272]	; (8009e24 <main+0x3c0>)
 8009d12:	f7fd ffe5 	bl	8007ce0 <ADC_DMACmd>
	ADC_Cmd(ADC1, ENABLE);
 8009d16:	2101      	movs	r1, #1
 8009d18:	4842      	ldr	r0, [pc, #264]	; (8009e24 <main+0x3c0>)
 8009d1a:	f7fd ffc6 	bl	8007caa <ADC_Cmd>
	ADC_SoftwareStartConvCmd(ADC1, ENABLE);
 8009d1e:	2101      	movs	r1, #1
 8009d20:	4840      	ldr	r0, [pc, #256]	; (8009e24 <main+0x3c0>)
 8009d22:	f7fd fff8 	bl	8007d16 <ADC_SoftwareStartConvCmd>

	// -----------------------------------------------------------------

	// ------------------------- Init input capture ------------------------------
	TIM_ICInitTypeDef sInputCapture;
	TIM_ICStructInit(&sInputCapture);
 8009d26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7fe fc39 	bl	80085a2 <TIM_ICStructInit>
	sInputCapture.TIM_Channel = TIM_Channel_1;
 8009d30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009d34:	2200      	movs	r2, #0
 8009d36:	801a      	strh	r2, [r3, #0]
	TIM_ICInit(TIM3, &sInputCapture);
 8009d38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	4834      	ldr	r0, [pc, #208]	; (8009e10 <main+0x3ac>)
 8009d40:	f7fe fbc2 	bl	80084c8 <TIM_ICInit>
	CSTM32F10xInputCapture InputCapture;
 8009d44:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f7ff fa7f 	bl	800924c <_ZN22CSTM32F10xInputCaptureC1Ev>
	InputCapture.Init(TIM3, TIM_Channel_1);
 8009d4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009d52:	2200      	movs	r2, #0
 8009d54:	492e      	ldr	r1, [pc, #184]	; (8009e10 <main+0x3ac>)
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7ff f9ad 	bl	80090b6 <_ZN22CSTM32F10xInputCapture4InitEP11TIM_TypeDeft>

	// ------------------------- Init p10 ------------------------------
	// spi init
	GPIO_StructInit(&sGpio);
 8009d5c:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7fe f9fc 	bl	800815e <GPIO_StructInit>
	sGpio.GPIO_Pin = GPIO_Pin_15 | GPIO_Pin_14 | GPIO_Pin_13; // mosi2 miso2 sck
 8009d66:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8009d6a:	f8a7 3388 	strh.w	r3, [r7, #904]	; 0x388
	sGpio.GPIO_Speed = GPIO_Speed_50MHz;
 8009d6e:	2303      	movs	r3, #3
 8009d70:	f887 338a 	strb.w	r3, [r7, #906]	; 0x38a
	sGpio.GPIO_Mode = GPIO_Mode_AF_PP;
 8009d74:	2318      	movs	r3, #24
 8009d76:	f887 338b 	strb.w	r3, [r7, #907]	; 0x38b
	GPIO_Init(GPIOB, &sGpio);
 8009d7a:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8009d7e:	4619      	mov	r1, r3
 8009d80:	4825      	ldr	r0, [pc, #148]	; (8009e18 <main+0x3b4>)
 8009d82:	f7fe f930 	bl	8007fe6 <GPIO_Init>

	// output enable
	GPIO_StructInit(&sGpio);
 8009d86:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7fe f9e7 	bl	800815e <GPIO_StructInit>
	sGpio.GPIO_Pin = GPIO_Pin_1;
 8009d90:	2302      	movs	r3, #2
 8009d92:	f8a7 3388 	strh.w	r3, [r7, #904]	; 0x388
	sGpio.GPIO_Speed = GPIO_Speed_50MHz;
 8009d96:	2303      	movs	r3, #3
 8009d98:	f887 338a 	strb.w	r3, [r7, #906]	; 0x38a
	sGpio.GPIO_Mode = GPIO_Mode_Out_PP;
 8009d9c:	2310      	movs	r3, #16
 8009d9e:	f887 338b 	strb.w	r3, [r7, #907]	; 0x38b
	GPIO_Init(GPIOB, &sGpio);
 8009da2:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8009da6:	4619      	mov	r1, r3
 8009da8:	481b      	ldr	r0, [pc, #108]	; (8009e18 <main+0x3b4>)
 8009daa:	f7fe f91c 	bl	8007fe6 <GPIO_Init>

	// a pa9 , b pa8
	GPIO_StructInit(&sGpio);
 8009dae:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7fe f9d3 	bl	800815e <GPIO_StructInit>
	sGpio.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_8; // mosi2 miso2 sck
 8009db8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009dbc:	f8a7 3388 	strh.w	r3, [r7, #904]	; 0x388
	sGpio.GPIO_Speed = GPIO_Speed_50MHz;
 8009dc0:	2303      	movs	r3, #3
 8009dc2:	f887 338a 	strb.w	r3, [r7, #906]	; 0x38a
	sGpio.GPIO_Mode = GPIO_Mode_Out_PP;
 8009dc6:	2310      	movs	r3, #16
 8009dc8:	f887 338b 	strb.w	r3, [r7, #907]	; 0x38b
	GPIO_Init(GPIOA, &sGpio);
 8009dcc:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	4813      	ldr	r0, [pc, #76]	; (8009e20 <main+0x3bc>)
 8009dd4:	f7fe f907 	bl	8007fe6 <GPIO_Init>

	// ----------------------------------------------------------------

	// init our basic need !
	// frequency meter
	CACFrequencyMeter ACFrequencyMeter;
 8009dd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f7ff fd11 	bl	8009804 <_ZN17CACFrequencyMeterC1Ev>
	ACFrequencyMeter.Init(&InputCapture);
 8009de2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009dea:	4611      	mov	r1, r2
 8009dec:	4618      	mov	r0, r3
 8009dee:	f7ff fcbf 	bl	8009770 <_ZN17CACFrequencyMeter4InitEP13IInputCapture>
	// voltage and current measurement
	CAnalogInput AnalogInput[2];
 8009df2:	1d3b      	adds	r3, r7, #4
 8009df4:	2401      	movs	r4, #1
 8009df6:	461d      	mov	r5, r3
 8009df8:	2c00      	cmp	r4, #0
 8009dfa:	db17      	blt.n	8009e2c <main+0x3c8>
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	f7ff fdeb 	bl	80099d8 <_ZN12CAnalogInputC1Ev>
 8009e02:	3510      	adds	r5, #16
 8009e04:	3c01      	subs	r4, #1
 8009e06:	e7f7      	b.n	8009df8 <main+0x394>
 8009e08:	0800a15d 	.word	0x0800a15d
 8009e0c:	00044002 	.word	0x00044002
 8009e10:	40000400 	.word	0x40000400
 8009e14:	40011000 	.word	0x40011000
 8009e18:	40010c00 	.word	0x40010c00
 8009e1c:	40004800 	.word	0x40004800
 8009e20:	40010800 	.word	0x40010800
 8009e24:	40012400 	.word	0x40012400
 8009e28:	40020008 	.word	0x40020008
	for(uint16_t i=0 ;i<2;i++)
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	f8a7 33b4 	strh.w	r3, [r7, #948]	; 0x3b4
 8009e32:	f8b7 33b4 	ldrh.w	r3, [r7, #948]	; 0x3b4
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	dc13      	bgt.n	8009e62 <main+0x3fe>
	{
		AnalogInput[i].Initialize(&Adc[i]);
 8009e3a:	f8b7 33b4 	ldrh.w	r3, [r7, #948]	; 0x3b4
 8009e3e:	1d3a      	adds	r2, r7, #4
 8009e40:	011b      	lsls	r3, r3, #4
 8009e42:	18d0      	adds	r0, r2, r3
 8009e44:	f8b7 33b4 	ldrh.w	r3, [r7, #948]	; 0x3b4
 8009e48:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8009e4c:	00db      	lsls	r3, r3, #3
 8009e4e:	4413      	add	r3, r2
 8009e50:	4619      	mov	r1, r3
 8009e52:	f7ff fdfa 	bl	8009a4a <_ZN12CAnalogInput10InitializeEP4IAdc>
	for(uint16_t i=0 ;i<2;i++)
 8009e56:	f8b7 33b4 	ldrh.w	r3, [r7, #948]	; 0x3b4
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	f8a7 33b4 	strh.w	r3, [r7, #948]	; 0x3b4
 8009e60:	e7e7      	b.n	8009e32 <main+0x3ce>
	}


	while (1)
	{
		ACFrequencyMeter.Execute();
 8009e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7ff fc90 	bl	800978c <_ZN17CACFrequencyMeter7ExecuteEv>

		HeartBeat.Execute();
 8009e6c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8009e70:	4618      	mov	r0, r3
 8009e72:	f7fe ffd4 	bl	8008e1e <_ZN10CHeartBeat7ExecuteEv>
		Uart.Execute();
 8009e76:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7ff fb00 	bl	8009480 <_ZN15CSTM32F10xUSART7ExecuteEv>
		ACFrequencyMeter.Execute();
 8009e80:	e7ef      	b.n	8009e62 <main+0x3fe>
 8009e82:	bf00      	nop

08009e84 <_ZNSt31_Maybe_unary_or_binary_functionIvJEEC1Ev>:
    struct _Maybe_unary_or_binary_function { };
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	4618      	mov	r0, r3
 8009e90:	370c      	adds	r7, #12
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bc80      	pop	{r7}
 8009e96:	4770      	bx	lr

08009e98 <_ZSt4moveIRPFvvEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	370c      	adds	r7, #12
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bc80      	pop	{r7}
 8009eaa:	4770      	bx	lr

08009eac <_ZNSt8functionIFvvEEC1IPS0_vvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
 8009eac:	b590      	push	{r4, r7, lr}
 8009eae:	b083      	sub	sp, #12
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f7ff ffe4 	bl	8009e84 <_ZNSt31_Maybe_unary_or_binary_functionIvJEEC1Ev>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f7ff fd7c 	bl	80099bc <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f000 f81c 	bl	8009f04 <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d00f      	beq.n	8009ef2 <_ZNSt8functionIFvvEEC1IPS0_vvEET_+0x46>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8009ed2:	687c      	ldr	r4, [r7, #4]
 8009ed4:	463b      	mov	r3, r7
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7ff ffde 	bl	8009e98 <_ZSt4moveIRPFvvEEONSt16remove_referenceIT_E4typeEOS4_>
 8009edc:	4603      	mov	r3, r0
 8009ede:	4619      	mov	r1, r3
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	f000 f81e 	bl	8009f22 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorERSt9_Any_dataOS2_>
	    _M_invoker = &_My_handler::_M_invoke;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4a04      	ldr	r2, [pc, #16]	; (8009efc <_ZNSt8functionIFvvEEC1IPS0_vvEET_+0x50>)
 8009eea:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	4a04      	ldr	r2, [pc, #16]	; (8009f00 <_ZNSt8functionIFvvEEC1IPS0_vvEET_+0x54>)
 8009ef0:	609a      	str	r2, [r3, #8]
	  }
      }
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	370c      	adds	r7, #12
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd90      	pop	{r4, r7, pc}
 8009efc:	08009f47 	.word	0x08009f47
 8009f00:	08009f63 	.word	0x08009f63

08009f04 <_ZNSt14_Function_base13_Base_managerIPFvvEE21_M_not_empty_functionIS1_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	bf14      	ite	ne
 8009f12:	2301      	movne	r3, #1
 8009f14:	2300      	moveq	r3, #0
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	4618      	mov	r0, r3
 8009f1a:	370c      	adds	r7, #12
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bc80      	pop	{r7}
 8009f20:	4770      	bx	lr

08009f22 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorERSt9_Any_dataOS2_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8009f22:	b590      	push	{r4, r7, lr}
 8009f24:	b085      	sub	sp, #20
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
 8009f2a:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8009f2c:	6838      	ldr	r0, [r7, #0]
 8009f2e:	f7ff ffb3 	bl	8009e98 <_ZSt4moveIRPFvvEEONSt16remove_referenceIT_E4typeEOS4_>
 8009f32:	4603      	mov	r3, r0
 8009f34:	4622      	mov	r2, r4
 8009f36:	4619      	mov	r1, r3
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 f83a 	bl	8009fb2 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>
 8009f3e:	bf00      	nop
 8009f40:	3714      	adds	r7, #20
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd90      	pop	{r4, r7, pc}

08009f46 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b082      	sub	sp, #8
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
	(*_Base::_M_get_pointer(__functor))(
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 f84a 	bl	8009fe8 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8009f54:	4603      	mov	r3, r0
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4798      	blx	r3
      }
 8009f5a:	bf00      	nop
 8009f5c:	3708      	adds	r7, #8
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8009f62:	b5b0      	push	{r4, r5, r7, lr}
 8009f64:	b086      	sub	sp, #24
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	60f8      	str	r0, [r7, #12]
 8009f6a:	60b9      	str	r1, [r7, #8]
 8009f6c:	4613      	mov	r3, r2
 8009f6e:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8009f70:	79fb      	ldrb	r3, [r7, #7]
 8009f72:	2b02      	cmp	r3, #2
 8009f74:	d00d      	beq.n	8009f92 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x30>
 8009f76:	2b03      	cmp	r3, #3
 8009f78:	d011      	beq.n	8009f9e <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x3c>
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d114      	bne.n	8009fa8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x46>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8009f7e:	68f8      	ldr	r0, [r7, #12]
 8009f80:	f000 f843 	bl	800a00a <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>
 8009f84:	4604      	mov	r4, r0
 8009f86:	68b8      	ldr	r0, [r7, #8]
 8009f88:	f000 f82e 	bl	8009fe8 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	6023      	str	r3, [r4, #0]
	      break;
 8009f90:	e00a      	b.n	8009fa8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x46>
	      _M_clone(__dest, __source, _Local_storage());
 8009f92:	462a      	mov	r2, r5
 8009f94:	68b9      	ldr	r1, [r7, #8]
 8009f96:	68f8      	ldr	r0, [r7, #12]
 8009f98:	f000 f843 	bl	800a022 <_ZNSt14_Function_base13_Base_managerIPFvvEE8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>
	      break;
 8009f9c:	e004      	b.n	8009fa8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x46>
	      _M_destroy(__dest, _Local_storage());
 8009f9e:	4621      	mov	r1, r4
 8009fa0:	68f8      	ldr	r0, [r7, #12]
 8009fa2:	f000 f859 	bl	800a058 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8009fa6:	bf00      	nop
	  return false;
 8009fa8:	2300      	movs	r3, #0
	}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3718      	adds	r7, #24
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bdb0      	pop	{r4, r5, r7, pc}

08009fb2 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8009fb2:	b590      	push	{r4, r7, lr}
 8009fb4:	b085      	sub	sp, #20
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	60f8      	str	r0, [r7, #12]
 8009fba:	60b9      	str	r1, [r7, #8]
 8009fbc:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8009fbe:	68b8      	ldr	r0, [r7, #8]
 8009fc0:	f7ff ff6a 	bl	8009e98 <_ZSt4moveIRPFvvEEONSt16remove_referenceIT_E4typeEOS4_>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	681c      	ldr	r4, [r3, #0]
 8009fc8:	68f8      	ldr	r0, [r7, #12]
 8009fca:	f7ff fce3 	bl	8009994 <_ZNSt9_Any_data9_M_accessEv>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	2004      	movs	r0, #4
 8009fd4:	f7ff fcd3 	bl	800997e <_ZnwjPv>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d000      	beq.n	8009fe0 <_ZNSt14_Function_base13_Base_managerIPFvvEE15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE+0x2e>
 8009fde:	601c      	str	r4, [r3, #0]
 8009fe0:	bf00      	nop
 8009fe2:	3714      	adds	r7, #20
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd90      	pop	{r4, r7, pc}

08009fe8 <_ZNSt14_Function_base13_Base_managerIPFvvEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 f83d 	bl	800a070 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>
 8009ff6:	4603      	mov	r3, r0
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f000 f845 	bl	800a088 <_ZSt11__addressofIKPFvvEEPT_RS3_>
 8009ffe:	60f8      	str	r0, [r7, #12]
	  return const_cast<_Functor*>(__ptr);
 800a000:	68fb      	ldr	r3, [r7, #12]
	}
 800a002:	4618      	mov	r0, r3
 800a004:	3710      	adds	r7, #16
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <_ZNSt9_Any_data9_M_accessIPPFvvEEERT_v>:
      _M_access()
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b082      	sub	sp, #8
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f7ff fcbe 	bl	8009994 <_ZNSt9_Any_data9_M_accessEv>
 800a018:	4603      	mov	r3, r0
 800a01a:	4618      	mov	r0, r3
 800a01c:	3708      	adds	r7, #8
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}

0800a022 <_ZNSt14_Function_base13_Base_managerIPFvvEE8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800a022:	b590      	push	{r4, r7, lr}
 800a024:	b085      	sub	sp, #20
 800a026:	af00      	add	r7, sp, #0
 800a028:	60f8      	str	r0, [r7, #12]
 800a02a:	60b9      	str	r1, [r7, #8]
 800a02c:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800a02e:	68b8      	ldr	r0, [r7, #8]
 800a030:	f000 f81e 	bl	800a070 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>
 800a034:	4603      	mov	r3, r0
 800a036:	681c      	ldr	r4, [r3, #0]
 800a038:	68f8      	ldr	r0, [r7, #12]
 800a03a:	f7ff fcab 	bl	8009994 <_ZNSt9_Any_data9_M_accessEv>
 800a03e:	4603      	mov	r3, r0
 800a040:	4619      	mov	r1, r3
 800a042:	2004      	movs	r0, #4
 800a044:	f7ff fc9b 	bl	800997e <_ZnwjPv>
 800a048:	4603      	mov	r3, r0
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d000      	beq.n	800a050 <_ZNSt14_Function_base13_Base_managerIPFvvEE8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE+0x2e>
 800a04e:	601c      	str	r4, [r3, #0]
	}
 800a050:	bf00      	nop
 800a052:	3714      	adds	r7, #20
 800a054:	46bd      	mov	sp, r7
 800a056:	bd90      	pop	{r4, r7, pc}

0800a058 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 f81a 	bl	800a09c <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>
	}
 800a068:	bf00      	nop
 800a06a:	3708      	adds	r7, #8
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <_ZNKSt9_Any_data9_M_accessIPFvvEEERKT_v>:
      _M_access() const
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f7ff fc95 	bl	80099a8 <_ZNKSt9_Any_data9_M_accessEv>
 800a07e:	4603      	mov	r3, r0
 800a080:	4618      	mov	r0, r3
 800a082:	3708      	adds	r7, #8
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <_ZSt11__addressofIKPFvvEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800a088:	b480      	push	{r7}
 800a08a:	b083      	sub	sp, #12
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
	(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
 800a090:	687b      	ldr	r3, [r7, #4]
    }
 800a092:	4618      	mov	r0, r3
 800a094:	370c      	adds	r7, #12
 800a096:	46bd      	mov	sp, r7
 800a098:	bc80      	pop	{r7}
 800a09a:	4770      	bx	lr

0800a09c <_ZNSt9_Any_data9_M_accessIPFvvEEERT_v>:
      _M_access()
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f7ff fc75 	bl	8009994 <_ZNSt9_Any_data9_M_accessEv>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3708      	adds	r7, #8
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800a0b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a0ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800a0b8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800a0ba:	e003      	b.n	800a0c4 <LoopCopyDataInit>

0800a0bc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800a0bc:	4b0c      	ldr	r3, [pc, #48]	; (800a0f0 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 800a0be:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800a0c0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800a0c2:	3104      	adds	r1, #4

0800a0c4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800a0c4:	480b      	ldr	r0, [pc, #44]	; (800a0f4 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800a0c6:	4b0c      	ldr	r3, [pc, #48]	; (800a0f8 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 800a0c8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800a0ca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800a0cc:	d3f6      	bcc.n	800a0bc <CopyDataInit>
	ldr	r2, =_sbss
 800a0ce:	4a0b      	ldr	r2, [pc, #44]	; (800a0fc <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 800a0d0:	e002      	b.n	800a0d8 <LoopFillZerobss>

0800a0d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800a0d2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800a0d4:	f842 3b04 	str.w	r3, [r2], #4

0800a0d8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800a0d8:	4b09      	ldr	r3, [pc, #36]	; (800a100 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 800a0da:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800a0dc:	d3f9      	bcc.n	800a0d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800a0de:	f000 f83d 	bl	800a15c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a0e2:	f001 fb09 	bl	800b6f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800a0e6:	f7ff fcbd 	bl	8009a64 <main>
	bx	lr
 800a0ea:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800a0ec:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 800a0f0:	0800e1d4 	.word	0x0800e1d4
	ldr	r0, =_sdata
 800a0f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800a0f8:	20000520 	.word	0x20000520
	ldr	r2, =_sbss
 800a0fc:	20000520 	.word	0x20000520
	ldr	r3, = _ebss
 800a100:	200005a4 	.word	0x200005a4

0800a104 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800a104:	e7fe      	b.n	800a104 <ADC1_2_IRQHandler>

0800a106 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800a106:	b480      	push	{r7}
 800a108:	af00      	add	r7, sp, #0
}
 800a10a:	bf00      	nop
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bc80      	pop	{r7}
 800a110:	4770      	bx	lr

0800a112 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800a112:	b480      	push	{r7}
 800a114:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800a116:	e7fe      	b.n	800a116 <HardFault_Handler+0x4>

0800a118 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800a118:	b480      	push	{r7}
 800a11a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800a11c:	e7fe      	b.n	800a11c <MemManage_Handler+0x4>

0800a11e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800a11e:	b480      	push	{r7}
 800a120:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800a122:	e7fe      	b.n	800a122 <BusFault_Handler+0x4>

0800a124 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800a124:	b480      	push	{r7}
 800a126:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800a128:	e7fe      	b.n	800a128 <UsageFault_Handler+0x4>

0800a12a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800a12a:	b480      	push	{r7}
 800a12c:	af00      	add	r7, sp, #0
}
 800a12e:	bf00      	nop
 800a130:	46bd      	mov	sp, r7
 800a132:	bc80      	pop	{r7}
 800a134:	4770      	bx	lr

0800a136 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800a136:	b480      	push	{r7}
 800a138:	af00      	add	r7, sp, #0
}
 800a13a:	bf00      	nop
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bc80      	pop	{r7}
 800a140:	4770      	bx	lr

0800a142 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800a142:	b480      	push	{r7}
 800a144:	af00      	add	r7, sp, #0
}
 800a146:	bf00      	nop
 800a148:	46bd      	mov	sp, r7
 800a14a:	bc80      	pop	{r7}
 800a14c:	4770      	bx	lr

0800a14e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800a14e:	b480      	push	{r7}
 800a150:	af00      	add	r7, sp, #0
}
 800a152:	bf00      	nop
 800a154:	46bd      	mov	sp, r7
 800a156:	bc80      	pop	{r7}
 800a158:	4770      	bx	lr
	...

0800a15c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800a160:	4a15      	ldr	r2, [pc, #84]	; (800a1b8 <SystemInit+0x5c>)
 800a162:	4b15      	ldr	r3, [pc, #84]	; (800a1b8 <SystemInit+0x5c>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f043 0301 	orr.w	r3, r3, #1
 800a16a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800a16c:	4912      	ldr	r1, [pc, #72]	; (800a1b8 <SystemInit+0x5c>)
 800a16e:	4b12      	ldr	r3, [pc, #72]	; (800a1b8 <SystemInit+0x5c>)
 800a170:	685a      	ldr	r2, [r3, #4]
 800a172:	4b12      	ldr	r3, [pc, #72]	; (800a1bc <SystemInit+0x60>)
 800a174:	4013      	ands	r3, r2
 800a176:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a178:	4a0f      	ldr	r2, [pc, #60]	; (800a1b8 <SystemInit+0x5c>)
 800a17a:	4b0f      	ldr	r3, [pc, #60]	; (800a1b8 <SystemInit+0x5c>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800a182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a186:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a188:	4a0b      	ldr	r2, [pc, #44]	; (800a1b8 <SystemInit+0x5c>)
 800a18a:	4b0b      	ldr	r3, [pc, #44]	; (800a1b8 <SystemInit+0x5c>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a192:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800a194:	4a08      	ldr	r2, [pc, #32]	; (800a1b8 <SystemInit+0x5c>)
 800a196:	4b08      	ldr	r3, [pc, #32]	; (800a1b8 <SystemInit+0x5c>)
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800a19e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800a1a0:	4b05      	ldr	r3, [pc, #20]	; (800a1b8 <SystemInit+0x5c>)
 800a1a2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800a1a6:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 800a1a8:	f000 f80c 	bl	800a1c4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800a1ac:	4b04      	ldr	r3, [pc, #16]	; (800a1c0 <SystemInit+0x64>)
 800a1ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a1b2:	609a      	str	r2, [r3, #8]
#endif 
}
 800a1b4:	bf00      	nop
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	40021000 	.word	0x40021000
 800a1bc:	f8ff0000 	.word	0xf8ff0000
 800a1c0:	e000ed00 	.word	0xe000ed00

0800a1c4 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 800a1c8:	f000 f802 	bl	800a1d0 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 800a1cc:	bf00      	nop
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	607b      	str	r3, [r7, #4]
 800a1da:	2300      	movs	r3, #0
 800a1dc:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800a1de:	4a3a      	ldr	r2, [pc, #232]	; (800a2c8 <SetSysClockTo72+0xf8>)
 800a1e0:	4b39      	ldr	r3, [pc, #228]	; (800a2c8 <SetSysClockTo72+0xf8>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1e8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800a1ea:	4b37      	ldr	r3, [pc, #220]	; (800a2c8 <SetSysClockTo72+0xf8>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1f2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d103      	bne.n	800a208 <SetSysClockTo72+0x38>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800a206:	d1f0      	bne.n	800a1ea <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800a208:	4b2f      	ldr	r3, [pc, #188]	; (800a2c8 <SetSysClockTo72+0xf8>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a210:	2b00      	cmp	r3, #0
 800a212:	d002      	beq.n	800a21a <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800a214:	2301      	movs	r3, #1
 800a216:	603b      	str	r3, [r7, #0]
 800a218:	e001      	b.n	800a21e <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800a21a:	2300      	movs	r3, #0
 800a21c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	2b01      	cmp	r3, #1
 800a222:	d14b      	bne.n	800a2bc <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800a224:	4a29      	ldr	r2, [pc, #164]	; (800a2cc <SetSysClockTo72+0xfc>)
 800a226:	4b29      	ldr	r3, [pc, #164]	; (800a2cc <SetSysClockTo72+0xfc>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f043 0310 	orr.w	r3, r3, #16
 800a22e:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800a230:	4a26      	ldr	r2, [pc, #152]	; (800a2cc <SetSysClockTo72+0xfc>)
 800a232:	4b26      	ldr	r3, [pc, #152]	; (800a2cc <SetSysClockTo72+0xfc>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f023 0303 	bic.w	r3, r3, #3
 800a23a:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800a23c:	4a23      	ldr	r2, [pc, #140]	; (800a2cc <SetSysClockTo72+0xfc>)
 800a23e:	4b23      	ldr	r3, [pc, #140]	; (800a2cc <SetSysClockTo72+0xfc>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f043 0302 	orr.w	r3, r3, #2
 800a246:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800a248:	4a1f      	ldr	r2, [pc, #124]	; (800a2c8 <SetSysClockTo72+0xf8>)
 800a24a:	4b1f      	ldr	r3, [pc, #124]	; (800a2c8 <SetSysClockTo72+0xf8>)
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800a250:	4a1d      	ldr	r2, [pc, #116]	; (800a2c8 <SetSysClockTo72+0xf8>)
 800a252:	4b1d      	ldr	r3, [pc, #116]	; (800a2c8 <SetSysClockTo72+0xf8>)
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800a258:	4a1b      	ldr	r2, [pc, #108]	; (800a2c8 <SetSysClockTo72+0xf8>)
 800a25a:	4b1b      	ldr	r3, [pc, #108]	; (800a2c8 <SetSysClockTo72+0xf8>)
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a262:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 800a264:	4a18      	ldr	r2, [pc, #96]	; (800a2c8 <SetSysClockTo72+0xf8>)
 800a266:	4b18      	ldr	r3, [pc, #96]	; (800a2c8 <SetSysClockTo72+0xf8>)
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800a26e:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 800a270:	4a15      	ldr	r2, [pc, #84]	; (800a2c8 <SetSysClockTo72+0xf8>)
 800a272:	4b15      	ldr	r3, [pc, #84]	; (800a2c8 <SetSysClockTo72+0xf8>)
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800a27a:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800a27c:	4a12      	ldr	r2, [pc, #72]	; (800a2c8 <SetSysClockTo72+0xf8>)
 800a27e:	4b12      	ldr	r3, [pc, #72]	; (800a2c8 <SetSysClockTo72+0xf8>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a286:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800a288:	bf00      	nop
 800a28a:	4b0f      	ldr	r3, [pc, #60]	; (800a2c8 <SetSysClockTo72+0xf8>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a292:	2b00      	cmp	r3, #0
 800a294:	d0f9      	beq.n	800a28a <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800a296:	4a0c      	ldr	r2, [pc, #48]	; (800a2c8 <SetSysClockTo72+0xf8>)
 800a298:	4b0b      	ldr	r3, [pc, #44]	; (800a2c8 <SetSysClockTo72+0xf8>)
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	f023 0303 	bic.w	r3, r3, #3
 800a2a0:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800a2a2:	4a09      	ldr	r2, [pc, #36]	; (800a2c8 <SetSysClockTo72+0xf8>)
 800a2a4:	4b08      	ldr	r3, [pc, #32]	; (800a2c8 <SetSysClockTo72+0xf8>)
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	f043 0302 	orr.w	r3, r3, #2
 800a2ac:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800a2ae:	bf00      	nop
 800a2b0:	4b05      	ldr	r3, [pc, #20]	; (800a2c8 <SetSysClockTo72+0xf8>)
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	f003 030c 	and.w	r3, r3, #12
 800a2b8:	2b08      	cmp	r3, #8
 800a2ba:	d1f9      	bne.n	800a2b0 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 800a2bc:	bf00      	nop
 800a2be:	370c      	adds	r7, #12
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bc80      	pop	{r7}
 800a2c4:	4770      	bx	lr
 800a2c6:	bf00      	nop
 800a2c8:	40021000 	.word	0x40021000
 800a2cc:	40022000 	.word	0x40022000

0800a2d0 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b087      	sub	sp, #28
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	60f8      	str	r0, [r7, #12]
 800a2d8:	60b9      	str	r1, [r7, #8]
 800a2da:	607a      	str	r2, [r7, #4]
	int div = 1;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800a2e0:	e004      	b.n	800a2ec <ts_itoa+0x1c>
		div *= base;
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	fb02 f303 	mul.w	r3, r2, r3
 800a2ea:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	68ba      	ldr	r2, [r7, #8]
 800a2f0:	fbb2 f2f3 	udiv	r2, r2, r3
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d2f3      	bcs.n	800a2e2 <ts_itoa+0x12>

	while (div != 0)
 800a2fa:	e029      	b.n	800a350 <ts_itoa+0x80>
	{
		int num = d/div;
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	68ba      	ldr	r2, [r7, #8]
 800a300:	fbb2 f3f3 	udiv	r3, r2, r3
 800a304:	613b      	str	r3, [r7, #16]
		d = d%div;
 800a306:	697a      	ldr	r2, [r7, #20]
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a30e:	fb02 f201 	mul.w	r2, r2, r1
 800a312:	1a9b      	subs	r3, r3, r2
 800a314:	60bb      	str	r3, [r7, #8]
		div /= base;
 800a316:	697a      	ldr	r2, [r7, #20]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	fb92 f3f3 	sdiv	r3, r2, r3
 800a31e:	617b      	str	r3, [r7, #20]
		if (num > 9)
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	2b09      	cmp	r3, #9
 800a324:	dd0a      	ble.n	800a33c <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	1c59      	adds	r1, r3, #1
 800a32c:	68fa      	ldr	r2, [r7, #12]
 800a32e:	6011      	str	r1, [r2, #0]
 800a330:	693a      	ldr	r2, [r7, #16]
 800a332:	b2d2      	uxtb	r2, r2
 800a334:	3237      	adds	r2, #55	; 0x37
 800a336:	b2d2      	uxtb	r2, r2
 800a338:	701a      	strb	r2, [r3, #0]
 800a33a:	e009      	b.n	800a350 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	1c59      	adds	r1, r3, #1
 800a342:	68fa      	ldr	r2, [r7, #12]
 800a344:	6011      	str	r1, [r2, #0]
 800a346:	693a      	ldr	r2, [r7, #16]
 800a348:	b2d2      	uxtb	r2, r2
 800a34a:	3230      	adds	r2, #48	; 0x30
 800a34c:	b2d2      	uxtb	r2, r2
 800a34e:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d1d2      	bne.n	800a2fc <ts_itoa+0x2c>
	}
}
 800a356:	bf00      	nop
 800a358:	371c      	adds	r7, #28
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bc80      	pop	{r7}
 800a35e:	4770      	bx	lr

0800a360 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b088      	sub	sp, #32
 800a364:	af00      	add	r7, sp, #0
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	617b      	str	r3, [r7, #20]
	while(*fmt)
 800a370:	e07d      	b.n	800a46e <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	2b25      	cmp	r3, #37	; 0x25
 800a378:	d171      	bne.n	800a45e <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	3301      	adds	r3, #1
 800a37e:	60bb      	str	r3, [r7, #8]
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	2b64      	cmp	r3, #100	; 0x64
 800a386:	d01e      	beq.n	800a3c6 <ts_formatstring+0x66>
 800a388:	2b64      	cmp	r3, #100	; 0x64
 800a38a:	dc06      	bgt.n	800a39a <ts_formatstring+0x3a>
 800a38c:	2b58      	cmp	r3, #88	; 0x58
 800a38e:	d050      	beq.n	800a432 <ts_formatstring+0xd2>
 800a390:	2b63      	cmp	r3, #99	; 0x63
 800a392:	d00e      	beq.n	800a3b2 <ts_formatstring+0x52>
 800a394:	2b25      	cmp	r3, #37	; 0x25
 800a396:	d058      	beq.n	800a44a <ts_formatstring+0xea>
 800a398:	e05d      	b.n	800a456 <ts_formatstring+0xf6>
 800a39a:	2b73      	cmp	r3, #115	; 0x73
 800a39c:	d02b      	beq.n	800a3f6 <ts_formatstring+0x96>
 800a39e:	2b73      	cmp	r3, #115	; 0x73
 800a3a0:	dc02      	bgt.n	800a3a8 <ts_formatstring+0x48>
 800a3a2:	2b69      	cmp	r3, #105	; 0x69
 800a3a4:	d00f      	beq.n	800a3c6 <ts_formatstring+0x66>
 800a3a6:	e056      	b.n	800a456 <ts_formatstring+0xf6>
 800a3a8:	2b75      	cmp	r3, #117	; 0x75
 800a3aa:	d037      	beq.n	800a41c <ts_formatstring+0xbc>
 800a3ac:	2b78      	cmp	r3, #120	; 0x78
 800a3ae:	d040      	beq.n	800a432 <ts_formatstring+0xd2>
 800a3b0:	e051      	b.n	800a456 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	1c5a      	adds	r2, r3, #1
 800a3b6:	60fa      	str	r2, [r7, #12]
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	1d11      	adds	r1, r2, #4
 800a3bc:	6079      	str	r1, [r7, #4]
 800a3be:	6812      	ldr	r2, [r2, #0]
 800a3c0:	b2d2      	uxtb	r2, r2
 800a3c2:	701a      	strb	r2, [r3, #0]
				break;
 800a3c4:	e047      	b.n	800a456 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	1d1a      	adds	r2, r3, #4
 800a3ca:	607a      	str	r2, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 800a3d0:	69fb      	ldr	r3, [r7, #28]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	da07      	bge.n	800a3e6 <ts_formatstring+0x86>
					{
						val *= -1;
 800a3d6:	69fb      	ldr	r3, [r7, #28]
 800a3d8:	425b      	negs	r3, r3
 800a3da:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	1c5a      	adds	r2, r3, #1
 800a3e0:	60fa      	str	r2, [r7, #12]
 800a3e2:	222d      	movs	r2, #45	; 0x2d
 800a3e4:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 800a3e6:	69f9      	ldr	r1, [r7, #28]
 800a3e8:	f107 030c 	add.w	r3, r7, #12
 800a3ec:	220a      	movs	r2, #10
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f7ff ff6e 	bl	800a2d0 <ts_itoa>
				}
				break;
 800a3f4:	e02f      	b.n	800a456 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	1d1a      	adds	r2, r3, #4
 800a3fa:	607a      	str	r2, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	61bb      	str	r3, [r7, #24]
					while (*arg)
 800a400:	e007      	b.n	800a412 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	1c5a      	adds	r2, r3, #1
 800a406:	60fa      	str	r2, [r7, #12]
 800a408:	69ba      	ldr	r2, [r7, #24]
 800a40a:	1c51      	adds	r1, r2, #1
 800a40c:	61b9      	str	r1, [r7, #24]
 800a40e:	7812      	ldrb	r2, [r2, #0]
 800a410:	701a      	strb	r2, [r3, #0]
					while (*arg)
 800a412:	69bb      	ldr	r3, [r7, #24]
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1f3      	bne.n	800a402 <ts_formatstring+0xa2>
					}
				}
				break;
 800a41a:	e01c      	b.n	800a456 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	1d1a      	adds	r2, r3, #4
 800a420:	607a      	str	r2, [r7, #4]
 800a422:	6819      	ldr	r1, [r3, #0]
 800a424:	f107 030c 	add.w	r3, r7, #12
 800a428:	220a      	movs	r2, #10
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7ff ff50 	bl	800a2d0 <ts_itoa>
				break;
 800a430:	e011      	b.n	800a456 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	1d1a      	adds	r2, r3, #4
 800a436:	607a      	str	r2, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4619      	mov	r1, r3
 800a43c:	f107 030c 	add.w	r3, r7, #12
 800a440:	2210      	movs	r2, #16
 800a442:	4618      	mov	r0, r3
 800a444:	f7ff ff44 	bl	800a2d0 <ts_itoa>
				break;
 800a448:	e005      	b.n	800a456 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	1c5a      	adds	r2, r3, #1
 800a44e:	60fa      	str	r2, [r7, #12]
 800a450:	2225      	movs	r2, #37	; 0x25
 800a452:	701a      	strb	r2, [r3, #0]
				  break;
 800a454:	bf00      	nop
			}
			fmt++;
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	3301      	adds	r3, #1
 800a45a:	60bb      	str	r3, [r7, #8]
 800a45c:	e007      	b.n	800a46e <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	1c5a      	adds	r2, r3, #1
 800a462:	60fa      	str	r2, [r7, #12]
 800a464:	68ba      	ldr	r2, [r7, #8]
 800a466:	1c51      	adds	r1, r2, #1
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	7812      	ldrb	r2, [r2, #0]
 800a46c:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	f47f af7d 	bne.w	800a372 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2200      	movs	r2, #0
 800a47c:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	461a      	mov	r2, r3
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	1ad3      	subs	r3, r2, r3
}
 800a486:	4618      	mov	r0, r3
 800a488:	3720      	adds	r7, #32
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 800a48e:	b40e      	push	{r1, r2, r3}
 800a490:	b580      	push	{r7, lr}
 800a492:	b085      	sub	sp, #20
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 800a498:	f107 0320 	add.w	r3, r7, #32
 800a49c:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 800a49e:	68ba      	ldr	r2, [r7, #8]
 800a4a0:	69f9      	ldr	r1, [r7, #28]
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f7ff ff5c 	bl	800a360 <ts_formatstring>
 800a4a8:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3714      	adds	r7, #20
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a4b6:	b003      	add	sp, #12
 800a4b8:	4770      	bx	lr
	...

0800a4bc <fputs>:
**  Returns:  If successful, the result is 0; otherwise, the result is EOF.
**
**===========================================================================
*/
int fputs(const char *s, FILE *fp)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b086      	sub	sp, #24
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
	int length = strlen(s);
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f7fc f996 	bl	80067f8 <strlen>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	613b      	str	r3, [r7, #16]
	int wlen = 0;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	60fb      	str	r3, [r7, #12]
	int res;

	wlen = _write((fp->_file), (char*)s, length);
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800a4da:	693a      	ldr	r2, [r7, #16]
 800a4dc:	6879      	ldr	r1, [r7, #4]
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f002 fb46 	bl	800cb70 <_write>
 800a4e4:	60f8      	str	r0, [r7, #12]
	wlen += _write((fp->_file), "\n", 1);
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	490c      	ldr	r1, [pc, #48]	; (800a520 <fputs+0x64>)
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f002 fb3d 	bl	800cb70 <_write>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	4413      	add	r3, r2
 800a4fc:	60fb      	str	r3, [r7, #12]

	if (wlen == (length+1))
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	1c5a      	adds	r2, r3, #1
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	429a      	cmp	r2, r3
 800a506:	d102      	bne.n	800a50e <fputs+0x52>
	{
		res = 0;
 800a508:	2300      	movs	r3, #0
 800a50a:	617b      	str	r3, [r7, #20]
 800a50c:	e002      	b.n	800a514 <fputs+0x58>
	}
	else
	{
		res = EOF;
 800a50e:	f04f 33ff 	mov.w	r3, #4294967295
 800a512:	617b      	str	r3, [r7, #20]
	}

	return res;
 800a514:	697b      	ldr	r3, [r7, #20]
}
 800a516:	4618      	mov	r0, r3
 800a518:	3718      	adds	r7, #24
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	0800cb9c 	.word	0x0800cb9c

0800a524 <fwrite>:
**  Returns:  Number of elements written
**
**===========================================================================
*/
size_t fwrite(const void * buf, size_t size, size_t count, FILE * fp)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	60f8      	str	r0, [r7, #12]
 800a52c:	60b9      	str	r1, [r7, #8]
 800a52e:	607a      	str	r2, [r7, #4]
 800a530:	603b      	str	r3, [r7, #0]
	return (_write((fp->_file), (char*)buf, size * count) / size);
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800a538:	4618      	mov	r0, r3
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	fb02 f303 	mul.w	r3, r2, r3
 800a542:	461a      	mov	r2, r3
 800a544:	68f9      	ldr	r1, [r7, #12]
 800a546:	f002 fb13 	bl	800cb70 <_write>
 800a54a:	4603      	mov	r3, r0
 800a54c:	461a      	mov	r2, r3
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800a554:	4618      	mov	r0, r3
 800a556:	3710      	adds	r7, #16
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <_ZdlPv>:
 800a55c:	f001 b8fc 	b.w	800b758 <free>

0800a560 <__cxa_pure_virtual>:
 800a560:	b508      	push	{r3, lr}
 800a562:	221b      	movs	r2, #27
 800a564:	4902      	ldr	r1, [pc, #8]	; (800a570 <__cxa_pure_virtual+0x10>)
 800a566:	2002      	movs	r0, #2
 800a568:	f001 fd70 	bl	800c04c <write>
 800a56c:	f000 f816 	bl	800a59c <_ZSt9terminatev>
 800a570:	0800d460 	.word	0x0800d460

0800a574 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800a574:	b508      	push	{r3, lr}
 800a576:	4780      	blx	r0
 800a578:	f001 f876 	bl	800b668 <abort>
 800a57c:	f000 fdf8 	bl	800b170 <__cxa_begin_catch>
 800a580:	f001 f872 	bl	800b668 <abort>
 800a584:	460d      	mov	r5, r1
 800a586:	4604      	mov	r4, r0
 800a588:	f000 fe32 	bl	800b1f0 <__cxa_end_catch>
 800a58c:	3501      	adds	r5, #1
 800a58e:	d001      	beq.n	800a594 <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
 800a590:	f000 f82c 	bl	800a5ec <__cxa_end_cleanup>
 800a594:	4620      	mov	r0, r4
 800a596:	f000 fd79 	bl	800b08c <__cxa_call_unexpected>
 800a59a:	bf00      	nop

0800a59c <_ZSt9terminatev>:
 800a59c:	b508      	push	{r3, lr}
 800a59e:	4b03      	ldr	r3, [pc, #12]	; (800a5ac <_ZSt9terminatev+0x10>)
 800a5a0:	6818      	ldr	r0, [r3, #0]
 800a5a2:	f3bf 8f5b 	dmb	ish
 800a5a6:	f7ff ffe5 	bl	800a574 <_ZN10__cxxabiv111__terminateEPFvvE>
 800a5aa:	bf00      	nop
 800a5ac:	20000014 	.word	0x20000014

0800a5b0 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 800a5b0:	b508      	push	{r3, lr}
 800a5b2:	4780      	blx	r0
 800a5b4:	f7ff fff2 	bl	800a59c <_ZSt9terminatev>

0800a5b8 <_ZSt10unexpectedv>:
 800a5b8:	b508      	push	{r3, lr}
 800a5ba:	4b03      	ldr	r3, [pc, #12]	; (800a5c8 <_ZSt10unexpectedv+0x10>)
 800a5bc:	6818      	ldr	r0, [r3, #0]
 800a5be:	f3bf 8f5b 	dmb	ish
 800a5c2:	f7ff fff5 	bl	800a5b0 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 800a5c6:	bf00      	nop
 800a5c8:	20000018 	.word	0x20000018

0800a5cc <_ZSt13get_terminatev>:
 800a5cc:	4b02      	ldr	r3, [pc, #8]	; (800a5d8 <_ZSt13get_terminatev+0xc>)
 800a5ce:	6818      	ldr	r0, [r3, #0]
 800a5d0:	f3bf 8f5b 	dmb	ish
 800a5d4:	4770      	bx	lr
 800a5d6:	bf00      	nop
 800a5d8:	20000014 	.word	0x20000014

0800a5dc <_ZSt14get_unexpectedv>:
 800a5dc:	4b02      	ldr	r3, [pc, #8]	; (800a5e8 <_ZSt14get_unexpectedv+0xc>)
 800a5de:	6818      	ldr	r0, [r3, #0]
 800a5e0:	f3bf 8f5b 	dmb	ish
 800a5e4:	4770      	bx	lr
 800a5e6:	bf00      	nop
 800a5e8:	20000018 	.word	0x20000018

0800a5ec <__cxa_end_cleanup>:
 800a5ec:	b41e      	push	{r1, r2, r3, r4}
 800a5ee:	f000 f891 	bl	800a714 <__gnu_end_cleanup>
 800a5f2:	bc1e      	pop	{r1, r2, r3, r4}
 800a5f4:	f7fd f8e2 	bl	80077bc <_Unwind_Resume>

0800a5f8 <__cxa_type_match>:
 800a5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5fa:	7802      	ldrb	r2, [r0, #0]
 800a5fc:	b083      	sub	sp, #12
 800a5fe:	2a47      	cmp	r2, #71	; 0x47
 800a600:	460d      	mov	r5, r1
 800a602:	461f      	mov	r7, r3
 800a604:	d01e      	beq.n	800a644 <__cxa_type_match+0x4c>
 800a606:	2300      	movs	r3, #0
 800a608:	4c27      	ldr	r4, [pc, #156]	; (800a6a8 <__cxa_type_match+0xb0>)
 800a60a:	9301      	str	r3, [sp, #4]
 800a60c:	6823      	ldr	r3, [r4, #0]
 800a60e:	4620      	mov	r0, r4
 800a610:	689b      	ldr	r3, [r3, #8]
 800a612:	4798      	blx	r3
 800a614:	b180      	cbz	r0, 800a638 <__cxa_type_match+0x40>
 800a616:	2602      	movs	r6, #2
 800a618:	9b01      	ldr	r3, [sp, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	9301      	str	r3, [sp, #4]
 800a61e:	682b      	ldr	r3, [r5, #0]
 800a620:	4621      	mov	r1, r4
 800a622:	4628      	mov	r0, r5
 800a624:	691c      	ldr	r4, [r3, #16]
 800a626:	aa01      	add	r2, sp, #4
 800a628:	2301      	movs	r3, #1
 800a62a:	47a0      	blx	r4
 800a62c:	b130      	cbz	r0, 800a63c <__cxa_type_match+0x44>
 800a62e:	4630      	mov	r0, r6
 800a630:	9b01      	ldr	r3, [sp, #4]
 800a632:	603b      	str	r3, [r7, #0]
 800a634:	b003      	add	sp, #12
 800a636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a638:	2601      	movs	r6, #1
 800a63a:	e7f0      	b.n	800a61e <__cxa_type_match+0x26>
 800a63c:	4606      	mov	r6, r0
 800a63e:	4630      	mov	r0, r6
 800a640:	b003      	add	sp, #12
 800a642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a644:	7843      	ldrb	r3, [r0, #1]
 800a646:	2b4e      	cmp	r3, #78	; 0x4e
 800a648:	d1dd      	bne.n	800a606 <__cxa_type_match+0xe>
 800a64a:	7883      	ldrb	r3, [r0, #2]
 800a64c:	2b55      	cmp	r3, #85	; 0x55
 800a64e:	d1da      	bne.n	800a606 <__cxa_type_match+0xe>
 800a650:	78c3      	ldrb	r3, [r0, #3]
 800a652:	2b43      	cmp	r3, #67	; 0x43
 800a654:	d019      	beq.n	800a68a <__cxa_type_match+0x92>
 800a656:	78c3      	ldrb	r3, [r0, #3]
 800a658:	2b43      	cmp	r3, #67	; 0x43
 800a65a:	d1d4      	bne.n	800a606 <__cxa_type_match+0xe>
 800a65c:	7903      	ldrb	r3, [r0, #4]
 800a65e:	2b43      	cmp	r3, #67	; 0x43
 800a660:	d1d1      	bne.n	800a606 <__cxa_type_match+0xe>
 800a662:	7943      	ldrb	r3, [r0, #5]
 800a664:	2b2b      	cmp	r3, #43	; 0x2b
 800a666:	d1ce      	bne.n	800a606 <__cxa_type_match+0xe>
 800a668:	7983      	ldrb	r3, [r0, #6]
 800a66a:	2b2b      	cmp	r3, #43	; 0x2b
 800a66c:	d1cb      	bne.n	800a606 <__cxa_type_match+0xe>
 800a66e:	79c3      	ldrb	r3, [r0, #7]
 800a670:	2b01      	cmp	r3, #1
 800a672:	d8c8      	bhi.n	800a606 <__cxa_type_match+0xe>
 800a674:	d004      	beq.n	800a680 <__cxa_type_match+0x88>
 800a676:	f850 4c20 	ldr.w	r4, [r0, #-32]
 800a67a:	3058      	adds	r0, #88	; 0x58
 800a67c:	9001      	str	r0, [sp, #4]
 800a67e:	e7c5      	b.n	800a60c <__cxa_type_match+0x14>
 800a680:	f850 0c20 	ldr.w	r0, [r0, #-32]
 800a684:	f850 4c78 	ldr.w	r4, [r0, #-120]
 800a688:	e7f8      	b.n	800a67c <__cxa_type_match+0x84>
 800a68a:	7903      	ldrb	r3, [r0, #4]
 800a68c:	2b46      	cmp	r3, #70	; 0x46
 800a68e:	d1e2      	bne.n	800a656 <__cxa_type_match+0x5e>
 800a690:	7943      	ldrb	r3, [r0, #5]
 800a692:	2b4f      	cmp	r3, #79	; 0x4f
 800a694:	d1df      	bne.n	800a656 <__cxa_type_match+0x5e>
 800a696:	7983      	ldrb	r3, [r0, #6]
 800a698:	2b52      	cmp	r3, #82	; 0x52
 800a69a:	d1dc      	bne.n	800a656 <__cxa_type_match+0x5e>
 800a69c:	79c3      	ldrb	r3, [r0, #7]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d1d9      	bne.n	800a656 <__cxa_type_match+0x5e>
 800a6a2:	9301      	str	r3, [sp, #4]
 800a6a4:	4c01      	ldr	r4, [pc, #4]	; (800a6ac <__cxa_type_match+0xb4>)
 800a6a6:	e7b1      	b.n	800a60c <__cxa_type_match+0x14>
 800a6a8:	0800d498 	.word	0x0800d498
 800a6ac:	0800d490 	.word	0x0800d490

0800a6b0 <__cxa_begin_cleanup>:
 800a6b0:	b510      	push	{r4, lr}
 800a6b2:	4604      	mov	r4, r0
 800a6b4:	f000 ff3c 	bl	800b530 <__cxa_get_globals>
 800a6b8:	7823      	ldrb	r3, [r4, #0]
 800a6ba:	f1a4 0220 	sub.w	r2, r4, #32
 800a6be:	2b47      	cmp	r3, #71	; 0x47
 800a6c0:	d004      	beq.n	800a6cc <__cxa_begin_cleanup+0x1c>
 800a6c2:	6883      	ldr	r3, [r0, #8]
 800a6c4:	bb23      	cbnz	r3, 800a710 <__cxa_begin_cleanup+0x60>
 800a6c6:	6082      	str	r2, [r0, #8]
 800a6c8:	2001      	movs	r0, #1
 800a6ca:	bd10      	pop	{r4, pc}
 800a6cc:	7863      	ldrb	r3, [r4, #1]
 800a6ce:	2b4e      	cmp	r3, #78	; 0x4e
 800a6d0:	d1f7      	bne.n	800a6c2 <__cxa_begin_cleanup+0x12>
 800a6d2:	78a3      	ldrb	r3, [r4, #2]
 800a6d4:	2b55      	cmp	r3, #85	; 0x55
 800a6d6:	d1f4      	bne.n	800a6c2 <__cxa_begin_cleanup+0x12>
 800a6d8:	78e3      	ldrb	r3, [r4, #3]
 800a6da:	2b43      	cmp	r3, #67	; 0x43
 800a6dc:	d1f1      	bne.n	800a6c2 <__cxa_begin_cleanup+0x12>
 800a6de:	7923      	ldrb	r3, [r4, #4]
 800a6e0:	2b43      	cmp	r3, #67	; 0x43
 800a6e2:	d1ee      	bne.n	800a6c2 <__cxa_begin_cleanup+0x12>
 800a6e4:	7963      	ldrb	r3, [r4, #5]
 800a6e6:	2b2b      	cmp	r3, #43	; 0x2b
 800a6e8:	d1eb      	bne.n	800a6c2 <__cxa_begin_cleanup+0x12>
 800a6ea:	79a3      	ldrb	r3, [r4, #6]
 800a6ec:	2b2b      	cmp	r3, #43	; 0x2b
 800a6ee:	d1e8      	bne.n	800a6c2 <__cxa_begin_cleanup+0x12>
 800a6f0:	79e3      	ldrb	r3, [r4, #7]
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d8e5      	bhi.n	800a6c2 <__cxa_begin_cleanup+0x12>
 800a6f6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	f844 3c04 	str.w	r3, [r4, #-4]
 800a702:	d1e1      	bne.n	800a6c8 <__cxa_begin_cleanup+0x18>
 800a704:	6883      	ldr	r3, [r0, #8]
 800a706:	f844 3c08 	str.w	r3, [r4, #-8]
 800a70a:	6082      	str	r2, [r0, #8]
 800a70c:	2001      	movs	r0, #1
 800a70e:	bd10      	pop	{r4, pc}
 800a710:	f7ff ff44 	bl	800a59c <_ZSt9terminatev>

0800a714 <__gnu_end_cleanup>:
 800a714:	b508      	push	{r3, lr}
 800a716:	f000 ff0b 	bl	800b530 <__cxa_get_globals>
 800a71a:	6883      	ldr	r3, [r0, #8]
 800a71c:	b383      	cbz	r3, 800a780 <__gnu_end_cleanup+0x6c>
 800a71e:	f893 2020 	ldrb.w	r2, [r3, #32]
 800a722:	2a47      	cmp	r2, #71	; 0x47
 800a724:	d004      	beq.n	800a730 <__gnu_end_cleanup+0x1c>
 800a726:	2200      	movs	r2, #0
 800a728:	6082      	str	r2, [r0, #8]
 800a72a:	f103 0020 	add.w	r0, r3, #32
 800a72e:	bd08      	pop	{r3, pc}
 800a730:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800a734:	2a4e      	cmp	r2, #78	; 0x4e
 800a736:	d1f6      	bne.n	800a726 <__gnu_end_cleanup+0x12>
 800a738:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800a73c:	2a55      	cmp	r2, #85	; 0x55
 800a73e:	d1f2      	bne.n	800a726 <__gnu_end_cleanup+0x12>
 800a740:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800a744:	2a43      	cmp	r2, #67	; 0x43
 800a746:	d1ee      	bne.n	800a726 <__gnu_end_cleanup+0x12>
 800a748:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800a74c:	2a43      	cmp	r2, #67	; 0x43
 800a74e:	d1ea      	bne.n	800a726 <__gnu_end_cleanup+0x12>
 800a750:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800a754:	2a2b      	cmp	r2, #43	; 0x2b
 800a756:	d1e6      	bne.n	800a726 <__gnu_end_cleanup+0x12>
 800a758:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800a75c:	2a2b      	cmp	r2, #43	; 0x2b
 800a75e:	d1e2      	bne.n	800a726 <__gnu_end_cleanup+0x12>
 800a760:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800a764:	2a01      	cmp	r2, #1
 800a766:	d8de      	bhi.n	800a726 <__gnu_end_cleanup+0x12>
 800a768:	69da      	ldr	r2, [r3, #28]
 800a76a:	3a01      	subs	r2, #1
 800a76c:	61da      	str	r2, [r3, #28]
 800a76e:	2a00      	cmp	r2, #0
 800a770:	d1db      	bne.n	800a72a <__gnu_end_cleanup+0x16>
 800a772:	2200      	movs	r2, #0
 800a774:	6999      	ldr	r1, [r3, #24]
 800a776:	6081      	str	r1, [r0, #8]
 800a778:	619a      	str	r2, [r3, #24]
 800a77a:	f103 0020 	add.w	r0, r3, #32
 800a77e:	bd08      	pop	{r3, pc}
 800a780:	f7ff ff0c 	bl	800a59c <_ZSt9terminatev>

0800a784 <_ZL28read_encoded_value_with_basehjPKhPj>:
 800a784:	2850      	cmp	r0, #80	; 0x50
 800a786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a788:	d054      	beq.n	800a834 <_ZL28read_encoded_value_with_basehjPKhPj+0xb0>
 800a78a:	f000 040f 	and.w	r4, r0, #15
 800a78e:	2c0c      	cmp	r4, #12
 800a790:	d84e      	bhi.n	800a830 <_ZL28read_encoded_value_with_basehjPKhPj+0xac>
 800a792:	e8df f004 	tbb	[pc, r4]
 800a796:	3907      	.short	0x3907
 800a798:	4d170749 	.word	0x4d170749
 800a79c:	1f4d4d4d 	.word	0x1f4d4d4d
 800a7a0:	071b      	.short	0x071b
 800a7a2:	17          	.byte	0x17
 800a7a3:	00          	.byte	0x00
 800a7a4:	4615      	mov	r5, r2
 800a7a6:	f855 4b04 	ldr.w	r4, [r5], #4
 800a7aa:	b144      	cbz	r4, 800a7be <_ZL28read_encoded_value_with_basehjPKhPj+0x3a>
 800a7ac:	f000 0670 	and.w	r6, r0, #112	; 0x70
 800a7b0:	2e10      	cmp	r6, #16
 800a7b2:	bf08      	it	eq
 800a7b4:	4611      	moveq	r1, r2
 800a7b6:	0602      	lsls	r2, r0, #24
 800a7b8:	440c      	add	r4, r1
 800a7ba:	bf48      	it	mi
 800a7bc:	6824      	ldrmi	r4, [r4, #0]
 800a7be:	601c      	str	r4, [r3, #0]
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7c4:	4615      	mov	r5, r2
 800a7c6:	f855 4b08 	ldr.w	r4, [r5], #8
 800a7ca:	e7ee      	b.n	800a7aa <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800a7cc:	4615      	mov	r5, r2
 800a7ce:	f935 4b02 	ldrsh.w	r4, [r5], #2
 800a7d2:	e7ea      	b.n	800a7aa <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800a7d4:	2400      	movs	r4, #0
 800a7d6:	4615      	mov	r5, r2
 800a7d8:	4627      	mov	r7, r4
 800a7da:	f815 eb01 	ldrb.w	lr, [r5], #1
 800a7de:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
 800a7e2:	40be      	lsls	r6, r7
 800a7e4:	f01e 0f80 	tst.w	lr, #128	; 0x80
 800a7e8:	ea44 0406 	orr.w	r4, r4, r6
 800a7ec:	f107 0707 	add.w	r7, r7, #7
 800a7f0:	d1f3      	bne.n	800a7da <_ZL28read_encoded_value_with_basehjPKhPj+0x56>
 800a7f2:	2f1f      	cmp	r7, #31
 800a7f4:	d8d9      	bhi.n	800a7aa <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800a7f6:	f01e 0f40 	tst.w	lr, #64	; 0x40
 800a7fa:	d0d6      	beq.n	800a7aa <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800a7fc:	f04f 36ff 	mov.w	r6, #4294967295
 800a800:	fa06 f707 	lsl.w	r7, r6, r7
 800a804:	433c      	orrs	r4, r7
 800a806:	e7d1      	b.n	800a7ac <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 800a808:	2400      	movs	r4, #0
 800a80a:	4615      	mov	r5, r2
 800a80c:	4627      	mov	r7, r4
 800a80e:	f815 eb01 	ldrb.w	lr, [r5], #1
 800a812:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
 800a816:	40be      	lsls	r6, r7
 800a818:	f01e 0f80 	tst.w	lr, #128	; 0x80
 800a81c:	ea44 0406 	orr.w	r4, r4, r6
 800a820:	f107 0707 	add.w	r7, r7, #7
 800a824:	d1f3      	bne.n	800a80e <_ZL28read_encoded_value_with_basehjPKhPj+0x8a>
 800a826:	e7c0      	b.n	800a7aa <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800a828:	4615      	mov	r5, r2
 800a82a:	f835 4b02 	ldrh.w	r4, [r5], #2
 800a82e:	e7bc      	b.n	800a7aa <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800a830:	f000 ff1a 	bl	800b668 <abort>
 800a834:	3203      	adds	r2, #3
 800a836:	f022 0503 	bic.w	r5, r2, #3
 800a83a:	f855 4b04 	ldr.w	r4, [r5], #4
 800a83e:	601c      	str	r4, [r3, #0]
 800a840:	4628      	mov	r0, r5
 800a842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a844 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 800a844:	28ff      	cmp	r0, #255	; 0xff
 800a846:	d00d      	beq.n	800a864 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 800a848:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800a84c:	2820      	cmp	r0, #32
 800a84e:	d015      	beq.n	800a87c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 800a850:	d90a      	bls.n	800a868 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
 800a852:	2840      	cmp	r0, #64	; 0x40
 800a854:	d00f      	beq.n	800a876 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
 800a856:	2850      	cmp	r0, #80	; 0x50
 800a858:	d004      	beq.n	800a864 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 800a85a:	2830      	cmp	r0, #48	; 0x30
 800a85c:	d108      	bne.n	800a870 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 800a85e:	4608      	mov	r0, r1
 800a860:	f7fd b9b2 	b.w	8007bc8 <_Unwind_GetDataRelBase>
 800a864:	2000      	movs	r0, #0
 800a866:	4770      	bx	lr
 800a868:	2800      	cmp	r0, #0
 800a86a:	d0fb      	beq.n	800a864 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 800a86c:	2810      	cmp	r0, #16
 800a86e:	d0f9      	beq.n	800a864 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 800a870:	b508      	push	{r3, lr}
 800a872:	f000 fef9 	bl	800b668 <abort>
 800a876:	4608      	mov	r0, r1
 800a878:	f7fd b992 	b.w	8007ba0 <_Unwind_GetRegionStart>
 800a87c:	4608      	mov	r0, r1
 800a87e:	f7fd b99f 	b.w	8007bc0 <_Unwind_GetTextRelBase>
 800a882:	bf00      	nop

0800a884 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 800a884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a886:	460c      	mov	r4, r1
 800a888:	4615      	mov	r5, r2
 800a88a:	4607      	mov	r7, r0
 800a88c:	2800      	cmp	r0, #0
 800a88e:	d042      	beq.n	800a916 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x92>
 800a890:	f7fd f986 	bl	8007ba0 <_Unwind_GetRegionStart>
 800a894:	6028      	str	r0, [r5, #0]
 800a896:	7826      	ldrb	r6, [r4, #0]
 800a898:	3401      	adds	r4, #1
 800a89a:	2eff      	cmp	r6, #255	; 0xff
 800a89c:	d032      	beq.n	800a904 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x80>
 800a89e:	4639      	mov	r1, r7
 800a8a0:	4630      	mov	r0, r6
 800a8a2:	f7ff ffcf 	bl	800a844 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800a8a6:	4622      	mov	r2, r4
 800a8a8:	4601      	mov	r1, r0
 800a8aa:	1d2b      	adds	r3, r5, #4
 800a8ac:	4630      	mov	r0, r6
 800a8ae:	f7ff ff69 	bl	800a784 <_ZL28read_encoded_value_with_basehjPKhPj>
 800a8b2:	4604      	mov	r4, r0
 800a8b4:	7823      	ldrb	r3, [r4, #0]
 800a8b6:	1c60      	adds	r0, r4, #1
 800a8b8:	2bff      	cmp	r3, #255	; 0xff
 800a8ba:	752b      	strb	r3, [r5, #20]
 800a8bc:	d028      	beq.n	800a910 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8c>
 800a8be:	2400      	movs	r4, #0
 800a8c0:	2310      	movs	r3, #16
 800a8c2:	4622      	mov	r2, r4
 800a8c4:	752b      	strb	r3, [r5, #20]
 800a8c6:	f810 1b01 	ldrb.w	r1, [r0], #1
 800a8ca:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800a8ce:	4093      	lsls	r3, r2
 800a8d0:	0609      	lsls	r1, r1, #24
 800a8d2:	ea44 0403 	orr.w	r4, r4, r3
 800a8d6:	f102 0207 	add.w	r2, r2, #7
 800a8da:	d4f4      	bmi.n	800a8c6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x42>
 800a8dc:	4404      	add	r4, r0
 800a8de:	60ec      	str	r4, [r5, #12]
 800a8e0:	2400      	movs	r4, #0
 800a8e2:	4622      	mov	r2, r4
 800a8e4:	7803      	ldrb	r3, [r0, #0]
 800a8e6:	3001      	adds	r0, #1
 800a8e8:	756b      	strb	r3, [r5, #21]
 800a8ea:	f810 1b01 	ldrb.w	r1, [r0], #1
 800a8ee:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800a8f2:	4093      	lsls	r3, r2
 800a8f4:	431c      	orrs	r4, r3
 800a8f6:	060b      	lsls	r3, r1, #24
 800a8f8:	f102 0207 	add.w	r2, r2, #7
 800a8fc:	d4f5      	bmi.n	800a8ea <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x66>
 800a8fe:	4404      	add	r4, r0
 800a900:	612c      	str	r4, [r5, #16]
 800a902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a904:	6068      	str	r0, [r5, #4]
 800a906:	7823      	ldrb	r3, [r4, #0]
 800a908:	1c60      	adds	r0, r4, #1
 800a90a:	2bff      	cmp	r3, #255	; 0xff
 800a90c:	752b      	strb	r3, [r5, #20]
 800a90e:	d1d6      	bne.n	800a8be <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3a>
 800a910:	2300      	movs	r3, #0
 800a912:	60eb      	str	r3, [r5, #12]
 800a914:	e7e4      	b.n	800a8e0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5c>
 800a916:	e7bd      	b.n	800a894 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>

0800a918 <__gxx_personality_v0>:
 800a918:	2300      	movs	r3, #0
 800a91a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a91e:	f000 0403 	and.w	r4, r0, #3
 800a922:	b097      	sub	sp, #92	; 0x5c
 800a924:	2c01      	cmp	r4, #1
 800a926:	4689      	mov	r9, r1
 800a928:	4617      	mov	r7, r2
 800a92a:	930a      	str	r3, [sp, #40]	; 0x28
 800a92c:	d01e      	beq.n	800a96c <__gxx_personality_v0+0x54>
 800a92e:	d30e      	bcc.n	800a94e <__gxx_personality_v0+0x36>
 800a930:	2c02      	cmp	r4, #2
 800a932:	d10a      	bne.n	800a94a <__gxx_personality_v0+0x32>
 800a934:	4639      	mov	r1, r7
 800a936:	4648      	mov	r0, r9
 800a938:	f7fd f91c 	bl	8007b74 <__gnu_unwind_frame>
 800a93c:	2800      	cmp	r0, #0
 800a93e:	f000 80a5 	beq.w	800aa8c <__gxx_personality_v0+0x174>
 800a942:	2009      	movs	r0, #9
 800a944:	b017      	add	sp, #92	; 0x5c
 800a946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a94a:	f000 fe8d 	bl	800b668 <abort>
 800a94e:	0700      	lsls	r0, r0, #28
 800a950:	d4f0      	bmi.n	800a934 <__gxx_personality_v0+0x1c>
 800a952:	2301      	movs	r3, #1
 800a954:	9303      	str	r3, [sp, #12]
 800a956:	2300      	movs	r3, #0
 800a958:	aa16      	add	r2, sp, #88	; 0x58
 800a95a:	f842 9d2c 	str.w	r9, [r2, #-44]!
 800a95e:	9200      	str	r2, [sp, #0]
 800a960:	4619      	mov	r1, r3
 800a962:	220c      	movs	r2, #12
 800a964:	4638      	mov	r0, r7
 800a966:	f7fc fba5 	bl	80070b4 <_Unwind_VRS_Set>
 800a96a:	e00f      	b.n	800a98c <__gxx_personality_v0+0x74>
 800a96c:	f010 0408 	ands.w	r4, r0, #8
 800a970:	f000 8090 	beq.w	800aa94 <__gxx_personality_v0+0x17c>
 800a974:	aa16      	add	r2, sp, #88	; 0x58
 800a976:	f842 1d2c 	str.w	r1, [r2, #-44]!
 800a97a:	9200      	str	r2, [sp, #0]
 800a97c:	f044 0402 	orr.w	r4, r4, #2
 800a980:	4619      	mov	r1, r3
 800a982:	220c      	movs	r2, #12
 800a984:	4638      	mov	r0, r7
 800a986:	9403      	str	r4, [sp, #12]
 800a988:	f7fc fb94 	bl	80070b4 <_Unwind_VRS_Set>
 800a98c:	4638      	mov	r0, r7
 800a98e:	f7fd f90d 	bl	8007bac <_Unwind_GetLanguageSpecificData>
 800a992:	9005      	str	r0, [sp, #20]
 800a994:	2800      	cmp	r0, #0
 800a996:	d0cd      	beq.n	800a934 <__gxx_personality_v0+0x1c>
 800a998:	ab10      	add	r3, sp, #64	; 0x40
 800a99a:	461a      	mov	r2, r3
 800a99c:	9905      	ldr	r1, [sp, #20]
 800a99e:	4638      	mov	r0, r7
 800a9a0:	9306      	str	r3, [sp, #24]
 800a9a2:	f7ff ff6f 	bl	800a884 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 800a9a6:	4639      	mov	r1, r7
 800a9a8:	4604      	mov	r4, r0
 800a9aa:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 800a9ae:	f7ff ff49 	bl	800a844 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
 800a9b8:	9012      	str	r0, [sp, #72]	; 0x48
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	220f      	movs	r2, #15
 800a9be:	f8cd b000 	str.w	fp, [sp]
 800a9c2:	4638      	mov	r0, r7
 800a9c4:	f7fc fb50 	bl	8007068 <_Unwind_VRS_Get>
 800a9c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a9cc:	f023 0301 	bic.w	r3, r3, #1
 800a9d0:	42a2      	cmp	r2, r4
 800a9d2:	f103 36ff 	add.w	r6, r3, #4294967295
 800a9d6:	d975      	bls.n	800aac4 <__gxx_personality_v0+0x1ac>
 800a9d8:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
 800a9dc:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800a9e0:	f89d 5055 	ldrb.w	r5, [sp, #85]	; 0x55
 800a9e4:	2100      	movs	r1, #0
 800a9e6:	4628      	mov	r0, r5
 800a9e8:	f7ff ff2c 	bl	800a844 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800a9ec:	4622      	mov	r2, r4
 800a9ee:	4653      	mov	r3, sl
 800a9f0:	4601      	mov	r1, r0
 800a9f2:	4628      	mov	r0, r5
 800a9f4:	f7ff fec6 	bl	800a784 <_ZL28read_encoded_value_with_basehjPKhPj>
 800a9f8:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
 800a9fc:	4605      	mov	r5, r0
 800a9fe:	2100      	movs	r1, #0
 800aa00:	4620      	mov	r0, r4
 800aa02:	f7ff ff1f 	bl	800a844 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800aa06:	462a      	mov	r2, r5
 800aa08:	4643      	mov	r3, r8
 800aa0a:	4601      	mov	r1, r0
 800aa0c:	4620      	mov	r0, r4
 800aa0e:	f7ff feb9 	bl	800a784 <_ZL28read_encoded_value_with_basehjPKhPj>
 800aa12:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
 800aa16:	4605      	mov	r5, r0
 800aa18:	2100      	movs	r1, #0
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	f7ff ff12 	bl	800a844 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800aa20:	462a      	mov	r2, r5
 800aa22:	4601      	mov	r1, r0
 800aa24:	465b      	mov	r3, fp
 800aa26:	4620      	mov	r0, r4
 800aa28:	f7ff feac 	bl	800a784 <_ZL28read_encoded_value_with_basehjPKhPj>
 800aa2c:	4604      	mov	r4, r0
 800aa2e:	2000      	movs	r0, #0
 800aa30:	4602      	mov	r2, r0
 800aa32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa36:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800aa3a:	4093      	lsls	r3, r2
 800aa3c:	0609      	lsls	r1, r1, #24
 800aa3e:	ea40 0003 	orr.w	r0, r0, r3
 800aa42:	f102 0207 	add.w	r2, r2, #7
 800aa46:	d4f4      	bmi.n	800aa32 <__gxx_personality_v0+0x11a>
 800aa48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa4c:	4413      	add	r3, r2
 800aa4e:	429e      	cmp	r6, r3
 800aa50:	d231      	bcs.n	800aab6 <__gxx_personality_v0+0x19e>
 800aa52:	9b03      	ldr	r3, [sp, #12]
 800aa54:	07db      	lsls	r3, r3, #31
 800aa56:	d539      	bpl.n	800aacc <__gxx_personality_v0+0x1b4>
 800aa58:	2500      	movs	r5, #0
 800aa5a:	9504      	str	r5, [sp, #16]
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	220d      	movs	r2, #13
 800aa60:	4619      	mov	r1, r3
 800aa62:	f8cd 8000 	str.w	r8, [sp]
 800aa66:	4638      	mov	r0, r7
 800aa68:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800aa6a:	f7fc fafd 	bl	8007068 <_Unwind_VRS_Get>
 800aa6e:	9a05      	ldr	r2, [sp, #20]
 800aa70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa72:	f8c9 202c 	str.w	r2, [r9, #44]	; 0x2c
 800aa76:	9a04      	ldr	r2, [sp, #16]
 800aa78:	f8c9 4024 	str.w	r4, [r9, #36]	; 0x24
 800aa7c:	f8c9 5028 	str.w	r5, [r9, #40]	; 0x28
 800aa80:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
 800aa84:	f8c9 3020 	str.w	r3, [r9, #32]
 800aa88:	2006      	movs	r0, #6
 800aa8a:	e75b      	b.n	800a944 <__gxx_personality_v0+0x2c>
 800aa8c:	2008      	movs	r0, #8
 800aa8e:	b017      	add	sp, #92	; 0x5c
 800aa90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa94:	ab10      	add	r3, sp, #64	; 0x40
 800aa96:	9300      	str	r3, [sp, #0]
 800aa98:	9306      	str	r3, [sp, #24]
 800aa9a:	220d      	movs	r2, #13
 800aa9c:	4623      	mov	r3, r4
 800aa9e:	4621      	mov	r1, r4
 800aaa0:	4638      	mov	r0, r7
 800aaa2:	f8d9 5020 	ldr.w	r5, [r9, #32]
 800aaa6:	f7fc fadf 	bl	8007068 <_Unwind_VRS_Get>
 800aaaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aaac:	429d      	cmp	r5, r3
 800aaae:	d012      	beq.n	800aad6 <__gxx_personality_v0+0x1be>
 800aab0:	2302      	movs	r3, #2
 800aab2:	9303      	str	r3, [sp, #12]
 800aab4:	e74f      	b.n	800a956 <__gxx_personality_v0+0x3e>
 800aab6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aab8:	4413      	add	r3, r2
 800aaba:	429e      	cmp	r6, r3
 800aabc:	d359      	bcc.n	800ab72 <__gxx_personality_v0+0x25a>
 800aabe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aac0:	42a3      	cmp	r3, r4
 800aac2:	d88d      	bhi.n	800a9e0 <__gxx_personality_v0+0xc8>
 800aac4:	2500      	movs	r5, #0
 800aac6:	2401      	movs	r4, #1
 800aac8:	9504      	str	r5, [sp, #16]
 800aaca:	e107      	b.n	800acdc <__gxx_personality_v0+0x3c4>
 800aacc:	9b03      	ldr	r3, [sp, #12]
 800aace:	071b      	lsls	r3, r3, #28
 800aad0:	d54c      	bpl.n	800ab6c <__gxx_personality_v0+0x254>
 800aad2:	f7ff fd63 	bl	800a59c <_ZSt9terminatev>
 800aad6:	ab16      	add	r3, sp, #88	; 0x58
 800aad8:	f843 9d2c 	str.w	r9, [r3, #-44]!
 800aadc:	9300      	str	r3, [sp, #0]
 800aade:	4621      	mov	r1, r4
 800aae0:	4623      	mov	r3, r4
 800aae2:	220c      	movs	r2, #12
 800aae4:	4638      	mov	r0, r7
 800aae6:	f7fc fae5 	bl	80070b4 <_Unwind_VRS_Set>
 800aaea:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 800aaee:	9304      	str	r3, [sp, #16]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d03b      	beq.n	800ab6c <__gxx_personality_v0+0x254>
 800aaf4:	2403      	movs	r4, #3
 800aaf6:	f8d9 5028 	ldr.w	r5, [r9, #40]	; 0x28
 800aafa:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 800aafe:	2d00      	cmp	r5, #0
 800ab00:	f2c0 8108 	blt.w	800ad14 <__gxx_personality_v0+0x3fc>
 800ab04:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
 800ab08:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	aa16      	add	r2, sp, #88	; 0x58
 800ab10:	f842 9d28 	str.w	r9, [r2, #-40]!
 800ab14:	4619      	mov	r1, r3
 800ab16:	9200      	str	r2, [sp, #0]
 800ab18:	4638      	mov	r0, r7
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	f7fc faca 	bl	80070b4 <_Unwind_VRS_Set>
 800ab20:	2300      	movs	r3, #0
 800ab22:	2201      	movs	r2, #1
 800ab24:	4619      	mov	r1, r3
 800ab26:	f8cd a000 	str.w	sl, [sp]
 800ab2a:	4638      	mov	r0, r7
 800ab2c:	950d      	str	r5, [sp, #52]	; 0x34
 800ab2e:	f7fc fac1 	bl	80070b4 <_Unwind_VRS_Set>
 800ab32:	2300      	movs	r3, #0
 800ab34:	220f      	movs	r2, #15
 800ab36:	4619      	mov	r1, r3
 800ab38:	f8cd 8000 	str.w	r8, [sp]
 800ab3c:	4638      	mov	r0, r7
 800ab3e:	f7fc fa93 	bl	8007068 <_Unwind_VRS_Get>
 800ab42:	2300      	movs	r3, #0
 800ab44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab46:	9d04      	ldr	r5, [sp, #16]
 800ab48:	f002 0201 	and.w	r2, r2, #1
 800ab4c:	4315      	orrs	r5, r2
 800ab4e:	f8cd 8000 	str.w	r8, [sp]
 800ab52:	4638      	mov	r0, r7
 800ab54:	4619      	mov	r1, r3
 800ab56:	220f      	movs	r2, #15
 800ab58:	950e      	str	r5, [sp, #56]	; 0x38
 800ab5a:	f7fc faab 	bl	80070b4 <_Unwind_VRS_Set>
 800ab5e:	2c02      	cmp	r4, #2
 800ab60:	f000 8082 	beq.w	800ac68 <__gxx_personality_v0+0x350>
 800ab64:	2007      	movs	r0, #7
 800ab66:	b017      	add	sp, #92	; 0x5c
 800ab68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab6c:	4648      	mov	r0, r9
 800ab6e:	f000 fa7d 	bl	800b06c <__cxa_call_terminate>
 800ab72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab74:	461a      	mov	r2, r3
 800ab76:	9304      	str	r3, [sp, #16]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d17a      	bne.n	800ac72 <__gxx_personality_v0+0x35a>
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	f43f aed9 	beq.w	800a934 <__gxx_personality_v0+0x1c>
 800ab82:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab84:	9a04      	ldr	r2, [sp, #16]
 800ab86:	3801      	subs	r0, #1
 800ab88:	4403      	add	r3, r0
 800ab8a:	2a00      	cmp	r2, #0
 800ab8c:	f43f aed2 	beq.w	800a934 <__gxx_personality_v0+0x1c>
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d077      	beq.n	800ac84 <__gxx_personality_v0+0x36c>
 800ab94:	9a03      	ldr	r2, [sp, #12]
 800ab96:	f012 0208 	ands.w	r2, r2, #8
 800ab9a:	9209      	str	r2, [sp, #36]	; 0x24
 800ab9c:	f000 80f8 	beq.w	800ad90 <__gxx_personality_v0+0x478>
 800aba0:	2547      	movs	r5, #71	; 0x47
 800aba2:	244e      	movs	r4, #78	; 0x4e
 800aba4:	2055      	movs	r0, #85	; 0x55
 800aba6:	2143      	movs	r1, #67	; 0x43
 800aba8:	2246      	movs	r2, #70	; 0x46
 800abaa:	264f      	movs	r6, #79	; 0x4f
 800abac:	f04f 0e52 	mov.w	lr, #82	; 0x52
 800abb0:	f04f 0c00 	mov.w	ip, #0
 800abb4:	f889 5000 	strb.w	r5, [r9]
 800abb8:	f889 4001 	strb.w	r4, [r9, #1]
 800abbc:	f889 0002 	strb.w	r0, [r9, #2]
 800abc0:	f889 1003 	strb.w	r1, [r9, #3]
 800abc4:	f889 2004 	strb.w	r2, [r9, #4]
 800abc8:	f889 6005 	strb.w	r6, [r9, #5]
 800abcc:	f889 e006 	strb.w	lr, [r9, #6]
 800abd0:	f889 c007 	strb.w	ip, [r9, #7]
 800abd4:	2200      	movs	r2, #0
 800abd6:	9707      	str	r7, [sp, #28]
 800abd8:	9208      	str	r2, [sp, #32]
 800abda:	2500      	movs	r5, #0
 800abdc:	4629      	mov	r1, r5
 800abde:	e000      	b.n	800abe2 <__gxx_personality_v0+0x2ca>
 800abe0:	4623      	mov	r3, r4
 800abe2:	461c      	mov	r4, r3
 800abe4:	f814 0b01 	ldrb.w	r0, [r4], #1
 800abe8:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800abec:	408a      	lsls	r2, r1
 800abee:	0606      	lsls	r6, r0, #24
 800abf0:	ea45 0502 	orr.w	r5, r5, r2
 800abf4:	f101 0107 	add.w	r1, r1, #7
 800abf8:	d4f2      	bmi.n	800abe0 <__gxx_personality_v0+0x2c8>
 800abfa:	291f      	cmp	r1, #31
 800abfc:	d805      	bhi.n	800ac0a <__gxx_personality_v0+0x2f2>
 800abfe:	0642      	lsls	r2, r0, #25
 800ac00:	d503      	bpl.n	800ac0a <__gxx_personality_v0+0x2f2>
 800ac02:	2201      	movs	r2, #1
 800ac04:	408a      	lsls	r2, r1
 800ac06:	4252      	negs	r2, r2
 800ac08:	4315      	orrs	r5, r2
 800ac0a:	2600      	movs	r6, #0
 800ac0c:	4631      	mov	r1, r6
 800ac0e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800ac12:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800ac16:	408a      	lsls	r2, r1
 800ac18:	0607      	lsls	r7, r0, #24
 800ac1a:	ea46 0602 	orr.w	r6, r6, r2
 800ac1e:	f101 0107 	add.w	r1, r1, #7
 800ac22:	d4f4      	bmi.n	800ac0e <__gxx_personality_v0+0x2f6>
 800ac24:	291f      	cmp	r1, #31
 800ac26:	d805      	bhi.n	800ac34 <__gxx_personality_v0+0x31c>
 800ac28:	0640      	lsls	r0, r0, #25
 800ac2a:	d503      	bpl.n	800ac34 <__gxx_personality_v0+0x31c>
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	408b      	lsls	r3, r1
 800ac30:	425b      	negs	r3, r3
 800ac32:	431e      	orrs	r6, r3
 800ac34:	2d00      	cmp	r5, #0
 800ac36:	d05c      	beq.n	800acf2 <__gxx_personality_v0+0x3da>
 800ac38:	dd5e      	ble.n	800acf8 <__gxx_personality_v0+0x3e0>
 800ac3a:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 800ac3e:	28ff      	cmp	r0, #255	; 0xff
 800ac40:	f000 80a4 	beq.w	800ad8c <__gxx_personality_v0+0x474>
 800ac44:	f000 0307 	and.w	r3, r0, #7
 800ac48:	2b04      	cmp	r3, #4
 800ac4a:	f63f ae7e 	bhi.w	800a94a <__gxx_personality_v0+0x32>
 800ac4e:	a201      	add	r2, pc, #4	; (adr r2, 800ac54 <__gxx_personality_v0+0x33c>)
 800ac50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac54:	0800acbf 	.word	0x0800acbf
 800ac58:	0800a94b 	.word	0x0800a94b
 800ac5c:	0800acc5 	.word	0x0800acc5
 800ac60:	0800acbf 	.word	0x0800acbf
 800ac64:	0800ac9d 	.word	0x0800ac9d
 800ac68:	4648      	mov	r0, r9
 800ac6a:	f7ff fd21 	bl	800a6b0 <__cxa_begin_cleanup>
 800ac6e:	2007      	movs	r0, #7
 800ac70:	e668      	b.n	800a944 <__gxx_personality_v0+0x2c>
 800ac72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac74:	441a      	add	r2, r3
 800ac76:	9204      	str	r2, [sp, #16]
 800ac78:	2800      	cmp	r0, #0
 800ac7a:	d182      	bne.n	800ab82 <__gxx_personality_v0+0x26a>
 800ac7c:	9b04      	ldr	r3, [sp, #16]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	f43f ae58 	beq.w	800a934 <__gxx_personality_v0+0x1c>
 800ac84:	9b03      	ldr	r3, [sp, #12]
 800ac86:	f013 0301 	ands.w	r3, r3, #1
 800ac8a:	f47f ae53 	bne.w	800a934 <__gxx_personality_v0+0x1c>
 800ac8e:	9a03      	ldr	r2, [sp, #12]
 800ac90:	f012 0508 	ands.w	r5, r2, #8
 800ac94:	f040 8097 	bne.w	800adc6 <__gxx_personality_v0+0x4ae>
 800ac98:	2402      	movs	r4, #2
 800ac9a:	e737      	b.n	800ab0c <__gxx_personality_v0+0x1f4>
 800ac9c:	00eb      	lsls	r3, r5, #3
 800ac9e:	425b      	negs	r3, r3
 800aca0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aca2:	9912      	ldr	r1, [sp, #72]	; 0x48
 800aca4:	441a      	add	r2, r3
 800aca6:	4643      	mov	r3, r8
 800aca8:	f7ff fd6c 	bl	800a784 <_ZL28read_encoded_value_with_basehjPKhPj>
 800acac:	990e      	ldr	r1, [sp, #56]	; 0x38
 800acae:	b199      	cbz	r1, 800acd8 <__gxx_personality_v0+0x3c0>
 800acb0:	f1b9 0f00 	cmp.w	r9, #0
 800acb4:	d109      	bne.n	800acca <__gxx_personality_v0+0x3b2>
 800acb6:	2e00      	cmp	r6, #0
 800acb8:	d077      	beq.n	800adaa <__gxx_personality_v0+0x492>
 800acba:	19a3      	adds	r3, r4, r6
 800acbc:	e78d      	b.n	800abda <__gxx_personality_v0+0x2c2>
 800acbe:	00ab      	lsls	r3, r5, #2
 800acc0:	425b      	negs	r3, r3
 800acc2:	e7ed      	b.n	800aca0 <__gxx_personality_v0+0x388>
 800acc4:	006b      	lsls	r3, r5, #1
 800acc6:	425b      	negs	r3, r3
 800acc8:	e7ea      	b.n	800aca0 <__gxx_personality_v0+0x388>
 800acca:	ab0a      	add	r3, sp, #40	; 0x28
 800accc:	2200      	movs	r2, #0
 800acce:	4648      	mov	r0, r9
 800acd0:	f7ff fc92 	bl	800a5f8 <__cxa_type_match>
 800acd4:	2800      	cmp	r0, #0
 800acd6:	d0ee      	beq.n	800acb6 <__gxx_personality_v0+0x39e>
 800acd8:	2403      	movs	r4, #3
 800acda:	9f07      	ldr	r7, [sp, #28]
 800acdc:	9b03      	ldr	r3, [sp, #12]
 800acde:	07da      	lsls	r2, r3, #31
 800ace0:	d460      	bmi.n	800ada4 <__gxx_personality_v0+0x48c>
 800ace2:	9b03      	ldr	r3, [sp, #12]
 800ace4:	0719      	lsls	r1, r3, #28
 800ace6:	d466      	bmi.n	800adb6 <__gxx_personality_v0+0x49e>
 800ace8:	2c01      	cmp	r4, #1
 800acea:	f43f af3f 	beq.w	800ab6c <__gxx_personality_v0+0x254>
 800acee:	9905      	ldr	r1, [sp, #20]
 800acf0:	e705      	b.n	800aafe <__gxx_personality_v0+0x1e6>
 800acf2:	2301      	movs	r3, #1
 800acf4:	9308      	str	r3, [sp, #32]
 800acf6:	e7de      	b.n	800acb6 <__gxx_personality_v0+0x39e>
 800acf8:	f1b9 0f00 	cmp.w	r9, #0
 800acfc:	d001      	beq.n	800ad02 <__gxx_personality_v0+0x3ea>
 800acfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad00:	b35b      	cbz	r3, 800ad5a <__gxx_personality_v0+0x442>
 800ad02:	1c6b      	adds	r3, r5, #1
 800ad04:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ad06:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
 800ad0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d1d1      	bne.n	800acb6 <__gxx_personality_v0+0x39e>
 800ad12:	e7e1      	b.n	800acd8 <__gxx_personality_v0+0x3c0>
 800ad14:	9a06      	ldr	r2, [sp, #24]
 800ad16:	4638      	mov	r0, r7
 800ad18:	f7ff fdb4 	bl	800a884 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 800ad1c:	4639      	mov	r1, r7
 800ad1e:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 800ad22:	f7ff fd8f 	bl	800a844 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800ad26:	00aa      	lsls	r2, r5, #2
 800ad28:	f082 0203 	eor.w	r2, r2, #3
 800ad2c:	43d2      	mvns	r2, r2
 800ad2e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800ad30:	9012      	str	r0, [sp, #72]	; 0x48
 800ad32:	58b3      	ldr	r3, [r6, r2]
 800ad34:	4416      	add	r6, r2
 800ad36:	b133      	cbz	r3, 800ad46 <__gxx_personality_v0+0x42e>
 800ad38:	4632      	mov	r2, r6
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	f852 1f04 	ldr.w	r1, [r2, #4]!
 800ad40:	3301      	adds	r3, #1
 800ad42:	2900      	cmp	r1, #0
 800ad44:	d1fa      	bne.n	800ad3c <__gxx_personality_v0+0x424>
 800ad46:	2204      	movs	r2, #4
 800ad48:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
 800ad4c:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 800ad50:	f8c9 6034 	str.w	r6, [r9, #52]	; 0x34
 800ad54:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
 800ad58:	e6d4      	b.n	800ab04 <__gxx_personality_v0+0x1ec>
 800ad5a:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800ad5c:	1c6b      	adds	r3, r5, #1
 800ad5e:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
 800ad62:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800ad66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad68:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 800ad6c:	920f      	str	r2, [sp, #60]	; 0x3c
 800ad6e:	b921      	cbnz	r1, 800ad7a <__gxx_personality_v0+0x462>
 800ad70:	e7b2      	b.n	800acd8 <__gxx_personality_v0+0x3c0>
 800ad72:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800ad76:	2900      	cmp	r1, #0
 800ad78:	d0ae      	beq.n	800acd8 <__gxx_personality_v0+0x3c0>
 800ad7a:	4439      	add	r1, r7
 800ad7c:	465b      	mov	r3, fp
 800ad7e:	2200      	movs	r2, #0
 800ad80:	4648      	mov	r0, r9
 800ad82:	f7ff fc39 	bl	800a5f8 <__cxa_type_match>
 800ad86:	2800      	cmp	r0, #0
 800ad88:	d0f3      	beq.n	800ad72 <__gxx_personality_v0+0x45a>
 800ad8a:	e794      	b.n	800acb6 <__gxx_personality_v0+0x39e>
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	e787      	b.n	800aca0 <__gxx_personality_v0+0x388>
 800ad90:	f899 2007 	ldrb.w	r2, [r9, #7]
 800ad94:	2a01      	cmp	r2, #1
 800ad96:	bf0c      	ite	eq
 800ad98:	f859 2c20 	ldreq.w	r2, [r9, #-32]
 800ad9c:	f109 0258 	addne.w	r2, r9, #88	; 0x58
 800ada0:	920a      	str	r2, [sp, #40]	; 0x28
 800ada2:	e717      	b.n	800abd4 <__gxx_personality_v0+0x2bc>
 800ada4:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800ada8:	e658      	b.n	800aa5c <__gxx_personality_v0+0x144>
 800adaa:	9b08      	ldr	r3, [sp, #32]
 800adac:	9f07      	ldr	r7, [sp, #28]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	f47f af68 	bne.w	800ac84 <__gxx_personality_v0+0x36c>
 800adb4:	e5be      	b.n	800a934 <__gxx_personality_v0+0x1c>
 800adb6:	2c01      	cmp	r4, #1
 800adb8:	f43f ae8b 	beq.w	800aad2 <__gxx_personality_v0+0x1ba>
 800adbc:	2d00      	cmp	r5, #0
 800adbe:	f6bf aea1 	bge.w	800ab04 <__gxx_personality_v0+0x1ec>
 800adc2:	f7ff fbf9 	bl	800a5b8 <_ZSt10unexpectedv>
 800adc6:	461d      	mov	r5, r3
 800adc8:	2402      	movs	r4, #2
 800adca:	e69f      	b.n	800ab0c <__gxx_personality_v0+0x1f4>
 800adcc:	f000 f9d0 	bl	800b170 <__cxa_begin_catch>
 800add0:	e67f      	b.n	800aad2 <__gxx_personality_v0+0x1ba>
 800add2:	bf00      	nop

0800add4 <_ZNSt13bad_exceptionD1Ev>:
 800add4:	4770      	bx	lr
 800add6:	bf00      	nop

0800add8 <_ZGTtNKSt13bad_exception4whatEv>:
 800add8:	4800      	ldr	r0, [pc, #0]	; (800addc <_ZGTtNKSt13bad_exception4whatEv+0x4>)
 800adda:	4770      	bx	lr
 800addc:	0800d47c 	.word	0x0800d47c

0800ade0 <_ZNSt13bad_exceptionD0Ev>:
 800ade0:	b510      	push	{r4, lr}
 800ade2:	4604      	mov	r4, r0
 800ade4:	2104      	movs	r1, #4
 800ade6:	f000 fba7 	bl	800b538 <_ZdlPvj>
 800adea:	4620      	mov	r0, r4
 800adec:	bd10      	pop	{r4, pc}
 800adee:	bf00      	nop

0800adf0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 800adf0:	b510      	push	{r4, lr}
 800adf2:	4604      	mov	r4, r0
 800adf4:	4b02      	ldr	r3, [pc, #8]	; (800ae00 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 800adf6:	6003      	str	r3, [r0, #0]
 800adf8:	f000 fbc2 	bl	800b580 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800adfc:	4620      	mov	r0, r4
 800adfe:	bd10      	pop	{r4, pc}
 800ae00:	0800d56c 	.word	0x0800d56c

0800ae04 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 800ae04:	b510      	push	{r4, lr}
 800ae06:	4604      	mov	r4, r0
 800ae08:	4b04      	ldr	r3, [pc, #16]	; (800ae1c <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
 800ae0a:	6003      	str	r3, [r0, #0]
 800ae0c:	f000 fbb8 	bl	800b580 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800ae10:	4620      	mov	r0, r4
 800ae12:	210c      	movs	r1, #12
 800ae14:	f000 fb90 	bl	800b538 <_ZdlPvj>
 800ae18:	4620      	mov	r0, r4
 800ae1a:	bd10      	pop	{r4, pc}
 800ae1c:	0800d56c 	.word	0x0800d56c

0800ae20 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 800ae20:	b570      	push	{r4, r5, r6, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	9c06      	ldr	r4, [sp, #24]
 800ae26:	460d      	mov	r5, r1
 800ae28:	4294      	cmp	r4, r2
 800ae2a:	4606      	mov	r6, r0
 800ae2c:	d009      	beq.n	800ae42 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
 800ae2e:	68b0      	ldr	r0, [r6, #8]
 800ae30:	4629      	mov	r1, r5
 800ae32:	6806      	ldr	r6, [r0, #0]
 800ae34:	9406      	str	r4, [sp, #24]
 800ae36:	6a34      	ldr	r4, [r6, #32]
 800ae38:	46a4      	mov	ip, r4
 800ae3a:	b002      	add	sp, #8
 800ae3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae40:	4760      	bx	ip
 800ae42:	4619      	mov	r1, r3
 800ae44:	9201      	str	r2, [sp, #4]
 800ae46:	9300      	str	r3, [sp, #0]
 800ae48:	f000 fbf8 	bl	800b63c <_ZNKSt9type_infoeqERKS_>
 800ae4c:	9b00      	ldr	r3, [sp, #0]
 800ae4e:	9a01      	ldr	r2, [sp, #4]
 800ae50:	2800      	cmp	r0, #0
 800ae52:	d0ec      	beq.n	800ae2e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 800ae54:	2006      	movs	r0, #6
 800ae56:	b002      	add	sp, #8
 800ae58:	bd70      	pop	{r4, r5, r6, pc}
 800ae5a:	bf00      	nop

0800ae5c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 800ae5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae60:	4689      	mov	r9, r1
 800ae62:	b081      	sub	sp, #4
 800ae64:	4619      	mov	r1, r3
 800ae66:	461d      	mov	r5, r3
 800ae68:	4616      	mov	r6, r2
 800ae6a:	4607      	mov	r7, r0
 800ae6c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ae6e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 800ae72:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ae76:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800ae7a:	f000 fbdf 	bl	800b63c <_ZNKSt9type_infoeqERKS_>
 800ae7e:	b188      	cbz	r0, 800aea4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x48>
 800ae80:	f1b9 0f00 	cmp.w	r9, #0
 800ae84:	f8c8 4000 	str.w	r4, [r8]
 800ae88:	f888 6004 	strb.w	r6, [r8, #4]
 800ae8c:	db1e      	blt.n	800aecc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x70>
 800ae8e:	444c      	add	r4, r9
 800ae90:	45a2      	cmp	sl, r4
 800ae92:	bf0c      	ite	eq
 800ae94:	2406      	moveq	r4, #6
 800ae96:	2401      	movne	r4, #1
 800ae98:	f888 4006 	strb.w	r4, [r8, #6]
 800ae9c:	2000      	movs	r0, #0
 800ae9e:	b001      	add	sp, #4
 800aea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aea4:	4554      	cmp	r4, sl
 800aea6:	d018      	beq.n	800aeda <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7e>
 800aea8:	68b8      	ldr	r0, [r7, #8]
 800aeaa:	462b      	mov	r3, r5
 800aeac:	6805      	ldr	r5, [r0, #0]
 800aeae:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800aeb2:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800aeb6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800aeba:	940a      	str	r4, [sp, #40]	; 0x28
 800aebc:	69ec      	ldr	r4, [r5, #28]
 800aebe:	4632      	mov	r2, r6
 800aec0:	4649      	mov	r1, r9
 800aec2:	46a4      	mov	ip, r4
 800aec4:	b001      	add	sp, #4
 800aec6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeca:	4760      	bx	ip
 800aecc:	f119 0f02 	cmn.w	r9, #2
 800aed0:	d1e4      	bne.n	800ae9c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
 800aed2:	2301      	movs	r3, #1
 800aed4:	f888 3006 	strb.w	r3, [r8, #6]
 800aed8:	e7e0      	b.n	800ae9c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
 800aeda:	4659      	mov	r1, fp
 800aedc:	4638      	mov	r0, r7
 800aede:	f000 fbad 	bl	800b63c <_ZNKSt9type_infoeqERKS_>
 800aee2:	2800      	cmp	r0, #0
 800aee4:	d0e0      	beq.n	800aea8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x4c>
 800aee6:	2000      	movs	r0, #0
 800aee8:	f888 6005 	strb.w	r6, [r8, #5]
 800aeec:	b001      	add	sp, #4
 800aeee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aef2:	bf00      	nop

0800aef4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 800aef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aef8:	4607      	mov	r7, r0
 800aefa:	460c      	mov	r4, r1
 800aefc:	4615      	mov	r5, r2
 800aefe:	461e      	mov	r6, r3
 800af00:	f000 fb56 	bl	800b5b0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 800af04:	b108      	cbz	r0, 800af0a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
 800af06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af0a:	68b8      	ldr	r0, [r7, #8]
 800af0c:	4633      	mov	r3, r6
 800af0e:	6806      	ldr	r6, [r0, #0]
 800af10:	4621      	mov	r1, r4
 800af12:	69b4      	ldr	r4, [r6, #24]
 800af14:	462a      	mov	r2, r5
 800af16:	46a4      	mov	ip, r4
 800af18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af1c:	4760      	bx	ip
 800af1e:	bf00      	nop

0800af20 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
 800af20:	b570      	push	{r4, r5, r6, lr}
 800af22:	4b3c      	ldr	r3, [pc, #240]	; (800b014 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
 800af24:	b082      	sub	sp, #8
 800af26:	781a      	ldrb	r2, [r3, #0]
 800af28:	2a00      	cmp	r2, #0
 800af2a:	d135      	bne.n	800af98 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x78>
 800af2c:	2401      	movs	r4, #1
 800af2e:	701c      	strb	r4, [r3, #0]
 800af30:	f000 faec 	bl	800b50c <__cxa_current_exception_type>
 800af34:	2800      	cmp	r0, #0
 800af36:	d05b      	beq.n	800aff0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd0>
 800af38:	2200      	movs	r2, #0
 800af3a:	f04f 31ff 	mov.w	r1, #4294967295
 800af3e:	6844      	ldr	r4, [r0, #4]
 800af40:	4d35      	ldr	r5, [pc, #212]	; (800b018 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 800af42:	7823      	ldrb	r3, [r4, #0]
 800af44:	2b2a      	cmp	r3, #42	; 0x2a
 800af46:	bf08      	it	eq
 800af48:	3401      	addeq	r4, #1
 800af4a:	ab02      	add	r3, sp, #8
 800af4c:	f843 1d04 	str.w	r1, [r3, #-4]!
 800af50:	4620      	mov	r0, r4
 800af52:	4611      	mov	r1, r2
 800af54:	f7fb fbd8 	bl	8006708 <__cxa_demangle>
 800af58:	682b      	ldr	r3, [r5, #0]
 800af5a:	4606      	mov	r6, r0
 800af5c:	68db      	ldr	r3, [r3, #12]
 800af5e:	2230      	movs	r2, #48	; 0x30
 800af60:	2101      	movs	r1, #1
 800af62:	482e      	ldr	r0, [pc, #184]	; (800b01c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 800af64:	f7ff fade 	bl	800a524 <fwrite>
 800af68:	9b01      	ldr	r3, [sp, #4]
 800af6a:	b17b      	cbz	r3, 800af8c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
 800af6c:	682b      	ldr	r3, [r5, #0]
 800af6e:	4620      	mov	r0, r4
 800af70:	68d9      	ldr	r1, [r3, #12]
 800af72:	f7ff faa3 	bl	800a4bc <fputs>
 800af76:	682b      	ldr	r3, [r5, #0]
 800af78:	2202      	movs	r2, #2
 800af7a:	68db      	ldr	r3, [r3, #12]
 800af7c:	2101      	movs	r1, #1
 800af7e:	4828      	ldr	r0, [pc, #160]	; (800b020 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 800af80:	f7ff fad0 	bl	800a524 <fwrite>
 800af84:	9b01      	ldr	r3, [sp, #4]
 800af86:	b18b      	cbz	r3, 800afac <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
 800af88:	f000 fa88 	bl	800b49c <__cxa_rethrow>
 800af8c:	682b      	ldr	r3, [r5, #0]
 800af8e:	4630      	mov	r0, r6
 800af90:	68d9      	ldr	r1, [r3, #12]
 800af92:	f7ff fa93 	bl	800a4bc <fputs>
 800af96:	e7ee      	b.n	800af76 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
 800af98:	4b1f      	ldr	r3, [pc, #124]	; (800b018 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 800af9a:	221d      	movs	r2, #29
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	2101      	movs	r1, #1
 800afa0:	68db      	ldr	r3, [r3, #12]
 800afa2:	4820      	ldr	r0, [pc, #128]	; (800b024 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
 800afa4:	f7ff fabe 	bl	800a524 <fwrite>
 800afa8:	f000 fb5e 	bl	800b668 <abort>
 800afac:	4630      	mov	r0, r6
 800afae:	f000 fbd3 	bl	800b758 <free>
 800afb2:	e7e9      	b.n	800af88 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x68>
 800afb4:	2901      	cmp	r1, #1
 800afb6:	460c      	mov	r4, r1
 800afb8:	d127      	bne.n	800b00a <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xea>
 800afba:	f000 f8d9 	bl	800b170 <__cxa_begin_catch>
 800afbe:	6803      	ldr	r3, [r0, #0]
 800afc0:	689b      	ldr	r3, [r3, #8]
 800afc2:	4798      	blx	r3
 800afc4:	682b      	ldr	r3, [r5, #0]
 800afc6:	4606      	mov	r6, r0
 800afc8:	4621      	mov	r1, r4
 800afca:	68db      	ldr	r3, [r3, #12]
 800afcc:	220b      	movs	r2, #11
 800afce:	4816      	ldr	r0, [pc, #88]	; (800b028 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
 800afd0:	f7ff faa8 	bl	800a524 <fwrite>
 800afd4:	682b      	ldr	r3, [r5, #0]
 800afd6:	4630      	mov	r0, r6
 800afd8:	68d9      	ldr	r1, [r3, #12]
 800afda:	f7ff fa6f 	bl	800a4bc <fputs>
 800afde:	682b      	ldr	r3, [r5, #0]
 800afe0:	200a      	movs	r0, #10
 800afe2:	68d9      	ldr	r1, [r3, #12]
 800afe4:	f000 fb80 	bl	800b6e8 <fputc>
 800afe8:	f000 f902 	bl	800b1f0 <__cxa_end_catch>
 800afec:	f000 fb3c 	bl	800b668 <abort>
 800aff0:	4b09      	ldr	r3, [pc, #36]	; (800b018 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 800aff2:	4621      	mov	r1, r4
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	222d      	movs	r2, #45	; 0x2d
 800aff8:	68db      	ldr	r3, [r3, #12]
 800affa:	480c      	ldr	r0, [pc, #48]	; (800b02c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
 800affc:	f7ff fa92 	bl	800a524 <fwrite>
 800b000:	e7f4      	b.n	800afec <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
 800b002:	f000 f8f5 	bl	800b1f0 <__cxa_end_catch>
 800b006:	f7ff faf1 	bl	800a5ec <__cxa_end_cleanup>
 800b00a:	f000 f8b1 	bl	800b170 <__cxa_begin_catch>
 800b00e:	f000 f8ef 	bl	800b1f0 <__cxa_end_catch>
 800b012:	e7eb      	b.n	800afec <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
 800b014:	2000053c 	.word	0x2000053c
 800b018:	2000001c 	.word	0x2000001c
 800b01c:	0800d5b0 	.word	0x0800d5b0
 800b020:	0800d5e4 	.word	0x0800d5e4
 800b024:	0800d590 	.word	0x0800d590
 800b028:	0800d618 	.word	0x0800d618
 800b02c:	0800d5e8 	.word	0x0800d5e8

0800b030 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800b030:	7803      	ldrb	r3, [r0, #0]
 800b032:	2b47      	cmp	r3, #71	; 0x47
 800b034:	d001      	beq.n	800b03a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
 800b036:	2000      	movs	r0, #0
 800b038:	4770      	bx	lr
 800b03a:	7843      	ldrb	r3, [r0, #1]
 800b03c:	2b4e      	cmp	r3, #78	; 0x4e
 800b03e:	d1fa      	bne.n	800b036 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800b040:	7883      	ldrb	r3, [r0, #2]
 800b042:	2b55      	cmp	r3, #85	; 0x55
 800b044:	d1f7      	bne.n	800b036 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800b046:	78c3      	ldrb	r3, [r0, #3]
 800b048:	2b43      	cmp	r3, #67	; 0x43
 800b04a:	d1f4      	bne.n	800b036 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800b04c:	7903      	ldrb	r3, [r0, #4]
 800b04e:	2b43      	cmp	r3, #67	; 0x43
 800b050:	d1f1      	bne.n	800b036 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800b052:	7943      	ldrb	r3, [r0, #5]
 800b054:	2b2b      	cmp	r3, #43	; 0x2b
 800b056:	d1ee      	bne.n	800b036 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800b058:	7983      	ldrb	r3, [r0, #6]
 800b05a:	2b2b      	cmp	r3, #43	; 0x2b
 800b05c:	d1eb      	bne.n	800b036 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800b05e:	79c0      	ldrb	r0, [r0, #7]
 800b060:	2801      	cmp	r0, #1
 800b062:	bf8c      	ite	hi
 800b064:	2000      	movhi	r0, #0
 800b066:	2001      	movls	r0, #1
 800b068:	4770      	bx	lr
 800b06a:	bf00      	nop

0800b06c <__cxa_call_terminate>:
 800b06c:	b510      	push	{r4, lr}
 800b06e:	b130      	cbz	r0, 800b07e <__cxa_call_terminate+0x12>
 800b070:	4604      	mov	r4, r0
 800b072:	f000 f87d 	bl	800b170 <__cxa_begin_catch>
 800b076:	4620      	mov	r0, r4
 800b078:	f7ff ffda 	bl	800b030 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800b07c:	b908      	cbnz	r0, 800b082 <__cxa_call_terminate+0x16>
 800b07e:	f7ff fa8d 	bl	800a59c <_ZSt9terminatev>
 800b082:	f854 0c14 	ldr.w	r0, [r4, #-20]
 800b086:	f7ff fa75 	bl	800a574 <_ZN10__cxxabiv111__terminateEPFvvE>
 800b08a:	bf00      	nop

0800b08c <__cxa_call_unexpected>:
 800b08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b090:	b085      	sub	sp, #20
 800b092:	4602      	mov	r2, r0
 800b094:	f7ff ffcc 	bl	800b030 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800b098:	b168      	cbz	r0, 800b0b6 <__cxa_call_unexpected+0x2a>
 800b09a:	f852 4c18 	ldr.w	r4, [r2, #-24]
 800b09e:	4610      	mov	r0, r2
 800b0a0:	f852 5c14 	ldr.w	r5, [r2, #-20]
 800b0a4:	6a96      	ldr	r6, [r2, #40]	; 0x28
 800b0a6:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800b0a8:	f8d2 9034 	ldr.w	r9, [r2, #52]	; 0x34
 800b0ac:	f000 f860 	bl	800b170 <__cxa_begin_catch>
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	f7ff fa7d 	bl	800a5b0 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 800b0b6:	4610      	mov	r0, r2
 800b0b8:	f000 f85a 	bl	800b170 <__cxa_begin_catch>
 800b0bc:	f7ff fa7c 	bl	800a5b8 <_ZSt10unexpectedv>
 800b0c0:	f000 f856 	bl	800b170 <__cxa_begin_catch>
 800b0c4:	f7ff fa6a 	bl	800a59c <_ZSt9terminatev>
 800b0c8:	f000 f852 	bl	800b170 <__cxa_begin_catch>
 800b0cc:	f000 fa2c 	bl	800b528 <__cxa_get_globals_fast>
 800b0d0:	6803      	ldr	r3, [r0, #0]
 800b0d2:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800b0d6:	2a01      	cmp	r2, #1
 800b0d8:	d037      	beq.n	800b14a <__cxa_call_unexpected+0xbe>
 800b0da:	f103 0278 	add.w	r2, r3, #120	; 0x78
 800b0de:	f04f 0800 	mov.w	r8, #0
 800b0e2:	464c      	mov	r4, r9
 800b0e4:	46c1      	mov	r9, r8
 800b0e6:	f10d 0a10 	add.w	sl, sp, #16
 800b0ea:	3320      	adds	r3, #32
 800b0ec:	f027 0b03 	bic.w	fp, r7, #3
 800b0f0:	9301      	str	r3, [sp, #4]
 800b0f2:	f84a 2d08 	str.w	r2, [sl, #-8]!
 800b0f6:	45b1      	cmp	r9, r6
 800b0f8:	da1b      	bge.n	800b132 <__cxa_call_unexpected+0xa6>
 800b0fa:	6827      	ldr	r7, [r4, #0]
 800b0fc:	b107      	cbz	r7, 800b100 <__cxa_call_unexpected+0x74>
 800b0fe:	4427      	add	r7, r4
 800b100:	4653      	mov	r3, sl
 800b102:	2200      	movs	r2, #0
 800b104:	4639      	mov	r1, r7
 800b106:	9801      	ldr	r0, [sp, #4]
 800b108:	f7ff fa76 	bl	800a5f8 <__cxa_type_match>
 800b10c:	bb10      	cbnz	r0, 800b154 <__cxa_call_unexpected+0xc8>
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	aa04      	add	r2, sp, #16
 800b112:	691b      	ldr	r3, [r3, #16]
 800b114:	f842 0d04 	str.w	r0, [r2, #-4]!
 800b118:	9300      	str	r3, [sp, #0]
 800b11a:	4638      	mov	r0, r7
 800b11c:	2301      	movs	r3, #1
 800b11e:	4911      	ldr	r1, [pc, #68]	; (800b164 <__cxa_call_unexpected+0xd8>)
 800b120:	9f00      	ldr	r7, [sp, #0]
 800b122:	47b8      	blx	r7
 800b124:	2800      	cmp	r0, #0
 800b126:	bf18      	it	ne
 800b128:	4680      	movne	r8, r0
 800b12a:	f109 0901 	add.w	r9, r9, #1
 800b12e:	445c      	add	r4, fp
 800b130:	e7e1      	b.n	800b0f6 <__cxa_call_unexpected+0x6a>
 800b132:	f1b8 0f00 	cmp.w	r8, #0
 800b136:	d00a      	beq.n	800b14e <__cxa_call_unexpected+0xc2>
 800b138:	2004      	movs	r0, #4
 800b13a:	f000 f911 	bl	800b360 <__cxa_allocate_exception>
 800b13e:	4b0a      	ldr	r3, [pc, #40]	; (800b168 <__cxa_call_unexpected+0xdc>)
 800b140:	4a0a      	ldr	r2, [pc, #40]	; (800b16c <__cxa_call_unexpected+0xe0>)
 800b142:	6003      	str	r3, [r0, #0]
 800b144:	4907      	ldr	r1, [pc, #28]	; (800b164 <__cxa_call_unexpected+0xd8>)
 800b146:	f000 f969 	bl	800b41c <__cxa_throw>
 800b14a:	681a      	ldr	r2, [r3, #0]
 800b14c:	e7c7      	b.n	800b0de <__cxa_call_unexpected+0x52>
 800b14e:	4628      	mov	r0, r5
 800b150:	f7ff fa10 	bl	800a574 <_ZN10__cxxabiv111__terminateEPFvvE>
 800b154:	f000 f9a2 	bl	800b49c <__cxa_rethrow>
 800b158:	f000 f84a 	bl	800b1f0 <__cxa_end_catch>
 800b15c:	f000 f848 	bl	800b1f0 <__cxa_end_catch>
 800b160:	f7ff fa44 	bl	800a5ec <__cxa_end_cleanup>
 800b164:	0800d4a0 	.word	0x0800d4a0
 800b168:	0800d524 	.word	0x0800d524
 800b16c:	0800add5 	.word	0x0800add5

0800b170 <__cxa_begin_catch>:
 800b170:	b538      	push	{r3, r4, r5, lr}
 800b172:	4604      	mov	r4, r0
 800b174:	f000 f9dc 	bl	800b530 <__cxa_get_globals>
 800b178:	7822      	ldrb	r2, [r4, #0]
 800b17a:	6803      	ldr	r3, [r0, #0]
 800b17c:	2a47      	cmp	r2, #71	; 0x47
 800b17e:	f1a4 0120 	sub.w	r1, r4, #32
 800b182:	d005      	beq.n	800b190 <__cxa_begin_catch+0x20>
 800b184:	2b00      	cmp	r3, #0
 800b186:	d131      	bne.n	800b1ec <__cxa_begin_catch+0x7c>
 800b188:	461c      	mov	r4, r3
 800b18a:	6001      	str	r1, [r0, #0]
 800b18c:	4620      	mov	r0, r4
 800b18e:	bd38      	pop	{r3, r4, r5, pc}
 800b190:	7862      	ldrb	r2, [r4, #1]
 800b192:	2a4e      	cmp	r2, #78	; 0x4e
 800b194:	d1f6      	bne.n	800b184 <__cxa_begin_catch+0x14>
 800b196:	78a2      	ldrb	r2, [r4, #2]
 800b198:	2a55      	cmp	r2, #85	; 0x55
 800b19a:	d1f3      	bne.n	800b184 <__cxa_begin_catch+0x14>
 800b19c:	78e2      	ldrb	r2, [r4, #3]
 800b19e:	2a43      	cmp	r2, #67	; 0x43
 800b1a0:	d1f0      	bne.n	800b184 <__cxa_begin_catch+0x14>
 800b1a2:	7922      	ldrb	r2, [r4, #4]
 800b1a4:	2a43      	cmp	r2, #67	; 0x43
 800b1a6:	d1ed      	bne.n	800b184 <__cxa_begin_catch+0x14>
 800b1a8:	7962      	ldrb	r2, [r4, #5]
 800b1aa:	2a2b      	cmp	r2, #43	; 0x2b
 800b1ac:	d1ea      	bne.n	800b184 <__cxa_begin_catch+0x14>
 800b1ae:	79a2      	ldrb	r2, [r4, #6]
 800b1b0:	2a2b      	cmp	r2, #43	; 0x2b
 800b1b2:	d1e7      	bne.n	800b184 <__cxa_begin_catch+0x14>
 800b1b4:	79e2      	ldrb	r2, [r4, #7]
 800b1b6:	2a01      	cmp	r2, #1
 800b1b8:	d8e4      	bhi.n	800b184 <__cxa_begin_catch+0x14>
 800b1ba:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 800b1be:	2a00      	cmp	r2, #0
 800b1c0:	db11      	blt.n	800b1e6 <__cxa_begin_catch+0x76>
 800b1c2:	3201      	adds	r2, #1
 800b1c4:	6845      	ldr	r5, [r0, #4]
 800b1c6:	428b      	cmp	r3, r1
 800b1c8:	f105 35ff 	add.w	r5, r5, #4294967295
 800b1cc:	f844 2c0c 	str.w	r2, [r4, #-12]
 800b1d0:	6045      	str	r5, [r0, #4]
 800b1d2:	bf1c      	itt	ne
 800b1d4:	f844 3c10 	strne.w	r3, [r4, #-16]
 800b1d8:	6001      	strne	r1, [r0, #0]
 800b1da:	4620      	mov	r0, r4
 800b1dc:	6a64      	ldr	r4, [r4, #36]	; 0x24
 800b1de:	f7fb ff3b 	bl	8007058 <_Unwind_Complete>
 800b1e2:	4620      	mov	r0, r4
 800b1e4:	bd38      	pop	{r3, r4, r5, pc}
 800b1e6:	f1c2 0201 	rsb	r2, r2, #1
 800b1ea:	e7eb      	b.n	800b1c4 <__cxa_begin_catch+0x54>
 800b1ec:	f7ff f9d6 	bl	800a59c <_ZSt9terminatev>

0800b1f0 <__cxa_end_catch>:
 800b1f0:	b508      	push	{r3, lr}
 800b1f2:	f000 f999 	bl	800b528 <__cxa_get_globals_fast>
 800b1f6:	4602      	mov	r2, r0
 800b1f8:	6800      	ldr	r0, [r0, #0]
 800b1fa:	2800      	cmp	r0, #0
 800b1fc:	d03d      	beq.n	800b27a <__cxa_end_catch+0x8a>
 800b1fe:	f890 3020 	ldrb.w	r3, [r0, #32]
 800b202:	2b47      	cmp	r3, #71	; 0x47
 800b204:	d006      	beq.n	800b214 <__cxa_end_catch+0x24>
 800b206:	2300      	movs	r3, #0
 800b208:	3020      	adds	r0, #32
 800b20a:	6013      	str	r3, [r2, #0]
 800b20c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b210:	f7fb bf24 	b.w	800705c <_Unwind_DeleteException>
 800b214:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800b218:	2b4e      	cmp	r3, #78	; 0x4e
 800b21a:	d1f4      	bne.n	800b206 <__cxa_end_catch+0x16>
 800b21c:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800b220:	2b55      	cmp	r3, #85	; 0x55
 800b222:	d1f0      	bne.n	800b206 <__cxa_end_catch+0x16>
 800b224:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 800b228:	2b43      	cmp	r3, #67	; 0x43
 800b22a:	d1ec      	bne.n	800b206 <__cxa_end_catch+0x16>
 800b22c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800b230:	2b43      	cmp	r3, #67	; 0x43
 800b232:	d1e8      	bne.n	800b206 <__cxa_end_catch+0x16>
 800b234:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800b238:	2b2b      	cmp	r3, #43	; 0x2b
 800b23a:	d1e4      	bne.n	800b206 <__cxa_end_catch+0x16>
 800b23c:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 800b240:	2b2b      	cmp	r3, #43	; 0x2b
 800b242:	d1e0      	bne.n	800b206 <__cxa_end_catch+0x16>
 800b244:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 800b248:	2b01      	cmp	r3, #1
 800b24a:	d8dc      	bhi.n	800b206 <__cxa_end_catch+0x16>
 800b24c:	6943      	ldr	r3, [r0, #20]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	db05      	blt.n	800b25e <__cxa_end_catch+0x6e>
 800b252:	3b01      	subs	r3, #1
 800b254:	d008      	beq.n	800b268 <__cxa_end_catch+0x78>
 800b256:	1c5a      	adds	r2, r3, #1
 800b258:	d00d      	beq.n	800b276 <__cxa_end_catch+0x86>
 800b25a:	6143      	str	r3, [r0, #20]
 800b25c:	bd08      	pop	{r3, pc}
 800b25e:	3301      	adds	r3, #1
 800b260:	d1fb      	bne.n	800b25a <__cxa_end_catch+0x6a>
 800b262:	6901      	ldr	r1, [r0, #16]
 800b264:	6011      	str	r1, [r2, #0]
 800b266:	e7f8      	b.n	800b25a <__cxa_end_catch+0x6a>
 800b268:	6903      	ldr	r3, [r0, #16]
 800b26a:	3020      	adds	r0, #32
 800b26c:	6013      	str	r3, [r2, #0]
 800b26e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b272:	f7fb bef3 	b.w	800705c <_Unwind_DeleteException>
 800b276:	f7ff f991 	bl	800a59c <_ZSt9terminatev>
 800b27a:	bd08      	pop	{r3, pc}

0800b27c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
 800b27c:	b4f0      	push	{r4, r5, r6, r7}
 800b27e:	4c1d      	ldr	r4, [pc, #116]	; (800b2f4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x78>)
 800b280:	f1a0 0608 	sub.w	r6, r0, #8
 800b284:	6861      	ldr	r1, [r4, #4]
 800b286:	f850 7c08 	ldr.w	r7, [r0, #-8]
 800b28a:	b1c9      	cbz	r1, 800b2c0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x44>
 800b28c:	19f5      	adds	r5, r6, r7
 800b28e:	42a9      	cmp	r1, r5
 800b290:	d01b      	beq.n	800b2ca <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x4e>
 800b292:	684a      	ldr	r2, [r1, #4]
 800b294:	b32a      	cbz	r2, 800b2e2 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
 800b296:	4295      	cmp	r5, r2
 800b298:	d304      	bcc.n	800b2a4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x28>
 800b29a:	e026      	b.n	800b2ea <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x6e>
 800b29c:	429d      	cmp	r5, r3
 800b29e:	4611      	mov	r1, r2
 800b2a0:	d204      	bcs.n	800b2ac <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	6853      	ldr	r3, [r2, #4]
 800b2a6:	1d0c      	adds	r4, r1, #4
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d1f7      	bne.n	800b29c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x20>
 800b2ac:	6811      	ldr	r1, [r2, #0]
 800b2ae:	1855      	adds	r5, r2, r1
 800b2b0:	42ae      	cmp	r6, r5
 800b2b2:	d013      	beq.n	800b2dc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x60>
 800b2b4:	f840 3c04 	str.w	r3, [r0, #-4]
 800b2b8:	6823      	ldr	r3, [r4, #0]
 800b2ba:	605e      	str	r6, [r3, #4]
 800b2bc:	bcf0      	pop	{r4, r5, r6, r7}
 800b2be:	4770      	bx	lr
 800b2c0:	f840 1c04 	str.w	r1, [r0, #-4]
 800b2c4:	6066      	str	r6, [r4, #4]
 800b2c6:	bcf0      	pop	{r4, r5, r6, r7}
 800b2c8:	4770      	bx	lr
 800b2ca:	680b      	ldr	r3, [r1, #0]
 800b2cc:	684a      	ldr	r2, [r1, #4]
 800b2ce:	441f      	add	r7, r3
 800b2d0:	f840 7c08 	str.w	r7, [r0, #-8]
 800b2d4:	f840 2c04 	str.w	r2, [r0, #-4]
 800b2d8:	6066      	str	r6, [r4, #4]
 800b2da:	e7ef      	b.n	800b2bc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
 800b2dc:	440f      	add	r7, r1
 800b2de:	6017      	str	r7, [r2, #0]
 800b2e0:	e7ec      	b.n	800b2bc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
 800b2e2:	4613      	mov	r3, r2
 800b2e4:	3404      	adds	r4, #4
 800b2e6:	460a      	mov	r2, r1
 800b2e8:	e7e0      	b.n	800b2ac <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
 800b2ea:	4613      	mov	r3, r2
 800b2ec:	3404      	adds	r4, #4
 800b2ee:	460a      	mov	r2, r1
 800b2f0:	e7dc      	b.n	800b2ac <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
 800b2f2:	bf00      	nop
 800b2f4:	20000540 	.word	0x20000540

0800b2f8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
 800b2f8:	b430      	push	{r4, r5}
 800b2fa:	4c18      	ldr	r4, [pc, #96]	; (800b35c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x64>)
 800b2fc:	f100 0108 	add.w	r1, r0, #8
 800b300:	6863      	ldr	r3, [r4, #4]
 800b302:	2908      	cmp	r1, #8
 800b304:	bf38      	it	cc
 800b306:	2108      	movcc	r1, #8
 800b308:	b313      	cbz	r3, 800b350 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
 800b30a:	3107      	adds	r1, #7
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	f021 0107 	bic.w	r1, r1, #7
 800b312:	4291      	cmp	r1, r2
 800b314:	d804      	bhi.n	800b320 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x28>
 800b316:	e01d      	b.n	800b354 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x5c>
 800b318:	6802      	ldr	r2, [r0, #0]
 800b31a:	4291      	cmp	r1, r2
 800b31c:	d905      	bls.n	800b32a <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x32>
 800b31e:	4603      	mov	r3, r0
 800b320:	6858      	ldr	r0, [r3, #4]
 800b322:	2800      	cmp	r0, #0
 800b324:	d1f8      	bne.n	800b318 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x20>
 800b326:	bc30      	pop	{r4, r5}
 800b328:	4770      	bx	lr
 800b32a:	3304      	adds	r3, #4
 800b32c:	1a52      	subs	r2, r2, r1
 800b32e:	2a07      	cmp	r2, #7
 800b330:	d90a      	bls.n	800b348 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
 800b332:	6844      	ldr	r4, [r0, #4]
 800b334:	1845      	adds	r5, r0, r1
 800b336:	606c      	str	r4, [r5, #4]
 800b338:	681c      	ldr	r4, [r3, #0]
 800b33a:	5042      	str	r2, [r0, r1]
 800b33c:	6021      	str	r1, [r4, #0]
 800b33e:	601d      	str	r5, [r3, #0]
 800b340:	f104 0008 	add.w	r0, r4, #8
 800b344:	bc30      	pop	{r4, r5}
 800b346:	4770      	bx	lr
 800b348:	6842      	ldr	r2, [r0, #4]
 800b34a:	4604      	mov	r4, r0
 800b34c:	601a      	str	r2, [r3, #0]
 800b34e:	e7f7      	b.n	800b340 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
 800b350:	4618      	mov	r0, r3
 800b352:	e7e8      	b.n	800b326 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x2e>
 800b354:	4618      	mov	r0, r3
 800b356:	1d23      	adds	r3, r4, #4
 800b358:	e7e8      	b.n	800b32c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x34>
 800b35a:	bf00      	nop
 800b35c:	20000540 	.word	0x20000540

0800b360 <__cxa_allocate_exception>:
 800b360:	b538      	push	{r3, r4, r5, lr}
 800b362:	f100 0580 	add.w	r5, r0, #128	; 0x80
 800b366:	4628      	mov	r0, r5
 800b368:	f000 f9ee 	bl	800b748 <malloc>
 800b36c:	4604      	mov	r4, r0
 800b36e:	b138      	cbz	r0, 800b380 <__cxa_allocate_exception+0x20>
 800b370:	2280      	movs	r2, #128	; 0x80
 800b372:	2100      	movs	r1, #0
 800b374:	4620      	mov	r0, r4
 800b376:	f000 fc1d 	bl	800bbb4 <memset>
 800b37a:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800b37e:	bd38      	pop	{r3, r4, r5, pc}
 800b380:	4628      	mov	r0, r5
 800b382:	f7ff ffb9 	bl	800b2f8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 800b386:	4604      	mov	r4, r0
 800b388:	2800      	cmp	r0, #0
 800b38a:	d1f1      	bne.n	800b370 <__cxa_allocate_exception+0x10>
 800b38c:	f7ff f906 	bl	800a59c <_ZSt9terminatev>

0800b390 <__cxa_free_exception>:
 800b390:	4a06      	ldr	r2, [pc, #24]	; (800b3ac <__cxa_free_exception+0x1c>)
 800b392:	3880      	subs	r0, #128	; 0x80
 800b394:	6893      	ldr	r3, [r2, #8]
 800b396:	4298      	cmp	r0, r3
 800b398:	d905      	bls.n	800b3a6 <__cxa_free_exception+0x16>
 800b39a:	68d2      	ldr	r2, [r2, #12]
 800b39c:	4413      	add	r3, r2
 800b39e:	4298      	cmp	r0, r3
 800b3a0:	d201      	bcs.n	800b3a6 <__cxa_free_exception+0x16>
 800b3a2:	f7ff bf6b 	b.w	800b27c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 800b3a6:	f000 b9d7 	b.w	800b758 <free>
 800b3aa:	bf00      	nop
 800b3ac:	20000540 	.word	0x20000540

0800b3b0 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 800b3b0:	b538      	push	{r3, r4, r5, lr}
 800b3b2:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 800b3b6:	4c07      	ldr	r4, [pc, #28]	; (800b3d4 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 800b3b8:	4628      	mov	r0, r5
 800b3ba:	60e5      	str	r5, [r4, #12]
 800b3bc:	f000 f9c4 	bl	800b748 <malloc>
 800b3c0:	60a0      	str	r0, [r4, #8]
 800b3c2:	b120      	cbz	r0, 800b3ce <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	6060      	str	r0, [r4, #4]
 800b3c8:	6005      	str	r5, [r0, #0]
 800b3ca:	6043      	str	r3, [r0, #4]
 800b3cc:	bd38      	pop	{r3, r4, r5, pc}
 800b3ce:	60e0      	str	r0, [r4, #12]
 800b3d0:	6060      	str	r0, [r4, #4]
 800b3d2:	bd38      	pop	{r3, r4, r5, pc}
 800b3d4:	20000540 	.word	0x20000540

0800b3d8 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 800b3d8:	2801      	cmp	r0, #1
 800b3da:	b510      	push	{r4, lr}
 800b3dc:	d81a      	bhi.n	800b414 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
 800b3de:	f3bf 8f5b 	dmb	ish
 800b3e2:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 800b3e6:	e853 2f00 	ldrex	r2, [r3]
 800b3ea:	3a01      	subs	r2, #1
 800b3ec:	e843 2000 	strex	r0, r2, [r3]
 800b3f0:	2800      	cmp	r0, #0
 800b3f2:	d1f8      	bne.n	800b3e6 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
 800b3f4:	f3bf 8f5b 	dmb	ish
 800b3f8:	b95a      	cbnz	r2, 800b412 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
 800b3fa:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 800b3fe:	f101 0458 	add.w	r4, r1, #88	; 0x58
 800b402:	b10b      	cbz	r3, 800b408 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
 800b404:	4620      	mov	r0, r4
 800b406:	4798      	blx	r3
 800b408:	4620      	mov	r0, r4
 800b40a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b40e:	f7ff bfbf 	b.w	800b390 <__cxa_free_exception>
 800b412:	bd10      	pop	{r4, pc}
 800b414:	f851 0c14 	ldr.w	r0, [r1, #-20]
 800b418:	f7ff f8ac 	bl	800a574 <_ZN10__cxxabiv111__terminateEPFvvE>

0800b41c <__cxa_throw>:
 800b41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b420:	4604      	mov	r4, r0
 800b422:	4617      	mov	r7, r2
 800b424:	4688      	mov	r8, r1
 800b426:	f000 f883 	bl	800b530 <__cxa_get_globals>
 800b42a:	2601      	movs	r6, #1
 800b42c:	6843      	ldr	r3, [r0, #4]
 800b42e:	f1a4 0558 	sub.w	r5, r4, #88	; 0x58
 800b432:	4433      	add	r3, r6
 800b434:	6043      	str	r3, [r0, #4]
 800b436:	f844 7c74 	str.w	r7, [r4, #-116]
 800b43a:	f844 6c80 	str.w	r6, [r4, #-128]
 800b43e:	f844 8c78 	str.w	r8, [r4, #-120]
 800b442:	f7ff f8cb 	bl	800a5dc <_ZSt14get_unexpectedv>
 800b446:	f844 0c70 	str.w	r0, [r4, #-112]
 800b44a:	f7ff f8bf 	bl	800a5cc <_ZSt13get_terminatev>
 800b44e:	2147      	movs	r1, #71	; 0x47
 800b450:	2243      	movs	r2, #67	; 0x43
 800b452:	232b      	movs	r3, #43	; 0x2b
 800b454:	f04f 0e4e 	mov.w	lr, #78	; 0x4e
 800b458:	2755      	movs	r7, #85	; 0x55
 800b45a:	2600      	movs	r6, #0
 800b45c:	f804 1c58 	strb.w	r1, [r4, #-88]
 800b460:	490d      	ldr	r1, [pc, #52]	; (800b498 <__cxa_throw+0x7c>)
 800b462:	f844 0c6c 	str.w	r0, [r4, #-108]
 800b466:	f804 ec57 	strb.w	lr, [r4, #-87]
 800b46a:	f844 1c50 	str.w	r1, [r4, #-80]
 800b46e:	f804 2c55 	strb.w	r2, [r4, #-85]
 800b472:	f804 2c54 	strb.w	r2, [r4, #-84]
 800b476:	f804 3c53 	strb.w	r3, [r4, #-83]
 800b47a:	f804 3c52 	strb.w	r3, [r4, #-82]
 800b47e:	f804 7c56 	strb.w	r7, [r4, #-86]
 800b482:	f804 6c51 	strb.w	r6, [r4, #-81]
 800b486:	4628      	mov	r0, r5
 800b488:	f7fc f986 	bl	8007798 <_Unwind_RaiseException>
 800b48c:	4628      	mov	r0, r5
 800b48e:	f7ff fe6f 	bl	800b170 <__cxa_begin_catch>
 800b492:	f7ff f883 	bl	800a59c <_ZSt9terminatev>
 800b496:	bf00      	nop
 800b498:	0800b3d9 	.word	0x0800b3d9

0800b49c <__cxa_rethrow>:
 800b49c:	b510      	push	{r4, lr}
 800b49e:	f000 f847 	bl	800b530 <__cxa_get_globals>
 800b4a2:	6842      	ldr	r2, [r0, #4]
 800b4a4:	6804      	ldr	r4, [r0, #0]
 800b4a6:	3201      	adds	r2, #1
 800b4a8:	6042      	str	r2, [r0, #4]
 800b4aa:	b164      	cbz	r4, 800b4c6 <__cxa_rethrow+0x2a>
 800b4ac:	f894 2020 	ldrb.w	r2, [r4, #32]
 800b4b0:	2a47      	cmp	r2, #71	; 0x47
 800b4b2:	d00a      	beq.n	800b4ca <__cxa_rethrow+0x2e>
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	6002      	str	r2, [r0, #0]
 800b4b8:	3420      	adds	r4, #32
 800b4ba:	4620      	mov	r0, r4
 800b4bc:	f7fc f990 	bl	80077e0 <_Unwind_Resume_or_Rethrow>
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	f7ff fe55 	bl	800b170 <__cxa_begin_catch>
 800b4c6:	f7ff f869 	bl	800a59c <_ZSt9terminatev>
 800b4ca:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 800b4ce:	2a4e      	cmp	r2, #78	; 0x4e
 800b4d0:	d1f0      	bne.n	800b4b4 <__cxa_rethrow+0x18>
 800b4d2:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 800b4d6:	2a55      	cmp	r2, #85	; 0x55
 800b4d8:	d1ec      	bne.n	800b4b4 <__cxa_rethrow+0x18>
 800b4da:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 800b4de:	2a43      	cmp	r2, #67	; 0x43
 800b4e0:	d1e8      	bne.n	800b4b4 <__cxa_rethrow+0x18>
 800b4e2:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800b4e6:	2a43      	cmp	r2, #67	; 0x43
 800b4e8:	d1e4      	bne.n	800b4b4 <__cxa_rethrow+0x18>
 800b4ea:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 800b4ee:	2a2b      	cmp	r2, #43	; 0x2b
 800b4f0:	d1e0      	bne.n	800b4b4 <__cxa_rethrow+0x18>
 800b4f2:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 800b4f6:	2a2b      	cmp	r2, #43	; 0x2b
 800b4f8:	d1dc      	bne.n	800b4b4 <__cxa_rethrow+0x18>
 800b4fa:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 800b4fe:	2a01      	cmp	r2, #1
 800b500:	d8d8      	bhi.n	800b4b4 <__cxa_rethrow+0x18>
 800b502:	6962      	ldr	r2, [r4, #20]
 800b504:	4252      	negs	r2, r2
 800b506:	6162      	str	r2, [r4, #20]
 800b508:	e7d6      	b.n	800b4b8 <__cxa_rethrow+0x1c>
 800b50a:	bf00      	nop

0800b50c <__cxa_current_exception_type>:
 800b50c:	b508      	push	{r3, lr}
 800b50e:	f000 f80f 	bl	800b530 <__cxa_get_globals>
 800b512:	6800      	ldr	r0, [r0, #0]
 800b514:	b130      	cbz	r0, 800b524 <__cxa_current_exception_type+0x18>
 800b516:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 800b51a:	2b01      	cmp	r3, #1
 800b51c:	bf04      	itt	eq
 800b51e:	6800      	ldreq	r0, [r0, #0]
 800b520:	3878      	subeq	r0, #120	; 0x78
 800b522:	6800      	ldr	r0, [r0, #0]
 800b524:	bd08      	pop	{r3, pc}
 800b526:	bf00      	nop

0800b528 <__cxa_get_globals_fast>:
 800b528:	4800      	ldr	r0, [pc, #0]	; (800b52c <__cxa_get_globals_fast+0x4>)
 800b52a:	4770      	bx	lr
 800b52c:	20000550 	.word	0x20000550

0800b530 <__cxa_get_globals>:
 800b530:	4800      	ldr	r0, [pc, #0]	; (800b534 <__cxa_get_globals+0x4>)
 800b532:	4770      	bx	lr
 800b534:	20000550 	.word	0x20000550

0800b538 <_ZdlPvj>:
 800b538:	f7ff b810 	b.w	800a55c <_ZdlPv>

0800b53c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 800b53c:	b570      	push	{r4, r5, r6, lr}
 800b53e:	2400      	movs	r4, #0
 800b540:	2610      	movs	r6, #16
 800b542:	6803      	ldr	r3, [r0, #0]
 800b544:	b084      	sub	sp, #16
 800b546:	4615      	mov	r5, r2
 800b548:	9602      	str	r6, [sp, #8]
 800b54a:	6812      	ldr	r2, [r2, #0]
 800b54c:	699e      	ldr	r6, [r3, #24]
 800b54e:	9400      	str	r4, [sp, #0]
 800b550:	466b      	mov	r3, sp
 800b552:	f88d 4004 	strb.w	r4, [sp, #4]
 800b556:	9403      	str	r4, [sp, #12]
 800b558:	47b0      	blx	r6
 800b55a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b55e:	f003 0306 	and.w	r3, r3, #6
 800b562:	2b06      	cmp	r3, #6
 800b564:	bf09      	itett	eq
 800b566:	2001      	moveq	r0, #1
 800b568:	4620      	movne	r0, r4
 800b56a:	9b00      	ldreq	r3, [sp, #0]
 800b56c:	602b      	streq	r3, [r5, #0]
 800b56e:	b004      	add	sp, #16
 800b570:	bd70      	pop	{r4, r5, r6, pc}
 800b572:	bf00      	nop

0800b574 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 800b574:	9800      	ldr	r0, [sp, #0]
 800b576:	4290      	cmp	r0, r2
 800b578:	bf0c      	ite	eq
 800b57a:	2006      	moveq	r0, #6
 800b57c:	2001      	movne	r0, #1
 800b57e:	4770      	bx	lr

0800b580 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 800b580:	b510      	push	{r4, lr}
 800b582:	4604      	mov	r4, r0
 800b584:	4b02      	ldr	r3, [pc, #8]	; (800b590 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 800b586:	6003      	str	r3, [r0, #0]
 800b588:	f000 f854 	bl	800b634 <_ZNSt9type_infoD1Ev>
 800b58c:	4620      	mov	r0, r4
 800b58e:	bd10      	pop	{r4, pc}
 800b590:	0800d65c 	.word	0x0800d65c

0800b594 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 800b594:	b510      	push	{r4, lr}
 800b596:	4604      	mov	r4, r0
 800b598:	4b04      	ldr	r3, [pc, #16]	; (800b5ac <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
 800b59a:	6003      	str	r3, [r0, #0]
 800b59c:	f000 f84a 	bl	800b634 <_ZNSt9type_infoD1Ev>
 800b5a0:	4620      	mov	r0, r4
 800b5a2:	2108      	movs	r1, #8
 800b5a4:	f7ff ffc8 	bl	800b538 <_ZdlPvj>
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	bd10      	pop	{r4, pc}
 800b5ac:	0800d65c 	.word	0x0800d65c

0800b5b0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 800b5b0:	b538      	push	{r3, r4, r5, lr}
 800b5b2:	4615      	mov	r5, r2
 800b5b4:	461c      	mov	r4, r3
 800b5b6:	f000 f841 	bl	800b63c <_ZNKSt9type_infoeqERKS_>
 800b5ba:	b120      	cbz	r0, 800b5c6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 800b5bc:	2208      	movs	r2, #8
 800b5be:	2306      	movs	r3, #6
 800b5c0:	6025      	str	r5, [r4, #0]
 800b5c2:	60e2      	str	r2, [r4, #12]
 800b5c4:	7123      	strb	r3, [r4, #4]
 800b5c6:	bd38      	pop	{r3, r4, r5, pc}

0800b5c8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 800b5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5cc:	4617      	mov	r7, r2
 800b5ce:	461c      	mov	r4, r3
 800b5d0:	4606      	mov	r6, r0
 800b5d2:	460d      	mov	r5, r1
 800b5d4:	f000 f832 	bl	800b63c <_ZNKSt9type_infoeqERKS_>
 800b5d8:	b908      	cbnz	r0, 800b5de <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
 800b5da:	2c03      	cmp	r4, #3
 800b5dc:	d901      	bls.n	800b5e2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
 800b5de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5e2:	682b      	ldr	r3, [r5, #0]
 800b5e4:	463a      	mov	r2, r7
 800b5e6:	4631      	mov	r1, r6
 800b5e8:	4628      	mov	r0, r5
 800b5ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ee:	695b      	ldr	r3, [r3, #20]
 800b5f0:	4718      	bx	r3
 800b5f2:	bf00      	nop

0800b5f4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 800b5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5f6:	b083      	sub	sp, #12
 800b5f8:	9d08      	ldr	r5, [sp, #32]
 800b5fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b5fc:	4617      	mov	r7, r2
 800b5fe:	428d      	cmp	r5, r1
 800b600:	4606      	mov	r6, r0
 800b602:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b604:	d00b      	beq.n	800b61e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
 800b606:	4619      	mov	r1, r3
 800b608:	4630      	mov	r0, r6
 800b60a:	f000 f817 	bl	800b63c <_ZNKSt9type_infoeqERKS_>
 800b60e:	b118      	cbz	r0, 800b618 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 800b610:	2301      	movs	r3, #1
 800b612:	6025      	str	r5, [r4, #0]
 800b614:	7127      	strb	r7, [r4, #4]
 800b616:	71a3      	strb	r3, [r4, #6]
 800b618:	2000      	movs	r0, #0
 800b61a:	b003      	add	sp, #12
 800b61c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b61e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b620:	9301      	str	r3, [sp, #4]
 800b622:	f000 f80b 	bl	800b63c <_ZNKSt9type_infoeqERKS_>
 800b626:	b118      	cbz	r0, 800b630 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x3c>
 800b628:	2000      	movs	r0, #0
 800b62a:	7167      	strb	r7, [r4, #5]
 800b62c:	b003      	add	sp, #12
 800b62e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b630:	9b01      	ldr	r3, [sp, #4]
 800b632:	e7e8      	b.n	800b606 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>

0800b634 <_ZNSt9type_infoD1Ev>:
 800b634:	4770      	bx	lr
 800b636:	bf00      	nop

0800b638 <_ZNKSt9type_info14__is_pointer_pEv>:
 800b638:	2000      	movs	r0, #0
 800b63a:	4770      	bx	lr

0800b63c <_ZNKSt9type_infoeqERKS_>:
 800b63c:	4281      	cmp	r1, r0
 800b63e:	d011      	beq.n	800b664 <_ZNKSt9type_infoeqERKS_+0x28>
 800b640:	b508      	push	{r3, lr}
 800b642:	6840      	ldr	r0, [r0, #4]
 800b644:	7803      	ldrb	r3, [r0, #0]
 800b646:	2b2a      	cmp	r3, #42	; 0x2a
 800b648:	d00a      	beq.n	800b660 <_ZNKSt9type_infoeqERKS_+0x24>
 800b64a:	6849      	ldr	r1, [r1, #4]
 800b64c:	780b      	ldrb	r3, [r1, #0]
 800b64e:	2b2a      	cmp	r3, #42	; 0x2a
 800b650:	bf08      	it	eq
 800b652:	3101      	addeq	r1, #1
 800b654:	f7fb f8c6 	bl	80067e4 <strcmp>
 800b658:	fab0 f080 	clz	r0, r0
 800b65c:	0940      	lsrs	r0, r0, #5
 800b65e:	bd08      	pop	{r3, pc}
 800b660:	2000      	movs	r0, #0
 800b662:	bd08      	pop	{r3, pc}
 800b664:	2001      	movs	r0, #1
 800b666:	4770      	bx	lr

0800b668 <abort>:
 800b668:	b508      	push	{r3, lr}
 800b66a:	2006      	movs	r0, #6
 800b66c:	f000 fcc0 	bl	800bff0 <raise>
 800b670:	2001      	movs	r0, #1
 800b672:	f001 fa85 	bl	800cb80 <_exit>
	...

0800b678 <_fputc_r>:
 800b678:	b570      	push	{r4, r5, r6, lr}
 800b67a:	460e      	mov	r6, r1
 800b67c:	4614      	mov	r4, r2
 800b67e:	4605      	mov	r5, r0
 800b680:	b118      	cbz	r0, 800b68a <_fputc_r+0x12>
 800b682:	6983      	ldr	r3, [r0, #24]
 800b684:	b90b      	cbnz	r3, 800b68a <_fputc_r+0x12>
 800b686:	f000 feef 	bl	800c468 <__sinit>
 800b68a:	4b14      	ldr	r3, [pc, #80]	; (800b6dc <_fputc_r+0x64>)
 800b68c:	429c      	cmp	r4, r3
 800b68e:	d11a      	bne.n	800b6c6 <_fputc_r+0x4e>
 800b690:	686c      	ldr	r4, [r5, #4]
 800b692:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b694:	07d8      	lsls	r0, r3, #31
 800b696:	d405      	bmi.n	800b6a4 <_fputc_r+0x2c>
 800b698:	89a3      	ldrh	r3, [r4, #12]
 800b69a:	0599      	lsls	r1, r3, #22
 800b69c:	d402      	bmi.n	800b6a4 <_fputc_r+0x2c>
 800b69e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6a0:	f000 f850 	bl	800b744 <__retarget_lock_acquire_recursive>
 800b6a4:	4622      	mov	r2, r4
 800b6a6:	4628      	mov	r0, r5
 800b6a8:	4631      	mov	r1, r6
 800b6aa:	f000 fa97 	bl	800bbdc <_putc_r>
 800b6ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6b0:	4605      	mov	r5, r0
 800b6b2:	07da      	lsls	r2, r3, #31
 800b6b4:	d405      	bmi.n	800b6c2 <_fputc_r+0x4a>
 800b6b6:	89a3      	ldrh	r3, [r4, #12]
 800b6b8:	059b      	lsls	r3, r3, #22
 800b6ba:	d402      	bmi.n	800b6c2 <_fputc_r+0x4a>
 800b6bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6be:	f000 f842 	bl	800b746 <__retarget_lock_release_recursive>
 800b6c2:	4628      	mov	r0, r5
 800b6c4:	bd70      	pop	{r4, r5, r6, pc}
 800b6c6:	4b06      	ldr	r3, [pc, #24]	; (800b6e0 <_fputc_r+0x68>)
 800b6c8:	429c      	cmp	r4, r3
 800b6ca:	d101      	bne.n	800b6d0 <_fputc_r+0x58>
 800b6cc:	68ac      	ldr	r4, [r5, #8]
 800b6ce:	e7e0      	b.n	800b692 <_fputc_r+0x1a>
 800b6d0:	4b04      	ldr	r3, [pc, #16]	; (800b6e4 <_fputc_r+0x6c>)
 800b6d2:	429c      	cmp	r4, r3
 800b6d4:	bf08      	it	eq
 800b6d6:	68ec      	ldreq	r4, [r5, #12]
 800b6d8:	e7db      	b.n	800b692 <_fputc_r+0x1a>
 800b6da:	bf00      	nop
 800b6dc:	0800df0c 	.word	0x0800df0c
 800b6e0:	0800df2c 	.word	0x0800df2c
 800b6e4:	0800deec 	.word	0x0800deec

0800b6e8 <fputc>:
 800b6e8:	4b02      	ldr	r3, [pc, #8]	; (800b6f4 <fputc+0xc>)
 800b6ea:	460a      	mov	r2, r1
 800b6ec:	4601      	mov	r1, r0
 800b6ee:	6818      	ldr	r0, [r3, #0]
 800b6f0:	f7ff bfc2 	b.w	800b678 <_fputc_r>
 800b6f4:	2000001c 	.word	0x2000001c

0800b6f8 <__libc_init_array>:
 800b6f8:	b570      	push	{r4, r5, r6, lr}
 800b6fa:	2500      	movs	r5, #0
 800b6fc:	4e0c      	ldr	r6, [pc, #48]	; (800b730 <__libc_init_array+0x38>)
 800b6fe:	4c0d      	ldr	r4, [pc, #52]	; (800b734 <__libc_init_array+0x3c>)
 800b700:	1ba4      	subs	r4, r4, r6
 800b702:	10a4      	asrs	r4, r4, #2
 800b704:	42a5      	cmp	r5, r4
 800b706:	d109      	bne.n	800b71c <__libc_init_array+0x24>
 800b708:	f001 fa3c 	bl	800cb84 <_init>
 800b70c:	2500      	movs	r5, #0
 800b70e:	4e0a      	ldr	r6, [pc, #40]	; (800b738 <__libc_init_array+0x40>)
 800b710:	4c0a      	ldr	r4, [pc, #40]	; (800b73c <__libc_init_array+0x44>)
 800b712:	1ba4      	subs	r4, r4, r6
 800b714:	10a4      	asrs	r4, r4, #2
 800b716:	42a5      	cmp	r5, r4
 800b718:	d105      	bne.n	800b726 <__libc_init_array+0x2e>
 800b71a:	bd70      	pop	{r4, r5, r6, pc}
 800b71c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b720:	4798      	blx	r3
 800b722:	3501      	adds	r5, #1
 800b724:	e7ee      	b.n	800b704 <__libc_init_array+0xc>
 800b726:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b72a:	4798      	blx	r3
 800b72c:	3501      	adds	r5, #1
 800b72e:	e7f2      	b.n	800b716 <__libc_init_array+0x1e>
 800b730:	0800e1c8 	.word	0x0800e1c8
 800b734:	0800e1c8 	.word	0x0800e1c8
 800b738:	0800e1c8 	.word	0x0800e1c8
 800b73c:	0800e1d0 	.word	0x0800e1d0

0800b740 <__retarget_lock_init_recursive>:
 800b740:	4770      	bx	lr

0800b742 <__retarget_lock_close_recursive>:
 800b742:	4770      	bx	lr

0800b744 <__retarget_lock_acquire_recursive>:
 800b744:	4770      	bx	lr

0800b746 <__retarget_lock_release_recursive>:
 800b746:	4770      	bx	lr

0800b748 <malloc>:
 800b748:	4b02      	ldr	r3, [pc, #8]	; (800b754 <malloc+0xc>)
 800b74a:	4601      	mov	r1, r0
 800b74c:	6818      	ldr	r0, [r3, #0]
 800b74e:	f000 b80b 	b.w	800b768 <_malloc_r>
 800b752:	bf00      	nop
 800b754:	2000001c 	.word	0x2000001c

0800b758 <free>:
 800b758:	4b02      	ldr	r3, [pc, #8]	; (800b764 <free+0xc>)
 800b75a:	4601      	mov	r1, r0
 800b75c:	6818      	ldr	r0, [r3, #0]
 800b75e:	f000 bf5b 	b.w	800c618 <_free_r>
 800b762:	bf00      	nop
 800b764:	2000001c 	.word	0x2000001c

0800b768 <_malloc_r>:
 800b768:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b76c:	f101 040b 	add.w	r4, r1, #11
 800b770:	2c16      	cmp	r4, #22
 800b772:	4681      	mov	r9, r0
 800b774:	d907      	bls.n	800b786 <_malloc_r+0x1e>
 800b776:	f034 0407 	bics.w	r4, r4, #7
 800b77a:	d505      	bpl.n	800b788 <_malloc_r+0x20>
 800b77c:	230c      	movs	r3, #12
 800b77e:	f8c9 3000 	str.w	r3, [r9]
 800b782:	2600      	movs	r6, #0
 800b784:	e131      	b.n	800b9ea <_malloc_r+0x282>
 800b786:	2410      	movs	r4, #16
 800b788:	428c      	cmp	r4, r1
 800b78a:	d3f7      	bcc.n	800b77c <_malloc_r+0x14>
 800b78c:	4648      	mov	r0, r9
 800b78e:	f000 fa19 	bl	800bbc4 <__malloc_lock>
 800b792:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800b796:	4d9b      	ldr	r5, [pc, #620]	; (800ba04 <_malloc_r+0x29c>)
 800b798:	d236      	bcs.n	800b808 <_malloc_r+0xa0>
 800b79a:	f104 0208 	add.w	r2, r4, #8
 800b79e:	442a      	add	r2, r5
 800b7a0:	6856      	ldr	r6, [r2, #4]
 800b7a2:	f1a2 0108 	sub.w	r1, r2, #8
 800b7a6:	428e      	cmp	r6, r1
 800b7a8:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 800b7ac:	d102      	bne.n	800b7b4 <_malloc_r+0x4c>
 800b7ae:	68d6      	ldr	r6, [r2, #12]
 800b7b0:	42b2      	cmp	r2, r6
 800b7b2:	d010      	beq.n	800b7d6 <_malloc_r+0x6e>
 800b7b4:	6873      	ldr	r3, [r6, #4]
 800b7b6:	68f2      	ldr	r2, [r6, #12]
 800b7b8:	68b1      	ldr	r1, [r6, #8]
 800b7ba:	f023 0303 	bic.w	r3, r3, #3
 800b7be:	60ca      	str	r2, [r1, #12]
 800b7c0:	4433      	add	r3, r6
 800b7c2:	6091      	str	r1, [r2, #8]
 800b7c4:	685a      	ldr	r2, [r3, #4]
 800b7c6:	f042 0201 	orr.w	r2, r2, #1
 800b7ca:	605a      	str	r2, [r3, #4]
 800b7cc:	4648      	mov	r0, r9
 800b7ce:	f000 f9ff 	bl	800bbd0 <__malloc_unlock>
 800b7d2:	3608      	adds	r6, #8
 800b7d4:	e109      	b.n	800b9ea <_malloc_r+0x282>
 800b7d6:	3302      	adds	r3, #2
 800b7d8:	4a8b      	ldr	r2, [pc, #556]	; (800ba08 <_malloc_r+0x2a0>)
 800b7da:	692e      	ldr	r6, [r5, #16]
 800b7dc:	4611      	mov	r1, r2
 800b7de:	4296      	cmp	r6, r2
 800b7e0:	d06d      	beq.n	800b8be <_malloc_r+0x156>
 800b7e2:	6870      	ldr	r0, [r6, #4]
 800b7e4:	f020 0003 	bic.w	r0, r0, #3
 800b7e8:	1b07      	subs	r7, r0, r4
 800b7ea:	2f0f      	cmp	r7, #15
 800b7ec:	dd47      	ble.n	800b87e <_malloc_r+0x116>
 800b7ee:	1933      	adds	r3, r6, r4
 800b7f0:	f044 0401 	orr.w	r4, r4, #1
 800b7f4:	6074      	str	r4, [r6, #4]
 800b7f6:	616b      	str	r3, [r5, #20]
 800b7f8:	612b      	str	r3, [r5, #16]
 800b7fa:	60da      	str	r2, [r3, #12]
 800b7fc:	609a      	str	r2, [r3, #8]
 800b7fe:	f047 0201 	orr.w	r2, r7, #1
 800b802:	605a      	str	r2, [r3, #4]
 800b804:	5037      	str	r7, [r6, r0]
 800b806:	e7e1      	b.n	800b7cc <_malloc_r+0x64>
 800b808:	0a63      	lsrs	r3, r4, #9
 800b80a:	d02a      	beq.n	800b862 <_malloc_r+0xfa>
 800b80c:	2b04      	cmp	r3, #4
 800b80e:	d812      	bhi.n	800b836 <_malloc_r+0xce>
 800b810:	09a3      	lsrs	r3, r4, #6
 800b812:	3338      	adds	r3, #56	; 0x38
 800b814:	1c5a      	adds	r2, r3, #1
 800b816:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800b81a:	6856      	ldr	r6, [r2, #4]
 800b81c:	f1a2 0008 	sub.w	r0, r2, #8
 800b820:	4286      	cmp	r6, r0
 800b822:	d006      	beq.n	800b832 <_malloc_r+0xca>
 800b824:	6872      	ldr	r2, [r6, #4]
 800b826:	f022 0203 	bic.w	r2, r2, #3
 800b82a:	1b11      	subs	r1, r2, r4
 800b82c:	290f      	cmp	r1, #15
 800b82e:	dd1c      	ble.n	800b86a <_malloc_r+0x102>
 800b830:	3b01      	subs	r3, #1
 800b832:	3301      	adds	r3, #1
 800b834:	e7d0      	b.n	800b7d8 <_malloc_r+0x70>
 800b836:	2b14      	cmp	r3, #20
 800b838:	d801      	bhi.n	800b83e <_malloc_r+0xd6>
 800b83a:	335b      	adds	r3, #91	; 0x5b
 800b83c:	e7ea      	b.n	800b814 <_malloc_r+0xac>
 800b83e:	2b54      	cmp	r3, #84	; 0x54
 800b840:	d802      	bhi.n	800b848 <_malloc_r+0xe0>
 800b842:	0b23      	lsrs	r3, r4, #12
 800b844:	336e      	adds	r3, #110	; 0x6e
 800b846:	e7e5      	b.n	800b814 <_malloc_r+0xac>
 800b848:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800b84c:	d802      	bhi.n	800b854 <_malloc_r+0xec>
 800b84e:	0be3      	lsrs	r3, r4, #15
 800b850:	3377      	adds	r3, #119	; 0x77
 800b852:	e7df      	b.n	800b814 <_malloc_r+0xac>
 800b854:	f240 5254 	movw	r2, #1364	; 0x554
 800b858:	4293      	cmp	r3, r2
 800b85a:	d804      	bhi.n	800b866 <_malloc_r+0xfe>
 800b85c:	0ca3      	lsrs	r3, r4, #18
 800b85e:	337c      	adds	r3, #124	; 0x7c
 800b860:	e7d8      	b.n	800b814 <_malloc_r+0xac>
 800b862:	233f      	movs	r3, #63	; 0x3f
 800b864:	e7d6      	b.n	800b814 <_malloc_r+0xac>
 800b866:	237e      	movs	r3, #126	; 0x7e
 800b868:	e7d4      	b.n	800b814 <_malloc_r+0xac>
 800b86a:	2900      	cmp	r1, #0
 800b86c:	68f1      	ldr	r1, [r6, #12]
 800b86e:	db04      	blt.n	800b87a <_malloc_r+0x112>
 800b870:	68b3      	ldr	r3, [r6, #8]
 800b872:	60d9      	str	r1, [r3, #12]
 800b874:	608b      	str	r3, [r1, #8]
 800b876:	18b3      	adds	r3, r6, r2
 800b878:	e7a4      	b.n	800b7c4 <_malloc_r+0x5c>
 800b87a:	460e      	mov	r6, r1
 800b87c:	e7d0      	b.n	800b820 <_malloc_r+0xb8>
 800b87e:	2f00      	cmp	r7, #0
 800b880:	616a      	str	r2, [r5, #20]
 800b882:	612a      	str	r2, [r5, #16]
 800b884:	db05      	blt.n	800b892 <_malloc_r+0x12a>
 800b886:	4430      	add	r0, r6
 800b888:	6843      	ldr	r3, [r0, #4]
 800b88a:	f043 0301 	orr.w	r3, r3, #1
 800b88e:	6043      	str	r3, [r0, #4]
 800b890:	e79c      	b.n	800b7cc <_malloc_r+0x64>
 800b892:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800b896:	d244      	bcs.n	800b922 <_malloc_r+0x1ba>
 800b898:	2201      	movs	r2, #1
 800b89a:	08c0      	lsrs	r0, r0, #3
 800b89c:	1087      	asrs	r7, r0, #2
 800b89e:	fa02 f707 	lsl.w	r7, r2, r7
 800b8a2:	686a      	ldr	r2, [r5, #4]
 800b8a4:	3001      	adds	r0, #1
 800b8a6:	433a      	orrs	r2, r7
 800b8a8:	606a      	str	r2, [r5, #4]
 800b8aa:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 800b8ae:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800b8b2:	3a08      	subs	r2, #8
 800b8b4:	60f2      	str	r2, [r6, #12]
 800b8b6:	60b7      	str	r7, [r6, #8]
 800b8b8:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 800b8bc:	60fe      	str	r6, [r7, #12]
 800b8be:	2001      	movs	r0, #1
 800b8c0:	109a      	asrs	r2, r3, #2
 800b8c2:	fa00 f202 	lsl.w	r2, r0, r2
 800b8c6:	6868      	ldr	r0, [r5, #4]
 800b8c8:	4282      	cmp	r2, r0
 800b8ca:	f200 809f 	bhi.w	800ba0c <_malloc_r+0x2a4>
 800b8ce:	4202      	tst	r2, r0
 800b8d0:	d106      	bne.n	800b8e0 <_malloc_r+0x178>
 800b8d2:	f023 0303 	bic.w	r3, r3, #3
 800b8d6:	0052      	lsls	r2, r2, #1
 800b8d8:	4202      	tst	r2, r0
 800b8da:	f103 0304 	add.w	r3, r3, #4
 800b8de:	d0fa      	beq.n	800b8d6 <_malloc_r+0x16e>
 800b8e0:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 800b8e4:	46e0      	mov	r8, ip
 800b8e6:	469e      	mov	lr, r3
 800b8e8:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800b8ec:	4546      	cmp	r6, r8
 800b8ee:	d153      	bne.n	800b998 <_malloc_r+0x230>
 800b8f0:	f10e 0e01 	add.w	lr, lr, #1
 800b8f4:	f01e 0f03 	tst.w	lr, #3
 800b8f8:	f108 0808 	add.w	r8, r8, #8
 800b8fc:	d1f4      	bne.n	800b8e8 <_malloc_r+0x180>
 800b8fe:	0798      	lsls	r0, r3, #30
 800b900:	d179      	bne.n	800b9f6 <_malloc_r+0x28e>
 800b902:	686b      	ldr	r3, [r5, #4]
 800b904:	ea23 0302 	bic.w	r3, r3, r2
 800b908:	606b      	str	r3, [r5, #4]
 800b90a:	6868      	ldr	r0, [r5, #4]
 800b90c:	0052      	lsls	r2, r2, #1
 800b90e:	4282      	cmp	r2, r0
 800b910:	d87c      	bhi.n	800ba0c <_malloc_r+0x2a4>
 800b912:	2a00      	cmp	r2, #0
 800b914:	d07a      	beq.n	800ba0c <_malloc_r+0x2a4>
 800b916:	4673      	mov	r3, lr
 800b918:	4202      	tst	r2, r0
 800b91a:	d1e1      	bne.n	800b8e0 <_malloc_r+0x178>
 800b91c:	3304      	adds	r3, #4
 800b91e:	0052      	lsls	r2, r2, #1
 800b920:	e7fa      	b.n	800b918 <_malloc_r+0x1b0>
 800b922:	0a42      	lsrs	r2, r0, #9
 800b924:	2a04      	cmp	r2, #4
 800b926:	d815      	bhi.n	800b954 <_malloc_r+0x1ec>
 800b928:	0982      	lsrs	r2, r0, #6
 800b92a:	3238      	adds	r2, #56	; 0x38
 800b92c:	1c57      	adds	r7, r2, #1
 800b92e:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800b932:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800b936:	45be      	cmp	lr, r7
 800b938:	d126      	bne.n	800b988 <_malloc_r+0x220>
 800b93a:	2001      	movs	r0, #1
 800b93c:	1092      	asrs	r2, r2, #2
 800b93e:	fa00 f202 	lsl.w	r2, r0, r2
 800b942:	6868      	ldr	r0, [r5, #4]
 800b944:	4310      	orrs	r0, r2
 800b946:	6068      	str	r0, [r5, #4]
 800b948:	f8c6 e00c 	str.w	lr, [r6, #12]
 800b94c:	60b7      	str	r7, [r6, #8]
 800b94e:	f8ce 6008 	str.w	r6, [lr, #8]
 800b952:	e7b3      	b.n	800b8bc <_malloc_r+0x154>
 800b954:	2a14      	cmp	r2, #20
 800b956:	d801      	bhi.n	800b95c <_malloc_r+0x1f4>
 800b958:	325b      	adds	r2, #91	; 0x5b
 800b95a:	e7e7      	b.n	800b92c <_malloc_r+0x1c4>
 800b95c:	2a54      	cmp	r2, #84	; 0x54
 800b95e:	d802      	bhi.n	800b966 <_malloc_r+0x1fe>
 800b960:	0b02      	lsrs	r2, r0, #12
 800b962:	326e      	adds	r2, #110	; 0x6e
 800b964:	e7e2      	b.n	800b92c <_malloc_r+0x1c4>
 800b966:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800b96a:	d802      	bhi.n	800b972 <_malloc_r+0x20a>
 800b96c:	0bc2      	lsrs	r2, r0, #15
 800b96e:	3277      	adds	r2, #119	; 0x77
 800b970:	e7dc      	b.n	800b92c <_malloc_r+0x1c4>
 800b972:	f240 5754 	movw	r7, #1364	; 0x554
 800b976:	42ba      	cmp	r2, r7
 800b978:	bf9a      	itte	ls
 800b97a:	0c82      	lsrls	r2, r0, #18
 800b97c:	327c      	addls	r2, #124	; 0x7c
 800b97e:	227e      	movhi	r2, #126	; 0x7e
 800b980:	e7d4      	b.n	800b92c <_malloc_r+0x1c4>
 800b982:	68bf      	ldr	r7, [r7, #8]
 800b984:	45be      	cmp	lr, r7
 800b986:	d004      	beq.n	800b992 <_malloc_r+0x22a>
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	f022 0203 	bic.w	r2, r2, #3
 800b98e:	4290      	cmp	r0, r2
 800b990:	d3f7      	bcc.n	800b982 <_malloc_r+0x21a>
 800b992:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800b996:	e7d7      	b.n	800b948 <_malloc_r+0x1e0>
 800b998:	6870      	ldr	r0, [r6, #4]
 800b99a:	68f7      	ldr	r7, [r6, #12]
 800b99c:	f020 0003 	bic.w	r0, r0, #3
 800b9a0:	eba0 0a04 	sub.w	sl, r0, r4
 800b9a4:	f1ba 0f0f 	cmp.w	sl, #15
 800b9a8:	dd10      	ble.n	800b9cc <_malloc_r+0x264>
 800b9aa:	68b2      	ldr	r2, [r6, #8]
 800b9ac:	1933      	adds	r3, r6, r4
 800b9ae:	f044 0401 	orr.w	r4, r4, #1
 800b9b2:	6074      	str	r4, [r6, #4]
 800b9b4:	60d7      	str	r7, [r2, #12]
 800b9b6:	60ba      	str	r2, [r7, #8]
 800b9b8:	f04a 0201 	orr.w	r2, sl, #1
 800b9bc:	616b      	str	r3, [r5, #20]
 800b9be:	612b      	str	r3, [r5, #16]
 800b9c0:	60d9      	str	r1, [r3, #12]
 800b9c2:	6099      	str	r1, [r3, #8]
 800b9c4:	605a      	str	r2, [r3, #4]
 800b9c6:	f846 a000 	str.w	sl, [r6, r0]
 800b9ca:	e6ff      	b.n	800b7cc <_malloc_r+0x64>
 800b9cc:	f1ba 0f00 	cmp.w	sl, #0
 800b9d0:	db0f      	blt.n	800b9f2 <_malloc_r+0x28a>
 800b9d2:	4430      	add	r0, r6
 800b9d4:	6843      	ldr	r3, [r0, #4]
 800b9d6:	f043 0301 	orr.w	r3, r3, #1
 800b9da:	6043      	str	r3, [r0, #4]
 800b9dc:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800b9e0:	4648      	mov	r0, r9
 800b9e2:	60df      	str	r7, [r3, #12]
 800b9e4:	60bb      	str	r3, [r7, #8]
 800b9e6:	f000 f8f3 	bl	800bbd0 <__malloc_unlock>
 800b9ea:	4630      	mov	r0, r6
 800b9ec:	b003      	add	sp, #12
 800b9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9f2:	463e      	mov	r6, r7
 800b9f4:	e77a      	b.n	800b8ec <_malloc_r+0x184>
 800b9f6:	f85c 0908 	ldr.w	r0, [ip], #-8
 800b9fa:	3b01      	subs	r3, #1
 800b9fc:	4584      	cmp	ip, r0
 800b9fe:	f43f af7e 	beq.w	800b8fe <_malloc_r+0x196>
 800ba02:	e782      	b.n	800b90a <_malloc_r+0x1a2>
 800ba04:	20000110 	.word	0x20000110
 800ba08:	20000118 	.word	0x20000118
 800ba0c:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800ba10:	f8db 6004 	ldr.w	r6, [fp, #4]
 800ba14:	f026 0603 	bic.w	r6, r6, #3
 800ba18:	42b4      	cmp	r4, r6
 800ba1a:	d803      	bhi.n	800ba24 <_malloc_r+0x2bc>
 800ba1c:	1b33      	subs	r3, r6, r4
 800ba1e:	2b0f      	cmp	r3, #15
 800ba20:	f300 8095 	bgt.w	800bb4e <_malloc_r+0x3e6>
 800ba24:	4a4f      	ldr	r2, [pc, #316]	; (800bb64 <_malloc_r+0x3fc>)
 800ba26:	eb0b 0306 	add.w	r3, fp, r6
 800ba2a:	6817      	ldr	r7, [r2, #0]
 800ba2c:	4a4e      	ldr	r2, [pc, #312]	; (800bb68 <_malloc_r+0x400>)
 800ba2e:	3710      	adds	r7, #16
 800ba30:	6811      	ldr	r1, [r2, #0]
 800ba32:	4427      	add	r7, r4
 800ba34:	3101      	adds	r1, #1
 800ba36:	d005      	beq.n	800ba44 <_malloc_r+0x2dc>
 800ba38:	494c      	ldr	r1, [pc, #304]	; (800bb6c <_malloc_r+0x404>)
 800ba3a:	3901      	subs	r1, #1
 800ba3c:	440f      	add	r7, r1
 800ba3e:	3101      	adds	r1, #1
 800ba40:	4249      	negs	r1, r1
 800ba42:	400f      	ands	r7, r1
 800ba44:	4639      	mov	r1, r7
 800ba46:	4648      	mov	r0, r9
 800ba48:	9201      	str	r2, [sp, #4]
 800ba4a:	9300      	str	r3, [sp, #0]
 800ba4c:	f000 fa98 	bl	800bf80 <_sbrk_r>
 800ba50:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ba54:	4680      	mov	r8, r0
 800ba56:	d055      	beq.n	800bb04 <_malloc_r+0x39c>
 800ba58:	9b00      	ldr	r3, [sp, #0]
 800ba5a:	9a01      	ldr	r2, [sp, #4]
 800ba5c:	4283      	cmp	r3, r0
 800ba5e:	d901      	bls.n	800ba64 <_malloc_r+0x2fc>
 800ba60:	45ab      	cmp	fp, r5
 800ba62:	d14f      	bne.n	800bb04 <_malloc_r+0x39c>
 800ba64:	4842      	ldr	r0, [pc, #264]	; (800bb70 <_malloc_r+0x408>)
 800ba66:	4543      	cmp	r3, r8
 800ba68:	6801      	ldr	r1, [r0, #0]
 800ba6a:	4682      	mov	sl, r0
 800ba6c:	eb07 0e01 	add.w	lr, r7, r1
 800ba70:	f8c0 e000 	str.w	lr, [r0]
 800ba74:	493f      	ldr	r1, [pc, #252]	; (800bb74 <_malloc_r+0x40c>)
 800ba76:	d113      	bne.n	800baa0 <_malloc_r+0x338>
 800ba78:	420b      	tst	r3, r1
 800ba7a:	d111      	bne.n	800baa0 <_malloc_r+0x338>
 800ba7c:	68ab      	ldr	r3, [r5, #8]
 800ba7e:	443e      	add	r6, r7
 800ba80:	f046 0601 	orr.w	r6, r6, #1
 800ba84:	605e      	str	r6, [r3, #4]
 800ba86:	4a3c      	ldr	r2, [pc, #240]	; (800bb78 <_malloc_r+0x410>)
 800ba88:	f8da 3000 	ldr.w	r3, [sl]
 800ba8c:	6811      	ldr	r1, [r2, #0]
 800ba8e:	428b      	cmp	r3, r1
 800ba90:	bf88      	it	hi
 800ba92:	6013      	strhi	r3, [r2, #0]
 800ba94:	4a39      	ldr	r2, [pc, #228]	; (800bb7c <_malloc_r+0x414>)
 800ba96:	6811      	ldr	r1, [r2, #0]
 800ba98:	428b      	cmp	r3, r1
 800ba9a:	bf88      	it	hi
 800ba9c:	6013      	strhi	r3, [r2, #0]
 800ba9e:	e031      	b.n	800bb04 <_malloc_r+0x39c>
 800baa0:	6810      	ldr	r0, [r2, #0]
 800baa2:	3001      	adds	r0, #1
 800baa4:	bf1b      	ittet	ne
 800baa6:	eba8 0303 	subne.w	r3, r8, r3
 800baaa:	4473      	addne	r3, lr
 800baac:	f8c2 8000 	streq.w	r8, [r2]
 800bab0:	f8ca 3000 	strne.w	r3, [sl]
 800bab4:	f018 0007 	ands.w	r0, r8, #7
 800bab8:	bf1c      	itt	ne
 800baba:	f1c0 0008 	rsbne	r0, r0, #8
 800babe:	4480      	addne	r8, r0
 800bac0:	4b2a      	ldr	r3, [pc, #168]	; (800bb6c <_malloc_r+0x404>)
 800bac2:	4447      	add	r7, r8
 800bac4:	4418      	add	r0, r3
 800bac6:	400f      	ands	r7, r1
 800bac8:	1bc7      	subs	r7, r0, r7
 800baca:	4639      	mov	r1, r7
 800bacc:	4648      	mov	r0, r9
 800bace:	f000 fa57 	bl	800bf80 <_sbrk_r>
 800bad2:	1c43      	adds	r3, r0, #1
 800bad4:	bf04      	itt	eq
 800bad6:	4640      	moveq	r0, r8
 800bad8:	2700      	moveq	r7, #0
 800bada:	f8da 3000 	ldr.w	r3, [sl]
 800bade:	eba0 0008 	sub.w	r0, r0, r8
 800bae2:	443b      	add	r3, r7
 800bae4:	4407      	add	r7, r0
 800bae6:	f047 0701 	orr.w	r7, r7, #1
 800baea:	45ab      	cmp	fp, r5
 800baec:	f8c5 8008 	str.w	r8, [r5, #8]
 800baf0:	f8ca 3000 	str.w	r3, [sl]
 800baf4:	f8c8 7004 	str.w	r7, [r8, #4]
 800baf8:	d0c5      	beq.n	800ba86 <_malloc_r+0x31e>
 800bafa:	2e0f      	cmp	r6, #15
 800bafc:	d810      	bhi.n	800bb20 <_malloc_r+0x3b8>
 800bafe:	2301      	movs	r3, #1
 800bb00:	f8c8 3004 	str.w	r3, [r8, #4]
 800bb04:	68ab      	ldr	r3, [r5, #8]
 800bb06:	685a      	ldr	r2, [r3, #4]
 800bb08:	f022 0203 	bic.w	r2, r2, #3
 800bb0c:	4294      	cmp	r4, r2
 800bb0e:	eba2 0304 	sub.w	r3, r2, r4
 800bb12:	d801      	bhi.n	800bb18 <_malloc_r+0x3b0>
 800bb14:	2b0f      	cmp	r3, #15
 800bb16:	dc1a      	bgt.n	800bb4e <_malloc_r+0x3e6>
 800bb18:	4648      	mov	r0, r9
 800bb1a:	f000 f859 	bl	800bbd0 <__malloc_unlock>
 800bb1e:	e630      	b.n	800b782 <_malloc_r+0x1a>
 800bb20:	2205      	movs	r2, #5
 800bb22:	f8db 3004 	ldr.w	r3, [fp, #4]
 800bb26:	3e0c      	subs	r6, #12
 800bb28:	f026 0607 	bic.w	r6, r6, #7
 800bb2c:	f003 0301 	and.w	r3, r3, #1
 800bb30:	4333      	orrs	r3, r6
 800bb32:	f8cb 3004 	str.w	r3, [fp, #4]
 800bb36:	2e0f      	cmp	r6, #15
 800bb38:	eb0b 0306 	add.w	r3, fp, r6
 800bb3c:	605a      	str	r2, [r3, #4]
 800bb3e:	609a      	str	r2, [r3, #8]
 800bb40:	d9a1      	bls.n	800ba86 <_malloc_r+0x31e>
 800bb42:	f10b 0108 	add.w	r1, fp, #8
 800bb46:	4648      	mov	r0, r9
 800bb48:	f000 fd66 	bl	800c618 <_free_r>
 800bb4c:	e79b      	b.n	800ba86 <_malloc_r+0x31e>
 800bb4e:	68ae      	ldr	r6, [r5, #8]
 800bb50:	f044 0201 	orr.w	r2, r4, #1
 800bb54:	f043 0301 	orr.w	r3, r3, #1
 800bb58:	4434      	add	r4, r6
 800bb5a:	6072      	str	r2, [r6, #4]
 800bb5c:	60ac      	str	r4, [r5, #8]
 800bb5e:	6063      	str	r3, [r4, #4]
 800bb60:	e634      	b.n	800b7cc <_malloc_r+0x64>
 800bb62:	bf00      	nop
 800bb64:	2000058c 	.word	0x2000058c
 800bb68:	20000518 	.word	0x20000518
 800bb6c:	00000080 	.word	0x00000080
 800bb70:	2000055c 	.word	0x2000055c
 800bb74:	0000007f 	.word	0x0000007f
 800bb78:	20000584 	.word	0x20000584
 800bb7c:	20000588 	.word	0x20000588

0800bb80 <memcmp>:
 800bb80:	b510      	push	{r4, lr}
 800bb82:	3901      	subs	r1, #1
 800bb84:	4402      	add	r2, r0
 800bb86:	4290      	cmp	r0, r2
 800bb88:	d101      	bne.n	800bb8e <memcmp+0xe>
 800bb8a:	2000      	movs	r0, #0
 800bb8c:	bd10      	pop	{r4, pc}
 800bb8e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bb92:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bb96:	42a3      	cmp	r3, r4
 800bb98:	d0f5      	beq.n	800bb86 <memcmp+0x6>
 800bb9a:	1b18      	subs	r0, r3, r4
 800bb9c:	bd10      	pop	{r4, pc}

0800bb9e <memcpy>:
 800bb9e:	b510      	push	{r4, lr}
 800bba0:	1e43      	subs	r3, r0, #1
 800bba2:	440a      	add	r2, r1
 800bba4:	4291      	cmp	r1, r2
 800bba6:	d100      	bne.n	800bbaa <memcpy+0xc>
 800bba8:	bd10      	pop	{r4, pc}
 800bbaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbb2:	e7f7      	b.n	800bba4 <memcpy+0x6>

0800bbb4 <memset>:
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	4402      	add	r2, r0
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d100      	bne.n	800bbbe <memset+0xa>
 800bbbc:	4770      	bx	lr
 800bbbe:	f803 1b01 	strb.w	r1, [r3], #1
 800bbc2:	e7f9      	b.n	800bbb8 <memset+0x4>

0800bbc4 <__malloc_lock>:
 800bbc4:	4801      	ldr	r0, [pc, #4]	; (800bbcc <__malloc_lock+0x8>)
 800bbc6:	f7ff bdbd 	b.w	800b744 <__retarget_lock_acquire_recursive>
 800bbca:	bf00      	nop
 800bbcc:	20000598 	.word	0x20000598

0800bbd0 <__malloc_unlock>:
 800bbd0:	4801      	ldr	r0, [pc, #4]	; (800bbd8 <__malloc_unlock+0x8>)
 800bbd2:	f7ff bdb8 	b.w	800b746 <__retarget_lock_release_recursive>
 800bbd6:	bf00      	nop
 800bbd8:	20000598 	.word	0x20000598

0800bbdc <_putc_r>:
 800bbdc:	b570      	push	{r4, r5, r6, lr}
 800bbde:	460d      	mov	r5, r1
 800bbe0:	4614      	mov	r4, r2
 800bbe2:	4606      	mov	r6, r0
 800bbe4:	b118      	cbz	r0, 800bbee <_putc_r+0x12>
 800bbe6:	6983      	ldr	r3, [r0, #24]
 800bbe8:	b90b      	cbnz	r3, 800bbee <_putc_r+0x12>
 800bbea:	f000 fc3d 	bl	800c468 <__sinit>
 800bbee:	4b1c      	ldr	r3, [pc, #112]	; (800bc60 <_putc_r+0x84>)
 800bbf0:	429c      	cmp	r4, r3
 800bbf2:	d124      	bne.n	800bc3e <_putc_r+0x62>
 800bbf4:	6874      	ldr	r4, [r6, #4]
 800bbf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bbf8:	07d8      	lsls	r0, r3, #31
 800bbfa:	d405      	bmi.n	800bc08 <_putc_r+0x2c>
 800bbfc:	89a3      	ldrh	r3, [r4, #12]
 800bbfe:	0599      	lsls	r1, r3, #22
 800bc00:	d402      	bmi.n	800bc08 <_putc_r+0x2c>
 800bc02:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc04:	f7ff fd9e 	bl	800b744 <__retarget_lock_acquire_recursive>
 800bc08:	68a3      	ldr	r3, [r4, #8]
 800bc0a:	3b01      	subs	r3, #1
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	60a3      	str	r3, [r4, #8]
 800bc10:	da05      	bge.n	800bc1e <_putc_r+0x42>
 800bc12:	69a2      	ldr	r2, [r4, #24]
 800bc14:	4293      	cmp	r3, r2
 800bc16:	db1c      	blt.n	800bc52 <_putc_r+0x76>
 800bc18:	b2eb      	uxtb	r3, r5
 800bc1a:	2b0a      	cmp	r3, #10
 800bc1c:	d019      	beq.n	800bc52 <_putc_r+0x76>
 800bc1e:	6823      	ldr	r3, [r4, #0]
 800bc20:	1c5a      	adds	r2, r3, #1
 800bc22:	6022      	str	r2, [r4, #0]
 800bc24:	701d      	strb	r5, [r3, #0]
 800bc26:	b2ed      	uxtb	r5, r5
 800bc28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc2a:	07da      	lsls	r2, r3, #31
 800bc2c:	d405      	bmi.n	800bc3a <_putc_r+0x5e>
 800bc2e:	89a3      	ldrh	r3, [r4, #12]
 800bc30:	059b      	lsls	r3, r3, #22
 800bc32:	d402      	bmi.n	800bc3a <_putc_r+0x5e>
 800bc34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc36:	f7ff fd86 	bl	800b746 <__retarget_lock_release_recursive>
 800bc3a:	4628      	mov	r0, r5
 800bc3c:	bd70      	pop	{r4, r5, r6, pc}
 800bc3e:	4b09      	ldr	r3, [pc, #36]	; (800bc64 <_putc_r+0x88>)
 800bc40:	429c      	cmp	r4, r3
 800bc42:	d101      	bne.n	800bc48 <_putc_r+0x6c>
 800bc44:	68b4      	ldr	r4, [r6, #8]
 800bc46:	e7d6      	b.n	800bbf6 <_putc_r+0x1a>
 800bc48:	4b07      	ldr	r3, [pc, #28]	; (800bc68 <_putc_r+0x8c>)
 800bc4a:	429c      	cmp	r4, r3
 800bc4c:	bf08      	it	eq
 800bc4e:	68f4      	ldreq	r4, [r6, #12]
 800bc50:	e7d1      	b.n	800bbf6 <_putc_r+0x1a>
 800bc52:	4629      	mov	r1, r5
 800bc54:	4622      	mov	r2, r4
 800bc56:	4630      	mov	r0, r6
 800bc58:	f000 fa02 	bl	800c060 <__swbuf_r>
 800bc5c:	4605      	mov	r5, r0
 800bc5e:	e7e3      	b.n	800bc28 <_putc_r+0x4c>
 800bc60:	0800df0c 	.word	0x0800df0c
 800bc64:	0800df2c 	.word	0x0800df2c
 800bc68:	0800deec 	.word	0x0800deec

0800bc6c <realloc>:
 800bc6c:	4b02      	ldr	r3, [pc, #8]	; (800bc78 <realloc+0xc>)
 800bc6e:	460a      	mov	r2, r1
 800bc70:	4601      	mov	r1, r0
 800bc72:	6818      	ldr	r0, [r3, #0]
 800bc74:	f000 b802 	b.w	800bc7c <_realloc_r>
 800bc78:	2000001c 	.word	0x2000001c

0800bc7c <_realloc_r>:
 800bc7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc80:	4682      	mov	sl, r0
 800bc82:	460c      	mov	r4, r1
 800bc84:	b929      	cbnz	r1, 800bc92 <_realloc_r+0x16>
 800bc86:	4611      	mov	r1, r2
 800bc88:	b003      	add	sp, #12
 800bc8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc8e:	f7ff bd6b 	b.w	800b768 <_malloc_r>
 800bc92:	9201      	str	r2, [sp, #4]
 800bc94:	f7ff ff96 	bl	800bbc4 <__malloc_lock>
 800bc98:	9a01      	ldr	r2, [sp, #4]
 800bc9a:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800bc9e:	f102 080b 	add.w	r8, r2, #11
 800bca2:	f1b8 0f16 	cmp.w	r8, #22
 800bca6:	f1a4 0908 	sub.w	r9, r4, #8
 800bcaa:	f025 0603 	bic.w	r6, r5, #3
 800bcae:	d90a      	bls.n	800bcc6 <_realloc_r+0x4a>
 800bcb0:	f038 0807 	bics.w	r8, r8, #7
 800bcb4:	d509      	bpl.n	800bcca <_realloc_r+0x4e>
 800bcb6:	230c      	movs	r3, #12
 800bcb8:	2700      	movs	r7, #0
 800bcba:	f8ca 3000 	str.w	r3, [sl]
 800bcbe:	4638      	mov	r0, r7
 800bcc0:	b003      	add	sp, #12
 800bcc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcc6:	f04f 0810 	mov.w	r8, #16
 800bcca:	4590      	cmp	r8, r2
 800bccc:	d3f3      	bcc.n	800bcb6 <_realloc_r+0x3a>
 800bcce:	45b0      	cmp	r8, r6
 800bcd0:	f340 8148 	ble.w	800bf64 <_realloc_r+0x2e8>
 800bcd4:	4ba9      	ldr	r3, [pc, #676]	; (800bf7c <_realloc_r+0x300>)
 800bcd6:	eb09 0106 	add.w	r1, r9, r6
 800bcda:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800bcde:	469b      	mov	fp, r3
 800bce0:	4571      	cmp	r1, lr
 800bce2:	684b      	ldr	r3, [r1, #4]
 800bce4:	d005      	beq.n	800bcf2 <_realloc_r+0x76>
 800bce6:	f023 0001 	bic.w	r0, r3, #1
 800bcea:	4408      	add	r0, r1
 800bcec:	6840      	ldr	r0, [r0, #4]
 800bcee:	07c7      	lsls	r7, r0, #31
 800bcf0:	d447      	bmi.n	800bd82 <_realloc_r+0x106>
 800bcf2:	f023 0303 	bic.w	r3, r3, #3
 800bcf6:	4571      	cmp	r1, lr
 800bcf8:	eb06 0703 	add.w	r7, r6, r3
 800bcfc:	d119      	bne.n	800bd32 <_realloc_r+0xb6>
 800bcfe:	f108 0010 	add.w	r0, r8, #16
 800bd02:	4287      	cmp	r7, r0
 800bd04:	db3f      	blt.n	800bd86 <_realloc_r+0x10a>
 800bd06:	eba7 0708 	sub.w	r7, r7, r8
 800bd0a:	eb09 0308 	add.w	r3, r9, r8
 800bd0e:	f047 0701 	orr.w	r7, r7, #1
 800bd12:	f8cb 3008 	str.w	r3, [fp, #8]
 800bd16:	605f      	str	r7, [r3, #4]
 800bd18:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800bd1c:	4650      	mov	r0, sl
 800bd1e:	f003 0301 	and.w	r3, r3, #1
 800bd22:	ea43 0308 	orr.w	r3, r3, r8
 800bd26:	f844 3c04 	str.w	r3, [r4, #-4]
 800bd2a:	f7ff ff51 	bl	800bbd0 <__malloc_unlock>
 800bd2e:	4627      	mov	r7, r4
 800bd30:	e7c5      	b.n	800bcbe <_realloc_r+0x42>
 800bd32:	45b8      	cmp	r8, r7
 800bd34:	dc27      	bgt.n	800bd86 <_realloc_r+0x10a>
 800bd36:	68cb      	ldr	r3, [r1, #12]
 800bd38:	688a      	ldr	r2, [r1, #8]
 800bd3a:	60d3      	str	r3, [r2, #12]
 800bd3c:	609a      	str	r2, [r3, #8]
 800bd3e:	eba7 0008 	sub.w	r0, r7, r8
 800bd42:	280f      	cmp	r0, #15
 800bd44:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bd48:	eb09 0207 	add.w	r2, r9, r7
 800bd4c:	f240 810c 	bls.w	800bf68 <_realloc_r+0x2ec>
 800bd50:	f003 0301 	and.w	r3, r3, #1
 800bd54:	eb09 0108 	add.w	r1, r9, r8
 800bd58:	ea43 0308 	orr.w	r3, r3, r8
 800bd5c:	f040 0001 	orr.w	r0, r0, #1
 800bd60:	f8c9 3004 	str.w	r3, [r9, #4]
 800bd64:	6048      	str	r0, [r1, #4]
 800bd66:	6853      	ldr	r3, [r2, #4]
 800bd68:	3108      	adds	r1, #8
 800bd6a:	f043 0301 	orr.w	r3, r3, #1
 800bd6e:	6053      	str	r3, [r2, #4]
 800bd70:	4650      	mov	r0, sl
 800bd72:	f000 fc51 	bl	800c618 <_free_r>
 800bd76:	4650      	mov	r0, sl
 800bd78:	f7ff ff2a 	bl	800bbd0 <__malloc_unlock>
 800bd7c:	f109 0708 	add.w	r7, r9, #8
 800bd80:	e79d      	b.n	800bcbe <_realloc_r+0x42>
 800bd82:	2300      	movs	r3, #0
 800bd84:	4619      	mov	r1, r3
 800bd86:	07e8      	lsls	r0, r5, #31
 800bd88:	f100 8085 	bmi.w	800be96 <_realloc_r+0x21a>
 800bd8c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800bd90:	eba9 0505 	sub.w	r5, r9, r5
 800bd94:	6868      	ldr	r0, [r5, #4]
 800bd96:	f020 0003 	bic.w	r0, r0, #3
 800bd9a:	4430      	add	r0, r6
 800bd9c:	2900      	cmp	r1, #0
 800bd9e:	d077      	beq.n	800be90 <_realloc_r+0x214>
 800bda0:	4571      	cmp	r1, lr
 800bda2:	d151      	bne.n	800be48 <_realloc_r+0x1cc>
 800bda4:	4403      	add	r3, r0
 800bda6:	f108 0110 	add.w	r1, r8, #16
 800bdaa:	428b      	cmp	r3, r1
 800bdac:	db70      	blt.n	800be90 <_realloc_r+0x214>
 800bdae:	462f      	mov	r7, r5
 800bdb0:	68ea      	ldr	r2, [r5, #12]
 800bdb2:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800bdb6:	60ca      	str	r2, [r1, #12]
 800bdb8:	6091      	str	r1, [r2, #8]
 800bdba:	1f32      	subs	r2, r6, #4
 800bdbc:	2a24      	cmp	r2, #36	; 0x24
 800bdbe:	d83c      	bhi.n	800be3a <_realloc_r+0x1be>
 800bdc0:	2a13      	cmp	r2, #19
 800bdc2:	d937      	bls.n	800be34 <_realloc_r+0x1b8>
 800bdc4:	6821      	ldr	r1, [r4, #0]
 800bdc6:	2a1b      	cmp	r2, #27
 800bdc8:	60a9      	str	r1, [r5, #8]
 800bdca:	6861      	ldr	r1, [r4, #4]
 800bdcc:	60e9      	str	r1, [r5, #12]
 800bdce:	d81c      	bhi.n	800be0a <_realloc_r+0x18e>
 800bdd0:	f105 0210 	add.w	r2, r5, #16
 800bdd4:	f104 0108 	add.w	r1, r4, #8
 800bdd8:	6808      	ldr	r0, [r1, #0]
 800bdda:	6010      	str	r0, [r2, #0]
 800bddc:	6848      	ldr	r0, [r1, #4]
 800bdde:	6050      	str	r0, [r2, #4]
 800bde0:	6889      	ldr	r1, [r1, #8]
 800bde2:	6091      	str	r1, [r2, #8]
 800bde4:	eba3 0308 	sub.w	r3, r3, r8
 800bde8:	eb05 0208 	add.w	r2, r5, r8
 800bdec:	f043 0301 	orr.w	r3, r3, #1
 800bdf0:	f8cb 2008 	str.w	r2, [fp, #8]
 800bdf4:	6053      	str	r3, [r2, #4]
 800bdf6:	686b      	ldr	r3, [r5, #4]
 800bdf8:	f003 0301 	and.w	r3, r3, #1
 800bdfc:	ea43 0308 	orr.w	r3, r3, r8
 800be00:	606b      	str	r3, [r5, #4]
 800be02:	4650      	mov	r0, sl
 800be04:	f7ff fee4 	bl	800bbd0 <__malloc_unlock>
 800be08:	e759      	b.n	800bcbe <_realloc_r+0x42>
 800be0a:	68a1      	ldr	r1, [r4, #8]
 800be0c:	2a24      	cmp	r2, #36	; 0x24
 800be0e:	6129      	str	r1, [r5, #16]
 800be10:	68e1      	ldr	r1, [r4, #12]
 800be12:	bf18      	it	ne
 800be14:	f105 0218 	addne.w	r2, r5, #24
 800be18:	6169      	str	r1, [r5, #20]
 800be1a:	bf09      	itett	eq
 800be1c:	6922      	ldreq	r2, [r4, #16]
 800be1e:	f104 0110 	addne.w	r1, r4, #16
 800be22:	61aa      	streq	r2, [r5, #24]
 800be24:	6960      	ldreq	r0, [r4, #20]
 800be26:	bf02      	ittt	eq
 800be28:	f105 0220 	addeq.w	r2, r5, #32
 800be2c:	f104 0118 	addeq.w	r1, r4, #24
 800be30:	61e8      	streq	r0, [r5, #28]
 800be32:	e7d1      	b.n	800bdd8 <_realloc_r+0x15c>
 800be34:	463a      	mov	r2, r7
 800be36:	4621      	mov	r1, r4
 800be38:	e7ce      	b.n	800bdd8 <_realloc_r+0x15c>
 800be3a:	4621      	mov	r1, r4
 800be3c:	4638      	mov	r0, r7
 800be3e:	9301      	str	r3, [sp, #4]
 800be40:	f000 fd30 	bl	800c8a4 <memmove>
 800be44:	9b01      	ldr	r3, [sp, #4]
 800be46:	e7cd      	b.n	800bde4 <_realloc_r+0x168>
 800be48:	18c7      	adds	r7, r0, r3
 800be4a:	45b8      	cmp	r8, r7
 800be4c:	dc20      	bgt.n	800be90 <_realloc_r+0x214>
 800be4e:	68cb      	ldr	r3, [r1, #12]
 800be50:	688a      	ldr	r2, [r1, #8]
 800be52:	60d3      	str	r3, [r2, #12]
 800be54:	609a      	str	r2, [r3, #8]
 800be56:	4628      	mov	r0, r5
 800be58:	68eb      	ldr	r3, [r5, #12]
 800be5a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800be5e:	60d3      	str	r3, [r2, #12]
 800be60:	609a      	str	r2, [r3, #8]
 800be62:	1f32      	subs	r2, r6, #4
 800be64:	2a24      	cmp	r2, #36	; 0x24
 800be66:	d843      	bhi.n	800bef0 <_realloc_r+0x274>
 800be68:	2a13      	cmp	r2, #19
 800be6a:	d93f      	bls.n	800beec <_realloc_r+0x270>
 800be6c:	6823      	ldr	r3, [r4, #0]
 800be6e:	2a1b      	cmp	r2, #27
 800be70:	60ab      	str	r3, [r5, #8]
 800be72:	6863      	ldr	r3, [r4, #4]
 800be74:	60eb      	str	r3, [r5, #12]
 800be76:	d824      	bhi.n	800bec2 <_realloc_r+0x246>
 800be78:	f105 0010 	add.w	r0, r5, #16
 800be7c:	f104 0308 	add.w	r3, r4, #8
 800be80:	681a      	ldr	r2, [r3, #0]
 800be82:	6002      	str	r2, [r0, #0]
 800be84:	685a      	ldr	r2, [r3, #4]
 800be86:	6042      	str	r2, [r0, #4]
 800be88:	689b      	ldr	r3, [r3, #8]
 800be8a:	6083      	str	r3, [r0, #8]
 800be8c:	46a9      	mov	r9, r5
 800be8e:	e756      	b.n	800bd3e <_realloc_r+0xc2>
 800be90:	4580      	cmp	r8, r0
 800be92:	4607      	mov	r7, r0
 800be94:	dddf      	ble.n	800be56 <_realloc_r+0x1da>
 800be96:	4611      	mov	r1, r2
 800be98:	4650      	mov	r0, sl
 800be9a:	f7ff fc65 	bl	800b768 <_malloc_r>
 800be9e:	4607      	mov	r7, r0
 800bea0:	2800      	cmp	r0, #0
 800bea2:	d0ae      	beq.n	800be02 <_realloc_r+0x186>
 800bea4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800bea8:	f1a0 0208 	sub.w	r2, r0, #8
 800beac:	f023 0301 	bic.w	r3, r3, #1
 800beb0:	444b      	add	r3, r9
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d120      	bne.n	800bef8 <_realloc_r+0x27c>
 800beb6:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800beba:	f027 0703 	bic.w	r7, r7, #3
 800bebe:	4437      	add	r7, r6
 800bec0:	e73d      	b.n	800bd3e <_realloc_r+0xc2>
 800bec2:	68a3      	ldr	r3, [r4, #8]
 800bec4:	2a24      	cmp	r2, #36	; 0x24
 800bec6:	612b      	str	r3, [r5, #16]
 800bec8:	68e3      	ldr	r3, [r4, #12]
 800beca:	bf18      	it	ne
 800becc:	f105 0018 	addne.w	r0, r5, #24
 800bed0:	616b      	str	r3, [r5, #20]
 800bed2:	bf09      	itett	eq
 800bed4:	6923      	ldreq	r3, [r4, #16]
 800bed6:	f104 0310 	addne.w	r3, r4, #16
 800beda:	61ab      	streq	r3, [r5, #24]
 800bedc:	6962      	ldreq	r2, [r4, #20]
 800bede:	bf02      	ittt	eq
 800bee0:	f105 0020 	addeq.w	r0, r5, #32
 800bee4:	f104 0318 	addeq.w	r3, r4, #24
 800bee8:	61ea      	streq	r2, [r5, #28]
 800beea:	e7c9      	b.n	800be80 <_realloc_r+0x204>
 800beec:	4623      	mov	r3, r4
 800beee:	e7c7      	b.n	800be80 <_realloc_r+0x204>
 800bef0:	4621      	mov	r1, r4
 800bef2:	f000 fcd7 	bl	800c8a4 <memmove>
 800bef6:	e7c9      	b.n	800be8c <_realloc_r+0x210>
 800bef8:	1f32      	subs	r2, r6, #4
 800befa:	2a24      	cmp	r2, #36	; 0x24
 800befc:	d82e      	bhi.n	800bf5c <_realloc_r+0x2e0>
 800befe:	2a13      	cmp	r2, #19
 800bf00:	d929      	bls.n	800bf56 <_realloc_r+0x2da>
 800bf02:	6823      	ldr	r3, [r4, #0]
 800bf04:	2a1b      	cmp	r2, #27
 800bf06:	6003      	str	r3, [r0, #0]
 800bf08:	6863      	ldr	r3, [r4, #4]
 800bf0a:	6043      	str	r3, [r0, #4]
 800bf0c:	d80e      	bhi.n	800bf2c <_realloc_r+0x2b0>
 800bf0e:	f100 0308 	add.w	r3, r0, #8
 800bf12:	f104 0208 	add.w	r2, r4, #8
 800bf16:	6811      	ldr	r1, [r2, #0]
 800bf18:	6019      	str	r1, [r3, #0]
 800bf1a:	6851      	ldr	r1, [r2, #4]
 800bf1c:	6059      	str	r1, [r3, #4]
 800bf1e:	6892      	ldr	r2, [r2, #8]
 800bf20:	609a      	str	r2, [r3, #8]
 800bf22:	4621      	mov	r1, r4
 800bf24:	4650      	mov	r0, sl
 800bf26:	f000 fb77 	bl	800c618 <_free_r>
 800bf2a:	e76a      	b.n	800be02 <_realloc_r+0x186>
 800bf2c:	68a3      	ldr	r3, [r4, #8]
 800bf2e:	2a24      	cmp	r2, #36	; 0x24
 800bf30:	6083      	str	r3, [r0, #8]
 800bf32:	68e3      	ldr	r3, [r4, #12]
 800bf34:	bf18      	it	ne
 800bf36:	f104 0210 	addne.w	r2, r4, #16
 800bf3a:	60c3      	str	r3, [r0, #12]
 800bf3c:	bf09      	itett	eq
 800bf3e:	6923      	ldreq	r3, [r4, #16]
 800bf40:	f100 0310 	addne.w	r3, r0, #16
 800bf44:	6103      	streq	r3, [r0, #16]
 800bf46:	6961      	ldreq	r1, [r4, #20]
 800bf48:	bf02      	ittt	eq
 800bf4a:	f100 0318 	addeq.w	r3, r0, #24
 800bf4e:	f104 0218 	addeq.w	r2, r4, #24
 800bf52:	6141      	streq	r1, [r0, #20]
 800bf54:	e7df      	b.n	800bf16 <_realloc_r+0x29a>
 800bf56:	4603      	mov	r3, r0
 800bf58:	4622      	mov	r2, r4
 800bf5a:	e7dc      	b.n	800bf16 <_realloc_r+0x29a>
 800bf5c:	4621      	mov	r1, r4
 800bf5e:	f000 fca1 	bl	800c8a4 <memmove>
 800bf62:	e7de      	b.n	800bf22 <_realloc_r+0x2a6>
 800bf64:	4637      	mov	r7, r6
 800bf66:	e6ea      	b.n	800bd3e <_realloc_r+0xc2>
 800bf68:	f003 0301 	and.w	r3, r3, #1
 800bf6c:	431f      	orrs	r7, r3
 800bf6e:	f8c9 7004 	str.w	r7, [r9, #4]
 800bf72:	6853      	ldr	r3, [r2, #4]
 800bf74:	f043 0301 	orr.w	r3, r3, #1
 800bf78:	6053      	str	r3, [r2, #4]
 800bf7a:	e6fc      	b.n	800bd76 <_realloc_r+0xfa>
 800bf7c:	20000110 	.word	0x20000110

0800bf80 <_sbrk_r>:
 800bf80:	b538      	push	{r3, r4, r5, lr}
 800bf82:	2300      	movs	r3, #0
 800bf84:	4c05      	ldr	r4, [pc, #20]	; (800bf9c <_sbrk_r+0x1c>)
 800bf86:	4605      	mov	r5, r0
 800bf88:	4608      	mov	r0, r1
 800bf8a:	6023      	str	r3, [r4, #0]
 800bf8c:	f000 fde2 	bl	800cb54 <_sbrk>
 800bf90:	1c43      	adds	r3, r0, #1
 800bf92:	d102      	bne.n	800bf9a <_sbrk_r+0x1a>
 800bf94:	6823      	ldr	r3, [r4, #0]
 800bf96:	b103      	cbz	r3, 800bf9a <_sbrk_r+0x1a>
 800bf98:	602b      	str	r3, [r5, #0]
 800bf9a:	bd38      	pop	{r3, r4, r5, pc}
 800bf9c:	200005a0 	.word	0x200005a0

0800bfa0 <_raise_r>:
 800bfa0:	291f      	cmp	r1, #31
 800bfa2:	b538      	push	{r3, r4, r5, lr}
 800bfa4:	4604      	mov	r4, r0
 800bfa6:	460d      	mov	r5, r1
 800bfa8:	d904      	bls.n	800bfb4 <_raise_r+0x14>
 800bfaa:	2316      	movs	r3, #22
 800bfac:	6003      	str	r3, [r0, #0]
 800bfae:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb2:	bd38      	pop	{r3, r4, r5, pc}
 800bfb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bfb6:	b112      	cbz	r2, 800bfbe <_raise_r+0x1e>
 800bfb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bfbc:	b94b      	cbnz	r3, 800bfd2 <_raise_r+0x32>
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	f000 f830 	bl	800c024 <_getpid_r>
 800bfc4:	462a      	mov	r2, r5
 800bfc6:	4601      	mov	r1, r0
 800bfc8:	4620      	mov	r0, r4
 800bfca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfce:	f000 b817 	b.w	800c000 <_kill_r>
 800bfd2:	2b01      	cmp	r3, #1
 800bfd4:	d00a      	beq.n	800bfec <_raise_r+0x4c>
 800bfd6:	1c59      	adds	r1, r3, #1
 800bfd8:	d103      	bne.n	800bfe2 <_raise_r+0x42>
 800bfda:	2316      	movs	r3, #22
 800bfdc:	6003      	str	r3, [r0, #0]
 800bfde:	2001      	movs	r0, #1
 800bfe0:	bd38      	pop	{r3, r4, r5, pc}
 800bfe2:	2400      	movs	r4, #0
 800bfe4:	4628      	mov	r0, r5
 800bfe6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bfea:	4798      	blx	r3
 800bfec:	2000      	movs	r0, #0
 800bfee:	bd38      	pop	{r3, r4, r5, pc}

0800bff0 <raise>:
 800bff0:	4b02      	ldr	r3, [pc, #8]	; (800bffc <raise+0xc>)
 800bff2:	4601      	mov	r1, r0
 800bff4:	6818      	ldr	r0, [r3, #0]
 800bff6:	f7ff bfd3 	b.w	800bfa0 <_raise_r>
 800bffa:	bf00      	nop
 800bffc:	2000001c 	.word	0x2000001c

0800c000 <_kill_r>:
 800c000:	b538      	push	{r3, r4, r5, lr}
 800c002:	2300      	movs	r3, #0
 800c004:	4c06      	ldr	r4, [pc, #24]	; (800c020 <_kill_r+0x20>)
 800c006:	4605      	mov	r5, r0
 800c008:	4608      	mov	r0, r1
 800c00a:	4611      	mov	r1, r2
 800c00c:	6023      	str	r3, [r4, #0]
 800c00e:	f000 fd89 	bl	800cb24 <_kill>
 800c012:	1c43      	adds	r3, r0, #1
 800c014:	d102      	bne.n	800c01c <_kill_r+0x1c>
 800c016:	6823      	ldr	r3, [r4, #0]
 800c018:	b103      	cbz	r3, 800c01c <_kill_r+0x1c>
 800c01a:	602b      	str	r3, [r5, #0]
 800c01c:	bd38      	pop	{r3, r4, r5, pc}
 800c01e:	bf00      	nop
 800c020:	200005a0 	.word	0x200005a0

0800c024 <_getpid_r>:
 800c024:	f000 bd6e 	b.w	800cb04 <_getpid>

0800c028 <strncmp>:
 800c028:	b510      	push	{r4, lr}
 800c02a:	b16a      	cbz	r2, 800c048 <strncmp+0x20>
 800c02c:	3901      	subs	r1, #1
 800c02e:	1884      	adds	r4, r0, r2
 800c030:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c034:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c038:	4293      	cmp	r3, r2
 800c03a:	d103      	bne.n	800c044 <strncmp+0x1c>
 800c03c:	42a0      	cmp	r0, r4
 800c03e:	d001      	beq.n	800c044 <strncmp+0x1c>
 800c040:	2b00      	cmp	r3, #0
 800c042:	d1f5      	bne.n	800c030 <strncmp+0x8>
 800c044:	1a98      	subs	r0, r3, r2
 800c046:	bd10      	pop	{r4, pc}
 800c048:	4610      	mov	r0, r2
 800c04a:	bd10      	pop	{r4, pc}

0800c04c <write>:
 800c04c:	4613      	mov	r3, r2
 800c04e:	460a      	mov	r2, r1
 800c050:	4601      	mov	r1, r0
 800c052:	4802      	ldr	r0, [pc, #8]	; (800c05c <write+0x10>)
 800c054:	6800      	ldr	r0, [r0, #0]
 800c056:	f000 b861 	b.w	800c11c <_write_r>
 800c05a:	bf00      	nop
 800c05c:	2000001c 	.word	0x2000001c

0800c060 <__swbuf_r>:
 800c060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c062:	460e      	mov	r6, r1
 800c064:	4614      	mov	r4, r2
 800c066:	4605      	mov	r5, r0
 800c068:	b118      	cbz	r0, 800c072 <__swbuf_r+0x12>
 800c06a:	6983      	ldr	r3, [r0, #24]
 800c06c:	b90b      	cbnz	r3, 800c072 <__swbuf_r+0x12>
 800c06e:	f000 f9fb 	bl	800c468 <__sinit>
 800c072:	4b27      	ldr	r3, [pc, #156]	; (800c110 <__swbuf_r+0xb0>)
 800c074:	429c      	cmp	r4, r3
 800c076:	d12f      	bne.n	800c0d8 <__swbuf_r+0x78>
 800c078:	686c      	ldr	r4, [r5, #4]
 800c07a:	69a3      	ldr	r3, [r4, #24]
 800c07c:	60a3      	str	r3, [r4, #8]
 800c07e:	89a3      	ldrh	r3, [r4, #12]
 800c080:	0719      	lsls	r1, r3, #28
 800c082:	d533      	bpl.n	800c0ec <__swbuf_r+0x8c>
 800c084:	6923      	ldr	r3, [r4, #16]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d030      	beq.n	800c0ec <__swbuf_r+0x8c>
 800c08a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c08e:	b2f6      	uxtb	r6, r6
 800c090:	049a      	lsls	r2, r3, #18
 800c092:	4637      	mov	r7, r6
 800c094:	d534      	bpl.n	800c100 <__swbuf_r+0xa0>
 800c096:	6923      	ldr	r3, [r4, #16]
 800c098:	6820      	ldr	r0, [r4, #0]
 800c09a:	1ac0      	subs	r0, r0, r3
 800c09c:	6963      	ldr	r3, [r4, #20]
 800c09e:	4298      	cmp	r0, r3
 800c0a0:	db04      	blt.n	800c0ac <__swbuf_r+0x4c>
 800c0a2:	4621      	mov	r1, r4
 800c0a4:	4628      	mov	r0, r5
 800c0a6:	f000 f94b 	bl	800c340 <_fflush_r>
 800c0aa:	bb28      	cbnz	r0, 800c0f8 <__swbuf_r+0x98>
 800c0ac:	68a3      	ldr	r3, [r4, #8]
 800c0ae:	3001      	adds	r0, #1
 800c0b0:	3b01      	subs	r3, #1
 800c0b2:	60a3      	str	r3, [r4, #8]
 800c0b4:	6823      	ldr	r3, [r4, #0]
 800c0b6:	1c5a      	adds	r2, r3, #1
 800c0b8:	6022      	str	r2, [r4, #0]
 800c0ba:	701e      	strb	r6, [r3, #0]
 800c0bc:	6963      	ldr	r3, [r4, #20]
 800c0be:	4298      	cmp	r0, r3
 800c0c0:	d004      	beq.n	800c0cc <__swbuf_r+0x6c>
 800c0c2:	89a3      	ldrh	r3, [r4, #12]
 800c0c4:	07db      	lsls	r3, r3, #31
 800c0c6:	d519      	bpl.n	800c0fc <__swbuf_r+0x9c>
 800c0c8:	2e0a      	cmp	r6, #10
 800c0ca:	d117      	bne.n	800c0fc <__swbuf_r+0x9c>
 800c0cc:	4621      	mov	r1, r4
 800c0ce:	4628      	mov	r0, r5
 800c0d0:	f000 f936 	bl	800c340 <_fflush_r>
 800c0d4:	b190      	cbz	r0, 800c0fc <__swbuf_r+0x9c>
 800c0d6:	e00f      	b.n	800c0f8 <__swbuf_r+0x98>
 800c0d8:	4b0e      	ldr	r3, [pc, #56]	; (800c114 <__swbuf_r+0xb4>)
 800c0da:	429c      	cmp	r4, r3
 800c0dc:	d101      	bne.n	800c0e2 <__swbuf_r+0x82>
 800c0de:	68ac      	ldr	r4, [r5, #8]
 800c0e0:	e7cb      	b.n	800c07a <__swbuf_r+0x1a>
 800c0e2:	4b0d      	ldr	r3, [pc, #52]	; (800c118 <__swbuf_r+0xb8>)
 800c0e4:	429c      	cmp	r4, r3
 800c0e6:	bf08      	it	eq
 800c0e8:	68ec      	ldreq	r4, [r5, #12]
 800c0ea:	e7c6      	b.n	800c07a <__swbuf_r+0x1a>
 800c0ec:	4621      	mov	r1, r4
 800c0ee:	4628      	mov	r0, r5
 800c0f0:	f000 f826 	bl	800c140 <__swsetup_r>
 800c0f4:	2800      	cmp	r0, #0
 800c0f6:	d0c8      	beq.n	800c08a <__swbuf_r+0x2a>
 800c0f8:	f04f 37ff 	mov.w	r7, #4294967295
 800c0fc:	4638      	mov	r0, r7
 800c0fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c100:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c104:	81a3      	strh	r3, [r4, #12]
 800c106:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c108:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c10c:	6663      	str	r3, [r4, #100]	; 0x64
 800c10e:	e7c2      	b.n	800c096 <__swbuf_r+0x36>
 800c110:	0800df0c 	.word	0x0800df0c
 800c114:	0800df2c 	.word	0x0800df2c
 800c118:	0800deec 	.word	0x0800deec

0800c11c <_write_r>:
 800c11c:	b538      	push	{r3, r4, r5, lr}
 800c11e:	4605      	mov	r5, r0
 800c120:	4608      	mov	r0, r1
 800c122:	4611      	mov	r1, r2
 800c124:	2200      	movs	r2, #0
 800c126:	4c05      	ldr	r4, [pc, #20]	; (800c13c <_write_r+0x20>)
 800c128:	6022      	str	r2, [r4, #0]
 800c12a:	461a      	mov	r2, r3
 800c12c:	f000 fd20 	bl	800cb70 <_write>
 800c130:	1c43      	adds	r3, r0, #1
 800c132:	d102      	bne.n	800c13a <_write_r+0x1e>
 800c134:	6823      	ldr	r3, [r4, #0]
 800c136:	b103      	cbz	r3, 800c13a <_write_r+0x1e>
 800c138:	602b      	str	r3, [r5, #0]
 800c13a:	bd38      	pop	{r3, r4, r5, pc}
 800c13c:	200005a0 	.word	0x200005a0

0800c140 <__swsetup_r>:
 800c140:	4b32      	ldr	r3, [pc, #200]	; (800c20c <__swsetup_r+0xcc>)
 800c142:	b570      	push	{r4, r5, r6, lr}
 800c144:	681d      	ldr	r5, [r3, #0]
 800c146:	4606      	mov	r6, r0
 800c148:	460c      	mov	r4, r1
 800c14a:	b125      	cbz	r5, 800c156 <__swsetup_r+0x16>
 800c14c:	69ab      	ldr	r3, [r5, #24]
 800c14e:	b913      	cbnz	r3, 800c156 <__swsetup_r+0x16>
 800c150:	4628      	mov	r0, r5
 800c152:	f000 f989 	bl	800c468 <__sinit>
 800c156:	4b2e      	ldr	r3, [pc, #184]	; (800c210 <__swsetup_r+0xd0>)
 800c158:	429c      	cmp	r4, r3
 800c15a:	d10f      	bne.n	800c17c <__swsetup_r+0x3c>
 800c15c:	686c      	ldr	r4, [r5, #4]
 800c15e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c162:	b29a      	uxth	r2, r3
 800c164:	0715      	lsls	r5, r2, #28
 800c166:	d42c      	bmi.n	800c1c2 <__swsetup_r+0x82>
 800c168:	06d0      	lsls	r0, r2, #27
 800c16a:	d411      	bmi.n	800c190 <__swsetup_r+0x50>
 800c16c:	2209      	movs	r2, #9
 800c16e:	6032      	str	r2, [r6, #0]
 800c170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c174:	81a3      	strh	r3, [r4, #12]
 800c176:	f04f 30ff 	mov.w	r0, #4294967295
 800c17a:	bd70      	pop	{r4, r5, r6, pc}
 800c17c:	4b25      	ldr	r3, [pc, #148]	; (800c214 <__swsetup_r+0xd4>)
 800c17e:	429c      	cmp	r4, r3
 800c180:	d101      	bne.n	800c186 <__swsetup_r+0x46>
 800c182:	68ac      	ldr	r4, [r5, #8]
 800c184:	e7eb      	b.n	800c15e <__swsetup_r+0x1e>
 800c186:	4b24      	ldr	r3, [pc, #144]	; (800c218 <__swsetup_r+0xd8>)
 800c188:	429c      	cmp	r4, r3
 800c18a:	bf08      	it	eq
 800c18c:	68ec      	ldreq	r4, [r5, #12]
 800c18e:	e7e6      	b.n	800c15e <__swsetup_r+0x1e>
 800c190:	0751      	lsls	r1, r2, #29
 800c192:	d512      	bpl.n	800c1ba <__swsetup_r+0x7a>
 800c194:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c196:	b141      	cbz	r1, 800c1aa <__swsetup_r+0x6a>
 800c198:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c19c:	4299      	cmp	r1, r3
 800c19e:	d002      	beq.n	800c1a6 <__swsetup_r+0x66>
 800c1a0:	4630      	mov	r0, r6
 800c1a2:	f000 fa39 	bl	800c618 <_free_r>
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	6363      	str	r3, [r4, #52]	; 0x34
 800c1aa:	89a3      	ldrh	r3, [r4, #12]
 800c1ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c1b0:	81a3      	strh	r3, [r4, #12]
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	6063      	str	r3, [r4, #4]
 800c1b6:	6923      	ldr	r3, [r4, #16]
 800c1b8:	6023      	str	r3, [r4, #0]
 800c1ba:	89a3      	ldrh	r3, [r4, #12]
 800c1bc:	f043 0308 	orr.w	r3, r3, #8
 800c1c0:	81a3      	strh	r3, [r4, #12]
 800c1c2:	6923      	ldr	r3, [r4, #16]
 800c1c4:	b94b      	cbnz	r3, 800c1da <__swsetup_r+0x9a>
 800c1c6:	89a3      	ldrh	r3, [r4, #12]
 800c1c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c1cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1d0:	d003      	beq.n	800c1da <__swsetup_r+0x9a>
 800c1d2:	4621      	mov	r1, r4
 800c1d4:	4630      	mov	r0, r6
 800c1d6:	f000 fb25 	bl	800c824 <__smakebuf_r>
 800c1da:	89a2      	ldrh	r2, [r4, #12]
 800c1dc:	f012 0301 	ands.w	r3, r2, #1
 800c1e0:	d00c      	beq.n	800c1fc <__swsetup_r+0xbc>
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	60a3      	str	r3, [r4, #8]
 800c1e6:	6963      	ldr	r3, [r4, #20]
 800c1e8:	425b      	negs	r3, r3
 800c1ea:	61a3      	str	r3, [r4, #24]
 800c1ec:	6923      	ldr	r3, [r4, #16]
 800c1ee:	b953      	cbnz	r3, 800c206 <__swsetup_r+0xc6>
 800c1f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1f4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c1f8:	d1ba      	bne.n	800c170 <__swsetup_r+0x30>
 800c1fa:	bd70      	pop	{r4, r5, r6, pc}
 800c1fc:	0792      	lsls	r2, r2, #30
 800c1fe:	bf58      	it	pl
 800c200:	6963      	ldrpl	r3, [r4, #20]
 800c202:	60a3      	str	r3, [r4, #8]
 800c204:	e7f2      	b.n	800c1ec <__swsetup_r+0xac>
 800c206:	2000      	movs	r0, #0
 800c208:	e7f7      	b.n	800c1fa <__swsetup_r+0xba>
 800c20a:	bf00      	nop
 800c20c:	2000001c 	.word	0x2000001c
 800c210:	0800df0c 	.word	0x0800df0c
 800c214:	0800df2c 	.word	0x0800df2c
 800c218:	0800deec 	.word	0x0800deec

0800c21c <__sflush_r>:
 800c21c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c224:	b293      	uxth	r3, r2
 800c226:	4605      	mov	r5, r0
 800c228:	0718      	lsls	r0, r3, #28
 800c22a:	460c      	mov	r4, r1
 800c22c:	d461      	bmi.n	800c2f2 <__sflush_r+0xd6>
 800c22e:	684b      	ldr	r3, [r1, #4]
 800c230:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c234:	2b00      	cmp	r3, #0
 800c236:	818a      	strh	r2, [r1, #12]
 800c238:	dc05      	bgt.n	800c246 <__sflush_r+0x2a>
 800c23a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	dc02      	bgt.n	800c246 <__sflush_r+0x2a>
 800c240:	2000      	movs	r0, #0
 800c242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c246:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c248:	2e00      	cmp	r6, #0
 800c24a:	d0f9      	beq.n	800c240 <__sflush_r+0x24>
 800c24c:	2300      	movs	r3, #0
 800c24e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c252:	682f      	ldr	r7, [r5, #0]
 800c254:	602b      	str	r3, [r5, #0]
 800c256:	d037      	beq.n	800c2c8 <__sflush_r+0xac>
 800c258:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c25a:	89a3      	ldrh	r3, [r4, #12]
 800c25c:	075a      	lsls	r2, r3, #29
 800c25e:	d505      	bpl.n	800c26c <__sflush_r+0x50>
 800c260:	6863      	ldr	r3, [r4, #4]
 800c262:	1ac0      	subs	r0, r0, r3
 800c264:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c266:	b10b      	cbz	r3, 800c26c <__sflush_r+0x50>
 800c268:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c26a:	1ac0      	subs	r0, r0, r3
 800c26c:	2300      	movs	r3, #0
 800c26e:	4602      	mov	r2, r0
 800c270:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c272:	6a21      	ldr	r1, [r4, #32]
 800c274:	4628      	mov	r0, r5
 800c276:	47b0      	blx	r6
 800c278:	1c43      	adds	r3, r0, #1
 800c27a:	89a3      	ldrh	r3, [r4, #12]
 800c27c:	d106      	bne.n	800c28c <__sflush_r+0x70>
 800c27e:	6829      	ldr	r1, [r5, #0]
 800c280:	291d      	cmp	r1, #29
 800c282:	d84f      	bhi.n	800c324 <__sflush_r+0x108>
 800c284:	4a2d      	ldr	r2, [pc, #180]	; (800c33c <__sflush_r+0x120>)
 800c286:	40ca      	lsrs	r2, r1
 800c288:	07d6      	lsls	r6, r2, #31
 800c28a:	d54b      	bpl.n	800c324 <__sflush_r+0x108>
 800c28c:	2200      	movs	r2, #0
 800c28e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c292:	b21b      	sxth	r3, r3
 800c294:	6062      	str	r2, [r4, #4]
 800c296:	6922      	ldr	r2, [r4, #16]
 800c298:	04d9      	lsls	r1, r3, #19
 800c29a:	81a3      	strh	r3, [r4, #12]
 800c29c:	6022      	str	r2, [r4, #0]
 800c29e:	d504      	bpl.n	800c2aa <__sflush_r+0x8e>
 800c2a0:	1c42      	adds	r2, r0, #1
 800c2a2:	d101      	bne.n	800c2a8 <__sflush_r+0x8c>
 800c2a4:	682b      	ldr	r3, [r5, #0]
 800c2a6:	b903      	cbnz	r3, 800c2aa <__sflush_r+0x8e>
 800c2a8:	6560      	str	r0, [r4, #84]	; 0x54
 800c2aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2ac:	602f      	str	r7, [r5, #0]
 800c2ae:	2900      	cmp	r1, #0
 800c2b0:	d0c6      	beq.n	800c240 <__sflush_r+0x24>
 800c2b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2b6:	4299      	cmp	r1, r3
 800c2b8:	d002      	beq.n	800c2c0 <__sflush_r+0xa4>
 800c2ba:	4628      	mov	r0, r5
 800c2bc:	f000 f9ac 	bl	800c618 <_free_r>
 800c2c0:	2000      	movs	r0, #0
 800c2c2:	6360      	str	r0, [r4, #52]	; 0x34
 800c2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2c8:	6a21      	ldr	r1, [r4, #32]
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	4628      	mov	r0, r5
 800c2ce:	47b0      	blx	r6
 800c2d0:	1c41      	adds	r1, r0, #1
 800c2d2:	d1c2      	bne.n	800c25a <__sflush_r+0x3e>
 800c2d4:	682b      	ldr	r3, [r5, #0]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d0bf      	beq.n	800c25a <__sflush_r+0x3e>
 800c2da:	2b1d      	cmp	r3, #29
 800c2dc:	d001      	beq.n	800c2e2 <__sflush_r+0xc6>
 800c2de:	2b16      	cmp	r3, #22
 800c2e0:	d101      	bne.n	800c2e6 <__sflush_r+0xca>
 800c2e2:	602f      	str	r7, [r5, #0]
 800c2e4:	e7ac      	b.n	800c240 <__sflush_r+0x24>
 800c2e6:	89a3      	ldrh	r3, [r4, #12]
 800c2e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2ec:	81a3      	strh	r3, [r4, #12]
 800c2ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2f2:	690f      	ldr	r7, [r1, #16]
 800c2f4:	2f00      	cmp	r7, #0
 800c2f6:	d0a3      	beq.n	800c240 <__sflush_r+0x24>
 800c2f8:	079b      	lsls	r3, r3, #30
 800c2fa:	bf18      	it	ne
 800c2fc:	2300      	movne	r3, #0
 800c2fe:	680e      	ldr	r6, [r1, #0]
 800c300:	bf08      	it	eq
 800c302:	694b      	ldreq	r3, [r1, #20]
 800c304:	eba6 0807 	sub.w	r8, r6, r7
 800c308:	600f      	str	r7, [r1, #0]
 800c30a:	608b      	str	r3, [r1, #8]
 800c30c:	f1b8 0f00 	cmp.w	r8, #0
 800c310:	dd96      	ble.n	800c240 <__sflush_r+0x24>
 800c312:	4643      	mov	r3, r8
 800c314:	463a      	mov	r2, r7
 800c316:	6a21      	ldr	r1, [r4, #32]
 800c318:	4628      	mov	r0, r5
 800c31a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c31c:	47b0      	blx	r6
 800c31e:	2800      	cmp	r0, #0
 800c320:	dc07      	bgt.n	800c332 <__sflush_r+0x116>
 800c322:	89a3      	ldrh	r3, [r4, #12]
 800c324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c328:	81a3      	strh	r3, [r4, #12]
 800c32a:	f04f 30ff 	mov.w	r0, #4294967295
 800c32e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c332:	4407      	add	r7, r0
 800c334:	eba8 0800 	sub.w	r8, r8, r0
 800c338:	e7e8      	b.n	800c30c <__sflush_r+0xf0>
 800c33a:	bf00      	nop
 800c33c:	20400001 	.word	0x20400001

0800c340 <_fflush_r>:
 800c340:	b538      	push	{r3, r4, r5, lr}
 800c342:	690b      	ldr	r3, [r1, #16]
 800c344:	4605      	mov	r5, r0
 800c346:	460c      	mov	r4, r1
 800c348:	b913      	cbnz	r3, 800c350 <_fflush_r+0x10>
 800c34a:	2500      	movs	r5, #0
 800c34c:	4628      	mov	r0, r5
 800c34e:	bd38      	pop	{r3, r4, r5, pc}
 800c350:	b118      	cbz	r0, 800c35a <_fflush_r+0x1a>
 800c352:	6983      	ldr	r3, [r0, #24]
 800c354:	b90b      	cbnz	r3, 800c35a <_fflush_r+0x1a>
 800c356:	f000 f887 	bl	800c468 <__sinit>
 800c35a:	4b14      	ldr	r3, [pc, #80]	; (800c3ac <_fflush_r+0x6c>)
 800c35c:	429c      	cmp	r4, r3
 800c35e:	d11b      	bne.n	800c398 <_fflush_r+0x58>
 800c360:	686c      	ldr	r4, [r5, #4]
 800c362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d0ef      	beq.n	800c34a <_fflush_r+0xa>
 800c36a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c36c:	07d0      	lsls	r0, r2, #31
 800c36e:	d404      	bmi.n	800c37a <_fflush_r+0x3a>
 800c370:	0599      	lsls	r1, r3, #22
 800c372:	d402      	bmi.n	800c37a <_fflush_r+0x3a>
 800c374:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c376:	f7ff f9e5 	bl	800b744 <__retarget_lock_acquire_recursive>
 800c37a:	4628      	mov	r0, r5
 800c37c:	4621      	mov	r1, r4
 800c37e:	f7ff ff4d 	bl	800c21c <__sflush_r>
 800c382:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c384:	4605      	mov	r5, r0
 800c386:	07da      	lsls	r2, r3, #31
 800c388:	d4e0      	bmi.n	800c34c <_fflush_r+0xc>
 800c38a:	89a3      	ldrh	r3, [r4, #12]
 800c38c:	059b      	lsls	r3, r3, #22
 800c38e:	d4dd      	bmi.n	800c34c <_fflush_r+0xc>
 800c390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c392:	f7ff f9d8 	bl	800b746 <__retarget_lock_release_recursive>
 800c396:	e7d9      	b.n	800c34c <_fflush_r+0xc>
 800c398:	4b05      	ldr	r3, [pc, #20]	; (800c3b0 <_fflush_r+0x70>)
 800c39a:	429c      	cmp	r4, r3
 800c39c:	d101      	bne.n	800c3a2 <_fflush_r+0x62>
 800c39e:	68ac      	ldr	r4, [r5, #8]
 800c3a0:	e7df      	b.n	800c362 <_fflush_r+0x22>
 800c3a2:	4b04      	ldr	r3, [pc, #16]	; (800c3b4 <_fflush_r+0x74>)
 800c3a4:	429c      	cmp	r4, r3
 800c3a6:	bf08      	it	eq
 800c3a8:	68ec      	ldreq	r4, [r5, #12]
 800c3aa:	e7da      	b.n	800c362 <_fflush_r+0x22>
 800c3ac:	0800df0c 	.word	0x0800df0c
 800c3b0:	0800df2c 	.word	0x0800df2c
 800c3b4:	0800deec 	.word	0x0800deec

0800c3b8 <_cleanup_r>:
 800c3b8:	4901      	ldr	r1, [pc, #4]	; (800c3c0 <_cleanup_r+0x8>)
 800c3ba:	f000 b9e9 	b.w	800c790 <_fwalk_reent>
 800c3be:	bf00      	nop
 800c3c0:	0800c981 	.word	0x0800c981

0800c3c4 <std.isra.0>:
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	b510      	push	{r4, lr}
 800c3c8:	4604      	mov	r4, r0
 800c3ca:	6003      	str	r3, [r0, #0]
 800c3cc:	6043      	str	r3, [r0, #4]
 800c3ce:	6083      	str	r3, [r0, #8]
 800c3d0:	8181      	strh	r1, [r0, #12]
 800c3d2:	6643      	str	r3, [r0, #100]	; 0x64
 800c3d4:	81c2      	strh	r2, [r0, #14]
 800c3d6:	6103      	str	r3, [r0, #16]
 800c3d8:	6143      	str	r3, [r0, #20]
 800c3da:	6183      	str	r3, [r0, #24]
 800c3dc:	4619      	mov	r1, r3
 800c3de:	2208      	movs	r2, #8
 800c3e0:	305c      	adds	r0, #92	; 0x5c
 800c3e2:	f7ff fbe7 	bl	800bbb4 <memset>
 800c3e6:	4b05      	ldr	r3, [pc, #20]	; (800c3fc <std.isra.0+0x38>)
 800c3e8:	6224      	str	r4, [r4, #32]
 800c3ea:	6263      	str	r3, [r4, #36]	; 0x24
 800c3ec:	4b04      	ldr	r3, [pc, #16]	; (800c400 <std.isra.0+0x3c>)
 800c3ee:	62a3      	str	r3, [r4, #40]	; 0x28
 800c3f0:	4b04      	ldr	r3, [pc, #16]	; (800c404 <std.isra.0+0x40>)
 800c3f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c3f4:	4b04      	ldr	r3, [pc, #16]	; (800c408 <std.isra.0+0x44>)
 800c3f6:	6323      	str	r3, [r4, #48]	; 0x30
 800c3f8:	bd10      	pop	{r4, pc}
 800c3fa:	bf00      	nop
 800c3fc:	0800c8d9 	.word	0x0800c8d9
 800c400:	0800c8fb 	.word	0x0800c8fb
 800c404:	0800c933 	.word	0x0800c933
 800c408:	0800c957 	.word	0x0800c957

0800c40c <__sfmoreglue>:
 800c40c:	b570      	push	{r4, r5, r6, lr}
 800c40e:	2568      	movs	r5, #104	; 0x68
 800c410:	1e4a      	subs	r2, r1, #1
 800c412:	4355      	muls	r5, r2
 800c414:	460e      	mov	r6, r1
 800c416:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c41a:	f7ff f9a5 	bl	800b768 <_malloc_r>
 800c41e:	4604      	mov	r4, r0
 800c420:	b140      	cbz	r0, 800c434 <__sfmoreglue+0x28>
 800c422:	2100      	movs	r1, #0
 800c424:	e880 0042 	stmia.w	r0, {r1, r6}
 800c428:	300c      	adds	r0, #12
 800c42a:	60a0      	str	r0, [r4, #8]
 800c42c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c430:	f7ff fbc0 	bl	800bbb4 <memset>
 800c434:	4620      	mov	r0, r4
 800c436:	bd70      	pop	{r4, r5, r6, pc}

0800c438 <__sfp_lock_acquire>:
 800c438:	4801      	ldr	r0, [pc, #4]	; (800c440 <__sfp_lock_acquire+0x8>)
 800c43a:	f7ff b983 	b.w	800b744 <__retarget_lock_acquire_recursive>
 800c43e:	bf00      	nop
 800c440:	2000059c 	.word	0x2000059c

0800c444 <__sfp_lock_release>:
 800c444:	4801      	ldr	r0, [pc, #4]	; (800c44c <__sfp_lock_release+0x8>)
 800c446:	f7ff b97e 	b.w	800b746 <__retarget_lock_release_recursive>
 800c44a:	bf00      	nop
 800c44c:	2000059c 	.word	0x2000059c

0800c450 <__sinit_lock_acquire>:
 800c450:	4801      	ldr	r0, [pc, #4]	; (800c458 <__sinit_lock_acquire+0x8>)
 800c452:	f7ff b977 	b.w	800b744 <__retarget_lock_acquire_recursive>
 800c456:	bf00      	nop
 800c458:	20000597 	.word	0x20000597

0800c45c <__sinit_lock_release>:
 800c45c:	4801      	ldr	r0, [pc, #4]	; (800c464 <__sinit_lock_release+0x8>)
 800c45e:	f7ff b972 	b.w	800b746 <__retarget_lock_release_recursive>
 800c462:	bf00      	nop
 800c464:	20000597 	.word	0x20000597

0800c468 <__sinit>:
 800c468:	b510      	push	{r4, lr}
 800c46a:	4604      	mov	r4, r0
 800c46c:	f7ff fff0 	bl	800c450 <__sinit_lock_acquire>
 800c470:	69a3      	ldr	r3, [r4, #24]
 800c472:	b11b      	cbz	r3, 800c47c <__sinit+0x14>
 800c474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c478:	f7ff bff0 	b.w	800c45c <__sinit_lock_release>
 800c47c:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800c480:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 800c484:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800c488:	4b13      	ldr	r3, [pc, #76]	; (800c4d8 <__sinit+0x70>)
 800c48a:	4a14      	ldr	r2, [pc, #80]	; (800c4dc <__sinit+0x74>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	62a2      	str	r2, [r4, #40]	; 0x28
 800c490:	429c      	cmp	r4, r3
 800c492:	bf08      	it	eq
 800c494:	2301      	moveq	r3, #1
 800c496:	4620      	mov	r0, r4
 800c498:	bf08      	it	eq
 800c49a:	61a3      	streq	r3, [r4, #24]
 800c49c:	f000 f820 	bl	800c4e0 <__sfp>
 800c4a0:	6060      	str	r0, [r4, #4]
 800c4a2:	4620      	mov	r0, r4
 800c4a4:	f000 f81c 	bl	800c4e0 <__sfp>
 800c4a8:	60a0      	str	r0, [r4, #8]
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	f000 f818 	bl	800c4e0 <__sfp>
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	60e0      	str	r0, [r4, #12]
 800c4b4:	2104      	movs	r1, #4
 800c4b6:	6860      	ldr	r0, [r4, #4]
 800c4b8:	f7ff ff84 	bl	800c3c4 <std.isra.0>
 800c4bc:	2201      	movs	r2, #1
 800c4be:	2109      	movs	r1, #9
 800c4c0:	68a0      	ldr	r0, [r4, #8]
 800c4c2:	f7ff ff7f 	bl	800c3c4 <std.isra.0>
 800c4c6:	2202      	movs	r2, #2
 800c4c8:	2112      	movs	r1, #18
 800c4ca:	68e0      	ldr	r0, [r4, #12]
 800c4cc:	f7ff ff7a 	bl	800c3c4 <std.isra.0>
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	61a3      	str	r3, [r4, #24]
 800c4d4:	e7ce      	b.n	800c474 <__sinit+0xc>
 800c4d6:	bf00      	nop
 800c4d8:	0800dee8 	.word	0x0800dee8
 800c4dc:	0800c3b9 	.word	0x0800c3b9

0800c4e0 <__sfp>:
 800c4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4e2:	4607      	mov	r7, r0
 800c4e4:	f7ff ffa8 	bl	800c438 <__sfp_lock_acquire>
 800c4e8:	4b1f      	ldr	r3, [pc, #124]	; (800c568 <__sfp+0x88>)
 800c4ea:	681e      	ldr	r6, [r3, #0]
 800c4ec:	69b3      	ldr	r3, [r6, #24]
 800c4ee:	b913      	cbnz	r3, 800c4f6 <__sfp+0x16>
 800c4f0:	4630      	mov	r0, r6
 800c4f2:	f7ff ffb9 	bl	800c468 <__sinit>
 800c4f6:	36d8      	adds	r6, #216	; 0xd8
 800c4f8:	68b4      	ldr	r4, [r6, #8]
 800c4fa:	6873      	ldr	r3, [r6, #4]
 800c4fc:	3b01      	subs	r3, #1
 800c4fe:	d503      	bpl.n	800c508 <__sfp+0x28>
 800c500:	6833      	ldr	r3, [r6, #0]
 800c502:	b133      	cbz	r3, 800c512 <__sfp+0x32>
 800c504:	6836      	ldr	r6, [r6, #0]
 800c506:	e7f7      	b.n	800c4f8 <__sfp+0x18>
 800c508:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c50c:	b17d      	cbz	r5, 800c52e <__sfp+0x4e>
 800c50e:	3468      	adds	r4, #104	; 0x68
 800c510:	e7f4      	b.n	800c4fc <__sfp+0x1c>
 800c512:	2104      	movs	r1, #4
 800c514:	4638      	mov	r0, r7
 800c516:	f7ff ff79 	bl	800c40c <__sfmoreglue>
 800c51a:	4604      	mov	r4, r0
 800c51c:	6030      	str	r0, [r6, #0]
 800c51e:	2800      	cmp	r0, #0
 800c520:	d1f0      	bne.n	800c504 <__sfp+0x24>
 800c522:	f7ff ff8f 	bl	800c444 <__sfp_lock_release>
 800c526:	230c      	movs	r3, #12
 800c528:	603b      	str	r3, [r7, #0]
 800c52a:	4620      	mov	r0, r4
 800c52c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c52e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c532:	81e3      	strh	r3, [r4, #14]
 800c534:	2301      	movs	r3, #1
 800c536:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c53a:	81a3      	strh	r3, [r4, #12]
 800c53c:	6665      	str	r5, [r4, #100]	; 0x64
 800c53e:	f7ff f8ff 	bl	800b740 <__retarget_lock_init_recursive>
 800c542:	f7ff ff7f 	bl	800c444 <__sfp_lock_release>
 800c546:	6025      	str	r5, [r4, #0]
 800c548:	60a5      	str	r5, [r4, #8]
 800c54a:	6065      	str	r5, [r4, #4]
 800c54c:	6125      	str	r5, [r4, #16]
 800c54e:	6165      	str	r5, [r4, #20]
 800c550:	61a5      	str	r5, [r4, #24]
 800c552:	2208      	movs	r2, #8
 800c554:	4629      	mov	r1, r5
 800c556:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c55a:	f7ff fb2b 	bl	800bbb4 <memset>
 800c55e:	6365      	str	r5, [r4, #52]	; 0x34
 800c560:	63a5      	str	r5, [r4, #56]	; 0x38
 800c562:	64a5      	str	r5, [r4, #72]	; 0x48
 800c564:	64e5      	str	r5, [r4, #76]	; 0x4c
 800c566:	e7e0      	b.n	800c52a <__sfp+0x4a>
 800c568:	0800dee8 	.word	0x0800dee8

0800c56c <_malloc_trim_r>:
 800c56c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c570:	4689      	mov	r9, r1
 800c572:	4f25      	ldr	r7, [pc, #148]	; (800c608 <_malloc_trim_r+0x9c>)
 800c574:	4606      	mov	r6, r0
 800c576:	f7ff fb25 	bl	800bbc4 <__malloc_lock>
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800c614 <_malloc_trim_r+0xa8>
 800c580:	685d      	ldr	r5, [r3, #4]
 800c582:	f1a8 0411 	sub.w	r4, r8, #17
 800c586:	f025 0503 	bic.w	r5, r5, #3
 800c58a:	eba4 0409 	sub.w	r4, r4, r9
 800c58e:	442c      	add	r4, r5
 800c590:	fbb4 f4f8 	udiv	r4, r4, r8
 800c594:	3c01      	subs	r4, #1
 800c596:	fb08 f404 	mul.w	r4, r8, r4
 800c59a:	4544      	cmp	r4, r8
 800c59c:	da05      	bge.n	800c5aa <_malloc_trim_r+0x3e>
 800c59e:	4630      	mov	r0, r6
 800c5a0:	f7ff fb16 	bl	800bbd0 <__malloc_unlock>
 800c5a4:	2000      	movs	r0, #0
 800c5a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5aa:	2100      	movs	r1, #0
 800c5ac:	4630      	mov	r0, r6
 800c5ae:	f7ff fce7 	bl	800bf80 <_sbrk_r>
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	442b      	add	r3, r5
 800c5b6:	4298      	cmp	r0, r3
 800c5b8:	d1f1      	bne.n	800c59e <_malloc_trim_r+0x32>
 800c5ba:	4261      	negs	r1, r4
 800c5bc:	4630      	mov	r0, r6
 800c5be:	f7ff fcdf 	bl	800bf80 <_sbrk_r>
 800c5c2:	3001      	adds	r0, #1
 800c5c4:	d110      	bne.n	800c5e8 <_malloc_trim_r+0x7c>
 800c5c6:	2100      	movs	r1, #0
 800c5c8:	4630      	mov	r0, r6
 800c5ca:	f7ff fcd9 	bl	800bf80 <_sbrk_r>
 800c5ce:	68ba      	ldr	r2, [r7, #8]
 800c5d0:	1a83      	subs	r3, r0, r2
 800c5d2:	2b0f      	cmp	r3, #15
 800c5d4:	dde3      	ble.n	800c59e <_malloc_trim_r+0x32>
 800c5d6:	490d      	ldr	r1, [pc, #52]	; (800c60c <_malloc_trim_r+0xa0>)
 800c5d8:	f043 0301 	orr.w	r3, r3, #1
 800c5dc:	6809      	ldr	r1, [r1, #0]
 800c5de:	6053      	str	r3, [r2, #4]
 800c5e0:	1a40      	subs	r0, r0, r1
 800c5e2:	490b      	ldr	r1, [pc, #44]	; (800c610 <_malloc_trim_r+0xa4>)
 800c5e4:	6008      	str	r0, [r1, #0]
 800c5e6:	e7da      	b.n	800c59e <_malloc_trim_r+0x32>
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	4a09      	ldr	r2, [pc, #36]	; (800c610 <_malloc_trim_r+0xa4>)
 800c5ec:	1b2d      	subs	r5, r5, r4
 800c5ee:	f045 0501 	orr.w	r5, r5, #1
 800c5f2:	605d      	str	r5, [r3, #4]
 800c5f4:	6813      	ldr	r3, [r2, #0]
 800c5f6:	4630      	mov	r0, r6
 800c5f8:	1b1c      	subs	r4, r3, r4
 800c5fa:	6014      	str	r4, [r2, #0]
 800c5fc:	f7ff fae8 	bl	800bbd0 <__malloc_unlock>
 800c600:	2001      	movs	r0, #1
 800c602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c606:	bf00      	nop
 800c608:	20000110 	.word	0x20000110
 800c60c:	20000518 	.word	0x20000518
 800c610:	2000055c 	.word	0x2000055c
 800c614:	00000080 	.word	0x00000080

0800c618 <_free_r>:
 800c618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c61c:	4604      	mov	r4, r0
 800c61e:	4688      	mov	r8, r1
 800c620:	2900      	cmp	r1, #0
 800c622:	f000 80ab 	beq.w	800c77c <_free_r+0x164>
 800c626:	f7ff facd 	bl	800bbc4 <__malloc_lock>
 800c62a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800c62e:	4d54      	ldr	r5, [pc, #336]	; (800c780 <_free_r+0x168>)
 800c630:	f022 0001 	bic.w	r0, r2, #1
 800c634:	f1a8 0308 	sub.w	r3, r8, #8
 800c638:	181f      	adds	r7, r3, r0
 800c63a:	68a9      	ldr	r1, [r5, #8]
 800c63c:	687e      	ldr	r6, [r7, #4]
 800c63e:	428f      	cmp	r7, r1
 800c640:	f026 0603 	bic.w	r6, r6, #3
 800c644:	f002 0201 	and.w	r2, r2, #1
 800c648:	d11b      	bne.n	800c682 <_free_r+0x6a>
 800c64a:	4430      	add	r0, r6
 800c64c:	b93a      	cbnz	r2, 800c65e <_free_r+0x46>
 800c64e:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800c652:	1a9b      	subs	r3, r3, r2
 800c654:	6899      	ldr	r1, [r3, #8]
 800c656:	4410      	add	r0, r2
 800c658:	68da      	ldr	r2, [r3, #12]
 800c65a:	60ca      	str	r2, [r1, #12]
 800c65c:	6091      	str	r1, [r2, #8]
 800c65e:	f040 0201 	orr.w	r2, r0, #1
 800c662:	605a      	str	r2, [r3, #4]
 800c664:	60ab      	str	r3, [r5, #8]
 800c666:	4b47      	ldr	r3, [pc, #284]	; (800c784 <_free_r+0x16c>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	4298      	cmp	r0, r3
 800c66c:	d304      	bcc.n	800c678 <_free_r+0x60>
 800c66e:	4b46      	ldr	r3, [pc, #280]	; (800c788 <_free_r+0x170>)
 800c670:	4620      	mov	r0, r4
 800c672:	6819      	ldr	r1, [r3, #0]
 800c674:	f7ff ff7a 	bl	800c56c <_malloc_trim_r>
 800c678:	4620      	mov	r0, r4
 800c67a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c67e:	f7ff baa7 	b.w	800bbd0 <__malloc_unlock>
 800c682:	607e      	str	r6, [r7, #4]
 800c684:	2a00      	cmp	r2, #0
 800c686:	d139      	bne.n	800c6fc <_free_r+0xe4>
 800c688:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800c68c:	f105 0e08 	add.w	lr, r5, #8
 800c690:	1a5b      	subs	r3, r3, r1
 800c692:	4408      	add	r0, r1
 800c694:	6899      	ldr	r1, [r3, #8]
 800c696:	4571      	cmp	r1, lr
 800c698:	d032      	beq.n	800c700 <_free_r+0xe8>
 800c69a:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800c69e:	f8c1 e00c 	str.w	lr, [r1, #12]
 800c6a2:	f8ce 1008 	str.w	r1, [lr, #8]
 800c6a6:	19b9      	adds	r1, r7, r6
 800c6a8:	6849      	ldr	r1, [r1, #4]
 800c6aa:	07c9      	lsls	r1, r1, #31
 800c6ac:	d40a      	bmi.n	800c6c4 <_free_r+0xac>
 800c6ae:	4430      	add	r0, r6
 800c6b0:	68b9      	ldr	r1, [r7, #8]
 800c6b2:	bb3a      	cbnz	r2, 800c704 <_free_r+0xec>
 800c6b4:	4e35      	ldr	r6, [pc, #212]	; (800c78c <_free_r+0x174>)
 800c6b6:	42b1      	cmp	r1, r6
 800c6b8:	d124      	bne.n	800c704 <_free_r+0xec>
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	616b      	str	r3, [r5, #20]
 800c6be:	612b      	str	r3, [r5, #16]
 800c6c0:	60d9      	str	r1, [r3, #12]
 800c6c2:	6099      	str	r1, [r3, #8]
 800c6c4:	f040 0101 	orr.w	r1, r0, #1
 800c6c8:	6059      	str	r1, [r3, #4]
 800c6ca:	5018      	str	r0, [r3, r0]
 800c6cc:	2a00      	cmp	r2, #0
 800c6ce:	d1d3      	bne.n	800c678 <_free_r+0x60>
 800c6d0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800c6d4:	d21a      	bcs.n	800c70c <_free_r+0xf4>
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	08c0      	lsrs	r0, r0, #3
 800c6da:	1081      	asrs	r1, r0, #2
 800c6dc:	408a      	lsls	r2, r1
 800c6de:	6869      	ldr	r1, [r5, #4]
 800c6e0:	3001      	adds	r0, #1
 800c6e2:	430a      	orrs	r2, r1
 800c6e4:	606a      	str	r2, [r5, #4]
 800c6e6:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800c6ea:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800c6ee:	3a08      	subs	r2, #8
 800c6f0:	60da      	str	r2, [r3, #12]
 800c6f2:	6099      	str	r1, [r3, #8]
 800c6f4:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800c6f8:	60cb      	str	r3, [r1, #12]
 800c6fa:	e7bd      	b.n	800c678 <_free_r+0x60>
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	e7d2      	b.n	800c6a6 <_free_r+0x8e>
 800c700:	2201      	movs	r2, #1
 800c702:	e7d0      	b.n	800c6a6 <_free_r+0x8e>
 800c704:	68fe      	ldr	r6, [r7, #12]
 800c706:	60ce      	str	r6, [r1, #12]
 800c708:	60b1      	str	r1, [r6, #8]
 800c70a:	e7db      	b.n	800c6c4 <_free_r+0xac>
 800c70c:	0a42      	lsrs	r2, r0, #9
 800c70e:	2a04      	cmp	r2, #4
 800c710:	d813      	bhi.n	800c73a <_free_r+0x122>
 800c712:	0982      	lsrs	r2, r0, #6
 800c714:	3238      	adds	r2, #56	; 0x38
 800c716:	1c51      	adds	r1, r2, #1
 800c718:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800c71c:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800c720:	428e      	cmp	r6, r1
 800c722:	d124      	bne.n	800c76e <_free_r+0x156>
 800c724:	2001      	movs	r0, #1
 800c726:	1092      	asrs	r2, r2, #2
 800c728:	fa00 f202 	lsl.w	r2, r0, r2
 800c72c:	6868      	ldr	r0, [r5, #4]
 800c72e:	4302      	orrs	r2, r0
 800c730:	606a      	str	r2, [r5, #4]
 800c732:	60de      	str	r6, [r3, #12]
 800c734:	6099      	str	r1, [r3, #8]
 800c736:	60b3      	str	r3, [r6, #8]
 800c738:	e7de      	b.n	800c6f8 <_free_r+0xe0>
 800c73a:	2a14      	cmp	r2, #20
 800c73c:	d801      	bhi.n	800c742 <_free_r+0x12a>
 800c73e:	325b      	adds	r2, #91	; 0x5b
 800c740:	e7e9      	b.n	800c716 <_free_r+0xfe>
 800c742:	2a54      	cmp	r2, #84	; 0x54
 800c744:	d802      	bhi.n	800c74c <_free_r+0x134>
 800c746:	0b02      	lsrs	r2, r0, #12
 800c748:	326e      	adds	r2, #110	; 0x6e
 800c74a:	e7e4      	b.n	800c716 <_free_r+0xfe>
 800c74c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800c750:	d802      	bhi.n	800c758 <_free_r+0x140>
 800c752:	0bc2      	lsrs	r2, r0, #15
 800c754:	3277      	adds	r2, #119	; 0x77
 800c756:	e7de      	b.n	800c716 <_free_r+0xfe>
 800c758:	f240 5154 	movw	r1, #1364	; 0x554
 800c75c:	428a      	cmp	r2, r1
 800c75e:	bf9a      	itte	ls
 800c760:	0c82      	lsrls	r2, r0, #18
 800c762:	327c      	addls	r2, #124	; 0x7c
 800c764:	227e      	movhi	r2, #126	; 0x7e
 800c766:	e7d6      	b.n	800c716 <_free_r+0xfe>
 800c768:	6889      	ldr	r1, [r1, #8]
 800c76a:	428e      	cmp	r6, r1
 800c76c:	d004      	beq.n	800c778 <_free_r+0x160>
 800c76e:	684a      	ldr	r2, [r1, #4]
 800c770:	f022 0203 	bic.w	r2, r2, #3
 800c774:	4290      	cmp	r0, r2
 800c776:	d3f7      	bcc.n	800c768 <_free_r+0x150>
 800c778:	68ce      	ldr	r6, [r1, #12]
 800c77a:	e7da      	b.n	800c732 <_free_r+0x11a>
 800c77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c780:	20000110 	.word	0x20000110
 800c784:	2000051c 	.word	0x2000051c
 800c788:	2000058c 	.word	0x2000058c
 800c78c:	20000118 	.word	0x20000118

0800c790 <_fwalk_reent>:
 800c790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c794:	4680      	mov	r8, r0
 800c796:	4689      	mov	r9, r1
 800c798:	2600      	movs	r6, #0
 800c79a:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 800c79e:	b914      	cbnz	r4, 800c7a6 <_fwalk_reent+0x16>
 800c7a0:	4630      	mov	r0, r6
 800c7a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7a6:	68a5      	ldr	r5, [r4, #8]
 800c7a8:	6867      	ldr	r7, [r4, #4]
 800c7aa:	3f01      	subs	r7, #1
 800c7ac:	d501      	bpl.n	800c7b2 <_fwalk_reent+0x22>
 800c7ae:	6824      	ldr	r4, [r4, #0]
 800c7b0:	e7f5      	b.n	800c79e <_fwalk_reent+0xe>
 800c7b2:	89ab      	ldrh	r3, [r5, #12]
 800c7b4:	2b01      	cmp	r3, #1
 800c7b6:	d907      	bls.n	800c7c8 <_fwalk_reent+0x38>
 800c7b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c7bc:	3301      	adds	r3, #1
 800c7be:	d003      	beq.n	800c7c8 <_fwalk_reent+0x38>
 800c7c0:	4629      	mov	r1, r5
 800c7c2:	4640      	mov	r0, r8
 800c7c4:	47c8      	blx	r9
 800c7c6:	4306      	orrs	r6, r0
 800c7c8:	3568      	adds	r5, #104	; 0x68
 800c7ca:	e7ee      	b.n	800c7aa <_fwalk_reent+0x1a>

0800c7cc <__swhatbuf_r>:
 800c7cc:	b570      	push	{r4, r5, r6, lr}
 800c7ce:	460e      	mov	r6, r1
 800c7d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7d4:	b090      	sub	sp, #64	; 0x40
 800c7d6:	2900      	cmp	r1, #0
 800c7d8:	4614      	mov	r4, r2
 800c7da:	461d      	mov	r5, r3
 800c7dc:	da09      	bge.n	800c7f2 <__swhatbuf_r+0x26>
 800c7de:	2200      	movs	r2, #0
 800c7e0:	89b3      	ldrh	r3, [r6, #12]
 800c7e2:	602a      	str	r2, [r5, #0]
 800c7e4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c7e8:	d116      	bne.n	800c818 <__swhatbuf_r+0x4c>
 800c7ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7ee:	6023      	str	r3, [r4, #0]
 800c7f0:	e015      	b.n	800c81e <__swhatbuf_r+0x52>
 800c7f2:	aa01      	add	r2, sp, #4
 800c7f4:	f000 f930 	bl	800ca58 <_fstat_r>
 800c7f8:	2800      	cmp	r0, #0
 800c7fa:	dbf0      	blt.n	800c7de <__swhatbuf_r+0x12>
 800c7fc:	9a02      	ldr	r2, [sp, #8]
 800c7fe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c802:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c806:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c80a:	425a      	negs	r2, r3
 800c80c:	415a      	adcs	r2, r3
 800c80e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c812:	602a      	str	r2, [r5, #0]
 800c814:	6023      	str	r3, [r4, #0]
 800c816:	e002      	b.n	800c81e <__swhatbuf_r+0x52>
 800c818:	2340      	movs	r3, #64	; 0x40
 800c81a:	4610      	mov	r0, r2
 800c81c:	6023      	str	r3, [r4, #0]
 800c81e:	b010      	add	sp, #64	; 0x40
 800c820:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c824 <__smakebuf_r>:
 800c824:	898b      	ldrh	r3, [r1, #12]
 800c826:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c828:	079d      	lsls	r5, r3, #30
 800c82a:	4606      	mov	r6, r0
 800c82c:	460c      	mov	r4, r1
 800c82e:	d507      	bpl.n	800c840 <__smakebuf_r+0x1c>
 800c830:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c834:	6023      	str	r3, [r4, #0]
 800c836:	6123      	str	r3, [r4, #16]
 800c838:	2301      	movs	r3, #1
 800c83a:	6163      	str	r3, [r4, #20]
 800c83c:	b002      	add	sp, #8
 800c83e:	bd70      	pop	{r4, r5, r6, pc}
 800c840:	ab01      	add	r3, sp, #4
 800c842:	466a      	mov	r2, sp
 800c844:	f7ff ffc2 	bl	800c7cc <__swhatbuf_r>
 800c848:	9900      	ldr	r1, [sp, #0]
 800c84a:	4605      	mov	r5, r0
 800c84c:	4630      	mov	r0, r6
 800c84e:	f7fe ff8b 	bl	800b768 <_malloc_r>
 800c852:	b948      	cbnz	r0, 800c868 <__smakebuf_r+0x44>
 800c854:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c858:	059a      	lsls	r2, r3, #22
 800c85a:	d4ef      	bmi.n	800c83c <__smakebuf_r+0x18>
 800c85c:	f023 0303 	bic.w	r3, r3, #3
 800c860:	f043 0302 	orr.w	r3, r3, #2
 800c864:	81a3      	strh	r3, [r4, #12]
 800c866:	e7e3      	b.n	800c830 <__smakebuf_r+0xc>
 800c868:	4b0d      	ldr	r3, [pc, #52]	; (800c8a0 <__smakebuf_r+0x7c>)
 800c86a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c86c:	89a3      	ldrh	r3, [r4, #12]
 800c86e:	6020      	str	r0, [r4, #0]
 800c870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c874:	81a3      	strh	r3, [r4, #12]
 800c876:	9b00      	ldr	r3, [sp, #0]
 800c878:	6120      	str	r0, [r4, #16]
 800c87a:	6163      	str	r3, [r4, #20]
 800c87c:	9b01      	ldr	r3, [sp, #4]
 800c87e:	b15b      	cbz	r3, 800c898 <__smakebuf_r+0x74>
 800c880:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c884:	4630      	mov	r0, r6
 800c886:	f000 f8f9 	bl	800ca7c <_isatty_r>
 800c88a:	b128      	cbz	r0, 800c898 <__smakebuf_r+0x74>
 800c88c:	89a3      	ldrh	r3, [r4, #12]
 800c88e:	f023 0303 	bic.w	r3, r3, #3
 800c892:	f043 0301 	orr.w	r3, r3, #1
 800c896:	81a3      	strh	r3, [r4, #12]
 800c898:	89a3      	ldrh	r3, [r4, #12]
 800c89a:	431d      	orrs	r5, r3
 800c89c:	81a5      	strh	r5, [r4, #12]
 800c89e:	e7cd      	b.n	800c83c <__smakebuf_r+0x18>
 800c8a0:	0800c3b9 	.word	0x0800c3b9

0800c8a4 <memmove>:
 800c8a4:	4288      	cmp	r0, r1
 800c8a6:	b510      	push	{r4, lr}
 800c8a8:	eb01 0302 	add.w	r3, r1, r2
 800c8ac:	d803      	bhi.n	800c8b6 <memmove+0x12>
 800c8ae:	1e42      	subs	r2, r0, #1
 800c8b0:	4299      	cmp	r1, r3
 800c8b2:	d10c      	bne.n	800c8ce <memmove+0x2a>
 800c8b4:	bd10      	pop	{r4, pc}
 800c8b6:	4298      	cmp	r0, r3
 800c8b8:	d2f9      	bcs.n	800c8ae <memmove+0xa>
 800c8ba:	1881      	adds	r1, r0, r2
 800c8bc:	1ad2      	subs	r2, r2, r3
 800c8be:	42d3      	cmn	r3, r2
 800c8c0:	d100      	bne.n	800c8c4 <memmove+0x20>
 800c8c2:	bd10      	pop	{r4, pc}
 800c8c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c8c8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c8cc:	e7f7      	b.n	800c8be <memmove+0x1a>
 800c8ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8d2:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c8d6:	e7eb      	b.n	800c8b0 <memmove+0xc>

0800c8d8 <__sread>:
 800c8d8:	b510      	push	{r4, lr}
 800c8da:	460c      	mov	r4, r1
 800c8dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8e0:	f000 f8ee 	bl	800cac0 <_read_r>
 800c8e4:	2800      	cmp	r0, #0
 800c8e6:	bfab      	itete	ge
 800c8e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c8ea:	89a3      	ldrhlt	r3, [r4, #12]
 800c8ec:	181b      	addge	r3, r3, r0
 800c8ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c8f2:	bfac      	ite	ge
 800c8f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c8f6:	81a3      	strhlt	r3, [r4, #12]
 800c8f8:	bd10      	pop	{r4, pc}

0800c8fa <__swrite>:
 800c8fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8fe:	461f      	mov	r7, r3
 800c900:	898b      	ldrh	r3, [r1, #12]
 800c902:	4605      	mov	r5, r0
 800c904:	05db      	lsls	r3, r3, #23
 800c906:	460c      	mov	r4, r1
 800c908:	4616      	mov	r6, r2
 800c90a:	d505      	bpl.n	800c918 <__swrite+0x1e>
 800c90c:	2302      	movs	r3, #2
 800c90e:	2200      	movs	r2, #0
 800c910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c914:	f000 f8c2 	bl	800ca9c <_lseek_r>
 800c918:	89a3      	ldrh	r3, [r4, #12]
 800c91a:	4632      	mov	r2, r6
 800c91c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c920:	81a3      	strh	r3, [r4, #12]
 800c922:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c926:	463b      	mov	r3, r7
 800c928:	4628      	mov	r0, r5
 800c92a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c92e:	f7ff bbf5 	b.w	800c11c <_write_r>

0800c932 <__sseek>:
 800c932:	b510      	push	{r4, lr}
 800c934:	460c      	mov	r4, r1
 800c936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c93a:	f000 f8af 	bl	800ca9c <_lseek_r>
 800c93e:	1c43      	adds	r3, r0, #1
 800c940:	89a3      	ldrh	r3, [r4, #12]
 800c942:	bf15      	itete	ne
 800c944:	6560      	strne	r0, [r4, #84]	; 0x54
 800c946:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c94a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c94e:	81a3      	strheq	r3, [r4, #12]
 800c950:	bf18      	it	ne
 800c952:	81a3      	strhne	r3, [r4, #12]
 800c954:	bd10      	pop	{r4, pc}

0800c956 <__sclose>:
 800c956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c95a:	f000 b801 	b.w	800c960 <_close_r>
	...

0800c960 <_close_r>:
 800c960:	b538      	push	{r3, r4, r5, lr}
 800c962:	2300      	movs	r3, #0
 800c964:	4c05      	ldr	r4, [pc, #20]	; (800c97c <_close_r+0x1c>)
 800c966:	4605      	mov	r5, r0
 800c968:	4608      	mov	r0, r1
 800c96a:	6023      	str	r3, [r4, #0]
 800c96c:	f000 f8ba 	bl	800cae4 <_close>
 800c970:	1c43      	adds	r3, r0, #1
 800c972:	d102      	bne.n	800c97a <_close_r+0x1a>
 800c974:	6823      	ldr	r3, [r4, #0]
 800c976:	b103      	cbz	r3, 800c97a <_close_r+0x1a>
 800c978:	602b      	str	r3, [r5, #0]
 800c97a:	bd38      	pop	{r3, r4, r5, pc}
 800c97c:	200005a0 	.word	0x200005a0

0800c980 <_fclose_r>:
 800c980:	b570      	push	{r4, r5, r6, lr}
 800c982:	4605      	mov	r5, r0
 800c984:	460c      	mov	r4, r1
 800c986:	b911      	cbnz	r1, 800c98e <_fclose_r+0xe>
 800c988:	2600      	movs	r6, #0
 800c98a:	4630      	mov	r0, r6
 800c98c:	bd70      	pop	{r4, r5, r6, pc}
 800c98e:	b118      	cbz	r0, 800c998 <_fclose_r+0x18>
 800c990:	6983      	ldr	r3, [r0, #24]
 800c992:	b90b      	cbnz	r3, 800c998 <_fclose_r+0x18>
 800c994:	f7ff fd68 	bl	800c468 <__sinit>
 800c998:	4b2c      	ldr	r3, [pc, #176]	; (800ca4c <_fclose_r+0xcc>)
 800c99a:	429c      	cmp	r4, r3
 800c99c:	d114      	bne.n	800c9c8 <_fclose_r+0x48>
 800c99e:	686c      	ldr	r4, [r5, #4]
 800c9a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9a2:	07d8      	lsls	r0, r3, #31
 800c9a4:	d405      	bmi.n	800c9b2 <_fclose_r+0x32>
 800c9a6:	89a3      	ldrh	r3, [r4, #12]
 800c9a8:	0599      	lsls	r1, r3, #22
 800c9aa:	d402      	bmi.n	800c9b2 <_fclose_r+0x32>
 800c9ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9ae:	f7fe fec9 	bl	800b744 <__retarget_lock_acquire_recursive>
 800c9b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9b6:	b98b      	cbnz	r3, 800c9dc <_fclose_r+0x5c>
 800c9b8:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800c9ba:	f016 0601 	ands.w	r6, r6, #1
 800c9be:	d1e3      	bne.n	800c988 <_fclose_r+0x8>
 800c9c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9c2:	f7fe fec0 	bl	800b746 <__retarget_lock_release_recursive>
 800c9c6:	e7e0      	b.n	800c98a <_fclose_r+0xa>
 800c9c8:	4b21      	ldr	r3, [pc, #132]	; (800ca50 <_fclose_r+0xd0>)
 800c9ca:	429c      	cmp	r4, r3
 800c9cc:	d101      	bne.n	800c9d2 <_fclose_r+0x52>
 800c9ce:	68ac      	ldr	r4, [r5, #8]
 800c9d0:	e7e6      	b.n	800c9a0 <_fclose_r+0x20>
 800c9d2:	4b20      	ldr	r3, [pc, #128]	; (800ca54 <_fclose_r+0xd4>)
 800c9d4:	429c      	cmp	r4, r3
 800c9d6:	bf08      	it	eq
 800c9d8:	68ec      	ldreq	r4, [r5, #12]
 800c9da:	e7e1      	b.n	800c9a0 <_fclose_r+0x20>
 800c9dc:	4621      	mov	r1, r4
 800c9de:	4628      	mov	r0, r5
 800c9e0:	f7ff fc1c 	bl	800c21c <__sflush_r>
 800c9e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c9e6:	4606      	mov	r6, r0
 800c9e8:	b133      	cbz	r3, 800c9f8 <_fclose_r+0x78>
 800c9ea:	6a21      	ldr	r1, [r4, #32]
 800c9ec:	4628      	mov	r0, r5
 800c9ee:	4798      	blx	r3
 800c9f0:	2800      	cmp	r0, #0
 800c9f2:	bfb8      	it	lt
 800c9f4:	f04f 36ff 	movlt.w	r6, #4294967295
 800c9f8:	89a3      	ldrh	r3, [r4, #12]
 800c9fa:	061a      	lsls	r2, r3, #24
 800c9fc:	d503      	bpl.n	800ca06 <_fclose_r+0x86>
 800c9fe:	6921      	ldr	r1, [r4, #16]
 800ca00:	4628      	mov	r0, r5
 800ca02:	f7ff fe09 	bl	800c618 <_free_r>
 800ca06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca08:	b141      	cbz	r1, 800ca1c <_fclose_r+0x9c>
 800ca0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca0e:	4299      	cmp	r1, r3
 800ca10:	d002      	beq.n	800ca18 <_fclose_r+0x98>
 800ca12:	4628      	mov	r0, r5
 800ca14:	f7ff fe00 	bl	800c618 <_free_r>
 800ca18:	2300      	movs	r3, #0
 800ca1a:	6363      	str	r3, [r4, #52]	; 0x34
 800ca1c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ca1e:	b121      	cbz	r1, 800ca2a <_fclose_r+0xaa>
 800ca20:	4628      	mov	r0, r5
 800ca22:	f7ff fdf9 	bl	800c618 <_free_r>
 800ca26:	2300      	movs	r3, #0
 800ca28:	64a3      	str	r3, [r4, #72]	; 0x48
 800ca2a:	f7ff fd05 	bl	800c438 <__sfp_lock_acquire>
 800ca2e:	2300      	movs	r3, #0
 800ca30:	81a3      	strh	r3, [r4, #12]
 800ca32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca34:	07db      	lsls	r3, r3, #31
 800ca36:	d402      	bmi.n	800ca3e <_fclose_r+0xbe>
 800ca38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca3a:	f7fe fe84 	bl	800b746 <__retarget_lock_release_recursive>
 800ca3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca40:	f7fe fe7f 	bl	800b742 <__retarget_lock_close_recursive>
 800ca44:	f7ff fcfe 	bl	800c444 <__sfp_lock_release>
 800ca48:	e79f      	b.n	800c98a <_fclose_r+0xa>
 800ca4a:	bf00      	nop
 800ca4c:	0800df0c 	.word	0x0800df0c
 800ca50:	0800df2c 	.word	0x0800df2c
 800ca54:	0800deec 	.word	0x0800deec

0800ca58 <_fstat_r>:
 800ca58:	b538      	push	{r3, r4, r5, lr}
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	4c06      	ldr	r4, [pc, #24]	; (800ca78 <_fstat_r+0x20>)
 800ca5e:	4605      	mov	r5, r0
 800ca60:	4608      	mov	r0, r1
 800ca62:	4611      	mov	r1, r2
 800ca64:	6023      	str	r3, [r4, #0]
 800ca66:	f000 f845 	bl	800caf4 <_fstat>
 800ca6a:	1c43      	adds	r3, r0, #1
 800ca6c:	d102      	bne.n	800ca74 <_fstat_r+0x1c>
 800ca6e:	6823      	ldr	r3, [r4, #0]
 800ca70:	b103      	cbz	r3, 800ca74 <_fstat_r+0x1c>
 800ca72:	602b      	str	r3, [r5, #0]
 800ca74:	bd38      	pop	{r3, r4, r5, pc}
 800ca76:	bf00      	nop
 800ca78:	200005a0 	.word	0x200005a0

0800ca7c <_isatty_r>:
 800ca7c:	b538      	push	{r3, r4, r5, lr}
 800ca7e:	2300      	movs	r3, #0
 800ca80:	4c05      	ldr	r4, [pc, #20]	; (800ca98 <_isatty_r+0x1c>)
 800ca82:	4605      	mov	r5, r0
 800ca84:	4608      	mov	r0, r1
 800ca86:	6023      	str	r3, [r4, #0]
 800ca88:	f000 f844 	bl	800cb14 <_isatty>
 800ca8c:	1c43      	adds	r3, r0, #1
 800ca8e:	d102      	bne.n	800ca96 <_isatty_r+0x1a>
 800ca90:	6823      	ldr	r3, [r4, #0]
 800ca92:	b103      	cbz	r3, 800ca96 <_isatty_r+0x1a>
 800ca94:	602b      	str	r3, [r5, #0]
 800ca96:	bd38      	pop	{r3, r4, r5, pc}
 800ca98:	200005a0 	.word	0x200005a0

0800ca9c <_lseek_r>:
 800ca9c:	b538      	push	{r3, r4, r5, lr}
 800ca9e:	4605      	mov	r5, r0
 800caa0:	4608      	mov	r0, r1
 800caa2:	4611      	mov	r1, r2
 800caa4:	2200      	movs	r2, #0
 800caa6:	4c05      	ldr	r4, [pc, #20]	; (800cabc <_lseek_r+0x20>)
 800caa8:	6022      	str	r2, [r4, #0]
 800caaa:	461a      	mov	r2, r3
 800caac:	f000 f842 	bl	800cb34 <_lseek>
 800cab0:	1c43      	adds	r3, r0, #1
 800cab2:	d102      	bne.n	800caba <_lseek_r+0x1e>
 800cab4:	6823      	ldr	r3, [r4, #0]
 800cab6:	b103      	cbz	r3, 800caba <_lseek_r+0x1e>
 800cab8:	602b      	str	r3, [r5, #0]
 800caba:	bd38      	pop	{r3, r4, r5, pc}
 800cabc:	200005a0 	.word	0x200005a0

0800cac0 <_read_r>:
 800cac0:	b538      	push	{r3, r4, r5, lr}
 800cac2:	4605      	mov	r5, r0
 800cac4:	4608      	mov	r0, r1
 800cac6:	4611      	mov	r1, r2
 800cac8:	2200      	movs	r2, #0
 800caca:	4c05      	ldr	r4, [pc, #20]	; (800cae0 <_read_r+0x20>)
 800cacc:	6022      	str	r2, [r4, #0]
 800cace:	461a      	mov	r2, r3
 800cad0:	f000 f838 	bl	800cb44 <_read>
 800cad4:	1c43      	adds	r3, r0, #1
 800cad6:	d102      	bne.n	800cade <_read_r+0x1e>
 800cad8:	6823      	ldr	r3, [r4, #0]
 800cada:	b103      	cbz	r3, 800cade <_read_r+0x1e>
 800cadc:	602b      	str	r3, [r5, #0]
 800cade:	bd38      	pop	{r3, r4, r5, pc}
 800cae0:	200005a0 	.word	0x200005a0

0800cae4 <_close>:
 800cae4:	2258      	movs	r2, #88	; 0x58
 800cae6:	4b02      	ldr	r3, [pc, #8]	; (800caf0 <_close+0xc>)
 800cae8:	f04f 30ff 	mov.w	r0, #4294967295
 800caec:	601a      	str	r2, [r3, #0]
 800caee:	4770      	bx	lr
 800caf0:	200005a0 	.word	0x200005a0

0800caf4 <_fstat>:
 800caf4:	2258      	movs	r2, #88	; 0x58
 800caf6:	4b02      	ldr	r3, [pc, #8]	; (800cb00 <_fstat+0xc>)
 800caf8:	f04f 30ff 	mov.w	r0, #4294967295
 800cafc:	601a      	str	r2, [r3, #0]
 800cafe:	4770      	bx	lr
 800cb00:	200005a0 	.word	0x200005a0

0800cb04 <_getpid>:
 800cb04:	2258      	movs	r2, #88	; 0x58
 800cb06:	4b02      	ldr	r3, [pc, #8]	; (800cb10 <_getpid+0xc>)
 800cb08:	f04f 30ff 	mov.w	r0, #4294967295
 800cb0c:	601a      	str	r2, [r3, #0]
 800cb0e:	4770      	bx	lr
 800cb10:	200005a0 	.word	0x200005a0

0800cb14 <_isatty>:
 800cb14:	2258      	movs	r2, #88	; 0x58
 800cb16:	4b02      	ldr	r3, [pc, #8]	; (800cb20 <_isatty+0xc>)
 800cb18:	2000      	movs	r0, #0
 800cb1a:	601a      	str	r2, [r3, #0]
 800cb1c:	4770      	bx	lr
 800cb1e:	bf00      	nop
 800cb20:	200005a0 	.word	0x200005a0

0800cb24 <_kill>:
 800cb24:	2258      	movs	r2, #88	; 0x58
 800cb26:	4b02      	ldr	r3, [pc, #8]	; (800cb30 <_kill+0xc>)
 800cb28:	f04f 30ff 	mov.w	r0, #4294967295
 800cb2c:	601a      	str	r2, [r3, #0]
 800cb2e:	4770      	bx	lr
 800cb30:	200005a0 	.word	0x200005a0

0800cb34 <_lseek>:
 800cb34:	2258      	movs	r2, #88	; 0x58
 800cb36:	4b02      	ldr	r3, [pc, #8]	; (800cb40 <_lseek+0xc>)
 800cb38:	f04f 30ff 	mov.w	r0, #4294967295
 800cb3c:	601a      	str	r2, [r3, #0]
 800cb3e:	4770      	bx	lr
 800cb40:	200005a0 	.word	0x200005a0

0800cb44 <_read>:
 800cb44:	2258      	movs	r2, #88	; 0x58
 800cb46:	4b02      	ldr	r3, [pc, #8]	; (800cb50 <_read+0xc>)
 800cb48:	f04f 30ff 	mov.w	r0, #4294967295
 800cb4c:	601a      	str	r2, [r3, #0]
 800cb4e:	4770      	bx	lr
 800cb50:	200005a0 	.word	0x200005a0

0800cb54 <_sbrk>:
 800cb54:	4b04      	ldr	r3, [pc, #16]	; (800cb68 <_sbrk+0x14>)
 800cb56:	4602      	mov	r2, r0
 800cb58:	6819      	ldr	r1, [r3, #0]
 800cb5a:	b909      	cbnz	r1, 800cb60 <_sbrk+0xc>
 800cb5c:	4903      	ldr	r1, [pc, #12]	; (800cb6c <_sbrk+0x18>)
 800cb5e:	6019      	str	r1, [r3, #0]
 800cb60:	6818      	ldr	r0, [r3, #0]
 800cb62:	4402      	add	r2, r0
 800cb64:	601a      	str	r2, [r3, #0]
 800cb66:	4770      	bx	lr
 800cb68:	20000590 	.word	0x20000590
 800cb6c:	200005a4 	.word	0x200005a4

0800cb70 <_write>:
 800cb70:	2258      	movs	r2, #88	; 0x58
 800cb72:	4b02      	ldr	r3, [pc, #8]	; (800cb7c <_write+0xc>)
 800cb74:	f04f 30ff 	mov.w	r0, #4294967295
 800cb78:	601a      	str	r2, [r3, #0]
 800cb7a:	4770      	bx	lr
 800cb7c:	200005a0 	.word	0x200005a0

0800cb80 <_exit>:
 800cb80:	e7fe      	b.n	800cb80 <_exit>
	...

0800cb84 <_init>:
 800cb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb86:	bf00      	nop
 800cb88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb8a:	bc08      	pop	{r3}
 800cb8c:	469e      	mov	lr, r3
 800cb8e:	4770      	bx	lr

0800cb90 <_fini>:
 800cb90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb92:	bf00      	nop
 800cb94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb96:	bc08      	pop	{r3}
 800cb98:	469e      	mov	lr, r3
 800cb9a:	4770      	bx	lr


ac_power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000232c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08002438  08002438  00012438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002508  08002508  00012508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002510  08002510  00012510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002514  08002514  00012514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000518  20000000  08002518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000005c  20000518  08002a30  00020518  2**2
                  ALLOC
  8 ._user_heap_stack 00000100  20000574  08002a30  00020574  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00020518  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c3b3  00000000  00000000  00020541  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003d6f  00000000  00000000  0003c8f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ae8  00000000  00000000  00040668  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009d0  00000000  00000000  00041150  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000065b3  00000000  00000000  00041b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004c28  00000000  00000000  000480d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004ccfb  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002c7c  00000000  00000000  0004cd78  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    000008b2  00000000  00000000  0004f9f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000003f  00000000  00000000  000502a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000518 	.word	0x20000518
 8000128:	00000000 	.word	0x00000000
 800012c:	08002420 	.word	0x08002420

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000051c 	.word	0x2000051c
 8000148:	08002420 	.word	0x08002420

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	60fb      	str	r3, [r7, #12]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000626:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800062a:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	791b      	ldrb	r3, [r3, #4]
 8000634:	021b      	lsls	r3, r3, #8
 8000636:	4313      	orrs	r3, r2
 8000638:	68fa      	ldr	r2, [r7, #12]
 800063a:	4313      	orrs	r3, r2
 800063c:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	68fa      	ldr	r2, [r7, #12]
 8000642:	605a      	str	r2, [r3, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
 800064a:	68fa      	ldr	r2, [r7, #12]
 800064c:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <ADC_Init+0xa0>)
 800064e:	4013      	ands	r3, r2
 8000650:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	68da      	ldr	r2, [r3, #12]
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	689b      	ldr	r3, [r3, #8]
 800065a:	431a      	orrs	r2, r3
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	795b      	ldrb	r3, [r3, #5]
 8000660:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 8000662:	4313      	orrs	r3, r2
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	4313      	orrs	r3, r2
 8000668:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	68fa      	ldr	r2, [r7, #12]
 800066e:	609a      	str	r2, [r3, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000674:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800067c:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	7c1b      	ldrb	r3, [r3, #16]
 8000682:	3b01      	subs	r3, #1
 8000684:	b2da      	uxtb	r2, r3
 8000686:	7afb      	ldrb	r3, [r7, #11]
 8000688:	4313      	orrs	r3, r2
 800068a:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
 800068c:	7afb      	ldrb	r3, [r7, #11]
 800068e:	051b      	lsls	r3, r3, #20
 8000690:	68fa      	ldr	r2, [r7, #12]
 8000692:	4313      	orrs	r3, r2
 8000694:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	68fa      	ldr	r2, [r7, #12]
 800069a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800069c:	bf00      	nop
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	fff1f7fd 	.word	0xfff1f7fd

080006ac <ADC_StructInit>:
  * @brief  Fills each ADC_InitStruct member with its default value.
  * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2200      	movs	r2, #0
 80006be:	711a      	strb	r2, [r3, #4]
  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2200      	movs	r2, #0
 80006c4:	715a      	strb	r2, [r3, #5]
  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  /* Initialize the ADC_NbrOfChannel member */
  ADC_InitStruct->ADC_NbrOfChannel = 1;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2201      	movs	r2, #1
 80006d6:	741a      	strb	r2, [r3, #16]
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr

080006e2 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80006e2:	b480      	push	{r7}
 80006e4:	b083      	sub	sp, #12
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
 80006ea:	460b      	mov	r3, r1
 80006ec:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006ee:	78fb      	ldrb	r3, [r7, #3]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d006      	beq.n	8000702 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	689b      	ldr	r3, [r3, #8]
 80006f8:	f043 0201 	orr.w	r2, r3, #1
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
  }
}
 8000700:	e005      	b.n	800070e <ADC_Cmd+0x2c>
    ADCx->CR2 &= CR2_ADON_Reset;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	689b      	ldr	r3, [r3, #8]
 8000706:	f023 0201 	bic.w	r2, r3, #1
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	609a      	str	r2, [r3, #8]
}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr

08000718 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	460b      	mov	r3, r1
 8000722:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000724:	78fb      	ldrb	r3, [r7, #3]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d006      	beq.n	8000738 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	689b      	ldr	r3, [r3, #8]
 800072e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= CR2_DMA_Reset;
  }
}
 8000736:	e005      	b.n	8000744 <ADC_DMACmd+0x2c>
    ADCx->CR2 &= CR2_DMA_Reset;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	689b      	ldr	r3, [r3, #8]
 800073c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	609a      	str	r2, [r3, #8]
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr

0800074e <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
 800074e:	b480      	push	{r7}
 8000750:	b083      	sub	sp, #12
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	689b      	ldr	r3, [r3, #8]
 800075a:	f043 0204 	orr.w	r2, r3, #4
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	609a      	str	r2, [r3, #8]
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <ADC_SoftwareStartConvCmd>:
  * @param  NewState: new state of the selected ADC software start conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000778:	78fb      	ldrb	r3, [r7, #3]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d006      	beq.n	800078c <ADC_SoftwareStartConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	689b      	ldr	r3, [r3, #8]
 8000782:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	609a      	str	r2, [r3, #8]
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
  }
}
 800078a:	e005      	b.n	8000798 <ADC_SoftwareStartConvCmd+0x2c>
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	f423 02a0 	bic.w	r2, r3, #5242880	; 0x500000
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	609a      	str	r2, [r3, #8]
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr

080007a2 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80007a2:	b480      	push	{r7}
 80007a4:	b085      	sub	sp, #20
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
 80007aa:	4608      	mov	r0, r1
 80007ac:	4611      	mov	r1, r2
 80007ae:	461a      	mov	r2, r3
 80007b0:	4603      	mov	r3, r0
 80007b2:	70fb      	strb	r3, [r7, #3]
 80007b4:	460b      	mov	r3, r1
 80007b6:	70bb      	strb	r3, [r7, #2]
 80007b8:	4613      	mov	r3, r2
 80007ba:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	2300      	movs	r3, #0
 80007c2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80007c4:	78fb      	ldrb	r3, [r7, #3]
 80007c6:	2b09      	cmp	r3, #9
 80007c8:	d923      	bls.n	8000812 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	68db      	ldr	r3, [r3, #12]
 80007ce:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 80007d0:	78fb      	ldrb	r3, [r7, #3]
 80007d2:	f1a3 020a 	sub.w	r2, r3, #10
 80007d6:	4613      	mov	r3, r2
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	4413      	add	r3, r2
 80007dc:	2207      	movs	r2, #7
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	43db      	mvns	r3, r3
 80007e8:	68fa      	ldr	r2, [r7, #12]
 80007ea:	4013      	ands	r3, r2
 80007ec:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80007ee:	7879      	ldrb	r1, [r7, #1]
 80007f0:	78fb      	ldrb	r3, [r7, #3]
 80007f2:	f1a3 020a 	sub.w	r2, r3, #10
 80007f6:	4613      	mov	r3, r2
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	4413      	add	r3, r2
 80007fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000800:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8000802:	68fa      	ldr	r2, [r7, #12]
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	4313      	orrs	r3, r2
 8000808:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	68fa      	ldr	r2, [r7, #12]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	e01e      	b.n	8000850 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	691b      	ldr	r3, [r3, #16]
 8000816:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 8000818:	78fa      	ldrb	r2, [r7, #3]
 800081a:	4613      	mov	r3, r2
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	4413      	add	r3, r2
 8000820:	2207      	movs	r2, #7
 8000822:	fa02 f303 	lsl.w	r3, r2, r3
 8000826:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	43db      	mvns	r3, r3
 800082c:	68fa      	ldr	r2, [r7, #12]
 800082e:	4013      	ands	r3, r2
 8000830:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000832:	7879      	ldrb	r1, [r7, #1]
 8000834:	78fa      	ldrb	r2, [r7, #3]
 8000836:	4613      	mov	r3, r2
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	4413      	add	r3, r2
 800083c:	fa01 f303 	lsl.w	r3, r1, r3
 8000840:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	4313      	orrs	r3, r2
 8000848:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	68fa      	ldr	r2, [r7, #12]
 800084e:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000850:	78bb      	ldrb	r3, [r7, #2]
 8000852:	2b06      	cmp	r3, #6
 8000854:	d821      	bhi.n	800089a <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800085a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 800085c:	78bb      	ldrb	r3, [r7, #2]
 800085e:	1e5a      	subs	r2, r3, #1
 8000860:	4613      	mov	r3, r2
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	4413      	add	r3, r2
 8000866:	221f      	movs	r2, #31
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	43db      	mvns	r3, r3
 8000872:	68fa      	ldr	r2, [r7, #12]
 8000874:	4013      	ands	r3, r2
 8000876:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000878:	78f9      	ldrb	r1, [r7, #3]
 800087a:	78bb      	ldrb	r3, [r7, #2]
 800087c:	1e5a      	subs	r2, r3, #1
 800087e:	4613      	mov	r3, r2
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	4413      	add	r3, r2
 8000884:	fa01 f303 	lsl.w	r3, r1, r3
 8000888:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800088a:	68fa      	ldr	r2, [r7, #12]
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	4313      	orrs	r3, r2
 8000890:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	68fa      	ldr	r2, [r7, #12]
 8000896:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000898:	e047      	b.n	800092a <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 800089a:	78bb      	ldrb	r3, [r7, #2]
 800089c:	2b0c      	cmp	r3, #12
 800089e:	d821      	bhi.n	80008e4 <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a4:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 80008a6:	78bb      	ldrb	r3, [r7, #2]
 80008a8:	1fda      	subs	r2, r3, #7
 80008aa:	4613      	mov	r3, r2
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	4413      	add	r3, r2
 80008b0:	221f      	movs	r2, #31
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	43db      	mvns	r3, r3
 80008bc:	68fa      	ldr	r2, [r7, #12]
 80008be:	4013      	ands	r3, r2
 80008c0:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 80008c2:	78f9      	ldrb	r1, [r7, #3]
 80008c4:	78bb      	ldrb	r3, [r7, #2]
 80008c6:	1fda      	subs	r2, r3, #7
 80008c8:	4613      	mov	r3, r2
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	4413      	add	r3, r2
 80008ce:	fa01 f303 	lsl.w	r3, r1, r3
 80008d2:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 80008d4:	68fa      	ldr	r2, [r7, #12]
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	4313      	orrs	r3, r2
 80008da:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80008e2:	e022      	b.n	800092a <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e8:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 80008ea:	78bb      	ldrb	r3, [r7, #2]
 80008ec:	f1a3 020d 	sub.w	r2, r3, #13
 80008f0:	4613      	mov	r3, r2
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	4413      	add	r3, r2
 80008f6:	221f      	movs	r2, #31
 80008f8:	fa02 f303 	lsl.w	r3, r2, r3
 80008fc:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	43db      	mvns	r3, r3
 8000902:	68fa      	ldr	r2, [r7, #12]
 8000904:	4013      	ands	r3, r2
 8000906:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000908:	78f9      	ldrb	r1, [r7, #3]
 800090a:	78bb      	ldrb	r3, [r7, #2]
 800090c:	f1a3 020d 	sub.w	r2, r3, #13
 8000910:	4613      	mov	r3, r2
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	4413      	add	r3, r2
 8000916:	fa01 f303 	lsl.w	r3, r1, r3
 800091a:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 800091c:	68fa      	ldr	r2, [r7, #12]
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	4313      	orrs	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800092a:	bf00      	nop
 800092c:	3714      	adds	r7, #20
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr

08000934 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800094e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000952:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	689a      	ldr	r2, [r3, #8]
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	6a1b      	ldr	r3, [r3, #32]
 800095c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	691b      	ldr	r3, [r3, #16]
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000962:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	695b      	ldr	r3, [r3, #20]
 8000968:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	699b      	ldr	r3, [r3, #24]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800096e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	69db      	ldr	r3, [r3, #28]
 8000974:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800097a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000980:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	4313      	orrs	r3, r2
 8000986:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	68da      	ldr	r2, [r3, #12]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685a      	ldr	r2, [r3, #4]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	60da      	str	r2, [r3, #12]
}
 80009a6:	bf00      	nop
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr

080009b0 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
/*-------------- Reset DMA init structure parameters values ------------------*/
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
  /* Initialize the DMA_MemoryBaseAddr member */
  DMA_InitStruct->DMA_MemoryBaseAddr = 0;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2200      	movs	r2, #0
 80009c2:	605a      	str	r2, [r3, #4]
  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2200      	movs	r2, #0
 80009ce:	60da      	str	r2, [r3, #12]
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2200      	movs	r2, #0
 80009da:	615a      	str	r2, [r3, #20]
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2200      	movs	r2, #0
 80009e6:	61da      	str	r2, [r3, #28]
  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2200      	movs	r2, #0
 80009ec:	621a      	str	r2, [r3, #32]
  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2200      	movs	r2, #0
 80009f2:	625a      	str	r2, [r3, #36]	; 0x24
  /* Initialize the DMA_M2M member */
  DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2200      	movs	r2, #0
 80009f8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr

08000a04 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000a10:	78fb      	ldrb	r3, [r7, #3]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d006      	beq.n	8000a24 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f043 0201 	orr.w	r2, r3, #1
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 8000a22:	e006      	b.n	8000a32 <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	6013      	str	r3, [r2, #0]
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr

08000a3c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b089      	sub	sp, #36	; 0x24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61bb      	str	r3, [r7, #24]
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	78db      	ldrb	r3, [r3, #3]
 8000a62:	f003 030f 	and.w	r3, r3, #15
 8000a66:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	78db      	ldrb	r3, [r3, #3]
 8000a6c:	f003 0310 	and.w	r3, r3, #16
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d005      	beq.n	8000a80 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	789b      	ldrb	r3, [r3, #2]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d044      	beq.n	8000b14 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000a90:	2300      	movs	r3, #0
 8000a92:	61bb      	str	r3, [r7, #24]
 8000a94:	e038      	b.n	8000b08 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000a96:	2201      	movs	r2, #1
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	881b      	ldrh	r3, [r3, #0]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d126      	bne.n	8000b02 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000aba:	220f      	movs	r2, #15
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	697a      	ldr	r2, [r7, #20]
 8000aca:	4013      	ands	r3, r2
 8000acc:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000ace:	69fa      	ldr	r2, [r7, #28]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	697a      	ldr	r2, [r7, #20]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	78db      	ldrb	r3, [r3, #3]
 8000ae0:	2b28      	cmp	r3, #40	; 0x28
 8000ae2:	d105      	bne.n	8000af0 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	409a      	lsls	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	615a      	str	r2, [r3, #20]
 8000aee:	e008      	b.n	8000b02 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	78db      	ldrb	r3, [r3, #3]
 8000af4:	2b48      	cmp	r3, #72	; 0x48
 8000af6:	d104      	bne.n	8000b02 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000af8:	2201      	movs	r2, #1
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	409a      	lsls	r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	3301      	adds	r3, #1
 8000b06:	61bb      	str	r3, [r7, #24]
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	2b07      	cmp	r3, #7
 8000b0c:	d9c3      	bls.n	8000a96 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	697a      	ldr	r2, [r7, #20]
 8000b12:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	2bff      	cmp	r3, #255	; 0xff
 8000b1a:	d946      	bls.n	8000baa <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000b22:	2300      	movs	r3, #0
 8000b24:	61bb      	str	r3, [r7, #24]
 8000b26:	e03a      	b.n	8000b9e <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	3308      	adds	r3, #8
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	881b      	ldrh	r3, [r3, #0]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d127      	bne.n	8000b98 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000b4e:	220f      	movs	r2, #15
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	697a      	ldr	r2, [r7, #20]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000b62:	69fa      	ldr	r2, [r7, #28]
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	697a      	ldr	r2, [r7, #20]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	78db      	ldrb	r3, [r3, #3]
 8000b74:	2b28      	cmp	r3, #40	; 0x28
 8000b76:	d105      	bne.n	8000b84 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	3308      	adds	r3, #8
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	409a      	lsls	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	78db      	ldrb	r3, [r3, #3]
 8000b88:	2b48      	cmp	r3, #72	; 0x48
 8000b8a:	d105      	bne.n	8000b98 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	3308      	adds	r3, #8
 8000b90:	2201      	movs	r2, #1
 8000b92:	409a      	lsls	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	61bb      	str	r3, [r7, #24]
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	2b07      	cmp	r3, #7
 8000ba2:	d9c1      	bls.n	8000b28 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	697a      	ldr	r2, [r7, #20]
 8000ba8:	605a      	str	r2, [r3, #4]
  }
}
 8000baa:	bf00      	nop
 8000bac:	3724      	adds	r7, #36	; 0x24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr

08000bb4 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bc2:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2202      	movs	r2, #2
 8000bc8:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2204      	movs	r2, #4
 8000bce:	70da      	strb	r2, [r3, #3]
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr
	...

08000bdc <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <RCC_ADCCLKConfig+0x34>)
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bf4:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000bfe:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <RCC_ADCCLKConfig+0x34>)
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	6053      	str	r3, [r2, #4]
}
 8000c04:	bf00      	nop
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	40021000 	.word	0x40021000

08000c14 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b087      	sub	sp, #28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	2300      	movs	r3, #0
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000c2c:	4b4c      	ldr	r3, [pc, #304]	; (8000d60 <RCC_GetClocksFreq+0x14c>)
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f003 030c 	and.w	r3, r3, #12
 8000c34:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	2b04      	cmp	r3, #4
 8000c3a:	d007      	beq.n	8000c4c <RCC_GetClocksFreq+0x38>
 8000c3c:	2b08      	cmp	r3, #8
 8000c3e:	d009      	beq.n	8000c54 <RCC_GetClocksFreq+0x40>
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d133      	bne.n	8000cac <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a47      	ldr	r2, [pc, #284]	; (8000d64 <RCC_GetClocksFreq+0x150>)
 8000c48:	601a      	str	r2, [r3, #0]
      break;
 8000c4a:	e033      	b.n	8000cb4 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a45      	ldr	r2, [pc, #276]	; (8000d64 <RCC_GetClocksFreq+0x150>)
 8000c50:	601a      	str	r2, [r3, #0]
      break;
 8000c52:	e02f      	b.n	8000cb4 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000c54:	4b42      	ldr	r3, [pc, #264]	; (8000d60 <RCC_GetClocksFreq+0x14c>)
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000c5c:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000c5e:	4b40      	ldr	r3, [pc, #256]	; (8000d60 <RCC_GetClocksFreq+0x14c>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c66:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	0c9b      	lsrs	r3, r3, #18
 8000c6c:	3302      	adds	r3, #2
 8000c6e:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d106      	bne.n	8000c84 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	4a3b      	ldr	r2, [pc, #236]	; (8000d68 <RCC_GetClocksFreq+0x154>)
 8000c7a:	fb02 f203 	mul.w	r2, r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000c82:	e017      	b.n	8000cb4 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8000c84:	4b36      	ldr	r3, [pc, #216]	; (8000d60 <RCC_GetClocksFreq+0x14c>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d006      	beq.n	8000c9e <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8000c90:	693b      	ldr	r3, [r7, #16]
 8000c92:	4a35      	ldr	r2, [pc, #212]	; (8000d68 <RCC_GetClocksFreq+0x154>)
 8000c94:	fb02 f203 	mul.w	r2, r2, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	601a      	str	r2, [r3, #0]
      break;
 8000c9c:	e00a      	b.n	8000cb4 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	4a30      	ldr	r2, [pc, #192]	; (8000d64 <RCC_GetClocksFreq+0x150>)
 8000ca2:	fb02 f203 	mul.w	r2, r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	601a      	str	r2, [r3, #0]
      break;
 8000caa:	e003      	b.n	8000cb4 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a2d      	ldr	r2, [pc, #180]	; (8000d64 <RCC_GetClocksFreq+0x150>)
 8000cb0:	601a      	str	r2, [r3, #0]
      break;
 8000cb2:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000cb4:	4b2a      	ldr	r3, [pc, #168]	; (8000d60 <RCC_GetClocksFreq+0x14c>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cbc:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	091b      	lsrs	r3, r3, #4
 8000cc2:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000cc4:	4a29      	ldr	r2, [pc, #164]	; (8000d6c <RCC_GetClocksFreq+0x158>)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	4413      	add	r3, r2
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	40da      	lsrs	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000cdc:	4b20      	ldr	r3, [pc, #128]	; (8000d60 <RCC_GetClocksFreq+0x14c>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000ce4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000cec:	4a1f      	ldr	r2, [pc, #124]	; (8000d6c <RCC_GetClocksFreq+0x158>)
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685a      	ldr	r2, [r3, #4]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	40da      	lsrs	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000d04:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <RCC_GetClocksFreq+0x14c>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000d0c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	0adb      	lsrs	r3, r3, #11
 8000d12:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000d14:	4a15      	ldr	r2, [pc, #84]	; (8000d6c <RCC_GetClocksFreq+0x158>)
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	4413      	add	r3, r2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	685a      	ldr	r2, [r3, #4]
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	40da      	lsrs	r2, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <RCC_GetClocksFreq+0x14c>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d34:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	0b9b      	lsrs	r3, r3, #14
 8000d3a:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8000d3c:	4a0c      	ldr	r2, [pc, #48]	; (8000d70 <RCC_GetClocksFreq+0x15c>)
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	4413      	add	r3, r2
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	68da      	ldr	r2, [r3, #12]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	611a      	str	r2, [r3, #16]
}
 8000d56:	bf00      	nop
 8000d58:	371c      	adds	r7, #28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr
 8000d60:	40021000 	.word	0x40021000
 8000d64:	007a1200 	.word	0x007a1200
 8000d68:	003d0900 	.word	0x003d0900
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	20000010 	.word	0x20000010

08000d74 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000d80:	78fb      	ldrb	r3, [r7, #3]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d006      	beq.n	8000d94 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000d86:	4909      	ldr	r1, [pc, #36]	; (8000dac <RCC_AHBPeriphClockCmd+0x38>)
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <RCC_AHBPeriphClockCmd+0x38>)
 8000d8a:	695a      	ldr	r2, [r3, #20]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000d92:	e006      	b.n	8000da2 <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000d94:	4905      	ldr	r1, [pc, #20]	; (8000dac <RCC_AHBPeriphClockCmd+0x38>)
 8000d96:	4b05      	ldr	r3, [pc, #20]	; (8000dac <RCC_AHBPeriphClockCmd+0x38>)
 8000d98:	695a      	ldr	r2, [r3, #20]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	4013      	ands	r3, r2
 8000da0:	614b      	str	r3, [r1, #20]
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	40021000 	.word	0x40021000

08000db0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	460b      	mov	r3, r1
 8000dba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000dbc:	78fb      	ldrb	r3, [r7, #3]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d006      	beq.n	8000dd0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000dc2:	4909      	ldr	r1, [pc, #36]	; (8000de8 <RCC_APB2PeriphClockCmd+0x38>)
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <RCC_APB2PeriphClockCmd+0x38>)
 8000dc6:	699a      	ldr	r2, [r3, #24]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000dce:	e006      	b.n	8000dde <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000dd0:	4905      	ldr	r1, [pc, #20]	; (8000de8 <RCC_APB2PeriphClockCmd+0x38>)
 8000dd2:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <RCC_APB2PeriphClockCmd+0x38>)
 8000dd4:	699a      	ldr	r2, [r3, #24]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	4013      	ands	r3, r2
 8000ddc:	618b      	str	r3, [r1, #24]
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr
 8000de8:	40021000 	.word	0x40021000

08000dec <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	460b      	mov	r3, r1
 8000df6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000df8:	78fb      	ldrb	r3, [r7, #3]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d006      	beq.n	8000e0c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000dfe:	4909      	ldr	r1, [pc, #36]	; (8000e24 <RCC_APB1PeriphClockCmd+0x38>)
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <RCC_APB1PeriphClockCmd+0x38>)
 8000e02:	69da      	ldr	r2, [r3, #28]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000e0a:	e006      	b.n	8000e1a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000e0c:	4905      	ldr	r1, [pc, #20]	; (8000e24 <RCC_APB1PeriphClockCmd+0x38>)
 8000e0e:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <RCC_APB1PeriphClockCmd+0x38>)
 8000e10:	69da      	ldr	r2, [r3, #28]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	43db      	mvns	r3, r3
 8000e16:	4013      	ands	r3, r2
 8000e18:	61cb      	str	r3, [r1, #28]
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr
 8000e24:	40021000 	.word	0x40021000

08000e28 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	881b      	ldrh	r3, [r3, #0]
 8000e3a:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a2e      	ldr	r2, [pc, #184]	; (8000ef8 <TIM_TimeBaseInit+0xd0>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d013      	beq.n	8000e6c <TIM_TimeBaseInit+0x44>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a2d      	ldr	r2, [pc, #180]	; (8000efc <TIM_TimeBaseInit+0xd4>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d00f      	beq.n	8000e6c <TIM_TimeBaseInit+0x44>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e52:	d00b      	beq.n	8000e6c <TIM_TimeBaseInit+0x44>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a2a      	ldr	r2, [pc, #168]	; (8000f00 <TIM_TimeBaseInit+0xd8>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d007      	beq.n	8000e6c <TIM_TimeBaseInit+0x44>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a29      	ldr	r2, [pc, #164]	; (8000f04 <TIM_TimeBaseInit+0xdc>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d003      	beq.n	8000e6c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a28      	ldr	r2, [pc, #160]	; (8000f08 <TIM_TimeBaseInit+0xe0>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d108      	bne.n	8000e7e <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8000e6c:	89fb      	ldrh	r3, [r7, #14]
 8000e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e72:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	885a      	ldrh	r2, [r3, #2]
 8000e78:	89fb      	ldrh	r3, [r7, #14]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a22      	ldr	r2, [pc, #136]	; (8000f0c <TIM_TimeBaseInit+0xe4>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d00c      	beq.n	8000ea0 <TIM_TimeBaseInit+0x78>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a21      	ldr	r2, [pc, #132]	; (8000f10 <TIM_TimeBaseInit+0xe8>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d008      	beq.n	8000ea0 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8000e8e:	89fb      	ldrh	r3, [r7, #14]
 8000e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e94:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	88da      	ldrh	r2, [r3, #6]
 8000e9a:	89fb      	ldrh	r3, [r7, #14]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	89fa      	ldrh	r2, [r7, #14]
 8000ea4:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	889a      	ldrh	r2, [r3, #4]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	881a      	ldrh	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a0f      	ldr	r2, [pc, #60]	; (8000ef8 <TIM_TimeBaseInit+0xd0>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d00f      	beq.n	8000ede <TIM_TimeBaseInit+0xb6>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <TIM_TimeBaseInit+0xd4>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d00b      	beq.n	8000ede <TIM_TimeBaseInit+0xb6>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a12      	ldr	r2, [pc, #72]	; (8000f14 <TIM_TimeBaseInit+0xec>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d007      	beq.n	8000ede <TIM_TimeBaseInit+0xb6>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a11      	ldr	r2, [pc, #68]	; (8000f18 <TIM_TimeBaseInit+0xf0>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d003      	beq.n	8000ede <TIM_TimeBaseInit+0xb6>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a10      	ldr	r2, [pc, #64]	; (8000f1c <TIM_TimeBaseInit+0xf4>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d104      	bne.n	8000ee8 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	7a1b      	ldrb	r3, [r3, #8]
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2201      	movs	r2, #1
 8000eec:	829a      	strh	r2, [r3, #20]
}
 8000eee:	bf00      	nop
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	40012c00 	.word	0x40012c00
 8000efc:	40013400 	.word	0x40013400
 8000f00:	40000400 	.word	0x40000400
 8000f04:	40000800 	.word	0x40000800
 8000f08:	40000c00 	.word	0x40000c00
 8000f0c:	40001000 	.word	0x40001000
 8000f10:	40001400 	.word	0x40001400
 8000f14:	40014000 	.word	0x40014000
 8000f18:	40014400 	.word	0x40014400
 8000f1c:	40014800 	.word	0x40014800

08000f20 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  }
  else
  {
    assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	881b      	ldrh	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d10f      	bne.n	8000f52 <TIM_ICInit+0x32>
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	8859      	ldrh	r1, [r3, #2]
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	889a      	ldrh	r2, [r3, #4]
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	891b      	ldrh	r3, [r3, #8]
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 f94e 	bl	80011e0 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	88db      	ldrh	r3, [r3, #6]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f000 f88c 	bl	8001068 <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8000f50:	e036      	b.n	8000fc0 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	d10f      	bne.n	8000f7a <TIM_ICInit+0x5a>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	8859      	ldrh	r1, [r3, #2]
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	889a      	ldrh	r2, [r3, #4]
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	891b      	ldrh	r3, [r3, #8]
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f000 f9aa 	bl	80012c0 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	88db      	ldrh	r3, [r3, #6]
 8000f70:	4619      	mov	r1, r3
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f000 f893 	bl	800109e <TIM_SetIC2Prescaler>
}
 8000f78:	e022      	b.n	8000fc0 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	2b08      	cmp	r3, #8
 8000f80:	d10f      	bne.n	8000fa2 <TIM_ICInit+0x82>
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	8859      	ldrh	r1, [r3, #2]
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	889a      	ldrh	r2, [r3, #4]
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	891b      	ldrh	r3, [r3, #8]
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f000 fa10 	bl	80013b4 <TI3_Config>
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	88db      	ldrh	r3, [r3, #6]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f000 f89c 	bl	80010d8 <TIM_SetIC3Prescaler>
}
 8000fa0:	e00e      	b.n	8000fc0 <TIM_ICInit+0xa0>
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	8859      	ldrh	r1, [r3, #2]
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	889a      	ldrh	r2, [r3, #4]
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	891b      	ldrh	r3, [r3, #8]
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 fa76 	bl	80014a0 <TI4_Config>
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	88db      	ldrh	r3, [r3, #6]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f000 f8a7 	bl	800110e <TIM_SetIC4Prescaler>
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fd6:	809a      	strh	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	80da      	strh	r2, [r3, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	721a      	strb	r2, [r3, #8]
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr

08000ffa <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2201      	movs	r2, #1
 8001012:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	811a      	strh	r2, [r3, #8]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr

0800102a <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
 8001032:	460b      	mov	r3, r1
 8001034:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001036:	78fb      	ldrb	r3, [r7, #3]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d008      	beq.n	800104e <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	b29b      	uxth	r3, r3
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	b29a      	uxth	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 800104c:	e007      	b.n	800105e <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	881b      	ldrh	r3, [r3, #0]
 8001052:	b29b      	uxth	r3, r3
 8001054:	f023 0301 	bic.w	r3, r3, #1
 8001058:	b29a      	uxth	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	801a      	strh	r2, [r3, #0]
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	8b1b      	ldrh	r3, [r3, #24]
 8001078:	b29b      	uxth	r3, r3
 800107a:	f023 030c 	bic.w	r3, r3, #12
 800107e:	b29a      	uxth	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	831a      	strh	r2, [r3, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	8b1b      	ldrh	r3, [r3, #24]
 8001088:	b29a      	uxth	r2, r3
 800108a:	887b      	ldrh	r3, [r7, #2]
 800108c:	4313      	orrs	r3, r2
 800108e:	b29a      	uxth	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	831a      	strh	r2, [r3, #24]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr

0800109e <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	460b      	mov	r3, r1
 80010a8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	8b1b      	ldrh	r3, [r3, #24]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	831a      	strh	r2, [r3, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	8b1b      	ldrh	r3, [r3, #24]
 80010be:	b29a      	uxth	r2, r3
 80010c0:	887b      	ldrh	r3, [r7, #2]
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	4313      	orrs	r3, r2
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	831a      	strh	r2, [r3, #24]
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	8b9b      	ldrh	r3, [r3, #28]
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	f023 030c 	bic.w	r3, r3, #12
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	839a      	strh	r2, [r3, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	8b9b      	ldrh	r3, [r3, #28]
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	887b      	ldrh	r3, [r7, #2]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	b29a      	uxth	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	839a      	strh	r2, [r3, #28]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr

0800110e <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	460b      	mov	r3, r1
 8001118:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	8b9b      	ldrh	r3, [r3, #28]
 800111e:	b29b      	uxth	r3, r3
 8001120:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001124:	b29a      	uxth	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	839a      	strh	r2, [r3, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	8b9b      	ldrh	r3, [r3, #28]
 800112e:	b29a      	uxth	r2, r3
 8001130:	887b      	ldrh	r3, [r7, #2]
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	b29b      	uxth	r3, r3
 8001136:	4313      	orrs	r3, r2
 8001138:	b29a      	uxth	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	839a      	strh	r2, [r3, #28]
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr

08001148 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001154:	b29b      	uxth	r3, r3
}
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr

08001160 <TIM_GetCapture2>:
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800116c:	b29b      	uxth	r3, r3
}
 800116e:	4618      	mov	r0, r3
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr

08001178 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001184:	b29b      	uxth	r3, r3
}
 8001186:	4618      	mov	r0, r3
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr

08001190 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800119e:	b29b      	uxth	r3, r3
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr

080011aa <TIM_GetFlagStatus>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 80011aa:	b480      	push	{r7}
 80011ac:	b085      	sub	sp, #20
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
 80011b2:	460b      	mov	r3, r1
 80011b4:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80011b6:	2300      	movs	r3, #0
 80011b8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	8a1b      	ldrh	r3, [r3, #16]
 80011be:	b29a      	uxth	r2, r3
 80011c0:	887b      	ldrh	r3, [r7, #2]
 80011c2:	4013      	ands	r3, r2
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d002      	beq.n	80011d0 <TIM_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80011ca:	2301      	movs	r3, #1
 80011cc:	73fb      	strb	r3, [r7, #15]
 80011ce:	e001      	b.n	80011d4 <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80011d0:	2300      	movs	r3, #0
 80011d2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr

080011e0 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b087      	sub	sp, #28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	4608      	mov	r0, r1
 80011ea:	4611      	mov	r1, r2
 80011ec:	461a      	mov	r2, r3
 80011ee:	4603      	mov	r3, r0
 80011f0:	817b      	strh	r3, [r7, #10]
 80011f2:	460b      	mov	r3, r1
 80011f4:	813b      	strh	r3, [r7, #8]
 80011f6:	4613      	mov	r3, r2
 80011f8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	82bb      	strh	r3, [r7, #20]
 80011fe:	2300      	movs	r3, #0
 8001200:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	8c1b      	ldrh	r3, [r3, #32]
 8001206:	b29b      	uxth	r3, r3
 8001208:	f023 0301 	bic.w	r3, r3, #1
 800120c:	b29a      	uxth	r2, r3
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	8b1b      	ldrh	r3, [r3, #24]
 8001216:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	8c1b      	ldrh	r3, [r3, #32]
 800121c:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 800121e:	8abb      	ldrh	r3, [r7, #20]
 8001220:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8001224:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	011b      	lsls	r3, r3, #4
 800122a:	b29a      	uxth	r2, r3
 800122c:	893b      	ldrh	r3, [r7, #8]
 800122e:	4313      	orrs	r3, r2
 8001230:	b29a      	uxth	r2, r3
 8001232:	8abb      	ldrh	r3, [r7, #20]
 8001234:	4313      	orrs	r3, r2
 8001236:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4a1c      	ldr	r2, [pc, #112]	; (80012ac <TI1_Config+0xcc>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d013      	beq.n	8001268 <TI1_Config+0x88>
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4a1b      	ldr	r2, [pc, #108]	; (80012b0 <TI1_Config+0xd0>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d00f      	beq.n	8001268 <TI1_Config+0x88>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800124e:	d00b      	beq.n	8001268 <TI1_Config+0x88>
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4a18      	ldr	r2, [pc, #96]	; (80012b4 <TI1_Config+0xd4>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d007      	beq.n	8001268 <TI1_Config+0x88>
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4a17      	ldr	r2, [pc, #92]	; (80012b8 <TI1_Config+0xd8>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d003      	beq.n	8001268 <TI1_Config+0x88>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4a16      	ldr	r2, [pc, #88]	; (80012bc <TI1_Config+0xdc>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d10b      	bne.n	8001280 <TI1_Config+0xa0>
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
 8001268:	8afb      	ldrh	r3, [r7, #22]
 800126a:	f023 0302 	bic.w	r3, r3, #2
 800126e:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001270:	897a      	ldrh	r2, [r7, #10]
 8001272:	8afb      	ldrh	r3, [r7, #22]
 8001274:	4313      	orrs	r3, r2
 8001276:	b29b      	uxth	r3, r3
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	82fb      	strh	r3, [r7, #22]
 800127e:	e00a      	b.n	8001296 <TI1_Config+0xb6>
  }
  else
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001280:	8afb      	ldrh	r3, [r7, #22]
 8001282:	f023 030a 	bic.w	r3, r3, #10
 8001286:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001288:	897a      	ldrh	r2, [r7, #10]
 800128a:	8afb      	ldrh	r3, [r7, #22]
 800128c:	4313      	orrs	r3, r2
 800128e:	b29b      	uxth	r3, r3
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	82fb      	strh	r3, [r7, #22]
  }

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	8aba      	ldrh	r2, [r7, #20]
 800129a:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	8afa      	ldrh	r2, [r7, #22]
 80012a0:	841a      	strh	r2, [r3, #32]
}
 80012a2:	bf00      	nop
 80012a4:	371c      	adds	r7, #28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr
 80012ac:	40012c00 	.word	0x40012c00
 80012b0:	40013400 	.word	0x40013400
 80012b4:	40000400 	.word	0x40000400
 80012b8:	40000800 	.word	0x40000800
 80012bc:	40000c00 	.word	0x40000c00

080012c0 <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b087      	sub	sp, #28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	4608      	mov	r0, r1
 80012ca:	4611      	mov	r1, r2
 80012cc:	461a      	mov	r2, r3
 80012ce:	4603      	mov	r3, r0
 80012d0:	817b      	strh	r3, [r7, #10]
 80012d2:	460b      	mov	r3, r1
 80012d4:	813b      	strh	r3, [r7, #8]
 80012d6:	4613      	mov	r3, r2
 80012d8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	82bb      	strh	r3, [r7, #20]
 80012de:	2300      	movs	r3, #0
 80012e0:	82fb      	strh	r3, [r7, #22]
 80012e2:	2300      	movs	r3, #0
 80012e4:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	8c1b      	ldrh	r3, [r3, #32]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	f023 0310 	bic.w	r3, r3, #16
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	8b1b      	ldrh	r3, [r3, #24]
 80012fa:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	8c1b      	ldrh	r3, [r3, #32]
 8001300:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8001302:	897b      	ldrh	r3, [r7, #10]
 8001304:	011b      	lsls	r3, r3, #4
 8001306:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8001308:	8abb      	ldrh	r3, [r7, #20]
 800130a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800130e:	051b      	lsls	r3, r3, #20
 8001310:	0d1b      	lsrs	r3, r3, #20
 8001312:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	031b      	lsls	r3, r3, #12
 8001318:	b29a      	uxth	r2, r3
 800131a:	8abb      	ldrh	r3, [r7, #20]
 800131c:	4313      	orrs	r3, r2
 800131e:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001320:	893b      	ldrh	r3, [r7, #8]
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	b29a      	uxth	r2, r3
 8001326:	8abb      	ldrh	r3, [r7, #20]
 8001328:	4313      	orrs	r3, r2
 800132a:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4a1c      	ldr	r2, [pc, #112]	; (80013a0 <TI2_Config+0xe0>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d013      	beq.n	800135c <TI2_Config+0x9c>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4a1b      	ldr	r2, [pc, #108]	; (80013a4 <TI2_Config+0xe4>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d00f      	beq.n	800135c <TI2_Config+0x9c>
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001342:	d00b      	beq.n	800135c <TI2_Config+0x9c>
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4a18      	ldr	r2, [pc, #96]	; (80013a8 <TI2_Config+0xe8>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d007      	beq.n	800135c <TI2_Config+0x9c>
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4a17      	ldr	r2, [pc, #92]	; (80013ac <TI2_Config+0xec>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d003      	beq.n	800135c <TI2_Config+0x9c>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4a16      	ldr	r2, [pc, #88]	; (80013b0 <TI2_Config+0xf0>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d10b      	bne.n	8001374 <TI2_Config+0xb4>
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
 800135c:	8afb      	ldrh	r3, [r7, #22]
 800135e:	f023 0320 	bic.w	r3, r3, #32
 8001362:	82fb      	strh	r3, [r7, #22]
    tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001364:	8a7a      	ldrh	r2, [r7, #18]
 8001366:	8afb      	ldrh	r3, [r7, #22]
 8001368:	4313      	orrs	r3, r2
 800136a:	b29b      	uxth	r3, r3
 800136c:	f043 0310 	orr.w	r3, r3, #16
 8001370:	82fb      	strh	r3, [r7, #22]
 8001372:	e00a      	b.n	800138a <TI2_Config+0xca>
  }
  else
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001374:	8afb      	ldrh	r3, [r7, #22]
 8001376:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800137a:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
 800137c:	897a      	ldrh	r2, [r7, #10]
 800137e:	8afb      	ldrh	r3, [r7, #22]
 8001380:	4313      	orrs	r3, r2
 8001382:	b29b      	uxth	r3, r3
 8001384:	f043 0310 	orr.w	r3, r3, #16
 8001388:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	8aba      	ldrh	r2, [r7, #20]
 800138e:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	8afa      	ldrh	r2, [r7, #22]
 8001394:	841a      	strh	r2, [r3, #32]
}
 8001396:	bf00      	nop
 8001398:	371c      	adds	r7, #28
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	40012c00 	.word	0x40012c00
 80013a4:	40013400 	.word	0x40013400
 80013a8:	40000400 	.word	0x40000400
 80013ac:	40000800 	.word	0x40000800
 80013b0:	40000c00 	.word	0x40000c00

080013b4 <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b087      	sub	sp, #28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	4608      	mov	r0, r1
 80013be:	4611      	mov	r1, r2
 80013c0:	461a      	mov	r2, r3
 80013c2:	4603      	mov	r3, r0
 80013c4:	817b      	strh	r3, [r7, #10]
 80013c6:	460b      	mov	r3, r1
 80013c8:	813b      	strh	r3, [r7, #8]
 80013ca:	4613      	mov	r3, r2
 80013cc:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	82bb      	strh	r3, [r7, #20]
 80013d2:	2300      	movs	r3, #0
 80013d4:	82fb      	strh	r3, [r7, #22]
 80013d6:	2300      	movs	r3, #0
 80013d8:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	8c1b      	ldrh	r3, [r3, #32]
 80013de:	b29b      	uxth	r3, r3
 80013e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	8b9b      	ldrh	r3, [r3, #28]
 80013ee:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	8c1b      	ldrh	r3, [r3, #32]
 80013f4:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 80013f6:	897b      	ldrh	r3, [r7, #10]
 80013f8:	021b      	lsls	r3, r3, #8
 80013fa:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 80013fc:	8abb      	ldrh	r3, [r7, #20]
 80013fe:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8001402:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001404:	88fb      	ldrh	r3, [r7, #6]
 8001406:	011b      	lsls	r3, r3, #4
 8001408:	b29a      	uxth	r2, r3
 800140a:	893b      	ldrh	r3, [r7, #8]
 800140c:	4313      	orrs	r3, r2
 800140e:	b29a      	uxth	r2, r3
 8001410:	8abb      	ldrh	r3, [r7, #20]
 8001412:	4313      	orrs	r3, r2
 8001414:	82bb      	strh	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4a1c      	ldr	r2, [pc, #112]	; (800148c <TI3_Config+0xd8>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d013      	beq.n	8001446 <TI3_Config+0x92>
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4a1b      	ldr	r2, [pc, #108]	; (8001490 <TI3_Config+0xdc>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d00f      	beq.n	8001446 <TI3_Config+0x92>
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800142c:	d00b      	beq.n	8001446 <TI3_Config+0x92>
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4a18      	ldr	r2, [pc, #96]	; (8001494 <TI3_Config+0xe0>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d007      	beq.n	8001446 <TI3_Config+0x92>
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	4a17      	ldr	r2, [pc, #92]	; (8001498 <TI3_Config+0xe4>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d003      	beq.n	8001446 <TI3_Config+0x92>
     (TIMx == TIM4) ||(TIMx == TIM5))
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4a16      	ldr	r2, [pc, #88]	; (800149c <TI3_Config+0xe8>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d10b      	bne.n	800145e <TI3_Config+0xaa>
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
 8001446:	8afb      	ldrh	r3, [r7, #22]
 8001448:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800144c:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 800144e:	8a7a      	ldrh	r2, [r7, #18]
 8001450:	8afb      	ldrh	r3, [r7, #22]
 8001452:	4313      	orrs	r3, r2
 8001454:	b29b      	uxth	r3, r3
 8001456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145a:	82fb      	strh	r3, [r7, #22]
 800145c:	e00a      	b.n	8001474 <TI3_Config+0xc0>
  }
  else
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800145e:	8afb      	ldrh	r3, [r7, #22]
 8001460:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8001464:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
 8001466:	897a      	ldrh	r2, [r7, #10]
 8001468:	8afb      	ldrh	r3, [r7, #22]
 800146a:	4313      	orrs	r3, r2
 800146c:	b29b      	uxth	r3, r3
 800146e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001472:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	8aba      	ldrh	r2, [r7, #20]
 8001478:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	8afa      	ldrh	r2, [r7, #22]
 800147e:	841a      	strh	r2, [r3, #32]
}
 8001480:	bf00      	nop
 8001482:	371c      	adds	r7, #28
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40012c00 	.word	0x40012c00
 8001490:	40013400 	.word	0x40013400
 8001494:	40000400 	.word	0x40000400
 8001498:	40000800 	.word	0x40000800
 800149c:	40000c00 	.word	0x40000c00

080014a0 <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b087      	sub	sp, #28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	4608      	mov	r0, r1
 80014aa:	4611      	mov	r1, r2
 80014ac:	461a      	mov	r2, r3
 80014ae:	4603      	mov	r3, r0
 80014b0:	817b      	strh	r3, [r7, #10]
 80014b2:	460b      	mov	r3, r1
 80014b4:	813b      	strh	r3, [r7, #8]
 80014b6:	4613      	mov	r3, r2
 80014b8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	82bb      	strh	r3, [r7, #20]
 80014be:	2300      	movs	r3, #0
 80014c0:	82fb      	strh	r3, [r7, #22]
 80014c2:	2300      	movs	r3, #0
 80014c4:	827b      	strh	r3, [r7, #18]

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	8c1b      	ldrh	r3, [r3, #32]
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	8b9b      	ldrh	r3, [r3, #28]
 80014da:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	8c1b      	ldrh	r3, [r3, #32]
 80014e0:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 80014e2:	897b      	ldrh	r3, [r7, #10]
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 80014e8:	8abb      	ldrh	r3, [r7, #20]
 80014ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014ee:	051b      	lsls	r3, r3, #20
 80014f0:	0d1b      	lsrs	r3, r3, #20
 80014f2:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 80014f4:	893b      	ldrh	r3, [r7, #8]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	8abb      	ldrh	r3, [r7, #20]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	031b      	lsls	r3, r3, #12
 8001504:	b29a      	uxth	r2, r3
 8001506:	8abb      	ldrh	r3, [r7, #20]
 8001508:	4313      	orrs	r3, r2
 800150a:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4a1d      	ldr	r2, [pc, #116]	; (8001584 <TI4_Config+0xe4>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d013      	beq.n	800153c <TI4_Config+0x9c>
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4a1c      	ldr	r2, [pc, #112]	; (8001588 <TI4_Config+0xe8>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d00f      	beq.n	800153c <TI4_Config+0x9c>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001522:	d00b      	beq.n	800153c <TI4_Config+0x9c>
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4a19      	ldr	r2, [pc, #100]	; (800158c <TI4_Config+0xec>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d007      	beq.n	800153c <TI4_Config+0x9c>
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4a18      	ldr	r2, [pc, #96]	; (8001590 <TI4_Config+0xf0>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d003      	beq.n	800153c <TI4_Config+0x9c>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4a17      	ldr	r2, [pc, #92]	; (8001594 <TI4_Config+0xf4>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d10b      	bne.n	8001554 <TI4_Config+0xb4>
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
 800153c:	8afb      	ldrh	r3, [r7, #22]
 800153e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001542:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8001544:	8a7a      	ldrh	r2, [r7, #18]
 8001546:	8afb      	ldrh	r3, [r7, #22]
 8001548:	4313      	orrs	r3, r2
 800154a:	b29b      	uxth	r3, r3
 800154c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001550:	82fb      	strh	r3, [r7, #22]
 8001552:	e00c      	b.n	800156e <TI4_Config+0xce>
  }
  else
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
 8001554:	8afb      	ldrh	r3, [r7, #22]
 8001556:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800155a:	045b      	lsls	r3, r3, #17
 800155c:	0c5b      	lsrs	r3, r3, #17
 800155e:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
 8001560:	897a      	ldrh	r2, [r7, #10]
 8001562:	8afb      	ldrh	r3, [r7, #22]
 8001564:	4313      	orrs	r3, r2
 8001566:	b29b      	uxth	r3, r3
 8001568:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800156c:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	8aba      	ldrh	r2, [r7, #20]
 8001572:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	8afa      	ldrh	r2, [r7, #22]
 8001578:	841a      	strh	r2, [r3, #32]
}
 800157a:	bf00      	nop
 800157c:	371c      	adds	r7, #28
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr
 8001584:	40012c00 	.word	0x40012c00
 8001588:	40013400 	.word	0x40013400
 800158c:	40000400 	.word	0x40000400
 8001590:	40000800 	.word	0x40000800
 8001594:	40000c00 	.word	0x40000c00

08001598 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08c      	sub	sp, #48	; 0x30
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015a6:	2300      	movs	r3, #0
 80015a8:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 80015aa:	2300      	movs	r3, #0
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 80015ae:	2300      	movs	r3, #0
 80015b0:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	8a1b      	ldrh	r3, [r3, #16]
 80015be:	b29b      	uxth	r3, r3
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 80015c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015c4:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 80015c8:	4013      	ands	r3, r2
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	88db      	ldrh	r3, [r3, #6]
 80015d0:	461a      	mov	r2, r3
 80015d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d4:	4313      	orrs	r3, r2
 80015d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80015d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015da:	b29a      	uxth	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	899b      	ldrh	r3, [r3, #12]
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 80015e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015ea:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 80015ee:	4013      	ands	r3, r2
 80015f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	889a      	ldrh	r2, [r3, #4]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	891b      	ldrh	r3, [r3, #8]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001602:	4313      	orrs	r3, r2
 8001604:	b29b      	uxth	r3, r3
 8001606:	461a      	mov	r2, r3
 8001608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160a:	4313      	orrs	r3, r2
 800160c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800160e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001610:	b29a      	uxth	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	8a9b      	ldrh	r3, [r3, #20]
 800161a:	b29b      	uxth	r3, r3
 800161c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 800161e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001620:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8001624:	4013      	ands	r3, r2
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	899b      	ldrh	r3, [r3, #12]
 800162c:	461a      	mov	r2, r3
 800162e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001630:	4313      	orrs	r3, r2
 8001632:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001636:	b29a      	uxth	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800163c:	f107 0308 	add.w	r3, r7, #8
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fae7 	bl	8000c14 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	4a2e      	ldr	r2, [pc, #184]	; (8001704 <USART_Init+0x16c>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d102      	bne.n	8001654 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	62bb      	str	r3, [r7, #40]	; 0x28
 8001652:	e001      	b.n	8001658 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	899b      	ldrh	r3, [r3, #12]
 800165c:	b29b      	uxth	r3, r3
 800165e:	b21b      	sxth	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	da0c      	bge.n	800167e <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001666:	4613      	mov	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	009a      	lsls	r2, r3, #2
 800166e:	441a      	add	r2, r3
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	fbb2 f3f3 	udiv	r3, r2, r3
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
 800167c:	e00b      	b.n	8001696 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800167e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001680:	4613      	mov	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	009a      	lsls	r2, r3, #2
 8001688:	441a      	add	r2, r3
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	fbb2 f3f3 	udiv	r3, r2, r3
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	4a1b      	ldr	r2, [pc, #108]	; (8001708 <USART_Init+0x170>)
 800169a:	fba2 2303 	umull	r2, r3, r2, r3
 800169e:	095b      	lsrs	r3, r3, #5
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80016a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a6:	091b      	lsrs	r3, r3, #4
 80016a8:	2264      	movs	r2, #100	; 0x64
 80016aa:	fb02 f303 	mul.w	r3, r2, r3
 80016ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	899b      	ldrh	r3, [r3, #12]
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	b21b      	sxth	r3, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	da0c      	bge.n	80016da <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80016c0:	6a3b      	ldr	r3, [r7, #32]
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	3332      	adds	r3, #50	; 0x32
 80016c6:	4a10      	ldr	r2, [pc, #64]	; (8001708 <USART_Init+0x170>)
 80016c8:	fba2 2303 	umull	r2, r3, r2, r3
 80016cc:	095b      	lsrs	r3, r3, #5
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016d4:	4313      	orrs	r3, r2
 80016d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016d8:	e00b      	b.n	80016f2 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80016da:	6a3b      	ldr	r3, [r7, #32]
 80016dc:	011b      	lsls	r3, r3, #4
 80016de:	3332      	adds	r3, #50	; 0x32
 80016e0:	4a09      	ldr	r2, [pc, #36]	; (8001708 <USART_Init+0x170>)
 80016e2:	fba2 2303 	umull	r2, r3, r2, r3
 80016e6:	095b      	lsrs	r3, r3, #5
 80016e8:	f003 030f 	and.w	r3, r3, #15
 80016ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016ee:	4313      	orrs	r3, r2
 80016f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 80016f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	811a      	strh	r2, [r3, #8]
}
 80016fa:	bf00      	nop
 80016fc:	3730      	adds	r7, #48	; 0x30
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40013800 	.word	0x40013800
 8001708:	51eb851f 	.word	0x51eb851f

0800170c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001718:	78fb      	ldrb	r3, [r7, #3]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d008      	beq.n	8001730 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	899b      	ldrh	r3, [r3, #12]
 8001722:	b29b      	uxth	r3, r3
 8001724:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001728:	b29a      	uxth	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 800172e:	e007      	b.n	8001740 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	899b      	ldrh	r3, [r3, #12]
 8001734:	b29b      	uxth	r3, r3
 8001736:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800173a:	b29a      	uxth	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	819a      	strh	r2, [r3, #12]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr

0800174a <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
 8001752:	460b      	mov	r3, r1
 8001754:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001756:	887b      	ldrh	r3, [r7, #2]
 8001758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800175c:	b29a      	uxth	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	809a      	strh	r2, [r3, #4]
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	889b      	ldrh	r3, [r3, #4]
 8001778:	b29b      	uxth	r3, r3
 800177a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800177e:	b29b      	uxth	r3, r3
}
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr

0800178a <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800178a:	b480      	push	{r7}
 800178c:	b085      	sub	sp, #20
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	460b      	mov	r3, r1
 8001794:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001796:	2300      	movs	r3, #0
 8001798:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	b29a      	uxth	r2, r3
 80017a0:	887b      	ldrh	r3, [r7, #2]
 80017a2:	4013      	ands	r3, r2
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d002      	beq.n	80017b0 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80017aa:	2301      	movs	r3, #1
 80017ac:	73fb      	strb	r3, [r7, #15]
 80017ae:	e001      	b.n	80017b4 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80017b0:	2300      	movs	r3, #0
 80017b2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <_ZN10CHeartBeat4InitEP5IGpioP6ITimert>:
 */

#include <HeartBeat.h>

void CHeartBeat::Init(IGpio *pIo,ITimer *pTimer,uint16_t period)
{
 80017c0:	b538      	push	{r3, r4, r5, lr}
 80017c2:	461d      	mov	r5, r3
	m_pIo=pIo;
 80017c4:	6141      	str	r1, [r0, #20]
	m_timer.Init(pTimer);
 80017c6:	1d04      	adds	r4, r0, #4
 80017c8:	4611      	mov	r1, r2
 80017ca:	4620      	mov	r0, r4
 80017cc:	f000 fa0d 	bl	8001bea <_ZN8CTimeout4InitEP6ITimer>
	m_timer.SetExpiry(period);
 80017d0:	4629      	mov	r1, r5
 80017d2:	4620      	mov	r0, r4
 80017d4:	f000 fa15 	bl	8001c02 <_ZN8CTimeout9SetExpiryEt>
 80017d8:	bd38      	pop	{r3, r4, r5, pc}

080017da <_ZN10CHeartBeat7ExecuteEv>:
}

void CHeartBeat::Execute()
{
 80017da:	b538      	push	{r3, r4, r5, lr}
 80017dc:	4604      	mov	r4, r0
	if(!m_timer.HasElapsed())
 80017de:	1d05      	adds	r5, r0, #4
 80017e0:	4628      	mov	r0, r5
 80017e2:	f000 fa13 	bl	8001c0c <_ZN8CTimeout10HasElapsedEv>
 80017e6:	b900      	cbnz	r0, 80017ea <_ZN10CHeartBeat7ExecuteEv+0x10>
 80017e8:	bd38      	pop	{r3, r4, r5, pc}
		return;
	m_timer.Reset();
 80017ea:	4628      	mov	r0, r5
 80017ec:	f000 f9ff 	bl	8001bee <_ZN8CTimeout5ResetEv>
	m_pIo->Toggle();
 80017f0:	6964      	ldr	r4, [r4, #20]
	virtual void Set() = 0;
	virtual void Clear() = 0;
	virtual bool Get() const = 0;
	void Toggle()
	{
		if (Get()) Clear();
 80017f2:	6823      	ldr	r3, [r4, #0]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	4620      	mov	r0, r4
 80017f8:	4798      	blx	r3
 80017fa:	b920      	cbnz	r0, 8001806 <_ZN10CHeartBeat7ExecuteEv+0x2c>
		else Set();
 80017fc:	6823      	ldr	r3, [r4, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4620      	mov	r0, r4
 8001802:	4798      	blx	r3
 8001804:	e7f0      	b.n	80017e8 <_ZN10CHeartBeat7ExecuteEv+0xe>
		if (Get()) Clear();
 8001806:	6823      	ldr	r3, [r4, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	4620      	mov	r0, r4
 800180c:	4798      	blx	r3
 800180e:	bd38      	pop	{r3, r4, r5, pc}

08001810 <_ZN10CHeartBeatC1Ev>:

}

CHeartBeat::CHeartBeat()
 8001810:	b510      	push	{r4, lr}
 8001812:	4604      	mov	r4, r0
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <_ZN10CHeartBeatC1Ev+0x14>)
 8001816:	f840 3b04 	str.w	r3, [r0], #4
 800181a:	f000 fa0b 	bl	8001c34 <_ZN8CTimeoutC1Ev>
{
	// TODO Auto-generated constructor stub

}
 800181e:	4620      	mov	r0, r4
 8001820:	bd10      	pop	{r4, pc}
 8001822:	bf00      	nop
 8001824:	08002440 	.word	0x08002440

08001828 <_ZN10CHeartBeatD1Ev>:

CHeartBeat::~CHeartBeat()
 8001828:	b510      	push	{r4, lr}
 800182a:	4604      	mov	r4, r0
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <_ZN10CHeartBeatD1Ev+0x14>)
 800182e:	f840 3b04 	str.w	r3, [r0], #4
 8001832:	f000 f9d3 	bl	8001bdc <_ZN8CTimeoutD1Ev>
{
	// TODO Auto-generated destructor stub
}
 8001836:	4620      	mov	r0, r4
 8001838:	bd10      	pop	{r4, pc}
 800183a:	bf00      	nop
 800183c:	08002440 	.word	0x08002440

08001840 <_ZN10CHeartBeatD0Ev>:
CHeartBeat::~CHeartBeat()
 8001840:	b510      	push	{r4, lr}
 8001842:	4604      	mov	r4, r0
}
 8001844:	f7ff fff0 	bl	8001828 <_ZN10CHeartBeatD1Ev>
 8001848:	4620      	mov	r0, r4
 800184a:	f000 fc7d 	bl	8002148 <_ZdlPv>
 800184e:	4620      	mov	r0, r4
 8001850:	bd10      	pop	{r4, pc}

08001852 <_ZN13CSTM32F10xADC4ReadEv>:
	m_pAdcBuffer = pAdcBuffer;
}

uint16_t CSTM32F10xADC::Read()
{
	return *m_pAdcBuffer;
 8001852:	6843      	ldr	r3, [r0, #4]
}
 8001854:	8818      	ldrh	r0, [r3, #0]
 8001856:	4770      	bx	lr

08001858 <_ZN13CSTM32F10xADCD1Ev>:
}

CSTM32F10xADC::~CSTM32F10xADC()
{
	// TODO Auto-generated destructor stub
}
 8001858:	4770      	bx	lr

0800185a <_ZN13CSTM32F10xADCD0Ev>:
CSTM32F10xADC::~CSTM32F10xADC()
 800185a:	b510      	push	{r4, lr}
 800185c:	4604      	mov	r4, r0
}
 800185e:	f000 fc73 	bl	8002148 <_ZdlPv>
 8001862:	4620      	mov	r0, r4
 8001864:	bd10      	pop	{r4, pc}

08001866 <_ZN13CSTM32F10xADC4InitEPt>:
	m_pAdcBuffer = pAdcBuffer;
 8001866:	6041      	str	r1, [r0, #4]
 8001868:	4770      	bx	lr
	...

0800186c <_ZN13CSTM32F10xADCC1Ev>:
CSTM32F10xADC::CSTM32F10xADC()
 800186c:	4b01      	ldr	r3, [pc, #4]	; (8001874 <_ZN13CSTM32F10xADCC1Ev+0x8>)
 800186e:	6003      	str	r3, [r0, #0]
}
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	08002450 	.word	0x08002450

08001878 <_ZN14CSTM32F10xGpio3SetEv>:

#include <STM32F10xGpio.h>

void CSTM32F10xGpio::Set()
{
	m_pGpio->BSRR |= m_bitMask;
 8001878:	6842      	ldr	r2, [r0, #4]
 800187a:	6913      	ldr	r3, [r2, #16]
 800187c:	6881      	ldr	r1, [r0, #8]
 800187e:	430b      	orrs	r3, r1
 8001880:	6113      	str	r3, [r2, #16]
 8001882:	4770      	bx	lr

08001884 <_ZN14CSTM32F10xGpio5ClearEv>:
}

void CSTM32F10xGpio::Clear()
{
	m_pGpio->BSRR |= m_clearBitMask;
 8001884:	6842      	ldr	r2, [r0, #4]
 8001886:	6913      	ldr	r3, [r2, #16]
 8001888:	68c1      	ldr	r1, [r0, #12]
 800188a:	430b      	orrs	r3, r1
 800188c:	6113      	str	r3, [r2, #16]
 800188e:	4770      	bx	lr

08001890 <_ZNK14CSTM32F10xGpio3GetEv>:
}

bool CSTM32F10xGpio::Get() const
{
	return m_pGpio->IDR & m_bitMask;
 8001890:	6843      	ldr	r3, [r0, #4]
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	6883      	ldr	r3, [r0, #8]
 8001896:	421a      	tst	r2, r3
}
 8001898:	bf14      	ite	ne
 800189a:	2001      	movne	r0, #1
 800189c:	2000      	moveq	r0, #0
 800189e:	4770      	bx	lr

080018a0 <_ZN14CSTM32F10xGpioD1Ev>:
}

CSTM32F10xGpio::~CSTM32F10xGpio()
{
	// TODO Auto-generated destructor stub
}
 80018a0:	4770      	bx	lr

080018a2 <_ZN14CSTM32F10xGpioD0Ev>:
CSTM32F10xGpio::~CSTM32F10xGpio()
 80018a2:	b510      	push	{r4, lr}
 80018a4:	4604      	mov	r4, r0
}
 80018a6:	f000 fc4f 	bl	8002148 <_ZdlPv>
 80018aa:	4620      	mov	r0, r4
 80018ac:	bd10      	pop	{r4, pc}

080018ae <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh>:
	if (pinNumber > 15) return;
 80018ae:	2a0f      	cmp	r2, #15
 80018b0:	dc08      	bgt.n	80018c4 <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh+0x16>
	m_pGpio = pGpio;
 80018b2:	6041      	str	r1, [r0, #4]
	m_bitMask = 1 << pinNumber;
 80018b4:	2301      	movs	r3, #1
 80018b6:	fa03 f102 	lsl.w	r1, r3, r2
 80018ba:	6081      	str	r1, [r0, #8]
	m_clearBitMask = 1 << (pinNumber + 16);
 80018bc:	3210      	adds	r2, #16
 80018be:	fa03 f202 	lsl.w	r2, r3, r2
 80018c2:	60c2      	str	r2, [r0, #12]
 80018c4:	4770      	bx	lr
	...

080018c8 <_ZN14CSTM32F10xGpioC1Ev>:
CSTM32F10xGpio::CSTM32F10xGpio()
 80018c8:	4a02      	ldr	r2, [pc, #8]	; (80018d4 <_ZN14CSTM32F10xGpioC1Ev+0xc>)
 80018ca:	6002      	str	r2, [r0, #0]
	m_pGpio = NULL;
 80018cc:	2200      	movs	r2, #0
 80018ce:	6042      	str	r2, [r0, #4]
	m_bitMask = 0;
 80018d0:	6082      	str	r2, [r0, #8]
}
 80018d2:	4770      	bx	lr
 80018d4:	08002464 	.word	0x08002464

080018d8 <_ZN22CSTM32F10xInputCaptureD1Ev>:
}

CSTM32F10xInputCapture::~CSTM32F10xInputCapture()
{
	// TODO Auto-generated destructor stub
}
 80018d8:	4770      	bx	lr

080018da <_ZNK22CSTM32F10xInputCapture4ReadEv>:
{
 80018da:	b508      	push	{r3, lr}
	switch (m_Channel)
 80018dc:	8903      	ldrh	r3, [r0, #8]
 80018de:	2b0c      	cmp	r3, #12
 80018e0:	d818      	bhi.n	8001914 <_ZNK22CSTM32F10xInputCapture4ReadEv+0x3a>
 80018e2:	e8df f003 	tbb	[pc, r3]
 80018e6:	1707      	.short	0x1707
 80018e8:	170b1717 	.word	0x170b1717
 80018ec:	170f1717 	.word	0x170f1717
 80018f0:	1717      	.short	0x1717
 80018f2:	13          	.byte	0x13
 80018f3:	00          	.byte	0x00
			return TIM_GetCapture1(m_pTim);
 80018f4:	6840      	ldr	r0, [r0, #4]
 80018f6:	f7ff fc27 	bl	8001148 <TIM_GetCapture1>
 80018fa:	bd08      	pop	{r3, pc}
			return TIM_GetCapture2(m_pTim);
 80018fc:	6840      	ldr	r0, [r0, #4]
 80018fe:	f7ff fc2f 	bl	8001160 <TIM_GetCapture2>
 8001902:	bd08      	pop	{r3, pc}
			return TIM_GetCapture3(m_pTim);
 8001904:	6840      	ldr	r0, [r0, #4]
 8001906:	f7ff fc37 	bl	8001178 <TIM_GetCapture3>
 800190a:	bd08      	pop	{r3, pc}
			return TIM_GetCapture4(m_pTim);
 800190c:	6840      	ldr	r0, [r0, #4]
 800190e:	f7ff fc3f 	bl	8001190 <TIM_GetCapture4>
 8001912:	bd08      	pop	{r3, pc}
	return false;
 8001914:	2000      	movs	r0, #0
}
 8001916:	bd08      	pop	{r3, pc}

08001918 <_ZNK22CSTM32F10xInputCapture11IsTriggeredEv>:
{
 8001918:	b508      	push	{r3, lr}
	switch (m_Channel)
 800191a:	8903      	ldrh	r3, [r0, #8]
 800191c:	2b0c      	cmp	r3, #12
 800191e:	d828      	bhi.n	8001972 <_ZNK22CSTM32F10xInputCapture11IsTriggeredEv+0x5a>
 8001920:	e8df f003 	tbb	[pc, r3]
 8001924:	27272707 	.word	0x27272707
 8001928:	2727270f 	.word	0x2727270f
 800192c:	27272717 	.word	0x27272717
 8001930:	1f          	.byte	0x1f
 8001931:	00          	.byte	0x00
			return TIM_GetFlagStatus(m_pTim, TIM_FLAG_CC1);
 8001932:	2102      	movs	r1, #2
 8001934:	6840      	ldr	r0, [r0, #4]
 8001936:	f7ff fc38 	bl	80011aa <TIM_GetFlagStatus>
 800193a:	3000      	adds	r0, #0
 800193c:	bf18      	it	ne
 800193e:	2001      	movne	r0, #1
 8001940:	bd08      	pop	{r3, pc}
			return TIM_GetFlagStatus(m_pTim, TIM_FLAG_CC2);
 8001942:	2104      	movs	r1, #4
 8001944:	6840      	ldr	r0, [r0, #4]
 8001946:	f7ff fc30 	bl	80011aa <TIM_GetFlagStatus>
 800194a:	3000      	adds	r0, #0
 800194c:	bf18      	it	ne
 800194e:	2001      	movne	r0, #1
 8001950:	bd08      	pop	{r3, pc}
			return TIM_GetFlagStatus(m_pTim, TIM_FLAG_CC3);
 8001952:	2108      	movs	r1, #8
 8001954:	6840      	ldr	r0, [r0, #4]
 8001956:	f7ff fc28 	bl	80011aa <TIM_GetFlagStatus>
 800195a:	3000      	adds	r0, #0
 800195c:	bf18      	it	ne
 800195e:	2001      	movne	r0, #1
 8001960:	bd08      	pop	{r3, pc}
			return TIM_GetFlagStatus(m_pTim, TIM_FLAG_CC4);
 8001962:	2110      	movs	r1, #16
 8001964:	6840      	ldr	r0, [r0, #4]
 8001966:	f7ff fc20 	bl	80011aa <TIM_GetFlagStatus>
 800196a:	3000      	adds	r0, #0
 800196c:	bf18      	it	ne
 800196e:	2001      	movne	r0, #1
 8001970:	bd08      	pop	{r3, pc}
	return false;
 8001972:	2000      	movs	r0, #0
}
 8001974:	bd08      	pop	{r3, pc}

08001976 <_ZN22CSTM32F10xInputCaptureD0Ev>:
CSTM32F10xInputCapture::~CSTM32F10xInputCapture()
 8001976:	b510      	push	{r4, lr}
 8001978:	4604      	mov	r4, r0
}
 800197a:	f000 fbe5 	bl	8002148 <_ZdlPv>
 800197e:	4620      	mov	r0, r4
 8001980:	bd10      	pop	{r4, pc}

08001982 <_ZN22CSTM32F10xInputCapture4InitEP11TIM_TypeDeft>:
	m_pTim = pTim;
 8001982:	6041      	str	r1, [r0, #4]
	m_Channel = channel;
 8001984:	8102      	strh	r2, [r0, #8]
 8001986:	4770      	bx	lr

08001988 <_ZN22CSTM32F10xInputCaptureC1Ev>:
CSTM32F10xInputCapture::CSTM32F10xInputCapture()
 8001988:	4b01      	ldr	r3, [pc, #4]	; (8001990 <_ZN22CSTM32F10xInputCaptureC1Ev+0x8>)
 800198a:	6003      	str	r3, [r0, #0]
}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	08002480 	.word	0x08002480

08001994 <_ZNK15CSTM32F10xTimer12CurrentTicksEv>:
	m_pTimer=pTimer;
}

uint16_t CSTM32F10xTimer::CurrentTicks() const
{
	return m_pTimer->CNT;
 8001994:	6843      	ldr	r3, [r0, #4]
 8001996:	8c98      	ldrh	r0, [r3, #36]	; 0x24
}
 8001998:	b280      	uxth	r0, r0
 800199a:	4770      	bx	lr

0800199c <_ZN15CSTM32F10xTimerD1Ev>:
}

CSTM32F10xTimer::~CSTM32F10xTimer()
{
	// TODO Auto-generated destructor stub
}
 800199c:	4770      	bx	lr

0800199e <_ZN15CSTM32F10xTimerD0Ev>:
CSTM32F10xTimer::~CSTM32F10xTimer()
 800199e:	b510      	push	{r4, lr}
 80019a0:	4604      	mov	r4, r0
}
 80019a2:	f000 fbd1 	bl	8002148 <_ZdlPv>
 80019a6:	4620      	mov	r0, r4
 80019a8:	bd10      	pop	{r4, pc}

080019aa <_ZN15CSTM32F10xTimer4InitEP11TIM_TypeDef>:
	m_pTimer=pTimer;
 80019aa:	6041      	str	r1, [r0, #4]
 80019ac:	4770      	bx	lr
	...

080019b0 <_ZN15CSTM32F10xTimerC1Ev>:
CSTM32F10xTimer::CSTM32F10xTimer()
 80019b0:	4b01      	ldr	r3, [pc, #4]	; (80019b8 <_ZN15CSTM32F10xTimerC1Ev+0x8>)
 80019b2:	6003      	str	r3, [r0, #0]
}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	08002498 	.word	0x08002498

080019bc <_ZN15CSTM32F10xUSART4ReadEPhPt>:
bool CSTM32F10xUSART::Read(unsigned char* pData, uint16_t* pLength)
{
//	for(uint16_t i=0;i<)
//	pData
	return false;
}
 80019bc:	2000      	movs	r0, #0
 80019be:	4770      	bx	lr

080019c0 <_ZN15CSTM32F10xUSARTD1Ev>:
}

CSTM32F10xUSART::~CSTM32F10xUSART()
{
	// TODO Auto-generated destructor stub
}
 80019c0:	4770      	bx	lr

080019c2 <_ZN13CCircularFifoIcLj322EED1Ev>:
	{
		Capacity = Size + 1
	};

	CCircularFifo() : m_Tail(0), m_Head(0) {}
	virtual ~CCircularFifo() {}
 80019c2:	4770      	bx	lr

080019c4 <_ZN13CCircularFifoIcLj322EED0Ev>:
 80019c4:	b510      	push	{r4, lr}
 80019c6:	4604      	mov	r4, r0
 80019c8:	f000 fbbe 	bl	8002148 <_ZdlPv>
 80019cc:	4620      	mov	r0, r4
 80019ce:	bd10      	pop	{r4, pc}

080019d0 <_ZN15CSTM32F10xUSARTD0Ev>:
CSTM32F10xUSART::~CSTM32F10xUSART()
 80019d0:	b510      	push	{r4, lr}
 80019d2:	4604      	mov	r4, r0
}
 80019d4:	f000 fbb8 	bl	8002148 <_ZdlPv>
 80019d8:	4620      	mov	r0, r4
 80019da:	bd10      	pop	{r4, pc}

080019dc <_ZN15CSTM32F10xUSART4InitEP13USART_TypeDef>:
	m_pUsart = pUsart;
 80019dc:	6041      	str	r1, [r0, #4]
 80019de:	4770      	bx	lr

080019e0 <_ZN15CSTM32F10xUSARTC1Ev>:
CSTM32F10xUSART::CSTM32F10xUSART()
 80019e0:	4a07      	ldr	r2, [pc, #28]	; (8001a00 <_ZN15CSTM32F10xUSARTC1Ev+0x20>)
 80019e2:	6002      	str	r2, [r0, #0]
	CCircularFifo() : m_Tail(0), m_Head(0) {}
 80019e4:	4907      	ldr	r1, [pc, #28]	; (8001a04 <_ZN15CSTM32F10xUSARTC1Ev+0x24>)
 80019e6:	6081      	str	r1, [r0, #8]
 80019e8:	2200      	movs	r2, #0
 80019ea:	60c2      	str	r2, [r0, #12]
 80019ec:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
 80019f0:	f8c0 1158 	str.w	r1, [r0, #344]	; 0x158
 80019f4:	f8c0 215c 	str.w	r2, [r0, #348]	; 0x15c
 80019f8:	f8c0 22a4 	str.w	r2, [r0, #676]	; 0x2a4
}
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	080024bc 	.word	0x080024bc
 8001a04:	080024ac 	.word	0x080024ac

08001a08 <_ZNK13CCircularFifoIcLj322EE7IsEmptyEv>:
 *
 * \return true if circular buffer is empty */
template<typename Element, unsigned int Size>
bool CCircularFifo<Element, Size>::IsEmpty() const
{
	return (m_Head == m_Tail);
 8001a08:	f8d0 214c 	ldr.w	r2, [r0, #332]	; 0x14c
 8001a0c:	6840      	ldr	r0, [r0, #4]
}
 8001a0e:	4282      	cmp	r2, r0
 8001a10:	bf14      	ite	ne
 8001a12:	2000      	movne	r0, #0
 8001a14:	2001      	moveq	r0, #1
 8001a16:	4770      	bx	lr

08001a18 <_ZN15CSTM32F10xUSART7HasDataEv>:
{
 8001a18:	b508      	push	{r3, lr}
	return !m_RxBuffer.IsEmpty();
 8001a1a:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 8001a1e:	f7ff fff3 	bl	8001a08 <_ZNK13CCircularFifoIcLj322EE7IsEmptyEv>
 8001a22:	f080 0001 	eor.w	r0, r0, #1
}
 8001a26:	b2c0      	uxtb	r0, r0
 8001a28:	bd08      	pop	{r3, pc}
	...

08001a2c <_ZNK13CCircularFifoIcLj322EE9incrementEj>:
	//    index++;
	//    if(index == array.lenght) -> index = 0;
	//
	//or as written below:
	//    index = (index+1) % array.length
	idx_ = (idx_ + 1) % Capacity;
 8001a2c:	3101      	adds	r1, #1
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <_ZNK13CCircularFifoIcLj322EE9incrementEj+0x1c>)
 8001a30:	fba3 2301 	umull	r2, r3, r3, r1
 8001a34:	1ac8      	subs	r0, r1, r3
 8001a36:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8001a3a:	0a1b      	lsrs	r3, r3, #8
	return idx_;
}
 8001a3c:	f240 1043 	movw	r0, #323	; 0x143
 8001a40:	fb00 1013 	mls	r0, r0, r3, r1
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	95cbb0bf 	.word	0x95cbb0bf

08001a4c <_ZN13CCircularFifoIcLj322EE4PushERc>:
bool CCircularFifo<Element, Size>::Push(Element& item_)
 8001a4c:	b538      	push	{r3, r4, r5, lr}
 8001a4e:	4604      	mov	r4, r0
 8001a50:	460d      	mov	r5, r1
	unsigned int nextTail = increment(m_Tail);
 8001a52:	6841      	ldr	r1, [r0, #4]
 8001a54:	f7ff ffea 	bl	8001a2c <_ZNK13CCircularFifoIcLj322EE9incrementEj>
	if (nextTail != m_Head)
 8001a58:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
 8001a5c:	4298      	cmp	r0, r3
 8001a5e:	d006      	beq.n	8001a6e <_ZN13CCircularFifoIcLj322EE4PushERc+0x22>
		m_Array[m_Tail] = item_;
 8001a60:	6863      	ldr	r3, [r4, #4]
 8001a62:	782a      	ldrb	r2, [r5, #0]
 8001a64:	4423      	add	r3, r4
 8001a66:	721a      	strb	r2, [r3, #8]
		m_Tail = nextTail;
 8001a68:	6060      	str	r0, [r4, #4]
		return true;
 8001a6a:	2001      	movs	r0, #1
 8001a6c:	bd38      	pop	{r3, r4, r5, pc}
	return false;
 8001a6e:	2000      	movs	r0, #0
}
 8001a70:	bd38      	pop	{r3, r4, r5, pc}

08001a72 <_ZN15CSTM32F10xUSART5WriteEPKct>:
{
 8001a72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a74:	b083      	sub	sp, #12
 8001a76:	4607      	mov	r7, r0
 8001a78:	4616      	mov	r6, r2
	for (i = 0; i < length; i++)
 8001a7a:	2400      	movs	r4, #0
 8001a7c:	42b4      	cmp	r4, r6
 8001a7e:	da0d      	bge.n	8001a9c <_ZN15CSTM32F10xUSART5WriteEPKct+0x2a>
		txData = *data++;
 8001a80:	1c4d      	adds	r5, r1, #1
 8001a82:	780b      	ldrb	r3, [r1, #0]
 8001a84:	a902      	add	r1, sp, #8
 8001a86:	f801 3d01 	strb.w	r3, [r1, #-1]!
		if (!m_TxBuffer.Push(txData)) break;
 8001a8a:	f107 0008 	add.w	r0, r7, #8
 8001a8e:	f7ff ffdd 	bl	8001a4c <_ZN13CCircularFifoIcLj322EE4PushERc>
 8001a92:	b118      	cbz	r0, 8001a9c <_ZN15CSTM32F10xUSART5WriteEPKct+0x2a>
	for (i = 0; i < length; i++)
 8001a94:	3401      	adds	r4, #1
 8001a96:	b2a4      	uxth	r4, r4
		txData = *data++;
 8001a98:	4629      	mov	r1, r5
	for (i = 0; i < length; i++)
 8001a9a:	e7ef      	b.n	8001a7c <_ZN15CSTM32F10xUSART5WriteEPKct+0xa>
}
 8001a9c:	4620      	mov	r0, r4
 8001a9e:	b003      	add	sp, #12
 8001aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001aa2 <_ZN15CSTM32F10xUSART5WriteEPKc>:
{
 8001aa2:	b570      	push	{r4, r5, r6, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	4606      	mov	r6, r0
 8001aa8:	460d      	mov	r5, r1
	uint16_t dataSend = 0;
 8001aaa:	2400      	movs	r4, #0
	while (*data)
 8001aac:	782b      	ldrb	r3, [r5, #0]
 8001aae:	b15b      	cbz	r3, 8001ac8 <_ZN15CSTM32F10xUSART5WriteEPKc+0x26>
		txData = *data++;
 8001ab0:	3501      	adds	r5, #1
 8001ab2:	a902      	add	r1, sp, #8
 8001ab4:	f801 3d01 	strb.w	r3, [r1, #-1]!
		if (m_TxBuffer.Push(txData)) dataSend++;
 8001ab8:	f106 0008 	add.w	r0, r6, #8
 8001abc:	f7ff ffc6 	bl	8001a4c <_ZN13CCircularFifoIcLj322EE4PushERc>
 8001ac0:	b110      	cbz	r0, 8001ac8 <_ZN15CSTM32F10xUSART5WriteEPKc+0x26>
 8001ac2:	3401      	adds	r4, #1
 8001ac4:	b2a4      	uxth	r4, r4
	while (*data)
 8001ac6:	e7f1      	b.n	8001aac <_ZN15CSTM32F10xUSART5WriteEPKc+0xa>
}
 8001ac8:	4620      	mov	r0, r4
 8001aca:	b002      	add	sp, #8
 8001acc:	bd70      	pop	{r4, r5, r6, pc}

08001ace <_ZN15CSTM32F10xUSART9executeRxEv>:
{
 8001ace:	b510      	push	{r4, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	4604      	mov	r4, r0
	if (!USART_GetFlagStatus(m_pUsart, USART_FLAG_RXNE)) return;
 8001ad4:	2120      	movs	r1, #32
 8001ad6:	6840      	ldr	r0, [r0, #4]
 8001ad8:	f7ff fe57 	bl	800178a <USART_GetFlagStatus>
 8001adc:	b908      	cbnz	r0, 8001ae2 <_ZN15CSTM32F10xUSART9executeRxEv+0x14>
}
 8001ade:	b002      	add	sp, #8
 8001ae0:	bd10      	pop	{r4, pc}
	char data = USART_ReceiveData(m_pUsart);
 8001ae2:	6860      	ldr	r0, [r4, #4]
 8001ae4:	f7ff fe42 	bl	800176c <USART_ReceiveData>
 8001ae8:	a902      	add	r1, sp, #8
 8001aea:	f801 0d01 	strb.w	r0, [r1, #-1]!
	m_RxBuffer.Push(data);
 8001aee:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 8001af2:	f7ff ffab 	bl	8001a4c <_ZN13CCircularFifoIcLj322EE4PushERc>
 8001af6:	e7f2      	b.n	8001ade <_ZN15CSTM32F10xUSART9executeRxEv+0x10>

08001af8 <_ZN13CCircularFifoIcLj322EE3PopERc>:
	if (m_Head == m_Tail) return false;  // empty queue
 8001af8:	f8d0 214c 	ldr.w	r2, [r0, #332]	; 0x14c
 8001afc:	6843      	ldr	r3, [r0, #4]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d00e      	beq.n	8001b20 <_ZN13CCircularFifoIcLj322EE3PopERc+0x28>
bool CCircularFifo<Element, Size>::Pop(Element& item_)
 8001b02:	b510      	push	{r4, lr}
 8001b04:	4604      	mov	r4, r0
	item_ = m_Array[m_Head];
 8001b06:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8001b0a:	4403      	add	r3, r0
 8001b0c:	7a1b      	ldrb	r3, [r3, #8]
 8001b0e:	700b      	strb	r3, [r1, #0]
	m_Head = increment(m_Head);
 8001b10:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
 8001b14:	f7ff ff8a 	bl	8001a2c <_ZNK13CCircularFifoIcLj322EE9incrementEj>
 8001b18:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
	return true;
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	bd10      	pop	{r4, pc}
	if (m_Head == m_Tail) return false;  // empty queue
 8001b20:	2000      	movs	r0, #0
 8001b22:	4770      	bx	lr

08001b24 <_ZN15CSTM32F10xUSART8ReadByteEv>:
{
 8001b24:	b500      	push	{lr}
 8001b26:	b083      	sub	sp, #12
	m_RxBuffer.Pop(data);
 8001b28:	f10d 0107 	add.w	r1, sp, #7
 8001b2c:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 8001b30:	f7ff ffe2 	bl	8001af8 <_ZN13CCircularFifoIcLj322EE3PopERc>
}
 8001b34:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001b38:	b003      	add	sp, #12
 8001b3a:	f85d fb04 	ldr.w	pc, [sp], #4

08001b3e <_ZN15CSTM32F10xUSART9executeTxEv>:
{
 8001b3e:	b530      	push	{r4, r5, lr}
 8001b40:	b083      	sub	sp, #12
 8001b42:	4604      	mov	r4, r0
	if (m_TxBuffer.IsEmpty()) return;
 8001b44:	f100 0508 	add.w	r5, r0, #8
 8001b48:	4628      	mov	r0, r5
 8001b4a:	f7ff ff5d 	bl	8001a08 <_ZNK13CCircularFifoIcLj322EE7IsEmptyEv>
 8001b4e:	b108      	cbz	r0, 8001b54 <_ZN15CSTM32F10xUSART9executeTxEv+0x16>
}
 8001b50:	b003      	add	sp, #12
 8001b52:	bd30      	pop	{r4, r5, pc}
	if (!USART_GetFlagStatus(m_pUsart, USART_FLAG_TXE)) return;
 8001b54:	2180      	movs	r1, #128	; 0x80
 8001b56:	6860      	ldr	r0, [r4, #4]
 8001b58:	f7ff fe17 	bl	800178a <USART_GetFlagStatus>
 8001b5c:	2800      	cmp	r0, #0
 8001b5e:	d0f7      	beq.n	8001b50 <_ZN15CSTM32F10xUSART9executeTxEv+0x12>
	m_TxBuffer.Pop(data);
 8001b60:	f10d 0107 	add.w	r1, sp, #7
 8001b64:	4628      	mov	r0, r5
 8001b66:	f7ff ffc7 	bl	8001af8 <_ZN13CCircularFifoIcLj322EE3PopERc>
	USART_SendData(m_pUsart, data);
 8001b6a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001b6e:	6860      	ldr	r0, [r4, #4]
 8001b70:	f7ff fdeb 	bl	800174a <USART_SendData>
 8001b74:	e7ec      	b.n	8001b50 <_ZN15CSTM32F10xUSART9executeTxEv+0x12>

08001b76 <_ZN15CSTM32F10xUSART7ExecuteEv>:
{
 8001b76:	b510      	push	{r4, lr}
 8001b78:	4604      	mov	r4, r0
	executeTx();
 8001b7a:	f7ff ffe0 	bl	8001b3e <_ZN15CSTM32F10xUSART9executeTxEv>
	executeRx();
 8001b7e:	4620      	mov	r0, r4
 8001b80:	f7ff ffa5 	bl	8001ace <_ZN15CSTM32F10xUSART9executeRxEv>
 8001b84:	bd10      	pop	{r4, pc}

08001b86 <_ZN17CACFrequencyMeterD1Ev>:
}

CACFrequencyMeter::~CACFrequencyMeter()
{
	// TODO Auto-generated destructor stub
}
 8001b86:	4770      	bx	lr

08001b88 <_ZN17CACFrequencyMeterD0Ev>:
CACFrequencyMeter::~CACFrequencyMeter()
 8001b88:	b510      	push	{r4, lr}
 8001b8a:	4604      	mov	r4, r0
}
 8001b8c:	f000 fadc 	bl	8002148 <_ZdlPv>
 8001b90:	4620      	mov	r0, r4
 8001b92:	bd10      	pop	{r4, pc}

08001b94 <_ZN17CACFrequencyMeter4InitEP13IInputCapture>:
	m_pIc = pIc;
 8001b94:	6041      	str	r1, [r0, #4]
 8001b96:	4770      	bx	lr

08001b98 <_ZN17CACFrequencyMeter7ExecuteEv>:
{
 8001b98:	b538      	push	{r3, r4, r5, lr}
 8001b9a:	4604      	mov	r4, r0
	if (!m_pIc->IsTriggered()) return;
 8001b9c:	6840      	ldr	r0, [r0, #4]
 8001b9e:	6803      	ldr	r3, [r0, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4798      	blx	r3
 8001ba4:	b900      	cbnz	r0, 8001ba8 <_ZN17CACFrequencyMeter7ExecuteEv+0x10>
 8001ba6:	bd38      	pop	{r3, r4, r5, pc}
	m_CurrentTimeStamp = m_pIc->Read();
 8001ba8:	6860      	ldr	r0, [r4, #4]
 8001baa:	6803      	ldr	r3, [r0, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	4798      	blx	r3
 8001bb0:	4605      	mov	r5, r0
 8001bb2:	8160      	strh	r0, [r4, #10]
	m_Freq = 10000 / (float)(m_CurrentTimeStamp - m_PrevTimeStamp);
 8001bb4:	8920      	ldrh	r0, [r4, #8]
 8001bb6:	1a28      	subs	r0, r5, r0
 8001bb8:	f7fe fb82 	bl	80002c0 <__aeabi_i2f>
 8001bbc:	4601      	mov	r1, r0
 8001bbe:	4803      	ldr	r0, [pc, #12]	; (8001bcc <_ZN17CACFrequencyMeter7ExecuteEv+0x34>)
 8001bc0:	f7fe fc86 	bl	80004d0 <__aeabi_fdiv>
 8001bc4:	60e0      	str	r0, [r4, #12]
	m_PrevTimeStamp = m_CurrentTimeStamp;
 8001bc6:	8125      	strh	r5, [r4, #8]
 8001bc8:	e7ed      	b.n	8001ba6 <_ZN17CACFrequencyMeter7ExecuteEv+0xe>
 8001bca:	bf00      	nop
 8001bcc:	461c4000 	.word	0x461c4000

08001bd0 <_ZN17CACFrequencyMeterC1Ev>:
CACFrequencyMeter::CACFrequencyMeter()
 8001bd0:	4b01      	ldr	r3, [pc, #4]	; (8001bd8 <_ZN17CACFrequencyMeterC1Ev+0x8>)
 8001bd2:	6003      	str	r3, [r0, #0]
}
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	080024e0 	.word	0x080024e0

08001bdc <_ZN8CTimeoutD1Ev>:
}

CTimeout::~CTimeout()
{
	// TODO Auto-generated destructor stub
}
 8001bdc:	4770      	bx	lr

08001bde <_ZN8CTimeoutD0Ev>:
CTimeout::~CTimeout()
 8001bde:	b510      	push	{r4, lr}
 8001be0:	4604      	mov	r4, r0
}
 8001be2:	f000 fab1 	bl	8002148 <_ZdlPv>
 8001be6:	4620      	mov	r0, r4
 8001be8:	bd10      	pop	{r4, pc}

08001bea <_ZN8CTimeout4InitEP6ITimer>:
	m_timer = pTimer;
 8001bea:	6041      	str	r1, [r0, #4]
 8001bec:	4770      	bx	lr

08001bee <_ZN8CTimeout5ResetEv>:
{
 8001bee:	b510      	push	{r4, lr}
 8001bf0:	4604      	mov	r4, r0
	m_prevTimer = m_timer->CurrentTicks();
 8001bf2:	6840      	ldr	r0, [r0, #4]
 8001bf4:	6803      	ldr	r3, [r0, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4798      	blx	r3
 8001bfa:	8160      	strh	r0, [r4, #10]
	m_hasElapsed = false;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	7323      	strb	r3, [r4, #12]
 8001c00:	bd10      	pop	{r4, pc}

08001c02 <_ZN8CTimeout9SetExpiryEt>:
{
 8001c02:	b508      	push	{r3, lr}
	m_expiry = tick;
 8001c04:	8101      	strh	r1, [r0, #8]
	Reset();
 8001c06:	f7ff fff2 	bl	8001bee <_ZN8CTimeout5ResetEv>
 8001c0a:	bd08      	pop	{r3, pc}

08001c0c <_ZN8CTimeout10HasElapsedEv>:
{
 8001c0c:	b510      	push	{r4, lr}
 8001c0e:	4604      	mov	r4, r0
	if (!m_hasElapsed)
 8001c10:	7b03      	ldrb	r3, [r0, #12]
 8001c12:	b10b      	cbz	r3, 8001c18 <_ZN8CTimeout10HasElapsedEv+0xc>
}
 8001c14:	7b20      	ldrb	r0, [r4, #12]
 8001c16:	bd10      	pop	{r4, pc}
		if ((uint16_t)(m_timer->CurrentTicks() - m_prevTimer) >= m_expiry) m_hasElapsed = true;
 8001c18:	6840      	ldr	r0, [r0, #4]
 8001c1a:	6803      	ldr	r3, [r0, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4798      	blx	r3
 8001c20:	8963      	ldrh	r3, [r4, #10]
 8001c22:	1ac0      	subs	r0, r0, r3
 8001c24:	b280      	uxth	r0, r0
 8001c26:	8923      	ldrh	r3, [r4, #8]
 8001c28:	4298      	cmp	r0, r3
 8001c2a:	dbf3      	blt.n	8001c14 <_ZN8CTimeout10HasElapsedEv+0x8>
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	7323      	strb	r3, [r4, #12]
 8001c30:	e7f0      	b.n	8001c14 <_ZN8CTimeout10HasElapsedEv+0x8>
	...

08001c34 <_ZN8CTimeoutC1Ev>:
CTimeout::CTimeout()
 8001c34:	4b01      	ldr	r3, [pc, #4]	; (8001c3c <_ZN8CTimeoutC1Ev+0x8>)
 8001c36:	6003      	str	r3, [r0, #0]
}
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	080024f0 	.word	0x080024f0

08001c40 <_ZN12CAnalogInputD1Ev>:
}

inline CAnalogInput::~CAnalogInput()
{

}
 8001c40:	4770      	bx	lr

08001c42 <_ZN12CAnalogInputD0Ev>:
inline CAnalogInput::~CAnalogInput()
 8001c42:	b510      	push	{r4, lr}
 8001c44:	4604      	mov	r4, r0
}
 8001c46:	f000 fa7f 	bl	8002148 <_ZdlPv>
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	bd10      	pop	{r4, pc}
	...

08001c50 <main>:
#include <ACFrequencyMeter.h>
#include <AnalogInput.h>
#include <HeartBeat.h>

int main(void)
{
 8001c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c54:	f5ad 7d66 	sub.w	sp, sp, #920	; 0x398
	// ----------------- INIT BASIC ---------------------------------------
	// all 72MHz clock and flash init
	SystemInit();
 8001c58:	f000 f9bc 	bl	8001fd4 <SystemInit>
	RCC_ADCCLKConfig(RCC_PCLK2_Div8);
 8001c5c:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8001c60:	f7fe ffbc 	bl	8000bdc <RCC_ADCCLKConfig>
	// peripheral clock enable
	uint32_t apb1Enable = RCC_APB1Periph_SPI2 | RCC_APB1Periph_TIM3 | RCC_APB1Periph_USART3;
	RCC_APB1PeriphClockCmd(apb1Enable, ENABLE);
 8001c64:	2101      	movs	r1, #1
 8001c66:	48a8      	ldr	r0, [pc, #672]	; (8001f08 <main+0x2b8>)
 8001c68:	f7ff f8c0 	bl	8000dec <RCC_APB1PeriphClockCmd>
	uint32_t apb2Enable = RCC_APB2Periph_ADC1 | RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB
			| RCC_APB2Periph_GPIOC;
	RCC_APB2PeriphClockCmd(apb2Enable, ENABLE);
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8001c72:	f7ff f89d 	bl	8000db0 <RCC_APB2PeriphClockCmd>
	uint32_t ahbEnable = RCC_AHBPeriph_DMA1;
	RCC_AHBPeriphClockCmd(ahbEnable, ENABLE);
 8001c76:	2101      	movs	r1, #1
 8001c78:	4608      	mov	r0, r1
 8001c7a:	f7ff f87b 	bl	8000d74 <RCC_AHBPeriphClockCmd>

	// main timer init
	TIM_TimeBaseInitTypeDef timer;
	TIM_TimeBaseStructInit(&timer);
 8001c7e:	a8e3      	add	r0, sp, #908	; 0x38c
 8001c80:	f7ff f9a2 	bl	8000fc8 <TIM_TimeBaseStructInit>
	timer.TIM_Period = 0xffff;
 8001c84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c88:	f8ad 3390 	strh.w	r3, [sp, #912]	; 0x390
	timer.TIM_Prescaler = 7199; // 100us timer period!
 8001c8c:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8001c90:	f8ad 338c 	strh.w	r3, [sp, #908]	; 0x38c
	TIM_TimeBaseInit(TIM3, &timer);
 8001c94:	4d9d      	ldr	r5, [pc, #628]	; (8001f0c <main+0x2bc>)
 8001c96:	a9e3      	add	r1, sp, #908	; 0x38c
 8001c98:	4628      	mov	r0, r5
 8001c9a:	f7ff f8c5 	bl	8000e28 <TIM_TimeBaseInit>
	TIM_Cmd(TIM3, ENABLE);
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	4628      	mov	r0, r5
 8001ca2:	f7ff f9c2 	bl	800102a <TIM_Cmd>

	GPIO_InitTypeDef sGpio;
	// heartbeat
	sGpio.GPIO_Pin = GPIO_Pin_13;
 8001ca6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001caa:	f8ad 3388 	strh.w	r3, [sp, #904]	; 0x388
	sGpio.GPIO_Speed = GPIO_Speed_2MHz;
 8001cae:	2402      	movs	r4, #2
 8001cb0:	f88d 438a 	strb.w	r4, [sp, #906]	; 0x38a
	sGpio.GPIO_Mode = GPIO_Mode_Out_OD;
 8001cb4:	2314      	movs	r3, #20
 8001cb6:	f88d 338b 	strb.w	r3, [sp, #907]	; 0x38b
	GPIO_Init(GPIOC, &sGpio); // pc13
 8001cba:	4e95      	ldr	r6, [pc, #596]	; (8001f10 <main+0x2c0>)
 8001cbc:	a9e2      	add	r1, sp, #904	; 0x388
 8001cbe:	4630      	mov	r0, r6
 8001cc0:	f7fe febc 	bl	8000a3c <GPIO_Init>

	CSTM32F10xTimer MainTimer;
 8001cc4:	a8e0      	add	r0, sp, #896	; 0x380
 8001cc6:	f7ff fe73 	bl	80019b0 <_ZN15CSTM32F10xTimerC1Ev>
	MainTimer.Init(TIM3);
 8001cca:	4629      	mov	r1, r5
 8001ccc:	a8e0      	add	r0, sp, #896	; 0x380
 8001cce:	f7ff fe6c 	bl	80019aa <_ZN15CSTM32F10xTimer4InitEP11TIM_TypeDef>
	CSTM32F10xGpio GpioHeartBeat;
 8001cd2:	a8dc      	add	r0, sp, #880	; 0x370
 8001cd4:	f7ff fdf8 	bl	80018c8 <_ZN14CSTM32F10xGpioC1Ev>
	GpioHeartBeat.Init(GPIOC, 13);
 8001cd8:	220d      	movs	r2, #13
 8001cda:	4631      	mov	r1, r6
 8001cdc:	a8dc      	add	r0, sp, #880	; 0x370
 8001cde:	f7ff fde6 	bl	80018ae <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh>
	CHeartBeat HeartBeat;
 8001ce2:	a8d6      	add	r0, sp, #856	; 0x358
 8001ce4:	f7ff fd94 	bl	8001810 <_ZN10CHeartBeatC1Ev>
	HeartBeat.Init(&GpioHeartBeat, &MainTimer, 5000);
 8001ce8:	f241 3388 	movw	r3, #5000	; 0x1388
 8001cec:	aae0      	add	r2, sp, #896	; 0x380
 8001cee:	a9dc      	add	r1, sp, #880	; 0x370
 8001cf0:	a8d6      	add	r0, sp, #856	; 0x358
 8001cf2:	f7ff fd65 	bl	80017c0 <_ZN10CHeartBeat4InitEP5IGpioP6ITimert>

	// --------------------------------------------------------------------

	// --------------- INIT EEPROM ----------------------------------------
	sGpio.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7; // sda1 scl1
 8001cf6:	23c0      	movs	r3, #192	; 0xc0
 8001cf8:	f8ad 3388 	strh.w	r3, [sp, #904]	; 0x388
	sGpio.GPIO_Speed = GPIO_Speed_2MHz;
 8001cfc:	f88d 438a 	strb.w	r4, [sp, #906]	; 0x38a
	sGpio.GPIO_Mode = GPIO_Mode_AF_OD;
 8001d00:	261c      	movs	r6, #28
 8001d02:	f88d 638b 	strb.w	r6, [sp, #907]	; 0x38b
	GPIO_Init(GPIOB, &sGpio);
 8001d06:	f505 3584 	add.w	r5, r5, #67584	; 0x10800
 8001d0a:	a9e2      	add	r1, sp, #904	; 0x388
 8001d0c:	4628      	mov	r0, r5
 8001d0e:	f7fe fe95 	bl	8000a3c <GPIO_Init>

	// --------------------------------------------------------------------

	// --------------- UART Initialization -----------------------------
	sGpio.GPIO_Pin = GPIO_Pin_10; // tx3
 8001d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d16:	f8ad 3388 	strh.w	r3, [sp, #904]	; 0x388
	sGpio.GPIO_Speed = GPIO_Speed_2MHz;
 8001d1a:	f88d 438a 	strb.w	r4, [sp, #906]	; 0x38a
	sGpio.GPIO_Mode = GPIO_Mode_AF_PP;
 8001d1e:	2318      	movs	r3, #24
 8001d20:	f88d 338b 	strb.w	r3, [sp, #907]	; 0x38b
	GPIO_Init(GPIOB, &sGpio);
 8001d24:	a9e2      	add	r1, sp, #904	; 0x388
 8001d26:	4628      	mov	r0, r5
 8001d28:	f7fe fe88 	bl	8000a3c <GPIO_Init>
	sGpio.GPIO_Pin = GPIO_Pin_11; // rx3
 8001d2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d30:	f8ad 3388 	strh.w	r3, [sp, #904]	; 0x388
	sGpio.GPIO_Speed = GPIO_Speed_2MHz;
 8001d34:	f88d 438a 	strb.w	r4, [sp, #906]	; 0x38a
	sGpio.GPIO_Mode = GPIO_Mode_AF_OD;
 8001d38:	f88d 638b 	strb.w	r6, [sp, #907]	; 0x38b
	GPIO_Init(GPIOB, &sGpio);
 8001d3c:	a9e2      	add	r1, sp, #904	; 0x388
 8001d3e:	4628      	mov	r0, r5
 8001d40:	f7fe fe7c 	bl	8000a3c <GPIO_Init>

	USART_InitTypeDef usart;
	usart.USART_BaudRate = 9600;
 8001d44:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001d48:	93d2      	str	r3, [sp, #840]	; 0x348
	usart.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f8ad 3354 	strh.w	r3, [sp, #852]	; 0x354
	usart.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001d50:	220c      	movs	r2, #12
 8001d52:	f8ad 2352 	strh.w	r2, [sp, #850]	; 0x352
	usart.USART_Parity = USART_Parity_No;
 8001d56:	f8ad 3350 	strh.w	r3, [sp, #848]	; 0x350
	usart.USART_StopBits = USART_StopBits_1;
 8001d5a:	f8ad 334e 	strh.w	r3, [sp, #846]	; 0x34e
	usart.USART_WordLength = USART_WordLength_8b;
 8001d5e:	f8ad 334c 	strh.w	r3, [sp, #844]	; 0x34c
	USART_Init(USART3, &usart);
 8001d62:	4c6c      	ldr	r4, [pc, #432]	; (8001f14 <main+0x2c4>)
 8001d64:	a9d2      	add	r1, sp, #840	; 0x348
 8001d66:	4620      	mov	r0, r4
 8001d68:	f7ff fc16 	bl	8001598 <USART_Init>
	USART_Cmd(USART3, ENABLE);
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	4620      	mov	r0, r4
 8001d70:	f7ff fccc 	bl	800170c <USART_Cmd>
	CSTM32F10xUSART Uart;
 8001d74:	a828      	add	r0, sp, #160	; 0xa0
 8001d76:	f7ff fe33 	bl	80019e0 <_ZN15CSTM32F10xUSARTC1Ev>
	Uart.Init(USART3);
 8001d7a:	4621      	mov	r1, r4
 8001d7c:	a828      	add	r0, sp, #160	; 0xa0
 8001d7e:	f7ff fe2d 	bl	80019dc <_ZN15CSTM32F10xUSART4InitEP13USART_TypeDef>
	// -----------------------------------------------------------------

	// ------------------------- Init ADC ------------------------------
	CSTM32F10xADC Adc[2];
 8001d82:	2501      	movs	r5, #1
 8001d84:	ac24      	add	r4, sp, #144	; 0x90
 8001d86:	2d00      	cmp	r5, #0
 8001d88:	db05      	blt.n	8001d96 <main+0x146>
 8001d8a:	4620      	mov	r0, r4
 8001d8c:	f7ff fd6e 	bl	800186c <_ZN13CSTM32F10xADCC1Ev>
 8001d90:	3408      	adds	r4, #8
 8001d92:	3d01      	subs	r5, #1
 8001d94:	e7f7      	b.n	8001d86 <main+0x136>
 8001d96:	2400      	movs	r4, #0
	uint16_t adcBuffer[2];
	for (uint16_t i = 0; i < 2; i++)
 8001d98:	2c01      	cmp	r4, #1
 8001d9a:	dc0a      	bgt.n	8001db2 <main+0x162>
	{
		Adc[i].Init(&adcBuffer[i]);
 8001d9c:	ab23      	add	r3, sp, #140	; 0x8c
 8001d9e:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 8001da2:	ab24      	add	r3, sp, #144	; 0x90
 8001da4:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
 8001da8:	f7ff fd5d 	bl	8001866 <_ZN13CSTM32F10xADC4InitEPt>
	for (uint16_t i = 0; i < 2; i++)
 8001dac:	3401      	adds	r4, #1
 8001dae:	b2a4      	uxth	r4, r4
 8001db0:	e7f2      	b.n	8001d98 <main+0x148>
	}
//	 adc io init
	GPIO_StructInit(&sGpio);
 8001db2:	a8e2      	add	r0, sp, #904	; 0x388
 8001db4:	f7fe fefe 	bl	8000bb4 <GPIO_StructInit>
	sGpio.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1; // adc0 adc1
 8001db8:	2303      	movs	r3, #3
 8001dba:	f8ad 3388 	strh.w	r3, [sp, #904]	; 0x388
	sGpio.GPIO_Mode = GPIO_Mode_AIN;
 8001dbe:	2600      	movs	r6, #0
 8001dc0:	f88d 638b 	strb.w	r6, [sp, #907]	; 0x38b
	GPIO_Init(GPIOA, &sGpio);
 8001dc4:	f8df 8160 	ldr.w	r8, [pc, #352]	; 8001f28 <main+0x2d8>
 8001dc8:	a9e2      	add	r1, sp, #904	; 0x388
 8001dca:	4640      	mov	r0, r8
 8001dcc:	f7fe fe36 	bl	8000a3c <GPIO_Init>

	// adc dma init
	DMA_InitTypeDef dma;
	DMA_StructInit(&dma);
 8001dd0:	a818      	add	r0, sp, #96	; 0x60
 8001dd2:	f7fe fded 	bl	80009b0 <DMA_StructInit>
	dma.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8001dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dda:	931f      	str	r3, [sp, #124]	; 0x7c
	dma.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8001ddc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001de0:	931e      	str	r3, [sp, #120]	; 0x78
	dma.DMA_DIR = DMA_DIR_PeripheralSRC;
 8001de2:	961a      	str	r6, [sp, #104]	; 0x68
	dma.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8001de4:	2380      	movs	r3, #128	; 0x80
 8001de6:	931d      	str	r3, [sp, #116]	; 0x74
	dma.DMA_Mode = DMA_Mode_Circular;
 8001de8:	2320      	movs	r3, #32
 8001dea:	9320      	str	r3, [sp, #128]	; 0x80
	dma.DMA_BufferSize = 2;
 8001dec:	2702      	movs	r7, #2
 8001dee:	971b      	str	r7, [sp, #108]	; 0x6c
	dma.DMA_Priority = DMA_Priority_Low;
 8001df0:	9621      	str	r6, [sp, #132]	; 0x84
	dma.DMA_MemoryBaseAddr = (uint32_t)adcBuffer;
 8001df2:	ab23      	add	r3, sp, #140	; 0x8c
 8001df4:	9319      	str	r3, [sp, #100]	; 0x64
	dma.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
 8001df6:	4b48      	ldr	r3, [pc, #288]	; (8001f18 <main+0x2c8>)
 8001df8:	9318      	str	r3, [sp, #96]	; 0x60
	DMA_Init(DMA1_Channel1, &dma);
 8001dfa:	4c48      	ldr	r4, [pc, #288]	; (8001f1c <main+0x2cc>)
 8001dfc:	a918      	add	r1, sp, #96	; 0x60
 8001dfe:	4620      	mov	r0, r4
 8001e00:	f7fe fd98 	bl	8000934 <DMA_Init>
	DMA_Cmd(DMA1_Channel1, ENABLE);
 8001e04:	2101      	movs	r1, #1
 8001e06:	4620      	mov	r0, r4
 8001e08:	f7fe fdfc 	bl	8000a04 <DMA_Cmd>

	// adc peripheral init
	ADC_InitTypeDef adc;
	ADC_StructInit(&adc);
 8001e0c:	a813      	add	r0, sp, #76	; 0x4c
 8001e0e:	f7fe fc4d 	bl	80006ac <ADC_StructInit>
	adc.ADC_ContinuousConvMode = ENABLE;
 8001e12:	2401      	movs	r4, #1
 8001e14:	f88d 4051 	strb.w	r4, [sp, #81]	; 0x51
	adc.ADC_NbrOfChannel = 2;
 8001e18:	f88d 705c 	strb.w	r7, [sp, #92]	; 0x5c
	adc.ADC_ScanConvMode = ENABLE;
 8001e1c:	f88d 4050 	strb.w	r4, [sp, #80]	; 0x50
	ADC_Init(ADC1, &adc);
 8001e20:	4d3f      	ldr	r5, [pc, #252]	; (8001f20 <main+0x2d0>)
 8001e22:	a913      	add	r1, sp, #76	; 0x4c
 8001e24:	4628      	mov	r0, r5
 8001e26:	f7fe fbef 	bl	8000608 <ADC_Init>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_239Cycles5);
 8001e2a:	2307      	movs	r3, #7
 8001e2c:	4622      	mov	r2, r4
 8001e2e:	4631      	mov	r1, r6
 8001e30:	4628      	mov	r0, r5
 8001e32:	f7fe fcb6 	bl	80007a2 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 2, ADC_SampleTime_239Cycles5);
 8001e36:	2307      	movs	r3, #7
 8001e38:	463a      	mov	r2, r7
 8001e3a:	4621      	mov	r1, r4
 8001e3c:	4628      	mov	r0, r5
 8001e3e:	f7fe fcb0 	bl	80007a2 <ADC_RegularChannelConfig>
	ADC1->CR2 |= 7 << 17; // extenal trigger on software
 8001e42:	68ab      	ldr	r3, [r5, #8]
 8001e44:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8001e48:	60ab      	str	r3, [r5, #8]
	ADC_DMACmd(ADC1, ENABLE);
 8001e4a:	4621      	mov	r1, r4
 8001e4c:	4628      	mov	r0, r5
 8001e4e:	f7fe fc63 	bl	8000718 <ADC_DMACmd>
	ADC_Cmd(ADC1, ENABLE);
 8001e52:	4621      	mov	r1, r4
 8001e54:	4628      	mov	r0, r5
 8001e56:	f7fe fc44 	bl	80006e2 <ADC_Cmd>
	ADC_SoftwareStartConvCmd(ADC1, ENABLE);
 8001e5a:	4621      	mov	r1, r4
 8001e5c:	4628      	mov	r0, r5
 8001e5e:	f7fe fc85 	bl	800076c <ADC_SoftwareStartConvCmd>
	ADC_StartCalibration(ADC1);
 8001e62:	4628      	mov	r0, r5
 8001e64:	f7fe fc73 	bl	800074e <ADC_StartCalibration>

	// -----------------------------------------------------------------

	// ------------------------- Init input capture ------------------------------
	GPIO_StructInit(&sGpio);
 8001e68:	a8e2      	add	r0, sp, #904	; 0x388
 8001e6a:	f7fe fea3 	bl	8000bb4 <GPIO_StructInit>
	sGpio.GPIO_Pin = GPIO_Pin_6; // tim3 channel 1
 8001e6e:	2340      	movs	r3, #64	; 0x40
 8001e70:	f8ad 3388 	strh.w	r3, [sp, #904]	; 0x388
	sGpio.GPIO_Mode = GPIO_Mode_AF_OD;
 8001e74:	231c      	movs	r3, #28
 8001e76:	f88d 338b 	strb.w	r3, [sp, #907]	; 0x38b
	sGpio.GPIO_Speed = GPIO_Speed_2MHz;
 8001e7a:	f88d 738a 	strb.w	r7, [sp, #906]	; 0x38a
	GPIO_Init(GPIOA, &sGpio);
 8001e7e:	a9e2      	add	r1, sp, #904	; 0x388
 8001e80:	4640      	mov	r0, r8
 8001e82:	f7fe fddb 	bl	8000a3c <GPIO_Init>

	TIM_ICInitTypeDef sInputCapture;
	TIM_ICStructInit(&sInputCapture);
 8001e86:	a810      	add	r0, sp, #64	; 0x40
 8001e88:	f7ff f8b7 	bl	8000ffa <TIM_ICStructInit>
	sInputCapture.TIM_Channel = TIM_Channel_1;
 8001e8c:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
	TIM_ICInit(TIM3, &sInputCapture);
 8001e90:	f5a5 3590 	sub.w	r5, r5, #73728	; 0x12000
 8001e94:	a910      	add	r1, sp, #64	; 0x40
 8001e96:	4628      	mov	r0, r5
 8001e98:	f7ff f842 	bl	8000f20 <TIM_ICInit>
	CSTM32F10xInputCapture InputCapture;
 8001e9c:	a80d      	add	r0, sp, #52	; 0x34
 8001e9e:	f7ff fd73 	bl	8001988 <_ZN22CSTM32F10xInputCaptureC1Ev>
	InputCapture.Init(TIM3, TIM_Channel_1);
 8001ea2:	4632      	mov	r2, r6
 8001ea4:	4629      	mov	r1, r5
 8001ea6:	a80d      	add	r0, sp, #52	; 0x34
 8001ea8:	f7ff fd6b 	bl	8001982 <_ZN22CSTM32F10xInputCapture4InitEP11TIM_TypeDeft>

	// ----------------------------------------------------------------

	// init our basic need !
	// frequency meter
	CACFrequencyMeter ACFrequencyMeter;
 8001eac:	a809      	add	r0, sp, #36	; 0x24
 8001eae:	f7ff fe8f 	bl	8001bd0 <_ZN17CACFrequencyMeterC1Ev>
	ACFrequencyMeter.Init(&InputCapture);
 8001eb2:	a90d      	add	r1, sp, #52	; 0x34
 8001eb4:	a809      	add	r0, sp, #36	; 0x24
 8001eb6:	f7ff fe6d 	bl	8001b94 <_ZN17CACFrequencyMeter4InitEP13IInputCapture>
	// voltage and current measurement
	CAnalogInput AnalogInput[2];
 8001eba:	ab01      	add	r3, sp, #4
 8001ebc:	2c00      	cmp	r4, #0
 8001ebe:	db0b      	blt.n	8001ed8 <main+0x288>
inline CAnalogInput::CAnalogInput()
 8001ec0:	4a18      	ldr	r2, [pc, #96]	; (8001f24 <main+0x2d4>)
 8001ec2:	601a      	str	r2, [r3, #0]
	m_pAdc = NULL;
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	60da      	str	r2, [r3, #12]
	m_Scale = 1;
 8001ec8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ecc:	605a      	str	r2, [r3, #4]
	m_Offset = 0;
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
 8001ed2:	3310      	adds	r3, #16
 8001ed4:	3c01      	subs	r4, #1
 8001ed6:	e7f1      	b.n	8001ebc <main+0x26c>
 8001ed8:	2300      	movs	r3, #0
	for (uint16_t i = 0; i < 2; i++)
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	dc09      	bgt.n	8001ef2 <main+0x2a2>
	{
		AnalogInput[i].Initialize(&Adc[i]);
 8001ede:	aa24      	add	r2, sp, #144	; 0x90
 8001ee0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3

inline void CAnalogInput::Initialize(IAdc* pAdc)
{
	m_pAdc = pAdc;
 8001ee4:	aa01      	add	r2, sp, #4
 8001ee6:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8001eea:	60d1      	str	r1, [r2, #12]
	for (uint16_t i = 0; i < 2; i++)
 8001eec:	3301      	adds	r3, #1
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	e7f3      	b.n	8001eda <main+0x28a>
	}
	while (1)
	{
		ACFrequencyMeter.Execute();
 8001ef2:	a809      	add	r0, sp, #36	; 0x24
 8001ef4:	f7ff fe50 	bl	8001b98 <_ZN17CACFrequencyMeter7ExecuteEv>
		HeartBeat.Execute();
 8001ef8:	a8d6      	add	r0, sp, #856	; 0x358
 8001efa:	f7ff fc6e 	bl	80017da <_ZN10CHeartBeat7ExecuteEv>
		Uart.Execute();
 8001efe:	a828      	add	r0, sp, #160	; 0xa0
 8001f00:	f7ff fe39 	bl	8001b76 <_ZN15CSTM32F10xUSART7ExecuteEv>
 8001f04:	e7f5      	b.n	8001ef2 <main+0x2a2>
 8001f06:	bf00      	nop
 8001f08:	00044002 	.word	0x00044002
 8001f0c:	40000400 	.word	0x40000400
 8001f10:	40011000 	.word	0x40011000
 8001f14:	40004800 	.word	0x40004800
 8001f18:	4001244c 	.word	0x4001244c
 8001f1c:	40020008 	.word	0x40020008
 8001f20:	40012400 	.word	0x40012400
 8001f24:	08002500 	.word	0x08002500
 8001f28:	40010800 	.word	0x40010800

08001f2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001f30:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001f32:	e003      	b.n	8001f3c <LoopCopyDataInit>

08001f34 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8001f36:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001f38:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001f3a:	3104      	adds	r1, #4

08001f3c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001f3c:	480b      	ldr	r0, [pc, #44]	; (8001f6c <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8001f3e:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8001f40:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001f42:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001f44:	d3f6      	bcc.n	8001f34 <CopyDataInit>
	ldr	r2, =_sbss
 8001f46:	4a0b      	ldr	r2, [pc, #44]	; (8001f74 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8001f48:	e002      	b.n	8001f50 <LoopFillZerobss>

08001f4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001f4a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001f4c:	f842 3b04 	str.w	r3, [r2], #4

08001f50 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001f50:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8001f52:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001f54:	d3f9      	bcc.n	8001f4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f56:	f000 f83d 	bl	8001fd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f5a:	f000 f8f7 	bl	800214c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f5e:	f7ff fe77 	bl	8001c50 <main>
	bx	lr
 8001f62:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f64:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8001f68:	08002518 	.word	0x08002518
	ldr	r0, =_sdata
 8001f6c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001f70:	20000518 	.word	0x20000518
	ldr	r2, =_sbss
 8001f74:	20000518 	.word	0x20000518
	ldr	r3, = _ebss
 8001f78:	20000574 	.word	0x20000574

08001f7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f7c:	e7fe      	b.n	8001f7c <ADC1_2_IRQHandler>

08001f7e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0
}
 8001f82:	bf00      	nop
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr

08001f8a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001f8e:	e7fe      	b.n	8001f8e <HardFault_Handler+0x4>

08001f90 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001f94:	e7fe      	b.n	8001f94 <MemManage_Handler+0x4>

08001f96 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001f9a:	e7fe      	b.n	8001f9a <BusFault_Handler+0x4>

08001f9c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001fa0:	e7fe      	b.n	8001fa0 <UsageFault_Handler+0x4>

08001fa2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0
}
 8001fa6:	bf00      	nop
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr

08001fae <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0
}
 8001fb2:	bf00      	nop
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bc80      	pop	{r7}
 8001fb8:	4770      	bx	lr

08001fba <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0
}
 8001fbe:	bf00      	nop
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr

08001fc6 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0
}
 8001fca:	bf00      	nop
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr
	...

08001fd4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001fd8:	4a15      	ldr	r2, [pc, #84]	; (8002030 <SystemInit+0x5c>)
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <SystemInit+0x5c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001fe4:	4912      	ldr	r1, [pc, #72]	; (8002030 <SystemInit+0x5c>)
 8001fe6:	4b12      	ldr	r3, [pc, #72]	; (8002030 <SystemInit+0x5c>)
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	4b12      	ldr	r3, [pc, #72]	; (8002034 <SystemInit+0x60>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001ff0:	4a0f      	ldr	r2, [pc, #60]	; (8002030 <SystemInit+0x5c>)
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <SystemInit+0x5c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ffe:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002000:	4a0b      	ldr	r2, [pc, #44]	; (8002030 <SystemInit+0x5c>)
 8002002:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <SystemInit+0x5c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800200a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800200c:	4a08      	ldr	r2, [pc, #32]	; (8002030 <SystemInit+0x5c>)
 800200e:	4b08      	ldr	r3, [pc, #32]	; (8002030 <SystemInit+0x5c>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002016:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8002018:	4b05      	ldr	r3, [pc, #20]	; (8002030 <SystemInit+0x5c>)
 800201a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800201e:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8002020:	f000 f80c 	bl	800203c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002024:	4b04      	ldr	r3, [pc, #16]	; (8002038 <SystemInit+0x64>)
 8002026:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800202a:	609a      	str	r2, [r3, #8]
#endif 
}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40021000 	.word	0x40021000
 8002034:	f8ff0000 	.word	0xf8ff0000
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8002040:	f000 f802 	bl	8002048 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}

08002048 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	607b      	str	r3, [r7, #4]
 8002052:	2300      	movs	r3, #0
 8002054:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002056:	4a3a      	ldr	r2, [pc, #232]	; (8002140 <SetSysClockTo72+0xf8>)
 8002058:	4b39      	ldr	r3, [pc, #228]	; (8002140 <SetSysClockTo72+0xf8>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002060:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002062:	4b37      	ldr	r3, [pc, #220]	; (8002140 <SetSysClockTo72+0xf8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3301      	adds	r3, #1
 8002070:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d103      	bne.n	8002080 <SetSysClockTo72+0x38>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800207e:	d1f0      	bne.n	8002062 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002080:	4b2f      	ldr	r3, [pc, #188]	; (8002140 <SetSysClockTo72+0xf8>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d002      	beq.n	8002092 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800208c:	2301      	movs	r3, #1
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	e001      	b.n	8002096 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002092:	2300      	movs	r3, #0
 8002094:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d14b      	bne.n	8002134 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800209c:	4a29      	ldr	r2, [pc, #164]	; (8002144 <SetSysClockTo72+0xfc>)
 800209e:	4b29      	ldr	r3, [pc, #164]	; (8002144 <SetSysClockTo72+0xfc>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f043 0310 	orr.w	r3, r3, #16
 80020a6:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80020a8:	4a26      	ldr	r2, [pc, #152]	; (8002144 <SetSysClockTo72+0xfc>)
 80020aa:	4b26      	ldr	r3, [pc, #152]	; (8002144 <SetSysClockTo72+0xfc>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f023 0303 	bic.w	r3, r3, #3
 80020b2:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80020b4:	4a23      	ldr	r2, [pc, #140]	; (8002144 <SetSysClockTo72+0xfc>)
 80020b6:	4b23      	ldr	r3, [pc, #140]	; (8002144 <SetSysClockTo72+0xfc>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f043 0302 	orr.w	r3, r3, #2
 80020be:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80020c0:	4a1f      	ldr	r2, [pc, #124]	; (8002140 <SetSysClockTo72+0xf8>)
 80020c2:	4b1f      	ldr	r3, [pc, #124]	; (8002140 <SetSysClockTo72+0xf8>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80020c8:	4a1d      	ldr	r2, [pc, #116]	; (8002140 <SetSysClockTo72+0xf8>)
 80020ca:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <SetSysClockTo72+0xf8>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80020d0:	4a1b      	ldr	r2, [pc, #108]	; (8002140 <SetSysClockTo72+0xf8>)
 80020d2:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <SetSysClockTo72+0xf8>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020da:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80020dc:	4a18      	ldr	r2, [pc, #96]	; (8002140 <SetSysClockTo72+0xf8>)
 80020de:	4b18      	ldr	r3, [pc, #96]	; (8002140 <SetSysClockTo72+0xf8>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80020e6:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80020e8:	4a15      	ldr	r2, [pc, #84]	; (8002140 <SetSysClockTo72+0xf8>)
 80020ea:	4b15      	ldr	r3, [pc, #84]	; (8002140 <SetSysClockTo72+0xf8>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80020f2:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80020f4:	4a12      	ldr	r2, [pc, #72]	; (8002140 <SetSysClockTo72+0xf8>)
 80020f6:	4b12      	ldr	r3, [pc, #72]	; (8002140 <SetSysClockTo72+0xf8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020fe:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002100:	bf00      	nop
 8002102:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <SetSysClockTo72+0xf8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0f9      	beq.n	8002102 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800210e:	4a0c      	ldr	r2, [pc, #48]	; (8002140 <SetSysClockTo72+0xf8>)
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <SetSysClockTo72+0xf8>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f023 0303 	bic.w	r3, r3, #3
 8002118:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800211a:	4a09      	ldr	r2, [pc, #36]	; (8002140 <SetSysClockTo72+0xf8>)
 800211c:	4b08      	ldr	r3, [pc, #32]	; (8002140 <SetSysClockTo72+0xf8>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f043 0302 	orr.w	r3, r3, #2
 8002124:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8002126:	bf00      	nop
 8002128:	4b05      	ldr	r3, [pc, #20]	; (8002140 <SetSysClockTo72+0xf8>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 030c 	and.w	r3, r3, #12
 8002130:	2b08      	cmp	r3, #8
 8002132:	d1f9      	bne.n	8002128 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40021000 	.word	0x40021000
 8002144:	40022000 	.word	0x40022000

08002148 <_ZdlPv>:
 8002148:	f000 b824 	b.w	8002194 <free>

0800214c <__libc_init_array>:
 800214c:	b570      	push	{r4, r5, r6, lr}
 800214e:	2500      	movs	r5, #0
 8002150:	4e0c      	ldr	r6, [pc, #48]	; (8002184 <__libc_init_array+0x38>)
 8002152:	4c0d      	ldr	r4, [pc, #52]	; (8002188 <__libc_init_array+0x3c>)
 8002154:	1ba4      	subs	r4, r4, r6
 8002156:	10a4      	asrs	r4, r4, #2
 8002158:	42a5      	cmp	r5, r4
 800215a:	d109      	bne.n	8002170 <__libc_init_array+0x24>
 800215c:	f000 f960 	bl	8002420 <_init>
 8002160:	2500      	movs	r5, #0
 8002162:	4e0a      	ldr	r6, [pc, #40]	; (800218c <__libc_init_array+0x40>)
 8002164:	4c0a      	ldr	r4, [pc, #40]	; (8002190 <__libc_init_array+0x44>)
 8002166:	1ba4      	subs	r4, r4, r6
 8002168:	10a4      	asrs	r4, r4, #2
 800216a:	42a5      	cmp	r5, r4
 800216c:	d105      	bne.n	800217a <__libc_init_array+0x2e>
 800216e:	bd70      	pop	{r4, r5, r6, pc}
 8002170:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002174:	4798      	blx	r3
 8002176:	3501      	adds	r5, #1
 8002178:	e7ee      	b.n	8002158 <__libc_init_array+0xc>
 800217a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800217e:	4798      	blx	r3
 8002180:	3501      	adds	r5, #1
 8002182:	e7f2      	b.n	800216a <__libc_init_array+0x1e>
 8002184:	08002510 	.word	0x08002510
 8002188:	08002510 	.word	0x08002510
 800218c:	08002510 	.word	0x08002510
 8002190:	08002514 	.word	0x08002514

08002194 <free>:
 8002194:	4b02      	ldr	r3, [pc, #8]	; (80021a0 <free+0xc>)
 8002196:	4601      	mov	r1, r0
 8002198:	6818      	ldr	r0, [r3, #0]
 800219a:	f000 b875 	b.w	8002288 <_free_r>
 800219e:	bf00      	nop
 80021a0:	20000424 	.word	0x20000424

080021a4 <__malloc_lock>:
 80021a4:	4801      	ldr	r0, [pc, #4]	; (80021ac <__malloc_lock+0x8>)
 80021a6:	f000 b92b 	b.w	8002400 <__retarget_lock_acquire_recursive>
 80021aa:	bf00      	nop
 80021ac:	20000568 	.word	0x20000568

080021b0 <__malloc_unlock>:
 80021b0:	4801      	ldr	r0, [pc, #4]	; (80021b8 <__malloc_unlock+0x8>)
 80021b2:	f000 b926 	b.w	8002402 <__retarget_lock_release_recursive>
 80021b6:	bf00      	nop
 80021b8:	20000568 	.word	0x20000568

080021bc <_sbrk_r>:
 80021bc:	b538      	push	{r3, r4, r5, lr}
 80021be:	2300      	movs	r3, #0
 80021c0:	4c05      	ldr	r4, [pc, #20]	; (80021d8 <_sbrk_r+0x1c>)
 80021c2:	4605      	mov	r5, r0
 80021c4:	4608      	mov	r0, r1
 80021c6:	6023      	str	r3, [r4, #0]
 80021c8:	f000 f91c 	bl	8002404 <_sbrk>
 80021cc:	1c43      	adds	r3, r0, #1
 80021ce:	d102      	bne.n	80021d6 <_sbrk_r+0x1a>
 80021d0:	6823      	ldr	r3, [r4, #0]
 80021d2:	b103      	cbz	r3, 80021d6 <_sbrk_r+0x1a>
 80021d4:	602b      	str	r3, [r5, #0]
 80021d6:	bd38      	pop	{r3, r4, r5, pc}
 80021d8:	20000570 	.word	0x20000570

080021dc <_malloc_trim_r>:
 80021dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021e0:	4689      	mov	r9, r1
 80021e2:	4f25      	ldr	r7, [pc, #148]	; (8002278 <_malloc_trim_r+0x9c>)
 80021e4:	4606      	mov	r6, r0
 80021e6:	f7ff ffdd 	bl	80021a4 <__malloc_lock>
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8002284 <_malloc_trim_r+0xa8>
 80021f0:	685d      	ldr	r5, [r3, #4]
 80021f2:	f1a8 0411 	sub.w	r4, r8, #17
 80021f6:	f025 0503 	bic.w	r5, r5, #3
 80021fa:	eba4 0409 	sub.w	r4, r4, r9
 80021fe:	442c      	add	r4, r5
 8002200:	fbb4 f4f8 	udiv	r4, r4, r8
 8002204:	3c01      	subs	r4, #1
 8002206:	fb08 f404 	mul.w	r4, r8, r4
 800220a:	4544      	cmp	r4, r8
 800220c:	da05      	bge.n	800221a <_malloc_trim_r+0x3e>
 800220e:	4630      	mov	r0, r6
 8002210:	f7ff ffce 	bl	80021b0 <__malloc_unlock>
 8002214:	2000      	movs	r0, #0
 8002216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800221a:	2100      	movs	r1, #0
 800221c:	4630      	mov	r0, r6
 800221e:	f7ff ffcd 	bl	80021bc <_sbrk_r>
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	442b      	add	r3, r5
 8002226:	4298      	cmp	r0, r3
 8002228:	d1f1      	bne.n	800220e <_malloc_trim_r+0x32>
 800222a:	4261      	negs	r1, r4
 800222c:	4630      	mov	r0, r6
 800222e:	f7ff ffc5 	bl	80021bc <_sbrk_r>
 8002232:	3001      	adds	r0, #1
 8002234:	d110      	bne.n	8002258 <_malloc_trim_r+0x7c>
 8002236:	2100      	movs	r1, #0
 8002238:	4630      	mov	r0, r6
 800223a:	f7ff ffbf 	bl	80021bc <_sbrk_r>
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	1a83      	subs	r3, r0, r2
 8002242:	2b0f      	cmp	r3, #15
 8002244:	dde3      	ble.n	800220e <_malloc_trim_r+0x32>
 8002246:	490d      	ldr	r1, [pc, #52]	; (800227c <_malloc_trim_r+0xa0>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	6809      	ldr	r1, [r1, #0]
 800224e:	6053      	str	r3, [r2, #4]
 8002250:	1a40      	subs	r0, r0, r1
 8002252:	490b      	ldr	r1, [pc, #44]	; (8002280 <_malloc_trim_r+0xa4>)
 8002254:	6008      	str	r0, [r1, #0]
 8002256:	e7da      	b.n	800220e <_malloc_trim_r+0x32>
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	4a09      	ldr	r2, [pc, #36]	; (8002280 <_malloc_trim_r+0xa4>)
 800225c:	1b2d      	subs	r5, r5, r4
 800225e:	f045 0501 	orr.w	r5, r5, #1
 8002262:	605d      	str	r5, [r3, #4]
 8002264:	6813      	ldr	r3, [r2, #0]
 8002266:	4630      	mov	r0, r6
 8002268:	1b1c      	subs	r4, r3, r4
 800226a:	6014      	str	r4, [r2, #0]
 800226c:	f7ff ffa0 	bl	80021b0 <__malloc_unlock>
 8002270:	2001      	movs	r0, #1
 8002272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002276:	bf00      	nop
 8002278:	20000014 	.word	0x20000014
 800227c:	2000041c 	.word	0x2000041c
 8002280:	20000534 	.word	0x20000534
 8002284:	00000080 	.word	0x00000080

08002288 <_free_r>:
 8002288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800228c:	4604      	mov	r4, r0
 800228e:	4688      	mov	r8, r1
 8002290:	2900      	cmp	r1, #0
 8002292:	f000 80ab 	beq.w	80023ec <_free_r+0x164>
 8002296:	f7ff ff85 	bl	80021a4 <__malloc_lock>
 800229a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800229e:	4d54      	ldr	r5, [pc, #336]	; (80023f0 <_free_r+0x168>)
 80022a0:	f022 0001 	bic.w	r0, r2, #1
 80022a4:	f1a8 0308 	sub.w	r3, r8, #8
 80022a8:	181f      	adds	r7, r3, r0
 80022aa:	68a9      	ldr	r1, [r5, #8]
 80022ac:	687e      	ldr	r6, [r7, #4]
 80022ae:	428f      	cmp	r7, r1
 80022b0:	f026 0603 	bic.w	r6, r6, #3
 80022b4:	f002 0201 	and.w	r2, r2, #1
 80022b8:	d11b      	bne.n	80022f2 <_free_r+0x6a>
 80022ba:	4430      	add	r0, r6
 80022bc:	b93a      	cbnz	r2, 80022ce <_free_r+0x46>
 80022be:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80022c2:	1a9b      	subs	r3, r3, r2
 80022c4:	6899      	ldr	r1, [r3, #8]
 80022c6:	4410      	add	r0, r2
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	60ca      	str	r2, [r1, #12]
 80022cc:	6091      	str	r1, [r2, #8]
 80022ce:	f040 0201 	orr.w	r2, r0, #1
 80022d2:	605a      	str	r2, [r3, #4]
 80022d4:	60ab      	str	r3, [r5, #8]
 80022d6:	4b47      	ldr	r3, [pc, #284]	; (80023f4 <_free_r+0x16c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4298      	cmp	r0, r3
 80022dc:	d304      	bcc.n	80022e8 <_free_r+0x60>
 80022de:	4b46      	ldr	r3, [pc, #280]	; (80023f8 <_free_r+0x170>)
 80022e0:	4620      	mov	r0, r4
 80022e2:	6819      	ldr	r1, [r3, #0]
 80022e4:	f7ff ff7a 	bl	80021dc <_malloc_trim_r>
 80022e8:	4620      	mov	r0, r4
 80022ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022ee:	f7ff bf5f 	b.w	80021b0 <__malloc_unlock>
 80022f2:	607e      	str	r6, [r7, #4]
 80022f4:	2a00      	cmp	r2, #0
 80022f6:	d139      	bne.n	800236c <_free_r+0xe4>
 80022f8:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80022fc:	f105 0e08 	add.w	lr, r5, #8
 8002300:	1a5b      	subs	r3, r3, r1
 8002302:	4408      	add	r0, r1
 8002304:	6899      	ldr	r1, [r3, #8]
 8002306:	4571      	cmp	r1, lr
 8002308:	d032      	beq.n	8002370 <_free_r+0xe8>
 800230a:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800230e:	f8c1 e00c 	str.w	lr, [r1, #12]
 8002312:	f8ce 1008 	str.w	r1, [lr, #8]
 8002316:	19b9      	adds	r1, r7, r6
 8002318:	6849      	ldr	r1, [r1, #4]
 800231a:	07c9      	lsls	r1, r1, #31
 800231c:	d40a      	bmi.n	8002334 <_free_r+0xac>
 800231e:	4430      	add	r0, r6
 8002320:	68b9      	ldr	r1, [r7, #8]
 8002322:	bb3a      	cbnz	r2, 8002374 <_free_r+0xec>
 8002324:	4e35      	ldr	r6, [pc, #212]	; (80023fc <_free_r+0x174>)
 8002326:	42b1      	cmp	r1, r6
 8002328:	d124      	bne.n	8002374 <_free_r+0xec>
 800232a:	2201      	movs	r2, #1
 800232c:	616b      	str	r3, [r5, #20]
 800232e:	612b      	str	r3, [r5, #16]
 8002330:	60d9      	str	r1, [r3, #12]
 8002332:	6099      	str	r1, [r3, #8]
 8002334:	f040 0101 	orr.w	r1, r0, #1
 8002338:	6059      	str	r1, [r3, #4]
 800233a:	5018      	str	r0, [r3, r0]
 800233c:	2a00      	cmp	r2, #0
 800233e:	d1d3      	bne.n	80022e8 <_free_r+0x60>
 8002340:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002344:	d21a      	bcs.n	800237c <_free_r+0xf4>
 8002346:	2201      	movs	r2, #1
 8002348:	08c0      	lsrs	r0, r0, #3
 800234a:	1081      	asrs	r1, r0, #2
 800234c:	408a      	lsls	r2, r1
 800234e:	6869      	ldr	r1, [r5, #4]
 8002350:	3001      	adds	r0, #1
 8002352:	430a      	orrs	r2, r1
 8002354:	606a      	str	r2, [r5, #4]
 8002356:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800235a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800235e:	3a08      	subs	r2, #8
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	6099      	str	r1, [r3, #8]
 8002364:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8002368:	60cb      	str	r3, [r1, #12]
 800236a:	e7bd      	b.n	80022e8 <_free_r+0x60>
 800236c:	2200      	movs	r2, #0
 800236e:	e7d2      	b.n	8002316 <_free_r+0x8e>
 8002370:	2201      	movs	r2, #1
 8002372:	e7d0      	b.n	8002316 <_free_r+0x8e>
 8002374:	68fe      	ldr	r6, [r7, #12]
 8002376:	60ce      	str	r6, [r1, #12]
 8002378:	60b1      	str	r1, [r6, #8]
 800237a:	e7db      	b.n	8002334 <_free_r+0xac>
 800237c:	0a42      	lsrs	r2, r0, #9
 800237e:	2a04      	cmp	r2, #4
 8002380:	d813      	bhi.n	80023aa <_free_r+0x122>
 8002382:	0982      	lsrs	r2, r0, #6
 8002384:	3238      	adds	r2, #56	; 0x38
 8002386:	1c51      	adds	r1, r2, #1
 8002388:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800238c:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8002390:	428e      	cmp	r6, r1
 8002392:	d124      	bne.n	80023de <_free_r+0x156>
 8002394:	2001      	movs	r0, #1
 8002396:	1092      	asrs	r2, r2, #2
 8002398:	fa00 f202 	lsl.w	r2, r0, r2
 800239c:	6868      	ldr	r0, [r5, #4]
 800239e:	4302      	orrs	r2, r0
 80023a0:	606a      	str	r2, [r5, #4]
 80023a2:	60de      	str	r6, [r3, #12]
 80023a4:	6099      	str	r1, [r3, #8]
 80023a6:	60b3      	str	r3, [r6, #8]
 80023a8:	e7de      	b.n	8002368 <_free_r+0xe0>
 80023aa:	2a14      	cmp	r2, #20
 80023ac:	d801      	bhi.n	80023b2 <_free_r+0x12a>
 80023ae:	325b      	adds	r2, #91	; 0x5b
 80023b0:	e7e9      	b.n	8002386 <_free_r+0xfe>
 80023b2:	2a54      	cmp	r2, #84	; 0x54
 80023b4:	d802      	bhi.n	80023bc <_free_r+0x134>
 80023b6:	0b02      	lsrs	r2, r0, #12
 80023b8:	326e      	adds	r2, #110	; 0x6e
 80023ba:	e7e4      	b.n	8002386 <_free_r+0xfe>
 80023bc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80023c0:	d802      	bhi.n	80023c8 <_free_r+0x140>
 80023c2:	0bc2      	lsrs	r2, r0, #15
 80023c4:	3277      	adds	r2, #119	; 0x77
 80023c6:	e7de      	b.n	8002386 <_free_r+0xfe>
 80023c8:	f240 5154 	movw	r1, #1364	; 0x554
 80023cc:	428a      	cmp	r2, r1
 80023ce:	bf9a      	itte	ls
 80023d0:	0c82      	lsrls	r2, r0, #18
 80023d2:	327c      	addls	r2, #124	; 0x7c
 80023d4:	227e      	movhi	r2, #126	; 0x7e
 80023d6:	e7d6      	b.n	8002386 <_free_r+0xfe>
 80023d8:	6889      	ldr	r1, [r1, #8]
 80023da:	428e      	cmp	r6, r1
 80023dc:	d004      	beq.n	80023e8 <_free_r+0x160>
 80023de:	684a      	ldr	r2, [r1, #4]
 80023e0:	f022 0203 	bic.w	r2, r2, #3
 80023e4:	4290      	cmp	r0, r2
 80023e6:	d3f7      	bcc.n	80023d8 <_free_r+0x150>
 80023e8:	68ce      	ldr	r6, [r1, #12]
 80023ea:	e7da      	b.n	80023a2 <_free_r+0x11a>
 80023ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023f0:	20000014 	.word	0x20000014
 80023f4:	20000420 	.word	0x20000420
 80023f8:	2000055c 	.word	0x2000055c
 80023fc:	2000001c 	.word	0x2000001c

08002400 <__retarget_lock_acquire_recursive>:
 8002400:	4770      	bx	lr

08002402 <__retarget_lock_release_recursive>:
 8002402:	4770      	bx	lr

08002404 <_sbrk>:
 8002404:	4b04      	ldr	r3, [pc, #16]	; (8002418 <_sbrk+0x14>)
 8002406:	4602      	mov	r2, r0
 8002408:	6819      	ldr	r1, [r3, #0]
 800240a:	b909      	cbnz	r1, 8002410 <_sbrk+0xc>
 800240c:	4903      	ldr	r1, [pc, #12]	; (800241c <_sbrk+0x18>)
 800240e:	6019      	str	r1, [r3, #0]
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	4402      	add	r2, r0
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	4770      	bx	lr
 8002418:	20000560 	.word	0x20000560
 800241c:	20000574 	.word	0x20000574

08002420 <_init>:
 8002420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002422:	bf00      	nop
 8002424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002426:	bc08      	pop	{r3}
 8002428:	469e      	mov	lr, r3
 800242a:	4770      	bx	lr

0800242c <_fini>:
 800242c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800242e:	bf00      	nop
 8002430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002432:	bc08      	pop	{r3}
 8002434:	469e      	mov	lr, r3
 8002436:	4770      	bx	lr

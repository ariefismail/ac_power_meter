
ac_power.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a8c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000888  08006ba0  08006ba0  00016ba0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007428  08007428  00017428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08007430  08007430  00017430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007438  08007438  00017438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000068c  20000000  0800743c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000056c  2000068c  08007ac8  0002068c  2**2
                  ALLOC
  8 ._user_heap_stack 00000100  20000bf8  08007ac8  00020bf8  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  0002068c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00006220  00000000  00000000  000206b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001030  00000000  00000000  000268d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000948  00000000  00000000  00027908  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008a0  00000000  00000000  00028250  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002da0  00000000  00000000  00028af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002a0c  00000000  00000000  0002b890  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002e29c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003754  00000000  00000000  0002e318  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00031a6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000068c 	.word	0x2000068c
 800012c:	00000000 	.word	0x00000000
 8000130:	08006b84 	.word	0x08006b84

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000690 	.word	0x20000690
 800014c:	08006b84 	.word	0x08006b84

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2iz>:
 8000a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a0c:	d215      	bcs.n	8000a3a <__aeabi_d2iz+0x36>
 8000a0e:	d511      	bpl.n	8000a34 <__aeabi_d2iz+0x30>
 8000a10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a18:	d912      	bls.n	8000a40 <__aeabi_d2iz+0x3c>
 8000a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a2e:	bf18      	it	ne
 8000a30:	4240      	negne	r0, r0
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d105      	bne.n	8000a4c <__aeabi_d2iz+0x48>
 8000a40:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a44:	bf08      	it	eq
 8000a46:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_d2uiz>:
 8000a54:	004a      	lsls	r2, r1, #1
 8000a56:	d211      	bcs.n	8000a7c <__aeabi_d2uiz+0x28>
 8000a58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a5c:	d211      	bcs.n	8000a82 <__aeabi_d2uiz+0x2e>
 8000a5e:	d50d      	bpl.n	8000a7c <__aeabi_d2uiz+0x28>
 8000a60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a68:	d40e      	bmi.n	8000a88 <__aeabi_d2uiz+0x34>
 8000a6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a76:	fa23 f002 	lsr.w	r0, r3, r2
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d102      	bne.n	8000a8e <__aeabi_d2uiz+0x3a>
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8c:	4770      	bx	lr
 8000a8e:	f04f 0000 	mov.w	r0, #0
 8000a92:	4770      	bx	lr

08000a94 <__aeabi_d2f>:
 8000a94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a98:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a9c:	bf24      	itt	cs
 8000a9e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aa2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aa6:	d90d      	bls.n	8000ac4 <__aeabi_d2f+0x30>
 8000aa8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ab4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000abc:	bf08      	it	eq
 8000abe:	f020 0001 	biceq.w	r0, r0, #1
 8000ac2:	4770      	bx	lr
 8000ac4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac8:	d121      	bne.n	8000b0e <__aeabi_d2f+0x7a>
 8000aca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ace:	bfbc      	itt	lt
 8000ad0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ad4:	4770      	bxlt	lr
 8000ad6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ada:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ade:	f1c2 0218 	rsb	r2, r2, #24
 8000ae2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ae6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aea:	fa20 f002 	lsr.w	r0, r0, r2
 8000aee:	bf18      	it	ne
 8000af0:	f040 0001 	orrne.w	r0, r0, #1
 8000af4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000afc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b00:	ea40 000c 	orr.w	r0, r0, ip
 8000b04:	fa23 f302 	lsr.w	r3, r3, r2
 8000b08:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b0c:	e7cc      	b.n	8000aa8 <__aeabi_d2f+0x14>
 8000b0e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b12:	d107      	bne.n	8000b24 <__aeabi_d2f+0x90>
 8000b14:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b18:	bf1e      	ittt	ne
 8000b1a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b1e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b22:	4770      	bxne	lr
 8000b24:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__aeabi_frsub>:
 8000b34:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b38:	e002      	b.n	8000b40 <__addsf3>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_fsub>:
 8000b3c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b40 <__addsf3>:
 8000b40:	0042      	lsls	r2, r0, #1
 8000b42:	bf1f      	itttt	ne
 8000b44:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b48:	ea92 0f03 	teqne	r2, r3
 8000b4c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b50:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b54:	d06a      	beq.n	8000c2c <__addsf3+0xec>
 8000b56:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b5a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b5e:	bfc1      	itttt	gt
 8000b60:	18d2      	addgt	r2, r2, r3
 8000b62:	4041      	eorgt	r1, r0
 8000b64:	4048      	eorgt	r0, r1
 8000b66:	4041      	eorgt	r1, r0
 8000b68:	bfb8      	it	lt
 8000b6a:	425b      	neglt	r3, r3
 8000b6c:	2b19      	cmp	r3, #25
 8000b6e:	bf88      	it	hi
 8000b70:	4770      	bxhi	lr
 8000b72:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4240      	negne	r0, r0
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b8a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b8e:	bf18      	it	ne
 8000b90:	4249      	negne	r1, r1
 8000b92:	ea92 0f03 	teq	r2, r3
 8000b96:	d03f      	beq.n	8000c18 <__addsf3+0xd8>
 8000b98:	f1a2 0201 	sub.w	r2, r2, #1
 8000b9c:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba0:	eb10 000c 	adds.w	r0, r0, ip
 8000ba4:	f1c3 0320 	rsb	r3, r3, #32
 8000ba8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb0:	d502      	bpl.n	8000bb8 <__addsf3+0x78>
 8000bb2:	4249      	negs	r1, r1
 8000bb4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bbc:	d313      	bcc.n	8000be6 <__addsf3+0xa6>
 8000bbe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bc2:	d306      	bcc.n	8000bd2 <__addsf3+0x92>
 8000bc4:	0840      	lsrs	r0, r0, #1
 8000bc6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bca:	f102 0201 	add.w	r2, r2, #1
 8000bce:	2afe      	cmp	r2, #254	; 0xfe
 8000bd0:	d251      	bcs.n	8000c76 <__addsf3+0x136>
 8000bd2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bda:	bf08      	it	eq
 8000bdc:	f020 0001 	biceq.w	r0, r0, #1
 8000be0:	ea40 0003 	orr.w	r0, r0, r3
 8000be4:	4770      	bx	lr
 8000be6:	0049      	lsls	r1, r1, #1
 8000be8:	eb40 0000 	adc.w	r0, r0, r0
 8000bec:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bf0:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf4:	d1ed      	bne.n	8000bd2 <__addsf3+0x92>
 8000bf6:	fab0 fc80 	clz	ip, r0
 8000bfa:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bfe:	ebb2 020c 	subs.w	r2, r2, ip
 8000c02:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c06:	bfaa      	itet	ge
 8000c08:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c0c:	4252      	neglt	r2, r2
 8000c0e:	4318      	orrge	r0, r3
 8000c10:	bfbc      	itt	lt
 8000c12:	40d0      	lsrlt	r0, r2
 8000c14:	4318      	orrlt	r0, r3
 8000c16:	4770      	bx	lr
 8000c18:	f092 0f00 	teq	r2, #0
 8000c1c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c20:	bf06      	itte	eq
 8000c22:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c26:	3201      	addeq	r2, #1
 8000c28:	3b01      	subne	r3, #1
 8000c2a:	e7b5      	b.n	8000b98 <__addsf3+0x58>
 8000c2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c34:	bf18      	it	ne
 8000c36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c3a:	d021      	beq.n	8000c80 <__addsf3+0x140>
 8000c3c:	ea92 0f03 	teq	r2, r3
 8000c40:	d004      	beq.n	8000c4c <__addsf3+0x10c>
 8000c42:	f092 0f00 	teq	r2, #0
 8000c46:	bf08      	it	eq
 8000c48:	4608      	moveq	r0, r1
 8000c4a:	4770      	bx	lr
 8000c4c:	ea90 0f01 	teq	r0, r1
 8000c50:	bf1c      	itt	ne
 8000c52:	2000      	movne	r0, #0
 8000c54:	4770      	bxne	lr
 8000c56:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c5a:	d104      	bne.n	8000c66 <__addsf3+0x126>
 8000c5c:	0040      	lsls	r0, r0, #1
 8000c5e:	bf28      	it	cs
 8000c60:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c64:	4770      	bx	lr
 8000c66:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c6a:	bf3c      	itt	cc
 8000c6c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c70:	4770      	bxcc	lr
 8000c72:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c76:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7e:	4770      	bx	lr
 8000c80:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c84:	bf16      	itet	ne
 8000c86:	4608      	movne	r0, r1
 8000c88:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c8c:	4601      	movne	r1, r0
 8000c8e:	0242      	lsls	r2, r0, #9
 8000c90:	bf06      	itte	eq
 8000c92:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c96:	ea90 0f01 	teqeq	r0, r1
 8000c9a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c9e:	4770      	bx	lr

08000ca0 <__aeabi_ui2f>:
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e004      	b.n	8000cb0 <__aeabi_i2f+0x8>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_i2f>:
 8000ca8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cac:	bf48      	it	mi
 8000cae:	4240      	negmi	r0, r0
 8000cb0:	ea5f 0c00 	movs.w	ip, r0
 8000cb4:	bf08      	it	eq
 8000cb6:	4770      	bxeq	lr
 8000cb8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cbc:	4601      	mov	r1, r0
 8000cbe:	f04f 0000 	mov.w	r0, #0
 8000cc2:	e01c      	b.n	8000cfe <__aeabi_l2f+0x2a>

08000cc4 <__aeabi_ul2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e00a      	b.n	8000ce8 <__aeabi_l2f+0x14>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_l2f>:
 8000cd4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce0:	d502      	bpl.n	8000ce8 <__aeabi_l2f+0x14>
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	ea5f 0c01 	movs.w	ip, r1
 8000cec:	bf02      	ittt	eq
 8000cee:	4684      	moveq	ip, r0
 8000cf0:	4601      	moveq	r1, r0
 8000cf2:	2000      	moveq	r0, #0
 8000cf4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cf8:	bf08      	it	eq
 8000cfa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cfe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d02:	fabc f28c 	clz	r2, ip
 8000d06:	3a08      	subs	r2, #8
 8000d08:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d0c:	db10      	blt.n	8000d30 <__aeabi_l2f+0x5c>
 8000d0e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d12:	4463      	add	r3, ip
 8000d14:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d18:	f1c2 0220 	rsb	r2, r2, #32
 8000d1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d20:	fa20 f202 	lsr.w	r2, r0, r2
 8000d24:	eb43 0002 	adc.w	r0, r3, r2
 8000d28:	bf08      	it	eq
 8000d2a:	f020 0001 	biceq.w	r0, r0, #1
 8000d2e:	4770      	bx	lr
 8000d30:	f102 0220 	add.w	r2, r2, #32
 8000d34:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d38:	f1c2 0220 	rsb	r2, r2, #32
 8000d3c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d40:	fa21 f202 	lsr.w	r2, r1, r2
 8000d44:	eb43 0002 	adc.w	r0, r3, r2
 8000d48:	bf08      	it	eq
 8000d4a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d4e:	4770      	bx	lr

08000d50 <__aeabi_fmul>:
 8000d50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d58:	bf1e      	ittt	ne
 8000d5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d5e:	ea92 0f0c 	teqne	r2, ip
 8000d62:	ea93 0f0c 	teqne	r3, ip
 8000d66:	d06f      	beq.n	8000e48 <__aeabi_fmul+0xf8>
 8000d68:	441a      	add	r2, r3
 8000d6a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d6e:	0240      	lsls	r0, r0, #9
 8000d70:	bf18      	it	ne
 8000d72:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d76:	d01e      	beq.n	8000db6 <__aeabi_fmul+0x66>
 8000d78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d7c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d80:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d84:	fba0 3101 	umull	r3, r1, r0, r1
 8000d88:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d8c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d90:	bf3e      	ittt	cc
 8000d92:	0049      	lslcc	r1, r1, #1
 8000d94:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d98:	005b      	lslcc	r3, r3, #1
 8000d9a:	ea40 0001 	orr.w	r0, r0, r1
 8000d9e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000da2:	2afd      	cmp	r2, #253	; 0xfd
 8000da4:	d81d      	bhi.n	8000de2 <__aeabi_fmul+0x92>
 8000da6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000daa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dae:	bf08      	it	eq
 8000db0:	f020 0001 	biceq.w	r0, r0, #1
 8000db4:	4770      	bx	lr
 8000db6:	f090 0f00 	teq	r0, #0
 8000dba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dbe:	bf08      	it	eq
 8000dc0:	0249      	lsleq	r1, r1, #9
 8000dc2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dca:	3a7f      	subs	r2, #127	; 0x7f
 8000dcc:	bfc2      	ittt	gt
 8000dce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dd2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dd6:	4770      	bxgt	lr
 8000dd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ddc:	f04f 0300 	mov.w	r3, #0
 8000de0:	3a01      	subs	r2, #1
 8000de2:	dc5d      	bgt.n	8000ea0 <__aeabi_fmul+0x150>
 8000de4:	f112 0f19 	cmn.w	r2, #25
 8000de8:	bfdc      	itt	le
 8000dea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dee:	4770      	bxle	lr
 8000df0:	f1c2 0200 	rsb	r2, r2, #0
 8000df4:	0041      	lsls	r1, r0, #1
 8000df6:	fa21 f102 	lsr.w	r1, r1, r2
 8000dfa:	f1c2 0220 	rsb	r2, r2, #32
 8000dfe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e02:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e06:	f140 0000 	adc.w	r0, r0, #0
 8000e0a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e0e:	bf08      	it	eq
 8000e10:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e14:	4770      	bx	lr
 8000e16:	f092 0f00 	teq	r2, #0
 8000e1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e1e:	bf02      	ittt	eq
 8000e20:	0040      	lsleq	r0, r0, #1
 8000e22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e26:	3a01      	subeq	r2, #1
 8000e28:	d0f9      	beq.n	8000e1e <__aeabi_fmul+0xce>
 8000e2a:	ea40 000c 	orr.w	r0, r0, ip
 8000e2e:	f093 0f00 	teq	r3, #0
 8000e32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e36:	bf02      	ittt	eq
 8000e38:	0049      	lsleq	r1, r1, #1
 8000e3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e3e:	3b01      	subeq	r3, #1
 8000e40:	d0f9      	beq.n	8000e36 <__aeabi_fmul+0xe6>
 8000e42:	ea41 010c 	orr.w	r1, r1, ip
 8000e46:	e78f      	b.n	8000d68 <__aeabi_fmul+0x18>
 8000e48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e4c:	ea92 0f0c 	teq	r2, ip
 8000e50:	bf18      	it	ne
 8000e52:	ea93 0f0c 	teqne	r3, ip
 8000e56:	d00a      	beq.n	8000e6e <__aeabi_fmul+0x11e>
 8000e58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e5c:	bf18      	it	ne
 8000e5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e62:	d1d8      	bne.n	8000e16 <__aeabi_fmul+0xc6>
 8000e64:	ea80 0001 	eor.w	r0, r0, r1
 8000e68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e6c:	4770      	bx	lr
 8000e6e:	f090 0f00 	teq	r0, #0
 8000e72:	bf17      	itett	ne
 8000e74:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e78:	4608      	moveq	r0, r1
 8000e7a:	f091 0f00 	teqne	r1, #0
 8000e7e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e82:	d014      	beq.n	8000eae <__aeabi_fmul+0x15e>
 8000e84:	ea92 0f0c 	teq	r2, ip
 8000e88:	d101      	bne.n	8000e8e <__aeabi_fmul+0x13e>
 8000e8a:	0242      	lsls	r2, r0, #9
 8000e8c:	d10f      	bne.n	8000eae <__aeabi_fmul+0x15e>
 8000e8e:	ea93 0f0c 	teq	r3, ip
 8000e92:	d103      	bne.n	8000e9c <__aeabi_fmul+0x14c>
 8000e94:	024b      	lsls	r3, r1, #9
 8000e96:	bf18      	it	ne
 8000e98:	4608      	movne	r0, r1
 8000e9a:	d108      	bne.n	8000eae <__aeabi_fmul+0x15e>
 8000e9c:	ea80 0001 	eor.w	r0, r0, r1
 8000ea0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eac:	4770      	bx	lr
 8000eae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eb2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eb6:	4770      	bx	lr

08000eb8 <__aeabi_fdiv>:
 8000eb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ebc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec0:	bf1e      	ittt	ne
 8000ec2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ec6:	ea92 0f0c 	teqne	r2, ip
 8000eca:	ea93 0f0c 	teqne	r3, ip
 8000ece:	d069      	beq.n	8000fa4 <__aeabi_fdiv+0xec>
 8000ed0:	eba2 0203 	sub.w	r2, r2, r3
 8000ed4:	ea80 0c01 	eor.w	ip, r0, r1
 8000ed8:	0249      	lsls	r1, r1, #9
 8000eda:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ede:	d037      	beq.n	8000f50 <__aeabi_fdiv+0x98>
 8000ee0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ee4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ee8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000eec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	bf38      	it	cc
 8000ef4:	005b      	lslcc	r3, r3, #1
 8000ef6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000efa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000efe:	428b      	cmp	r3, r1
 8000f00:	bf24      	itt	cs
 8000f02:	1a5b      	subcs	r3, r3, r1
 8000f04:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f08:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f12:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f16:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f1a:	bf24      	itt	cs
 8000f1c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f20:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f24:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f28:	bf24      	itt	cs
 8000f2a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f2e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f32:	011b      	lsls	r3, r3, #4
 8000f34:	bf18      	it	ne
 8000f36:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f3a:	d1e0      	bne.n	8000efe <__aeabi_fdiv+0x46>
 8000f3c:	2afd      	cmp	r2, #253	; 0xfd
 8000f3e:	f63f af50 	bhi.w	8000de2 <__aeabi_fmul+0x92>
 8000f42:	428b      	cmp	r3, r1
 8000f44:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f48:	bf08      	it	eq
 8000f4a:	f020 0001 	biceq.w	r0, r0, #1
 8000f4e:	4770      	bx	lr
 8000f50:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f54:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f58:	327f      	adds	r2, #127	; 0x7f
 8000f5a:	bfc2      	ittt	gt
 8000f5c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f60:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f64:	4770      	bxgt	lr
 8000f66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f6a:	f04f 0300 	mov.w	r3, #0
 8000f6e:	3a01      	subs	r2, #1
 8000f70:	e737      	b.n	8000de2 <__aeabi_fmul+0x92>
 8000f72:	f092 0f00 	teq	r2, #0
 8000f76:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f7a:	bf02      	ittt	eq
 8000f7c:	0040      	lsleq	r0, r0, #1
 8000f7e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f82:	3a01      	subeq	r2, #1
 8000f84:	d0f9      	beq.n	8000f7a <__aeabi_fdiv+0xc2>
 8000f86:	ea40 000c 	orr.w	r0, r0, ip
 8000f8a:	f093 0f00 	teq	r3, #0
 8000f8e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	bf02      	ittt	eq
 8000f94:	0049      	lsleq	r1, r1, #1
 8000f96:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f9a:	3b01      	subeq	r3, #1
 8000f9c:	d0f9      	beq.n	8000f92 <__aeabi_fdiv+0xda>
 8000f9e:	ea41 010c 	orr.w	r1, r1, ip
 8000fa2:	e795      	b.n	8000ed0 <__aeabi_fdiv+0x18>
 8000fa4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fa8:	ea92 0f0c 	teq	r2, ip
 8000fac:	d108      	bne.n	8000fc0 <__aeabi_fdiv+0x108>
 8000fae:	0242      	lsls	r2, r0, #9
 8000fb0:	f47f af7d 	bne.w	8000eae <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	f47f af70 	bne.w	8000e9c <__aeabi_fmul+0x14c>
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	e776      	b.n	8000eae <__aeabi_fmul+0x15e>
 8000fc0:	ea93 0f0c 	teq	r3, ip
 8000fc4:	d104      	bne.n	8000fd0 <__aeabi_fdiv+0x118>
 8000fc6:	024b      	lsls	r3, r1, #9
 8000fc8:	f43f af4c 	beq.w	8000e64 <__aeabi_fmul+0x114>
 8000fcc:	4608      	mov	r0, r1
 8000fce:	e76e      	b.n	8000eae <__aeabi_fmul+0x15e>
 8000fd0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fd4:	bf18      	it	ne
 8000fd6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	d1ca      	bne.n	8000f72 <__aeabi_fdiv+0xba>
 8000fdc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fe0:	f47f af5c 	bne.w	8000e9c <__aeabi_fmul+0x14c>
 8000fe4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fe8:	f47f af3c 	bne.w	8000e64 <__aeabi_fmul+0x114>
 8000fec:	e75f      	b.n	8000eae <__aeabi_fmul+0x15e>
 8000fee:	bf00      	nop

08000ff0 <__gesf2>:
 8000ff0:	f04f 3cff 	mov.w	ip, #4294967295
 8000ff4:	e006      	b.n	8001004 <__cmpsf2+0x4>
 8000ff6:	bf00      	nop

08000ff8 <__lesf2>:
 8000ff8:	f04f 0c01 	mov.w	ip, #1
 8000ffc:	e002      	b.n	8001004 <__cmpsf2+0x4>
 8000ffe:	bf00      	nop

08001000 <__cmpsf2>:
 8001000:	f04f 0c01 	mov.w	ip, #1
 8001004:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001008:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800100c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001010:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001014:	bf18      	it	ne
 8001016:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800101a:	d011      	beq.n	8001040 <__cmpsf2+0x40>
 800101c:	b001      	add	sp, #4
 800101e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001022:	bf18      	it	ne
 8001024:	ea90 0f01 	teqne	r0, r1
 8001028:	bf58      	it	pl
 800102a:	ebb2 0003 	subspl.w	r0, r2, r3
 800102e:	bf88      	it	hi
 8001030:	17c8      	asrhi	r0, r1, #31
 8001032:	bf38      	it	cc
 8001034:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001038:	bf18      	it	ne
 800103a:	f040 0001 	orrne.w	r0, r0, #1
 800103e:	4770      	bx	lr
 8001040:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001044:	d102      	bne.n	800104c <__cmpsf2+0x4c>
 8001046:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800104a:	d105      	bne.n	8001058 <__cmpsf2+0x58>
 800104c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001050:	d1e4      	bne.n	800101c <__cmpsf2+0x1c>
 8001052:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001056:	d0e1      	beq.n	800101c <__cmpsf2+0x1c>
 8001058:	f85d 0b04 	ldr.w	r0, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <__aeabi_cfrcmple>:
 8001060:	4684      	mov	ip, r0
 8001062:	4608      	mov	r0, r1
 8001064:	4661      	mov	r1, ip
 8001066:	e7ff      	b.n	8001068 <__aeabi_cfcmpeq>

08001068 <__aeabi_cfcmpeq>:
 8001068:	b50f      	push	{r0, r1, r2, r3, lr}
 800106a:	f7ff ffc9 	bl	8001000 <__cmpsf2>
 800106e:	2800      	cmp	r0, #0
 8001070:	bf48      	it	mi
 8001072:	f110 0f00 	cmnmi.w	r0, #0
 8001076:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001078 <__aeabi_fcmpeq>:
 8001078:	f84d ed08 	str.w	lr, [sp, #-8]!
 800107c:	f7ff fff4 	bl	8001068 <__aeabi_cfcmpeq>
 8001080:	bf0c      	ite	eq
 8001082:	2001      	moveq	r0, #1
 8001084:	2000      	movne	r0, #0
 8001086:	f85d fb08 	ldr.w	pc, [sp], #8
 800108a:	bf00      	nop

0800108c <__aeabi_fcmplt>:
 800108c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001090:	f7ff ffea 	bl	8001068 <__aeabi_cfcmpeq>
 8001094:	bf34      	ite	cc
 8001096:	2001      	movcc	r0, #1
 8001098:	2000      	movcs	r0, #0
 800109a:	f85d fb08 	ldr.w	pc, [sp], #8
 800109e:	bf00      	nop

080010a0 <__aeabi_fcmple>:
 80010a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a4:	f7ff ffe0 	bl	8001068 <__aeabi_cfcmpeq>
 80010a8:	bf94      	ite	ls
 80010aa:	2001      	movls	r0, #1
 80010ac:	2000      	movhi	r0, #0
 80010ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b2:	bf00      	nop

080010b4 <__aeabi_fcmpge>:
 80010b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b8:	f7ff ffd2 	bl	8001060 <__aeabi_cfrcmple>
 80010bc:	bf94      	ite	ls
 80010be:	2001      	movls	r0, #1
 80010c0:	2000      	movhi	r0, #0
 80010c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c6:	bf00      	nop

080010c8 <__aeabi_fcmpgt>:
 80010c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010cc:	f7ff ffc8 	bl	8001060 <__aeabi_cfrcmple>
 80010d0:	bf34      	ite	cc
 80010d2:	2001      	movcc	r0, #1
 80010d4:	2000      	movcs	r0, #0
 80010d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010da:	bf00      	nop

080010dc <__aeabi_f2uiz>:
 80010dc:	0042      	lsls	r2, r0, #1
 80010de:	d20e      	bcs.n	80010fe <__aeabi_f2uiz+0x22>
 80010e0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010e4:	d30b      	bcc.n	80010fe <__aeabi_f2uiz+0x22>
 80010e6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ee:	d409      	bmi.n	8001104 <__aeabi_f2uiz+0x28>
 80010f0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010f8:	fa23 f002 	lsr.w	r0, r3, r2
 80010fc:	4770      	bx	lr
 80010fe:	f04f 0000 	mov.w	r0, #0
 8001102:	4770      	bx	lr
 8001104:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001108:	d101      	bne.n	800110e <__aeabi_f2uiz+0x32>
 800110a:	0242      	lsls	r2, r0, #9
 800110c:	d102      	bne.n	8001114 <__aeabi_f2uiz+0x38>
 800110e:	f04f 30ff 	mov.w	r0, #4294967295
 8001112:	4770      	bx	lr
 8001114:	f04f 0000 	mov.w	r0, #0
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop

0800111c <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	60fb      	str	r3, [r7, #12]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800113a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800113e:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	791b      	ldrb	r3, [r3, #4]
 8001148:	021b      	lsls	r3, r3, #8
 800114a:	4313      	orrs	r3, r2
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	4313      	orrs	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	605a      	str	r2, [r3, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	4b16      	ldr	r3, [pc, #88]	; (80011bc <ADC_Init+0xa0>)
 8001162:	4013      	ands	r3, r2
 8001164:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	68da      	ldr	r2, [r3, #12]
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	431a      	orrs	r2, r3
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	795b      	ldrb	r3, [r3, #5]
 8001174:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 8001176:	4313      	orrs	r3, r2
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	4313      	orrs	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	609a      	str	r2, [r3, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001188:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001190:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	7c1b      	ldrb	r3, [r3, #16]
 8001196:	3b01      	subs	r3, #1
 8001198:	b2da      	uxtb	r2, r3
 800119a:	7afb      	ldrb	r3, [r7, #11]
 800119c:	4313      	orrs	r3, r2
 800119e:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
 80011a0:	7afb      	ldrb	r3, [r7, #11]
 80011a2:	051b      	lsls	r3, r3, #20
 80011a4:	68fa      	ldr	r2, [r7, #12]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68fa      	ldr	r2, [r7, #12]
 80011ae:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80011b0:	bf00      	nop
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	fff1f7fd 	.word	0xfff1f7fd

080011c0 <ADC_StructInit>:
  * @brief  Fills each ADC_InitStruct member with its default value.
  * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	711a      	strb	r2, [r3, #4]
  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	715a      	strb	r2, [r3, #5]
  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
  /* Initialize the ADC_NbrOfChannel member */
  ADC_InitStruct->ADC_NbrOfChannel = 1;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2201      	movs	r2, #1
 80011ea:	741a      	strb	r2, [r3, #16]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr

080011f6 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	460b      	mov	r3, r1
 8001200:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001202:	78fb      	ldrb	r3, [r7, #3]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d006      	beq.n	8001216 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f043 0201 	orr.w	r2, r3, #1
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
  }
}
 8001214:	e005      	b.n	8001222 <ADC_Cmd+0x2c>
    ADCx->CR2 &= CR2_ADON_Reset;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f023 0201 	bic.w	r2, r3, #1
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	609a      	str	r2, [r3, #8]
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr

0800122c <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001238:	78fb      	ldrb	r3, [r7, #3]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d006      	beq.n	800124c <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= CR2_DMA_Reset;
  }
}
 800124a:	e005      	b.n	8001258 <ADC_DMACmd+0x2c>
    ADCx->CR2 &= CR2_DMA_Reset;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	609a      	str	r2, [r3, #8]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr

08001262 <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f043 0204 	orr.w	r2, r3, #4
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	609a      	str	r2, [r3, #8]
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <ADC_SoftwareStartConvCmd>:
  * @param  NewState: new state of the selected ADC software start conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800128c:	78fb      	ldrb	r3, [r7, #3]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d006      	beq.n	80012a0 <ADC_SoftwareStartConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	609a      	str	r2, [r3, #8]
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
  }
}
 800129e:	e005      	b.n	80012ac <ADC_SoftwareStartConvCmd+0x2c>
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f423 02a0 	bic.w	r2, r3, #5242880	; 0x500000
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	609a      	str	r2, [r3, #8]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr

080012b6 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b085      	sub	sp, #20
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
 80012be:	4608      	mov	r0, r1
 80012c0:	4611      	mov	r1, r2
 80012c2:	461a      	mov	r2, r3
 80012c4:	4603      	mov	r3, r0
 80012c6:	70fb      	strb	r3, [r7, #3]
 80012c8:	460b      	mov	r3, r1
 80012ca:	70bb      	strb	r3, [r7, #2]
 80012cc:	4613      	mov	r3, r2
 80012ce:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80012d8:	78fb      	ldrb	r3, [r7, #3]
 80012da:	2b09      	cmp	r3, #9
 80012dc:	d923      	bls.n	8001326 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	f1a3 020a 	sub.w	r2, r3, #10
 80012ea:	4613      	mov	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	2207      	movs	r2, #7
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	4013      	ands	r3, r2
 8001300:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8001302:	7879      	ldrb	r1, [r7, #1]
 8001304:	78fb      	ldrb	r3, [r7, #3]
 8001306:	f1a3 020a 	sub.w	r2, r3, #10
 800130a:	4613      	mov	r3, r2
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	4413      	add	r3, r2
 8001310:	fa01 f303 	lsl.w	r3, r1, r3
 8001314:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	4313      	orrs	r3, r2
 800131c:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	e01e      	b.n	8001364 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 800132c:	78fa      	ldrb	r2, [r7, #3]
 800132e:	4613      	mov	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4413      	add	r3, r2
 8001334:	2207      	movs	r2, #7
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	43db      	mvns	r3, r3
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	4013      	ands	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8001346:	7879      	ldrb	r1, [r7, #1]
 8001348:	78fa      	ldrb	r2, [r7, #3]
 800134a:	4613      	mov	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	4413      	add	r3, r2
 8001350:	fa01 f303 	lsl.w	r3, r1, r3
 8001354:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	4313      	orrs	r3, r2
 800135c:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8001364:	78bb      	ldrb	r3, [r7, #2]
 8001366:	2b06      	cmp	r3, #6
 8001368:	d821      	bhi.n	80013ae <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800136e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 8001370:	78bb      	ldrb	r3, [r7, #2]
 8001372:	1e5a      	subs	r2, r3, #1
 8001374:	4613      	mov	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4413      	add	r3, r2
 800137a:	221f      	movs	r2, #31
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	43db      	mvns	r3, r3
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	4013      	ands	r3, r2
 800138a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 800138c:	78f9      	ldrb	r1, [r7, #3]
 800138e:	78bb      	ldrb	r3, [r7, #2]
 8001390:	1e5a      	subs	r2, r3, #1
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	fa01 f303 	lsl.w	r3, r1, r3
 800139c:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	68fa      	ldr	r2, [r7, #12]
 80013aa:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80013ac:	e047      	b.n	800143e <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 80013ae:	78bb      	ldrb	r3, [r7, #2]
 80013b0:	2b0c      	cmp	r3, #12
 80013b2:	d821      	bhi.n	80013f8 <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b8:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 80013ba:	78bb      	ldrb	r3, [r7, #2]
 80013bc:	1fda      	subs	r2, r3, #7
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	221f      	movs	r2, #31
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	4013      	ands	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 80013d6:	78f9      	ldrb	r1, [r7, #3]
 80013d8:	78bb      	ldrb	r3, [r7, #2]
 80013da:	1fda      	subs	r2, r3, #7
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	fa01 f303 	lsl.w	r3, r1, r3
 80013e6:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 80013e8:	68fa      	ldr	r2, [r7, #12]
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80013f6:	e022      	b.n	800143e <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fc:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 80013fe:	78bb      	ldrb	r3, [r7, #2]
 8001400:	f1a3 020d 	sub.w	r2, r3, #13
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	221f      	movs	r2, #31
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	43db      	mvns	r3, r3
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	4013      	ands	r3, r2
 800141a:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 800141c:	78f9      	ldrb	r1, [r7, #3]
 800141e:	78bb      	ldrb	r3, [r7, #2]
 8001420:	f1a3 020d 	sub.w	r2, r3, #13
 8001424:	4613      	mov	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	4313      	orrs	r3, r2
 8001436:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001466:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	691b      	ldr	r3, [r3, #16]
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8001476:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	699b      	ldr	r3, [r3, #24]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001482:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	69db      	ldr	r3, [r3, #28]
 8001488:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800148e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001494:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	4313      	orrs	r3, r2
 800149a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	68da      	ldr	r2, [r3, #12]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	60da      	str	r2, [r3, #12]
}
 80014ba:	bf00      	nop
 80014bc:	3714      	adds	r7, #20
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
/*-------------- Reset DMA init structure parameters values ------------------*/
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
  /* Initialize the DMA_MemoryBaseAddr member */
  DMA_InitStruct->DMA_MemoryBaseAddr = 0;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	605a      	str	r2, [r3, #4]
  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	60da      	str	r2, [r3, #12]
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	615a      	str	r2, [r3, #20]
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	619a      	str	r2, [r3, #24]
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	61da      	str	r2, [r3, #28]
  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	621a      	str	r2, [r3, #32]
  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	625a      	str	r2, [r3, #36]	; 0x24
  /* Initialize the DMA_M2M member */
  DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001524:	78fb      	ldrb	r3, [r7, #3]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d006      	beq.n	8001538 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f043 0201 	orr.w	r2, r3, #1
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 8001536:	e006      	b.n	8001546 <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001540:	4013      	ands	r3, r2
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	6013      	str	r3, [r2, #0]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <DMA_GetCurrDataCounter>:
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval The number of remaining data units in the current DMAy Channelx
  *         transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Return the number of remaining data units for DMAy Channelx */
  return ((uint16_t)(DMAy_Channelx->CNDTR));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	b29b      	uxth	r3, r3
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr

08001568 <DMA_GetFlagStatus>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval The new state of DMAy_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8001570:	2300      	movs	r3, #0
 8001572:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <DMA_GetFlagStatus+0x22>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <DMA_GetFlagStatus+0x48>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	e002      	b.n	8001590 <DMA_GetFlagStatus+0x28>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 800158a:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <DMA_GetFlagStatus+0x4c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 8001590:	68ba      	ldr	r2, [r7, #8]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4013      	ands	r3, r2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d002      	beq.n	80015a0 <DMA_GetFlagStatus+0x38>
  {
    /* DMAy_FLAG is set */
    bitstatus = SET;
 800159a:	2301      	movs	r3, #1
 800159c:	73fb      	strb	r3, [r7, #15]
 800159e:	e001      	b.n	80015a4 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* DMAy_FLAG is reset */
    bitstatus = RESET;
 80015a0:	2300      	movs	r3, #0
 80015a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr
 80015b0:	40020400 	.word	0x40020400
 80015b4:	40020000 	.word	0x40020000

080015b8 <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 80015ca:	4a06      	ldr	r2, [pc, #24]	; (80015e4 <DMA_ClearFlag+0x2c>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
  }
}
 80015d0:	e002      	b.n	80015d8 <DMA_ClearFlag+0x20>
    DMA1->IFCR = DMAy_FLAG;
 80015d2:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <DMA_ClearFlag+0x30>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6053      	str	r3, [r2, #4]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40020400 	.word	0x40020400
 80015e8:	40020000 	.word	0x40020000

080015ec <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b089      	sub	sp, #36	; 0x24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	2300      	movs	r3, #0
 800160c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	78db      	ldrb	r3, [r3, #3]
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	78db      	ldrb	r3, [r3, #3]
 800161c:	f003 0310 	and.w	r3, r3, #16
 8001620:	2b00      	cmp	r3, #0
 8001622:	d005      	beq.n	8001630 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	789b      	ldrb	r3, [r3, #2]
 8001628:	461a      	mov	r2, r3
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	4313      	orrs	r3, r2
 800162e:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d044      	beq.n	80016c4 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001640:	2300      	movs	r3, #0
 8001642:	61bb      	str	r3, [r7, #24]
 8001644:	e038      	b.n	80016b8 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8001646:	2201      	movs	r2, #1
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	429a      	cmp	r2, r3
 8001662:	d126      	bne.n	80016b2 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800166a:	220f      	movs	r2, #15
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	43db      	mvns	r3, r3
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	4013      	ands	r3, r2
 800167c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800167e:	69fa      	ldr	r2, [r7, #28]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	697a      	ldr	r2, [r7, #20]
 8001688:	4313      	orrs	r3, r2
 800168a:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	78db      	ldrb	r3, [r3, #3]
 8001690:	2b28      	cmp	r3, #40	; 0x28
 8001692:	d105      	bne.n	80016a0 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001694:	2201      	movs	r2, #1
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	409a      	lsls	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	615a      	str	r2, [r3, #20]
 800169e:	e008      	b.n	80016b2 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	78db      	ldrb	r3, [r3, #3]
 80016a4:	2b48      	cmp	r3, #72	; 0x48
 80016a6:	d104      	bne.n	80016b2 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80016a8:	2201      	movs	r2, #1
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	409a      	lsls	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	3301      	adds	r3, #1
 80016b6:	61bb      	str	r3, [r7, #24]
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	2b07      	cmp	r3, #7
 80016bc:	d9c3      	bls.n	8001646 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	2bff      	cmp	r3, #255	; 0xff
 80016ca:	d946      	bls.n	800175a <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
 80016d6:	e03a      	b.n	800174e <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	3308      	adds	r3, #8
 80016dc:	2201      	movs	r2, #1
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4013      	ands	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d127      	bne.n	8001748 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80016fe:	220f      	movs	r2, #15
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	43db      	mvns	r3, r3
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	4013      	ands	r3, r2
 8001710:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001712:	69fa      	ldr	r2, [r7, #28]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	4313      	orrs	r3, r2
 800171e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	78db      	ldrb	r3, [r3, #3]
 8001724:	2b28      	cmp	r3, #40	; 0x28
 8001726:	d105      	bne.n	8001734 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	3308      	adds	r3, #8
 800172c:	2201      	movs	r2, #1
 800172e:	409a      	lsls	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	78db      	ldrb	r3, [r3, #3]
 8001738:	2b48      	cmp	r3, #72	; 0x48
 800173a:	d105      	bne.n	8001748 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	3308      	adds	r3, #8
 8001740:	2201      	movs	r2, #1
 8001742:	409a      	lsls	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	3301      	adds	r3, #1
 800174c:	61bb      	str	r3, [r7, #24]
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	2b07      	cmp	r3, #7
 8001752:	d9c1      	bls.n	80016d8 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	605a      	str	r2, [r3, #4]
  }
}
 800175a:	bf00      	nop
 800175c:	3724      	adds	r7, #36	; 0x24
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr

08001764 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001772:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2202      	movs	r2, #2
 8001778:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2204      	movs	r2, #4
 800177e:	70da      	strb	r2, [r3, #3]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr
	...

0800178c <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 8001798:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <RCC_ADCCLKConfig+0x34>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017a4:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80017ae:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <RCC_ADCCLKConfig+0x34>)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6053      	str	r3, [r2, #4]
}
 80017b4:	bf00      	nop
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40021000 	.word	0x40021000

080017c4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	2300      	movs	r3, #0
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	2300      	movs	r3, #0
 80017da:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80017dc:	4b4c      	ldr	r3, [pc, #304]	; (8001910 <RCC_GetClocksFreq+0x14c>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 030c 	and.w	r3, r3, #12
 80017e4:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d007      	beq.n	80017fc <RCC_GetClocksFreq+0x38>
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	d009      	beq.n	8001804 <RCC_GetClocksFreq+0x40>
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d133      	bne.n	800185c <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a47      	ldr	r2, [pc, #284]	; (8001914 <RCC_GetClocksFreq+0x150>)
 80017f8:	601a      	str	r2, [r3, #0]
      break;
 80017fa:	e033      	b.n	8001864 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a45      	ldr	r2, [pc, #276]	; (8001914 <RCC_GetClocksFreq+0x150>)
 8001800:	601a      	str	r2, [r3, #0]
      break;
 8001802:	e02f      	b.n	8001864 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8001804:	4b42      	ldr	r3, [pc, #264]	; (8001910 <RCC_GetClocksFreq+0x14c>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800180c:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 800180e:	4b40      	ldr	r3, [pc, #256]	; (8001910 <RCC_GetClocksFreq+0x14c>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001816:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	0c9b      	lsrs	r3, r3, #18
 800181c:	3302      	adds	r3, #2
 800181e:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d106      	bne.n	8001834 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	4a3b      	ldr	r2, [pc, #236]	; (8001918 <RCC_GetClocksFreq+0x154>)
 800182a:	fb02 f203 	mul.w	r2, r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8001832:	e017      	b.n	8001864 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8001834:	4b36      	ldr	r3, [pc, #216]	; (8001910 <RCC_GetClocksFreq+0x14c>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d006      	beq.n	800184e <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	4a35      	ldr	r2, [pc, #212]	; (8001918 <RCC_GetClocksFreq+0x154>)
 8001844:	fb02 f203 	mul.w	r2, r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	601a      	str	r2, [r3, #0]
      break;
 800184c:	e00a      	b.n	8001864 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	4a30      	ldr	r2, [pc, #192]	; (8001914 <RCC_GetClocksFreq+0x150>)
 8001852:	fb02 f203 	mul.w	r2, r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	601a      	str	r2, [r3, #0]
      break;
 800185a:	e003      	b.n	8001864 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a2d      	ldr	r2, [pc, #180]	; (8001914 <RCC_GetClocksFreq+0x150>)
 8001860:	601a      	str	r2, [r3, #0]
      break;
 8001862:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8001864:	4b2a      	ldr	r3, [pc, #168]	; (8001910 <RCC_GetClocksFreq+0x14c>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800186c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	091b      	lsrs	r3, r3, #4
 8001872:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001874:	4a29      	ldr	r2, [pc, #164]	; (800191c <RCC_GetClocksFreq+0x158>)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	4413      	add	r3, r2
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	b2db      	uxtb	r3, r3
 800187e:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	40da      	lsrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 800188c:	4b20      	ldr	r3, [pc, #128]	; (8001910 <RCC_GetClocksFreq+0x14c>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001894:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	0a1b      	lsrs	r3, r3, #8
 800189a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 800189c:	4a1f      	ldr	r2, [pc, #124]	; (800191c <RCC_GetClocksFreq+0x158>)
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	4413      	add	r3, r2
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	40da      	lsrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 80018b4:	4b16      	ldr	r3, [pc, #88]	; (8001910 <RCC_GetClocksFreq+0x14c>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80018bc:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	0adb      	lsrs	r3, r3, #11
 80018c2:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80018c4:	4a15      	ldr	r2, [pc, #84]	; (800191c <RCC_GetClocksFreq+0x158>)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	4413      	add	r3, r2
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	40da      	lsrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <RCC_GetClocksFreq+0x14c>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018e4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	0b9b      	lsrs	r3, r3, #14
 80018ea:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 80018ec:	4a0c      	ldr	r2, [pc, #48]	; (8001920 <RCC_GetClocksFreq+0x15c>)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	4413      	add	r3, r2
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68da      	ldr	r2, [r3, #12]
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	611a      	str	r2, [r3, #16]
}
 8001906:	bf00      	nop
 8001908:	371c      	adds	r7, #28
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr
 8001910:	40021000 	.word	0x40021000
 8001914:	007a1200 	.word	0x007a1200
 8001918:	003d0900 	.word	0x003d0900
 800191c:	20000004 	.word	0x20000004
 8001920:	20000014 	.word	0x20000014

08001924 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001930:	78fb      	ldrb	r3, [r7, #3]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d006      	beq.n	8001944 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8001936:	4909      	ldr	r1, [pc, #36]	; (800195c <RCC_AHBPeriphClockCmd+0x38>)
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <RCC_AHBPeriphClockCmd+0x38>)
 800193a:	695a      	ldr	r2, [r3, #20]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4313      	orrs	r3, r2
 8001940:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8001942:	e006      	b.n	8001952 <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001944:	4905      	ldr	r1, [pc, #20]	; (800195c <RCC_AHBPeriphClockCmd+0x38>)
 8001946:	4b05      	ldr	r3, [pc, #20]	; (800195c <RCC_AHBPeriphClockCmd+0x38>)
 8001948:	695a      	ldr	r2, [r3, #20]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	43db      	mvns	r3, r3
 800194e:	4013      	ands	r3, r2
 8001950:	614b      	str	r3, [r1, #20]
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr
 800195c:	40021000 	.word	0x40021000

08001960 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	460b      	mov	r3, r1
 800196a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800196c:	78fb      	ldrb	r3, [r7, #3]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d006      	beq.n	8001980 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001972:	4909      	ldr	r1, [pc, #36]	; (8001998 <RCC_APB2PeriphClockCmd+0x38>)
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <RCC_APB2PeriphClockCmd+0x38>)
 8001976:	699a      	ldr	r2, [r3, #24]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4313      	orrs	r3, r2
 800197c:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800197e:	e006      	b.n	800198e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001980:	4905      	ldr	r1, [pc, #20]	; (8001998 <RCC_APB2PeriphClockCmd+0x38>)
 8001982:	4b05      	ldr	r3, [pc, #20]	; (8001998 <RCC_APB2PeriphClockCmd+0x38>)
 8001984:	699a      	ldr	r2, [r3, #24]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	43db      	mvns	r3, r3
 800198a:	4013      	ands	r3, r2
 800198c:	618b      	str	r3, [r1, #24]
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr
 8001998:	40021000 	.word	0x40021000

0800199c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d006      	beq.n	80019bc <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80019ae:	4909      	ldr	r1, [pc, #36]	; (80019d4 <RCC_APB1PeriphClockCmd+0x38>)
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <RCC_APB1PeriphClockCmd+0x38>)
 80019b2:	69da      	ldr	r2, [r3, #28]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80019ba:	e006      	b.n	80019ca <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80019bc:	4905      	ldr	r1, [pc, #20]	; (80019d4 <RCC_APB1PeriphClockCmd+0x38>)
 80019be:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <RCC_APB1PeriphClockCmd+0x38>)
 80019c0:	69da      	ldr	r2, [r3, #28]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	43db      	mvns	r3, r3
 80019c6:	4013      	ands	r3, r2
 80019c8:	61cb      	str	r3, [r1, #28]
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr
 80019d4:	40021000 	.word	0x40021000

080019d8 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 80019ec:	89fb      	ldrh	r3, [r7, #14]
 80019ee:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80019f2:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	881a      	ldrh	r2, [r3, #0]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	885b      	ldrh	r3, [r3, #2]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001a04:	4313      	orrs	r3, r2
 8001a06:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001a14:	4313      	orrs	r3, r2
 8001a16:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001a24:	4313      	orrs	r3, r2
 8001a26:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	89fb      	ldrh	r3, [r7, #14]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	89fa      	ldrh	r2, [r7, #14]
 8001a3a:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	8b9b      	ldrh	r3, [r3, #28]
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	8a1a      	ldrh	r2, [r3, #16]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	821a      	strh	r2, [r3, #16]
}
 8001a54:	bf00      	nop
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr

08001a5e <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct : pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2207      	movs	r2, #7
 8001a9a:	821a      	strh	r2, [r3, #16]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr

08001aa6 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	460b      	mov	r3, r1
 8001ab0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ab2:	78fb      	ldrb	r3, [r7, #3]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d008      	beq.n	8001aca <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 8001ac8:	e007      	b.n	8001ada <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	801a      	strh	r2, [r3, #0]
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI/I2S DMA transfer request.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	807b      	strh	r3, [r7, #2]
 8001af0:	4613      	mov	r3, r2
 8001af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
  if (NewState != DISABLE)
 8001af4:	787b      	ldrb	r3, [r7, #1]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d008      	beq.n	8001b0c <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI/I2S DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	889b      	ldrh	r3, [r3, #4]
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	887b      	ldrh	r3, [r7, #2]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI/I2S DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
  }
}
 8001b0a:	e009      	b.n	8001b20 <SPI_I2S_DMACmd+0x3c>
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	889b      	ldrh	r3, [r3, #4]
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	887b      	ldrh	r3, [r7, #2]
 8001b14:	43db      	mvns	r3, r3
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	4013      	ands	r3, r2
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	809a      	strh	r2, [r3, #4]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
	...

08001b2c <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a2e      	ldr	r2, [pc, #184]	; (8001bfc <TIM_TimeBaseInit+0xd0>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d013      	beq.n	8001b70 <TIM_TimeBaseInit+0x44>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a2d      	ldr	r2, [pc, #180]	; (8001c00 <TIM_TimeBaseInit+0xd4>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d00f      	beq.n	8001b70 <TIM_TimeBaseInit+0x44>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b56:	d00b      	beq.n	8001b70 <TIM_TimeBaseInit+0x44>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a2a      	ldr	r2, [pc, #168]	; (8001c04 <TIM_TimeBaseInit+0xd8>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d007      	beq.n	8001b70 <TIM_TimeBaseInit+0x44>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a29      	ldr	r2, [pc, #164]	; (8001c08 <TIM_TimeBaseInit+0xdc>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d003      	beq.n	8001b70 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a28      	ldr	r2, [pc, #160]	; (8001c0c <TIM_TimeBaseInit+0xe0>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d108      	bne.n	8001b82 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8001b70:	89fb      	ldrh	r3, [r7, #14]
 8001b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b76:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	885a      	ldrh	r2, [r3, #2]
 8001b7c:	89fb      	ldrh	r3, [r7, #14]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a22      	ldr	r2, [pc, #136]	; (8001c10 <TIM_TimeBaseInit+0xe4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d00c      	beq.n	8001ba4 <TIM_TimeBaseInit+0x78>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a21      	ldr	r2, [pc, #132]	; (8001c14 <TIM_TimeBaseInit+0xe8>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d008      	beq.n	8001ba4 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8001b92:	89fb      	ldrh	r3, [r7, #14]
 8001b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b98:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	88da      	ldrh	r2, [r3, #6]
 8001b9e:	89fb      	ldrh	r3, [r7, #14]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	89fa      	ldrh	r2, [r7, #14]
 8001ba8:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	889a      	ldrh	r2, [r3, #4]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	881a      	ldrh	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a0f      	ldr	r2, [pc, #60]	; (8001bfc <TIM_TimeBaseInit+0xd0>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d00f      	beq.n	8001be2 <TIM_TimeBaseInit+0xb6>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a0e      	ldr	r2, [pc, #56]	; (8001c00 <TIM_TimeBaseInit+0xd4>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d00b      	beq.n	8001be2 <TIM_TimeBaseInit+0xb6>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <TIM_TimeBaseInit+0xec>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d007      	beq.n	8001be2 <TIM_TimeBaseInit+0xb6>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a11      	ldr	r2, [pc, #68]	; (8001c1c <TIM_TimeBaseInit+0xf0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d003      	beq.n	8001be2 <TIM_TimeBaseInit+0xb6>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a10      	ldr	r2, [pc, #64]	; (8001c20 <TIM_TimeBaseInit+0xf4>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d104      	bne.n	8001bec <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	7a1b      	ldrb	r3, [r3, #8]
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	829a      	strh	r2, [r3, #20]
}
 8001bf2:	bf00      	nop
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr
 8001bfc:	40012c00 	.word	0x40012c00
 8001c00:	40013400 	.word	0x40013400
 8001c04:	40000400 	.word	0x40000400
 8001c08:	40000800 	.word	0x40000800
 8001c0c:	40000c00 	.word	0x40000c00
 8001c10:	40001000 	.word	0x40001000
 8001c14:	40001400 	.word	0x40001400
 8001c18:	40014000 	.word	0x40014000
 8001c1c:	40014400 	.word	0x40014400
 8001c20:	40014800 	.word	0x40014800

08001c24 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  }
  else
  {
    assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10f      	bne.n	8001c56 <TIM_ICInit+0x32>
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	8859      	ldrh	r1, [r3, #2]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	889a      	ldrh	r2, [r3, #4]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	891b      	ldrh	r3, [r3, #8]
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f94e 	bl	8001ee4 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	88db      	ldrh	r3, [r3, #6]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f88c 	bl	8001d6c <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8001c54:	e036      	b.n	8001cc4 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d10f      	bne.n	8001c7e <TIM_ICInit+0x5a>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	8859      	ldrh	r1, [r3, #2]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	889a      	ldrh	r2, [r3, #4]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	891b      	ldrh	r3, [r3, #8]
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f9aa 	bl	8001fc4 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	88db      	ldrh	r3, [r3, #6]
 8001c74:	4619      	mov	r1, r3
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f893 	bl	8001da2 <TIM_SetIC2Prescaler>
}
 8001c7c:	e022      	b.n	8001cc4 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d10f      	bne.n	8001ca6 <TIM_ICInit+0x82>
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	8859      	ldrh	r1, [r3, #2]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	889a      	ldrh	r2, [r3, #4]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	891b      	ldrh	r3, [r3, #8]
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 fa10 	bl	80020b8 <TI3_Config>
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	88db      	ldrh	r3, [r3, #6]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f89c 	bl	8001ddc <TIM_SetIC3Prescaler>
}
 8001ca4:	e00e      	b.n	8001cc4 <TIM_ICInit+0xa0>
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	8859      	ldrh	r1, [r3, #2]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	889a      	ldrh	r2, [r3, #4]
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	891b      	ldrh	r3, [r3, #8]
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 fa76 	bl	80021a4 <TI4_Config>
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	88db      	ldrh	r3, [r3, #6]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f8a7 	bl	8001e12 <TIM_SetIC4Prescaler>
}
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cda:	809a      	strh	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	80da      	strh	r2, [r3, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	721a      	strb	r2, [r3, #8]
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr

08001cfe <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	811a      	strh	r2, [r3, #8]
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr

08001d2e <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	460b      	mov	r3, r1
 8001d38:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001d3a:	78fb      	ldrb	r3, [r7, #3]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d008      	beq.n	8001d52 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8001d50:	e007      	b.n	8001d62 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	f023 0301 	bic.w	r3, r3, #1
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	801a      	strh	r2, [r3, #0]
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	8b1b      	ldrh	r3, [r3, #24]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	f023 030c 	bic.w	r3, r3, #12
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	831a      	strh	r2, [r3, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	8b1b      	ldrh	r3, [r3, #24]
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	887b      	ldrh	r3, [r7, #2]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	831a      	strh	r2, [r3, #24]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr

08001da2 <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
 8001daa:	460b      	mov	r3, r1
 8001dac:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	8b1b      	ldrh	r3, [r3, #24]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	831a      	strh	r2, [r3, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	8b1b      	ldrh	r3, [r3, #24]
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	887b      	ldrh	r3, [r7, #2]
 8001dc6:	021b      	lsls	r3, r3, #8
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	831a      	strh	r2, [r3, #24]
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr

08001ddc <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	8b9b      	ldrh	r3, [r3, #28]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	f023 030c 	bic.w	r3, r3, #12
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	839a      	strh	r2, [r3, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	8b9b      	ldrh	r3, [r3, #28]
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	887b      	ldrh	r3, [r7, #2]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	839a      	strh	r2, [r3, #28]
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr

08001e12 <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	8b9b      	ldrh	r3, [r3, #28]
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	839a      	strh	r2, [r3, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	8b9b      	ldrh	r3, [r3, #28]
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	887b      	ldrh	r3, [r7, #2]
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	839a      	strh	r2, [r3, #28]
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr

08001e4c <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001e58:	b29b      	uxth	r3, r3
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr

08001e64 <TIM_GetCapture2>:
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001e70:	b29b      	uxth	r3, r3
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001e88:	b29b      	uxth	r3, r3
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr

08001e94 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ea2:	b29b      	uxth	r3, r3
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr

08001eae <TIM_GetFlagStatus>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 8001eae:	b480      	push	{r7}
 8001eb0:	b085      	sub	sp, #20
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8001eba:	2300      	movs	r3, #0
 8001ebc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	8a1b      	ldrh	r3, [r3, #16]
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	887b      	ldrh	r3, [r7, #2]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d002      	beq.n	8001ed4 <TIM_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	73fb      	strb	r3, [r7, #15]
 8001ed2:	e001      	b.n	8001ed8 <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	4608      	mov	r0, r1
 8001eee:	4611      	mov	r1, r2
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	817b      	strh	r3, [r7, #10]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	813b      	strh	r3, [r7, #8]
 8001efa:	4613      	mov	r3, r2
 8001efc:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	82bb      	strh	r3, [r7, #20]
 8001f02:	2300      	movs	r3, #0
 8001f04:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8c1b      	ldrh	r3, [r3, #32]
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	f023 0301 	bic.w	r3, r3, #1
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8b1b      	ldrh	r3, [r3, #24]
 8001f1a:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8c1b      	ldrh	r3, [r3, #32]
 8001f20:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 8001f22:	8abb      	ldrh	r3, [r7, #20]
 8001f24:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8001f28:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001f2a:	88fb      	ldrh	r3, [r7, #6]
 8001f2c:	011b      	lsls	r3, r3, #4
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	893b      	ldrh	r3, [r7, #8]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	8abb      	ldrh	r3, [r7, #20]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4a1c      	ldr	r2, [pc, #112]	; (8001fb0 <TI1_Config+0xcc>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d013      	beq.n	8001f6c <TI1_Config+0x88>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4a1b      	ldr	r2, [pc, #108]	; (8001fb4 <TI1_Config+0xd0>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d00f      	beq.n	8001f6c <TI1_Config+0x88>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f52:	d00b      	beq.n	8001f6c <TI1_Config+0x88>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4a18      	ldr	r2, [pc, #96]	; (8001fb8 <TI1_Config+0xd4>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d007      	beq.n	8001f6c <TI1_Config+0x88>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4a17      	ldr	r2, [pc, #92]	; (8001fbc <TI1_Config+0xd8>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d003      	beq.n	8001f6c <TI1_Config+0x88>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4a16      	ldr	r2, [pc, #88]	; (8001fc0 <TI1_Config+0xdc>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d10b      	bne.n	8001f84 <TI1_Config+0xa0>
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
 8001f6c:	8afb      	ldrh	r3, [r7, #22]
 8001f6e:	f023 0302 	bic.w	r3, r3, #2
 8001f72:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001f74:	897a      	ldrh	r2, [r7, #10]
 8001f76:	8afb      	ldrh	r3, [r7, #22]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	82fb      	strh	r3, [r7, #22]
 8001f82:	e00a      	b.n	8001f9a <TI1_Config+0xb6>
  }
  else
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001f84:	8afb      	ldrh	r3, [r7, #22]
 8001f86:	f023 030a 	bic.w	r3, r3, #10
 8001f8a:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001f8c:	897a      	ldrh	r2, [r7, #10]
 8001f8e:	8afb      	ldrh	r3, [r7, #22]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	82fb      	strh	r3, [r7, #22]
  }

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	8aba      	ldrh	r2, [r7, #20]
 8001f9e:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8afa      	ldrh	r2, [r7, #22]
 8001fa4:	841a      	strh	r2, [r3, #32]
}
 8001fa6:	bf00      	nop
 8001fa8:	371c      	adds	r7, #28
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr
 8001fb0:	40012c00 	.word	0x40012c00
 8001fb4:	40013400 	.word	0x40013400
 8001fb8:	40000400 	.word	0x40000400
 8001fbc:	40000800 	.word	0x40000800
 8001fc0:	40000c00 	.word	0x40000c00

08001fc4 <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b087      	sub	sp, #28
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	4608      	mov	r0, r1
 8001fce:	4611      	mov	r1, r2
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	817b      	strh	r3, [r7, #10]
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	813b      	strh	r3, [r7, #8]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	82bb      	strh	r3, [r7, #20]
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	82fb      	strh	r3, [r7, #22]
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8c1b      	ldrh	r3, [r3, #32]
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	f023 0310 	bic.w	r3, r3, #16
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8b1b      	ldrh	r3, [r3, #24]
 8001ffe:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8c1b      	ldrh	r3, [r3, #32]
 8002004:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8002006:	897b      	ldrh	r3, [r7, #10]
 8002008:	011b      	lsls	r3, r3, #4
 800200a:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 800200c:	8abb      	ldrh	r3, [r7, #20]
 800200e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002012:	051b      	lsls	r3, r3, #20
 8002014:	0d1b      	lsrs	r3, r3, #20
 8002016:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002018:	88fb      	ldrh	r3, [r7, #6]
 800201a:	031b      	lsls	r3, r3, #12
 800201c:	b29a      	uxth	r2, r3
 800201e:	8abb      	ldrh	r3, [r7, #20]
 8002020:	4313      	orrs	r3, r2
 8002022:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002024:	893b      	ldrh	r3, [r7, #8]
 8002026:	021b      	lsls	r3, r3, #8
 8002028:	b29a      	uxth	r2, r3
 800202a:	8abb      	ldrh	r3, [r7, #20]
 800202c:	4313      	orrs	r3, r2
 800202e:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4a1c      	ldr	r2, [pc, #112]	; (80020a4 <TI2_Config+0xe0>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d013      	beq.n	8002060 <TI2_Config+0x9c>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4a1b      	ldr	r2, [pc, #108]	; (80020a8 <TI2_Config+0xe4>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d00f      	beq.n	8002060 <TI2_Config+0x9c>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002046:	d00b      	beq.n	8002060 <TI2_Config+0x9c>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4a18      	ldr	r2, [pc, #96]	; (80020ac <TI2_Config+0xe8>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d007      	beq.n	8002060 <TI2_Config+0x9c>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4a17      	ldr	r2, [pc, #92]	; (80020b0 <TI2_Config+0xec>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d003      	beq.n	8002060 <TI2_Config+0x9c>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4a16      	ldr	r2, [pc, #88]	; (80020b4 <TI2_Config+0xf0>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d10b      	bne.n	8002078 <TI2_Config+0xb4>
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
 8002060:	8afb      	ldrh	r3, [r7, #22]
 8002062:	f023 0320 	bic.w	r3, r3, #32
 8002066:	82fb      	strh	r3, [r7, #22]
    tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002068:	8a7a      	ldrh	r2, [r7, #18]
 800206a:	8afb      	ldrh	r3, [r7, #22]
 800206c:	4313      	orrs	r3, r2
 800206e:	b29b      	uxth	r3, r3
 8002070:	f043 0310 	orr.w	r3, r3, #16
 8002074:	82fb      	strh	r3, [r7, #22]
 8002076:	e00a      	b.n	800208e <TI2_Config+0xca>
  }
  else
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002078:	8afb      	ldrh	r3, [r7, #22]
 800207a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800207e:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
 8002080:	897a      	ldrh	r2, [r7, #10]
 8002082:	8afb      	ldrh	r3, [r7, #22]
 8002084:	4313      	orrs	r3, r2
 8002086:	b29b      	uxth	r3, r3
 8002088:	f043 0310 	orr.w	r3, r3, #16
 800208c:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	8aba      	ldrh	r2, [r7, #20]
 8002092:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8afa      	ldrh	r2, [r7, #22]
 8002098:	841a      	strh	r2, [r3, #32]
}
 800209a:	bf00      	nop
 800209c:	371c      	adds	r7, #28
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr
 80020a4:	40012c00 	.word	0x40012c00
 80020a8:	40013400 	.word	0x40013400
 80020ac:	40000400 	.word	0x40000400
 80020b0:	40000800 	.word	0x40000800
 80020b4:	40000c00 	.word	0x40000c00

080020b8 <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	4608      	mov	r0, r1
 80020c2:	4611      	mov	r1, r2
 80020c4:	461a      	mov	r2, r3
 80020c6:	4603      	mov	r3, r0
 80020c8:	817b      	strh	r3, [r7, #10]
 80020ca:	460b      	mov	r3, r1
 80020cc:	813b      	strh	r3, [r7, #8]
 80020ce:	4613      	mov	r3, r2
 80020d0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	82bb      	strh	r3, [r7, #20]
 80020d6:	2300      	movs	r3, #0
 80020d8:	82fb      	strh	r3, [r7, #22]
 80020da:	2300      	movs	r3, #0
 80020dc:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	8c1b      	ldrh	r3, [r3, #32]
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8b9b      	ldrh	r3, [r3, #28]
 80020f2:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8c1b      	ldrh	r3, [r3, #32]
 80020f8:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 80020fa:	897b      	ldrh	r3, [r7, #10]
 80020fc:	021b      	lsls	r3, r3, #8
 80020fe:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 8002100:	8abb      	ldrh	r3, [r7, #20]
 8002102:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8002106:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002108:	88fb      	ldrh	r3, [r7, #6]
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	b29a      	uxth	r2, r3
 800210e:	893b      	ldrh	r3, [r7, #8]
 8002110:	4313      	orrs	r3, r2
 8002112:	b29a      	uxth	r2, r3
 8002114:	8abb      	ldrh	r3, [r7, #20]
 8002116:	4313      	orrs	r3, r2
 8002118:	82bb      	strh	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	4a1c      	ldr	r2, [pc, #112]	; (8002190 <TI3_Config+0xd8>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d013      	beq.n	800214a <TI3_Config+0x92>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4a1b      	ldr	r2, [pc, #108]	; (8002194 <TI3_Config+0xdc>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d00f      	beq.n	800214a <TI3_Config+0x92>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002130:	d00b      	beq.n	800214a <TI3_Config+0x92>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4a18      	ldr	r2, [pc, #96]	; (8002198 <TI3_Config+0xe0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d007      	beq.n	800214a <TI3_Config+0x92>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	4a17      	ldr	r2, [pc, #92]	; (800219c <TI3_Config+0xe4>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d003      	beq.n	800214a <TI3_Config+0x92>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	4a16      	ldr	r2, [pc, #88]	; (80021a0 <TI3_Config+0xe8>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d10b      	bne.n	8002162 <TI3_Config+0xaa>
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
 800214a:	8afb      	ldrh	r3, [r7, #22]
 800214c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002150:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8002152:	8a7a      	ldrh	r2, [r7, #18]
 8002154:	8afb      	ldrh	r3, [r7, #22]
 8002156:	4313      	orrs	r3, r2
 8002158:	b29b      	uxth	r3, r3
 800215a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800215e:	82fb      	strh	r3, [r7, #22]
 8002160:	e00a      	b.n	8002178 <TI3_Config+0xc0>
  }
  else
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002162:	8afb      	ldrh	r3, [r7, #22]
 8002164:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002168:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
 800216a:	897a      	ldrh	r2, [r7, #10]
 800216c:	8afb      	ldrh	r3, [r7, #22]
 800216e:	4313      	orrs	r3, r2
 8002170:	b29b      	uxth	r3, r3
 8002172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002176:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8aba      	ldrh	r2, [r7, #20]
 800217c:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8afa      	ldrh	r2, [r7, #22]
 8002182:	841a      	strh	r2, [r3, #32]
}
 8002184:	bf00      	nop
 8002186:	371c      	adds	r7, #28
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40012c00 	.word	0x40012c00
 8002194:	40013400 	.word	0x40013400
 8002198:	40000400 	.word	0x40000400
 800219c:	40000800 	.word	0x40000800
 80021a0:	40000c00 	.word	0x40000c00

080021a4 <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b087      	sub	sp, #28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	4608      	mov	r0, r1
 80021ae:	4611      	mov	r1, r2
 80021b0:	461a      	mov	r2, r3
 80021b2:	4603      	mov	r3, r0
 80021b4:	817b      	strh	r3, [r7, #10]
 80021b6:	460b      	mov	r3, r1
 80021b8:	813b      	strh	r3, [r7, #8]
 80021ba:	4613      	mov	r3, r2
 80021bc:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	82bb      	strh	r3, [r7, #20]
 80021c2:	2300      	movs	r3, #0
 80021c4:	82fb      	strh	r3, [r7, #22]
 80021c6:	2300      	movs	r3, #0
 80021c8:	827b      	strh	r3, [r7, #18]

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8c1b      	ldrh	r3, [r3, #32]
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8b9b      	ldrh	r3, [r3, #28]
 80021de:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8c1b      	ldrh	r3, [r3, #32]
 80021e4:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 80021e6:	897b      	ldrh	r3, [r7, #10]
 80021e8:	031b      	lsls	r3, r3, #12
 80021ea:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 80021ec:	8abb      	ldrh	r3, [r7, #20]
 80021ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021f2:	051b      	lsls	r3, r3, #20
 80021f4:	0d1b      	lsrs	r3, r3, #20
 80021f6:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 80021f8:	893b      	ldrh	r3, [r7, #8]
 80021fa:	021b      	lsls	r3, r3, #8
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	8abb      	ldrh	r3, [r7, #20]
 8002200:	4313      	orrs	r3, r2
 8002202:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8002204:	88fb      	ldrh	r3, [r7, #6]
 8002206:	031b      	lsls	r3, r3, #12
 8002208:	b29a      	uxth	r2, r3
 800220a:	8abb      	ldrh	r3, [r7, #20]
 800220c:	4313      	orrs	r3, r2
 800220e:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4a1d      	ldr	r2, [pc, #116]	; (8002288 <TI4_Config+0xe4>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d013      	beq.n	8002240 <TI4_Config+0x9c>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4a1c      	ldr	r2, [pc, #112]	; (800228c <TI4_Config+0xe8>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d00f      	beq.n	8002240 <TI4_Config+0x9c>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002226:	d00b      	beq.n	8002240 <TI4_Config+0x9c>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4a19      	ldr	r2, [pc, #100]	; (8002290 <TI4_Config+0xec>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d007      	beq.n	8002240 <TI4_Config+0x9c>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4a18      	ldr	r2, [pc, #96]	; (8002294 <TI4_Config+0xf0>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d003      	beq.n	8002240 <TI4_Config+0x9c>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4a17      	ldr	r2, [pc, #92]	; (8002298 <TI4_Config+0xf4>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d10b      	bne.n	8002258 <TI4_Config+0xb4>
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
 8002240:	8afb      	ldrh	r3, [r7, #22]
 8002242:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002246:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8002248:	8a7a      	ldrh	r2, [r7, #18]
 800224a:	8afb      	ldrh	r3, [r7, #22]
 800224c:	4313      	orrs	r3, r2
 800224e:	b29b      	uxth	r3, r3
 8002250:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002254:	82fb      	strh	r3, [r7, #22]
 8002256:	e00c      	b.n	8002272 <TI4_Config+0xce>
  }
  else
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
 8002258:	8afb      	ldrh	r3, [r7, #22]
 800225a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800225e:	045b      	lsls	r3, r3, #17
 8002260:	0c5b      	lsrs	r3, r3, #17
 8002262:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
 8002264:	897a      	ldrh	r2, [r7, #10]
 8002266:	8afb      	ldrh	r3, [r7, #22]
 8002268:	4313      	orrs	r3, r2
 800226a:	b29b      	uxth	r3, r3
 800226c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002270:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	8aba      	ldrh	r2, [r7, #20]
 8002276:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8afa      	ldrh	r2, [r7, #22]
 800227c:	841a      	strh	r2, [r3, #32]
}
 800227e:	bf00      	nop
 8002280:	371c      	adds	r7, #28
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr
 8002288:	40012c00 	.word	0x40012c00
 800228c:	40013400 	.word	0x40013400
 8002290:	40000400 	.word	0x40000400
 8002294:	40000800 	.word	0x40000800
 8002298:	40000c00 	.word	0x40000c00

0800229c <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08c      	sub	sp, #48	; 0x30
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80022a6:	2300      	movs	r3, #0
 80022a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022aa:	2300      	movs	r3, #0
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 80022ae:	2300      	movs	r3, #0
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 80022b2:	2300      	movs	r3, #0
 80022b4:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	8a1b      	ldrh	r3, [r3, #16]
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 80022c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022c8:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 80022cc:	4013      	ands	r3, r2
 80022ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	88db      	ldrh	r3, [r3, #6]
 80022d4:	461a      	mov	r2, r3
 80022d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d8:	4313      	orrs	r3, r2
 80022da:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80022dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022de:	b29a      	uxth	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	899b      	ldrh	r3, [r3, #12]
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 80022ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022ee:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 80022f2:	4013      	ands	r3, r2
 80022f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	889a      	ldrh	r2, [r3, #4]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	891b      	ldrh	r3, [r3, #8]
 80022fe:	4313      	orrs	r3, r2
 8002300:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002306:	4313      	orrs	r3, r2
 8002308:	b29b      	uxth	r3, r3
 800230a:	461a      	mov	r2, r3
 800230c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230e:	4313      	orrs	r3, r2
 8002310:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8002312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002314:	b29a      	uxth	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	8a9b      	ldrh	r3, [r3, #20]
 800231e:	b29b      	uxth	r3, r3
 8002320:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8002322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002324:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8002328:	4013      	ands	r3, r2
 800232a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	899b      	ldrh	r3, [r3, #12]
 8002330:	461a      	mov	r2, r3
 8002332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002334:	4313      	orrs	r3, r2
 8002336:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8002338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233a:	b29a      	uxth	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8002340:	f107 0308 	add.w	r3, r7, #8
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fa3d 	bl	80017c4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	4a2e      	ldr	r2, [pc, #184]	; (8002408 <USART_Init+0x16c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d102      	bne.n	8002358 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	62bb      	str	r3, [r7, #40]	; 0x28
 8002356:	e001      	b.n	800235c <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	899b      	ldrh	r3, [r3, #12]
 8002360:	b29b      	uxth	r3, r3
 8002362:	b21b      	sxth	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	da0c      	bge.n	8002382 <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	009a      	lsls	r2, r3, #2
 8002372:	441a      	add	r2, r3
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	fbb2 f3f3 	udiv	r3, r2, r3
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
 8002380:	e00b      	b.n	800239a <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	009a      	lsls	r2, r3, #2
 800238c:	441a      	add	r2, r3
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	4a1b      	ldr	r2, [pc, #108]	; (800240c <USART_Init+0x170>)
 800239e:	fba2 2303 	umull	r2, r3, r2, r3
 80023a2:	095b      	lsrs	r3, r3, #5
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80023a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023aa:	091b      	lsrs	r3, r3, #4
 80023ac:	2264      	movs	r2, #100	; 0x64
 80023ae:	fb02 f303 	mul.w	r3, r2, r3
 80023b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	899b      	ldrh	r3, [r3, #12]
 80023bc:	b29b      	uxth	r3, r3
 80023be:	b21b      	sxth	r3, r3
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	da0c      	bge.n	80023de <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	3332      	adds	r3, #50	; 0x32
 80023ca:	4a10      	ldr	r2, [pc, #64]	; (800240c <USART_Init+0x170>)
 80023cc:	fba2 2303 	umull	r2, r3, r2, r3
 80023d0:	095b      	lsrs	r3, r3, #5
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023d8:	4313      	orrs	r3, r2
 80023da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023dc:	e00b      	b.n	80023f6 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80023de:	6a3b      	ldr	r3, [r7, #32]
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	3332      	adds	r3, #50	; 0x32
 80023e4:	4a09      	ldr	r2, [pc, #36]	; (800240c <USART_Init+0x170>)
 80023e6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ea:	095b      	lsrs	r3, r3, #5
 80023ec:	f003 030f 	and.w	r3, r3, #15
 80023f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023f2:	4313      	orrs	r3, r2
 80023f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 80023f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	811a      	strh	r2, [r3, #8]
}
 80023fe:	bf00      	nop
 8002400:	3730      	adds	r7, #48	; 0x30
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40013800 	.word	0x40013800
 800240c:	51eb851f 	.word	0x51eb851f

08002410 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800241c:	78fb      	ldrb	r3, [r7, #3]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d008      	beq.n	8002434 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	899b      	ldrh	r3, [r3, #12]
 8002426:	b29b      	uxth	r3, r3
 8002428:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800242c:	b29a      	uxth	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8002432:	e007      	b.n	8002444 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	899b      	ldrh	r3, [r3, #12]
 8002438:	b29b      	uxth	r3, r3
 800243a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800243e:	b29a      	uxth	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	819a      	strh	r2, [r3, #12]
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr

0800244e <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	460b      	mov	r3, r1
 8002458:	807b      	strh	r3, [r7, #2]
 800245a:	4613      	mov	r3, r2
 800245c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
 800245e:	787b      	ldrb	r3, [r7, #1]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d008      	beq.n	8002476 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	8a9b      	ldrh	r3, [r3, #20]
 8002468:	b29a      	uxth	r2, r3
 800246a:	887b      	ldrh	r3, [r7, #2]
 800246c:	4313      	orrs	r3, r2
 800246e:	b29a      	uxth	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
 8002474:	e009      	b.n	800248a <USART_DMACmd+0x3c>
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	8a9b      	ldrh	r3, [r3, #20]
 800247a:	b29a      	uxth	r2, r3
 800247c:	887b      	ldrh	r3, [r7, #2]
 800247e:	43db      	mvns	r3, r3
 8002480:	b29b      	uxth	r3, r3
 8002482:	4013      	ands	r3, r2
 8002484:	b29a      	uxth	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	829a      	strh	r2, [r3, #20]
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr

08002494 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80024a0:	887b      	ldrh	r3, [r7, #2]
 80024a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	809a      	strh	r2, [r3, #4]
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr

080024b6 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b085      	sub	sp, #20
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	460b      	mov	r3, r1
 80024c0:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80024c2:	2300      	movs	r3, #0
 80024c4:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	887b      	ldrh	r3, [r7, #2]
 80024ce:	4013      	ands	r3, r2
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80024d6:	2301      	movs	r3, #1
 80024d8:	73fb      	strb	r3, [r7, #15]
 80024da:	e001      	b.n	80024e0 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80024dc:	2300      	movs	r3, #0
 80024de:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <_ZN11CSerialPort4InitEP6IUsartP6ITimer>:
 80024ec:	b510      	push	{r4, lr}
 80024ee:	f500 74bc 	add.w	r4, r0, #376	; 0x178
 80024f2:	f8c0 1174 	str.w	r1, [r0, #372]	; 0x174
 80024f6:	4620      	mov	r0, r4
 80024f8:	4611      	mov	r1, r2
 80024fa:	f001 fa25 	bl	8003948 <_ZN8CTimeout4InitEP6ITimer>
 80024fe:	4620      	mov	r0, r4
 8002500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002504:	f241 3188 	movw	r1, #5000	; 0x1388
 8002508:	f001 ba2a 	b.w	8003960 <_ZN8CTimeout9SetExpiryEt>

0800250c <_ZN11CSerialPort11AddFunctionEhPFvPcS0_E>:
 800250c:	290a      	cmp	r1, #10
 800250e:	bfdc      	itt	le
 8002510:	eb00 0081 	addle.w	r0, r0, r1, lsl #2
 8002514:	f8c0 214c 	strle.w	r2, [r0, #332]	; 0x14c
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop

0800251c <_ZN11CSerialPort7ExecuteEv>:
 800251c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800251e:	f500 75bc 	add.w	r5, r0, #376	; 0x178
 8002522:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8002526:	4604      	mov	r4, r0
 8002528:	4628      	mov	r0, r5
 800252a:	f001 fa25 	bl	8003978 <_ZN8CTimeout10HasElapsedEv>
 800252e:	b128      	cbz	r0, 800253c <_ZN11CSerialPort7ExecuteEv+0x20>
 8002530:	f8b4 3148 	ldrh.w	r3, [r4, #328]	; 0x148
 8002534:	b113      	cbz	r3, 800253c <_ZN11CSerialPort7ExecuteEv+0x20>
 8002536:	2300      	movs	r3, #0
 8002538:	f8a4 3148 	strh.w	r3, [r4, #328]	; 0x148
 800253c:	f8d4 0174 	ldr.w	r0, [r4, #372]	; 0x174
 8002540:	6803      	ldr	r3, [r0, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	4798      	blx	r3
 8002546:	b910      	cbnz	r0, 800254e <_ZN11CSerialPort7ExecuteEv+0x32>
 8002548:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800254c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800254e:	f8d4 0174 	ldr.w	r0, [r4, #372]	; 0x174
 8002552:	f8b4 6148 	ldrh.w	r6, [r4, #328]	; 0x148
 8002556:	6803      	ldr	r3, [r0, #0]
 8002558:	4426      	add	r6, r4
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	4798      	blx	r3
 800255e:	71b0      	strb	r0, [r6, #6]
 8002560:	4628      	mov	r0, r5
 8002562:	f001 f9f3 	bl	800394c <_ZN8CTimeout5ResetEv>
 8002566:	f8b4 3148 	ldrh.w	r3, [r4, #328]	; 0x148
 800256a:	18e2      	adds	r2, r4, r3
 800256c:	7992      	ldrb	r2, [r2, #6]
 800256e:	2a0a      	cmp	r2, #10
 8002570:	d00a      	beq.n	8002588 <_ZN11CSerialPort7ExecuteEv+0x6c>
 8002572:	3301      	adds	r3, #1
 8002574:	b29b      	uxth	r3, r3
 8002576:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 800257a:	d900      	bls.n	800257e <_ZN11CSerialPort7ExecuteEv+0x62>
 800257c:	2300      	movs	r3, #0
 800257e:	f8a4 3148 	strh.w	r3, [r4, #328]	; 0x148
 8002582:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8002586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002588:	f44f 72a1 	mov.w	r2, #322	; 0x142
 800258c:	2100      	movs	r1, #0
 800258e:	4668      	mov	r0, sp
 8002590:	1da6      	adds	r6, r4, #6
 8002592:	f002 fa9d 	bl	8004ad0 <memset>
 8002596:	1d21      	adds	r1, r4, #4
 8002598:	4630      	mov	r0, r6
 800259a:	f003 f8f7 	bl	800578c <strtok>
 800259e:	f002 f84c 	bl	800463a <atoi>
 80025a2:	b287      	uxth	r7, r0
 80025a4:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 80025a8:	f8d3 514c 	ldr.w	r5, [r3, #332]	; 0x14c
 80025ac:	2d00      	cmp	r5, #0
 80025ae:	d0e5      	beq.n	800257c <_ZN11CSerialPort7ExecuteEv+0x60>
 80025b0:	4630      	mov	r0, r6
 80025b2:	f7fd fdcd 	bl	8000150 <strlen>
 80025b6:	3007      	adds	r0, #7
 80025b8:	4420      	add	r0, r4
 80025ba:	4669      	mov	r1, sp
 80025bc:	47a8      	blx	r5
 80025be:	f89d 3000 	ldrb.w	r3, [sp]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0da      	beq.n	800257c <_ZN11CSerialPort7ExecuteEv+0x60>
 80025c6:	463a      	mov	r2, r7
 80025c8:	a851      	add	r0, sp, #324	; 0x144
 80025ca:	4907      	ldr	r1, [pc, #28]	; (80025e8 <_ZN11CSerialPort7ExecuteEv+0xcc>)
 80025cc:	f002 f813 	bl	80045f6 <siprintf>
 80025d0:	4669      	mov	r1, sp
 80025d2:	a851      	add	r0, sp, #324	; 0x144
 80025d4:	f002 faa0 	bl	8004b18 <strcat>
 80025d8:	f8d4 0174 	ldr.w	r0, [r4, #372]	; 0x174
 80025dc:	a951      	add	r1, sp, #324	; 0x144
 80025de:	6803      	ldr	r3, [r0, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	4798      	blx	r3
 80025e4:	e7ca      	b.n	800257c <_ZN11CSerialPort7ExecuteEv+0x60>
 80025e6:	bf00      	nop
 80025e8:	08006ba8 	.word	0x08006ba8

080025ec <_ZN11CSerialPortC1Ev>:
 80025ec:	222c      	movs	r2, #44	; 0x2c
 80025ee:	4b08      	ldr	r3, [pc, #32]	; (8002610 <_ZN11CSerialPortC1Ev+0x24>)
 80025f0:	b510      	push	{r4, lr}
 80025f2:	4604      	mov	r4, r0
 80025f4:	8082      	strh	r2, [r0, #4]
 80025f6:	6003      	str	r3, [r0, #0]
 80025f8:	f500 70bc 	add.w	r0, r0, #376	; 0x178
 80025fc:	f001 f9d2 	bl	80039a4 <_ZN8CTimeoutC1Ev>
 8002600:	2300      	movs	r3, #0
 8002602:	4620      	mov	r0, r4
 8002604:	f8a4 3148 	strh.w	r3, [r4, #328]	; 0x148
 8002608:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
 800260c:	bd10      	pop	{r4, pc}
 800260e:	bf00      	nop
 8002610:	08006bb4 	.word	0x08006bb4

08002614 <_ZN11CSerialPortD1Ev>:
 8002614:	b510      	push	{r4, lr}
 8002616:	4604      	mov	r4, r0
 8002618:	4b03      	ldr	r3, [pc, #12]	; (8002628 <_ZN11CSerialPortD1Ev+0x14>)
 800261a:	f500 70bc 	add.w	r0, r0, #376	; 0x178
 800261e:	6023      	str	r3, [r4, #0]
 8002620:	f001 f98a 	bl	8003938 <_ZN8CTimeoutD1Ev>
 8002624:	4620      	mov	r0, r4
 8002626:	bd10      	pop	{r4, pc}
 8002628:	08006bb4 	.word	0x08006bb4

0800262c <_ZN11CSerialPortD0Ev>:
 800262c:	b510      	push	{r4, lr}
 800262e:	4604      	mov	r4, r0
 8002630:	4b05      	ldr	r3, [pc, #20]	; (8002648 <_ZN11CSerialPortD0Ev+0x1c>)
 8002632:	f500 70bc 	add.w	r0, r0, #376	; 0x178
 8002636:	6023      	str	r3, [r4, #0]
 8002638:	f001 f97e 	bl	8003938 <_ZN8CTimeoutD1Ev>
 800263c:	4620      	mov	r0, r4
 800263e:	f001 fff1 	bl	8004624 <_ZdlPv>
 8002642:	4620      	mov	r0, r4
 8002644:	bd10      	pop	{r4, pc}
 8002646:	bf00      	nop
 8002648:	08006bb4 	.word	0x08006bb4

0800264c <_ZN3DMD10WritePixelEtthh.constprop.3>:
 800264c:	b470      	push	{r4, r5, r6}
 800264e:	f890 4114 	ldrb.w	r4, [r0, #276]	; 0x114
 8002652:	ebb1 1f44 	cmp.w	r1, r4, lsl #5
 8002656:	da28      	bge.n	80026aa <_ZN3DMD10WritePixelEtthh.constprop.3+0x5e>
 8002658:	f890 5115 	ldrb.w	r5, [r0, #277]	; 0x115
 800265c:	ebb2 1f05 	cmp.w	r2, r5, lsl #4
 8002660:	da23      	bge.n	80026aa <_ZN3DMD10WritePixelEtthh.constprop.3+0x5e>
 8002662:	0916      	lsrs	r6, r2, #4
 8002664:	094d      	lsrs	r5, r1, #5
 8002666:	fb06 5404 	mla	r4, r6, r4, r5
 800266a:	f001 011f 	and.w	r1, r1, #31
 800266e:	b2e4      	uxtb	r4, r4
 8002670:	f890 5116 	ldrb.w	r5, [r0, #278]	; 0x116
 8002674:	eb01 1144 	add.w	r1, r1, r4, lsl #5
 8002678:	08ce      	lsrs	r6, r1, #3
 800267a:	f002 020f 	and.w	r2, r2, #15
 800267e:	00ac      	lsls	r4, r5, #2
 8002680:	fb04 6202 	mla	r2, r4, r2, r6
 8002684:	f001 0107 	and.w	r1, r1, #7
 8002688:	4401      	add	r1, r0
 800268a:	f891 111f 	ldrb.w	r1, [r1, #287]	; 0x11f
 800268e:	b292      	uxth	r2, r2
 8002690:	2b04      	cmp	r3, #4
 8002692:	d80a      	bhi.n	80026aa <_ZN3DMD10WritePixelEtthh.constprop.3+0x5e>
 8002694:	e8df f003 	tbb	[pc, r3]
 8002698:	0b16110b 	.word	0x0b16110b
 800269c:	03          	.byte	0x03
 800269d:	00          	.byte	0x00
 800269e:	6803      	ldr	r3, [r0, #0]
 80026a0:	5c98      	ldrb	r0, [r3, r2]
 80026a2:	4201      	tst	r1, r0
 80026a4:	bf04      	itt	eq
 80026a6:	4301      	orreq	r1, r0
 80026a8:	5499      	strbeq	r1, [r3, r2]
 80026aa:	bc70      	pop	{r4, r5, r6}
 80026ac:	4770      	bx	lr
 80026ae:	6800      	ldr	r0, [r0, #0]
 80026b0:	5c83      	ldrb	r3, [r0, r2]
 80026b2:	ea23 0101 	bic.w	r1, r3, r1
 80026b6:	5481      	strb	r1, [r0, r2]
 80026b8:	e7f7      	b.n	80026aa <_ZN3DMD10WritePixelEtthh.constprop.3+0x5e>
 80026ba:	6800      	ldr	r0, [r0, #0]
 80026bc:	5c83      	ldrb	r3, [r0, r2]
 80026be:	4319      	orrs	r1, r3
 80026c0:	5481      	strb	r1, [r0, r2]
 80026c2:	e7f2      	b.n	80026aa <_ZN3DMD10WritePixelEtthh.constprop.3+0x5e>
 80026c4:	6800      	ldr	r0, [r0, #0]
 80026c6:	5c83      	ldrb	r3, [r0, r2]
 80026c8:	4219      	tst	r1, r3
 80026ca:	bf0c      	ite	eq
 80026cc:	430b      	orreq	r3, r1
 80026ce:	438b      	bicne	r3, r1
 80026d0:	5483      	strb	r3, [r0, r2]
 80026d2:	e7ea      	b.n	80026aa <_ZN3DMD10WritePixelEtthh.constprop.3+0x5e>

080026d4 <_ZN3DMDC1Ev>:
 80026d4:	b510      	push	{r4, lr}
 80026d6:	4604      	mov	r4, r0
 80026d8:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <_ZN3DMDC1Ev+0x1c>)
 80026da:	cb03      	ldmia	r3!, {r0, r1}
 80026dc:	f8c4 011f 	str.w	r0, [r4, #287]	; 0x11f
 80026e0:	f8c4 1123 	str.w	r1, [r4, #291]	; 0x123
 80026e4:	f504 70a4 	add.w	r0, r4, #328	; 0x148
 80026e8:	f001 f95c 	bl	80039a4 <_ZN8CTimeoutC1Ev>
 80026ec:	4620      	mov	r0, r4
 80026ee:	bd10      	pop	{r4, pc}
 80026f0:	08006ba0 	.word	0x08006ba0

080026f4 <_ZN3DMD4InitEhhP11SPI_TypeDefP4IDmaP6ITimerP5IGpioS7_S7_S7_t>:
 80026f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026f8:	4680      	mov	r8, r0
 80026fa:	fb02 f001 	mul.w	r0, r2, r1
 80026fe:	b2c0      	uxtb	r0, r0
 8002700:	00c4      	lsls	r4, r0, #3
 8002702:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8002706:	0107      	lsls	r7, r0, #4
 8002708:	0146      	lsls	r6, r0, #5
 800270a:	00a4      	lsls	r4, r4, #2
 800270c:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8002710:	f888 1114 	strb.w	r1, [r8, #276]	; 0x114
 8002714:	f888 0116 	strb.w	r0, [r8, #278]	; 0x116
 8002718:	f888 2115 	strb.w	r2, [r8, #277]	; 0x115
 800271c:	f8a8 7118 	strh.w	r7, [r8, #280]	; 0x118
 8002720:	f8a8 611a 	strh.w	r6, [r8, #282]	; 0x11a
 8002724:	f8a8 411c 	strh.w	r4, [r8, #284]	; 0x11c
 8002728:	4650      	mov	r0, sl
 800272a:	461e      	mov	r6, r3
 800272c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800272e:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 8002732:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8002734:	f001 ffb0 	bl	8004698 <malloc>
 8002738:	f04f 0900 	mov.w	r9, #0
 800273c:	4652      	mov	r2, sl
 800273e:	21ff      	movs	r1, #255	; 0xff
 8002740:	f508 75a4 	add.w	r5, r8, #328	; 0x148
 8002744:	f8c8 0000 	str.w	r0, [r8]
 8002748:	f002 f9c2 	bl	8004ad0 <memset>
 800274c:	4628      	mov	r0, r5
 800274e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002750:	f8c8 6138 	str.w	r6, [r8, #312]	; 0x138
 8002754:	f8c8 713c 	str.w	r7, [r8, #316]	; 0x13c
 8002758:	f888 911e 	strb.w	r9, [r8, #286]	; 0x11e
 800275c:	f888 9178 	strb.w	r9, [r8, #376]	; 0x178
 8002760:	f001 f8f2 	bl	8003948 <_ZN8CTimeout4InitEP6ITimer>
 8002764:	4659      	mov	r1, fp
 8002766:	4628      	mov	r0, r5
 8002768:	f001 f8fa 	bl	8003960 <_ZN8CTimeout9SetExpiryEt>
 800276c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800276e:	6823      	ldr	r3, [r4, #0]
 8002770:	f8c8 2134 	str.w	r2, [r8, #308]	; 0x134
 8002774:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f8c8 212c 	str.w	r2, [r8, #300]	; 0x12c
 800277c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800277e:	4620      	mov	r0, r4
 8002780:	f8c8 2130 	str.w	r2, [r8, #304]	; 0x130
 8002784:	f8a8 b140 	strh.w	fp, [r8, #320]	; 0x140
 8002788:	f8c8 4128 	str.w	r4, [r8, #296]	; 0x128
 800278c:	4798      	blx	r3
 800278e:	f8d8 012c 	ldr.w	r0, [r8, #300]	; 0x12c
 8002792:	6803      	ldr	r3, [r0, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	4798      	blx	r3
 8002798:	f8d8 0130 	ldr.w	r0, [r8, #304]	; 0x130
 800279c:	6803      	ldr	r3, [r0, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	4798      	blx	r3
 80027a2:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
 80027a6:	2110      	movs	r1, #16
 80027a8:	6803      	ldr	r3, [r0, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	4798      	blx	r3
 80027ae:	f898 2116 	ldrb.w	r2, [r8, #278]	; 0x116
 80027b2:	f8d8 0000 	ldr.w	r0, [r8]
 80027b6:	0192      	lsls	r2, r2, #6
 80027b8:	21ff      	movs	r1, #255	; 0xff
 80027ba:	f002 f989 	bl	8004ad0 <memset>
 80027be:	f888 911e 	strb.w	r9, [r8, #286]	; 0x11e
 80027c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027c6:	bf00      	nop

080027c8 <_ZN3DMD8DrawLineEssssh>:
 80027c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027cc:	4690      	mov	r8, r2
 80027ce:	4606      	mov	r6, r0
 80027d0:	b087      	sub	sp, #28
 80027d2:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 80027d6:	fa1f f588 	uxth.w	r5, r8
 80027da:	9205      	str	r2, [sp, #20]
 80027dc:	1b52      	subs	r2, r2, r5
 80027de:	b292      	uxth	r2, r2
 80027e0:	b28c      	uxth	r4, r1
 80027e2:	9304      	str	r3, [sp, #16]
 80027e4:	460f      	mov	r7, r1
 80027e6:	1b1b      	subs	r3, r3, r4
 80027e8:	b211      	sxth	r1, r2
 80027ea:	2900      	cmp	r1, #0
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	fa0f f983 	sxth.w	r9, r3
 80027f2:	bfbd      	ittte	lt
 80027f4:	4252      	neglt	r2, r2
 80027f6:	b211      	sxthlt	r1, r2
 80027f8:	f64f 7bff 	movwlt	fp, #65535	; 0xffff
 80027fc:	f04f 0b01 	movge.w	fp, #1
 8002800:	f1b9 0f00 	cmp.w	r9, #0
 8002804:	bfbc      	itt	lt
 8002806:	425b      	neglt	r3, r3
 8002808:	fa0f f983 	sxthlt.w	r9, r3
 800280c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8002810:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8002814:	9301      	str	r3, [sp, #4]
 8002816:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 800281a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800281e:	9000      	str	r0, [sp, #0]
 8002820:	fa0f f189 	sxth.w	r1, r9
 8002824:	9202      	str	r2, [sp, #8]
 8002826:	9103      	str	r1, [sp, #12]
 8002828:	462a      	mov	r2, r5
 800282a:	4621      	mov	r1, r4
 800282c:	9b00      	ldr	r3, [sp, #0]
 800282e:	4630      	mov	r0, r6
 8002830:	bfb4      	ite	lt
 8002832:	f64f 7aff 	movwlt	sl, #65535	; 0xffff
 8002836:	f04f 0a01 	movge.w	sl, #1
 800283a:	f7ff ff07 	bl	800264c <_ZN3DMD10WritePixelEtthh.constprop.3>
 800283e:	9a02      	ldr	r2, [sp, #8]
 8002840:	9903      	ldr	r1, [sp, #12]
 8002842:	428a      	cmp	r2, r1
 8002844:	da55      	bge.n	80028f2 <_ZN3DMD8DrawLineEssssh+0x12a>
 8002846:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800284a:	9b04      	ldr	r3, [sp, #16]
 800284c:	eba0 0161 	sub.w	r1, r0, r1, asr #1
 8002850:	42bb      	cmp	r3, r7
 8002852:	b209      	sxth	r1, r1
 8002854:	d04a      	beq.n	80028ec <_ZN3DMD8DrawLineEssssh+0x124>
 8002856:	461a      	mov	r2, r3
 8002858:	4454      	add	r4, sl
 800285a:	9d00      	ldr	r5, [sp, #0]
 800285c:	b2a4      	uxth	r4, r4
 800285e:	2900      	cmp	r1, #0
 8002860:	db05      	blt.n	800286e <_ZN3DMD8DrawLineEssssh+0xa6>
 8002862:	44d8      	add	r8, fp
 8002864:	eba1 0109 	sub.w	r1, r1, r9
 8002868:	fa0f f888 	sxth.w	r8, r8
 800286c:	b209      	sxth	r1, r1
 800286e:	f896 3114 	ldrb.w	r3, [r6, #276]	; 0x114
 8002872:	4401      	add	r1, r0
 8002874:	ebb4 1f43 	cmp.w	r4, r3, lsl #5
 8002878:	b209      	sxth	r1, r1
 800287a:	f280 808b 	bge.w	8002994 <_ZN3DMD8DrawLineEssssh+0x1cc>
 800287e:	f896 e115 	ldrb.w	lr, [r6, #277]	; 0x115
 8002882:	fa1f f788 	uxth.w	r7, r8
 8002886:	ebb7 1f0e 	cmp.w	r7, lr, lsl #4
 800288a:	f280 8083 	bge.w	8002994 <_ZN3DMD8DrawLineEssssh+0x1cc>
 800288e:	ea4f 1e17 	mov.w	lr, r7, lsr #4
 8002892:	ea4f 1c54 	mov.w	ip, r4, lsr #5
 8002896:	fb0e cc03 	mla	ip, lr, r3, ip
 800289a:	f004 031f 	and.w	r3, r4, #31
 800289e:	fa5f fc8c 	uxtb.w	ip, ip
 80028a2:	f896 e116 	ldrb.w	lr, [r6, #278]	; 0x116
 80028a6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80028aa:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 80028ae:	f007 070f 	and.w	r7, r7, #15
 80028b2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80028b6:	fb0e c707 	mla	r7, lr, r7, ip
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	4433      	add	r3, r6
 80028c0:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 80028c4:	b2bf      	uxth	r7, r7
 80028c6:	2d04      	cmp	r5, #4
 80028c8:	d864      	bhi.n	8002994 <_ZN3DMD8DrawLineEssssh+0x1cc>
 80028ca:	e8df f005 	tbb	[pc, r5]
 80028ce:	855b      	.short	0x855b
 80028d0:	5b6d      	.short	0x5b6d
 80028d2:	8e          	.byte	0x8e
 80028d3:	00          	.byte	0x00
 80028d4:	6830      	ldr	r0, [r6, #0]
 80028d6:	5cc1      	ldrb	r1, [r0, r3]
 80028d8:	ea21 0808 	bic.w	r8, r1, r8
 80028dc:	f800 8003 	strb.w	r8, [r0, r3]
 80028e0:	b229      	sxth	r1, r5
 80028e2:	eb0b 0305 	add.w	r3, fp, r5
 80028e6:	458e      	cmp	lr, r1
 80028e8:	b29d      	uxth	r5, r3
 80028ea:	d10f      	bne.n	800290c <_ZN3DMD8DrawLineEssssh+0x144>
 80028ec:	b007      	add	sp, #28
 80028ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028f2:	9b05      	ldr	r3, [sp, #20]
 80028f4:	fa1f f989 	uxth.w	r9, r9
 80028f8:	eba9 0262 	sub.w	r2, r9, r2, asr #1
 80028fc:	4543      	cmp	r3, r8
 80028fe:	b212      	sxth	r2, r2
 8002900:	d0f4      	beq.n	80028ec <_ZN3DMD8DrawLineEssssh+0x124>
 8002902:	469e      	mov	lr, r3
 8002904:	445d      	add	r5, fp
 8002906:	f8dd c004 	ldr.w	ip, [sp, #4]
 800290a:	b2ad      	uxth	r5, r5
 800290c:	2a00      	cmp	r2, #0
 800290e:	db05      	blt.n	800291c <_ZN3DMD8DrawLineEssssh+0x154>
 8002910:	4457      	add	r7, sl
 8002912:	b23f      	sxth	r7, r7
 8002914:	eba2 020c 	sub.w	r2, r2, ip
 8002918:	b212      	sxth	r2, r2
 800291a:	b2bc      	uxth	r4, r7
 800291c:	f896 1114 	ldrb.w	r1, [r6, #276]	; 0x114
 8002920:	444a      	add	r2, r9
 8002922:	ebb4 1f41 	cmp.w	r4, r1, lsl #5
 8002926:	b212      	sxth	r2, r2
 8002928:	dada      	bge.n	80028e0 <_ZN3DMD8DrawLineEssssh+0x118>
 800292a:	f896 3115 	ldrb.w	r3, [r6, #277]	; 0x115
 800292e:	ebb5 1f03 	cmp.w	r5, r3, lsl #4
 8002932:	dad5      	bge.n	80028e0 <_ZN3DMD8DrawLineEssssh+0x118>
 8002934:	092b      	lsrs	r3, r5, #4
 8002936:	0960      	lsrs	r0, r4, #5
 8002938:	fb03 0101 	mla	r1, r3, r1, r0
 800293c:	f004 031f 	and.w	r3, r4, #31
 8002940:	b2c9      	uxtb	r1, r1
 8002942:	f896 0116 	ldrb.w	r0, [r6, #278]	; 0x116
 8002946:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800294a:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 800294e:	0080      	lsls	r0, r0, #2
 8002950:	f005 010f 	and.w	r1, r5, #15
 8002954:	fb00 8101 	mla	r1, r0, r1, r8
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	4433      	add	r3, r6
 800295e:	f893 811f 	ldrb.w	r8, [r3, #287]	; 0x11f
 8002962:	b28b      	uxth	r3, r1
 8002964:	9900      	ldr	r1, [sp, #0]
 8002966:	2904      	cmp	r1, #4
 8002968:	d8ba      	bhi.n	80028e0 <_ZN3DMD8DrawLineEssssh+0x118>
 800296a:	a001      	add	r0, pc, #4	; (adr r0, 8002970 <_ZN3DMD8DrawLineEssssh+0x1a8>)
 800296c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8002970:	080028d5 	.word	0x080028d5
 8002974:	08002a03 	.word	0x08002a03
 8002978:	080029c5 	.word	0x080029c5
 800297c:	080028d5 	.word	0x080028d5
 8002980:	08002a11 	.word	0x08002a11
 8002984:	f8d6 e000 	ldr.w	lr, [r6]
 8002988:	f81e c007 	ldrb.w	ip, [lr, r7]
 800298c:	ea2c 0303 	bic.w	r3, ip, r3
 8002990:	f80e 3007 	strb.w	r3, [lr, r7]
 8002994:	b227      	sxth	r7, r4
 8002996:	eb0a 0304 	add.w	r3, sl, r4
 800299a:	4297      	cmp	r7, r2
 800299c:	b29c      	uxth	r4, r3
 800299e:	f47f af5e 	bne.w	800285e <_ZN3DMD8DrawLineEssssh+0x96>
 80029a2:	b007      	add	sp, #28
 80029a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029a8:	f8d6 c000 	ldr.w	ip, [r6]
 80029ac:	f81c e007 	ldrb.w	lr, [ip, r7]
 80029b0:	ea13 0f0e 	tst.w	r3, lr
 80029b4:	bf0c      	ite	eq
 80029b6:	ea43 030e 	orreq.w	r3, r3, lr
 80029ba:	ea2e 0303 	bicne.w	r3, lr, r3
 80029be:	f80c 3007 	strb.w	r3, [ip, r7]
 80029c2:	e7e7      	b.n	8002994 <_ZN3DMD8DrawLineEssssh+0x1cc>
 80029c4:	6830      	ldr	r0, [r6, #0]
 80029c6:	5cc1      	ldrb	r1, [r0, r3]
 80029c8:	ea18 0f01 	tst.w	r8, r1
 80029cc:	d184      	bne.n	80028d8 <_ZN3DMD8DrawLineEssssh+0x110>
 80029ce:	ea48 0801 	orr.w	r8, r8, r1
 80029d2:	f800 8003 	strb.w	r8, [r0, r3]
 80029d6:	e783      	b.n	80028e0 <_ZN3DMD8DrawLineEssssh+0x118>
 80029d8:	f8d6 e000 	ldr.w	lr, [r6]
 80029dc:	f81e c007 	ldrb.w	ip, [lr, r7]
 80029e0:	ea43 030c 	orr.w	r3, r3, ip
 80029e4:	f80e 3007 	strb.w	r3, [lr, r7]
 80029e8:	e7d4      	b.n	8002994 <_ZN3DMD8DrawLineEssssh+0x1cc>
 80029ea:	f8d6 e000 	ldr.w	lr, [r6]
 80029ee:	f81e c007 	ldrb.w	ip, [lr, r7]
 80029f2:	ea13 0f0c 	tst.w	r3, ip
 80029f6:	d1cd      	bne.n	8002994 <_ZN3DMD8DrawLineEssssh+0x1cc>
 80029f8:	ea43 030c 	orr.w	r3, r3, ip
 80029fc:	f80e 3007 	strb.w	r3, [lr, r7]
 8002a00:	e7c8      	b.n	8002994 <_ZN3DMD8DrawLineEssssh+0x1cc>
 8002a02:	6830      	ldr	r0, [r6, #0]
 8002a04:	5cc1      	ldrb	r1, [r0, r3]
 8002a06:	ea48 0801 	orr.w	r8, r8, r1
 8002a0a:	f800 8003 	strb.w	r8, [r0, r3]
 8002a0e:	e767      	b.n	80028e0 <_ZN3DMD8DrawLineEssssh+0x118>
 8002a10:	6831      	ldr	r1, [r6, #0]
 8002a12:	5cc8      	ldrb	r0, [r1, r3]
 8002a14:	ea18 0f00 	tst.w	r8, r0
 8002a18:	f47f af62 	bne.w	80028e0 <_ZN3DMD8DrawLineEssssh+0x118>
 8002a1c:	ea48 0800 	orr.w	r8, r8, r0
 8002a20:	f801 8003 	strb.w	r8, [r1, r3]
 8002a24:	e75c      	b.n	80028e0 <_ZN3DMD8DrawLineEssssh+0x118>
 8002a26:	bf00      	nop

08002a28 <_ZN3DMD7ExecuteEv>:
 8002a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a2a:	f890 5178 	ldrb.w	r5, [r0, #376]	; 0x178
 8002a2e:	4604      	mov	r4, r0
 8002a30:	b15d      	cbz	r5, 8002a4a <_ZN3DMD7ExecuteEv+0x22>
 8002a32:	2d01      	cmp	r5, #1
 8002a34:	d108      	bne.n	8002a48 <_ZN3DMD7ExecuteEv+0x20>
 8002a36:	f500 75a4 	add.w	r5, r0, #328	; 0x148
 8002a3a:	4628      	mov	r0, r5
 8002a3c:	f000 ff9c 	bl	8003978 <_ZN8CTimeout10HasElapsedEv>
 8002a40:	2800      	cmp	r0, #0
 8002a42:	f040 8084 	bne.w	8002b4e <_ZN3DMD7ExecuteEv+0x126>
 8002a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a4a:	f500 76a4 	add.w	r6, r0, #328	; 0x148
 8002a4e:	4630      	mov	r0, r6
 8002a50:	f000 ff92 	bl	8003978 <_ZN8CTimeout10HasElapsedEv>
 8002a54:	2800      	cmp	r0, #0
 8002a56:	d0f6      	beq.n	8002a46 <_ZN3DMD7ExecuteEv+0x1e>
 8002a58:	f8b4 0140 	ldrh.w	r0, [r4, #320]	; 0x140
 8002a5c:	f7fe f924 	bl	8000ca8 <__aeabi_i2f>
 8002a60:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
 8002a64:	4607      	mov	r7, r0
 8002a66:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002a6a:	f7fe f867 	bl	8000b3c <__aeabi_fsub>
 8002a6e:	4601      	mov	r1, r0
 8002a70:	4638      	mov	r0, r7
 8002a72:	f7fe f96d 	bl	8000d50 <__aeabi_fmul>
 8002a76:	f7fe fb31 	bl	80010dc <__aeabi_f2uiz>
 8002a7a:	b281      	uxth	r1, r0
 8002a7c:	4630      	mov	r0, r6
 8002a7e:	f000 ff6f 	bl	8003960 <_ZN8CTimeout9SetExpiryEt>
 8002a82:	f894 3116 	ldrb.w	r3, [r4, #278]	; 0x116
 8002a86:	f894 011e 	ldrb.w	r0, [r4, #286]	; 0x11e
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	b299      	uxth	r1, r3
 8002a8e:	fb00 f001 	mul.w	r0, r0, r1
 8002a92:	b21b      	sxth	r3, r3
 8002a94:	b202      	sxth	r2, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 80c1 	beq.w	8002c1e <_ZN3DMD7ExecuteEv+0x1f6>
 8002a9c:	f101 3eff 	add.w	lr, r1, #4294967295
 8002aa0:	462b      	mov	r3, r5
 8002aa2:	fa1f fe8e 	uxth.w	lr, lr
 8002aa6:	f9b4 711c 	ldrsh.w	r7, [r4, #284]	; 0x11c
 8002aaa:	f9b4 611a 	ldrsh.w	r6, [r4, #282]	; 0x11a
 8002aae:	f9b4 5118 	ldrsh.w	r5, [r4, #280]	; 0x118
 8002ab2:	6820      	ldr	r0, [r4, #0]
 8002ab4:	f10e 0e01 	add.w	lr, lr, #1
 8002ab8:	4496      	add	lr, r2
 8002aba:	4417      	add	r7, r2
 8002abc:	4416      	add	r6, r2
 8002abe:	4415      	add	r5, r2
 8002ac0:	4486      	add	lr, r0
 8002ac2:	4407      	add	r7, r0
 8002ac4:	4406      	add	r6, r0
 8002ac6:	4405      	add	r5, r0
 8002ac8:	4410      	add	r0, r2
 8002aca:	f817 cb01 	ldrb.w	ip, [r7], #1
 8002ace:	18e2      	adds	r2, r4, r3
 8002ad0:	f882 c158 	strb.w	ip, [r2, #344]	; 0x158
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	f816 cb01 	ldrb.w	ip, [r6], #1
 8002ada:	b292      	uxth	r2, r2
 8002adc:	4422      	add	r2, r4
 8002ade:	f882 c158 	strb.w	ip, [r2, #344]	; 0x158
 8002ae2:	1c9a      	adds	r2, r3, #2
 8002ae4:	f815 cb01 	ldrb.w	ip, [r5], #1
 8002ae8:	b292      	uxth	r2, r2
 8002aea:	4422      	add	r2, r4
 8002aec:	f882 c158 	strb.w	ip, [r2, #344]	; 0x158
 8002af0:	f810 cb01 	ldrb.w	ip, [r0], #1
 8002af4:	1cda      	adds	r2, r3, #3
 8002af6:	b292      	uxth	r2, r2
 8002af8:	4422      	add	r2, r4
 8002afa:	3304      	adds	r3, #4
 8002afc:	4570      	cmp	r0, lr
 8002afe:	f882 c158 	strb.w	ip, [r2, #344]	; 0x158
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	d1e1      	bne.n	8002aca <_ZN3DMD7ExecuteEv+0xa2>
 8002b06:	008d      	lsls	r5, r1, #2
 8002b08:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8002b0c:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 8002b10:	6803      	ldr	r3, [r0, #0]
 8002b12:	f504 72ac 	add.w	r2, r4, #344	; 0x158
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	310c      	adds	r1, #12
 8002b1a:	4798      	blx	r3
 8002b1c:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8002b20:	4629      	mov	r1, r5
 8002b22:	6803      	ldr	r3, [r0, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	4798      	blx	r3
 8002b28:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
 8002b2c:	6803      	ldr	r3, [r0, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	4798      	blx	r3
 8002b32:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8002b36:	6803      	ldr	r3, [r0, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4798      	blx	r3
 8002b3c:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
 8002b40:	6803      	ldr	r3, [r0, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	4798      	blx	r3
 8002b46:	2301      	movs	r3, #1
 8002b48:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
 8002b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b4e:	f8b4 0140 	ldrh.w	r0, [r4, #320]	; 0x140
 8002b52:	f7fe f8a9 	bl	8000ca8 <__aeabi_i2f>
 8002b56:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
 8002b5a:	f7fe f8f9 	bl	8000d50 <__aeabi_fmul>
 8002b5e:	f7fe fabd 	bl	80010dc <__aeabi_f2uiz>
 8002b62:	b281      	uxth	r1, r0
 8002b64:	4628      	mov	r0, r5
 8002b66:	f000 fefb 	bl	8003960 <_ZN8CTimeout9SetExpiryEt>
 8002b6a:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8002b6e:	6803      	ldr	r3, [r0, #0]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	4798      	blx	r3
 8002b74:	2800      	cmp	r0, #0
 8002b76:	f43f af66 	beq.w	8002a46 <_ZN3DMD7ExecuteEv+0x1e>
 8002b7a:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8002b7e:	6803      	ldr	r3, [r0, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	4798      	blx	r3
 8002b84:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
 8002b88:	6803      	ldr	r3, [r0, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4798      	blx	r3
 8002b8e:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	d810      	bhi.n	8002bb8 <_ZN3DMD7ExecuteEv+0x190>
 8002b96:	e8df f003 	tbb	[pc, r3]
 8002b9a:	2634      	.short	0x2634
 8002b9c:	0218      	.short	0x0218
 8002b9e:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 8002ba2:	6803      	ldr	r3, [r0, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4798      	blx	r3
 8002ba8:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 8002bac:	6803      	ldr	r3, [r0, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4798      	blx	r3
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
 8002bb8:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
 8002bbc:	6803      	ldr	r3, [r0, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4798      	blx	r3
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
 8002bc8:	e73d      	b.n	8002a46 <_ZN3DMD7ExecuteEv+0x1e>
 8002bca:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 8002bce:	6803      	ldr	r3, [r0, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4798      	blx	r3
 8002bd4:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 8002bd8:	6803      	ldr	r3, [r0, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	4798      	blx	r3
 8002bde:	2303      	movs	r3, #3
 8002be0:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
 8002be4:	e7e8      	b.n	8002bb8 <_ZN3DMD7ExecuteEv+0x190>
 8002be6:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 8002bea:	6803      	ldr	r3, [r0, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	4798      	blx	r3
 8002bf0:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 8002bf4:	6803      	ldr	r3, [r0, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4798      	blx	r3
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
 8002c00:	e7da      	b.n	8002bb8 <_ZN3DMD7ExecuteEv+0x190>
 8002c02:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 8002c06:	6803      	ldr	r3, [r0, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	4798      	blx	r3
 8002c0c:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 8002c10:	6803      	ldr	r3, [r0, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	4798      	blx	r3
 8002c16:	2301      	movs	r3, #1
 8002c18:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
 8002c1c:	e7cc      	b.n	8002bb8 <_ZN3DMD7ExecuteEv+0x190>
 8002c1e:	461d      	mov	r5, r3
 8002c20:	e772      	b.n	8002b08 <_ZN3DMD7ExecuteEv+0xe0>
 8002c22:	bf00      	nop

08002c24 <_ZN3DMD12SetBrighnessEf>:
 8002c24:	b538      	push	{r3, r4, r5, lr}
 8002c26:	460c      	mov	r4, r1
 8002c28:	4605      	mov	r5, r0
 8002c2a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002c2e:	4620      	mov	r0, r4
 8002c30:	f7fe fa4a 	bl	80010c8 <__aeabi_fcmpgt>
 8002c34:	b100      	cbz	r0, 8002c38 <_ZN3DMD12SetBrighnessEf+0x14>
 8002c36:	bd38      	pop	{r3, r4, r5, pc}
 8002c38:	2100      	movs	r1, #0
 8002c3a:	4620      	mov	r0, r4
 8002c3c:	f7fe fa26 	bl	800108c <__aeabi_fcmplt>
 8002c40:	2800      	cmp	r0, #0
 8002c42:	d1f8      	bne.n	8002c36 <_ZN3DMD12SetBrighnessEf+0x12>
 8002c44:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
 8002c48:	bd38      	pop	{r3, r4, r5, pc}
 8002c4a:	bf00      	nop

08002c4c <_ZN3DMD10SelectFontEPKh>:
 8002c4c:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop

08002c54 <_ZN3DMD8DrawCharEsshh>:
 8002c54:	4684      	mov	ip, r0
 8002c56:	4608      	mov	r0, r1
 8002c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c5c:	b091      	sub	sp, #68	; 0x44
 8002c5e:	910c      	str	r1, [sp, #48]	; 0x30
 8002c60:	f89c 1114 	ldrb.w	r1, [ip, #276]	; 0x114
 8002c64:	4691      	mov	r9, r2
 8002c66:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 8002c6a:	ebb0 1f41 	cmp.w	r0, r1, lsl #5
 8002c6e:	9207      	str	r2, [sp, #28]
 8002c70:	f300 815f 	bgt.w	8002f32 <_ZN3DMD8DrawCharEsshh+0x2de>
 8002c74:	f89c 2115 	ldrb.w	r2, [ip, #277]	; 0x115
 8002c78:	ebb9 1f02 	cmp.w	r9, r2, lsl #4
 8002c7c:	f300 8159 	bgt.w	8002f32 <_ZN3DMD8DrawCharEsshh+0x2de>
 8002c80:	f8dc 2110 	ldr.w	r2, [ip, #272]	; 0x110
 8002c84:	2b20      	cmp	r3, #32
 8002c86:	f892 8003 	ldrb.w	r8, [r2, #3]
 8002c8a:	f000 80a0 	beq.w	8002dce <_ZN3DMD8DrawCharEsshh+0x17a>
 8002c8e:	7910      	ldrb	r0, [r2, #4]
 8002c90:	4283      	cmp	r3, r0
 8002c92:	f2c0 8096 	blt.w	8002dc2 <_ZN3DMD8DrawCharEsshh+0x16e>
 8002c96:	7954      	ldrb	r4, [r2, #5]
 8002c98:	1821      	adds	r1, r4, r0
 8002c9a:	428b      	cmp	r3, r1
 8002c9c:	f280 8091 	bge.w	8002dc2 <_ZN3DMD8DrawCharEsshh+0x16e>
 8002ca0:	1a1b      	subs	r3, r3, r0
 8002ca2:	f108 0507 	add.w	r5, r8, #7
 8002ca6:	7811      	ldrb	r1, [r2, #0]
 8002ca8:	b2d8      	uxtb	r0, r3
 8002caa:	10eb      	asrs	r3, r5, #3
 8002cac:	9309      	str	r3, [sp, #36]	; 0x24
 8002cae:	2900      	cmp	r1, #0
 8002cb0:	f000 80fd 	beq.w	8002eae <_ZN3DMD8DrawCharEsshh+0x25a>
 8002cb4:	2800      	cmp	r0, #0
 8002cb6:	f000 8142 	beq.w	8002f3e <_ZN3DMD8DrawCharEsshh+0x2ea>
 8002cba:	2500      	movs	r5, #0
 8002cbc:	462b      	mov	r3, r5
 8002cbe:	1951      	adds	r1, r2, r5
 8002cc0:	7989      	ldrb	r1, [r1, #6]
 8002cc2:	3501      	adds	r5, #1
 8002cc4:	b2ed      	uxtb	r5, r5
 8002cc6:	440b      	add	r3, r1
 8002cc8:	4285      	cmp	r5, r0
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	dbf7      	blt.n	8002cbe <_ZN3DMD8DrawCharEsshh+0x6a>
 8002cce:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002cd0:	fb01 f303 	mul.w	r3, r1, r3
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	3406      	adds	r4, #6
 8002cd8:	4410      	add	r0, r2
 8002cda:	4423      	add	r3, r4
 8002cdc:	7981      	ldrb	r1, [r0, #6]
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	9103      	str	r1, [sp, #12]
 8002ce2:	930e      	str	r3, [sp, #56]	; 0x38
 8002ce4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002ce6:	424b      	negs	r3, r1
 8002ce8:	4298      	cmp	r0, r3
 8002cea:	910d      	str	r1, [sp, #52]	; 0x34
 8002cec:	db6b      	blt.n	8002dc6 <_ZN3DMD8DrawCharEsshh+0x172>
 8002cee:	f1c8 0300 	rsb	r3, r8, #0
 8002cf2:	4599      	cmp	r9, r3
 8002cf4:	db67      	blt.n	8002dc6 <_ZN3DMD8DrawCharEsshh+0x172>
 8002cf6:	2900      	cmp	r1, #0
 8002cf8:	d065      	beq.n	8002dc6 <_ZN3DMD8DrawCharEsshh+0x172>
 8002cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	9304      	str	r3, [sp, #16]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2bfd      	cmp	r3, #253	; 0xfd
 8002d04:	930f      	str	r3, [sp, #60]	; 0x3c
 8002d06:	dc5e      	bgt.n	8002dc6 <_ZN3DMD8DrawCharEsshh+0x172>
 8002d08:	2300      	movs	r3, #0
 8002d0a:	930a      	str	r3, [sp, #40]	; 0x28
 8002d0c:	f1a8 0308 	sub.w	r3, r8, #8
 8002d10:	b21b      	sxth	r3, r3
 8002d12:	930b      	str	r3, [sp, #44]	; 0x2c
 8002d14:	4613      	mov	r3, r2
 8002d16:	f8cd 9014 	str.w	r9, [sp, #20]
 8002d1a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002d1c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8002d1e:	eb01 0e00 	add.w	lr, r1, r0
 8002d22:	fa1f fe8e 	uxth.w	lr, lr
 8002d26:	f3ce 1247 	ubfx	r2, lr, #5, #8
 8002d2a:	9206      	str	r2, [sp, #24]
 8002d2c:	f00e 021f 	and.w	r2, lr, #31
 8002d30:	9208      	str	r2, [sp, #32]
 8002d32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002d34:	4610      	mov	r0, r2
 8002d36:	eb00 0901 	add.w	r9, r0, r1
 8002d3a:	4629      	mov	r1, r5
 8002d3c:	9a03      	ldr	r2, [sp, #12]
 8002d3e:	00e8      	lsls	r0, r5, #3
 8002d40:	fb02 3301 	mla	r3, r2, r1, r3
 8002d44:	f813 7009 	ldrb.w	r7, [r3, r9]
 8002d48:	9b04      	ldr	r3, [sp, #16]
 8002d4a:	4299      	cmp	r1, r3
 8002d4c:	f000 80df 	beq.w	8002f0e <_ZN3DMD8DrawCharEsshh+0x2ba>
 8002d50:	2200      	movs	r2, #0
 8002d52:	9b05      	ldr	r3, [sp, #20]
 8002d54:	00c9      	lsls	r1, r1, #3
 8002d56:	4403      	add	r3, r0
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	9502      	str	r5, [sp, #8]
 8002d5c:	1884      	adds	r4, r0, r2
 8002d5e:	42a1      	cmp	r1, r4
 8002d60:	dc77      	bgt.n	8002e52 <_ZN3DMD8DrawCharEsshh+0x1fe>
 8002d62:	45a0      	cmp	r8, r4
 8002d64:	db75      	blt.n	8002e52 <_ZN3DMD8DrawCharEsshh+0x1fe>
 8002d66:	fa47 f402 	asr.w	r4, r7, r2
 8002d6a:	f014 0f01 	tst.w	r4, #1
 8002d6e:	f89c 4114 	ldrb.w	r4, [ip, #276]	; 0x114
 8002d72:	d042      	beq.n	8002dfa <_ZN3DMD8DrawCharEsshh+0x1a6>
 8002d74:	ebbe 1f44 	cmp.w	lr, r4, lsl #5
 8002d78:	da6b      	bge.n	8002e52 <_ZN3DMD8DrawCharEsshh+0x1fe>
 8002d7a:	f89c 6115 	ldrb.w	r6, [ip, #277]	; 0x115
 8002d7e:	ebb3 1f06 	cmp.w	r3, r6, lsl #4
 8002d82:	da66      	bge.n	8002e52 <_ZN3DMD8DrawCharEsshh+0x1fe>
 8002d84:	9d06      	ldr	r5, [sp, #24]
 8002d86:	091e      	lsrs	r6, r3, #4
 8002d88:	fb06 5404 	mla	r4, r6, r4, r5
 8002d8c:	9d08      	ldr	r5, [sp, #32]
 8002d8e:	f89c 6116 	ldrb.w	r6, [ip, #278]	; 0x116
 8002d92:	b2e4      	uxtb	r4, r4
 8002d94:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 8002d98:	ea4f 0ad4 	mov.w	sl, r4, lsr #3
 8002d9c:	00b6      	lsls	r6, r6, #2
 8002d9e:	f003 0b0f 	and.w	fp, r3, #15
 8002da2:	fb06 a60b 	mla	r6, r6, fp, sl
 8002da6:	f004 0407 	and.w	r4, r4, #7
 8002daa:	9d07      	ldr	r5, [sp, #28]
 8002dac:	4464      	add	r4, ip
 8002dae:	f894 411f 	ldrb.w	r4, [r4, #287]	; 0x11f
 8002db2:	b2b6      	uxth	r6, r6
 8002db4:	2d04      	cmp	r5, #4
 8002db6:	d84c      	bhi.n	8002e52 <_ZN3DMD8DrawCharEsshh+0x1fe>
 8002db8:	e8df f005 	tbb	[pc, r5]
 8002dbc:	436b5a43 	.word	0x436b5a43
 8002dc0:	63          	.byte	0x63
 8002dc1:	00          	.byte	0x00
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	930d      	str	r3, [sp, #52]	; 0x34
 8002dc6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002dc8:	b011      	add	sp, #68	; 0x44
 8002dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dce:	7913      	ldrb	r3, [r2, #4]
 8002dd0:	2b6e      	cmp	r3, #110	; 0x6e
 8002dd2:	dc7c      	bgt.n	8002ece <_ZN3DMD8DrawCharEsshh+0x27a>
 8002dd4:	7951      	ldrb	r1, [r2, #5]
 8002dd6:	4419      	add	r1, r3
 8002dd8:	296e      	cmp	r1, #110	; 0x6e
 8002dda:	dd78      	ble.n	8002ece <_ZN3DMD8DrawCharEsshh+0x27a>
 8002ddc:	7811      	ldrb	r1, [r2, #0]
 8002dde:	b919      	cbnz	r1, 8002de8 <_ZN3DMD8DrawCharEsshh+0x194>
 8002de0:	7851      	ldrb	r1, [r2, #1]
 8002de2:	2900      	cmp	r1, #0
 8002de4:	f000 80a9 	beq.w	8002f3a <_ZN3DMD8DrawCharEsshh+0x2e6>
 8002de8:	f1c3 036e 	rsb	r3, r3, #110	; 0x6e
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	4413      	add	r3, r2
 8002df0:	799b      	ldrb	r3, [r3, #6]
 8002df2:	b29d      	uxth	r5, r3
 8002df4:	930d      	str	r3, [sp, #52]	; 0x34
 8002df6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8002df8:	e06d      	b.n	8002ed6 <_ZN3DMD8DrawCharEsshh+0x282>
 8002dfa:	ebbe 1f44 	cmp.w	lr, r4, lsl #5
 8002dfe:	da28      	bge.n	8002e52 <_ZN3DMD8DrawCharEsshh+0x1fe>
 8002e00:	f89c 6115 	ldrb.w	r6, [ip, #277]	; 0x115
 8002e04:	ebb3 1f06 	cmp.w	r3, r6, lsl #4
 8002e08:	da23      	bge.n	8002e52 <_ZN3DMD8DrawCharEsshh+0x1fe>
 8002e0a:	9d06      	ldr	r5, [sp, #24]
 8002e0c:	091e      	lsrs	r6, r3, #4
 8002e0e:	fb06 5404 	mla	r4, r6, r4, r5
 8002e12:	9d08      	ldr	r5, [sp, #32]
 8002e14:	f89c 6116 	ldrb.w	r6, [ip, #278]	; 0x116
 8002e18:	b2e4      	uxtb	r4, r4
 8002e1a:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 8002e1e:	ea4f 0bd4 	mov.w	fp, r4, lsr #3
 8002e22:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8002e26:	f003 060f 	and.w	r6, r3, #15
 8002e2a:	fb0a b606 	mla	r6, sl, r6, fp
 8002e2e:	f004 0407 	and.w	r4, r4, #7
 8002e32:	9d07      	ldr	r5, [sp, #28]
 8002e34:	4464      	add	r4, ip
 8002e36:	f894 411f 	ldrb.w	r4, [r4, #287]	; 0x11f
 8002e3a:	b2b6      	uxth	r6, r6
 8002e3c:	b1c5      	cbz	r5, 8002e70 <_ZN3DMD8DrawCharEsshh+0x21c>
 8002e3e:	2d01      	cmp	r5, #1
 8002e40:	d107      	bne.n	8002e52 <_ZN3DMD8DrawCharEsshh+0x1fe>
 8002e42:	f8dc a000 	ldr.w	sl, [ip]
 8002e46:	f81a b006 	ldrb.w	fp, [sl, r6]
 8002e4a:	ea2b 0404 	bic.w	r4, fp, r4
 8002e4e:	f80a 4006 	strb.w	r4, [sl, r6]
 8002e52:	3201      	adds	r2, #1
 8002e54:	3301      	adds	r3, #1
 8002e56:	2a08      	cmp	r2, #8
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	f47f af7f 	bne.w	8002d5c <_ZN3DMD8DrawCharEsshh+0x108>
 8002e5e:	9d02      	ldr	r5, [sp, #8]
 8002e60:	3d01      	subs	r5, #1
 8002e62:	b2ed      	uxtb	r5, r5
 8002e64:	2dfd      	cmp	r5, #253	; 0xfd
 8002e66:	4629      	mov	r1, r5
 8002e68:	d857      	bhi.n	8002f1a <_ZN3DMD8DrawCharEsshh+0x2c6>
 8002e6a:	f8dc 3110 	ldr.w	r3, [ip, #272]	; 0x110
 8002e6e:	e765      	b.n	8002d3c <_ZN3DMD8DrawCharEsshh+0xe8>
 8002e70:	f8dc a000 	ldr.w	sl, [ip]
 8002e74:	f81a b006 	ldrb.w	fp, [sl, r6]
 8002e78:	ea44 040b 	orr.w	r4, r4, fp
 8002e7c:	f80a 4006 	strb.w	r4, [sl, r6]
 8002e80:	e7e7      	b.n	8002e52 <_ZN3DMD8DrawCharEsshh+0x1fe>
 8002e82:	f8dc a000 	ldr.w	sl, [ip]
 8002e86:	f81a b006 	ldrb.w	fp, [sl, r6]
 8002e8a:	ea14 0f0b 	tst.w	r4, fp
 8002e8e:	d0f3      	beq.n	8002e78 <_ZN3DMD8DrawCharEsshh+0x224>
 8002e90:	e7df      	b.n	8002e52 <_ZN3DMD8DrawCharEsshh+0x1fe>
 8002e92:	f8dc b000 	ldr.w	fp, [ip]
 8002e96:	f81b a006 	ldrb.w	sl, [fp, r6]
 8002e9a:	ea14 0f0a 	tst.w	r4, sl
 8002e9e:	bf0c      	ite	eq
 8002ea0:	ea44 040a 	orreq.w	r4, r4, sl
 8002ea4:	ea2a 0404 	bicne.w	r4, sl, r4
 8002ea8:	f80b 4006 	strb.w	r4, [fp, r6]
 8002eac:	e7d1      	b.n	8002e52 <_ZN3DMD8DrawCharEsshh+0x1fe>
 8002eae:	7853      	ldrb	r3, [r2, #1]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f47f aeff 	bne.w	8002cb4 <_ZN3DMD8DrawCharEsshh+0x60>
 8002eb6:	7893      	ldrb	r3, [r2, #2]
 8002eb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002eba:	9303      	str	r3, [sp, #12]
 8002ebc:	fb00 f303 	mul.w	r3, r0, r3
 8002ec0:	fb03 f301 	mul.w	r3, r3, r1
 8002ec4:	3306      	adds	r3, #6
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	930e      	str	r3, [sp, #56]	; 0x38
 8002eca:	9903      	ldr	r1, [sp, #12]
 8002ecc:	e70a      	b.n	8002ce4 <_ZN3DMD8DrawCharEsshh+0x90>
 8002ece:	2300      	movs	r3, #0
 8002ed0:	4604      	mov	r4, r0
 8002ed2:	461d      	mov	r5, r3
 8002ed4:	930d      	str	r3, [sp, #52]	; 0x34
 8002ed6:	4425      	add	r5, r4
 8002ed8:	b22d      	sxth	r5, r5
 8002eda:	eb08 0609 	add.w	r6, r8, r9
 8002ede:	42ac      	cmp	r4, r5
 8002ee0:	b236      	sxth	r6, r6
 8002ee2:	f73f af70 	bgt.w	8002dc6 <_ZN3DMD8DrawCharEsshh+0x172>
 8002ee6:	464f      	mov	r7, r9
 8002ee8:	46e0      	mov	r8, ip
 8002eea:	f04f 0901 	mov.w	r9, #1
 8002eee:	4623      	mov	r3, r4
 8002ef0:	4621      	mov	r1, r4
 8002ef2:	3401      	adds	r4, #1
 8002ef4:	e88d 0240 	stmia.w	sp, {r6, r9}
 8002ef8:	463a      	mov	r2, r7
 8002efa:	4640      	mov	r0, r8
 8002efc:	b224      	sxth	r4, r4
 8002efe:	f7ff fc63 	bl	80027c8 <_ZN3DMD8DrawLineEssssh>
 8002f02:	42a5      	cmp	r5, r4
 8002f04:	daf3      	bge.n	8002eee <_ZN3DMD8DrawCharEsshh+0x29a>
 8002f06:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002f08:	b011      	add	sp, #68	; 0x44
 8002f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002f14:	bfa8      	it	ge
 8002f16:	4618      	movge	r0, r3
 8002f18:	e71a      	b.n	8002d50 <_ZN3DMD8DrawCharEsshh+0xfc>
 8002f1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f1c:	9a03      	ldr	r2, [sp, #12]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	429a      	cmp	r2, r3
 8002f24:	930a      	str	r3, [sp, #40]	; 0x28
 8002f26:	f77f af4e 	ble.w	8002dc6 <_ZN3DMD8DrawCharEsshh+0x172>
 8002f2a:	f8dc 3110 	ldr.w	r3, [ip, #272]	; 0x110
 8002f2e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002f30:	e6f3      	b.n	8002d1a <_ZN3DMD8DrawCharEsshh+0xc6>
 8002f32:	f04f 33ff 	mov.w	r3, #4294967295
 8002f36:	930d      	str	r3, [sp, #52]	; 0x34
 8002f38:	e745      	b.n	8002dc6 <_ZN3DMD8DrawCharEsshh+0x172>
 8002f3a:	7893      	ldrb	r3, [r2, #2]
 8002f3c:	e759      	b.n	8002df2 <_ZN3DMD8DrawCharEsshh+0x19e>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	e6c9      	b.n	8002cd6 <_ZN3DMD8DrawCharEsshh+0x82>
 8002f42:	bf00      	nop

08002f44 <_ZN3DMD10DrawStringEssPKchh>:
 8002f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f48:	b087      	sub	sp, #28
 8002f4a:	f890 4114 	ldrb.w	r4, [r0, #276]	; 0x114
 8002f4e:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8002f52:	ebb1 1f44 	cmp.w	r1, r4, lsl #5
 8002f56:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8002f5a:	9502      	str	r5, [sp, #8]
 8002f5c:	da51      	bge.n	8003002 <_ZN3DMD10DrawStringEssPKchh+0xbe>
 8002f5e:	f890 4115 	ldrb.w	r4, [r0, #277]	; 0x115
 8002f62:	4607      	mov	r7, r0
 8002f64:	ebb2 1f04 	cmp.w	r2, r4, lsl #4
 8002f68:	4690      	mov	r8, r2
 8002f6a:	da4a      	bge.n	8003002 <_ZN3DMD10DrawStringEssPKchh+0xbe>
 8002f6c:	f8d0 4110 	ldr.w	r4, [r0, #272]	; 0x110
 8002f70:	78e5      	ldrb	r5, [r4, #3]
 8002f72:	18ad      	adds	r5, r5, r2
 8002f74:	d445      	bmi.n	8003002 <_ZN3DMD10DrawStringEssPKchh+0xbe>
 8002f76:	2401      	movs	r4, #1
 8002f78:	fa1f f981 	uxth.w	r9, r1
 8002f7c:	9303      	str	r3, [sp, #12]
 8002f7e:	f109 33ff 	add.w	r3, r9, #4294967295
 8002f82:	468b      	mov	fp, r1
 8002f84:	b21b      	sxth	r3, r3
 8002f86:	b229      	sxth	r1, r5
 8002f88:	9104      	str	r1, [sp, #16]
 8002f8a:	9100      	str	r1, [sp, #0]
 8002f8c:	9401      	str	r4, [sp, #4]
 8002f8e:	4619      	mov	r1, r3
 8002f90:	f7ff fc1a 	bl	80027c8 <_ZN3DMD8DrawLineEssssh>
 8002f94:	f1ba 0f00 	cmp.w	sl, #0
 8002f98:	d033      	beq.n	8003002 <_ZN3DMD10DrawStringEssPKchh+0xbe>
 8002f9a:	2600      	movs	r6, #0
 8002f9c:	9405      	str	r4, [sp, #20]
 8002f9e:	4635      	mov	r5, r6
 8002fa0:	e01a      	b.n	8002fd8 <_ZN3DMD10DrawStringEssPKchh+0x94>
 8002fa2:	9a05      	ldr	r2, [sp, #20]
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	9201      	str	r2, [sp, #4]
 8002fa8:	9a04      	ldr	r2, [sp, #16]
 8002faa:	4638      	mov	r0, r7
 8002fac:	9200      	str	r2, [sp, #0]
 8002fae:	4642      	mov	r2, r8
 8002fb0:	f7ff fc0a 	bl	80027c8 <_ZN3DMD8DrawLineEssssh>
 8002fb4:	3401      	adds	r4, #1
 8002fb6:	b225      	sxth	r5, r4
 8002fb8:	f897 2114 	ldrb.w	r2, [r7, #276]	; 0x114
 8002fbc:	eb05 030b 	add.w	r3, r5, fp
 8002fc0:	3601      	adds	r6, #1
 8002fc2:	ebb3 1f42 	cmp.w	r3, r2, lsl #5
 8002fc6:	b236      	sxth	r6, r6
 8002fc8:	da1b      	bge.n	8003002 <_ZN3DMD10DrawStringEssPKchh+0xbe>
 8002fca:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8002fce:	ebb8 1f03 	cmp.w	r8, r3, lsl #4
 8002fd2:	da16      	bge.n	8003002 <_ZN3DMD10DrawStringEssPKchh+0xbe>
 8002fd4:	4556      	cmp	r6, sl
 8002fd6:	da14      	bge.n	8003002 <_ZN3DMD10DrawStringEssPKchh+0xbe>
 8002fd8:	9a02      	ldr	r2, [sp, #8]
 8002fda:	b2ac      	uxth	r4, r5
 8002fdc:	9b03      	ldr	r3, [sp, #12]
 8002fde:	eb09 0104 	add.w	r1, r9, r4
 8002fe2:	5d9b      	ldrb	r3, [r3, r6]
 8002fe4:	b209      	sxth	r1, r1
 8002fe6:	9200      	str	r2, [sp, #0]
 8002fe8:	4638      	mov	r0, r7
 8002fea:	4642      	mov	r2, r8
 8002fec:	f7ff fe32 	bl	8002c54 <_ZN3DMD8DrawCharEsshh>
 8002ff0:	4404      	add	r4, r0
 8002ff2:	b2a4      	uxth	r4, r4
 8002ff4:	b200      	sxth	r0, r0
 8002ff6:	eb09 0304 	add.w	r3, r9, r4
 8002ffa:	2800      	cmp	r0, #0
 8002ffc:	b21b      	sxth	r3, r3
 8002ffe:	dcd0      	bgt.n	8002fa2 <_ZN3DMD10DrawStringEssPKchh+0x5e>
 8003000:	d0da      	beq.n	8002fb8 <_ZN3DMD10DrawStringEssPKchh+0x74>
 8003002:	b007      	add	sp, #28
 8003004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003008 <_ZN13CACDisplayDmd4InitEP17CACFrequencyMeterP12CAnalogInputP3DMDP6ITimer>:
 8003008:	b538      	push	{r3, r4, r5, lr}
 800300a:	9d04      	ldr	r5, [sp, #16]
 800300c:	1d04      	adds	r4, r0, #4
 800300e:	6141      	str	r1, [r0, #20]
 8003010:	61c3      	str	r3, [r0, #28]
 8003012:	4629      	mov	r1, r5
 8003014:	6182      	str	r2, [r0, #24]
 8003016:	4620      	mov	r0, r4
 8003018:	f000 fc96 	bl	8003948 <_ZN8CTimeout4InitEP6ITimer>
 800301c:	4620      	mov	r0, r4
 800301e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003022:	f241 3188 	movw	r1, #5000	; 0x1388
 8003026:	f000 bc9b 	b.w	8003960 <_ZN8CTimeout9SetExpiryEt>
 800302a:	bf00      	nop

0800302c <_ZN13CACDisplayDmd7ExecuteEv>:
 800302c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800302e:	1d04      	adds	r4, r0, #4
 8003030:	b08d      	sub	sp, #52	; 0x34
 8003032:	4605      	mov	r5, r0
 8003034:	4620      	mov	r0, r4
 8003036:	f000 fc9f 	bl	8003978 <_ZN8CTimeout10HasElapsedEv>
 800303a:	b908      	cbnz	r0, 8003040 <_ZN13CACDisplayDmd7ExecuteEv+0x14>
 800303c:	b00d      	add	sp, #52	; 0x34
 800303e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003040:	4620      	mov	r0, r4
 8003042:	f000 fc83 	bl	800394c <_ZN8CTimeout5ResetEv>
 8003046:	6968      	ldr	r0, [r5, #20]
 8003048:	f000 fc6c 	bl	8003924 <_ZN17CACFrequencyMeter13ReadFrequencyEv>
 800304c:	f7fd f9ec 	bl	8000428 <__aeabi_f2d>
 8003050:	2200      	movs	r2, #0
 8003052:	4b32      	ldr	r3, [pc, #200]	; (800311c <_ZN13CACDisplayDmd7ExecuteEv+0xf0>)
 8003054:	f7fd fa3c 	bl	80004d0 <__aeabi_dmul>
 8003058:	f7fd fcfc 	bl	8000a54 <__aeabi_d2uiz>
 800305c:	2364      	movs	r3, #100	; 0x64
 800305e:	2400      	movs	r4, #0
 8003060:	4a2f      	ldr	r2, [pc, #188]	; (8003120 <_ZN13CACDisplayDmd7ExecuteEv+0xf4>)
 8003062:	b280      	uxth	r0, r0
 8003064:	fba2 1200 	umull	r1, r2, r2, r0
 8003068:	0952      	lsrs	r2, r2, #5
 800306a:	fb03 0312 	mls	r3, r3, r2, r0
 800306e:	492d      	ldr	r1, [pc, #180]	; (8003124 <_ZN13CACDisplayDmd7ExecuteEv+0xf8>)
 8003070:	b29b      	uxth	r3, r3
 8003072:	a802      	add	r0, sp, #8
 8003074:	9402      	str	r4, [sp, #8]
 8003076:	9403      	str	r4, [sp, #12]
 8003078:	9404      	str	r4, [sp, #16]
 800307a:	9405      	str	r4, [sp, #20]
 800307c:	9406      	str	r4, [sp, #24]
 800307e:	f001 faba 	bl	80045f6 <siprintf>
 8003082:	69ac      	ldr	r4, [r5, #24]
 8003084:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8003086:	f7fd fe0b 	bl	8000ca0 <__aeabi_ui2f>
 800308a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800308e:	4607      	mov	r7, r0
 8003090:	6866      	ldr	r6, [r4, #4]
 8003092:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8003094:	b90b      	cbnz	r3, 800309a <_ZN13CACDisplayDmd7ExecuteEv+0x6e>
 8003096:	f8b4 0056 	ldrh.w	r0, [r4, #86]	; 0x56
 800309a:	f7fd fe01 	bl	8000ca0 <__aeabi_ui2f>
 800309e:	4601      	mov	r1, r0
 80030a0:	4638      	mov	r0, r7
 80030a2:	f7fd ff09 	bl	8000eb8 <__aeabi_fdiv>
 80030a6:	4631      	mov	r1, r6
 80030a8:	f7fd fe52 	bl	8000d50 <__aeabi_fmul>
 80030ac:	68a1      	ldr	r1, [r4, #8]
 80030ae:	f7fd fd47 	bl	8000b40 <__addsf3>
 80030b2:	491d      	ldr	r1, [pc, #116]	; (8003128 <_ZN13CACDisplayDmd7ExecuteEv+0xfc>)
 80030b4:	f7fd fe4c 	bl	8000d50 <__aeabi_fmul>
 80030b8:	f7fe f810 	bl	80010dc <__aeabi_f2uiz>
 80030bc:	2364      	movs	r3, #100	; 0x64
 80030be:	2400      	movs	r4, #0
 80030c0:	4a17      	ldr	r2, [pc, #92]	; (8003120 <_ZN13CACDisplayDmd7ExecuteEv+0xf4>)
 80030c2:	b280      	uxth	r0, r0
 80030c4:	fba2 1200 	umull	r1, r2, r2, r0
 80030c8:	0952      	lsrs	r2, r2, #5
 80030ca:	fb03 0312 	mls	r3, r3, r2, r0
 80030ce:	4917      	ldr	r1, [pc, #92]	; (800312c <_ZN13CACDisplayDmd7ExecuteEv+0x100>)
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	a807      	add	r0, sp, #28
 80030d4:	9407      	str	r4, [sp, #28]
 80030d6:	9408      	str	r4, [sp, #32]
 80030d8:	9409      	str	r4, [sp, #36]	; 0x24
 80030da:	940a      	str	r4, [sp, #40]	; 0x28
 80030dc:	940b      	str	r4, [sp, #44]	; 0x2c
 80030de:	f001 fa8a 	bl	80045f6 <siprintf>
 80030e2:	a802      	add	r0, sp, #8
 80030e4:	f7fd f834 	bl	8000150 <strlen>
 80030e8:	69ee      	ldr	r6, [r5, #28]
 80030ea:	b2c0      	uxtb	r0, r0
 80030ec:	ab02      	add	r3, sp, #8
 80030ee:	4622      	mov	r2, r4
 80030f0:	4621      	mov	r1, r4
 80030f2:	e88d 0011 	stmia.w	sp, {r0, r4}
 80030f6:	4630      	mov	r0, r6
 80030f8:	f7ff ff24 	bl	8002f44 <_ZN3DMD10DrawStringEssPKchh>
 80030fc:	a807      	add	r0, sp, #28
 80030fe:	f7fd f827 	bl	8000150 <strlen>
 8003102:	69e9      	ldr	r1, [r5, #28]
 8003104:	b2c0      	uxtb	r0, r0
 8003106:	e88d 0011 	stmia.w	sp, {r0, r4}
 800310a:	ab07      	add	r3, sp, #28
 800310c:	4608      	mov	r0, r1
 800310e:	4622      	mov	r2, r4
 8003110:	2120      	movs	r1, #32
 8003112:	f7ff ff17 	bl	8002f44 <_ZN3DMD10DrawStringEssPKchh>
 8003116:	b00d      	add	sp, #52	; 0x34
 8003118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800311a:	bf00      	nop
 800311c:	40590000 	.word	0x40590000
 8003120:	51eb851f 	.word	0x51eb851f
 8003124:	08006bbc 	.word	0x08006bbc
 8003128:	42c80000 	.word	0x42c80000
 800312c:	08006bc4 	.word	0x08006bc4

08003130 <_ZN13CACDisplayDmdC1Ev>:
 8003130:	b510      	push	{r4, lr}
 8003132:	4604      	mov	r4, r0
 8003134:	4b03      	ldr	r3, [pc, #12]	; (8003144 <_ZN13CACDisplayDmdC1Ev+0x14>)
 8003136:	f840 3b04 	str.w	r3, [r0], #4
 800313a:	f000 fc33 	bl	80039a4 <_ZN8CTimeoutC1Ev>
 800313e:	4620      	mov	r0, r4
 8003140:	bd10      	pop	{r4, pc}
 8003142:	bf00      	nop
 8003144:	08006bd4 	.word	0x08006bd4

08003148 <_ZN13CACDisplayDmdD1Ev>:
 8003148:	b510      	push	{r4, lr}
 800314a:	4604      	mov	r4, r0
 800314c:	4b03      	ldr	r3, [pc, #12]	; (800315c <_ZN13CACDisplayDmdD1Ev+0x14>)
 800314e:	f840 3b04 	str.w	r3, [r0], #4
 8003152:	f000 fbf1 	bl	8003938 <_ZN8CTimeoutD1Ev>
 8003156:	4620      	mov	r0, r4
 8003158:	bd10      	pop	{r4, pc}
 800315a:	bf00      	nop
 800315c:	08006bd4 	.word	0x08006bd4

08003160 <_ZN13CACDisplayDmdD0Ev>:
 8003160:	b510      	push	{r4, lr}
 8003162:	4604      	mov	r4, r0
 8003164:	4b04      	ldr	r3, [pc, #16]	; (8003178 <_ZN13CACDisplayDmdD0Ev+0x18>)
 8003166:	f840 3b04 	str.w	r3, [r0], #4
 800316a:	f000 fbe5 	bl	8003938 <_ZN8CTimeoutD1Ev>
 800316e:	4620      	mov	r0, r4
 8003170:	f001 fa58 	bl	8004624 <_ZdlPv>
 8003174:	4620      	mov	r0, r4
 8003176:	bd10      	pop	{r4, pc}
 8003178:	08006bd4 	.word	0x08006bd4

0800317c <_ZN10CHeartBeat4InitEP5IGpioP6ITimert>:
 800317c:	b538      	push	{r3, r4, r5, lr}
 800317e:	461d      	mov	r5, r3
 8003180:	1d04      	adds	r4, r0, #4
 8003182:	6141      	str	r1, [r0, #20]
 8003184:	4620      	mov	r0, r4
 8003186:	4611      	mov	r1, r2
 8003188:	f000 fbde 	bl	8003948 <_ZN8CTimeout4InitEP6ITimer>
 800318c:	4629      	mov	r1, r5
 800318e:	4620      	mov	r0, r4
 8003190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003194:	f000 bbe4 	b.w	8003960 <_ZN8CTimeout9SetExpiryEt>

08003198 <_ZN10CHeartBeat7ExecuteEv>:
 8003198:	b570      	push	{r4, r5, r6, lr}
 800319a:	1d05      	adds	r5, r0, #4
 800319c:	4604      	mov	r4, r0
 800319e:	4628      	mov	r0, r5
 80031a0:	f000 fbea 	bl	8003978 <_ZN8CTimeout10HasElapsedEv>
 80031a4:	b900      	cbnz	r0, 80031a8 <_ZN10CHeartBeat7ExecuteEv+0x10>
 80031a6:	bd70      	pop	{r4, r5, r6, pc}
 80031a8:	4628      	mov	r0, r5
 80031aa:	f000 fbcf 	bl	800394c <_ZN8CTimeout5ResetEv>
 80031ae:	6964      	ldr	r4, [r4, #20]
 80031b0:	6823      	ldr	r3, [r4, #0]
 80031b2:	4620      	mov	r0, r4
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	4798      	blx	r3
 80031b8:	6823      	ldr	r3, [r4, #0]
 80031ba:	b920      	cbnz	r0, 80031c6 <_ZN10CHeartBeat7ExecuteEv+0x2e>
 80031bc:	4620      	mov	r0, r4
 80031be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4718      	bx	r3
 80031c6:	4620      	mov	r0, r4
 80031c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	4718      	bx	r3

080031d0 <_ZN10CHeartBeatC1Ev>:
 80031d0:	b510      	push	{r4, lr}
 80031d2:	4604      	mov	r4, r0
 80031d4:	4b03      	ldr	r3, [pc, #12]	; (80031e4 <_ZN10CHeartBeatC1Ev+0x14>)
 80031d6:	f840 3b04 	str.w	r3, [r0], #4
 80031da:	f000 fbe3 	bl	80039a4 <_ZN8CTimeoutC1Ev>
 80031de:	4620      	mov	r0, r4
 80031e0:	bd10      	pop	{r4, pc}
 80031e2:	bf00      	nop
 80031e4:	08006be4 	.word	0x08006be4

080031e8 <_ZN10CHeartBeatD1Ev>:
 80031e8:	b510      	push	{r4, lr}
 80031ea:	4604      	mov	r4, r0
 80031ec:	4b03      	ldr	r3, [pc, #12]	; (80031fc <_ZN10CHeartBeatD1Ev+0x14>)
 80031ee:	f840 3b04 	str.w	r3, [r0], #4
 80031f2:	f000 fba1 	bl	8003938 <_ZN8CTimeoutD1Ev>
 80031f6:	4620      	mov	r0, r4
 80031f8:	bd10      	pop	{r4, pc}
 80031fa:	bf00      	nop
 80031fc:	08006be4 	.word	0x08006be4

08003200 <_ZN10CHeartBeatD0Ev>:
 8003200:	b510      	push	{r4, lr}
 8003202:	4604      	mov	r4, r0
 8003204:	4b04      	ldr	r3, [pc, #16]	; (8003218 <_ZN10CHeartBeatD0Ev+0x18>)
 8003206:	f840 3b04 	str.w	r3, [r0], #4
 800320a:	f000 fb95 	bl	8003938 <_ZN8CTimeoutD1Ev>
 800320e:	4620      	mov	r0, r4
 8003210:	f001 fa08 	bl	8004624 <_ZdlPv>
 8003214:	4620      	mov	r0, r4
 8003216:	bd10      	pop	{r4, pc}
 8003218:	08006be4 	.word	0x08006be4

0800321c <_ZN7SDeviceC1Ev>:
 800321c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003220:	4605      	mov	r5, r0
 8003222:	f04f 0a14 	mov.w	sl, #20
 8003226:	f7ff ffd3 	bl	80031d0 <_ZN10CHeartBeatC1Ev>
 800322a:	2600      	movs	r6, #0
 800322c:	f04f 587e 	mov.w	r8, #1065353216	; 0x3f800000
 8003230:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8003290 <_ZN7SDeviceC1Ev+0x74>
 8003234:	f105 0424 	add.w	r4, r5, #36	; 0x24
 8003238:	f105 07d4 	add.w	r7, r5, #212	; 0xd4
 800323c:	f844 9c0c 	str.w	r9, [r4, #-12]
 8003240:	4620      	mov	r0, r4
 8003242:	f000 fbaf 	bl	80039a4 <_ZN8CTimeoutC1Ev>
 8003246:	2300      	movs	r3, #0
 8003248:	f8a4 a01e 	strh.w	sl, [r4, #30]
 800324c:	61a6      	str	r6, [r4, #24]
 800324e:	f844 8c08 	str.w	r8, [r4, #-8]
 8003252:	f844 6c04 	str.w	r6, [r4, #-4]
 8003256:	f884 3020 	strb.w	r3, [r4, #32]
 800325a:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
 800325e:	83a3      	strh	r3, [r4, #28]
 8003260:	6163      	str	r3, [r4, #20]
 8003262:	6123      	str	r3, [r4, #16]
 8003264:	3458      	adds	r4, #88	; 0x58
 8003266:	42bc      	cmp	r4, r7
 8003268:	d1e8      	bne.n	800323c <_ZN7SDeviceC1Ev+0x20>
 800326a:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 800326e:	f7ff fa31 	bl	80026d4 <_ZN3DMDC1Ev>
 8003272:	f505 7011 	add.w	r0, r5, #580	; 0x244
 8003276:	f7ff ff5b 	bl	8003130 <_ZN13CACDisplayDmdC1Ev>
 800327a:	f505 7019 	add.w	r0, r5, #612	; 0x264
 800327e:	f000 fb53 	bl	8003928 <_ZN17CACFrequencyMeterC1Ev>
 8003282:	f505 701e 	add.w	r0, r5, #632	; 0x278
 8003286:	f7ff f9b1 	bl	80025ec <_ZN11CSerialPortC1Ev>
 800328a:	4628      	mov	r0, r5
 800328c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003290:	08006bf4 	.word	0x08006bf4

08003294 <_GLOBAL__sub_I_Dev>:
 8003294:	b510      	push	{r4, lr}
 8003296:	4c05      	ldr	r4, [pc, #20]	; (80032ac <_GLOBAL__sub_I_Dev+0x18>)
 8003298:	4620      	mov	r0, r4
 800329a:	f7ff ffbf 	bl	800321c <_ZN7SDeviceC1Ev>
 800329e:	4620      	mov	r0, r4
 80032a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032a4:	4a02      	ldr	r2, [pc, #8]	; (80032b0 <_GLOBAL__sub_I_Dev+0x1c>)
 80032a6:	4903      	ldr	r1, [pc, #12]	; (80032b4 <_GLOBAL__sub_I_Dev+0x20>)
 80032a8:	f001 b9be 	b.w	8004628 <__aeabi_atexit>
 80032ac:	200006a8 	.word	0x200006a8
 80032b0:	20000000 	.word	0x20000000
 80032b4:	080032ed 	.word	0x080032ed

080032b8 <_ZN12CAnalogInputD1Ev>:
 80032b8:	b510      	push	{r4, lr}
 80032ba:	4604      	mov	r4, r0
 80032bc:	4b03      	ldr	r3, [pc, #12]	; (80032cc <_ZN12CAnalogInputD1Ev+0x14>)
 80032be:	f840 3b0c 	str.w	r3, [r0], #12
 80032c2:	f000 fb39 	bl	8003938 <_ZN8CTimeoutD1Ev>
 80032c6:	4620      	mov	r0, r4
 80032c8:	bd10      	pop	{r4, pc}
 80032ca:	bf00      	nop
 80032cc:	08006bf4 	.word	0x08006bf4

080032d0 <_ZN12CAnalogInputD0Ev>:
 80032d0:	b510      	push	{r4, lr}
 80032d2:	4604      	mov	r4, r0
 80032d4:	4b04      	ldr	r3, [pc, #16]	; (80032e8 <_ZN12CAnalogInputD0Ev+0x18>)
 80032d6:	f840 3b0c 	str.w	r3, [r0], #12
 80032da:	f000 fb2d 	bl	8003938 <_ZN8CTimeoutD1Ev>
 80032de:	4620      	mov	r0, r4
 80032e0:	f001 f9a0 	bl	8004624 <_ZdlPv>
 80032e4:	4620      	mov	r0, r4
 80032e6:	bd10      	pop	{r4, pc}
 80032e8:	08006bf4 	.word	0x08006bf4

080032ec <_ZN7SDeviceD1Ev>:
 80032ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032f0:	4607      	mov	r7, r0
 80032f2:	f500 701e 	add.w	r0, r0, #632	; 0x278
 80032f6:	f7ff f98d 	bl	8002614 <_ZN11CSerialPortD1Ev>
 80032fa:	f507 7019 	add.w	r0, r7, #612	; 0x264
 80032fe:	f000 faeb 	bl	80038d8 <_ZN17CACFrequencyMeterD1Ev>
 8003302:	f507 7011 	add.w	r0, r7, #580	; 0x244
 8003306:	f7ff ff1f 	bl	8003148 <_ZN13CACDisplayDmdD1Ev>
 800330a:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 800330e:	f507 7004 	add.w	r0, r7, #528	; 0x210
 8003312:	f000 fb11 	bl	8003938 <_ZN8CTimeoutD1Ev>
 8003316:	4623      	mov	r3, r4
 8003318:	4d12      	ldr	r5, [pc, #72]	; (8003364 <_ZN7SDeviceD1Ev+0x78>)
 800331a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8003368 <_ZN7SDeviceD1Ev+0x7c>
 800331e:	f107 0618 	add.w	r6, r7, #24
 8003322:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8003326:	f1a3 004c 	sub.w	r0, r3, #76	; 0x4c
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	f1a3 0458 	sub.w	r4, r3, #88	; 0x58
 8003330:	42aa      	cmp	r2, r5
 8003332:	d10c      	bne.n	800334e <_ZN7SDeviceD1Ev+0x62>
 8003334:	f843 8c58 	str.w	r8, [r3, #-88]
 8003338:	f000 fafe 	bl	8003938 <_ZN8CTimeoutD1Ev>
 800333c:	42a6      	cmp	r6, r4
 800333e:	4623      	mov	r3, r4
 8003340:	d1ef      	bne.n	8003322 <_ZN7SDeviceD1Ev+0x36>
 8003342:	4638      	mov	r0, r7
 8003344:	f7ff ff50 	bl	80031e8 <_ZN10CHeartBeatD1Ev>
 8003348:	4638      	mov	r0, r7
 800334a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800334e:	4620      	mov	r0, r4
 8003350:	4790      	blx	r2
 8003352:	42a6      	cmp	r6, r4
 8003354:	4623      	mov	r3, r4
 8003356:	d1e4      	bne.n	8003322 <_ZN7SDeviceD1Ev+0x36>
 8003358:	4638      	mov	r0, r7
 800335a:	f7ff ff45 	bl	80031e8 <_ZN10CHeartBeatD1Ev>
 800335e:	4638      	mov	r0, r7
 8003360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003364:	080032b9 	.word	0x080032b9
 8003368:	08006bf4 	.word	0x08006bf4

0800336c <_ZN13CSTM32F10xADC4ReadEv>:
 800336c:	6843      	ldr	r3, [r0, #4]
 800336e:	8818      	ldrh	r0, [r3, #0]
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop

08003374 <_ZN13CSTM32F10xADCD1Ev>:
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop

08003378 <_ZN13CSTM32F10xADCD0Ev>:
 8003378:	b510      	push	{r4, lr}
 800337a:	4604      	mov	r4, r0
 800337c:	f001 f952 	bl	8004624 <_ZdlPv>
 8003380:	4620      	mov	r0, r4
 8003382:	bd10      	pop	{r4, pc}

08003384 <_ZN13CSTM32F10xADC4InitEPt>:
 8003384:	6041      	str	r1, [r0, #4]
 8003386:	4770      	bx	lr

08003388 <_ZN13CSTM32F10xADCC1Ev>:
 8003388:	4b01      	ldr	r3, [pc, #4]	; (8003390 <_ZN13CSTM32F10xADCC1Ev+0x8>)
 800338a:	6003      	str	r3, [r0, #0]
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	08006c04 	.word	0x08006c04

08003394 <_ZN13CSTM32F10xDMAD1Ev>:
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop

08003398 <_ZN13CSTM32F10xDMA12SetDirectionEm>:
 8003398:	4603      	mov	r3, r0
 800339a:	6141      	str	r1, [r0, #20]
 800339c:	6880      	ldr	r0, [r0, #8]
 800339e:	f103 010c 	add.w	r1, r3, #12
 80033a2:	f7fe b851 	b.w	8001448 <DMA_Init>
 80033a6:	bf00      	nop

080033a8 <_ZN13CSTM32F10xDMA10SetAddressEmm>:
 80033a8:	60c1      	str	r1, [r0, #12]
 80033aa:	6102      	str	r2, [r0, #16]
 80033ac:	f100 010c 	add.w	r1, r0, #12
 80033b0:	6880      	ldr	r0, [r0, #8]
 80033b2:	f7fe b849 	b.w	8001448 <DMA_Init>
 80033b6:	bf00      	nop

080033b8 <_ZN13CSTM32F10xDMA13SetBufferSizeEt>:
 80033b8:	4603      	mov	r3, r0
 80033ba:	6181      	str	r1, [r0, #24]
 80033bc:	6880      	ldr	r0, [r0, #8]
 80033be:	f103 010c 	add.w	r1, r3, #12
 80033c2:	f7fe b841 	b.w	8001448 <DMA_Init>
 80033c6:	bf00      	nop

080033c8 <_ZN13CSTM32F10xDMA5StartEv>:
 80033c8:	6880      	ldr	r0, [r0, #8]
 80033ca:	2101      	movs	r1, #1
 80033cc:	f7fe b8a4 	b.w	8001518 <DMA_Cmd>

080033d0 <_ZN13CSTM32F10xDMA4StopEv>:
 80033d0:	6880      	ldr	r0, [r0, #8]
 80033d2:	2100      	movs	r1, #0
 80033d4:	f7fe b8a0 	b.w	8001518 <DMA_Cmd>

080033d8 <_ZN13CSTM32F10xDMA12GetDataIndexEv>:
 80033d8:	4603      	mov	r3, r0
 80033da:	b510      	push	{r4, lr}
 80033dc:	6880      	ldr	r0, [r0, #8]
 80033de:	8b1c      	ldrh	r4, [r3, #24]
 80033e0:	f7fe f8b6 	bl	8001550 <DMA_GetCurrDataCounter>
 80033e4:	1a20      	subs	r0, r4, r0
 80033e6:	b280      	uxth	r0, r0
 80033e8:	bd10      	pop	{r4, pc}
 80033ea:	bf00      	nop

080033ec <_ZN13CSTM32F10xDMA18IsTransferFinishedEv>:
 80033ec:	b510      	push	{r4, lr}
 80033ee:	4604      	mov	r4, r0
 80033f0:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80033f2:	f7fe f8b9 	bl	8001568 <DMA_GetFlagStatus>
 80033f6:	b118      	cbz	r0, 8003400 <_ZN13CSTM32F10xDMA18IsTransferFinishedEv+0x14>
 80033f8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80033fa:	f7fe f8dd 	bl	80015b8 <DMA_ClearFlag>
 80033fe:	2001      	movs	r0, #1
 8003400:	bd10      	pop	{r4, pc}
 8003402:	bf00      	nop

08003404 <_ZN13CSTM32F10xDMAD0Ev>:
 8003404:	b510      	push	{r4, lr}
 8003406:	4604      	mov	r4, r0
 8003408:	f001 f90c 	bl	8004624 <_ZdlPv>
 800340c:	4620      	mov	r0, r4
 800340e:	bd10      	pop	{r4, pc}

08003410 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm>:
 8003410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003412:	4604      	mov	r4, r0
 8003414:	2500      	movs	r5, #0
 8003416:	2680      	movs	r6, #128	; 0x80
 8003418:	9f06      	ldr	r7, [sp, #24]
 800341a:	6041      	str	r1, [r0, #4]
 800341c:	62c3      	str	r3, [r0, #44]	; 0x2c
 800341e:	6082      	str	r2, [r0, #8]
 8003420:	f104 010c 	add.w	r1, r4, #12
 8003424:	4610      	mov	r0, r2
 8003426:	6327      	str	r7, [r4, #48]	; 0x30
 8003428:	6226      	str	r6, [r4, #32]
 800342a:	62a5      	str	r5, [r4, #40]	; 0x28
 800342c:	6265      	str	r5, [r4, #36]	; 0x24
 800342e:	f7fe f80b 	bl	8001448 <DMA_Init>
 8003432:	68a3      	ldr	r3, [r4, #8]
 8003434:	4a26      	ldr	r2, [pc, #152]	; (80034d0 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xc0>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d027      	beq.n	800348a <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x7a>
 800343a:	4a26      	ldr	r2, [pc, #152]	; (80034d4 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xc4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d027      	beq.n	8003490 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x80>
 8003440:	4a25      	ldr	r2, [pc, #148]	; (80034d8 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xc8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d027      	beq.n	8003496 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x86>
 8003446:	4a25      	ldr	r2, [pc, #148]	; (80034dc <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xcc>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d028      	beq.n	800349e <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x8e>
 800344c:	4a24      	ldr	r2, [pc, #144]	; (80034e0 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xd0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d029      	beq.n	80034a6 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x96>
 8003452:	4a24      	ldr	r2, [pc, #144]	; (80034e4 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xd4>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d02a      	beq.n	80034ae <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x9e>
 8003458:	4a23      	ldr	r2, [pc, #140]	; (80034e8 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xd8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d011      	beq.n	8003482 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x72>
 800345e:	4a23      	ldr	r2, [pc, #140]	; (80034ec <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xdc>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d028      	beq.n	80034b6 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xa6>
 8003464:	4a22      	ldr	r2, [pc, #136]	; (80034f0 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xe0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d028      	beq.n	80034bc <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xac>
 800346a:	4a22      	ldr	r2, [pc, #136]	; (80034f4 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xe4>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d028      	beq.n	80034c2 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xb2>
 8003470:	4a21      	ldr	r2, [pc, #132]	; (80034f8 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xe8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d028      	beq.n	80034c8 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xb8>
 8003476:	4a21      	ldr	r2, [pc, #132]	; (80034fc <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xec>)
 8003478:	4293      	cmp	r3, r2
 800347a:	bf04      	itt	eq
 800347c:	4b20      	ldreq	r3, [pc, #128]	; (8003500 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xf0>)
 800347e:	63a3      	streq	r3, [r4, #56]	; 0x38
 8003480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003482:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003486:	63a3      	str	r3, [r4, #56]	; 0x38
 8003488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800348a:	2302      	movs	r3, #2
 800348c:	63a3      	str	r3, [r4, #56]	; 0x38
 800348e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003490:	2320      	movs	r3, #32
 8003492:	63a3      	str	r3, [r4, #56]	; 0x38
 8003494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003496:	f44f 7300 	mov.w	r3, #512	; 0x200
 800349a:	63a3      	str	r3, [r4, #56]	; 0x38
 800349c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800349e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034a2:	63a3      	str	r3, [r4, #56]	; 0x38
 80034a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034aa:	63a3      	str	r3, [r4, #56]	; 0x38
 80034ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034ae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80034b2:	63a3      	str	r3, [r4, #56]	; 0x38
 80034b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034b6:	4b13      	ldr	r3, [pc, #76]	; (8003504 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xf4>)
 80034b8:	63a3      	str	r3, [r4, #56]	; 0x38
 80034ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034bc:	4b12      	ldr	r3, [pc, #72]	; (8003508 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xf8>)
 80034be:	63a3      	str	r3, [r4, #56]	; 0x38
 80034c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034c2:	4b12      	ldr	r3, [pc, #72]	; (800350c <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0xfc>)
 80034c4:	63a3      	str	r3, [r4, #56]	; 0x38
 80034c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034c8:	4b11      	ldr	r3, [pc, #68]	; (8003510 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm+0x100>)
 80034ca:	63a3      	str	r3, [r4, #56]	; 0x38
 80034cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40020008 	.word	0x40020008
 80034d4:	4002001c 	.word	0x4002001c
 80034d8:	40020030 	.word	0x40020030
 80034dc:	40020044 	.word	0x40020044
 80034e0:	40020058 	.word	0x40020058
 80034e4:	4002006c 	.word	0x4002006c
 80034e8:	40020080 	.word	0x40020080
 80034ec:	40020408 	.word	0x40020408
 80034f0:	4002041c 	.word	0x4002041c
 80034f4:	40020430 	.word	0x40020430
 80034f8:	40020444 	.word	0x40020444
 80034fc:	40020458 	.word	0x40020458
 8003500:	10020000 	.word	0x10020000
 8003504:	10000002 	.word	0x10000002
 8003508:	10000020 	.word	0x10000020
 800350c:	10000200 	.word	0x10000200
 8003510:	10002000 	.word	0x10002000

08003514 <_ZN13CSTM32F10xDMAC1Ev>:
 8003514:	4b05      	ldr	r3, [pc, #20]	; (800352c <_ZN13CSTM32F10xDMAC1Ev+0x18>)
 8003516:	b510      	push	{r4, lr}
 8003518:	4604      	mov	r4, r0
 800351a:	f840 3b0c 	str.w	r3, [r0], #12
 800351e:	f7fd ffd1 	bl	80014c4 <DMA_StructInit>
 8003522:	2300      	movs	r3, #0
 8003524:	4620      	mov	r0, r4
 8003526:	6063      	str	r3, [r4, #4]
 8003528:	bd10      	pop	{r4, pc}
 800352a:	bf00      	nop
 800352c:	08006c18 	.word	0x08006c18

08003530 <_ZN14CSTM32F10xGpio3SetEv>:
 8003530:	6842      	ldr	r2, [r0, #4]
 8003532:	6881      	ldr	r1, [r0, #8]
 8003534:	6913      	ldr	r3, [r2, #16]
 8003536:	430b      	orrs	r3, r1
 8003538:	6113      	str	r3, [r2, #16]
 800353a:	4770      	bx	lr

0800353c <_ZN14CSTM32F10xGpio5ClearEv>:
 800353c:	6842      	ldr	r2, [r0, #4]
 800353e:	68c1      	ldr	r1, [r0, #12]
 8003540:	6913      	ldr	r3, [r2, #16]
 8003542:	430b      	orrs	r3, r1
 8003544:	6113      	str	r3, [r2, #16]
 8003546:	4770      	bx	lr

08003548 <_ZNK14CSTM32F10xGpio3GetEv>:
 8003548:	6842      	ldr	r2, [r0, #4]
 800354a:	6883      	ldr	r3, [r0, #8]
 800354c:	6892      	ldr	r2, [r2, #8]
 800354e:	421a      	tst	r2, r3
 8003550:	bf14      	ite	ne
 8003552:	2001      	movne	r0, #1
 8003554:	2000      	moveq	r0, #0
 8003556:	4770      	bx	lr

08003558 <_ZN14CSTM32F10xGpioD1Ev>:
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop

0800355c <_ZN14CSTM32F10xGpioD0Ev>:
 800355c:	b510      	push	{r4, lr}
 800355e:	4604      	mov	r4, r0
 8003560:	f001 f860 	bl	8004624 <_ZdlPv>
 8003564:	4620      	mov	r0, r4
 8003566:	bd10      	pop	{r4, pc}

08003568 <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh>:
 8003568:	2a0f      	cmp	r2, #15
 800356a:	dc0a      	bgt.n	8003582 <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh+0x1a>
 800356c:	2301      	movs	r3, #1
 800356e:	b410      	push	{r4}
 8003570:	f102 0410 	add.w	r4, r2, #16
 8003574:	fa03 f202 	lsl.w	r2, r3, r2
 8003578:	40a3      	lsls	r3, r4
 800357a:	bc10      	pop	{r4}
 800357c:	6041      	str	r1, [r0, #4]
 800357e:	6082      	str	r2, [r0, #8]
 8003580:	60c3      	str	r3, [r0, #12]
 8003582:	4770      	bx	lr

08003584 <_ZN14CSTM32F10xGpioC1Ev>:
 8003584:	2200      	movs	r2, #0
 8003586:	4902      	ldr	r1, [pc, #8]	; (8003590 <_ZN14CSTM32F10xGpioC1Ev+0xc>)
 8003588:	6082      	str	r2, [r0, #8]
 800358a:	e880 0006 	stmia.w	r0, {r1, r2}
 800358e:	4770      	bx	lr
 8003590:	08006c44 	.word	0x08006c44

08003594 <_ZN22CSTM32F10xInputCaptureD1Ev>:
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop

08003598 <_ZN22CSTM32F10xInputCaptureD0Ev>:
 8003598:	b510      	push	{r4, lr}
 800359a:	4604      	mov	r4, r0
 800359c:	f001 f842 	bl	8004624 <_ZdlPv>
 80035a0:	4620      	mov	r0, r4
 80035a2:	bd10      	pop	{r4, pc}

080035a4 <_ZNK22CSTM32F10xInputCapture4ReadEv>:
 80035a4:	8903      	ldrh	r3, [r0, #8]
 80035a6:	2b0c      	cmp	r3, #12
 80035a8:	d814      	bhi.n	80035d4 <_ZNK22CSTM32F10xInputCapture4ReadEv+0x30>
 80035aa:	e8df f003 	tbb	[pc, r3]
 80035ae:	1310      	.short	0x1310
 80035b0:	130d1313 	.word	0x130d1313
 80035b4:	130a1313 	.word	0x130a1313
 80035b8:	1313      	.short	0x1313
 80035ba:	07          	.byte	0x07
 80035bb:	00          	.byte	0x00
 80035bc:	6840      	ldr	r0, [r0, #4]
 80035be:	f7fe bc69 	b.w	8001e94 <TIM_GetCapture4>
 80035c2:	6840      	ldr	r0, [r0, #4]
 80035c4:	f7fe bc5a 	b.w	8001e7c <TIM_GetCapture3>
 80035c8:	6840      	ldr	r0, [r0, #4]
 80035ca:	f7fe bc4b 	b.w	8001e64 <TIM_GetCapture2>
 80035ce:	6840      	ldr	r0, [r0, #4]
 80035d0:	f7fe bc3c 	b.w	8001e4c <TIM_GetCapture1>
 80035d4:	2000      	movs	r0, #0
 80035d6:	4770      	bx	lr

080035d8 <_ZNK22CSTM32F10xInputCapture11IsTriggeredEv>:
 80035d8:	b508      	push	{r3, lr}
 80035da:	8903      	ldrh	r3, [r0, #8]
 80035dc:	2b0c      	cmp	r3, #12
 80035de:	d828      	bhi.n	8003632 <_ZNK22CSTM32F10xInputCapture11IsTriggeredEv+0x5a>
 80035e0:	e8df f003 	tbb	[pc, r3]
 80035e4:	2727271f 	.word	0x2727271f
 80035e8:	27272717 	.word	0x27272717
 80035ec:	2727270f 	.word	0x2727270f
 80035f0:	07          	.byte	0x07
 80035f1:	00          	.byte	0x00
 80035f2:	2110      	movs	r1, #16
 80035f4:	6840      	ldr	r0, [r0, #4]
 80035f6:	f7fe fc5a 	bl	8001eae <TIM_GetFlagStatus>
 80035fa:	3000      	adds	r0, #0
 80035fc:	bf18      	it	ne
 80035fe:	2001      	movne	r0, #1
 8003600:	bd08      	pop	{r3, pc}
 8003602:	2108      	movs	r1, #8
 8003604:	6840      	ldr	r0, [r0, #4]
 8003606:	f7fe fc52 	bl	8001eae <TIM_GetFlagStatus>
 800360a:	3000      	adds	r0, #0
 800360c:	bf18      	it	ne
 800360e:	2001      	movne	r0, #1
 8003610:	bd08      	pop	{r3, pc}
 8003612:	2104      	movs	r1, #4
 8003614:	6840      	ldr	r0, [r0, #4]
 8003616:	f7fe fc4a 	bl	8001eae <TIM_GetFlagStatus>
 800361a:	3000      	adds	r0, #0
 800361c:	bf18      	it	ne
 800361e:	2001      	movne	r0, #1
 8003620:	bd08      	pop	{r3, pc}
 8003622:	2102      	movs	r1, #2
 8003624:	6840      	ldr	r0, [r0, #4]
 8003626:	f7fe fc42 	bl	8001eae <TIM_GetFlagStatus>
 800362a:	3000      	adds	r0, #0
 800362c:	bf18      	it	ne
 800362e:	2001      	movne	r0, #1
 8003630:	bd08      	pop	{r3, pc}
 8003632:	2000      	movs	r0, #0
 8003634:	bd08      	pop	{r3, pc}
 8003636:	bf00      	nop

08003638 <_ZN22CSTM32F10xInputCapture4InitEP11TIM_TypeDeft>:
 8003638:	6041      	str	r1, [r0, #4]
 800363a:	8102      	strh	r2, [r0, #8]
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop

08003640 <_ZN22CSTM32F10xInputCaptureC1Ev>:
 8003640:	4b01      	ldr	r3, [pc, #4]	; (8003648 <_ZN22CSTM32F10xInputCaptureC1Ev+0x8>)
 8003642:	6003      	str	r3, [r0, #0]
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	08006c60 	.word	0x08006c60

0800364c <_ZNK15CSTM32F10xTimer12CurrentTicksEv>:
 800364c:	6843      	ldr	r3, [r0, #4]
 800364e:	8c98      	ldrh	r0, [r3, #36]	; 0x24
 8003650:	b280      	uxth	r0, r0
 8003652:	4770      	bx	lr

08003654 <_ZN15CSTM32F10xTimerD1Ev>:
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop

08003658 <_ZN15CSTM32F10xTimerD0Ev>:
 8003658:	b510      	push	{r4, lr}
 800365a:	4604      	mov	r4, r0
 800365c:	f000 ffe2 	bl	8004624 <_ZdlPv>
 8003660:	4620      	mov	r0, r4
 8003662:	bd10      	pop	{r4, pc}

08003664 <_ZN15CSTM32F10xTimer4InitEP11TIM_TypeDef>:
 8003664:	6041      	str	r1, [r0, #4]
 8003666:	4770      	bx	lr

08003668 <_ZN15CSTM32F10xTimerC1Ev>:
 8003668:	4b01      	ldr	r3, [pc, #4]	; (8003670 <_ZN15CSTM32F10xTimerC1Ev+0x8>)
 800366a:	6003      	str	r3, [r0, #0]
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	08006c78 	.word	0x08006c78

08003674 <_ZN15CSTM32F10xUSART5WriteEPKct>:
 8003674:	b38a      	cbz	r2, 80036da <_ZN15CSTM32F10xUSART5WriteEPKct+0x66>
 8003676:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003678:	f240 1743 	movw	r7, #323	; 0x143
 800367c:	4605      	mov	r5, r0
 800367e:	6980      	ldr	r0, [r0, #24]
 8003680:	4c17      	ldr	r4, [pc, #92]	; (80036e0 <_ZN15CSTM32F10xUSART5WriteEPKct+0x6c>)
 8003682:	3001      	adds	r0, #1
 8003684:	fba4 6300 	umull	r6, r3, r4, r0
 8003688:	1ac6      	subs	r6, r0, r3
 800368a:	eb03 0356 	add.w	r3, r3, r6, lsr #1
 800368e:	0a1b      	lsrs	r3, r3, #8
 8003690:	fb07 0313 	mls	r3, r7, r3, r0
 8003694:	f8d5 0160 	ldr.w	r0, [r5, #352]	; 0x160
 8003698:	780e      	ldrb	r6, [r1, #0]
 800369a:	4283      	cmp	r3, r0
 800369c:	d01b      	beq.n	80036d6 <_ZN15CSTM32F10xUSART5WriteEPKct+0x62>
 800369e:	46a6      	mov	lr, r4
 80036a0:	2000      	movs	r0, #0
 80036a2:	69ac      	ldr	r4, [r5, #24]
 80036a4:	3001      	adds	r0, #1
 80036a6:	b280      	uxth	r0, r0
 80036a8:	442c      	add	r4, r5
 80036aa:	4290      	cmp	r0, r2
 80036ac:	7726      	strb	r6, [r4, #28]
 80036ae:	61ab      	str	r3, [r5, #24]
 80036b0:	da10      	bge.n	80036d4 <_ZN15CSTM32F10xUSART5WriteEPKct+0x60>
 80036b2:	69ac      	ldr	r4, [r5, #24]
 80036b4:	f8d5 c160 	ldr.w	ip, [r5, #352]	; 0x160
 80036b8:	3401      	adds	r4, #1
 80036ba:	fbae 6304 	umull	r6, r3, lr, r4
 80036be:	1ae6      	subs	r6, r4, r3
 80036c0:	eb03 0356 	add.w	r3, r3, r6, lsr #1
 80036c4:	0a1b      	lsrs	r3, r3, #8
 80036c6:	fb07 4313 	mls	r3, r7, r3, r4
 80036ca:	4563      	cmp	r3, ip
 80036cc:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 80036d0:	d1e7      	bne.n	80036a2 <_ZN15CSTM32F10xUSART5WriteEPKct+0x2e>
 80036d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036d6:	2000      	movs	r0, #0
 80036d8:	e7fb      	b.n	80036d2 <_ZN15CSTM32F10xUSART5WriteEPKct+0x5e>
 80036da:	4610      	mov	r0, r2
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	95cbb0bf 	.word	0x95cbb0bf

080036e4 <_ZN15CSTM32F10xUSART5WriteEPKc>:
 80036e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036e6:	780d      	ldrb	r5, [r1, #0]
 80036e8:	b365      	cbz	r5, 8003744 <_ZN15CSTM32F10xUSART5WriteEPKc+0x60>
 80036ea:	f240 1643 	movw	r6, #323	; 0x143
 80036ee:	4604      	mov	r4, r0
 80036f0:	6982      	ldr	r2, [r0, #24]
 80036f2:	4f15      	ldr	r7, [pc, #84]	; (8003748 <_ZN15CSTM32F10xUSART5WriteEPKc+0x64>)
 80036f4:	3201      	adds	r2, #1
 80036f6:	fba7 0302 	umull	r0, r3, r7, r2
 80036fa:	1ad0      	subs	r0, r2, r3
 80036fc:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8003700:	0a1b      	lsrs	r3, r3, #8
 8003702:	fb06 2313 	mls	r3, r6, r3, r2
 8003706:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
 800370a:	2000      	movs	r0, #0
 800370c:	429a      	cmp	r2, r3
 800370e:	d017      	beq.n	8003740 <_ZN15CSTM32F10xUSART5WriteEPKc+0x5c>
 8003710:	69a2      	ldr	r2, [r4, #24]
 8003712:	3001      	adds	r0, #1
 8003714:	4422      	add	r2, r4
 8003716:	7715      	strb	r5, [r2, #28]
 8003718:	61a3      	str	r3, [r4, #24]
 800371a:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800371e:	b280      	uxth	r0, r0
 8003720:	b17d      	cbz	r5, 8003742 <_ZN15CSTM32F10xUSART5WriteEPKc+0x5e>
 8003722:	69a2      	ldr	r2, [r4, #24]
 8003724:	f8d4 e160 	ldr.w	lr, [r4, #352]	; 0x160
 8003728:	3201      	adds	r2, #1
 800372a:	fba7 c302 	umull	ip, r3, r7, r2
 800372e:	eba2 0c03 	sub.w	ip, r2, r3
 8003732:	eb03 035c 	add.w	r3, r3, ip, lsr #1
 8003736:	0a1b      	lsrs	r3, r3, #8
 8003738:	fb06 2313 	mls	r3, r6, r3, r2
 800373c:	4573      	cmp	r3, lr
 800373e:	d1e7      	bne.n	8003710 <_ZN15CSTM32F10xUSART5WriteEPKc+0x2c>
 8003740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003744:	4628      	mov	r0, r5
 8003746:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003748:	95cbb0bf 	.word	0x95cbb0bf

0800374c <_ZN15CSTM32F10xUSART7HasDataEv>:
 800374c:	f8d0 22b0 	ldr.w	r2, [r0, #688]	; 0x2b0
 8003750:	f8d0 0168 	ldr.w	r0, [r0, #360]	; 0x168
 8003754:	1a10      	subs	r0, r2, r0
 8003756:	bf18      	it	ne
 8003758:	2001      	movne	r0, #1
 800375a:	4770      	bx	lr

0800375c <_ZN15CSTM32F10xUSART4ReadEPhPt>:
 800375c:	2000      	movs	r0, #0
 800375e:	4770      	bx	lr

08003760 <_ZN15CSTM32F10xUSARTD1Ev>:
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop

08003764 <_ZN13CCircularFifoIcLj322EED1Ev>:
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop

08003768 <_ZN13CCircularFifoIcLj322EED0Ev>:
 8003768:	b510      	push	{r4, lr}
 800376a:	4604      	mov	r4, r0
 800376c:	f000 ff5a 	bl	8004624 <_ZdlPv>
 8003770:	4620      	mov	r0, r4
 8003772:	bd10      	pop	{r4, pc}

08003774 <_ZN15CSTM32F10xUSARTD0Ev>:
 8003774:	b510      	push	{r4, lr}
 8003776:	4604      	mov	r4, r0
 8003778:	f000 ff54 	bl	8004624 <_ZdlPv>
 800377c:	4620      	mov	r0, r4
 800377e:	bd10      	pop	{r4, pc}

08003780 <_ZN15CSTM32F10xUSART8ReadByteEv>:
 8003780:	b538      	push	{r3, r4, r5, lr}
 8003782:	6803      	ldr	r3, [r0, #0]
 8003784:	4a17      	ldr	r2, [pc, #92]	; (80037e4 <_ZN15CSTM32F10xUSART8ReadByteEv+0x64>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	4604      	mov	r4, r0
 800378a:	4293      	cmp	r3, r2
 800378c:	d127      	bne.n	80037de <_ZN15CSTM32F10xUSART8ReadByteEv+0x5e>
 800378e:	f8d0 02b0 	ldr.w	r0, [r0, #688]	; 0x2b0
 8003792:	f8d4 3168 	ldr.w	r3, [r4, #360]	; 0x168
 8003796:	1ac0      	subs	r0, r0, r3
 8003798:	bf18      	it	ne
 800379a:	2001      	movne	r0, #1
 800379c:	b1e0      	cbz	r0, 80037d8 <_ZN15CSTM32F10xUSART8ReadByteEv+0x58>
 800379e:	f8d4 22b0 	ldr.w	r2, [r4, #688]	; 0x2b0
 80037a2:	f8d4 3168 	ldr.w	r3, [r4, #360]	; 0x168
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d014      	beq.n	80037d4 <_ZN15CSTM32F10xUSART8ReadByteEv+0x54>
 80037aa:	f240 1043 	movw	r0, #323	; 0x143
 80037ae:	f8d4 12b0 	ldr.w	r1, [r4, #688]	; 0x2b0
 80037b2:	f8d4 22b0 	ldr.w	r2, [r4, #688]	; 0x2b0
 80037b6:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <_ZN15CSTM32F10xUSART8ReadByteEv+0x68>)
 80037b8:	3201      	adds	r2, #1
 80037ba:	fba3 5302 	umull	r5, r3, r3, r2
 80037be:	1ad5      	subs	r5, r2, r3
 80037c0:	eb03 0355 	add.w	r3, r3, r5, lsr #1
 80037c4:	0a1b      	lsrs	r3, r3, #8
 80037c6:	fb00 2313 	mls	r3, r0, r3, r2
 80037ca:	1862      	adds	r2, r4, r1
 80037cc:	f892 516c 	ldrb.w	r5, [r2, #364]	; 0x16c
 80037d0:	f8c4 32b0 	str.w	r3, [r4, #688]	; 0x2b0
 80037d4:	4628      	mov	r0, r5
 80037d6:	bd38      	pop	{r3, r4, r5, pc}
 80037d8:	4605      	mov	r5, r0
 80037da:	4628      	mov	r0, r5
 80037dc:	bd38      	pop	{r3, r4, r5, pc}
 80037de:	4798      	blx	r3
 80037e0:	e7dc      	b.n	800379c <_ZN15CSTM32F10xUSART8ReadByteEv+0x1c>
 80037e2:	bf00      	nop
 80037e4:	0800374d 	.word	0x0800374d
 80037e8:	95cbb0bf 	.word	0x95cbb0bf

080037ec <_ZN15CSTM32F10xUSART4InitEP13USART_TypeDefP19DMA_Channel_TypeDefPct>:
 80037ec:	b410      	push	{r4}
 80037ee:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 80037f2:	6101      	str	r1, [r0, #16]
 80037f4:	8104      	strh	r4, [r0, #8]
 80037f6:	60c2      	str	r2, [r0, #12]
 80037f8:	6043      	str	r3, [r0, #4]
 80037fa:	bc10      	pop	{r4}
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop

08003800 <_ZN15CSTM32F10xUSART7ExecuteEv>:
 8003800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003802:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 8003806:	6983      	ldr	r3, [r0, #24]
 8003808:	4604      	mov	r4, r0
 800380a:	429a      	cmp	r2, r3
 800380c:	d021      	beq.n	8003852 <_ZN15CSTM32F10xUSART7ExecuteEv+0x52>
 800380e:	2180      	movs	r1, #128	; 0x80
 8003810:	6900      	ldr	r0, [r0, #16]
 8003812:	f7fe fe50 	bl	80024b6 <USART_GetFlagStatus>
 8003816:	b1e0      	cbz	r0, 8003852 <_ZN15CSTM32F10xUSART7ExecuteEv+0x52>
 8003818:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
 800381c:	69a3      	ldr	r3, [r4, #24]
 800381e:	429a      	cmp	r2, r3
 8003820:	d013      	beq.n	800384a <_ZN15CSTM32F10xUSART7ExecuteEv+0x4a>
 8003822:	f240 1043 	movw	r0, #323	; 0x143
 8003826:	f8d4 1160 	ldr.w	r1, [r4, #352]	; 0x160
 800382a:	f8d4 2160 	ldr.w	r2, [r4, #352]	; 0x160
 800382e:	4b1e      	ldr	r3, [pc, #120]	; (80038a8 <_ZN15CSTM32F10xUSART7ExecuteEv+0xa8>)
 8003830:	3201      	adds	r2, #1
 8003832:	fba3 5302 	umull	r5, r3, r3, r2
 8003836:	1ad5      	subs	r5, r2, r3
 8003838:	eb03 0355 	add.w	r3, r3, r5, lsr #1
 800383c:	0a1b      	lsrs	r3, r3, #8
 800383e:	fb00 2313 	mls	r3, r0, r3, r2
 8003842:	1862      	adds	r2, r4, r1
 8003844:	7f15      	ldrb	r5, [r2, #28]
 8003846:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
 800384a:	b2a9      	uxth	r1, r5
 800384c:	6920      	ldr	r0, [r4, #16]
 800384e:	f7fe fe21 	bl	8002494 <USART_SendData>
 8003852:	68e3      	ldr	r3, [r4, #12]
 8003854:	8920      	ldrh	r0, [r4, #8]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	8961      	ldrh	r1, [r4, #10]
 800385a:	1ac3      	subs	r3, r0, r3
 800385c:	4299      	cmp	r1, r3
 800385e:	d021      	beq.n	80038a4 <_ZN15CSTM32F10xUSART7ExecuteEv+0xa4>
 8003860:	1c4e      	adds	r6, r1, #1
 8003862:	f240 1743 	movw	r7, #323	; 0x143
 8003866:	fb96 f5f0 	sdiv	r5, r6, r0
 800386a:	f8d4 2168 	ldr.w	r2, [r4, #360]	; 0x168
 800386e:	4b0e      	ldr	r3, [pc, #56]	; (80038a8 <_ZN15CSTM32F10xUSART7ExecuteEv+0xa8>)
 8003870:	3201      	adds	r2, #1
 8003872:	fba3 e302 	umull	lr, r3, r3, r2
 8003876:	eba2 0e03 	sub.w	lr, r2, r3
 800387a:	eb03 035e 	add.w	r3, r3, lr, lsr #1
 800387e:	0a1b      	lsrs	r3, r3, #8
 8003880:	fb07 2313 	mls	r3, r7, r3, r2
 8003884:	fb00 6015 	mls	r0, r0, r5, r6
 8003888:	f8d4 22b0 	ldr.w	r2, [r4, #688]	; 0x2b0
 800388c:	6865      	ldr	r5, [r4, #4]
 800388e:	4293      	cmp	r3, r2
 8003890:	5c69      	ldrb	r1, [r5, r1]
 8003892:	8160      	strh	r0, [r4, #10]
 8003894:	d006      	beq.n	80038a4 <_ZN15CSTM32F10xUSART7ExecuteEv+0xa4>
 8003896:	f8d4 2168 	ldr.w	r2, [r4, #360]	; 0x168
 800389a:	4422      	add	r2, r4
 800389c:	f882 116c 	strb.w	r1, [r2, #364]	; 0x16c
 80038a0:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
 80038a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038a6:	bf00      	nop
 80038a8:	95cbb0bf 	.word	0x95cbb0bf

080038ac <_ZN15CSTM32F10xUSARTC1Ev>:
 80038ac:	2200      	movs	r2, #0
 80038ae:	b410      	push	{r4}
 80038b0:	4907      	ldr	r1, [pc, #28]	; (80038d0 <_ZN15CSTM32F10xUSARTC1Ev+0x24>)
 80038b2:	4c08      	ldr	r4, [pc, #32]	; (80038d4 <_ZN15CSTM32F10xUSARTC1Ev+0x28>)
 80038b4:	6182      	str	r2, [r0, #24]
 80038b6:	6004      	str	r4, [r0, #0]
 80038b8:	f8c0 2160 	str.w	r2, [r0, #352]	; 0x160
 80038bc:	8142      	strh	r2, [r0, #10]
 80038be:	f8c0 2168 	str.w	r2, [r0, #360]	; 0x168
 80038c2:	6141      	str	r1, [r0, #20]
 80038c4:	f8c0 1164 	str.w	r1, [r0, #356]	; 0x164
 80038c8:	f8c0 22b0 	str.w	r2, [r0, #688]	; 0x2b0
 80038cc:	bc10      	pop	{r4}
 80038ce:	4770      	bx	lr
 80038d0:	08006c8c 	.word	0x08006c8c
 80038d4:	08006c9c 	.word	0x08006c9c

080038d8 <_ZN17CACFrequencyMeterD1Ev>:
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop

080038dc <_ZN17CACFrequencyMeterD0Ev>:
 80038dc:	b510      	push	{r4, lr}
 80038de:	4604      	mov	r4, r0
 80038e0:	f000 fea0 	bl	8004624 <_ZdlPv>
 80038e4:	4620      	mov	r0, r4
 80038e6:	bd10      	pop	{r4, pc}

080038e8 <_ZN17CACFrequencyMeter4InitEP13IInputCapture>:
 80038e8:	6041      	str	r1, [r0, #4]
 80038ea:	4770      	bx	lr

080038ec <_ZN17CACFrequencyMeter7ExecuteEv>:
 80038ec:	b538      	push	{r3, r4, r5, lr}
 80038ee:	4604      	mov	r4, r0
 80038f0:	6840      	ldr	r0, [r0, #4]
 80038f2:	6803      	ldr	r3, [r0, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4798      	blx	r3
 80038f8:	b188      	cbz	r0, 800391e <_ZN17CACFrequencyMeter7ExecuteEv+0x32>
 80038fa:	6860      	ldr	r0, [r4, #4]
 80038fc:	6803      	ldr	r3, [r0, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	4798      	blx	r3
 8003902:	4605      	mov	r5, r0
 8003904:	8920      	ldrh	r0, [r4, #8]
 8003906:	8165      	strh	r5, [r4, #10]
 8003908:	1a28      	subs	r0, r5, r0
 800390a:	b280      	uxth	r0, r0
 800390c:	81a0      	strh	r0, [r4, #12]
 800390e:	f7fd f9cb 	bl	8000ca8 <__aeabi_i2f>
 8003912:	4601      	mov	r1, r0
 8003914:	4802      	ldr	r0, [pc, #8]	; (8003920 <_ZN17CACFrequencyMeter7ExecuteEv+0x34>)
 8003916:	f7fd facf 	bl	8000eb8 <__aeabi_fdiv>
 800391a:	8125      	strh	r5, [r4, #8]
 800391c:	6120      	str	r0, [r4, #16]
 800391e:	bd38      	pop	{r3, r4, r5, pc}
 8003920:	41200000 	.word	0x41200000

08003924 <_ZN17CACFrequencyMeter13ReadFrequencyEv>:
 8003924:	6900      	ldr	r0, [r0, #16]
 8003926:	4770      	bx	lr

08003928 <_ZN17CACFrequencyMeterC1Ev>:
 8003928:	2200      	movs	r2, #0
 800392a:	4902      	ldr	r1, [pc, #8]	; (8003934 <_ZN17CACFrequencyMeterC1Ev+0xc>)
 800392c:	6102      	str	r2, [r0, #16]
 800392e:	6001      	str	r1, [r0, #0]
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	08006cc0 	.word	0x08006cc0

08003938 <_ZN8CTimeoutD1Ev>:
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop

0800393c <_ZN8CTimeoutD0Ev>:
 800393c:	b510      	push	{r4, lr}
 800393e:	4604      	mov	r4, r0
 8003940:	f000 fe70 	bl	8004624 <_ZdlPv>
 8003944:	4620      	mov	r0, r4
 8003946:	bd10      	pop	{r4, pc}

08003948 <_ZN8CTimeout4InitEP6ITimer>:
 8003948:	6041      	str	r1, [r0, #4]
 800394a:	4770      	bx	lr

0800394c <_ZN8CTimeout5ResetEv>:
 800394c:	b510      	push	{r4, lr}
 800394e:	4604      	mov	r4, r0
 8003950:	6840      	ldr	r0, [r0, #4]
 8003952:	6803      	ldr	r3, [r0, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4798      	blx	r3
 8003958:	2300      	movs	r3, #0
 800395a:	8160      	strh	r0, [r4, #10]
 800395c:	7323      	strb	r3, [r4, #12]
 800395e:	bd10      	pop	{r4, pc}

08003960 <_ZN8CTimeout9SetExpiryEt>:
 8003960:	b510      	push	{r4, lr}
 8003962:	4604      	mov	r4, r0
 8003964:	6840      	ldr	r0, [r0, #4]
 8003966:	8121      	strh	r1, [r4, #8]
 8003968:	6803      	ldr	r3, [r0, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4798      	blx	r3
 800396e:	2300      	movs	r3, #0
 8003970:	8160      	strh	r0, [r4, #10]
 8003972:	7323      	strb	r3, [r4, #12]
 8003974:	bd10      	pop	{r4, pc}
 8003976:	bf00      	nop

08003978 <_ZN8CTimeout10HasElapsedEv>:
 8003978:	7b03      	ldrb	r3, [r0, #12]
 800397a:	b10b      	cbz	r3, 8003980 <_ZN8CTimeout10HasElapsedEv+0x8>
 800397c:	4618      	mov	r0, r3
 800397e:	4770      	bx	lr
 8003980:	b510      	push	{r4, lr}
 8003982:	4604      	mov	r4, r0
 8003984:	6840      	ldr	r0, [r0, #4]
 8003986:	6803      	ldr	r3, [r0, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4798      	blx	r3
 800398c:	8963      	ldrh	r3, [r4, #10]
 800398e:	8922      	ldrh	r2, [r4, #8]
 8003990:	1ac0      	subs	r0, r0, r3
 8003992:	b280      	uxth	r0, r0
 8003994:	4290      	cmp	r0, r2
 8003996:	bfa5      	ittet	ge
 8003998:	2201      	movge	r2, #1
 800399a:	4613      	movge	r3, r2
 800399c:	7b23      	ldrblt	r3, [r4, #12]
 800399e:	7322      	strbge	r2, [r4, #12]
 80039a0:	4618      	mov	r0, r3
 80039a2:	bd10      	pop	{r4, pc}

080039a4 <_ZN8CTimeoutC1Ev>:
 80039a4:	4b01      	ldr	r3, [pc, #4]	; (80039ac <_ZN8CTimeoutC1Ev+0x8>)
 80039a6:	6003      	str	r3, [r0, #0]
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	08006cd0 	.word	0x08006cd0

080039b0 <_ZZ4mainENUlPcS_E_4_FUNES_S_>:
 80039b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b2:	4608      	mov	r0, r1
 80039b4:	460e      	mov	r6, r1
 80039b6:	f7fc fbcb 	bl	8000150 <strlen>
 80039ba:	4607      	mov	r7, r0
 80039bc:	4c06      	ldr	r4, [pc, #24]	; (80039d8 <_ZZ4mainENUlPcS_E_4_FUNES_S_+0x28>)
 80039be:	1835      	adds	r5, r6, r0
 80039c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039c2:	51f0      	str	r0, [r6, r7]
 80039c4:	6069      	str	r1, [r5, #4]
 80039c6:	cc03      	ldmia	r4!, {r0, r1}
 80039c8:	8824      	ldrh	r4, [r4, #0]
 80039ca:	60aa      	str	r2, [r5, #8]
 80039cc:	60eb      	str	r3, [r5, #12]
 80039ce:	6128      	str	r0, [r5, #16]
 80039d0:	832c      	strh	r4, [r5, #24]
 80039d2:	6169      	str	r1, [r5, #20]
 80039d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039d6:	bf00      	nop
 80039d8:	08007194 	.word	0x08007194

080039dc <_ZZ4mainENUlPcS_E4_4_FUNES_S_>:
 80039dc:	222c      	movs	r2, #44	; 0x2c
 80039de:	b510      	push	{r4, lr}
 80039e0:	b082      	sub	sp, #8
 80039e2:	ab02      	add	r3, sp, #8
 80039e4:	f823 2d04 	strh.w	r2, [r3, #-4]!
 80039e8:	460c      	mov	r4, r1
 80039ea:	2000      	movs	r0, #0
 80039ec:	4619      	mov	r1, r3
 80039ee:	f001 fecd 	bl	800578c <strtok>
 80039f2:	f000 fe1f 	bl	8004634 <atof>
 80039f6:	f7fd f84d 	bl	8000a94 <__aeabi_d2f>
 80039fa:	4601      	mov	r1, r0
 80039fc:	4803      	ldr	r0, [pc, #12]	; (8003a0c <_ZZ4mainENUlPcS_E4_4_FUNES_S_+0x30>)
 80039fe:	f7ff f911 	bl	8002c24 <_ZN3DMD12SetBrighnessEf>
 8003a02:	2300      	movs	r3, #0
 8003a04:	7023      	strb	r3, [r4, #0]
 8003a06:	b002      	add	sp, #8
 8003a08:	bd10      	pop	{r4, pc}
 8003a0a:	bf00      	nop
 8003a0c:	20000770 	.word	0x20000770

08003a10 <_ZZ4mainENUlPcS_E3_4_FUNES_S_>:
 8003a10:	b510      	push	{r4, lr}
 8003a12:	480a      	ldr	r0, [pc, #40]	; (8003a3c <_ZZ4mainENUlPcS_E3_4_FUNES_S_+0x2c>)
 8003a14:	b08e      	sub	sp, #56	; 0x38
 8003a16:	460c      	mov	r4, r1
 8003a18:	f7ff ff84 	bl	8003924 <_ZN17CACFrequencyMeter13ReadFrequencyEv>
 8003a1c:	4908      	ldr	r1, [pc, #32]	; (8003a40 <_ZZ4mainENUlPcS_E3_4_FUNES_S_+0x30>)
 8003a1e:	f7fd f997 	bl	8000d50 <__aeabi_fmul>
 8003a22:	f7fd fb5b 	bl	80010dc <__aeabi_f2uiz>
 8003a26:	4907      	ldr	r1, [pc, #28]	; (8003a44 <_ZZ4mainENUlPcS_E3_4_FUNES_S_+0x34>)
 8003a28:	b282      	uxth	r2, r0
 8003a2a:	a801      	add	r0, sp, #4
 8003a2c:	f000 fde3 	bl	80045f6 <siprintf>
 8003a30:	a901      	add	r1, sp, #4
 8003a32:	4620      	mov	r0, r4
 8003a34:	f001 f870 	bl	8004b18 <strcat>
 8003a38:	b00e      	add	sp, #56	; 0x38
 8003a3a:	bd10      	pop	{r4, pc}
 8003a3c:	2000090c 	.word	0x2000090c
 8003a40:	42c80000 	.word	0x42c80000
 8003a44:	08007190 	.word	0x08007190

08003a48 <_ZZ4mainENUlPcS_E0_4_FUNES_S_>:
 8003a48:	232c      	movs	r3, #44	; 0x2c
 8003a4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	ac02      	add	r4, sp, #8
 8003a52:	f824 3d04 	strh.w	r3, [r4, #-4]!
 8003a56:	468a      	mov	sl, r1
 8003a58:	4621      	mov	r1, r4
 8003a5a:	f001 fe97 	bl	800578c <strtok>
 8003a5e:	f000 fdec 	bl	800463a <atoi>
 8003a62:	4621      	mov	r1, r4
 8003a64:	4605      	mov	r5, r0
 8003a66:	2000      	movs	r0, #0
 8003a68:	f001 fe90 	bl	800578c <strtok>
 8003a6c:	f000 fde2 	bl	8004634 <atof>
 8003a70:	4680      	mov	r8, r0
 8003a72:	4689      	mov	r9, r1
 8003a74:	2000      	movs	r0, #0
 8003a76:	4621      	mov	r1, r4
 8003a78:	f001 fe88 	bl	800578c <strtok>
 8003a7c:	f000 fdda 	bl	8004634 <atof>
 8003a80:	2358      	movs	r3, #88	; 0x58
 8003a82:	4c0b      	ldr	r4, [pc, #44]	; (8003ab0 <_ZZ4mainENUlPcS_E0_4_FUNES_S_+0x68>)
 8003a84:	4606      	mov	r6, r0
 8003a86:	460f      	mov	r7, r1
 8003a88:	b2ad      	uxth	r5, r5
 8003a8a:	4649      	mov	r1, r9
 8003a8c:	4640      	mov	r0, r8
 8003a8e:	fb03 4405 	mla	r4, r3, r5, r4
 8003a92:	f7fc ffff 	bl	8000a94 <__aeabi_d2f>
 8003a96:	4639      	mov	r1, r7
 8003a98:	6060      	str	r0, [r4, #4]
 8003a9a:	4630      	mov	r0, r6
 8003a9c:	f7fc fffa 	bl	8000a94 <__aeabi_d2f>
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60a0      	str	r0, [r4, #8]
 8003aa4:	f88a 3000 	strb.w	r3, [sl]
 8003aa8:	b002      	add	sp, #8
 8003aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aae:	bf00      	nop
 8003ab0:	200006c0 	.word	0x200006c0

08003ab4 <_ZZ4mainENUlPcS_E1_4_FUNES_S_>:
 8003ab4:	222c      	movs	r2, #44	; 0x2c
 8003ab6:	b570      	push	{r4, r5, r6, lr}
 8003ab8:	b08e      	sub	sp, #56	; 0x38
 8003aba:	ab0e      	add	r3, sp, #56	; 0x38
 8003abc:	f823 2d38 	strh.w	r2, [r3, #-56]!
 8003ac0:	460d      	mov	r5, r1
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	f001 fe62 	bl	800578c <strtok>
 8003ac8:	f000 fdb7 	bl	800463a <atoi>
 8003acc:	2358      	movs	r3, #88	; 0x58
 8003ace:	4c0e      	ldr	r4, [pc, #56]	; (8003b08 <_ZZ4mainENUlPcS_E1_4_FUNES_S_+0x54>)
 8003ad0:	b280      	uxth	r0, r0
 8003ad2:	fb03 4400 	mla	r4, r3, r0, r4
 8003ad6:	490d      	ldr	r1, [pc, #52]	; (8003b0c <_ZZ4mainENUlPcS_E1_4_FUNES_S_+0x58>)
 8003ad8:	68a0      	ldr	r0, [r4, #8]
 8003ada:	f7fd f939 	bl	8000d50 <__aeabi_fmul>
 8003ade:	f7fd fafd 	bl	80010dc <__aeabi_f2uiz>
 8003ae2:	490a      	ldr	r1, [pc, #40]	; (8003b0c <_ZZ4mainENUlPcS_E1_4_FUNES_S_+0x58>)
 8003ae4:	b286      	uxth	r6, r0
 8003ae6:	6860      	ldr	r0, [r4, #4]
 8003ae8:	f7fd f932 	bl	8000d50 <__aeabi_fmul>
 8003aec:	f7fd faf6 	bl	80010dc <__aeabi_f2uiz>
 8003af0:	4633      	mov	r3, r6
 8003af2:	b282      	uxth	r2, r0
 8003af4:	4906      	ldr	r1, [pc, #24]	; (8003b10 <_ZZ4mainENUlPcS_E1_4_FUNES_S_+0x5c>)
 8003af6:	a801      	add	r0, sp, #4
 8003af8:	f000 fd7d 	bl	80045f6 <siprintf>
 8003afc:	a901      	add	r1, sp, #4
 8003afe:	4628      	mov	r0, r5
 8003b00:	f001 f80a 	bl	8004b18 <strcat>
 8003b04:	b00e      	add	sp, #56	; 0x38
 8003b06:	bd70      	pop	{r4, r5, r6, pc}
 8003b08:	200006c0 	.word	0x200006c0
 8003b0c:	42c80000 	.word	0x42c80000
 8003b10:	08007188 	.word	0x08007188

08003b14 <_ZZ4mainENUlPcS_E2_4_FUNES_S_>:
 8003b14:	222c      	movs	r2, #44	; 0x2c
 8003b16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b1a:	b08e      	sub	sp, #56	; 0x38
 8003b1c:	ab0e      	add	r3, sp, #56	; 0x38
 8003b1e:	f823 2d38 	strh.w	r2, [r3, #-56]!
 8003b22:	460f      	mov	r7, r1
 8003b24:	4619      	mov	r1, r3
 8003b26:	f001 fe31 	bl	800578c <strtok>
 8003b2a:	f000 fd86 	bl	800463a <atoi>
 8003b2e:	2458      	movs	r4, #88	; 0x58
 8003b30:	b280      	uxth	r0, r0
 8003b32:	fb04 f500 	mul.w	r5, r4, r0
 8003b36:	4c14      	ldr	r4, [pc, #80]	; (8003b88 <_ZZ4mainENUlPcS_E2_4_FUNES_S_+0x74>)
 8003b38:	1966      	adds	r6, r4, r5
 8003b3a:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 8003b3c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8003b40:	6803      	ldr	r3, [r0, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4798      	blx	r3
 8003b46:	f7fd f8af 	bl	8000ca8 <__aeabi_i2f>
 8003b4a:	4641      	mov	r1, r8
 8003b4c:	f7fd f900 	bl	8000d50 <__aeabi_fmul>
 8003b50:	6a31      	ldr	r1, [r6, #32]
 8003b52:	f7fc fff5 	bl	8000b40 <__addsf3>
 8003b56:	490d      	ldr	r1, [pc, #52]	; (8003b8c <_ZZ4mainENUlPcS_E2_4_FUNES_S_+0x78>)
 8003b58:	f7fd f8fa 	bl	8000d50 <__aeabi_fmul>
 8003b5c:	f7fd fabe 	bl	80010dc <__aeabi_f2uiz>
 8003b60:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8003b62:	b284      	uxth	r4, r0
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	6813      	ldr	r3, [r2, #0]
 8003b6a:	4798      	blx	r3
 8003b6c:	4622      	mov	r2, r4
 8003b6e:	4603      	mov	r3, r0
 8003b70:	4907      	ldr	r1, [pc, #28]	; (8003b90 <_ZZ4mainENUlPcS_E2_4_FUNES_S_+0x7c>)
 8003b72:	a801      	add	r0, sp, #4
 8003b74:	f000 fd3f 	bl	80045f6 <siprintf>
 8003b78:	a901      	add	r1, sp, #4
 8003b7a:	4638      	mov	r0, r7
 8003b7c:	f000 ffcc 	bl	8004b18 <strcat>
 8003b80:	b00e      	add	sp, #56	; 0x38
 8003b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b86:	bf00      	nop
 8003b88:	200006a8 	.word	0x200006a8
 8003b8c:	42c80000 	.word	0x42c80000
 8003b90:	08007188 	.word	0x08007188

08003b94 <main>:
 8003b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b98:	f2ad 5d94 	subw	sp, sp, #1428	; 0x594
 8003b9c:	f000 fb92 	bl	80042c4 <SystemInit>
 8003ba0:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8003ba4:	f7fd fdf2 	bl	800178c <RCC_ADCCLKConfig>
 8003ba8:	2101      	movs	r1, #1
 8003baa:	48d2      	ldr	r0, [pc, #840]	; (8003ef4 <main+0x360>)
 8003bac:	f7fd fef6 	bl	800199c <RCC_APB1PeriphClockCmd>
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003bb6:	f7fd fed3 	bl	8001960 <RCC_APB2PeriphClockCmd>
 8003bba:	2101      	movs	r1, #1
 8003bbc:	4608      	mov	r0, r1
 8003bbe:	f7fd feb1 	bl	8001924 <RCC_AHBPeriphClockCmd>
 8003bc2:	a80c      	add	r0, sp, #48	; 0x30
 8003bc4:	f7fe f882 	bl	8001ccc <TIM_TimeBaseStructInit>
 8003bc8:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003bcc:	f240 23cf 	movw	r3, #719	; 0x2cf
 8003bd0:	a90c      	add	r1, sp, #48	; 0x30
 8003bd2:	48c9      	ldr	r0, [pc, #804]	; (8003ef8 <main+0x364>)
 8003bd4:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8003bd8:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
 8003bdc:	f7fd ffa6 	bl	8001b2c <TIM_TimeBaseInit>
 8003be0:	2101      	movs	r1, #1
 8003be2:	48c5      	ldr	r0, [pc, #788]	; (8003ef8 <main+0x364>)
 8003be4:	f7fe f8a3 	bl	8001d2e <TIM_Cmd>
 8003be8:	a80c      	add	r0, sp, #48	; 0x30
 8003bea:	f7fe f86f 	bl	8001ccc <TIM_TimeBaseStructInit>
 8003bee:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8003bf2:	a90c      	add	r1, sp, #48	; 0x30
 8003bf4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003bf8:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8003bfc:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
 8003c00:	f7fd ff94 	bl	8001b2c <TIM_TimeBaseInit>
 8003c04:	2101      	movs	r1, #1
 8003c06:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003c0a:	f7fe f890 	bl	8001d2e <TIM_Cmd>
 8003c0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c12:	f04f 0802 	mov.w	r8, #2
 8003c16:	f8ad 3020 	strh.w	r3, [sp, #32]
 8003c1a:	f04f 0314 	mov.w	r3, #20
 8003c1e:	af0a      	add	r7, sp, #40	; 0x28
 8003c20:	a908      	add	r1, sp, #32
 8003c22:	48b6      	ldr	r0, [pc, #728]	; (8003efc <main+0x368>)
 8003c24:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8003c28:	f88d 8022 	strb.w	r8, [sp, #34]	; 0x22
 8003c2c:	f7fd fcde 	bl	80015ec <GPIO_Init>
 8003c30:	4638      	mov	r0, r7
 8003c32:	f7ff fd19 	bl	8003668 <_ZN15CSTM32F10xTimerC1Ev>
 8003c36:	4638      	mov	r0, r7
 8003c38:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003c3c:	4cb0      	ldr	r4, [pc, #704]	; (8003f00 <main+0x36c>)
 8003c3e:	f7ff fd11 	bl	8003664 <_ZN15CSTM32F10xTimer4InitEP11TIM_TypeDef>
 8003c42:	a815      	add	r0, sp, #84	; 0x54
 8003c44:	f7ff fc9e 	bl	8003584 <_ZN14CSTM32F10xGpioC1Ev>
 8003c48:	a815      	add	r0, sp, #84	; 0x54
 8003c4a:	220d      	movs	r2, #13
 8003c4c:	49ab      	ldr	r1, [pc, #684]	; (8003efc <main+0x368>)
 8003c4e:	f7ff fc8b 	bl	8003568 <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh>
 8003c52:	463a      	mov	r2, r7
 8003c54:	a915      	add	r1, sp, #84	; 0x54
 8003c56:	4620      	mov	r0, r4
 8003c58:	f241 3388 	movw	r3, #5000	; 0x1388
 8003c5c:	f7ff fa8e 	bl	800317c <_ZN10CHeartBeat4InitEP5IGpioP6ITimert>
 8003c60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c64:	f8ad 3020 	strh.w	r3, [sp, #32]
 8003c68:	f04f 0304 	mov.w	r3, #4
 8003c6c:	a908      	add	r1, sp, #32
 8003c6e:	48a5      	ldr	r0, [pc, #660]	; (8003f04 <main+0x370>)
 8003c70:	f04f 0b18 	mov.w	fp, #24
 8003c74:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8003c78:	f88d 8022 	strb.w	r8, [sp, #34]	; 0x22
 8003c7c:	f7fd fcb6 	bl	80015ec <GPIO_Init>
 8003c80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c84:	a908      	add	r1, sp, #32
 8003c86:	489f      	ldr	r0, [pc, #636]	; (8003f04 <main+0x370>)
 8003c88:	f8ad 3020 	strh.w	r3, [sp, #32]
 8003c8c:	f88d b023 	strb.w	fp, [sp, #35]	; 0x23
 8003c90:	f88d 8022 	strb.w	r8, [sp, #34]	; 0x22
 8003c94:	f7fd fcaa 	bl	80015ec <GPIO_Init>
 8003c98:	a83f      	add	r0, sp, #252	; 0xfc
 8003c9a:	f7fd fc13 	bl	80014c4 <DMA_StructInit>
 8003c9e:	4b9a      	ldr	r3, [pc, #616]	; (8003f08 <main+0x374>)
 8003ca0:	2500      	movs	r5, #0
 8003ca2:	933f      	str	r3, [sp, #252]	; 0xfc
 8003ca4:	2380      	movs	r3, #128	; 0x80
 8003ca6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003caa:	f44f 76a1 	mov.w	r6, #322	; 0x142
 8003cae:	9344      	str	r3, [sp, #272]	; 0x110
 8003cb0:	2320      	movs	r3, #32
 8003cb2:	f50d 7acc 	add.w	sl, sp, #408	; 0x198
 8003cb6:	a93f      	add	r1, sp, #252	; 0xfc
 8003cb8:	4894      	ldr	r0, [pc, #592]	; (8003f0c <main+0x378>)
 8003cba:	9248      	str	r2, [sp, #288]	; 0x120
 8003cbc:	9347      	str	r3, [sp, #284]	; 0x11c
 8003cbe:	9642      	str	r6, [sp, #264]	; 0x108
 8003cc0:	f8cd a100 	str.w	sl, [sp, #256]	; 0x100
 8003cc4:	9546      	str	r5, [sp, #280]	; 0x118
 8003cc6:	9545      	str	r5, [sp, #276]	; 0x114
 8003cc8:	9541      	str	r5, [sp, #260]	; 0x104
 8003cca:	f7fd fbbd 	bl	8001448 <DMA_Init>
 8003cce:	2101      	movs	r1, #1
 8003cd0:	488e      	ldr	r0, [pc, #568]	; (8003f0c <main+0x378>)
 8003cd2:	f7fd fc21 	bl	8001518 <DMA_Cmd>
 8003cd6:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8003cda:	9319      	str	r3, [sp, #100]	; 0x64
 8003cdc:	f04f 030c 	mov.w	r3, #12
 8003ce0:	f04f 0903 	mov.w	r9, #3
 8003ce4:	a919      	add	r1, sp, #100	; 0x64
 8003ce6:	488a      	ldr	r0, [pc, #552]	; (8003f10 <main+0x37c>)
 8003ce8:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
 8003cec:	f8ad 5070 	strh.w	r5, [sp, #112]	; 0x70
 8003cf0:	f8ad 506c 	strh.w	r5, [sp, #108]	; 0x6c
 8003cf4:	f8ad 506a 	strh.w	r5, [sp, #106]	; 0x6a
 8003cf8:	f8ad 5068 	strh.w	r5, [sp, #104]	; 0x68
 8003cfc:	f7fe face 	bl	800229c <USART_Init>
 8003d00:	2201      	movs	r2, #1
 8003d02:	2140      	movs	r1, #64	; 0x40
 8003d04:	4882      	ldr	r0, [pc, #520]	; (8003f10 <main+0x37c>)
 8003d06:	f7fe fba2 	bl	800244e <USART_DMACmd>
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	4880      	ldr	r0, [pc, #512]	; (8003f10 <main+0x37c>)
 8003d0e:	f7fe fb7f 	bl	8002410 <USART_Cmd>
 8003d12:	a8b7      	add	r0, sp, #732	; 0x2dc
 8003d14:	f7ff fdca 	bl	80038ac <_ZN15CSTM32F10xUSARTC1Ev>
 8003d18:	4653      	mov	r3, sl
 8003d1a:	4a7c      	ldr	r2, [pc, #496]	; (8003f0c <main+0x378>)
 8003d1c:	497c      	ldr	r1, [pc, #496]	; (8003f10 <main+0x37c>)
 8003d1e:	9600      	str	r6, [sp, #0]
 8003d20:	a8b7      	add	r0, sp, #732	; 0x2dc
 8003d22:	f7ff fd63 	bl	80037ec <_ZN15CSTM32F10xUSART4InitEP13USART_TypeDefP19DMA_Channel_TypeDefPct>
 8003d26:	a81d      	add	r0, sp, #116	; 0x74
 8003d28:	f7ff fb2e 	bl	8003388 <_ZN13CSTM32F10xADCC1Ev>
 8003d2c:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
 8003d30:	a81f      	add	r0, sp, #124	; 0x7c
 8003d32:	f7ff fb29 	bl	8003388 <_ZN13CSTM32F10xADCC1Ev>
 8003d36:	4651      	mov	r1, sl
 8003d38:	a81d      	add	r0, sp, #116	; 0x74
 8003d3a:	f7ff fb23 	bl	8003384 <_ZN13CSTM32F10xADC4InitEPt>
 8003d3e:	f10d 0126 	add.w	r1, sp, #38	; 0x26
 8003d42:	a81f      	add	r0, sp, #124	; 0x7c
 8003d44:	f7ff fb1e 	bl	8003384 <_ZN13CSTM32F10xADC4InitEPt>
 8003d48:	a808      	add	r0, sp, #32
 8003d4a:	f7fd fd0b 	bl	8001764 <GPIO_StructInit>
 8003d4e:	a908      	add	r1, sp, #32
 8003d50:	4870      	ldr	r0, [pc, #448]	; (8003f14 <main+0x380>)
 8003d52:	f88d 5023 	strb.w	r5, [sp, #35]	; 0x23
 8003d56:	f8ad 9020 	strh.w	r9, [sp, #32]
 8003d5a:	f7fd fc47 	bl	80015ec <GPIO_Init>
 8003d5e:	a83f      	add	r0, sp, #252	; 0xfc
 8003d60:	f7fd fbb0 	bl	80014c4 <DMA_StructInit>
 8003d64:	2380      	movs	r3, #128	; 0x80
 8003d66:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003d6a:	2601      	movs	r6, #1
 8003d6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d70:	9344      	str	r3, [sp, #272]	; 0x110
 8003d72:	2320      	movs	r3, #32
 8003d74:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8003f1c <main+0x388>
 8003d78:	a93f      	add	r1, sp, #252	; 0xfc
 8003d7a:	9046      	str	r0, [sp, #280]	; 0x118
 8003d7c:	4866      	ldr	r0, [pc, #408]	; (8003f18 <main+0x384>)
 8003d7e:	f8cd e0fc 	str.w	lr, [sp, #252]	; 0xfc
 8003d82:	9347      	str	r3, [sp, #284]	; 0x11c
 8003d84:	9245      	str	r2, [sp, #276]	; 0x114
 8003d86:	f8cd a100 	str.w	sl, [sp, #256]	; 0x100
 8003d8a:	9541      	str	r5, [sp, #260]	; 0x104
 8003d8c:	f8df a190 	ldr.w	sl, [pc, #400]	; 8003f20 <main+0x38c>
 8003d90:	f8cd 8108 	str.w	r8, [sp, #264]	; 0x108
 8003d94:	9548      	str	r5, [sp, #288]	; 0x120
 8003d96:	f7fd fb57 	bl	8001448 <DMA_Init>
 8003d9a:	4631      	mov	r1, r6
 8003d9c:	485e      	ldr	r0, [pc, #376]	; (8003f18 <main+0x384>)
 8003d9e:	f7fd fbbb 	bl	8001518 <DMA_Cmd>
 8003da2:	a83a      	add	r0, sp, #232	; 0xe8
 8003da4:	f7fd fa0c 	bl	80011c0 <ADC_StructInit>
 8003da8:	4650      	mov	r0, sl
 8003daa:	a93a      	add	r1, sp, #232	; 0xe8
 8003dac:	f88d 80f8 	strb.w	r8, [sp, #248]	; 0xf8
 8003db0:	f88d 60ed 	strb.w	r6, [sp, #237]	; 0xed
 8003db4:	f88d 60ec 	strb.w	r6, [sp, #236]	; 0xec
 8003db8:	f7fd f9b0 	bl	800111c <ADC_Init>
 8003dbc:	4650      	mov	r0, sl
 8003dbe:	4632      	mov	r2, r6
 8003dc0:	4629      	mov	r1, r5
 8003dc2:	2307      	movs	r3, #7
 8003dc4:	f7fd fa77 	bl	80012b6 <ADC_RegularChannelConfig>
 8003dc8:	4642      	mov	r2, r8
 8003dca:	4650      	mov	r0, sl
 8003dcc:	4631      	mov	r1, r6
 8003dce:	2307      	movs	r3, #7
 8003dd0:	f7fd fa71 	bl	80012b6 <ADC_RegularChannelConfig>
 8003dd4:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003dd8:	4650      	mov	r0, sl
 8003dda:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8003dde:	f8ca 3008 	str.w	r3, [sl, #8]
 8003de2:	4631      	mov	r1, r6
 8003de4:	f7fd fa22 	bl	800122c <ADC_DMACmd>
 8003de8:	4650      	mov	r0, sl
 8003dea:	4631      	mov	r1, r6
 8003dec:	f7fd fa03 	bl	80011f6 <ADC_Cmd>
 8003df0:	4631      	mov	r1, r6
 8003df2:	4650      	mov	r0, sl
 8003df4:	f7fd fa44 	bl	8001280 <ADC_SoftwareStartConvCmd>
 8003df8:	4650      	mov	r0, sl
 8003dfa:	f7fd fa32 	bl	8001262 <ADC_StartCalibration>
 8003dfe:	a808      	add	r0, sp, #32
 8003e00:	f7fd fcb0 	bl	8001764 <GPIO_StructInit>
 8003e04:	2240      	movs	r2, #64	; 0x40
 8003e06:	2348      	movs	r3, #72	; 0x48
 8003e08:	a908      	add	r1, sp, #32
 8003e0a:	4842      	ldr	r0, [pc, #264]	; (8003f14 <main+0x380>)
 8003e0c:	f8ad 2020 	strh.w	r2, [sp, #32]
 8003e10:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8003e14:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 8003e18:	f7fd fbe8 	bl	80015ec <GPIO_Init>
 8003e1c:	a80f      	add	r0, sp, #60	; 0x3c
 8003e1e:	f7fd ff6e 	bl	8001cfe <TIM_ICStructInit>
 8003e22:	230f      	movs	r3, #15
 8003e24:	a90f      	add	r1, sp, #60	; 0x3c
 8003e26:	4834      	ldr	r0, [pc, #208]	; (8003ef8 <main+0x364>)
 8003e28:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8003e2c:	f8ad 503c 	strh.w	r5, [sp, #60]	; 0x3c
 8003e30:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
 8003e34:	f8ad 503e 	strh.w	r5, [sp, #62]	; 0x3e
 8003e38:	f7fd fef4 	bl	8001c24 <TIM_ICInit>
 8003e3c:	a812      	add	r0, sp, #72	; 0x48
 8003e3e:	f7ff fbff 	bl	8003640 <_ZN22CSTM32F10xInputCaptureC1Ev>
 8003e42:	462a      	mov	r2, r5
 8003e44:	492c      	ldr	r1, [pc, #176]	; (8003ef8 <main+0x364>)
 8003e46:	a812      	add	r0, sp, #72	; 0x48
 8003e48:	f7ff fbf6 	bl	8003638 <_ZN22CSTM32F10xInputCapture4InitEP11TIM_TypeDeft>
 8003e4c:	a808      	add	r0, sp, #32
 8003e4e:	f7fd fc89 	bl	8001764 <GPIO_StructInit>
 8003e52:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003e56:	a908      	add	r1, sp, #32
 8003e58:	482a      	ldr	r0, [pc, #168]	; (8003f04 <main+0x370>)
 8003e5a:	f8ad 3020 	strh.w	r3, [sp, #32]
 8003e5e:	f88d b023 	strb.w	fp, [sp, #35]	; 0x23
 8003e62:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 8003e66:	f7fd fbc1 	bl	80015ec <GPIO_Init>
 8003e6a:	a808      	add	r0, sp, #32
 8003e6c:	f7fd fc7a 	bl	8001764 <GPIO_StructInit>
 8003e70:	f04f 0a10 	mov.w	sl, #16
 8003e74:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8003e78:	a908      	add	r1, sp, #32
 8003e7a:	f10d 0b84 	add.w	fp, sp, #132	; 0x84
 8003e7e:	4821      	ldr	r0, [pc, #132]	; (8003f04 <main+0x370>)
 8003e80:	f8ad 3020 	strh.w	r3, [sp, #32]
 8003e84:	f88d a023 	strb.w	sl, [sp, #35]	; 0x23
 8003e88:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 8003e8c:	f7fd fbae 	bl	80015ec <GPIO_Init>
 8003e90:	4658      	mov	r0, fp
 8003e92:	f7ff fb77 	bl	8003584 <_ZN14CSTM32F10xGpioC1Ev>
 8003e96:	220e      	movs	r2, #14
 8003e98:	491a      	ldr	r1, [pc, #104]	; (8003f04 <main+0x370>)
 8003e9a:	4658      	mov	r0, fp
 8003e9c:	f7ff fb64 	bl	8003568 <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh>
 8003ea0:	a825      	add	r0, sp, #148	; 0x94
 8003ea2:	f7ff fb6f 	bl	8003584 <_ZN14CSTM32F10xGpioC1Ev>
 8003ea6:	220c      	movs	r2, #12
 8003ea8:	4916      	ldr	r1, [pc, #88]	; (8003f04 <main+0x370>)
 8003eaa:	a825      	add	r0, sp, #148	; 0x94
 8003eac:	f7ff fb5c 	bl	8003568 <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh>
 8003eb0:	a808      	add	r0, sp, #32
 8003eb2:	f7fd fc57 	bl	8001764 <GPIO_StructInit>
 8003eb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003eba:	a908      	add	r1, sp, #32
 8003ebc:	4815      	ldr	r0, [pc, #84]	; (8003f14 <main+0x380>)
 8003ebe:	f8ad 3020 	strh.w	r3, [sp, #32]
 8003ec2:	f88d a023 	strb.w	sl, [sp, #35]	; 0x23
 8003ec6:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 8003eca:	f7fd fb8f 	bl	80015ec <GPIO_Init>
 8003ece:	a829      	add	r0, sp, #164	; 0xa4
 8003ed0:	f7ff fb58 	bl	8003584 <_ZN14CSTM32F10xGpioC1Ev>
 8003ed4:	f10d 0ab4 	add.w	sl, sp, #180	; 0xb4
 8003ed8:	2209      	movs	r2, #9
 8003eda:	490e      	ldr	r1, [pc, #56]	; (8003f14 <main+0x380>)
 8003edc:	a829      	add	r0, sp, #164	; 0xa4
 8003ede:	f7ff fb43 	bl	8003568 <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh>
 8003ee2:	4650      	mov	r0, sl
 8003ee4:	f7ff fb4e 	bl	8003584 <_ZN14CSTM32F10xGpioC1Ev>
 8003ee8:	4650      	mov	r0, sl
 8003eea:	2208      	movs	r2, #8
 8003eec:	4909      	ldr	r1, [pc, #36]	; (8003f14 <main+0x380>)
 8003eee:	f7ff fb3b 	bl	8003568 <_ZN14CSTM32F10xGpio4InitEP12GPIO_TypeDefh>
 8003ef2:	e017      	b.n	8003f24 <main+0x390>
 8003ef4:	00044003 	.word	0x00044003
 8003ef8:	40000400 	.word	0x40000400
 8003efc:	40011000 	.word	0x40011000
 8003f00:	200006a8 	.word	0x200006a8
 8003f04:	40010c00 	.word	0x40010c00
 8003f08:	40004804 	.word	0x40004804
 8003f0c:	40020030 	.word	0x40020030
 8003f10:	40004800 	.word	0x40004800
 8003f14:	40010800 	.word	0x40010800
 8003f18:	40020008 	.word	0x40020008
 8003f1c:	4001244c 	.word	0x4001244c
 8003f20:	40012400 	.word	0x40012400
 8003f24:	a857      	add	r0, sp, #348	; 0x15c
 8003f26:	f7ff faf5 	bl	8003514 <_ZN13CSTM32F10xDMAC1Ev>
 8003f2a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003f2e:	462b      	mov	r3, r5
 8003f30:	49a6      	ldr	r1, [pc, #664]	; (80041cc <main+0x638>)
 8003f32:	a857      	add	r0, sp, #348	; 0x15c
 8003f34:	9200      	str	r2, [sp, #0]
 8003f36:	4aa6      	ldr	r2, [pc, #664]	; (80041d0 <main+0x63c>)
 8003f38:	f7ff fa6a 	bl	8003410 <_ZN13CSTM32F10xDMA4InitEP11DMA_TypeDefP19DMA_Channel_TypeDefmm>
 8003f3c:	a835      	add	r0, sp, #212	; 0xd4
 8003f3e:	f7fd fd8e 	bl	8001a5e <SPI_StructInit>
 8003f42:	4ba4      	ldr	r3, [pc, #656]	; (80041d4 <main+0x640>)
 8003f44:	4aa4      	ldr	r2, [pc, #656]	; (80041d8 <main+0x644>)
 8003f46:	a935      	add	r1, sp, #212	; 0xd4
 8003f48:	48a4      	ldr	r0, [pc, #656]	; (80041dc <main+0x648>)
 8003f4a:	f8cd 30de 	str.w	r3, [sp, #222]	; 0xde
 8003f4e:	9235      	str	r2, [sp, #212]	; 0xd4
 8003f50:	f7fd fd42 	bl	80019d8 <SPI_Init>
 8003f54:	4632      	mov	r2, r6
 8003f56:	4641      	mov	r1, r8
 8003f58:	48a0      	ldr	r0, [pc, #640]	; (80041dc <main+0x648>)
 8003f5a:	f7fd fdc3 	bl	8001ae4 <SPI_I2S_DMACmd>
 8003f5e:	4631      	mov	r1, r6
 8003f60:	489e      	ldr	r0, [pc, #632]	; (80041dc <main+0x648>)
 8003f62:	f7fd fda0 	bl	8001aa6 <SPI_Cmd>
 8003f66:	a912      	add	r1, sp, #72	; 0x48
 8003f68:	f504 7019 	add.w	r0, r4, #612	; 0x264
 8003f6c:	f7ff fcbc 	bl	80038e8 <_ZN17CACFrequencyMeter4InitEP13IInputCapture>
 8003f70:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
 8003f74:	499a      	ldr	r1, [pc, #616]	; (80041e0 <main+0x64c>)
 8003f76:	f7fe fe69 	bl	8002c4c <_ZN3DMD10SelectFontEPKh>
 8003f7a:	2314      	movs	r3, #20
 8003f7c:	f8cd a010 	str.w	sl, [sp, #16]
 8003f80:	f04f 0a00 	mov.w	sl, #0
 8003f84:	9306      	str	r3, [sp, #24]
 8003f86:	ab29      	add	r3, sp, #164	; 0xa4
 8003f88:	9303      	str	r3, [sp, #12]
 8003f8a:	ab25      	add	r3, sp, #148	; 0x94
 8003f8c:	9302      	str	r3, [sp, #8]
 8003f8e:	ab57      	add	r3, sp, #348	; 0x15c
 8003f90:	4632      	mov	r2, r6
 8003f92:	9701      	str	r7, [sp, #4]
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	4641      	mov	r1, r8
 8003f98:	4b90      	ldr	r3, [pc, #576]	; (80041dc <main+0x648>)
 8003f9a:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
 8003f9e:	f8cd b014 	str.w	fp, [sp, #20]
 8003fa2:	f7fe fba7 	bl	80026f4 <_ZN3DMD4InitEhhP11SPI_TypeDefP4IDmaP6ITimerP5IGpioS7_S7_S7_t>
 8003fa6:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
 8003faa:	498e      	ldr	r1, [pc, #568]	; (80041e4 <main+0x650>)
 8003fac:	f7fe fe3a 	bl	8002c24 <_ZN3DMD12SetBrighnessEf>
 8003fb0:	ab1d      	add	r3, sp, #116	; 0x74
 8003fb2:	4639      	mov	r1, r7
 8003fb4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003fb8:	63a3      	str	r3, [r4, #56]	; 0x38
 8003fba:	6367      	str	r7, [r4, #52]	; 0x34
 8003fbc:	f7ff fcc4 	bl	8003948 <_ZN8CTimeout4InitEP6ITimer>
 8003fc0:	ab1f      	add	r3, sp, #124	; 0x7c
 8003fc2:	4639      	mov	r1, r7
 8003fc4:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8003fc8:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8003fcc:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
 8003fd0:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
 8003fd4:	f8a4 506e 	strh.w	r5, [r4, #110]	; 0x6e
 8003fd8:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
 8003fdc:	f8c4 a03c 	str.w	sl, [r4, #60]	; 0x3c
 8003fe0:	f7ff fcb2 	bl	8003948 <_ZN8CTimeout4InitEP6ITimer>
 8003fe4:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
 8003fe8:	9700      	str	r7, [sp, #0]
 8003fea:	f104 0218 	add.w	r2, r4, #24
 8003fee:	f504 7119 	add.w	r1, r4, #612	; 0x264
 8003ff2:	f504 7011 	add.w	r0, r4, #580	; 0x244
 8003ff6:	f884 509c 	strb.w	r5, [r4, #156]	; 0x9c
 8003ffa:	f8a4 50c6 	strh.w	r5, [r4, #198]	; 0xc6
 8003ffe:	f8c4 a094 	str.w	sl, [r4, #148]	; 0x94
 8004002:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 8004006:	f7fe ffff 	bl	8003008 <_ZN13CACDisplayDmd4InitEP17CACFrequencyMeterP12CAnalogInputP3DMDP6ITimer>
 800400a:	463a      	mov	r2, r7
 800400c:	a9b7      	add	r1, sp, #732	; 0x2dc
 800400e:	f504 701e 	add.w	r0, r4, #632	; 0x278
 8004012:	f7fe fa6b 	bl	80024ec <_ZN11CSerialPort4InitEP6IUsartP6ITimer>
 8004016:	4629      	mov	r1, r5
 8004018:	f504 701e 	add.w	r0, r4, #632	; 0x278
 800401c:	4a72      	ldr	r2, [pc, #456]	; (80041e8 <main+0x654>)
 800401e:	f7fe fa75 	bl	800250c <_ZN11CSerialPort11AddFunctionEhPFvPcS0_E>
 8004022:	4631      	mov	r1, r6
 8004024:	f504 701e 	add.w	r0, r4, #632	; 0x278
 8004028:	4a70      	ldr	r2, [pc, #448]	; (80041ec <main+0x658>)
 800402a:	f7fe fa6f 	bl	800250c <_ZN11CSerialPort11AddFunctionEhPFvPcS0_E>
 800402e:	4641      	mov	r1, r8
 8004030:	f504 701e 	add.w	r0, r4, #632	; 0x278
 8004034:	4a6e      	ldr	r2, [pc, #440]	; (80041f0 <main+0x65c>)
 8004036:	f7fe fa69 	bl	800250c <_ZN11CSerialPort11AddFunctionEhPFvPcS0_E>
 800403a:	4649      	mov	r1, r9
 800403c:	f504 701e 	add.w	r0, r4, #632	; 0x278
 8004040:	4a6c      	ldr	r2, [pc, #432]	; (80041f4 <main+0x660>)
 8004042:	f7fe fa63 	bl	800250c <_ZN11CSerialPort11AddFunctionEhPFvPcS0_E>
 8004046:	2104      	movs	r1, #4
 8004048:	f504 701e 	add.w	r0, r4, #632	; 0x278
 800404c:	4a6a      	ldr	r2, [pc, #424]	; (80041f8 <main+0x664>)
 800404e:	f7fe fa5d 	bl	800250c <_ZN11CSerialPort11AddFunctionEhPFvPcS0_E>
 8004052:	4a6a      	ldr	r2, [pc, #424]	; (80041fc <main+0x668>)
 8004054:	2105      	movs	r1, #5
 8004056:	f504 701e 	add.w	r0, r4, #632	; 0x278
 800405a:	f7fe fa57 	bl	800250c <_ZN11CSerialPort11AddFunctionEhPFvPcS0_E>
 800405e:	a831      	add	r0, sp, #196	; 0xc4
 8004060:	f7ff fca0 	bl	80039a4 <_ZN8CTimeoutC1Ev>
 8004064:	4639      	mov	r1, r7
 8004066:	a831      	add	r0, sp, #196	; 0xc4
 8004068:	f7ff fc6e 	bl	8003948 <_ZN8CTimeout4InitEP6ITimer>
 800406c:	a831      	add	r0, sp, #196	; 0xc4
 800406e:	f242 7110 	movw	r1, #10000	; 0x2710
 8004072:	f7ff fc75 	bl	8003960 <_ZN8CTimeout9SetExpiryEt>
 8004076:	f104 07d4 	add.w	r7, r4, #212	; 0xd4
 800407a:	a8b7      	add	r0, sp, #732	; 0x2dc
 800407c:	f7ff fbc0 	bl	8003800 <_ZN15CSTM32F10xUSART7ExecuteEv>
 8004080:	485f      	ldr	r0, [pc, #380]	; (8004200 <main+0x66c>)
 8004082:	f7fe fa4b 	bl	800251c <_ZN11CSerialPort7ExecuteEv>
 8004086:	485f      	ldr	r0, [pc, #380]	; (8004204 <main+0x670>)
 8004088:	f7ff fc30 	bl	80038ec <_ZN17CACFrequencyMeter7ExecuteEv>
 800408c:	2601      	movs	r6, #1
 800408e:	4d5e      	ldr	r5, [pc, #376]	; (8004208 <main+0x674>)
 8004090:	692b      	ldr	r3, [r5, #16]
 8004092:	b12b      	cbz	r3, 80040a0 <main+0x50c>
 8004094:	4628      	mov	r0, r5
 8004096:	f7ff fc6f 	bl	8003978 <_ZN8CTimeout10HasElapsedEv>
 800409a:	4680      	mov	r8, r0
 800409c:	2800      	cmp	r0, #0
 800409e:	d131      	bne.n	8004104 <main+0x570>
 80040a0:	3558      	adds	r5, #88	; 0x58
 80040a2:	42bd      	cmp	r5, r7
 80040a4:	d1f4      	bne.n	8004090 <main+0x4fc>
 80040a6:	4859      	ldr	r0, [pc, #356]	; (800420c <main+0x678>)
 80040a8:	f7fe ffc0 	bl	800302c <_ZN13CACDisplayDmd7ExecuteEv>
 80040ac:	4858      	ldr	r0, [pc, #352]	; (8004210 <main+0x67c>)
 80040ae:	f7fe fcbb 	bl	8002a28 <_ZN3DMD7ExecuteEv>
 80040b2:	4858      	ldr	r0, [pc, #352]	; (8004214 <main+0x680>)
 80040b4:	f7ff f870 	bl	8003198 <_ZN10CHeartBeat7ExecuteEv>
 80040b8:	a831      	add	r0, sp, #196	; 0xc4
 80040ba:	f7ff fc5d 	bl	8003978 <_ZN8CTimeout10HasElapsedEv>
 80040be:	2800      	cmp	r0, #0
 80040c0:	d0db      	beq.n	800407a <main+0x4e6>
 80040c2:	a831      	add	r0, sp, #196	; 0xc4
 80040c4:	f7ff fc42 	bl	800394c <_ZN8CTimeout5ResetEv>
 80040c8:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 80040cc:	f7fc fde8 	bl	8000ca0 <__aeabi_ui2f>
 80040d0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80040d4:	4605      	mov	r5, r0
 80040d6:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
 80040da:	b90b      	cbnz	r3, 80040e0 <main+0x54c>
 80040dc:	f8b4 006e 	ldrh.w	r0, [r4, #110]	; 0x6e
 80040e0:	f7fc fdde 	bl	8000ca0 <__aeabi_ui2f>
 80040e4:	4601      	mov	r1, r0
 80040e6:	4628      	mov	r0, r5
 80040e8:	f7fc fee6 	bl	8000eb8 <__aeabi_fdiv>
 80040ec:	f7fc fff6 	bl	80010dc <__aeabi_f2uiz>
 80040f0:	4949      	ldr	r1, [pc, #292]	; (8004218 <main+0x684>)
 80040f2:	b282      	uxth	r2, r0
 80040f4:	a84a      	add	r0, sp, #296	; 0x128
 80040f6:	f000 fa7e 	bl	80045f6 <siprintf>
 80040fa:	a94a      	add	r1, sp, #296	; 0x128
 80040fc:	a8b7      	add	r0, sp, #732	; 0x2dc
 80040fe:	f7ff faf1 	bl	80036e4 <_ZN15CSTM32F10xUSART5WriteEPKc>
 8004102:	e7ba      	b.n	800407a <main+0x4e6>
 8004104:	4628      	mov	r0, r5
 8004106:	f7ff fc21 	bl	800394c <_ZN8CTimeout5ResetEv>
 800410a:	6968      	ldr	r0, [r5, #20]
 800410c:	f105 0918 	add.w	r9, r5, #24
 8004110:	6803      	ldr	r3, [r0, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4798      	blx	r3
 8004116:	f895 a020 	ldrb.w	sl, [r5, #32]
 800411a:	f1ba 0f00 	cmp.w	sl, #0
 800411e:	d129      	bne.n	8004174 <main+0x5e0>
 8004120:	f8b5 204a 	ldrh.w	r2, [r5, #74]	; 0x4a
 8004124:	f8b5 c01e 	ldrh.w	ip, [r5, #30]
 8004128:	1c53      	adds	r3, r2, #1
 800412a:	fb93 f1fc 	sdiv	r1, r3, ip
 800412e:	fb0c 3111 	mls	r1, ip, r1, r3
 8004132:	eb09 0342 	add.w	r3, r9, r2, lsl #1
 8004136:	b28a      	uxth	r2, r1
 8004138:	8158      	strh	r0, [r3, #10]
 800413a:	46e6      	mov	lr, ip
 800413c:	f8a5 204a 	strh.w	r2, [r5, #74]	; 0x4a
 8004140:	bbc1      	cbnz	r1, 80041b4 <main+0x620>
 8004142:	460a      	mov	r2, r1
 8004144:	f10e 33ff 	add.w	r3, lr, #4294967295
 8004148:	b29b      	uxth	r3, r3
 800414a:	4563      	cmp	r3, ip
 800414c:	f885 6020 	strb.w	r6, [r5, #32]
 8004150:	f04f 0100 	mov.w	r1, #0
 8004154:	dc2c      	bgt.n	80041b0 <main+0x61c>
 8004156:	fb01 3308 	mla	r3, r1, r8, r3
 800415a:	fb93 f1fc 	sdiv	r1, r3, ip
 800415e:	fb0c 3311 	mls	r3, ip, r1, r3
 8004162:	eb09 0943 	add.w	r9, r9, r3, lsl #1
 8004166:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 800416a:	8bab      	ldrh	r3, [r5, #28]
 800416c:	1a9a      	subs	r2, r3, r2
 800416e:	440a      	add	r2, r1
 8004170:	83aa      	strh	r2, [r5, #28]
 8004172:	e795      	b.n	80040a0 <main+0x50c>
 8004174:	f8b5 204a 	ldrh.w	r2, [r5, #74]	; 0x4a
 8004178:	f8b5 e01e 	ldrh.w	lr, [r5, #30]
 800417c:	1c53      	adds	r3, r2, #1
 800417e:	fb92 fafe 	sdiv	sl, r2, lr
 8004182:	fb93 f1fe 	sdiv	r1, r3, lr
 8004186:	fb0e 2a1a 	mls	sl, lr, sl, r2
 800418a:	fb0e 3111 	mls	r1, lr, r1, r3
 800418e:	eb09 0a4a 	add.w	sl, r9, sl, lsl #1
 8004192:	eb09 0342 	add.w	r3, r9, r2, lsl #1
 8004196:	46f4      	mov	ip, lr
 8004198:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 800419c:	8158      	strh	r0, [r3, #10]
 800419e:	f8a5 104a 	strh.w	r1, [r5, #74]	; 0x4a
 80041a2:	2900      	cmp	r1, #0
 80041a4:	d0ce      	beq.n	8004144 <main+0x5b0>
 80041a6:	f10e 33ff 	add.w	r3, lr, #4294967295
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	4563      	cmp	r3, ip
 80041ae:	ddd2      	ble.n	8004156 <main+0x5c2>
 80041b0:	2100      	movs	r1, #0
 80041b2:	e7da      	b.n	800416a <main+0x5d6>
 80041b4:	3a01      	subs	r2, #1
 80041b6:	b293      	uxth	r3, r2
 80041b8:	4563      	cmp	r3, ip
 80041ba:	dc04      	bgt.n	80041c6 <main+0x632>
 80041bc:	428b      	cmp	r3, r1
 80041be:	da02      	bge.n	80041c6 <main+0x632>
 80041c0:	46d0      	mov	r8, sl
 80041c2:	4652      	mov	r2, sl
 80041c4:	e7c7      	b.n	8004156 <main+0x5c2>
 80041c6:	4652      	mov	r2, sl
 80041c8:	4651      	mov	r1, sl
 80041ca:	e7ce      	b.n	800416a <main+0x5d6>
 80041cc:	40020000 	.word	0x40020000
 80041d0:	40020058 	.word	0x40020058
 80041d4:	00180200 	.word	0x00180200
 80041d8:	0104c000 	.word	0x0104c000
 80041dc:	40003800 	.word	0x40003800
 80041e0:	08006cd8 	.word	0x08006cd8
 80041e4:	3f4ccccd 	.word	0x3f4ccccd
 80041e8:	080039b1 	.word	0x080039b1
 80041ec:	08003a49 	.word	0x08003a49
 80041f0:	08003ab5 	.word	0x08003ab5
 80041f4:	08003b15 	.word	0x08003b15
 80041f8:	08003a11 	.word	0x08003a11
 80041fc:	080039dd 	.word	0x080039dd
 8004200:	20000920 	.word	0x20000920
 8004204:	2000090c 	.word	0x2000090c
 8004208:	200006cc 	.word	0x200006cc
 800420c:	200008ec 	.word	0x200008ec
 8004210:	20000770 	.word	0x20000770
 8004214:	200006a8 	.word	0x200006a8
 8004218:	080071b0 	.word	0x080071b0

0800421c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800421c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004254 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004220:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004222:	e003      	b.n	800422c <LoopCopyDataInit>

08004224 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004224:	4b0c      	ldr	r3, [pc, #48]	; (8004258 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8004226:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004228:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800422a:	3104      	adds	r1, #4

0800422c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800422c:	480b      	ldr	r0, [pc, #44]	; (800425c <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800422e:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8004230:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004232:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004234:	d3f6      	bcc.n	8004224 <CopyDataInit>
	ldr	r2, =_sbss
 8004236:	4a0b      	ldr	r2, [pc, #44]	; (8004264 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8004238:	e002      	b.n	8004240 <LoopFillZerobss>

0800423a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800423a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800423c:	f842 3b04 	str.w	r3, [r2], #4

08004240 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004240:	4b09      	ldr	r3, [pc, #36]	; (8004268 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8004242:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004244:	d3f9      	bcc.n	800423a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004246:	f000 f83d 	bl	80042c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800424a:	f000 fa01 	bl	8004650 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800424e:	f7ff fca1 	bl	8003b94 <main>
	bx	lr
 8004252:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004254:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8004258:	0800743c 	.word	0x0800743c
	ldr	r0, =_sdata
 800425c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004260:	2000068c 	.word	0x2000068c
	ldr	r2, =_sbss
 8004264:	2000068c 	.word	0x2000068c
	ldr	r3, = _ebss
 8004268:	20000bf8 	.word	0x20000bf8

0800426c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800426c:	e7fe      	b.n	800426c <ADC1_2_IRQHandler>

0800426e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800426e:	b480      	push	{r7}
 8004270:	af00      	add	r7, sp, #0
}
 8004272:	bf00      	nop
 8004274:	46bd      	mov	sp, r7
 8004276:	bc80      	pop	{r7}
 8004278:	4770      	bx	lr

0800427a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800427a:	b480      	push	{r7}
 800427c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800427e:	e7fe      	b.n	800427e <HardFault_Handler+0x4>

08004280 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8004284:	e7fe      	b.n	8004284 <MemManage_Handler+0x4>

08004286 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8004286:	b480      	push	{r7}
 8004288:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800428a:	e7fe      	b.n	800428a <BusFault_Handler+0x4>

0800428c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8004290:	e7fe      	b.n	8004290 <UsageFault_Handler+0x4>

08004292 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8004292:	b480      	push	{r7}
 8004294:	af00      	add	r7, sp, #0
}
 8004296:	bf00      	nop
 8004298:	46bd      	mov	sp, r7
 800429a:	bc80      	pop	{r7}
 800429c:	4770      	bx	lr

0800429e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800429e:	b480      	push	{r7}
 80042a0:	af00      	add	r7, sp, #0
}
 80042a2:	bf00      	nop
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bc80      	pop	{r7}
 80042a8:	4770      	bx	lr

080042aa <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80042aa:	b480      	push	{r7}
 80042ac:	af00      	add	r7, sp, #0
}
 80042ae:	bf00      	nop
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bc80      	pop	{r7}
 80042b4:	4770      	bx	lr

080042b6 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80042b6:	b480      	push	{r7}
 80042b8:	af00      	add	r7, sp, #0
}
 80042ba:	bf00      	nop
 80042bc:	46bd      	mov	sp, r7
 80042be:	bc80      	pop	{r7}
 80042c0:	4770      	bx	lr
	...

080042c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80042c8:	4a15      	ldr	r2, [pc, #84]	; (8004320 <SystemInit+0x5c>)
 80042ca:	4b15      	ldr	r3, [pc, #84]	; (8004320 <SystemInit+0x5c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f043 0301 	orr.w	r3, r3, #1
 80042d2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80042d4:	4912      	ldr	r1, [pc, #72]	; (8004320 <SystemInit+0x5c>)
 80042d6:	4b12      	ldr	r3, [pc, #72]	; (8004320 <SystemInit+0x5c>)
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	4b12      	ldr	r3, [pc, #72]	; (8004324 <SystemInit+0x60>)
 80042dc:	4013      	ands	r3, r2
 80042de:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80042e0:	4a0f      	ldr	r2, [pc, #60]	; (8004320 <SystemInit+0x5c>)
 80042e2:	4b0f      	ldr	r3, [pc, #60]	; (8004320 <SystemInit+0x5c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80042ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ee:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80042f0:	4a0b      	ldr	r2, [pc, #44]	; (8004320 <SystemInit+0x5c>)
 80042f2:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <SystemInit+0x5c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042fa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80042fc:	4a08      	ldr	r2, [pc, #32]	; (8004320 <SystemInit+0x5c>)
 80042fe:	4b08      	ldr	r3, [pc, #32]	; (8004320 <SystemInit+0x5c>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004306:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8004308:	4b05      	ldr	r3, [pc, #20]	; (8004320 <SystemInit+0x5c>)
 800430a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800430e:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8004310:	f000 f80c 	bl	800432c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004314:	4b04      	ldr	r3, [pc, #16]	; (8004328 <SystemInit+0x64>)
 8004316:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800431a:	609a      	str	r2, [r3, #8]
#endif 
}
 800431c:	bf00      	nop
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40021000 	.word	0x40021000
 8004324:	f8ff0000 	.word	0xf8ff0000
 8004328:	e000ed00 	.word	0xe000ed00

0800432c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8004330:	f000 f802 	bl	8004338 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8004334:	bf00      	nop
 8004336:	bd80      	pop	{r7, pc}

08004338 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800433e:	2300      	movs	r3, #0
 8004340:	607b      	str	r3, [r7, #4]
 8004342:	2300      	movs	r3, #0
 8004344:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8004346:	4a3a      	ldr	r2, [pc, #232]	; (8004430 <SetSysClockTo72+0xf8>)
 8004348:	4b39      	ldr	r3, [pc, #228]	; (8004430 <SetSysClockTo72+0xf8>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004350:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8004352:	4b37      	ldr	r3, [pc, #220]	; (8004430 <SetSysClockTo72+0xf8>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3301      	adds	r3, #1
 8004360:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d103      	bne.n	8004370 <SetSysClockTo72+0x38>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800436e:	d1f0      	bne.n	8004352 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8004370:	4b2f      	ldr	r3, [pc, #188]	; (8004430 <SetSysClockTo72+0xf8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800437c:	2301      	movs	r3, #1
 800437e:	603b      	str	r3, [r7, #0]
 8004380:	e001      	b.n	8004386 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8004382:	2300      	movs	r3, #0
 8004384:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d14b      	bne.n	8004424 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800438c:	4a29      	ldr	r2, [pc, #164]	; (8004434 <SetSysClockTo72+0xfc>)
 800438e:	4b29      	ldr	r3, [pc, #164]	; (8004434 <SetSysClockTo72+0xfc>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f043 0310 	orr.w	r3, r3, #16
 8004396:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8004398:	4a26      	ldr	r2, [pc, #152]	; (8004434 <SetSysClockTo72+0xfc>)
 800439a:	4b26      	ldr	r3, [pc, #152]	; (8004434 <SetSysClockTo72+0xfc>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f023 0303 	bic.w	r3, r3, #3
 80043a2:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80043a4:	4a23      	ldr	r2, [pc, #140]	; (8004434 <SetSysClockTo72+0xfc>)
 80043a6:	4b23      	ldr	r3, [pc, #140]	; (8004434 <SetSysClockTo72+0xfc>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f043 0302 	orr.w	r3, r3, #2
 80043ae:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80043b0:	4a1f      	ldr	r2, [pc, #124]	; (8004430 <SetSysClockTo72+0xf8>)
 80043b2:	4b1f      	ldr	r3, [pc, #124]	; (8004430 <SetSysClockTo72+0xf8>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80043b8:	4a1d      	ldr	r2, [pc, #116]	; (8004430 <SetSysClockTo72+0xf8>)
 80043ba:	4b1d      	ldr	r3, [pc, #116]	; (8004430 <SetSysClockTo72+0xf8>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80043c0:	4a1b      	ldr	r2, [pc, #108]	; (8004430 <SetSysClockTo72+0xf8>)
 80043c2:	4b1b      	ldr	r3, [pc, #108]	; (8004430 <SetSysClockTo72+0xf8>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043ca:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80043cc:	4a18      	ldr	r2, [pc, #96]	; (8004430 <SetSysClockTo72+0xf8>)
 80043ce:	4b18      	ldr	r3, [pc, #96]	; (8004430 <SetSysClockTo72+0xf8>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80043d6:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80043d8:	4a15      	ldr	r2, [pc, #84]	; (8004430 <SetSysClockTo72+0xf8>)
 80043da:	4b15      	ldr	r3, [pc, #84]	; (8004430 <SetSysClockTo72+0xf8>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80043e2:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80043e4:	4a12      	ldr	r2, [pc, #72]	; (8004430 <SetSysClockTo72+0xf8>)
 80043e6:	4b12      	ldr	r3, [pc, #72]	; (8004430 <SetSysClockTo72+0xf8>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043ee:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80043f0:	bf00      	nop
 80043f2:	4b0f      	ldr	r3, [pc, #60]	; (8004430 <SetSysClockTo72+0xf8>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0f9      	beq.n	80043f2 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80043fe:	4a0c      	ldr	r2, [pc, #48]	; (8004430 <SetSysClockTo72+0xf8>)
 8004400:	4b0b      	ldr	r3, [pc, #44]	; (8004430 <SetSysClockTo72+0xf8>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f023 0303 	bic.w	r3, r3, #3
 8004408:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800440a:	4a09      	ldr	r2, [pc, #36]	; (8004430 <SetSysClockTo72+0xf8>)
 800440c:	4b08      	ldr	r3, [pc, #32]	; (8004430 <SetSysClockTo72+0xf8>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f043 0302 	orr.w	r3, r3, #2
 8004414:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8004416:	bf00      	nop
 8004418:	4b05      	ldr	r3, [pc, #20]	; (8004430 <SetSysClockTo72+0xf8>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f003 030c 	and.w	r3, r3, #12
 8004420:	2b08      	cmp	r3, #8
 8004422:	d1f9      	bne.n	8004418 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	bc80      	pop	{r7}
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	40021000 	.word	0x40021000
 8004434:	40022000 	.word	0x40022000

08004438 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8004438:	b480      	push	{r7}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
	int div = 1;
 8004444:	2301      	movs	r3, #1
 8004446:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8004448:	e004      	b.n	8004454 <ts_itoa+0x1c>
		div *= base;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	fb02 f303 	mul.w	r3, r2, r3
 8004452:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	fbb2 f2f3 	udiv	r2, r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	429a      	cmp	r2, r3
 8004460:	d2f3      	bcs.n	800444a <ts_itoa+0x12>

	while (div != 0)
 8004462:	e029      	b.n	80044b8 <ts_itoa+0x80>
	{
		int num = d/div;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	fbb2 f3f3 	udiv	r3, r2, r3
 800446c:	613b      	str	r3, [r7, #16]
		d = d%div;
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	fbb3 f1f2 	udiv	r1, r3, r2
 8004476:	fb02 f201 	mul.w	r2, r2, r1
 800447a:	1a9b      	subs	r3, r3, r2
 800447c:	60bb      	str	r3, [r7, #8]
		div /= base;
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	fb92 f3f3 	sdiv	r3, r2, r3
 8004486:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	2b09      	cmp	r3, #9
 800448c:	dd0a      	ble.n	80044a4 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	1c59      	adds	r1, r3, #1
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	6011      	str	r1, [r2, #0]
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	b2d2      	uxtb	r2, r2
 800449c:	3237      	adds	r2, #55	; 0x37
 800449e:	b2d2      	uxtb	r2, r2
 80044a0:	701a      	strb	r2, [r3, #0]
 80044a2:	e009      	b.n	80044b8 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	1c59      	adds	r1, r3, #1
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	6011      	str	r1, [r2, #0]
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	b2d2      	uxtb	r2, r2
 80044b2:	3230      	adds	r2, #48	; 0x30
 80044b4:	b2d2      	uxtb	r2, r2
 80044b6:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1d2      	bne.n	8004464 <ts_itoa+0x2c>
	}
}
 80044be:	bf00      	nop
 80044c0:	371c      	adds	r7, #28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bc80      	pop	{r7}
 80044c6:	4770      	bx	lr

080044c8 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b088      	sub	sp, #32
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	617b      	str	r3, [r7, #20]
	while(*fmt)
 80044d8:	e07d      	b.n	80045d6 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	2b25      	cmp	r3, #37	; 0x25
 80044e0:	d171      	bne.n	80045c6 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	3301      	adds	r3, #1
 80044e6:	60bb      	str	r3, [r7, #8]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	2b64      	cmp	r3, #100	; 0x64
 80044ee:	d01e      	beq.n	800452e <ts_formatstring+0x66>
 80044f0:	2b64      	cmp	r3, #100	; 0x64
 80044f2:	dc06      	bgt.n	8004502 <ts_formatstring+0x3a>
 80044f4:	2b58      	cmp	r3, #88	; 0x58
 80044f6:	d050      	beq.n	800459a <ts_formatstring+0xd2>
 80044f8:	2b63      	cmp	r3, #99	; 0x63
 80044fa:	d00e      	beq.n	800451a <ts_formatstring+0x52>
 80044fc:	2b25      	cmp	r3, #37	; 0x25
 80044fe:	d058      	beq.n	80045b2 <ts_formatstring+0xea>
 8004500:	e05d      	b.n	80045be <ts_formatstring+0xf6>
 8004502:	2b73      	cmp	r3, #115	; 0x73
 8004504:	d02b      	beq.n	800455e <ts_formatstring+0x96>
 8004506:	2b73      	cmp	r3, #115	; 0x73
 8004508:	dc02      	bgt.n	8004510 <ts_formatstring+0x48>
 800450a:	2b69      	cmp	r3, #105	; 0x69
 800450c:	d00f      	beq.n	800452e <ts_formatstring+0x66>
 800450e:	e056      	b.n	80045be <ts_formatstring+0xf6>
 8004510:	2b75      	cmp	r3, #117	; 0x75
 8004512:	d037      	beq.n	8004584 <ts_formatstring+0xbc>
 8004514:	2b78      	cmp	r3, #120	; 0x78
 8004516:	d040      	beq.n	800459a <ts_formatstring+0xd2>
 8004518:	e051      	b.n	80045be <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	1c5a      	adds	r2, r3, #1
 800451e:	60fa      	str	r2, [r7, #12]
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	1d11      	adds	r1, r2, #4
 8004524:	6079      	str	r1, [r7, #4]
 8004526:	6812      	ldr	r2, [r2, #0]
 8004528:	b2d2      	uxtb	r2, r2
 800452a:	701a      	strb	r2, [r3, #0]
				break;
 800452c:	e047      	b.n	80045be <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	1d1a      	adds	r2, r3, #4
 8004532:	607a      	str	r2, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	2b00      	cmp	r3, #0
 800453c:	da07      	bge.n	800454e <ts_formatstring+0x86>
					{
						val *= -1;
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	425b      	negs	r3, r3
 8004542:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	1c5a      	adds	r2, r3, #1
 8004548:	60fa      	str	r2, [r7, #12]
 800454a:	222d      	movs	r2, #45	; 0x2d
 800454c:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 800454e:	69f9      	ldr	r1, [r7, #28]
 8004550:	f107 030c 	add.w	r3, r7, #12
 8004554:	220a      	movs	r2, #10
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff ff6e 	bl	8004438 <ts_itoa>
				}
				break;
 800455c:	e02f      	b.n	80045be <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	1d1a      	adds	r2, r3, #4
 8004562:	607a      	str	r2, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8004568:	e007      	b.n	800457a <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	60fa      	str	r2, [r7, #12]
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	1c51      	adds	r1, r2, #1
 8004574:	61b9      	str	r1, [r7, #24]
 8004576:	7812      	ldrb	r2, [r2, #0]
 8004578:	701a      	strb	r2, [r3, #0]
					while (*arg)
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f3      	bne.n	800456a <ts_formatstring+0xa2>
					}
				}
				break;
 8004582:	e01c      	b.n	80045be <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	1d1a      	adds	r2, r3, #4
 8004588:	607a      	str	r2, [r7, #4]
 800458a:	6819      	ldr	r1, [r3, #0]
 800458c:	f107 030c 	add.w	r3, r7, #12
 8004590:	220a      	movs	r2, #10
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff ff50 	bl	8004438 <ts_itoa>
				break;
 8004598:	e011      	b.n	80045be <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	1d1a      	adds	r2, r3, #4
 800459e:	607a      	str	r2, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4619      	mov	r1, r3
 80045a4:	f107 030c 	add.w	r3, r7, #12
 80045a8:	2210      	movs	r2, #16
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff ff44 	bl	8004438 <ts_itoa>
				break;
 80045b0:	e005      	b.n	80045be <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	1c5a      	adds	r2, r3, #1
 80045b6:	60fa      	str	r2, [r7, #12]
 80045b8:	2225      	movs	r2, #37	; 0x25
 80045ba:	701a      	strb	r2, [r3, #0]
				  break;
 80045bc:	bf00      	nop
			}
			fmt++;
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	3301      	adds	r3, #1
 80045c2:	60bb      	str	r3, [r7, #8]
 80045c4:	e007      	b.n	80045d6 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	1c5a      	adds	r2, r3, #1
 80045ca:	60fa      	str	r2, [r7, #12]
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	1c51      	adds	r1, r2, #1
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	7812      	ldrb	r2, [r2, #0]
 80045d4:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f47f af7d 	bne.w	80044da <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	461a      	mov	r2, r3
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	1ad3      	subs	r3, r2, r3
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3720      	adds	r7, #32
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 80045f6:	b40e      	push	{r1, r2, r3}
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8004600:	f107 0320 	add.w	r3, r7, #32
 8004604:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	69f9      	ldr	r1, [r7, #28]
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7ff ff5c 	bl	80044c8 <ts_formatstring>
 8004610:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8004612:	68fb      	ldr	r3, [r7, #12]
}
 8004614:	4618      	mov	r0, r3
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800461e:	b003      	add	sp, #12
 8004620:	4770      	bx	lr
	...

08004624 <_ZdlPv>:
 8004624:	f000 b840 	b.w	80046a8 <free>

08004628 <__aeabi_atexit>:
 8004628:	460b      	mov	r3, r1
 800462a:	4601      	mov	r1, r0
 800462c:	4618      	mov	r0, r3
 800462e:	f000 b808 	b.w	8004642 <__cxa_atexit>
 8004632:	bf00      	nop

08004634 <atof>:
 8004634:	2100      	movs	r1, #0
 8004636:	f001 b897 	b.w	8005768 <strtod>

0800463a <atoi>:
 800463a:	220a      	movs	r2, #10
 800463c:	2100      	movs	r1, #0
 800463e:	f001 b97b 	b.w	8005938 <strtol>

08004642 <__cxa_atexit>:
 8004642:	4613      	mov	r3, r2
 8004644:	460a      	mov	r2, r1
 8004646:	4601      	mov	r1, r0
 8004648:	2002      	movs	r0, #2
 800464a:	f001 b98b 	b.w	8005964 <__register_exitproc>
	...

08004650 <__libc_init_array>:
 8004650:	b570      	push	{r4, r5, r6, lr}
 8004652:	2500      	movs	r5, #0
 8004654:	4e0c      	ldr	r6, [pc, #48]	; (8004688 <__libc_init_array+0x38>)
 8004656:	4c0d      	ldr	r4, [pc, #52]	; (800468c <__libc_init_array+0x3c>)
 8004658:	1ba4      	subs	r4, r4, r6
 800465a:	10a4      	asrs	r4, r4, #2
 800465c:	42a5      	cmp	r5, r4
 800465e:	d109      	bne.n	8004674 <__libc_init_array+0x24>
 8004660:	f002 fa90 	bl	8006b84 <_init>
 8004664:	2500      	movs	r5, #0
 8004666:	4e0a      	ldr	r6, [pc, #40]	; (8004690 <__libc_init_array+0x40>)
 8004668:	4c0a      	ldr	r4, [pc, #40]	; (8004694 <__libc_init_array+0x44>)
 800466a:	1ba4      	subs	r4, r4, r6
 800466c:	10a4      	asrs	r4, r4, #2
 800466e:	42a5      	cmp	r5, r4
 8004670:	d105      	bne.n	800467e <__libc_init_array+0x2e>
 8004672:	bd70      	pop	{r4, r5, r6, pc}
 8004674:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004678:	4798      	blx	r3
 800467a:	3501      	adds	r5, #1
 800467c:	e7ee      	b.n	800465c <__libc_init_array+0xc>
 800467e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004682:	4798      	blx	r3
 8004684:	3501      	adds	r5, #1
 8004686:	e7f2      	b.n	800466e <__libc_init_array+0x1e>
 8004688:	08007430 	.word	0x08007430
 800468c:	08007430 	.word	0x08007430
 8004690:	08007430 	.word	0x08007430
 8004694:	08007438 	.word	0x08007438

08004698 <malloc>:
 8004698:	4b02      	ldr	r3, [pc, #8]	; (80046a4 <malloc+0xc>)
 800469a:	4601      	mov	r1, r0
 800469c:	6818      	ldr	r0, [r3, #0]
 800469e:	f000 b80b 	b.w	80046b8 <_malloc_r>
 80046a2:	bf00      	nop
 80046a4:	2000042c 	.word	0x2000042c

080046a8 <free>:
 80046a8:	4b02      	ldr	r3, [pc, #8]	; (80046b4 <free+0xc>)
 80046aa:	4601      	mov	r1, r0
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	f001 ba29 	b.w	8005b04 <_free_r>
 80046b2:	bf00      	nop
 80046b4:	2000042c 	.word	0x2000042c

080046b8 <_malloc_r>:
 80046b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046bc:	f101 040b 	add.w	r4, r1, #11
 80046c0:	2c16      	cmp	r4, #22
 80046c2:	4681      	mov	r9, r0
 80046c4:	d907      	bls.n	80046d6 <_malloc_r+0x1e>
 80046c6:	f034 0407 	bics.w	r4, r4, #7
 80046ca:	d505      	bpl.n	80046d8 <_malloc_r+0x20>
 80046cc:	230c      	movs	r3, #12
 80046ce:	f8c9 3000 	str.w	r3, [r9]
 80046d2:	2600      	movs	r6, #0
 80046d4:	e131      	b.n	800493a <_malloc_r+0x282>
 80046d6:	2410      	movs	r4, #16
 80046d8:	428c      	cmp	r4, r1
 80046da:	d3f7      	bcc.n	80046cc <_malloc_r+0x14>
 80046dc:	4648      	mov	r0, r9
 80046de:	f000 f9ff 	bl	8004ae0 <__malloc_lock>
 80046e2:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80046e6:	4d9b      	ldr	r5, [pc, #620]	; (8004954 <_malloc_r+0x29c>)
 80046e8:	d236      	bcs.n	8004758 <_malloc_r+0xa0>
 80046ea:	f104 0208 	add.w	r2, r4, #8
 80046ee:	442a      	add	r2, r5
 80046f0:	6856      	ldr	r6, [r2, #4]
 80046f2:	f1a2 0108 	sub.w	r1, r2, #8
 80046f6:	428e      	cmp	r6, r1
 80046f8:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 80046fc:	d102      	bne.n	8004704 <_malloc_r+0x4c>
 80046fe:	68d6      	ldr	r6, [r2, #12]
 8004700:	42b2      	cmp	r2, r6
 8004702:	d010      	beq.n	8004726 <_malloc_r+0x6e>
 8004704:	6873      	ldr	r3, [r6, #4]
 8004706:	68f2      	ldr	r2, [r6, #12]
 8004708:	68b1      	ldr	r1, [r6, #8]
 800470a:	f023 0303 	bic.w	r3, r3, #3
 800470e:	60ca      	str	r2, [r1, #12]
 8004710:	4433      	add	r3, r6
 8004712:	6091      	str	r1, [r2, #8]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	f042 0201 	orr.w	r2, r2, #1
 800471a:	605a      	str	r2, [r3, #4]
 800471c:	4648      	mov	r0, r9
 800471e:	f000 f9e5 	bl	8004aec <__malloc_unlock>
 8004722:	3608      	adds	r6, #8
 8004724:	e109      	b.n	800493a <_malloc_r+0x282>
 8004726:	3302      	adds	r3, #2
 8004728:	4a8b      	ldr	r2, [pc, #556]	; (8004958 <_malloc_r+0x2a0>)
 800472a:	692e      	ldr	r6, [r5, #16]
 800472c:	4611      	mov	r1, r2
 800472e:	4296      	cmp	r6, r2
 8004730:	d06d      	beq.n	800480e <_malloc_r+0x156>
 8004732:	6870      	ldr	r0, [r6, #4]
 8004734:	f020 0003 	bic.w	r0, r0, #3
 8004738:	1b07      	subs	r7, r0, r4
 800473a:	2f0f      	cmp	r7, #15
 800473c:	dd47      	ble.n	80047ce <_malloc_r+0x116>
 800473e:	1933      	adds	r3, r6, r4
 8004740:	f044 0401 	orr.w	r4, r4, #1
 8004744:	6074      	str	r4, [r6, #4]
 8004746:	616b      	str	r3, [r5, #20]
 8004748:	612b      	str	r3, [r5, #16]
 800474a:	60da      	str	r2, [r3, #12]
 800474c:	609a      	str	r2, [r3, #8]
 800474e:	f047 0201 	orr.w	r2, r7, #1
 8004752:	605a      	str	r2, [r3, #4]
 8004754:	5037      	str	r7, [r6, r0]
 8004756:	e7e1      	b.n	800471c <_malloc_r+0x64>
 8004758:	0a63      	lsrs	r3, r4, #9
 800475a:	d02a      	beq.n	80047b2 <_malloc_r+0xfa>
 800475c:	2b04      	cmp	r3, #4
 800475e:	d812      	bhi.n	8004786 <_malloc_r+0xce>
 8004760:	09a3      	lsrs	r3, r4, #6
 8004762:	3338      	adds	r3, #56	; 0x38
 8004764:	1c5a      	adds	r2, r3, #1
 8004766:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800476a:	6856      	ldr	r6, [r2, #4]
 800476c:	f1a2 0008 	sub.w	r0, r2, #8
 8004770:	4286      	cmp	r6, r0
 8004772:	d006      	beq.n	8004782 <_malloc_r+0xca>
 8004774:	6872      	ldr	r2, [r6, #4]
 8004776:	f022 0203 	bic.w	r2, r2, #3
 800477a:	1b11      	subs	r1, r2, r4
 800477c:	290f      	cmp	r1, #15
 800477e:	dd1c      	ble.n	80047ba <_malloc_r+0x102>
 8004780:	3b01      	subs	r3, #1
 8004782:	3301      	adds	r3, #1
 8004784:	e7d0      	b.n	8004728 <_malloc_r+0x70>
 8004786:	2b14      	cmp	r3, #20
 8004788:	d801      	bhi.n	800478e <_malloc_r+0xd6>
 800478a:	335b      	adds	r3, #91	; 0x5b
 800478c:	e7ea      	b.n	8004764 <_malloc_r+0xac>
 800478e:	2b54      	cmp	r3, #84	; 0x54
 8004790:	d802      	bhi.n	8004798 <_malloc_r+0xe0>
 8004792:	0b23      	lsrs	r3, r4, #12
 8004794:	336e      	adds	r3, #110	; 0x6e
 8004796:	e7e5      	b.n	8004764 <_malloc_r+0xac>
 8004798:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800479c:	d802      	bhi.n	80047a4 <_malloc_r+0xec>
 800479e:	0be3      	lsrs	r3, r4, #15
 80047a0:	3377      	adds	r3, #119	; 0x77
 80047a2:	e7df      	b.n	8004764 <_malloc_r+0xac>
 80047a4:	f240 5254 	movw	r2, #1364	; 0x554
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d804      	bhi.n	80047b6 <_malloc_r+0xfe>
 80047ac:	0ca3      	lsrs	r3, r4, #18
 80047ae:	337c      	adds	r3, #124	; 0x7c
 80047b0:	e7d8      	b.n	8004764 <_malloc_r+0xac>
 80047b2:	233f      	movs	r3, #63	; 0x3f
 80047b4:	e7d6      	b.n	8004764 <_malloc_r+0xac>
 80047b6:	237e      	movs	r3, #126	; 0x7e
 80047b8:	e7d4      	b.n	8004764 <_malloc_r+0xac>
 80047ba:	2900      	cmp	r1, #0
 80047bc:	68f1      	ldr	r1, [r6, #12]
 80047be:	db04      	blt.n	80047ca <_malloc_r+0x112>
 80047c0:	68b3      	ldr	r3, [r6, #8]
 80047c2:	60d9      	str	r1, [r3, #12]
 80047c4:	608b      	str	r3, [r1, #8]
 80047c6:	18b3      	adds	r3, r6, r2
 80047c8:	e7a4      	b.n	8004714 <_malloc_r+0x5c>
 80047ca:	460e      	mov	r6, r1
 80047cc:	e7d0      	b.n	8004770 <_malloc_r+0xb8>
 80047ce:	2f00      	cmp	r7, #0
 80047d0:	616a      	str	r2, [r5, #20]
 80047d2:	612a      	str	r2, [r5, #16]
 80047d4:	db05      	blt.n	80047e2 <_malloc_r+0x12a>
 80047d6:	4430      	add	r0, r6
 80047d8:	6843      	ldr	r3, [r0, #4]
 80047da:	f043 0301 	orr.w	r3, r3, #1
 80047de:	6043      	str	r3, [r0, #4]
 80047e0:	e79c      	b.n	800471c <_malloc_r+0x64>
 80047e2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80047e6:	d244      	bcs.n	8004872 <_malloc_r+0x1ba>
 80047e8:	2201      	movs	r2, #1
 80047ea:	08c0      	lsrs	r0, r0, #3
 80047ec:	1087      	asrs	r7, r0, #2
 80047ee:	fa02 f707 	lsl.w	r7, r2, r7
 80047f2:	686a      	ldr	r2, [r5, #4]
 80047f4:	3001      	adds	r0, #1
 80047f6:	433a      	orrs	r2, r7
 80047f8:	606a      	str	r2, [r5, #4]
 80047fa:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 80047fe:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8004802:	3a08      	subs	r2, #8
 8004804:	60f2      	str	r2, [r6, #12]
 8004806:	60b7      	str	r7, [r6, #8]
 8004808:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 800480c:	60fe      	str	r6, [r7, #12]
 800480e:	2001      	movs	r0, #1
 8004810:	109a      	asrs	r2, r3, #2
 8004812:	fa00 f202 	lsl.w	r2, r0, r2
 8004816:	6868      	ldr	r0, [r5, #4]
 8004818:	4282      	cmp	r2, r0
 800481a:	f200 809f 	bhi.w	800495c <_malloc_r+0x2a4>
 800481e:	4202      	tst	r2, r0
 8004820:	d106      	bne.n	8004830 <_malloc_r+0x178>
 8004822:	f023 0303 	bic.w	r3, r3, #3
 8004826:	0052      	lsls	r2, r2, #1
 8004828:	4202      	tst	r2, r0
 800482a:	f103 0304 	add.w	r3, r3, #4
 800482e:	d0fa      	beq.n	8004826 <_malloc_r+0x16e>
 8004830:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8004834:	46e0      	mov	r8, ip
 8004836:	469e      	mov	lr, r3
 8004838:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800483c:	4546      	cmp	r6, r8
 800483e:	d153      	bne.n	80048e8 <_malloc_r+0x230>
 8004840:	f10e 0e01 	add.w	lr, lr, #1
 8004844:	f01e 0f03 	tst.w	lr, #3
 8004848:	f108 0808 	add.w	r8, r8, #8
 800484c:	d1f4      	bne.n	8004838 <_malloc_r+0x180>
 800484e:	0798      	lsls	r0, r3, #30
 8004850:	d179      	bne.n	8004946 <_malloc_r+0x28e>
 8004852:	686b      	ldr	r3, [r5, #4]
 8004854:	ea23 0302 	bic.w	r3, r3, r2
 8004858:	606b      	str	r3, [r5, #4]
 800485a:	6868      	ldr	r0, [r5, #4]
 800485c:	0052      	lsls	r2, r2, #1
 800485e:	4282      	cmp	r2, r0
 8004860:	d87c      	bhi.n	800495c <_malloc_r+0x2a4>
 8004862:	2a00      	cmp	r2, #0
 8004864:	d07a      	beq.n	800495c <_malloc_r+0x2a4>
 8004866:	4673      	mov	r3, lr
 8004868:	4202      	tst	r2, r0
 800486a:	d1e1      	bne.n	8004830 <_malloc_r+0x178>
 800486c:	3304      	adds	r3, #4
 800486e:	0052      	lsls	r2, r2, #1
 8004870:	e7fa      	b.n	8004868 <_malloc_r+0x1b0>
 8004872:	0a42      	lsrs	r2, r0, #9
 8004874:	2a04      	cmp	r2, #4
 8004876:	d815      	bhi.n	80048a4 <_malloc_r+0x1ec>
 8004878:	0982      	lsrs	r2, r0, #6
 800487a:	3238      	adds	r2, #56	; 0x38
 800487c:	1c57      	adds	r7, r2, #1
 800487e:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8004882:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8004886:	45be      	cmp	lr, r7
 8004888:	d126      	bne.n	80048d8 <_malloc_r+0x220>
 800488a:	2001      	movs	r0, #1
 800488c:	1092      	asrs	r2, r2, #2
 800488e:	fa00 f202 	lsl.w	r2, r0, r2
 8004892:	6868      	ldr	r0, [r5, #4]
 8004894:	4310      	orrs	r0, r2
 8004896:	6068      	str	r0, [r5, #4]
 8004898:	f8c6 e00c 	str.w	lr, [r6, #12]
 800489c:	60b7      	str	r7, [r6, #8]
 800489e:	f8ce 6008 	str.w	r6, [lr, #8]
 80048a2:	e7b3      	b.n	800480c <_malloc_r+0x154>
 80048a4:	2a14      	cmp	r2, #20
 80048a6:	d801      	bhi.n	80048ac <_malloc_r+0x1f4>
 80048a8:	325b      	adds	r2, #91	; 0x5b
 80048aa:	e7e7      	b.n	800487c <_malloc_r+0x1c4>
 80048ac:	2a54      	cmp	r2, #84	; 0x54
 80048ae:	d802      	bhi.n	80048b6 <_malloc_r+0x1fe>
 80048b0:	0b02      	lsrs	r2, r0, #12
 80048b2:	326e      	adds	r2, #110	; 0x6e
 80048b4:	e7e2      	b.n	800487c <_malloc_r+0x1c4>
 80048b6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80048ba:	d802      	bhi.n	80048c2 <_malloc_r+0x20a>
 80048bc:	0bc2      	lsrs	r2, r0, #15
 80048be:	3277      	adds	r2, #119	; 0x77
 80048c0:	e7dc      	b.n	800487c <_malloc_r+0x1c4>
 80048c2:	f240 5754 	movw	r7, #1364	; 0x554
 80048c6:	42ba      	cmp	r2, r7
 80048c8:	bf9a      	itte	ls
 80048ca:	0c82      	lsrls	r2, r0, #18
 80048cc:	327c      	addls	r2, #124	; 0x7c
 80048ce:	227e      	movhi	r2, #126	; 0x7e
 80048d0:	e7d4      	b.n	800487c <_malloc_r+0x1c4>
 80048d2:	68bf      	ldr	r7, [r7, #8]
 80048d4:	45be      	cmp	lr, r7
 80048d6:	d004      	beq.n	80048e2 <_malloc_r+0x22a>
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	f022 0203 	bic.w	r2, r2, #3
 80048de:	4290      	cmp	r0, r2
 80048e0:	d3f7      	bcc.n	80048d2 <_malloc_r+0x21a>
 80048e2:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 80048e6:	e7d7      	b.n	8004898 <_malloc_r+0x1e0>
 80048e8:	6870      	ldr	r0, [r6, #4]
 80048ea:	68f7      	ldr	r7, [r6, #12]
 80048ec:	f020 0003 	bic.w	r0, r0, #3
 80048f0:	eba0 0a04 	sub.w	sl, r0, r4
 80048f4:	f1ba 0f0f 	cmp.w	sl, #15
 80048f8:	dd10      	ble.n	800491c <_malloc_r+0x264>
 80048fa:	68b2      	ldr	r2, [r6, #8]
 80048fc:	1933      	adds	r3, r6, r4
 80048fe:	f044 0401 	orr.w	r4, r4, #1
 8004902:	6074      	str	r4, [r6, #4]
 8004904:	60d7      	str	r7, [r2, #12]
 8004906:	60ba      	str	r2, [r7, #8]
 8004908:	f04a 0201 	orr.w	r2, sl, #1
 800490c:	616b      	str	r3, [r5, #20]
 800490e:	612b      	str	r3, [r5, #16]
 8004910:	60d9      	str	r1, [r3, #12]
 8004912:	6099      	str	r1, [r3, #8]
 8004914:	605a      	str	r2, [r3, #4]
 8004916:	f846 a000 	str.w	sl, [r6, r0]
 800491a:	e6ff      	b.n	800471c <_malloc_r+0x64>
 800491c:	f1ba 0f00 	cmp.w	sl, #0
 8004920:	db0f      	blt.n	8004942 <_malloc_r+0x28a>
 8004922:	4430      	add	r0, r6
 8004924:	6843      	ldr	r3, [r0, #4]
 8004926:	f043 0301 	orr.w	r3, r3, #1
 800492a:	6043      	str	r3, [r0, #4]
 800492c:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8004930:	4648      	mov	r0, r9
 8004932:	60df      	str	r7, [r3, #12]
 8004934:	60bb      	str	r3, [r7, #8]
 8004936:	f000 f8d9 	bl	8004aec <__malloc_unlock>
 800493a:	4630      	mov	r0, r6
 800493c:	b003      	add	sp, #12
 800493e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004942:	463e      	mov	r6, r7
 8004944:	e77a      	b.n	800483c <_malloc_r+0x184>
 8004946:	f85c 0908 	ldr.w	r0, [ip], #-8
 800494a:	3b01      	subs	r3, #1
 800494c:	4584      	cmp	ip, r0
 800494e:	f43f af7e 	beq.w	800484e <_malloc_r+0x196>
 8004952:	e782      	b.n	800485a <_malloc_r+0x1a2>
 8004954:	20000018 	.word	0x20000018
 8004958:	20000020 	.word	0x20000020
 800495c:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8004960:	f8db 6004 	ldr.w	r6, [fp, #4]
 8004964:	f026 0603 	bic.w	r6, r6, #3
 8004968:	42b4      	cmp	r4, r6
 800496a:	d803      	bhi.n	8004974 <_malloc_r+0x2bc>
 800496c:	1b33      	subs	r3, r6, r4
 800496e:	2b0f      	cmp	r3, #15
 8004970:	f300 8095 	bgt.w	8004a9e <_malloc_r+0x3e6>
 8004974:	4a4f      	ldr	r2, [pc, #316]	; (8004ab4 <_malloc_r+0x3fc>)
 8004976:	eb0b 0306 	add.w	r3, fp, r6
 800497a:	6817      	ldr	r7, [r2, #0]
 800497c:	4a4e      	ldr	r2, [pc, #312]	; (8004ab8 <_malloc_r+0x400>)
 800497e:	3710      	adds	r7, #16
 8004980:	6811      	ldr	r1, [r2, #0]
 8004982:	4427      	add	r7, r4
 8004984:	3101      	adds	r1, #1
 8004986:	d005      	beq.n	8004994 <_malloc_r+0x2dc>
 8004988:	494c      	ldr	r1, [pc, #304]	; (8004abc <_malloc_r+0x404>)
 800498a:	3901      	subs	r1, #1
 800498c:	440f      	add	r7, r1
 800498e:	3101      	adds	r1, #1
 8004990:	4249      	negs	r1, r1
 8004992:	400f      	ands	r7, r1
 8004994:	4639      	mov	r1, r7
 8004996:	4648      	mov	r0, r9
 8004998:	9201      	str	r2, [sp, #4]
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	f000 f8ac 	bl	8004af8 <_sbrk_r>
 80049a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80049a4:	4680      	mov	r8, r0
 80049a6:	d055      	beq.n	8004a54 <_malloc_r+0x39c>
 80049a8:	9b00      	ldr	r3, [sp, #0]
 80049aa:	9a01      	ldr	r2, [sp, #4]
 80049ac:	4283      	cmp	r3, r0
 80049ae:	d901      	bls.n	80049b4 <_malloc_r+0x2fc>
 80049b0:	45ab      	cmp	fp, r5
 80049b2:	d14f      	bne.n	8004a54 <_malloc_r+0x39c>
 80049b4:	4842      	ldr	r0, [pc, #264]	; (8004ac0 <_malloc_r+0x408>)
 80049b6:	4543      	cmp	r3, r8
 80049b8:	6801      	ldr	r1, [r0, #0]
 80049ba:	4682      	mov	sl, r0
 80049bc:	eb07 0e01 	add.w	lr, r7, r1
 80049c0:	f8c0 e000 	str.w	lr, [r0]
 80049c4:	493f      	ldr	r1, [pc, #252]	; (8004ac4 <_malloc_r+0x40c>)
 80049c6:	d113      	bne.n	80049f0 <_malloc_r+0x338>
 80049c8:	420b      	tst	r3, r1
 80049ca:	d111      	bne.n	80049f0 <_malloc_r+0x338>
 80049cc:	68ab      	ldr	r3, [r5, #8]
 80049ce:	443e      	add	r6, r7
 80049d0:	f046 0601 	orr.w	r6, r6, #1
 80049d4:	605e      	str	r6, [r3, #4]
 80049d6:	4a3c      	ldr	r2, [pc, #240]	; (8004ac8 <_malloc_r+0x410>)
 80049d8:	f8da 3000 	ldr.w	r3, [sl]
 80049dc:	6811      	ldr	r1, [r2, #0]
 80049de:	428b      	cmp	r3, r1
 80049e0:	bf88      	it	hi
 80049e2:	6013      	strhi	r3, [r2, #0]
 80049e4:	4a39      	ldr	r2, [pc, #228]	; (8004acc <_malloc_r+0x414>)
 80049e6:	6811      	ldr	r1, [r2, #0]
 80049e8:	428b      	cmp	r3, r1
 80049ea:	bf88      	it	hi
 80049ec:	6013      	strhi	r3, [r2, #0]
 80049ee:	e031      	b.n	8004a54 <_malloc_r+0x39c>
 80049f0:	6810      	ldr	r0, [r2, #0]
 80049f2:	3001      	adds	r0, #1
 80049f4:	bf1b      	ittet	ne
 80049f6:	eba8 0303 	subne.w	r3, r8, r3
 80049fa:	4473      	addne	r3, lr
 80049fc:	f8c2 8000 	streq.w	r8, [r2]
 8004a00:	f8ca 3000 	strne.w	r3, [sl]
 8004a04:	f018 0007 	ands.w	r0, r8, #7
 8004a08:	bf1c      	itt	ne
 8004a0a:	f1c0 0008 	rsbne	r0, r0, #8
 8004a0e:	4480      	addne	r8, r0
 8004a10:	4b2a      	ldr	r3, [pc, #168]	; (8004abc <_malloc_r+0x404>)
 8004a12:	4447      	add	r7, r8
 8004a14:	4418      	add	r0, r3
 8004a16:	400f      	ands	r7, r1
 8004a18:	1bc7      	subs	r7, r0, r7
 8004a1a:	4639      	mov	r1, r7
 8004a1c:	4648      	mov	r0, r9
 8004a1e:	f000 f86b 	bl	8004af8 <_sbrk_r>
 8004a22:	1c43      	adds	r3, r0, #1
 8004a24:	bf04      	itt	eq
 8004a26:	4640      	moveq	r0, r8
 8004a28:	2700      	moveq	r7, #0
 8004a2a:	f8da 3000 	ldr.w	r3, [sl]
 8004a2e:	eba0 0008 	sub.w	r0, r0, r8
 8004a32:	443b      	add	r3, r7
 8004a34:	4407      	add	r7, r0
 8004a36:	f047 0701 	orr.w	r7, r7, #1
 8004a3a:	45ab      	cmp	fp, r5
 8004a3c:	f8c5 8008 	str.w	r8, [r5, #8]
 8004a40:	f8ca 3000 	str.w	r3, [sl]
 8004a44:	f8c8 7004 	str.w	r7, [r8, #4]
 8004a48:	d0c5      	beq.n	80049d6 <_malloc_r+0x31e>
 8004a4a:	2e0f      	cmp	r6, #15
 8004a4c:	d810      	bhi.n	8004a70 <_malloc_r+0x3b8>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	f8c8 3004 	str.w	r3, [r8, #4]
 8004a54:	68ab      	ldr	r3, [r5, #8]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	f022 0203 	bic.w	r2, r2, #3
 8004a5c:	4294      	cmp	r4, r2
 8004a5e:	eba2 0304 	sub.w	r3, r2, r4
 8004a62:	d801      	bhi.n	8004a68 <_malloc_r+0x3b0>
 8004a64:	2b0f      	cmp	r3, #15
 8004a66:	dc1a      	bgt.n	8004a9e <_malloc_r+0x3e6>
 8004a68:	4648      	mov	r0, r9
 8004a6a:	f000 f83f 	bl	8004aec <__malloc_unlock>
 8004a6e:	e630      	b.n	80046d2 <_malloc_r+0x1a>
 8004a70:	2205      	movs	r2, #5
 8004a72:	f8db 3004 	ldr.w	r3, [fp, #4]
 8004a76:	3e0c      	subs	r6, #12
 8004a78:	f026 0607 	bic.w	r6, r6, #7
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	4333      	orrs	r3, r6
 8004a82:	f8cb 3004 	str.w	r3, [fp, #4]
 8004a86:	2e0f      	cmp	r6, #15
 8004a88:	eb0b 0306 	add.w	r3, fp, r6
 8004a8c:	605a      	str	r2, [r3, #4]
 8004a8e:	609a      	str	r2, [r3, #8]
 8004a90:	d9a1      	bls.n	80049d6 <_malloc_r+0x31e>
 8004a92:	f10b 0108 	add.w	r1, fp, #8
 8004a96:	4648      	mov	r0, r9
 8004a98:	f001 f834 	bl	8005b04 <_free_r>
 8004a9c:	e79b      	b.n	80049d6 <_malloc_r+0x31e>
 8004a9e:	68ae      	ldr	r6, [r5, #8]
 8004aa0:	f044 0201 	orr.w	r2, r4, #1
 8004aa4:	f043 0301 	orr.w	r3, r3, #1
 8004aa8:	4434      	add	r4, r6
 8004aaa:	6072      	str	r2, [r6, #4]
 8004aac:	60ac      	str	r4, [r5, #8]
 8004aae:	6063      	str	r3, [r4, #4]
 8004ab0:	e634      	b.n	800471c <_malloc_r+0x64>
 8004ab2:	bf00      	nop
 8004ab4:	20000ad8 	.word	0x20000ad8
 8004ab8:	20000420 	.word	0x20000420
 8004abc:	00000080 	.word	0x00000080
 8004ac0:	20000aa8 	.word	0x20000aa8
 8004ac4:	0000007f 	.word	0x0000007f
 8004ac8:	20000ad0 	.word	0x20000ad0
 8004acc:	20000ad4 	.word	0x20000ad4

08004ad0 <memset>:
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	4402      	add	r2, r0
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d100      	bne.n	8004ada <memset+0xa>
 8004ad8:	4770      	bx	lr
 8004ada:	f803 1b01 	strb.w	r1, [r3], #1
 8004ade:	e7f9      	b.n	8004ad4 <memset+0x4>

08004ae0 <__malloc_lock>:
 8004ae0:	4801      	ldr	r0, [pc, #4]	; (8004ae8 <__malloc_lock+0x8>)
 8004ae2:	f001 bbee 	b.w	80062c2 <__retarget_lock_acquire_recursive>
 8004ae6:	bf00      	nop
 8004ae8:	20000bec 	.word	0x20000bec

08004aec <__malloc_unlock>:
 8004aec:	4801      	ldr	r0, [pc, #4]	; (8004af4 <__malloc_unlock+0x8>)
 8004aee:	f001 bbea 	b.w	80062c6 <__retarget_lock_release_recursive>
 8004af2:	bf00      	nop
 8004af4:	20000bec 	.word	0x20000bec

08004af8 <_sbrk_r>:
 8004af8:	b538      	push	{r3, r4, r5, lr}
 8004afa:	2300      	movs	r3, #0
 8004afc:	4c05      	ldr	r4, [pc, #20]	; (8004b14 <_sbrk_r+0x1c>)
 8004afe:	4605      	mov	r5, r0
 8004b00:	4608      	mov	r0, r1
 8004b02:	6023      	str	r3, [r4, #0]
 8004b04:	f002 f830 	bl	8006b68 <_sbrk>
 8004b08:	1c43      	adds	r3, r0, #1
 8004b0a:	d102      	bne.n	8004b12 <_sbrk_r+0x1a>
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	b103      	cbz	r3, 8004b12 <_sbrk_r+0x1a>
 8004b10:	602b      	str	r3, [r5, #0]
 8004b12:	bd38      	pop	{r3, r4, r5, pc}
 8004b14:	20000bf4 	.word	0x20000bf4

08004b18 <strcat>:
 8004b18:	4602      	mov	r2, r0
 8004b1a:	b510      	push	{r4, lr}
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	781c      	ldrb	r4, [r3, #0]
 8004b20:	3201      	adds	r2, #1
 8004b22:	2c00      	cmp	r4, #0
 8004b24:	d1fa      	bne.n	8004b1c <strcat+0x4>
 8004b26:	3b01      	subs	r3, #1
 8004b28:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b2c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b30:	2a00      	cmp	r2, #0
 8004b32:	d1f9      	bne.n	8004b28 <strcat+0x10>
 8004b34:	bd10      	pop	{r4, pc}

08004b36 <sulp>:
 8004b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b3a:	460f      	mov	r7, r1
 8004b3c:	4690      	mov	r8, r2
 8004b3e:	f001 fe9f 	bl	8006880 <__ulp>
 8004b42:	4604      	mov	r4, r0
 8004b44:	460d      	mov	r5, r1
 8004b46:	f1b8 0f00 	cmp.w	r8, #0
 8004b4a:	d011      	beq.n	8004b70 <sulp+0x3a>
 8004b4c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004b50:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	dd0b      	ble.n	8004b70 <sulp+0x3a>
 8004b58:	2400      	movs	r4, #0
 8004b5a:	051b      	lsls	r3, r3, #20
 8004b5c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004b60:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004b64:	4622      	mov	r2, r4
 8004b66:	462b      	mov	r3, r5
 8004b68:	f7fb fcb2 	bl	80004d0 <__aeabi_dmul>
 8004b6c:	4604      	mov	r4, r0
 8004b6e:	460d      	mov	r5, r1
 8004b70:	4620      	mov	r0, r4
 8004b72:	4629      	mov	r1, r5
 8004b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004b78 <_strtod_l>:
 8004b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b7c:	4699      	mov	r9, r3
 8004b7e:	2300      	movs	r3, #0
 8004b80:	b09f      	sub	sp, #124	; 0x7c
 8004b82:	4680      	mov	r8, r0
 8004b84:	4648      	mov	r0, r9
 8004b86:	460c      	mov	r4, r1
 8004b88:	9215      	str	r2, [sp, #84]	; 0x54
 8004b8a:	931a      	str	r3, [sp, #104]	; 0x68
 8004b8c:	f001 fb97 	bl	80062be <__localeconv_l>
 8004b90:	4607      	mov	r7, r0
 8004b92:	6800      	ldr	r0, [r0, #0]
 8004b94:	f7fb fadc 	bl	8000150 <strlen>
 8004b98:	f04f 0a00 	mov.w	sl, #0
 8004b9c:	4605      	mov	r5, r0
 8004b9e:	f04f 0b00 	mov.w	fp, #0
 8004ba2:	9419      	str	r4, [sp, #100]	; 0x64
 8004ba4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004ba6:	781a      	ldrb	r2, [r3, #0]
 8004ba8:	2a0d      	cmp	r2, #13
 8004baa:	d833      	bhi.n	8004c14 <_strtod_l+0x9c>
 8004bac:	2a09      	cmp	r2, #9
 8004bae:	d237      	bcs.n	8004c20 <_strtod_l+0xa8>
 8004bb0:	2a00      	cmp	r2, #0
 8004bb2:	d03f      	beq.n	8004c34 <_strtod_l+0xbc>
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8004bb8:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004bba:	7833      	ldrb	r3, [r6, #0]
 8004bbc:	2b30      	cmp	r3, #48	; 0x30
 8004bbe:	f040 8101 	bne.w	8004dc4 <_strtod_l+0x24c>
 8004bc2:	7873      	ldrb	r3, [r6, #1]
 8004bc4:	2b58      	cmp	r3, #88	; 0x58
 8004bc6:	d001      	beq.n	8004bcc <_strtod_l+0x54>
 8004bc8:	2b78      	cmp	r3, #120	; 0x78
 8004bca:	d16b      	bne.n	8004ca4 <_strtod_l+0x12c>
 8004bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bce:	f8cd 9008 	str.w	r9, [sp, #8]
 8004bd2:	9301      	str	r3, [sp, #4]
 8004bd4:	ab1a      	add	r3, sp, #104	; 0x68
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	4aaa      	ldr	r2, [pc, #680]	; (8004e84 <_strtod_l+0x30c>)
 8004bda:	ab1b      	add	r3, sp, #108	; 0x6c
 8004bdc:	a919      	add	r1, sp, #100	; 0x64
 8004bde:	4640      	mov	r0, r8
 8004be0:	f001 f896 	bl	8005d10 <__gethex>
 8004be4:	f010 0407 	ands.w	r4, r0, #7
 8004be8:	4605      	mov	r5, r0
 8004bea:	d005      	beq.n	8004bf8 <_strtod_l+0x80>
 8004bec:	2c06      	cmp	r4, #6
 8004bee:	d12b      	bne.n	8004c48 <_strtod_l+0xd0>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	3601      	adds	r6, #1
 8004bf4:	9619      	str	r6, [sp, #100]	; 0x64
 8004bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8004bf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f040 859d 	bne.w	800573a <_strtod_l+0xbc2>
 8004c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c02:	b1e3      	cbz	r3, 8004c3e <_strtod_l+0xc6>
 8004c04:	4652      	mov	r2, sl
 8004c06:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004c0a:	4610      	mov	r0, r2
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	b01f      	add	sp, #124	; 0x7c
 8004c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c14:	2a2b      	cmp	r2, #43	; 0x2b
 8004c16:	d006      	beq.n	8004c26 <_strtod_l+0xae>
 8004c18:	2a2d      	cmp	r2, #45	; 0x2d
 8004c1a:	d013      	beq.n	8004c44 <_strtod_l+0xcc>
 8004c1c:	2a20      	cmp	r2, #32
 8004c1e:	d1c9      	bne.n	8004bb4 <_strtod_l+0x3c>
 8004c20:	3301      	adds	r3, #1
 8004c22:	9319      	str	r3, [sp, #100]	; 0x64
 8004c24:	e7be      	b.n	8004ba4 <_strtod_l+0x2c>
 8004c26:	2200      	movs	r2, #0
 8004c28:	9209      	str	r2, [sp, #36]	; 0x24
 8004c2a:	1c5a      	adds	r2, r3, #1
 8004c2c:	9219      	str	r2, [sp, #100]	; 0x64
 8004c2e:	785b      	ldrb	r3, [r3, #1]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1c1      	bne.n	8004bb8 <_strtod_l+0x40>
 8004c34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004c36:	9419      	str	r4, [sp, #100]	; 0x64
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f040 857c 	bne.w	8005736 <_strtod_l+0xbbe>
 8004c3e:	4652      	mov	r2, sl
 8004c40:	465b      	mov	r3, fp
 8004c42:	e7e2      	b.n	8004c0a <_strtod_l+0x92>
 8004c44:	2201      	movs	r2, #1
 8004c46:	e7ef      	b.n	8004c28 <_strtod_l+0xb0>
 8004c48:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004c4a:	b13a      	cbz	r2, 8004c5c <_strtod_l+0xe4>
 8004c4c:	2135      	movs	r1, #53	; 0x35
 8004c4e:	a81c      	add	r0, sp, #112	; 0x70
 8004c50:	f001 ff03 	bl	8006a5a <__copybits>
 8004c54:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004c56:	4640      	mov	r0, r8
 8004c58:	f001 fb87 	bl	800636a <_Bfree>
 8004c5c:	3c01      	subs	r4, #1
 8004c5e:	2c04      	cmp	r4, #4
 8004c60:	d808      	bhi.n	8004c74 <_strtod_l+0xfc>
 8004c62:	e8df f004 	tbb	[pc, r4]
 8004c66:	030c      	.short	0x030c
 8004c68:	1a17      	.short	0x1a17
 8004c6a:	0c          	.byte	0x0c
 8004c6b:	00          	.byte	0x00
 8004c6c:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8004c70:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8004c74:	0729      	lsls	r1, r5, #28
 8004c76:	d5bf      	bpl.n	8004bf8 <_strtod_l+0x80>
 8004c78:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004c7c:	e7bc      	b.n	8004bf8 <_strtod_l+0x80>
 8004c7e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004c80:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004c82:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004c86:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004c8a:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8004c8e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004c92:	e7ef      	b.n	8004c74 <_strtod_l+0xfc>
 8004c94:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 8004e90 <_strtod_l+0x318>
 8004c98:	e7ec      	b.n	8004c74 <_strtod_l+0xfc>
 8004c9a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004c9e:	f04f 3aff 	mov.w	sl, #4294967295
 8004ca2:	e7e7      	b.n	8004c74 <_strtod_l+0xfc>
 8004ca4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	9219      	str	r2, [sp, #100]	; 0x64
 8004caa:	785b      	ldrb	r3, [r3, #1]
 8004cac:	2b30      	cmp	r3, #48	; 0x30
 8004cae:	d0f9      	beq.n	8004ca4 <_strtod_l+0x12c>
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0a1      	beq.n	8004bf8 <_strtod_l+0x80>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	9308      	str	r3, [sp, #32]
 8004cb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004cba:	220a      	movs	r2, #10
 8004cbc:	930a      	str	r3, [sp, #40]	; 0x28
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	9305      	str	r3, [sp, #20]
 8004cc2:	9306      	str	r3, [sp, #24]
 8004cc4:	9304      	str	r3, [sp, #16]
 8004cc6:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004cc8:	7806      	ldrb	r6, [r0, #0]
 8004cca:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004cce:	b2d9      	uxtb	r1, r3
 8004cd0:	2909      	cmp	r1, #9
 8004cd2:	d979      	bls.n	8004dc8 <_strtod_l+0x250>
 8004cd4:	462a      	mov	r2, r5
 8004cd6:	6839      	ldr	r1, [r7, #0]
 8004cd8:	f001 fefa 	bl	8006ad0 <strncmp>
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	f000 8085 	beq.w	8004dec <_strtod_l+0x274>
 8004ce2:	2000      	movs	r0, #0
 8004ce4:	4633      	mov	r3, r6
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	4601      	mov	r1, r0
 8004cea:	9d04      	ldr	r5, [sp, #16]
 8004cec:	2b65      	cmp	r3, #101	; 0x65
 8004cee:	d002      	beq.n	8004cf6 <_strtod_l+0x17e>
 8004cf0:	2b45      	cmp	r3, #69	; 0x45
 8004cf2:	f040 80ef 	bne.w	8004ed4 <_strtod_l+0x35c>
 8004cf6:	b925      	cbnz	r5, 8004d02 <_strtod_l+0x18a>
 8004cf8:	b910      	cbnz	r0, 8004d00 <_strtod_l+0x188>
 8004cfa:	9b08      	ldr	r3, [sp, #32]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d099      	beq.n	8004c34 <_strtod_l+0xbc>
 8004d00:	2500      	movs	r5, #0
 8004d02:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8004d04:	1c63      	adds	r3, r4, #1
 8004d06:	9319      	str	r3, [sp, #100]	; 0x64
 8004d08:	7863      	ldrb	r3, [r4, #1]
 8004d0a:	2b2b      	cmp	r3, #43	; 0x2b
 8004d0c:	f000 80cf 	beq.w	8004eae <_strtod_l+0x336>
 8004d10:	2b2d      	cmp	r3, #45	; 0x2d
 8004d12:	f000 80d2 	beq.w	8004eba <_strtod_l+0x342>
 8004d16:	2600      	movs	r6, #0
 8004d18:	9607      	str	r6, [sp, #28]
 8004d1a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8004d1e:	2e09      	cmp	r6, #9
 8004d20:	f200 80d7 	bhi.w	8004ed2 <_strtod_l+0x35a>
 8004d24:	2b30      	cmp	r3, #48	; 0x30
 8004d26:	f000 80ca 	beq.w	8004ebe <_strtod_l+0x346>
 8004d2a:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 8004d2e:	2e08      	cmp	r6, #8
 8004d30:	f200 80d0 	bhi.w	8004ed4 <_strtod_l+0x35c>
 8004d34:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004d38:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004d3a:	f04f 0c0a 	mov.w	ip, #10
 8004d3e:	461f      	mov	r7, r3
 8004d40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004d42:	1c5e      	adds	r6, r3, #1
 8004d44:	9619      	str	r6, [sp, #100]	; 0x64
 8004d46:	785b      	ldrb	r3, [r3, #1]
 8004d48:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
 8004d4c:	f1b9 0f09 	cmp.w	r9, #9
 8004d50:	f240 80ba 	bls.w	8004ec8 <_strtod_l+0x350>
 8004d54:	1bf6      	subs	r6, r6, r7
 8004d56:	2e08      	cmp	r6, #8
 8004d58:	f644 691f 	movw	r9, #19999	; 0x4e1f
 8004d5c:	dc02      	bgt.n	8004d64 <_strtod_l+0x1ec>
 8004d5e:	45f1      	cmp	r9, lr
 8004d60:	bfa8      	it	ge
 8004d62:	46f1      	movge	r9, lr
 8004d64:	9e07      	ldr	r6, [sp, #28]
 8004d66:	b10e      	cbz	r6, 8004d6c <_strtod_l+0x1f4>
 8004d68:	f1c9 0900 	rsb	r9, r9, #0
 8004d6c:	2d00      	cmp	r5, #0
 8004d6e:	f040 80d7 	bne.w	8004f20 <_strtod_l+0x3a8>
 8004d72:	2800      	cmp	r0, #0
 8004d74:	f47f af40 	bne.w	8004bf8 <_strtod_l+0x80>
 8004d78:	9a08      	ldr	r2, [sp, #32]
 8004d7a:	2a00      	cmp	r2, #0
 8004d7c:	f47f af3c 	bne.w	8004bf8 <_strtod_l+0x80>
 8004d80:	2900      	cmp	r1, #0
 8004d82:	f47f af57 	bne.w	8004c34 <_strtod_l+0xbc>
 8004d86:	2b4e      	cmp	r3, #78	; 0x4e
 8004d88:	f000 80ad 	beq.w	8004ee6 <_strtod_l+0x36e>
 8004d8c:	f300 80a5 	bgt.w	8004eda <_strtod_l+0x362>
 8004d90:	2b49      	cmp	r3, #73	; 0x49
 8004d92:	f47f af4f 	bne.w	8004c34 <_strtod_l+0xbc>
 8004d96:	493c      	ldr	r1, [pc, #240]	; (8004e88 <_strtod_l+0x310>)
 8004d98:	a819      	add	r0, sp, #100	; 0x64
 8004d9a:	f001 f9ea 	bl	8006172 <__match>
 8004d9e:	2800      	cmp	r0, #0
 8004da0:	f43f af48 	beq.w	8004c34 <_strtod_l+0xbc>
 8004da4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004da6:	4939      	ldr	r1, [pc, #228]	; (8004e8c <_strtod_l+0x314>)
 8004da8:	3b01      	subs	r3, #1
 8004daa:	a819      	add	r0, sp, #100	; 0x64
 8004dac:	9319      	str	r3, [sp, #100]	; 0x64
 8004dae:	f001 f9e0 	bl	8006172 <__match>
 8004db2:	b910      	cbnz	r0, 8004dba <_strtod_l+0x242>
 8004db4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004db6:	3301      	adds	r3, #1
 8004db8:	9319      	str	r3, [sp, #100]	; 0x64
 8004dba:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8004e90 <_strtod_l+0x318>
 8004dbe:	f04f 0a00 	mov.w	sl, #0
 8004dc2:	e719      	b.n	8004bf8 <_strtod_l+0x80>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	e776      	b.n	8004cb6 <_strtod_l+0x13e>
 8004dc8:	9904      	ldr	r1, [sp, #16]
 8004dca:	3001      	adds	r0, #1
 8004dcc:	2908      	cmp	r1, #8
 8004dce:	bfd5      	itete	le
 8004dd0:	9906      	ldrle	r1, [sp, #24]
 8004dd2:	9905      	ldrgt	r1, [sp, #20]
 8004dd4:	fb02 3301 	mlale	r3, r2, r1, r3
 8004dd8:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004ddc:	bfd4      	ite	le
 8004dde:	9306      	strle	r3, [sp, #24]
 8004de0:	9305      	strgt	r3, [sp, #20]
 8004de2:	9b04      	ldr	r3, [sp, #16]
 8004de4:	9019      	str	r0, [sp, #100]	; 0x64
 8004de6:	3301      	adds	r3, #1
 8004de8:	9304      	str	r3, [sp, #16]
 8004dea:	e76c      	b.n	8004cc6 <_strtod_l+0x14e>
 8004dec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004dee:	195a      	adds	r2, r3, r5
 8004df0:	9219      	str	r2, [sp, #100]	; 0x64
 8004df2:	9a04      	ldr	r2, [sp, #16]
 8004df4:	5d5b      	ldrb	r3, [r3, r5]
 8004df6:	2a00      	cmp	r2, #0
 8004df8:	d154      	bne.n	8004ea4 <_strtod_l+0x32c>
 8004dfa:	4610      	mov	r0, r2
 8004dfc:	2b30      	cmp	r3, #48	; 0x30
 8004dfe:	d02a      	beq.n	8004e56 <_strtod_l+0x2de>
 8004e00:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004e04:	2a08      	cmp	r2, #8
 8004e06:	f200 849d 	bhi.w	8005744 <_strtod_l+0xbcc>
 8004e0a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004e0c:	920a      	str	r2, [sp, #40]	; 0x28
 8004e0e:	4602      	mov	r2, r0
 8004e10:	2000      	movs	r0, #0
 8004e12:	4605      	mov	r5, r0
 8004e14:	3b30      	subs	r3, #48	; 0x30
 8004e16:	f100 0101 	add.w	r1, r0, #1
 8004e1a:	d011      	beq.n	8004e40 <_strtod_l+0x2c8>
 8004e1c:	440a      	add	r2, r1
 8004e1e:	260a      	movs	r6, #10
 8004e20:	4629      	mov	r1, r5
 8004e22:	eb00 0c05 	add.w	ip, r0, r5
 8004e26:	4561      	cmp	r1, ip
 8004e28:	d11b      	bne.n	8004e62 <_strtod_l+0x2ea>
 8004e2a:	4428      	add	r0, r5
 8004e2c:	2808      	cmp	r0, #8
 8004e2e:	f100 0501 	add.w	r5, r0, #1
 8004e32:	dc2f      	bgt.n	8004e94 <_strtod_l+0x31c>
 8004e34:	210a      	movs	r1, #10
 8004e36:	9806      	ldr	r0, [sp, #24]
 8004e38:	fb01 3300 	mla	r3, r1, r0, r3
 8004e3c:	9306      	str	r3, [sp, #24]
 8004e3e:	2100      	movs	r1, #0
 8004e40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004e42:	1c58      	adds	r0, r3, #1
 8004e44:	9019      	str	r0, [sp, #100]	; 0x64
 8004e46:	4608      	mov	r0, r1
 8004e48:	785b      	ldrb	r3, [r3, #1]
 8004e4a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004e4e:	2909      	cmp	r1, #9
 8004e50:	d9e0      	bls.n	8004e14 <_strtod_l+0x29c>
 8004e52:	2101      	movs	r1, #1
 8004e54:	e74a      	b.n	8004cec <_strtod_l+0x174>
 8004e56:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004e58:	3001      	adds	r0, #1
 8004e5a:	1c5a      	adds	r2, r3, #1
 8004e5c:	9219      	str	r2, [sp, #100]	; 0x64
 8004e5e:	785b      	ldrb	r3, [r3, #1]
 8004e60:	e7cc      	b.n	8004dfc <_strtod_l+0x284>
 8004e62:	3101      	adds	r1, #1
 8004e64:	f101 3eff 	add.w	lr, r1, #4294967295
 8004e68:	f1be 0f08 	cmp.w	lr, #8
 8004e6c:	dc03      	bgt.n	8004e76 <_strtod_l+0x2fe>
 8004e6e:	9f06      	ldr	r7, [sp, #24]
 8004e70:	4377      	muls	r7, r6
 8004e72:	9706      	str	r7, [sp, #24]
 8004e74:	e7d7      	b.n	8004e26 <_strtod_l+0x2ae>
 8004e76:	2910      	cmp	r1, #16
 8004e78:	bfde      	ittt	le
 8004e7a:	9f05      	ldrle	r7, [sp, #20]
 8004e7c:	4377      	mulle	r7, r6
 8004e7e:	9705      	strle	r7, [sp, #20]
 8004e80:	e7d1      	b.n	8004e26 <_strtod_l+0x2ae>
 8004e82:	bf00      	nop
 8004e84:	080071c8 	.word	0x080071c8
 8004e88:	080071bc 	.word	0x080071bc
 8004e8c:	080071bf 	.word	0x080071bf
 8004e90:	7ff00000 	.word	0x7ff00000
 8004e94:	2d10      	cmp	r5, #16
 8004e96:	bfdf      	itttt	le
 8004e98:	210a      	movle	r1, #10
 8004e9a:	9805      	ldrle	r0, [sp, #20]
 8004e9c:	fb01 3300 	mlale	r3, r1, r0, r3
 8004ea0:	9305      	strle	r3, [sp, #20]
 8004ea2:	e7cc      	b.n	8004e3e <_strtod_l+0x2c6>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	9d04      	ldr	r5, [sp, #16]
 8004ea8:	e7cf      	b.n	8004e4a <_strtod_l+0x2d2>
 8004eaa:	2101      	movs	r1, #1
 8004eac:	e724      	b.n	8004cf8 <_strtod_l+0x180>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	9307      	str	r3, [sp, #28]
 8004eb2:	1ca3      	adds	r3, r4, #2
 8004eb4:	9319      	str	r3, [sp, #100]	; 0x64
 8004eb6:	78a3      	ldrb	r3, [r4, #2]
 8004eb8:	e72f      	b.n	8004d1a <_strtod_l+0x1a2>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e7f8      	b.n	8004eb0 <_strtod_l+0x338>
 8004ebe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004ec0:	1c5e      	adds	r6, r3, #1
 8004ec2:	9619      	str	r6, [sp, #100]	; 0x64
 8004ec4:	785b      	ldrb	r3, [r3, #1]
 8004ec6:	e72d      	b.n	8004d24 <_strtod_l+0x1ac>
 8004ec8:	fb0c 3e0e 	mla	lr, ip, lr, r3
 8004ecc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004ed0:	e736      	b.n	8004d40 <_strtod_l+0x1c8>
 8004ed2:	9419      	str	r4, [sp, #100]	; 0x64
 8004ed4:	f04f 0900 	mov.w	r9, #0
 8004ed8:	e748      	b.n	8004d6c <_strtod_l+0x1f4>
 8004eda:	2b69      	cmp	r3, #105	; 0x69
 8004edc:	f43f af5b 	beq.w	8004d96 <_strtod_l+0x21e>
 8004ee0:	2b6e      	cmp	r3, #110	; 0x6e
 8004ee2:	f47f aea7 	bne.w	8004c34 <_strtod_l+0xbc>
 8004ee6:	498c      	ldr	r1, [pc, #560]	; (8005118 <_strtod_l+0x5a0>)
 8004ee8:	a819      	add	r0, sp, #100	; 0x64
 8004eea:	f001 f942 	bl	8006172 <__match>
 8004eee:	2800      	cmp	r0, #0
 8004ef0:	f43f aea0 	beq.w	8004c34 <_strtod_l+0xbc>
 8004ef4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	2b28      	cmp	r3, #40	; 0x28
 8004efa:	d10e      	bne.n	8004f1a <_strtod_l+0x3a2>
 8004efc:	aa1c      	add	r2, sp, #112	; 0x70
 8004efe:	4987      	ldr	r1, [pc, #540]	; (800511c <_strtod_l+0x5a4>)
 8004f00:	a819      	add	r0, sp, #100	; 0x64
 8004f02:	f001 f949 	bl	8006198 <__hexnan>
 8004f06:	2805      	cmp	r0, #5
 8004f08:	d107      	bne.n	8004f1a <_strtod_l+0x3a2>
 8004f0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004f0c:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8004f10:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004f14:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004f18:	e66e      	b.n	8004bf8 <_strtod_l+0x80>
 8004f1a:	f8df b210 	ldr.w	fp, [pc, #528]	; 800512c <_strtod_l+0x5b4>
 8004f1e:	e74e      	b.n	8004dbe <_strtod_l+0x246>
 8004f20:	9b04      	ldr	r3, [sp, #16]
 8004f22:	462c      	mov	r4, r5
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	bf08      	it	eq
 8004f28:	462b      	moveq	r3, r5
 8004f2a:	2d10      	cmp	r5, #16
 8004f2c:	bfa8      	it	ge
 8004f2e:	2410      	movge	r4, #16
 8004f30:	9806      	ldr	r0, [sp, #24]
 8004f32:	eba9 0902 	sub.w	r9, r9, r2
 8004f36:	9304      	str	r3, [sp, #16]
 8004f38:	f7fb fa54 	bl	80003e4 <__aeabi_ui2d>
 8004f3c:	2c09      	cmp	r4, #9
 8004f3e:	4682      	mov	sl, r0
 8004f40:	468b      	mov	fp, r1
 8004f42:	dd13      	ble.n	8004f6c <_strtod_l+0x3f4>
 8004f44:	4b76      	ldr	r3, [pc, #472]	; (8005120 <_strtod_l+0x5a8>)
 8004f46:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004f4a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004f4e:	f7fb fabf 	bl	80004d0 <__aeabi_dmul>
 8004f52:	4606      	mov	r6, r0
 8004f54:	9805      	ldr	r0, [sp, #20]
 8004f56:	460f      	mov	r7, r1
 8004f58:	f7fb fa44 	bl	80003e4 <__aeabi_ui2d>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4630      	mov	r0, r6
 8004f62:	4639      	mov	r1, r7
 8004f64:	f7fb f902 	bl	800016c <__adddf3>
 8004f68:	4682      	mov	sl, r0
 8004f6a:	468b      	mov	fp, r1
 8004f6c:	2d0f      	cmp	r5, #15
 8004f6e:	dc36      	bgt.n	8004fde <_strtod_l+0x466>
 8004f70:	f1b9 0f00 	cmp.w	r9, #0
 8004f74:	f43f ae40 	beq.w	8004bf8 <_strtod_l+0x80>
 8004f78:	dd24      	ble.n	8004fc4 <_strtod_l+0x44c>
 8004f7a:	f1b9 0f16 	cmp.w	r9, #22
 8004f7e:	dc0b      	bgt.n	8004f98 <_strtod_l+0x420>
 8004f80:	4652      	mov	r2, sl
 8004f82:	465b      	mov	r3, fp
 8004f84:	4d66      	ldr	r5, [pc, #408]	; (8005120 <_strtod_l+0x5a8>)
 8004f86:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 8004f8a:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004f8e:	f7fb fa9f 	bl	80004d0 <__aeabi_dmul>
 8004f92:	4682      	mov	sl, r0
 8004f94:	468b      	mov	fp, r1
 8004f96:	e62f      	b.n	8004bf8 <_strtod_l+0x80>
 8004f98:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8004f9c:	4599      	cmp	r9, r3
 8004f9e:	dc1e      	bgt.n	8004fde <_strtod_l+0x466>
 8004fa0:	4c5f      	ldr	r4, [pc, #380]	; (8005120 <_strtod_l+0x5a8>)
 8004fa2:	f1c5 050f 	rsb	r5, r5, #15
 8004fa6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004faa:	eba9 0505 	sub.w	r5, r9, r5
 8004fae:	4652      	mov	r2, sl
 8004fb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fb4:	465b      	mov	r3, fp
 8004fb6:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004fba:	f7fb fa89 	bl	80004d0 <__aeabi_dmul>
 8004fbe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004fc2:	e7e4      	b.n	8004f8e <_strtod_l+0x416>
 8004fc4:	f119 0f16 	cmn.w	r9, #22
 8004fc8:	db09      	blt.n	8004fde <_strtod_l+0x466>
 8004fca:	4d55      	ldr	r5, [pc, #340]	; (8005120 <_strtod_l+0x5a8>)
 8004fcc:	4650      	mov	r0, sl
 8004fce:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
 8004fd2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004fd6:	4659      	mov	r1, fp
 8004fd8:	f7fb fba4 	bl	8000724 <__aeabi_ddiv>
 8004fdc:	e7d9      	b.n	8004f92 <_strtod_l+0x41a>
 8004fde:	1b2c      	subs	r4, r5, r4
 8004fe0:	444c      	add	r4, r9
 8004fe2:	2c00      	cmp	r4, #0
 8004fe4:	dd73      	ble.n	80050ce <_strtod_l+0x556>
 8004fe6:	f014 030f 	ands.w	r3, r4, #15
 8004fea:	d00a      	beq.n	8005002 <_strtod_l+0x48a>
 8004fec:	494c      	ldr	r1, [pc, #304]	; (8005120 <_strtod_l+0x5a8>)
 8004fee:	4652      	mov	r2, sl
 8004ff0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004ff4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ff8:	465b      	mov	r3, fp
 8004ffa:	f7fb fa69 	bl	80004d0 <__aeabi_dmul>
 8004ffe:	4682      	mov	sl, r0
 8005000:	468b      	mov	fp, r1
 8005002:	f034 040f 	bics.w	r4, r4, #15
 8005006:	d054      	beq.n	80050b2 <_strtod_l+0x53a>
 8005008:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 800500c:	dd27      	ble.n	800505e <_strtod_l+0x4e6>
 800500e:	f04f 0900 	mov.w	r9, #0
 8005012:	f8cd 9010 	str.w	r9, [sp, #16]
 8005016:	f8cd 901c 	str.w	r9, [sp, #28]
 800501a:	f8cd 9018 	str.w	r9, [sp, #24]
 800501e:	2322      	movs	r3, #34	; 0x22
 8005020:	f04f 0a00 	mov.w	sl, #0
 8005024:	f8df b108 	ldr.w	fp, [pc, #264]	; 8005130 <_strtod_l+0x5b8>
 8005028:	f8c8 3000 	str.w	r3, [r8]
 800502c:	9b07      	ldr	r3, [sp, #28]
 800502e:	2b00      	cmp	r3, #0
 8005030:	f43f ade2 	beq.w	8004bf8 <_strtod_l+0x80>
 8005034:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005036:	4640      	mov	r0, r8
 8005038:	f001 f997 	bl	800636a <_Bfree>
 800503c:	9906      	ldr	r1, [sp, #24]
 800503e:	4640      	mov	r0, r8
 8005040:	f001 f993 	bl	800636a <_Bfree>
 8005044:	9904      	ldr	r1, [sp, #16]
 8005046:	4640      	mov	r0, r8
 8005048:	f001 f98f 	bl	800636a <_Bfree>
 800504c:	9907      	ldr	r1, [sp, #28]
 800504e:	4640      	mov	r0, r8
 8005050:	f001 f98b 	bl	800636a <_Bfree>
 8005054:	4649      	mov	r1, r9
 8005056:	4640      	mov	r0, r8
 8005058:	f001 f987 	bl	800636a <_Bfree>
 800505c:	e5cc      	b.n	8004bf8 <_strtod_l+0x80>
 800505e:	2300      	movs	r3, #0
 8005060:	4650      	mov	r0, sl
 8005062:	4659      	mov	r1, fp
 8005064:	461f      	mov	r7, r3
 8005066:	4e2f      	ldr	r6, [pc, #188]	; (8005124 <_strtod_l+0x5ac>)
 8005068:	1124      	asrs	r4, r4, #4
 800506a:	2c01      	cmp	r4, #1
 800506c:	dc24      	bgt.n	80050b8 <_strtod_l+0x540>
 800506e:	b10b      	cbz	r3, 8005074 <_strtod_l+0x4fc>
 8005070:	4682      	mov	sl, r0
 8005072:	468b      	mov	fp, r1
 8005074:	4b2b      	ldr	r3, [pc, #172]	; (8005124 <_strtod_l+0x5ac>)
 8005076:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800507a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800507e:	4652      	mov	r2, sl
 8005080:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005084:	465b      	mov	r3, fp
 8005086:	f7fb fa23 	bl	80004d0 <__aeabi_dmul>
 800508a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800508e:	468b      	mov	fp, r1
 8005090:	460a      	mov	r2, r1
 8005092:	0d1b      	lsrs	r3, r3, #20
 8005094:	4924      	ldr	r1, [pc, #144]	; (8005128 <_strtod_l+0x5b0>)
 8005096:	051b      	lsls	r3, r3, #20
 8005098:	428b      	cmp	r3, r1
 800509a:	4682      	mov	sl, r0
 800509c:	d8b7      	bhi.n	800500e <_strtod_l+0x496>
 800509e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80050a2:	428b      	cmp	r3, r1
 80050a4:	bf86      	itte	hi
 80050a6:	f04f 3aff 	movhi.w	sl, #4294967295
 80050aa:	f8df b088 	ldrhi.w	fp, [pc, #136]	; 8005134 <_strtod_l+0x5bc>
 80050ae:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80050b2:	2300      	movs	r3, #0
 80050b4:	9305      	str	r3, [sp, #20]
 80050b6:	e070      	b.n	800519a <_strtod_l+0x622>
 80050b8:	07e2      	lsls	r2, r4, #31
 80050ba:	d504      	bpl.n	80050c6 <_strtod_l+0x54e>
 80050bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80050c0:	f7fb fa06 	bl	80004d0 <__aeabi_dmul>
 80050c4:	2301      	movs	r3, #1
 80050c6:	3701      	adds	r7, #1
 80050c8:	1064      	asrs	r4, r4, #1
 80050ca:	3608      	adds	r6, #8
 80050cc:	e7cd      	b.n	800506a <_strtod_l+0x4f2>
 80050ce:	d0f0      	beq.n	80050b2 <_strtod_l+0x53a>
 80050d0:	4264      	negs	r4, r4
 80050d2:	f014 020f 	ands.w	r2, r4, #15
 80050d6:	d00a      	beq.n	80050ee <_strtod_l+0x576>
 80050d8:	4b11      	ldr	r3, [pc, #68]	; (8005120 <_strtod_l+0x5a8>)
 80050da:	4650      	mov	r0, sl
 80050dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050e0:	4659      	mov	r1, fp
 80050e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e6:	f7fb fb1d 	bl	8000724 <__aeabi_ddiv>
 80050ea:	4682      	mov	sl, r0
 80050ec:	468b      	mov	fp, r1
 80050ee:	1124      	asrs	r4, r4, #4
 80050f0:	d0df      	beq.n	80050b2 <_strtod_l+0x53a>
 80050f2:	2c1f      	cmp	r4, #31
 80050f4:	dd20      	ble.n	8005138 <_strtod_l+0x5c0>
 80050f6:	f04f 0900 	mov.w	r9, #0
 80050fa:	f8cd 9010 	str.w	r9, [sp, #16]
 80050fe:	f8cd 901c 	str.w	r9, [sp, #28]
 8005102:	f8cd 9018 	str.w	r9, [sp, #24]
 8005106:	2322      	movs	r3, #34	; 0x22
 8005108:	f04f 0a00 	mov.w	sl, #0
 800510c:	f04f 0b00 	mov.w	fp, #0
 8005110:	f8c8 3000 	str.w	r3, [r8]
 8005114:	e78a      	b.n	800502c <_strtod_l+0x4b4>
 8005116:	bf00      	nop
 8005118:	080071c5 	.word	0x080071c5
 800511c:	080071dc 	.word	0x080071dc
 8005120:	08007250 	.word	0x08007250
 8005124:	08007228 	.word	0x08007228
 8005128:	7ca00000 	.word	0x7ca00000
 800512c:	fff80000 	.word	0xfff80000
 8005130:	7ff00000 	.word	0x7ff00000
 8005134:	7fefffff 	.word	0x7fefffff
 8005138:	f014 0310 	ands.w	r3, r4, #16
 800513c:	bf18      	it	ne
 800513e:	236a      	movne	r3, #106	; 0x6a
 8005140:	4650      	mov	r0, sl
 8005142:	9305      	str	r3, [sp, #20]
 8005144:	4659      	mov	r1, fp
 8005146:	2300      	movs	r3, #0
 8005148:	4e9f      	ldr	r6, [pc, #636]	; (80053c8 <_strtod_l+0x850>)
 800514a:	2c00      	cmp	r4, #0
 800514c:	f300 8109 	bgt.w	8005362 <_strtod_l+0x7ea>
 8005150:	b10b      	cbz	r3, 8005156 <_strtod_l+0x5de>
 8005152:	4682      	mov	sl, r0
 8005154:	468b      	mov	fp, r1
 8005156:	9b05      	ldr	r3, [sp, #20]
 8005158:	b1bb      	cbz	r3, 800518a <_strtod_l+0x612>
 800515a:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800515e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005162:	2b00      	cmp	r3, #0
 8005164:	4659      	mov	r1, fp
 8005166:	dd10      	ble.n	800518a <_strtod_l+0x612>
 8005168:	2b1f      	cmp	r3, #31
 800516a:	f340 8104 	ble.w	8005376 <_strtod_l+0x7fe>
 800516e:	2b34      	cmp	r3, #52	; 0x34
 8005170:	bfd8      	it	le
 8005172:	f04f 32ff 	movle.w	r2, #4294967295
 8005176:	f04f 0a00 	mov.w	sl, #0
 800517a:	bfcf      	iteee	gt
 800517c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005180:	3b20      	suble	r3, #32
 8005182:	fa02 f303 	lslle.w	r3, r2, r3
 8005186:	ea03 0b01 	andle.w	fp, r3, r1
 800518a:	2200      	movs	r2, #0
 800518c:	2300      	movs	r3, #0
 800518e:	4650      	mov	r0, sl
 8005190:	4659      	mov	r1, fp
 8005192:	f7fb fc05 	bl	80009a0 <__aeabi_dcmpeq>
 8005196:	2800      	cmp	r0, #0
 8005198:	d1ad      	bne.n	80050f6 <_strtod_l+0x57e>
 800519a:	9b06      	ldr	r3, [sp, #24]
 800519c:	9a04      	ldr	r2, [sp, #16]
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80051a2:	462b      	mov	r3, r5
 80051a4:	4640      	mov	r0, r8
 80051a6:	f001 f932 	bl	800640e <__s2b>
 80051aa:	9007      	str	r0, [sp, #28]
 80051ac:	2800      	cmp	r0, #0
 80051ae:	f43f af2e 	beq.w	800500e <_strtod_l+0x496>
 80051b2:	f1b9 0f00 	cmp.w	r9, #0
 80051b6:	f1c9 0300 	rsb	r3, r9, #0
 80051ba:	bfa8      	it	ge
 80051bc:	2300      	movge	r3, #0
 80051be:	930e      	str	r3, [sp, #56]	; 0x38
 80051c0:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
 80051c4:	f04f 0900 	mov.w	r9, #0
 80051c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80051ca:	f8cd 9010 	str.w	r9, [sp, #16]
 80051ce:	9b07      	ldr	r3, [sp, #28]
 80051d0:	4640      	mov	r0, r8
 80051d2:	6859      	ldr	r1, [r3, #4]
 80051d4:	f001 f895 	bl	8006302 <_Balloc>
 80051d8:	9006      	str	r0, [sp, #24]
 80051da:	2800      	cmp	r0, #0
 80051dc:	f43f af1f 	beq.w	800501e <_strtod_l+0x4a6>
 80051e0:	9b07      	ldr	r3, [sp, #28]
 80051e2:	300c      	adds	r0, #12
 80051e4:	691a      	ldr	r2, [r3, #16]
 80051e6:	f103 010c 	add.w	r1, r3, #12
 80051ea:	3202      	adds	r2, #2
 80051ec:	0092      	lsls	r2, r2, #2
 80051ee:	f001 f87d 	bl	80062ec <memcpy>
 80051f2:	ab1c      	add	r3, sp, #112	; 0x70
 80051f4:	9301      	str	r3, [sp, #4]
 80051f6:	ab1b      	add	r3, sp, #108	; 0x6c
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	4652      	mov	r2, sl
 80051fc:	465b      	mov	r3, fp
 80051fe:	4640      	mov	r0, r8
 8005200:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005204:	f001 fbb2 	bl	800696c <__d2b>
 8005208:	901a      	str	r0, [sp, #104]	; 0x68
 800520a:	2800      	cmp	r0, #0
 800520c:	f43f af07 	beq.w	800501e <_strtod_l+0x4a6>
 8005210:	2101      	movs	r1, #1
 8005212:	4640      	mov	r0, r8
 8005214:	f001 f987 	bl	8006526 <__i2b>
 8005218:	9004      	str	r0, [sp, #16]
 800521a:	4603      	mov	r3, r0
 800521c:	2800      	cmp	r0, #0
 800521e:	f43f aefe 	beq.w	800501e <_strtod_l+0x4a6>
 8005222:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005224:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005226:	2d00      	cmp	r5, #0
 8005228:	bfab      	itete	ge
 800522a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800522c:	9b0f      	ldrlt	r3, [sp, #60]	; 0x3c
 800522e:	195e      	addge	r6, r3, r5
 8005230:	1b5c      	sublt	r4, r3, r5
 8005232:	9b05      	ldr	r3, [sp, #20]
 8005234:	bfa8      	it	ge
 8005236:	9c0f      	ldrge	r4, [sp, #60]	; 0x3c
 8005238:	eba5 0503 	sub.w	r5, r5, r3
 800523c:	4415      	add	r5, r2
 800523e:	4b63      	ldr	r3, [pc, #396]	; (80053cc <_strtod_l+0x854>)
 8005240:	f105 35ff 	add.w	r5, r5, #4294967295
 8005244:	bfb8      	it	lt
 8005246:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005248:	429d      	cmp	r5, r3
 800524a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800524e:	f280 80a4 	bge.w	800539a <_strtod_l+0x822>
 8005252:	1b5b      	subs	r3, r3, r5
 8005254:	2b1f      	cmp	r3, #31
 8005256:	eba2 0203 	sub.w	r2, r2, r3
 800525a:	f04f 0701 	mov.w	r7, #1
 800525e:	f300 8091 	bgt.w	8005384 <_strtod_l+0x80c>
 8005262:	2500      	movs	r5, #0
 8005264:	fa07 f303 	lsl.w	r3, r7, r3
 8005268:	9314      	str	r3, [sp, #80]	; 0x50
 800526a:	18b7      	adds	r7, r6, r2
 800526c:	9b05      	ldr	r3, [sp, #20]
 800526e:	42be      	cmp	r6, r7
 8005270:	4414      	add	r4, r2
 8005272:	441c      	add	r4, r3
 8005274:	4633      	mov	r3, r6
 8005276:	bfa8      	it	ge
 8005278:	463b      	movge	r3, r7
 800527a:	42a3      	cmp	r3, r4
 800527c:	bfa8      	it	ge
 800527e:	4623      	movge	r3, r4
 8005280:	2b00      	cmp	r3, #0
 8005282:	bfc2      	ittt	gt
 8005284:	1aff      	subgt	r7, r7, r3
 8005286:	1ae4      	subgt	r4, r4, r3
 8005288:	1af6      	subgt	r6, r6, r3
 800528a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800528c:	b1bb      	cbz	r3, 80052be <_strtod_l+0x746>
 800528e:	461a      	mov	r2, r3
 8005290:	9904      	ldr	r1, [sp, #16]
 8005292:	4640      	mov	r0, r8
 8005294:	f001 f9dc 	bl	8006650 <__pow5mult>
 8005298:	9004      	str	r0, [sp, #16]
 800529a:	2800      	cmp	r0, #0
 800529c:	f43f aebf 	beq.w	800501e <_strtod_l+0x4a6>
 80052a0:	4601      	mov	r1, r0
 80052a2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80052a4:	4640      	mov	r0, r8
 80052a6:	f001 f947 	bl	8006538 <__multiply>
 80052aa:	9008      	str	r0, [sp, #32]
 80052ac:	2800      	cmp	r0, #0
 80052ae:	f43f aeb6 	beq.w	800501e <_strtod_l+0x4a6>
 80052b2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80052b4:	4640      	mov	r0, r8
 80052b6:	f001 f858 	bl	800636a <_Bfree>
 80052ba:	9b08      	ldr	r3, [sp, #32]
 80052bc:	931a      	str	r3, [sp, #104]	; 0x68
 80052be:	2f00      	cmp	r7, #0
 80052c0:	dc6f      	bgt.n	80053a2 <_strtod_l+0x82a>
 80052c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d175      	bne.n	80053b4 <_strtod_l+0x83c>
 80052c8:	2c00      	cmp	r4, #0
 80052ca:	dd08      	ble.n	80052de <_strtod_l+0x766>
 80052cc:	4622      	mov	r2, r4
 80052ce:	9906      	ldr	r1, [sp, #24]
 80052d0:	4640      	mov	r0, r8
 80052d2:	f001 fa0b 	bl	80066ec <__lshift>
 80052d6:	9006      	str	r0, [sp, #24]
 80052d8:	2800      	cmp	r0, #0
 80052da:	f43f aea0 	beq.w	800501e <_strtod_l+0x4a6>
 80052de:	2e00      	cmp	r6, #0
 80052e0:	dd08      	ble.n	80052f4 <_strtod_l+0x77c>
 80052e2:	4632      	mov	r2, r6
 80052e4:	9904      	ldr	r1, [sp, #16]
 80052e6:	4640      	mov	r0, r8
 80052e8:	f001 fa00 	bl	80066ec <__lshift>
 80052ec:	9004      	str	r0, [sp, #16]
 80052ee:	2800      	cmp	r0, #0
 80052f0:	f43f ae95 	beq.w	800501e <_strtod_l+0x4a6>
 80052f4:	9a06      	ldr	r2, [sp, #24]
 80052f6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80052f8:	4640      	mov	r0, r8
 80052fa:	f001 fa62 	bl	80067c2 <__mdiff>
 80052fe:	4681      	mov	r9, r0
 8005300:	2800      	cmp	r0, #0
 8005302:	f43f ae8c 	beq.w	800501e <_strtod_l+0x4a6>
 8005306:	2400      	movs	r4, #0
 8005308:	68c3      	ldr	r3, [r0, #12]
 800530a:	9904      	ldr	r1, [sp, #16]
 800530c:	60c4      	str	r4, [r0, #12]
 800530e:	9308      	str	r3, [sp, #32]
 8005310:	f001 fa3d 	bl	800678e <__mcmp>
 8005314:	42a0      	cmp	r0, r4
 8005316:	da5b      	bge.n	80053d0 <_strtod_l+0x858>
 8005318:	9b08      	ldr	r3, [sp, #32]
 800531a:	b9f3      	cbnz	r3, 800535a <_strtod_l+0x7e2>
 800531c:	f1ba 0f00 	cmp.w	sl, #0
 8005320:	d11b      	bne.n	800535a <_strtod_l+0x7e2>
 8005322:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005326:	b9c3      	cbnz	r3, 800535a <_strtod_l+0x7e2>
 8005328:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800532c:	0d1b      	lsrs	r3, r3, #20
 800532e:	051b      	lsls	r3, r3, #20
 8005330:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005334:	d911      	bls.n	800535a <_strtod_l+0x7e2>
 8005336:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800533a:	b91b      	cbnz	r3, 8005344 <_strtod_l+0x7cc>
 800533c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005340:	2b01      	cmp	r3, #1
 8005342:	dd0a      	ble.n	800535a <_strtod_l+0x7e2>
 8005344:	4649      	mov	r1, r9
 8005346:	2201      	movs	r2, #1
 8005348:	4640      	mov	r0, r8
 800534a:	f001 f9cf 	bl	80066ec <__lshift>
 800534e:	9904      	ldr	r1, [sp, #16]
 8005350:	4681      	mov	r9, r0
 8005352:	f001 fa1c 	bl	800678e <__mcmp>
 8005356:	2800      	cmp	r0, #0
 8005358:	dc6b      	bgt.n	8005432 <_strtod_l+0x8ba>
 800535a:	9b05      	ldr	r3, [sp, #20]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d175      	bne.n	800544c <_strtod_l+0x8d4>
 8005360:	e668      	b.n	8005034 <_strtod_l+0x4bc>
 8005362:	07e2      	lsls	r2, r4, #31
 8005364:	d504      	bpl.n	8005370 <_strtod_l+0x7f8>
 8005366:	e9d6 2300 	ldrd	r2, r3, [r6]
 800536a:	f7fb f8b1 	bl	80004d0 <__aeabi_dmul>
 800536e:	2301      	movs	r3, #1
 8005370:	1064      	asrs	r4, r4, #1
 8005372:	3608      	adds	r6, #8
 8005374:	e6e9      	b.n	800514a <_strtod_l+0x5d2>
 8005376:	f04f 32ff 	mov.w	r2, #4294967295
 800537a:	fa02 f303 	lsl.w	r3, r2, r3
 800537e:	ea03 0a0a 	and.w	sl, r3, sl
 8005382:	e702      	b.n	800518a <_strtod_l+0x612>
 8005384:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005388:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800538c:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005390:	35e2      	adds	r5, #226	; 0xe2
 8005392:	fa07 f505 	lsl.w	r5, r7, r5
 8005396:	9714      	str	r7, [sp, #80]	; 0x50
 8005398:	e767      	b.n	800526a <_strtod_l+0x6f2>
 800539a:	2301      	movs	r3, #1
 800539c:	2500      	movs	r5, #0
 800539e:	9314      	str	r3, [sp, #80]	; 0x50
 80053a0:	e763      	b.n	800526a <_strtod_l+0x6f2>
 80053a2:	463a      	mov	r2, r7
 80053a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80053a6:	4640      	mov	r0, r8
 80053a8:	f001 f9a0 	bl	80066ec <__lshift>
 80053ac:	901a      	str	r0, [sp, #104]	; 0x68
 80053ae:	2800      	cmp	r0, #0
 80053b0:	d187      	bne.n	80052c2 <_strtod_l+0x74a>
 80053b2:	e634      	b.n	800501e <_strtod_l+0x4a6>
 80053b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80053b6:	9906      	ldr	r1, [sp, #24]
 80053b8:	4640      	mov	r0, r8
 80053ba:	f001 f949 	bl	8006650 <__pow5mult>
 80053be:	9006      	str	r0, [sp, #24]
 80053c0:	2800      	cmp	r0, #0
 80053c2:	d181      	bne.n	80052c8 <_strtod_l+0x750>
 80053c4:	e62b      	b.n	800501e <_strtod_l+0x4a6>
 80053c6:	bf00      	nop
 80053c8:	080071f0 	.word	0x080071f0
 80053cc:	fffffc02 	.word	0xfffffc02
 80053d0:	f040 8086 	bne.w	80054e0 <_strtod_l+0x968>
 80053d4:	9a08      	ldr	r2, [sp, #32]
 80053d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80053da:	b332      	cbz	r2, 800542a <_strtod_l+0x8b2>
 80053dc:	4aac      	ldr	r2, [pc, #688]	; (8005690 <_strtod_l+0xb18>)
 80053de:	4659      	mov	r1, fp
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d152      	bne.n	800548a <_strtod_l+0x912>
 80053e4:	9b05      	ldr	r3, [sp, #20]
 80053e6:	4650      	mov	r0, sl
 80053e8:	b1d3      	cbz	r3, 8005420 <_strtod_l+0x8a8>
 80053ea:	4aaa      	ldr	r2, [pc, #680]	; (8005694 <_strtod_l+0xb1c>)
 80053ec:	f04f 34ff 	mov.w	r4, #4294967295
 80053f0:	400a      	ands	r2, r1
 80053f2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80053f6:	d816      	bhi.n	8005426 <_strtod_l+0x8ae>
 80053f8:	0d12      	lsrs	r2, r2, #20
 80053fa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80053fe:	fa04 f303 	lsl.w	r3, r4, r3
 8005402:	4283      	cmp	r3, r0
 8005404:	d141      	bne.n	800548a <_strtod_l+0x912>
 8005406:	4aa4      	ldr	r2, [pc, #656]	; (8005698 <_strtod_l+0xb20>)
 8005408:	4291      	cmp	r1, r2
 800540a:	d102      	bne.n	8005412 <_strtod_l+0x89a>
 800540c:	3301      	adds	r3, #1
 800540e:	f43f ae06 	beq.w	800501e <_strtod_l+0x4a6>
 8005412:	4ba0      	ldr	r3, [pc, #640]	; (8005694 <_strtod_l+0xb1c>)
 8005414:	f04f 0a00 	mov.w	sl, #0
 8005418:	400b      	ands	r3, r1
 800541a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800541e:	e79c      	b.n	800535a <_strtod_l+0x7e2>
 8005420:	f04f 33ff 	mov.w	r3, #4294967295
 8005424:	e7ed      	b.n	8005402 <_strtod_l+0x88a>
 8005426:	4623      	mov	r3, r4
 8005428:	e7eb      	b.n	8005402 <_strtod_l+0x88a>
 800542a:	bb73      	cbnz	r3, 800548a <_strtod_l+0x912>
 800542c:	f1ba 0f00 	cmp.w	sl, #0
 8005430:	d12b      	bne.n	800548a <_strtod_l+0x912>
 8005432:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005436:	9a05      	ldr	r2, [sp, #20]
 8005438:	0d1b      	lsrs	r3, r3, #20
 800543a:	051b      	lsls	r3, r3, #20
 800543c:	b1e2      	cbz	r2, 8005478 <_strtod_l+0x900>
 800543e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005442:	dc19      	bgt.n	8005478 <_strtod_l+0x900>
 8005444:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 8005448:	f77f ae5d 	ble.w	8005106 <_strtod_l+0x58e>
 800544c:	4b93      	ldr	r3, [pc, #588]	; (800569c <_strtod_l+0xb24>)
 800544e:	4650      	mov	r0, sl
 8005450:	930d      	str	r3, [sp, #52]	; 0x34
 8005452:	2300      	movs	r3, #0
 8005454:	930c      	str	r3, [sp, #48]	; 0x30
 8005456:	4659      	mov	r1, fp
 8005458:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800545c:	f7fb f838 	bl	80004d0 <__aeabi_dmul>
 8005460:	4682      	mov	sl, r0
 8005462:	468b      	mov	fp, r1
 8005464:	2900      	cmp	r1, #0
 8005466:	f47f ade5 	bne.w	8005034 <_strtod_l+0x4bc>
 800546a:	2800      	cmp	r0, #0
 800546c:	f47f ade2 	bne.w	8005034 <_strtod_l+0x4bc>
 8005470:	2322      	movs	r3, #34	; 0x22
 8005472:	f8c8 3000 	str.w	r3, [r8]
 8005476:	e5dd      	b.n	8005034 <_strtod_l+0x4bc>
 8005478:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800547c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005480:	f04f 3aff 	mov.w	sl, #4294967295
 8005484:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005488:	e767      	b.n	800535a <_strtod_l+0x7e2>
 800548a:	b19d      	cbz	r5, 80054b4 <_strtod_l+0x93c>
 800548c:	ea15 0f0b 	tst.w	r5, fp
 8005490:	f43f af63 	beq.w	800535a <_strtod_l+0x7e2>
 8005494:	9b08      	ldr	r3, [sp, #32]
 8005496:	9a05      	ldr	r2, [sp, #20]
 8005498:	4650      	mov	r0, sl
 800549a:	4659      	mov	r1, fp
 800549c:	b173      	cbz	r3, 80054bc <_strtod_l+0x944>
 800549e:	f7ff fb4a 	bl	8004b36 <sulp>
 80054a2:	4602      	mov	r2, r0
 80054a4:	460b      	mov	r3, r1
 80054a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80054aa:	f7fa fe5f 	bl	800016c <__adddf3>
 80054ae:	4682      	mov	sl, r0
 80054b0:	468b      	mov	fp, r1
 80054b2:	e752      	b.n	800535a <_strtod_l+0x7e2>
 80054b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80054b6:	ea13 0f0a 	tst.w	r3, sl
 80054ba:	e7e9      	b.n	8005490 <_strtod_l+0x918>
 80054bc:	f7ff fb3b 	bl	8004b36 <sulp>
 80054c0:	4602      	mov	r2, r0
 80054c2:	460b      	mov	r3, r1
 80054c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80054c8:	f7fa fe4e 	bl	8000168 <__aeabi_dsub>
 80054cc:	2200      	movs	r2, #0
 80054ce:	2300      	movs	r3, #0
 80054d0:	4682      	mov	sl, r0
 80054d2:	468b      	mov	fp, r1
 80054d4:	f7fb fa64 	bl	80009a0 <__aeabi_dcmpeq>
 80054d8:	2800      	cmp	r0, #0
 80054da:	f47f ae14 	bne.w	8005106 <_strtod_l+0x58e>
 80054de:	e73c      	b.n	800535a <_strtod_l+0x7e2>
 80054e0:	9904      	ldr	r1, [sp, #16]
 80054e2:	4648      	mov	r0, r9
 80054e4:	f001 fa91 	bl	8006a0a <__ratio>
 80054e8:	2200      	movs	r2, #0
 80054ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80054ee:	4606      	mov	r6, r0
 80054f0:	460f      	mov	r7, r1
 80054f2:	f7fb fa69 	bl	80009c8 <__aeabi_dcmple>
 80054f6:	2800      	cmp	r0, #0
 80054f8:	d070      	beq.n	80055dc <_strtod_l+0xa64>
 80054fa:	9b08      	ldr	r3, [sp, #32]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d043      	beq.n	8005588 <_strtod_l+0xa10>
 8005500:	2600      	movs	r6, #0
 8005502:	4f67      	ldr	r7, [pc, #412]	; (80056a0 <_strtod_l+0xb28>)
 8005504:	4d66      	ldr	r5, [pc, #408]	; (80056a0 <_strtod_l+0xb28>)
 8005506:	4b63      	ldr	r3, [pc, #396]	; (8005694 <_strtod_l+0xb1c>)
 8005508:	ea0b 0303 	and.w	r3, fp, r3
 800550c:	9314      	str	r3, [sp, #80]	; 0x50
 800550e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005510:	4b64      	ldr	r3, [pc, #400]	; (80056a4 <_strtod_l+0xb2c>)
 8005512:	429a      	cmp	r2, r3
 8005514:	f040 80ce 	bne.w	80056b4 <_strtod_l+0xb3c>
 8005518:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800551c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005520:	4650      	mov	r0, sl
 8005522:	4659      	mov	r1, fp
 8005524:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005528:	f001 f9aa 	bl	8006880 <__ulp>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	4630      	mov	r0, r6
 8005532:	4639      	mov	r1, r7
 8005534:	f7fa ffcc 	bl	80004d0 <__aeabi_dmul>
 8005538:	4652      	mov	r2, sl
 800553a:	465b      	mov	r3, fp
 800553c:	f7fa fe16 	bl	800016c <__adddf3>
 8005540:	4a54      	ldr	r2, [pc, #336]	; (8005694 <_strtod_l+0xb1c>)
 8005542:	4b59      	ldr	r3, [pc, #356]	; (80056a8 <_strtod_l+0xb30>)
 8005544:	400a      	ands	r2, r1
 8005546:	429a      	cmp	r2, r3
 8005548:	4682      	mov	sl, r0
 800554a:	d95d      	bls.n	8005608 <_strtod_l+0xa90>
 800554c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800554e:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
 8005552:	429a      	cmp	r2, r3
 8005554:	d103      	bne.n	800555e <_strtod_l+0x9e6>
 8005556:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005558:	3301      	adds	r3, #1
 800555a:	f43f ad60 	beq.w	800501e <_strtod_l+0x4a6>
 800555e:	f04f 3aff 	mov.w	sl, #4294967295
 8005562:	f8df b134 	ldr.w	fp, [pc, #308]	; 8005698 <_strtod_l+0xb20>
 8005566:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005568:	4640      	mov	r0, r8
 800556a:	f000 fefe 	bl	800636a <_Bfree>
 800556e:	9906      	ldr	r1, [sp, #24]
 8005570:	4640      	mov	r0, r8
 8005572:	f000 fefa 	bl	800636a <_Bfree>
 8005576:	9904      	ldr	r1, [sp, #16]
 8005578:	4640      	mov	r0, r8
 800557a:	f000 fef6 	bl	800636a <_Bfree>
 800557e:	4649      	mov	r1, r9
 8005580:	4640      	mov	r0, r8
 8005582:	f000 fef2 	bl	800636a <_Bfree>
 8005586:	e622      	b.n	80051ce <_strtod_l+0x656>
 8005588:	f1ba 0f00 	cmp.w	sl, #0
 800558c:	d118      	bne.n	80055c0 <_strtod_l+0xa48>
 800558e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005592:	b9e3      	cbnz	r3, 80055ce <_strtod_l+0xa56>
 8005594:	2200      	movs	r2, #0
 8005596:	4b42      	ldr	r3, [pc, #264]	; (80056a0 <_strtod_l+0xb28>)
 8005598:	4630      	mov	r0, r6
 800559a:	4639      	mov	r1, r7
 800559c:	f7fb fa0a 	bl	80009b4 <__aeabi_dcmplt>
 80055a0:	b9c8      	cbnz	r0, 80055d6 <_strtod_l+0xa5e>
 80055a2:	2200      	movs	r2, #0
 80055a4:	4b41      	ldr	r3, [pc, #260]	; (80056ac <_strtod_l+0xb34>)
 80055a6:	4630      	mov	r0, r6
 80055a8:	4639      	mov	r1, r7
 80055aa:	f7fa ff91 	bl	80004d0 <__aeabi_dmul>
 80055ae:	4604      	mov	r4, r0
 80055b0:	460d      	mov	r5, r1
 80055b2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80055b6:	9416      	str	r4, [sp, #88]	; 0x58
 80055b8:	9317      	str	r3, [sp, #92]	; 0x5c
 80055ba:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80055be:	e7a2      	b.n	8005506 <_strtod_l+0x98e>
 80055c0:	f1ba 0f01 	cmp.w	sl, #1
 80055c4:	d103      	bne.n	80055ce <_strtod_l+0xa56>
 80055c6:	f1bb 0f00 	cmp.w	fp, #0
 80055ca:	f43f ad9c 	beq.w	8005106 <_strtod_l+0x58e>
 80055ce:	2600      	movs	r6, #0
 80055d0:	4f37      	ldr	r7, [pc, #220]	; (80056b0 <_strtod_l+0xb38>)
 80055d2:	2400      	movs	r4, #0
 80055d4:	e796      	b.n	8005504 <_strtod_l+0x98c>
 80055d6:	9c08      	ldr	r4, [sp, #32]
 80055d8:	4d34      	ldr	r5, [pc, #208]	; (80056ac <_strtod_l+0xb34>)
 80055da:	e7ea      	b.n	80055b2 <_strtod_l+0xa3a>
 80055dc:	4b33      	ldr	r3, [pc, #204]	; (80056ac <_strtod_l+0xb34>)
 80055de:	2200      	movs	r2, #0
 80055e0:	4630      	mov	r0, r6
 80055e2:	4639      	mov	r1, r7
 80055e4:	f7fa ff74 	bl	80004d0 <__aeabi_dmul>
 80055e8:	9b08      	ldr	r3, [sp, #32]
 80055ea:	4604      	mov	r4, r0
 80055ec:	460d      	mov	r5, r1
 80055ee:	b933      	cbnz	r3, 80055fe <_strtod_l+0xa86>
 80055f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80055f4:	9010      	str	r0, [sp, #64]	; 0x40
 80055f6:	9311      	str	r3, [sp, #68]	; 0x44
 80055f8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80055fc:	e783      	b.n	8005506 <_strtod_l+0x98e>
 80055fe:	4602      	mov	r2, r0
 8005600:	460b      	mov	r3, r1
 8005602:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005606:	e7f7      	b.n	80055f8 <_strtod_l+0xa80>
 8005608:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
 800560c:	9b05      	ldr	r3, [sp, #20]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1a9      	bne.n	8005566 <_strtod_l+0x9ee>
 8005612:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005616:	0d1b      	lsrs	r3, r3, #20
 8005618:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800561a:	051b      	lsls	r3, r3, #20
 800561c:	429a      	cmp	r2, r3
 800561e:	465e      	mov	r6, fp
 8005620:	d1a1      	bne.n	8005566 <_strtod_l+0x9ee>
 8005622:	4629      	mov	r1, r5
 8005624:	4620      	mov	r0, r4
 8005626:	f7fb f9ed 	bl	8000a04 <__aeabi_d2iz>
 800562a:	f7fa feeb 	bl	8000404 <__aeabi_i2d>
 800562e:	460b      	mov	r3, r1
 8005630:	4602      	mov	r2, r0
 8005632:	4629      	mov	r1, r5
 8005634:	4620      	mov	r0, r4
 8005636:	f7fa fd97 	bl	8000168 <__aeabi_dsub>
 800563a:	9b08      	ldr	r3, [sp, #32]
 800563c:	4604      	mov	r4, r0
 800563e:	460d      	mov	r5, r1
 8005640:	b933      	cbnz	r3, 8005650 <_strtod_l+0xad8>
 8005642:	f1ba 0f00 	cmp.w	sl, #0
 8005646:	d103      	bne.n	8005650 <_strtod_l+0xad8>
 8005648:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800564c:	2e00      	cmp	r6, #0
 800564e:	d06c      	beq.n	800572a <_strtod_l+0xbb2>
 8005650:	a30b      	add	r3, pc, #44	; (adr r3, 8005680 <_strtod_l+0xb08>)
 8005652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005656:	4620      	mov	r0, r4
 8005658:	4629      	mov	r1, r5
 800565a:	f7fb f9ab 	bl	80009b4 <__aeabi_dcmplt>
 800565e:	2800      	cmp	r0, #0
 8005660:	f47f ace8 	bne.w	8005034 <_strtod_l+0x4bc>
 8005664:	a308      	add	r3, pc, #32	; (adr r3, 8005688 <_strtod_l+0xb10>)
 8005666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566a:	4620      	mov	r0, r4
 800566c:	4629      	mov	r1, r5
 800566e:	f7fb f9bf 	bl	80009f0 <__aeabi_dcmpgt>
 8005672:	2800      	cmp	r0, #0
 8005674:	f43f af77 	beq.w	8005566 <_strtod_l+0x9ee>
 8005678:	e4dc      	b.n	8005034 <_strtod_l+0x4bc>
 800567a:	bf00      	nop
 800567c:	f3af 8000 	nop.w
 8005680:	94a03595 	.word	0x94a03595
 8005684:	3fdfffff 	.word	0x3fdfffff
 8005688:	35afe535 	.word	0x35afe535
 800568c:	3fe00000 	.word	0x3fe00000
 8005690:	000fffff 	.word	0x000fffff
 8005694:	7ff00000 	.word	0x7ff00000
 8005698:	7fefffff 	.word	0x7fefffff
 800569c:	39500000 	.word	0x39500000
 80056a0:	3ff00000 	.word	0x3ff00000
 80056a4:	7fe00000 	.word	0x7fe00000
 80056a8:	7c9fffff 	.word	0x7c9fffff
 80056ac:	3fe00000 	.word	0x3fe00000
 80056b0:	bff00000 	.word	0xbff00000
 80056b4:	9b05      	ldr	r3, [sp, #20]
 80056b6:	b313      	cbz	r3, 80056fe <_strtod_l+0xb86>
 80056b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80056ba:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80056be:	d81e      	bhi.n	80056fe <_strtod_l+0xb86>
 80056c0:	a325      	add	r3, pc, #148	; (adr r3, 8005758 <_strtod_l+0xbe0>)
 80056c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c6:	4620      	mov	r0, r4
 80056c8:	4629      	mov	r1, r5
 80056ca:	f7fb f97d 	bl	80009c8 <__aeabi_dcmple>
 80056ce:	b190      	cbz	r0, 80056f6 <_strtod_l+0xb7e>
 80056d0:	4629      	mov	r1, r5
 80056d2:	4620      	mov	r0, r4
 80056d4:	f7fb f9be 	bl	8000a54 <__aeabi_d2uiz>
 80056d8:	2800      	cmp	r0, #0
 80056da:	bf08      	it	eq
 80056dc:	2001      	moveq	r0, #1
 80056de:	f7fa fe81 	bl	80003e4 <__aeabi_ui2d>
 80056e2:	9b08      	ldr	r3, [sp, #32]
 80056e4:	4604      	mov	r4, r0
 80056e6:	460d      	mov	r5, r1
 80056e8:	b9d3      	cbnz	r3, 8005720 <_strtod_l+0xba8>
 80056ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80056ee:	9012      	str	r0, [sp, #72]	; 0x48
 80056f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80056f2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80056f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80056f8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80056fc:	1a9f      	subs	r7, r3, r2
 80056fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005702:	f001 f8bd 	bl	8006880 <__ulp>
 8005706:	4602      	mov	r2, r0
 8005708:	460b      	mov	r3, r1
 800570a:	4630      	mov	r0, r6
 800570c:	4639      	mov	r1, r7
 800570e:	f7fa fedf 	bl	80004d0 <__aeabi_dmul>
 8005712:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005716:	f7fa fd29 	bl	800016c <__adddf3>
 800571a:	4682      	mov	sl, r0
 800571c:	468b      	mov	fp, r1
 800571e:	e775      	b.n	800560c <_strtod_l+0xa94>
 8005720:	4602      	mov	r2, r0
 8005722:	460b      	mov	r3, r1
 8005724:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005728:	e7e3      	b.n	80056f2 <_strtod_l+0xb7a>
 800572a:	a30d      	add	r3, pc, #52	; (adr r3, 8005760 <_strtod_l+0xbe8>)
 800572c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005730:	f7fb f940 	bl	80009b4 <__aeabi_dcmplt>
 8005734:	e79d      	b.n	8005672 <_strtod_l+0xafa>
 8005736:	2300      	movs	r3, #0
 8005738:	9309      	str	r3, [sp, #36]	; 0x24
 800573a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800573c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800573e:	6013      	str	r3, [r2, #0]
 8005740:	f7ff ba5e 	b.w	8004c00 <_strtod_l+0x88>
 8005744:	2b65      	cmp	r3, #101	; 0x65
 8005746:	f04f 0200 	mov.w	r2, #0
 800574a:	f43f abae 	beq.w	8004eaa <_strtod_l+0x332>
 800574e:	4615      	mov	r5, r2
 8005750:	2101      	movs	r1, #1
 8005752:	f7ff bacd 	b.w	8004cf0 <_strtod_l+0x178>
 8005756:	bf00      	nop
 8005758:	ffc00000 	.word	0xffc00000
 800575c:	41dfffff 	.word	0x41dfffff
 8005760:	94a03595 	.word	0x94a03595
 8005764:	3fcfffff 	.word	0x3fcfffff

08005768 <strtod>:
 8005768:	4b06      	ldr	r3, [pc, #24]	; (8005784 <strtod+0x1c>)
 800576a:	b410      	push	{r4}
 800576c:	681c      	ldr	r4, [r3, #0]
 800576e:	4a06      	ldr	r2, [pc, #24]	; (8005788 <strtod+0x20>)
 8005770:	6a23      	ldr	r3, [r4, #32]
 8005772:	2b00      	cmp	r3, #0
 8005774:	bf08      	it	eq
 8005776:	4613      	moveq	r3, r2
 8005778:	460a      	mov	r2, r1
 800577a:	4601      	mov	r1, r0
 800577c:	4620      	mov	r0, r4
 800577e:	bc10      	pop	{r4}
 8005780:	f7ff b9fa 	b.w	8004b78 <_strtod_l>
 8005784:	2000042c 	.word	0x2000042c
 8005788:	20000520 	.word	0x20000520

0800578c <strtok>:
 800578c:	4b14      	ldr	r3, [pc, #80]	; (80057e0 <strtok+0x54>)
 800578e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005792:	681d      	ldr	r5, [r3, #0]
 8005794:	4606      	mov	r6, r0
 8005796:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
 800579a:	460f      	mov	r7, r1
 800579c:	b9bc      	cbnz	r4, 80057ce <strtok+0x42>
 800579e:	2050      	movs	r0, #80	; 0x50
 80057a0:	f7fe ff7a 	bl	8004698 <malloc>
 80057a4:	f8c5 00e8 	str.w	r0, [r5, #232]	; 0xe8
 80057a8:	6004      	str	r4, [r0, #0]
 80057aa:	6044      	str	r4, [r0, #4]
 80057ac:	6084      	str	r4, [r0, #8]
 80057ae:	60c4      	str	r4, [r0, #12]
 80057b0:	6104      	str	r4, [r0, #16]
 80057b2:	6144      	str	r4, [r0, #20]
 80057b4:	6184      	str	r4, [r0, #24]
 80057b6:	6284      	str	r4, [r0, #40]	; 0x28
 80057b8:	62c4      	str	r4, [r0, #44]	; 0x2c
 80057ba:	6304      	str	r4, [r0, #48]	; 0x30
 80057bc:	6344      	str	r4, [r0, #52]	; 0x34
 80057be:	6384      	str	r4, [r0, #56]	; 0x38
 80057c0:	63c4      	str	r4, [r0, #60]	; 0x3c
 80057c2:	6404      	str	r4, [r0, #64]	; 0x40
 80057c4:	6444      	str	r4, [r0, #68]	; 0x44
 80057c6:	6484      	str	r4, [r0, #72]	; 0x48
 80057c8:	64c4      	str	r4, [r0, #76]	; 0x4c
 80057ca:	7704      	strb	r4, [r0, #28]
 80057cc:	6244      	str	r4, [r0, #36]	; 0x24
 80057ce:	f8d5 20e8 	ldr.w	r2, [r5, #232]	; 0xe8
 80057d2:	4639      	mov	r1, r7
 80057d4:	4630      	mov	r0, r6
 80057d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057da:	2301      	movs	r3, #1
 80057dc:	f000 b802 	b.w	80057e4 <__strtok_r>
 80057e0:	2000042c 	.word	0x2000042c

080057e4 <__strtok_r>:
 80057e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057e6:	b918      	cbnz	r0, 80057f0 <__strtok_r+0xc>
 80057e8:	6810      	ldr	r0, [r2, #0]
 80057ea:	b908      	cbnz	r0, 80057f0 <__strtok_r+0xc>
 80057ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057ee:	4620      	mov	r0, r4
 80057f0:	4604      	mov	r4, r0
 80057f2:	460f      	mov	r7, r1
 80057f4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80057f8:	f817 6b01 	ldrb.w	r6, [r7], #1
 80057fc:	b91e      	cbnz	r6, 8005806 <__strtok_r+0x22>
 80057fe:	b965      	cbnz	r5, 800581a <__strtok_r+0x36>
 8005800:	6015      	str	r5, [r2, #0]
 8005802:	4628      	mov	r0, r5
 8005804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005806:	42b5      	cmp	r5, r6
 8005808:	d1f6      	bne.n	80057f8 <__strtok_r+0x14>
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1ef      	bne.n	80057ee <__strtok_r+0xa>
 800580e:	6014      	str	r4, [r2, #0]
 8005810:	7003      	strb	r3, [r0, #0]
 8005812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005814:	461c      	mov	r4, r3
 8005816:	e00c      	b.n	8005832 <__strtok_r+0x4e>
 8005818:	b915      	cbnz	r5, 8005820 <__strtok_r+0x3c>
 800581a:	460e      	mov	r6, r1
 800581c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005820:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005824:	42ab      	cmp	r3, r5
 8005826:	d1f7      	bne.n	8005818 <__strtok_r+0x34>
 8005828:	2b00      	cmp	r3, #0
 800582a:	d0f3      	beq.n	8005814 <__strtok_r+0x30>
 800582c:	2300      	movs	r3, #0
 800582e:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005832:	6014      	str	r4, [r2, #0]
 8005834:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005836 <_strtol_l.isra.0>:
 8005836:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800583a:	4680      	mov	r8, r0
 800583c:	4689      	mov	r9, r1
 800583e:	4692      	mov	sl, r2
 8005840:	461f      	mov	r7, r3
 8005842:	468b      	mov	fp, r1
 8005844:	465d      	mov	r5, fp
 8005846:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005848:	f815 4b01 	ldrb.w	r4, [r5], #1
 800584c:	f000 fd34 	bl	80062b8 <__locale_ctype_ptr_l>
 8005850:	4420      	add	r0, r4
 8005852:	7846      	ldrb	r6, [r0, #1]
 8005854:	f016 0608 	ands.w	r6, r6, #8
 8005858:	d10b      	bne.n	8005872 <_strtol_l.isra.0+0x3c>
 800585a:	2c2d      	cmp	r4, #45	; 0x2d
 800585c:	d10b      	bne.n	8005876 <_strtol_l.isra.0+0x40>
 800585e:	2601      	movs	r6, #1
 8005860:	782c      	ldrb	r4, [r5, #0]
 8005862:	f10b 0502 	add.w	r5, fp, #2
 8005866:	b167      	cbz	r7, 8005882 <_strtol_l.isra.0+0x4c>
 8005868:	2f10      	cmp	r7, #16
 800586a:	d114      	bne.n	8005896 <_strtol_l.isra.0+0x60>
 800586c:	2c30      	cmp	r4, #48	; 0x30
 800586e:	d00a      	beq.n	8005886 <_strtol_l.isra.0+0x50>
 8005870:	e011      	b.n	8005896 <_strtol_l.isra.0+0x60>
 8005872:	46ab      	mov	fp, r5
 8005874:	e7e6      	b.n	8005844 <_strtol_l.isra.0+0xe>
 8005876:	2c2b      	cmp	r4, #43	; 0x2b
 8005878:	bf04      	itt	eq
 800587a:	782c      	ldrbeq	r4, [r5, #0]
 800587c:	f10b 0502 	addeq.w	r5, fp, #2
 8005880:	e7f1      	b.n	8005866 <_strtol_l.isra.0+0x30>
 8005882:	2c30      	cmp	r4, #48	; 0x30
 8005884:	d127      	bne.n	80058d6 <_strtol_l.isra.0+0xa0>
 8005886:	782b      	ldrb	r3, [r5, #0]
 8005888:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800588c:	2b58      	cmp	r3, #88	; 0x58
 800588e:	d14b      	bne.n	8005928 <_strtol_l.isra.0+0xf2>
 8005890:	2710      	movs	r7, #16
 8005892:	786c      	ldrb	r4, [r5, #1]
 8005894:	3502      	adds	r5, #2
 8005896:	2e00      	cmp	r6, #0
 8005898:	bf0c      	ite	eq
 800589a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800589e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80058a2:	2200      	movs	r2, #0
 80058a4:	fbb1 fef7 	udiv	lr, r1, r7
 80058a8:	4610      	mov	r0, r2
 80058aa:	fb07 1c1e 	mls	ip, r7, lr, r1
 80058ae:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80058b2:	2b09      	cmp	r3, #9
 80058b4:	d811      	bhi.n	80058da <_strtol_l.isra.0+0xa4>
 80058b6:	461c      	mov	r4, r3
 80058b8:	42a7      	cmp	r7, r4
 80058ba:	dd1d      	ble.n	80058f8 <_strtol_l.isra.0+0xc2>
 80058bc:	1c53      	adds	r3, r2, #1
 80058be:	d007      	beq.n	80058d0 <_strtol_l.isra.0+0x9a>
 80058c0:	4586      	cmp	lr, r0
 80058c2:	d316      	bcc.n	80058f2 <_strtol_l.isra.0+0xbc>
 80058c4:	d101      	bne.n	80058ca <_strtol_l.isra.0+0x94>
 80058c6:	45a4      	cmp	ip, r4
 80058c8:	db13      	blt.n	80058f2 <_strtol_l.isra.0+0xbc>
 80058ca:	2201      	movs	r2, #1
 80058cc:	fb00 4007 	mla	r0, r0, r7, r4
 80058d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058d4:	e7eb      	b.n	80058ae <_strtol_l.isra.0+0x78>
 80058d6:	270a      	movs	r7, #10
 80058d8:	e7dd      	b.n	8005896 <_strtol_l.isra.0+0x60>
 80058da:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80058de:	2b19      	cmp	r3, #25
 80058e0:	d801      	bhi.n	80058e6 <_strtol_l.isra.0+0xb0>
 80058e2:	3c37      	subs	r4, #55	; 0x37
 80058e4:	e7e8      	b.n	80058b8 <_strtol_l.isra.0+0x82>
 80058e6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80058ea:	2b19      	cmp	r3, #25
 80058ec:	d804      	bhi.n	80058f8 <_strtol_l.isra.0+0xc2>
 80058ee:	3c57      	subs	r4, #87	; 0x57
 80058f0:	e7e2      	b.n	80058b8 <_strtol_l.isra.0+0x82>
 80058f2:	f04f 32ff 	mov.w	r2, #4294967295
 80058f6:	e7eb      	b.n	80058d0 <_strtol_l.isra.0+0x9a>
 80058f8:	1c53      	adds	r3, r2, #1
 80058fa:	d108      	bne.n	800590e <_strtol_l.isra.0+0xd8>
 80058fc:	2322      	movs	r3, #34	; 0x22
 80058fe:	4608      	mov	r0, r1
 8005900:	f8c8 3000 	str.w	r3, [r8]
 8005904:	f1ba 0f00 	cmp.w	sl, #0
 8005908:	d107      	bne.n	800591a <_strtol_l.isra.0+0xe4>
 800590a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800590e:	b106      	cbz	r6, 8005912 <_strtol_l.isra.0+0xdc>
 8005910:	4240      	negs	r0, r0
 8005912:	f1ba 0f00 	cmp.w	sl, #0
 8005916:	d00c      	beq.n	8005932 <_strtol_l.isra.0+0xfc>
 8005918:	b122      	cbz	r2, 8005924 <_strtol_l.isra.0+0xee>
 800591a:	3d01      	subs	r5, #1
 800591c:	f8ca 5000 	str.w	r5, [sl]
 8005920:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005924:	464d      	mov	r5, r9
 8005926:	e7f9      	b.n	800591c <_strtol_l.isra.0+0xe6>
 8005928:	2430      	movs	r4, #48	; 0x30
 800592a:	2f00      	cmp	r7, #0
 800592c:	d1b3      	bne.n	8005896 <_strtol_l.isra.0+0x60>
 800592e:	2708      	movs	r7, #8
 8005930:	e7b1      	b.n	8005896 <_strtol_l.isra.0+0x60>
 8005932:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005938 <strtol>:
 8005938:	4b08      	ldr	r3, [pc, #32]	; (800595c <strtol+0x24>)
 800593a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800593c:	681c      	ldr	r4, [r3, #0]
 800593e:	4d08      	ldr	r5, [pc, #32]	; (8005960 <strtol+0x28>)
 8005940:	6a23      	ldr	r3, [r4, #32]
 8005942:	2b00      	cmp	r3, #0
 8005944:	bf08      	it	eq
 8005946:	462b      	moveq	r3, r5
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	4613      	mov	r3, r2
 800594c:	460a      	mov	r2, r1
 800594e:	4601      	mov	r1, r0
 8005950:	4620      	mov	r0, r4
 8005952:	f7ff ff70 	bl	8005836 <_strtol_l.isra.0>
 8005956:	b003      	add	sp, #12
 8005958:	bd30      	pop	{r4, r5, pc}
 800595a:	bf00      	nop
 800595c:	2000042c 	.word	0x2000042c
 8005960:	20000520 	.word	0x20000520

08005964 <__register_exitproc>:
 8005964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005968:	4d37      	ldr	r5, [pc, #220]	; (8005a48 <__register_exitproc+0xe4>)
 800596a:	4680      	mov	r8, r0
 800596c:	6828      	ldr	r0, [r5, #0]
 800596e:	4699      	mov	r9, r3
 8005970:	460f      	mov	r7, r1
 8005972:	4692      	mov	sl, r2
 8005974:	f000 fca5 	bl	80062c2 <__retarget_lock_acquire_recursive>
 8005978:	4b34      	ldr	r3, [pc, #208]	; (8005a4c <__register_exitproc+0xe8>)
 800597a:	681e      	ldr	r6, [r3, #0]
 800597c:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800597e:	b93c      	cbnz	r4, 8005990 <__register_exitproc+0x2c>
 8005980:	4b33      	ldr	r3, [pc, #204]	; (8005a50 <__register_exitproc+0xec>)
 8005982:	f106 044c 	add.w	r4, r6, #76	; 0x4c
 8005986:	64b4      	str	r4, [r6, #72]	; 0x48
 8005988:	b113      	cbz	r3, 8005990 <__register_exitproc+0x2c>
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f8c6 30d4 	str.w	r3, [r6, #212]	; 0xd4
 8005990:	6863      	ldr	r3, [r4, #4]
 8005992:	2b1f      	cmp	r3, #31
 8005994:	dd49      	ble.n	8005a2a <__register_exitproc+0xc6>
 8005996:	4b2f      	ldr	r3, [pc, #188]	; (8005a54 <__register_exitproc+0xf0>)
 8005998:	b933      	cbnz	r3, 80059a8 <__register_exitproc+0x44>
 800599a:	6828      	ldr	r0, [r5, #0]
 800599c:	f000 fc93 	bl	80062c6 <__retarget_lock_release_recursive>
 80059a0:	f04f 30ff 	mov.w	r0, #4294967295
 80059a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a8:	208c      	movs	r0, #140	; 0x8c
 80059aa:	f7fe fe75 	bl	8004698 <malloc>
 80059ae:	4604      	mov	r4, r0
 80059b0:	2800      	cmp	r0, #0
 80059b2:	d0f2      	beq.n	800599a <__register_exitproc+0x36>
 80059b4:	2200      	movs	r2, #0
 80059b6:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80059b8:	6042      	str	r2, [r0, #4]
 80059ba:	6003      	str	r3, [r0, #0]
 80059bc:	64b0      	str	r0, [r6, #72]	; 0x48
 80059be:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 80059c2:	f1b8 0f00 	cmp.w	r8, #0
 80059c6:	d024      	beq.n	8005a12 <__register_exitproc+0xae>
 80059c8:	f44f 7084 	mov.w	r0, #264	; 0x108
 80059cc:	f7fe fe64 	bl	8004698 <malloc>
 80059d0:	2800      	cmp	r0, #0
 80059d2:	d034      	beq.n	8005a3e <__register_exitproc+0xda>
 80059d4:	2300      	movs	r3, #0
 80059d6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80059da:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 80059de:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80059e2:	2301      	movs	r3, #1
 80059e4:	6862      	ldr	r2, [r4, #4]
 80059e6:	f1b8 0f02 	cmp.w	r8, #2
 80059ea:	f840 a022 	str.w	sl, [r0, r2, lsl #2]
 80059ee:	fa03 f302 	lsl.w	r3, r3, r2
 80059f2:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80059f6:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 80059fa:	ea42 0203 	orr.w	r2, r2, r3
 80059fe:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 8005a02:	f8c1 9080 	str.w	r9, [r1, #128]	; 0x80
 8005a06:	bf02      	ittt	eq
 8005a08:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 8005a0c:	4313      	orreq	r3, r2
 8005a0e:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8005a12:	6863      	ldr	r3, [r4, #4]
 8005a14:	6828      	ldr	r0, [r5, #0]
 8005a16:	1c5a      	adds	r2, r3, #1
 8005a18:	3302      	adds	r3, #2
 8005a1a:	6062      	str	r2, [r4, #4]
 8005a1c:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
 8005a20:	f000 fc51 	bl	80062c6 <__retarget_lock_release_recursive>
 8005a24:	2000      	movs	r0, #0
 8005a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a2a:	f1b8 0f00 	cmp.w	r8, #0
 8005a2e:	d0f0      	beq.n	8005a12 <__register_exitproc+0xae>
 8005a30:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8005a34:	2800      	cmp	r0, #0
 8005a36:	d1d4      	bne.n	80059e2 <__register_exitproc+0x7e>
 8005a38:	4b06      	ldr	r3, [pc, #24]	; (8005a54 <__register_exitproc+0xf0>)
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1c4      	bne.n	80059c8 <__register_exitproc+0x64>
 8005a3e:	6828      	ldr	r0, [r5, #0]
 8005a40:	f000 fc40 	bl	80062c4 <__retarget_lock_release>
 8005a44:	e7ac      	b.n	80059a0 <__register_exitproc+0x3c>
 8005a46:	bf00      	nop
 8005a48:	20000428 	.word	0x20000428
 8005a4c:	08007218 	.word	0x08007218
 8005a50:	080071b8 	.word	0x080071b8
 8005a54:	08004699 	.word	0x08004699

08005a58 <_malloc_trim_r>:
 8005a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a5c:	4689      	mov	r9, r1
 8005a5e:	4f25      	ldr	r7, [pc, #148]	; (8005af4 <_malloc_trim_r+0x9c>)
 8005a60:	4606      	mov	r6, r0
 8005a62:	f7ff f83d 	bl	8004ae0 <__malloc_lock>
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8005b00 <_malloc_trim_r+0xa8>
 8005a6c:	685d      	ldr	r5, [r3, #4]
 8005a6e:	f1a8 0411 	sub.w	r4, r8, #17
 8005a72:	f025 0503 	bic.w	r5, r5, #3
 8005a76:	eba4 0409 	sub.w	r4, r4, r9
 8005a7a:	442c      	add	r4, r5
 8005a7c:	fbb4 f4f8 	udiv	r4, r4, r8
 8005a80:	3c01      	subs	r4, #1
 8005a82:	fb08 f404 	mul.w	r4, r8, r4
 8005a86:	4544      	cmp	r4, r8
 8005a88:	da05      	bge.n	8005a96 <_malloc_trim_r+0x3e>
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	f7ff f82e 	bl	8004aec <__malloc_unlock>
 8005a90:	2000      	movs	r0, #0
 8005a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a96:	2100      	movs	r1, #0
 8005a98:	4630      	mov	r0, r6
 8005a9a:	f7ff f82d 	bl	8004af8 <_sbrk_r>
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	442b      	add	r3, r5
 8005aa2:	4298      	cmp	r0, r3
 8005aa4:	d1f1      	bne.n	8005a8a <_malloc_trim_r+0x32>
 8005aa6:	4261      	negs	r1, r4
 8005aa8:	4630      	mov	r0, r6
 8005aaa:	f7ff f825 	bl	8004af8 <_sbrk_r>
 8005aae:	3001      	adds	r0, #1
 8005ab0:	d110      	bne.n	8005ad4 <_malloc_trim_r+0x7c>
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	4630      	mov	r0, r6
 8005ab6:	f7ff f81f 	bl	8004af8 <_sbrk_r>
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	1a83      	subs	r3, r0, r2
 8005abe:	2b0f      	cmp	r3, #15
 8005ac0:	dde3      	ble.n	8005a8a <_malloc_trim_r+0x32>
 8005ac2:	490d      	ldr	r1, [pc, #52]	; (8005af8 <_malloc_trim_r+0xa0>)
 8005ac4:	f043 0301 	orr.w	r3, r3, #1
 8005ac8:	6809      	ldr	r1, [r1, #0]
 8005aca:	6053      	str	r3, [r2, #4]
 8005acc:	1a40      	subs	r0, r0, r1
 8005ace:	490b      	ldr	r1, [pc, #44]	; (8005afc <_malloc_trim_r+0xa4>)
 8005ad0:	6008      	str	r0, [r1, #0]
 8005ad2:	e7da      	b.n	8005a8a <_malloc_trim_r+0x32>
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	4a09      	ldr	r2, [pc, #36]	; (8005afc <_malloc_trim_r+0xa4>)
 8005ad8:	1b2d      	subs	r5, r5, r4
 8005ada:	f045 0501 	orr.w	r5, r5, #1
 8005ade:	605d      	str	r5, [r3, #4]
 8005ae0:	6813      	ldr	r3, [r2, #0]
 8005ae2:	4630      	mov	r0, r6
 8005ae4:	1b1c      	subs	r4, r3, r4
 8005ae6:	6014      	str	r4, [r2, #0]
 8005ae8:	f7ff f800 	bl	8004aec <__malloc_unlock>
 8005aec:	2001      	movs	r0, #1
 8005aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005af2:	bf00      	nop
 8005af4:	20000018 	.word	0x20000018
 8005af8:	20000420 	.word	0x20000420
 8005afc:	20000aa8 	.word	0x20000aa8
 8005b00:	00000080 	.word	0x00000080

08005b04 <_free_r>:
 8005b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b08:	4604      	mov	r4, r0
 8005b0a:	4688      	mov	r8, r1
 8005b0c:	2900      	cmp	r1, #0
 8005b0e:	f000 80ab 	beq.w	8005c68 <_free_r+0x164>
 8005b12:	f7fe ffe5 	bl	8004ae0 <__malloc_lock>
 8005b16:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8005b1a:	4d54      	ldr	r5, [pc, #336]	; (8005c6c <_free_r+0x168>)
 8005b1c:	f022 0001 	bic.w	r0, r2, #1
 8005b20:	f1a8 0308 	sub.w	r3, r8, #8
 8005b24:	181f      	adds	r7, r3, r0
 8005b26:	68a9      	ldr	r1, [r5, #8]
 8005b28:	687e      	ldr	r6, [r7, #4]
 8005b2a:	428f      	cmp	r7, r1
 8005b2c:	f026 0603 	bic.w	r6, r6, #3
 8005b30:	f002 0201 	and.w	r2, r2, #1
 8005b34:	d11b      	bne.n	8005b6e <_free_r+0x6a>
 8005b36:	4430      	add	r0, r6
 8005b38:	b93a      	cbnz	r2, 8005b4a <_free_r+0x46>
 8005b3a:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8005b3e:	1a9b      	subs	r3, r3, r2
 8005b40:	6899      	ldr	r1, [r3, #8]
 8005b42:	4410      	add	r0, r2
 8005b44:	68da      	ldr	r2, [r3, #12]
 8005b46:	60ca      	str	r2, [r1, #12]
 8005b48:	6091      	str	r1, [r2, #8]
 8005b4a:	f040 0201 	orr.w	r2, r0, #1
 8005b4e:	605a      	str	r2, [r3, #4]
 8005b50:	60ab      	str	r3, [r5, #8]
 8005b52:	4b47      	ldr	r3, [pc, #284]	; (8005c70 <_free_r+0x16c>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4298      	cmp	r0, r3
 8005b58:	d304      	bcc.n	8005b64 <_free_r+0x60>
 8005b5a:	4b46      	ldr	r3, [pc, #280]	; (8005c74 <_free_r+0x170>)
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	6819      	ldr	r1, [r3, #0]
 8005b60:	f7ff ff7a 	bl	8005a58 <_malloc_trim_r>
 8005b64:	4620      	mov	r0, r4
 8005b66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b6a:	f7fe bfbf 	b.w	8004aec <__malloc_unlock>
 8005b6e:	607e      	str	r6, [r7, #4]
 8005b70:	2a00      	cmp	r2, #0
 8005b72:	d139      	bne.n	8005be8 <_free_r+0xe4>
 8005b74:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8005b78:	f105 0e08 	add.w	lr, r5, #8
 8005b7c:	1a5b      	subs	r3, r3, r1
 8005b7e:	4408      	add	r0, r1
 8005b80:	6899      	ldr	r1, [r3, #8]
 8005b82:	4571      	cmp	r1, lr
 8005b84:	d032      	beq.n	8005bec <_free_r+0xe8>
 8005b86:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8005b8a:	f8c1 e00c 	str.w	lr, [r1, #12]
 8005b8e:	f8ce 1008 	str.w	r1, [lr, #8]
 8005b92:	19b9      	adds	r1, r7, r6
 8005b94:	6849      	ldr	r1, [r1, #4]
 8005b96:	07c9      	lsls	r1, r1, #31
 8005b98:	d40a      	bmi.n	8005bb0 <_free_r+0xac>
 8005b9a:	4430      	add	r0, r6
 8005b9c:	68b9      	ldr	r1, [r7, #8]
 8005b9e:	bb3a      	cbnz	r2, 8005bf0 <_free_r+0xec>
 8005ba0:	4e35      	ldr	r6, [pc, #212]	; (8005c78 <_free_r+0x174>)
 8005ba2:	42b1      	cmp	r1, r6
 8005ba4:	d124      	bne.n	8005bf0 <_free_r+0xec>
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	616b      	str	r3, [r5, #20]
 8005baa:	612b      	str	r3, [r5, #16]
 8005bac:	60d9      	str	r1, [r3, #12]
 8005bae:	6099      	str	r1, [r3, #8]
 8005bb0:	f040 0101 	orr.w	r1, r0, #1
 8005bb4:	6059      	str	r1, [r3, #4]
 8005bb6:	5018      	str	r0, [r3, r0]
 8005bb8:	2a00      	cmp	r2, #0
 8005bba:	d1d3      	bne.n	8005b64 <_free_r+0x60>
 8005bbc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005bc0:	d21a      	bcs.n	8005bf8 <_free_r+0xf4>
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	08c0      	lsrs	r0, r0, #3
 8005bc6:	1081      	asrs	r1, r0, #2
 8005bc8:	408a      	lsls	r2, r1
 8005bca:	6869      	ldr	r1, [r5, #4]
 8005bcc:	3001      	adds	r0, #1
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	606a      	str	r2, [r5, #4]
 8005bd2:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8005bd6:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8005bda:	3a08      	subs	r2, #8
 8005bdc:	60da      	str	r2, [r3, #12]
 8005bde:	6099      	str	r1, [r3, #8]
 8005be0:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8005be4:	60cb      	str	r3, [r1, #12]
 8005be6:	e7bd      	b.n	8005b64 <_free_r+0x60>
 8005be8:	2200      	movs	r2, #0
 8005bea:	e7d2      	b.n	8005b92 <_free_r+0x8e>
 8005bec:	2201      	movs	r2, #1
 8005bee:	e7d0      	b.n	8005b92 <_free_r+0x8e>
 8005bf0:	68fe      	ldr	r6, [r7, #12]
 8005bf2:	60ce      	str	r6, [r1, #12]
 8005bf4:	60b1      	str	r1, [r6, #8]
 8005bf6:	e7db      	b.n	8005bb0 <_free_r+0xac>
 8005bf8:	0a42      	lsrs	r2, r0, #9
 8005bfa:	2a04      	cmp	r2, #4
 8005bfc:	d813      	bhi.n	8005c26 <_free_r+0x122>
 8005bfe:	0982      	lsrs	r2, r0, #6
 8005c00:	3238      	adds	r2, #56	; 0x38
 8005c02:	1c51      	adds	r1, r2, #1
 8005c04:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8005c08:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8005c0c:	428e      	cmp	r6, r1
 8005c0e:	d124      	bne.n	8005c5a <_free_r+0x156>
 8005c10:	2001      	movs	r0, #1
 8005c12:	1092      	asrs	r2, r2, #2
 8005c14:	fa00 f202 	lsl.w	r2, r0, r2
 8005c18:	6868      	ldr	r0, [r5, #4]
 8005c1a:	4302      	orrs	r2, r0
 8005c1c:	606a      	str	r2, [r5, #4]
 8005c1e:	60de      	str	r6, [r3, #12]
 8005c20:	6099      	str	r1, [r3, #8]
 8005c22:	60b3      	str	r3, [r6, #8]
 8005c24:	e7de      	b.n	8005be4 <_free_r+0xe0>
 8005c26:	2a14      	cmp	r2, #20
 8005c28:	d801      	bhi.n	8005c2e <_free_r+0x12a>
 8005c2a:	325b      	adds	r2, #91	; 0x5b
 8005c2c:	e7e9      	b.n	8005c02 <_free_r+0xfe>
 8005c2e:	2a54      	cmp	r2, #84	; 0x54
 8005c30:	d802      	bhi.n	8005c38 <_free_r+0x134>
 8005c32:	0b02      	lsrs	r2, r0, #12
 8005c34:	326e      	adds	r2, #110	; 0x6e
 8005c36:	e7e4      	b.n	8005c02 <_free_r+0xfe>
 8005c38:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005c3c:	d802      	bhi.n	8005c44 <_free_r+0x140>
 8005c3e:	0bc2      	lsrs	r2, r0, #15
 8005c40:	3277      	adds	r2, #119	; 0x77
 8005c42:	e7de      	b.n	8005c02 <_free_r+0xfe>
 8005c44:	f240 5154 	movw	r1, #1364	; 0x554
 8005c48:	428a      	cmp	r2, r1
 8005c4a:	bf9a      	itte	ls
 8005c4c:	0c82      	lsrls	r2, r0, #18
 8005c4e:	327c      	addls	r2, #124	; 0x7c
 8005c50:	227e      	movhi	r2, #126	; 0x7e
 8005c52:	e7d6      	b.n	8005c02 <_free_r+0xfe>
 8005c54:	6889      	ldr	r1, [r1, #8]
 8005c56:	428e      	cmp	r6, r1
 8005c58:	d004      	beq.n	8005c64 <_free_r+0x160>
 8005c5a:	684a      	ldr	r2, [r1, #4]
 8005c5c:	f022 0203 	bic.w	r2, r2, #3
 8005c60:	4290      	cmp	r0, r2
 8005c62:	d3f7      	bcc.n	8005c54 <_free_r+0x150>
 8005c64:	68ce      	ldr	r6, [r1, #12]
 8005c66:	e7da      	b.n	8005c1e <_free_r+0x11a>
 8005c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c6c:	20000018 	.word	0x20000018
 8005c70:	20000424 	.word	0x20000424
 8005c74:	20000ad8 	.word	0x20000ad8
 8005c78:	20000020 	.word	0x20000020

08005c7c <rshift>:
 8005c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c7e:	6906      	ldr	r6, [r0, #16]
 8005c80:	114b      	asrs	r3, r1, #5
 8005c82:	42b3      	cmp	r3, r6
 8005c84:	f100 0514 	add.w	r5, r0, #20
 8005c88:	da2b      	bge.n	8005ce2 <rshift+0x66>
 8005c8a:	f011 011f 	ands.w	r1, r1, #31
 8005c8e:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8005c92:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8005c96:	d108      	bne.n	8005caa <rshift+0x2e>
 8005c98:	4629      	mov	r1, r5
 8005c9a:	42b2      	cmp	r2, r6
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	d210      	bcs.n	8005cc2 <rshift+0x46>
 8005ca0:	f852 3b04 	ldr.w	r3, [r2], #4
 8005ca4:	f841 3b04 	str.w	r3, [r1], #4
 8005ca8:	e7f7      	b.n	8005c9a <rshift+0x1e>
 8005caa:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 8005cae:	462b      	mov	r3, r5
 8005cb0:	f1c1 0e20 	rsb	lr, r1, #32
 8005cb4:	3204      	adds	r2, #4
 8005cb6:	40cc      	lsrs	r4, r1
 8005cb8:	42b2      	cmp	r2, r6
 8005cba:	d308      	bcc.n	8005cce <rshift+0x52>
 8005cbc:	601c      	str	r4, [r3, #0]
 8005cbe:	b104      	cbz	r4, 8005cc2 <rshift+0x46>
 8005cc0:	3304      	adds	r3, #4
 8005cc2:	1b5b      	subs	r3, r3, r5
 8005cc4:	109b      	asrs	r3, r3, #2
 8005cc6:	6103      	str	r3, [r0, #16]
 8005cc8:	b903      	cbnz	r3, 8005ccc <rshift+0x50>
 8005cca:	6143      	str	r3, [r0, #20]
 8005ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cce:	6817      	ldr	r7, [r2, #0]
 8005cd0:	fa07 f70e 	lsl.w	r7, r7, lr
 8005cd4:	433c      	orrs	r4, r7
 8005cd6:	f843 4b04 	str.w	r4, [r3], #4
 8005cda:	f852 4b04 	ldr.w	r4, [r2], #4
 8005cde:	40cc      	lsrs	r4, r1
 8005ce0:	e7ea      	b.n	8005cb8 <rshift+0x3c>
 8005ce2:	462b      	mov	r3, r5
 8005ce4:	e7ed      	b.n	8005cc2 <rshift+0x46>

08005ce6 <__hexdig_fun>:
 8005ce6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005cea:	2b09      	cmp	r3, #9
 8005cec:	d802      	bhi.n	8005cf4 <__hexdig_fun+0xe>
 8005cee:	3820      	subs	r0, #32
 8005cf0:	b2c0      	uxtb	r0, r0
 8005cf2:	4770      	bx	lr
 8005cf4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005cf8:	2b05      	cmp	r3, #5
 8005cfa:	d801      	bhi.n	8005d00 <__hexdig_fun+0x1a>
 8005cfc:	3847      	subs	r0, #71	; 0x47
 8005cfe:	e7f7      	b.n	8005cf0 <__hexdig_fun+0xa>
 8005d00:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005d04:	2b05      	cmp	r3, #5
 8005d06:	d801      	bhi.n	8005d0c <__hexdig_fun+0x26>
 8005d08:	3827      	subs	r0, #39	; 0x27
 8005d0a:	e7f1      	b.n	8005cf0 <__hexdig_fun+0xa>
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	4770      	bx	lr

08005d10 <__gethex>:
 8005d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d14:	b08b      	sub	sp, #44	; 0x2c
 8005d16:	9002      	str	r0, [sp, #8]
 8005d18:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005d1a:	468a      	mov	sl, r1
 8005d1c:	4690      	mov	r8, r2
 8005d1e:	9306      	str	r3, [sp, #24]
 8005d20:	f000 facd 	bl	80062be <__localeconv_l>
 8005d24:	6803      	ldr	r3, [r0, #0]
 8005d26:	f04f 0b00 	mov.w	fp, #0
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	9303      	str	r3, [sp, #12]
 8005d2e:	f7fa fa0f 	bl	8000150 <strlen>
 8005d32:	9b03      	ldr	r3, [sp, #12]
 8005d34:	9001      	str	r0, [sp, #4]
 8005d36:	4403      	add	r3, r0
 8005d38:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005d3c:	9307      	str	r3, [sp, #28]
 8005d3e:	f8da 3000 	ldr.w	r3, [sl]
 8005d42:	3302      	adds	r3, #2
 8005d44:	461f      	mov	r7, r3
 8005d46:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005d4a:	2830      	cmp	r0, #48	; 0x30
 8005d4c:	d06c      	beq.n	8005e28 <__gethex+0x118>
 8005d4e:	f7ff ffca 	bl	8005ce6 <__hexdig_fun>
 8005d52:	4604      	mov	r4, r0
 8005d54:	2800      	cmp	r0, #0
 8005d56:	d16a      	bne.n	8005e2e <__gethex+0x11e>
 8005d58:	9a01      	ldr	r2, [sp, #4]
 8005d5a:	9903      	ldr	r1, [sp, #12]
 8005d5c:	4638      	mov	r0, r7
 8005d5e:	f000 feb7 	bl	8006ad0 <strncmp>
 8005d62:	2800      	cmp	r0, #0
 8005d64:	d166      	bne.n	8005e34 <__gethex+0x124>
 8005d66:	9b01      	ldr	r3, [sp, #4]
 8005d68:	5cf8      	ldrb	r0, [r7, r3]
 8005d6a:	18fe      	adds	r6, r7, r3
 8005d6c:	f7ff ffbb 	bl	8005ce6 <__hexdig_fun>
 8005d70:	2800      	cmp	r0, #0
 8005d72:	d062      	beq.n	8005e3a <__gethex+0x12a>
 8005d74:	4633      	mov	r3, r6
 8005d76:	7818      	ldrb	r0, [r3, #0]
 8005d78:	461f      	mov	r7, r3
 8005d7a:	2830      	cmp	r0, #48	; 0x30
 8005d7c:	f103 0301 	add.w	r3, r3, #1
 8005d80:	d0f9      	beq.n	8005d76 <__gethex+0x66>
 8005d82:	f7ff ffb0 	bl	8005ce6 <__hexdig_fun>
 8005d86:	fab0 f580 	clz	r5, r0
 8005d8a:	4634      	mov	r4, r6
 8005d8c:	f04f 0b01 	mov.w	fp, #1
 8005d90:	096d      	lsrs	r5, r5, #5
 8005d92:	463a      	mov	r2, r7
 8005d94:	4616      	mov	r6, r2
 8005d96:	7830      	ldrb	r0, [r6, #0]
 8005d98:	3201      	adds	r2, #1
 8005d9a:	f7ff ffa4 	bl	8005ce6 <__hexdig_fun>
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	d1f8      	bne.n	8005d94 <__gethex+0x84>
 8005da2:	9a01      	ldr	r2, [sp, #4]
 8005da4:	9903      	ldr	r1, [sp, #12]
 8005da6:	4630      	mov	r0, r6
 8005da8:	f000 fe92 	bl	8006ad0 <strncmp>
 8005dac:	b950      	cbnz	r0, 8005dc4 <__gethex+0xb4>
 8005dae:	b954      	cbnz	r4, 8005dc6 <__gethex+0xb6>
 8005db0:	9b01      	ldr	r3, [sp, #4]
 8005db2:	18f4      	adds	r4, r6, r3
 8005db4:	4622      	mov	r2, r4
 8005db6:	4616      	mov	r6, r2
 8005db8:	7830      	ldrb	r0, [r6, #0]
 8005dba:	3201      	adds	r2, #1
 8005dbc:	f7ff ff93 	bl	8005ce6 <__hexdig_fun>
 8005dc0:	2800      	cmp	r0, #0
 8005dc2:	d1f8      	bne.n	8005db6 <__gethex+0xa6>
 8005dc4:	b10c      	cbz	r4, 8005dca <__gethex+0xba>
 8005dc6:	1ba4      	subs	r4, r4, r6
 8005dc8:	00a4      	lsls	r4, r4, #2
 8005dca:	7833      	ldrb	r3, [r6, #0]
 8005dcc:	2b50      	cmp	r3, #80	; 0x50
 8005dce:	d001      	beq.n	8005dd4 <__gethex+0xc4>
 8005dd0:	2b70      	cmp	r3, #112	; 0x70
 8005dd2:	d140      	bne.n	8005e56 <__gethex+0x146>
 8005dd4:	7873      	ldrb	r3, [r6, #1]
 8005dd6:	2b2b      	cmp	r3, #43	; 0x2b
 8005dd8:	d035      	beq.n	8005e46 <__gethex+0x136>
 8005dda:	2b2d      	cmp	r3, #45	; 0x2d
 8005ddc:	d02f      	beq.n	8005e3e <__gethex+0x12e>
 8005dde:	f04f 0900 	mov.w	r9, #0
 8005de2:	1c71      	adds	r1, r6, #1
 8005de4:	7808      	ldrb	r0, [r1, #0]
 8005de6:	f7ff ff7e 	bl	8005ce6 <__hexdig_fun>
 8005dea:	1e43      	subs	r3, r0, #1
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b18      	cmp	r3, #24
 8005df0:	d831      	bhi.n	8005e56 <__gethex+0x146>
 8005df2:	f1a0 0210 	sub.w	r2, r0, #16
 8005df6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005dfa:	f7ff ff74 	bl	8005ce6 <__hexdig_fun>
 8005dfe:	1e43      	subs	r3, r0, #1
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b18      	cmp	r3, #24
 8005e04:	d922      	bls.n	8005e4c <__gethex+0x13c>
 8005e06:	f1b9 0f00 	cmp.w	r9, #0
 8005e0a:	d000      	beq.n	8005e0e <__gethex+0xfe>
 8005e0c:	4252      	negs	r2, r2
 8005e0e:	4414      	add	r4, r2
 8005e10:	f8ca 1000 	str.w	r1, [sl]
 8005e14:	b30d      	cbz	r5, 8005e5a <__gethex+0x14a>
 8005e16:	f1bb 0f00 	cmp.w	fp, #0
 8005e1a:	bf14      	ite	ne
 8005e1c:	2700      	movne	r7, #0
 8005e1e:	2706      	moveq	r7, #6
 8005e20:	4638      	mov	r0, r7
 8005e22:	b00b      	add	sp, #44	; 0x2c
 8005e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e28:	f10b 0b01 	add.w	fp, fp, #1
 8005e2c:	e78a      	b.n	8005d44 <__gethex+0x34>
 8005e2e:	2500      	movs	r5, #0
 8005e30:	462c      	mov	r4, r5
 8005e32:	e7ae      	b.n	8005d92 <__gethex+0x82>
 8005e34:	463e      	mov	r6, r7
 8005e36:	2501      	movs	r5, #1
 8005e38:	e7c7      	b.n	8005dca <__gethex+0xba>
 8005e3a:	4604      	mov	r4, r0
 8005e3c:	e7fb      	b.n	8005e36 <__gethex+0x126>
 8005e3e:	f04f 0901 	mov.w	r9, #1
 8005e42:	1cb1      	adds	r1, r6, #2
 8005e44:	e7ce      	b.n	8005de4 <__gethex+0xd4>
 8005e46:	f04f 0900 	mov.w	r9, #0
 8005e4a:	e7fa      	b.n	8005e42 <__gethex+0x132>
 8005e4c:	230a      	movs	r3, #10
 8005e4e:	fb03 0202 	mla	r2, r3, r2, r0
 8005e52:	3a10      	subs	r2, #16
 8005e54:	e7cf      	b.n	8005df6 <__gethex+0xe6>
 8005e56:	4631      	mov	r1, r6
 8005e58:	e7da      	b.n	8005e10 <__gethex+0x100>
 8005e5a:	4629      	mov	r1, r5
 8005e5c:	1bf3      	subs	r3, r6, r7
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	2b07      	cmp	r3, #7
 8005e62:	dc49      	bgt.n	8005ef8 <__gethex+0x1e8>
 8005e64:	9802      	ldr	r0, [sp, #8]
 8005e66:	f000 fa4c 	bl	8006302 <_Balloc>
 8005e6a:	f04f 0b00 	mov.w	fp, #0
 8005e6e:	4605      	mov	r5, r0
 8005e70:	46da      	mov	sl, fp
 8005e72:	9b01      	ldr	r3, [sp, #4]
 8005e74:	f100 0914 	add.w	r9, r0, #20
 8005e78:	f1c3 0301 	rsb	r3, r3, #1
 8005e7c:	f8cd 9010 	str.w	r9, [sp, #16]
 8005e80:	9308      	str	r3, [sp, #32]
 8005e82:	42b7      	cmp	r7, r6
 8005e84:	d33b      	bcc.n	8005efe <__gethex+0x1ee>
 8005e86:	9804      	ldr	r0, [sp, #16]
 8005e88:	f840 ab04 	str.w	sl, [r0], #4
 8005e8c:	eba0 0009 	sub.w	r0, r0, r9
 8005e90:	1080      	asrs	r0, r0, #2
 8005e92:	6128      	str	r0, [r5, #16]
 8005e94:	0147      	lsls	r7, r0, #5
 8005e96:	4650      	mov	r0, sl
 8005e98:	f000 faf7 	bl	800648a <__hi0bits>
 8005e9c:	f8d8 6000 	ldr.w	r6, [r8]
 8005ea0:	1a3f      	subs	r7, r7, r0
 8005ea2:	42b7      	cmp	r7, r6
 8005ea4:	dd64      	ble.n	8005f70 <__gethex+0x260>
 8005ea6:	1bbf      	subs	r7, r7, r6
 8005ea8:	4639      	mov	r1, r7
 8005eaa:	4628      	mov	r0, r5
 8005eac:	f000 fdef 	bl	8006a8e <__any_on>
 8005eb0:	4682      	mov	sl, r0
 8005eb2:	b178      	cbz	r0, 8005ed4 <__gethex+0x1c4>
 8005eb4:	f04f 0a01 	mov.w	sl, #1
 8005eb8:	1e7b      	subs	r3, r7, #1
 8005eba:	1159      	asrs	r1, r3, #5
 8005ebc:	f003 021f 	and.w	r2, r3, #31
 8005ec0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005ec4:	fa0a f202 	lsl.w	r2, sl, r2
 8005ec8:	420a      	tst	r2, r1
 8005eca:	d003      	beq.n	8005ed4 <__gethex+0x1c4>
 8005ecc:	4553      	cmp	r3, sl
 8005ece:	dc46      	bgt.n	8005f5e <__gethex+0x24e>
 8005ed0:	f04f 0a02 	mov.w	sl, #2
 8005ed4:	4639      	mov	r1, r7
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	f7ff fed0 	bl	8005c7c <rshift>
 8005edc:	443c      	add	r4, r7
 8005ede:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005ee2:	429c      	cmp	r4, r3
 8005ee4:	dd52      	ble.n	8005f8c <__gethex+0x27c>
 8005ee6:	4629      	mov	r1, r5
 8005ee8:	9802      	ldr	r0, [sp, #8]
 8005eea:	f000 fa3e 	bl	800636a <_Bfree>
 8005eee:	2300      	movs	r3, #0
 8005ef0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005ef2:	27a3      	movs	r7, #163	; 0xa3
 8005ef4:	6013      	str	r3, [r2, #0]
 8005ef6:	e793      	b.n	8005e20 <__gethex+0x110>
 8005ef8:	3101      	adds	r1, #1
 8005efa:	105b      	asrs	r3, r3, #1
 8005efc:	e7b0      	b.n	8005e60 <__gethex+0x150>
 8005efe:	1e73      	subs	r3, r6, #1
 8005f00:	9305      	str	r3, [sp, #20]
 8005f02:	9a07      	ldr	r2, [sp, #28]
 8005f04:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d018      	beq.n	8005f3e <__gethex+0x22e>
 8005f0c:	f1bb 0f20 	cmp.w	fp, #32
 8005f10:	d107      	bne.n	8005f22 <__gethex+0x212>
 8005f12:	9b04      	ldr	r3, [sp, #16]
 8005f14:	f8c3 a000 	str.w	sl, [r3]
 8005f18:	f04f 0a00 	mov.w	sl, #0
 8005f1c:	46d3      	mov	fp, sl
 8005f1e:	3304      	adds	r3, #4
 8005f20:	9304      	str	r3, [sp, #16]
 8005f22:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005f26:	f7ff fede 	bl	8005ce6 <__hexdig_fun>
 8005f2a:	f000 000f 	and.w	r0, r0, #15
 8005f2e:	fa00 f00b 	lsl.w	r0, r0, fp
 8005f32:	ea4a 0a00 	orr.w	sl, sl, r0
 8005f36:	f10b 0b04 	add.w	fp, fp, #4
 8005f3a:	9b05      	ldr	r3, [sp, #20]
 8005f3c:	e00d      	b.n	8005f5a <__gethex+0x24a>
 8005f3e:	9b05      	ldr	r3, [sp, #20]
 8005f40:	9a08      	ldr	r2, [sp, #32]
 8005f42:	4413      	add	r3, r2
 8005f44:	429f      	cmp	r7, r3
 8005f46:	d8e1      	bhi.n	8005f0c <__gethex+0x1fc>
 8005f48:	4618      	mov	r0, r3
 8005f4a:	9a01      	ldr	r2, [sp, #4]
 8005f4c:	9903      	ldr	r1, [sp, #12]
 8005f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f50:	f000 fdbe 	bl	8006ad0 <strncmp>
 8005f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f56:	2800      	cmp	r0, #0
 8005f58:	d1d8      	bne.n	8005f0c <__gethex+0x1fc>
 8005f5a:	461e      	mov	r6, r3
 8005f5c:	e791      	b.n	8005e82 <__gethex+0x172>
 8005f5e:	1eb9      	subs	r1, r7, #2
 8005f60:	4628      	mov	r0, r5
 8005f62:	f000 fd94 	bl	8006a8e <__any_on>
 8005f66:	2800      	cmp	r0, #0
 8005f68:	d0b2      	beq.n	8005ed0 <__gethex+0x1c0>
 8005f6a:	f04f 0a03 	mov.w	sl, #3
 8005f6e:	e7b1      	b.n	8005ed4 <__gethex+0x1c4>
 8005f70:	da09      	bge.n	8005f86 <__gethex+0x276>
 8005f72:	1bf7      	subs	r7, r6, r7
 8005f74:	4629      	mov	r1, r5
 8005f76:	463a      	mov	r2, r7
 8005f78:	9802      	ldr	r0, [sp, #8]
 8005f7a:	f000 fbb7 	bl	80066ec <__lshift>
 8005f7e:	4605      	mov	r5, r0
 8005f80:	1be4      	subs	r4, r4, r7
 8005f82:	f100 0914 	add.w	r9, r0, #20
 8005f86:	f04f 0a00 	mov.w	sl, #0
 8005f8a:	e7a8      	b.n	8005ede <__gethex+0x1ce>
 8005f8c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005f90:	4284      	cmp	r4, r0
 8005f92:	da6b      	bge.n	800606c <__gethex+0x35c>
 8005f94:	1b04      	subs	r4, r0, r4
 8005f96:	42a6      	cmp	r6, r4
 8005f98:	dc2e      	bgt.n	8005ff8 <__gethex+0x2e8>
 8005f9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d022      	beq.n	8005fe8 <__gethex+0x2d8>
 8005fa2:	2b03      	cmp	r3, #3
 8005fa4:	d024      	beq.n	8005ff0 <__gethex+0x2e0>
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d115      	bne.n	8005fd6 <__gethex+0x2c6>
 8005faa:	42a6      	cmp	r6, r4
 8005fac:	d113      	bne.n	8005fd6 <__gethex+0x2c6>
 8005fae:	2e01      	cmp	r6, #1
 8005fb0:	dc0b      	bgt.n	8005fca <__gethex+0x2ba>
 8005fb2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005fb6:	9a06      	ldr	r2, [sp, #24]
 8005fb8:	2762      	movs	r7, #98	; 0x62
 8005fba:	6013      	str	r3, [r2, #0]
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	612b      	str	r3, [r5, #16]
 8005fc0:	f8c9 3000 	str.w	r3, [r9]
 8005fc4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005fc6:	601d      	str	r5, [r3, #0]
 8005fc8:	e72a      	b.n	8005e20 <__gethex+0x110>
 8005fca:	1e71      	subs	r1, r6, #1
 8005fcc:	4628      	mov	r0, r5
 8005fce:	f000 fd5e 	bl	8006a8e <__any_on>
 8005fd2:	2800      	cmp	r0, #0
 8005fd4:	d1ed      	bne.n	8005fb2 <__gethex+0x2a2>
 8005fd6:	4629      	mov	r1, r5
 8005fd8:	9802      	ldr	r0, [sp, #8]
 8005fda:	f000 f9c6 	bl	800636a <_Bfree>
 8005fde:	2300      	movs	r3, #0
 8005fe0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005fe2:	2750      	movs	r7, #80	; 0x50
 8005fe4:	6013      	str	r3, [r2, #0]
 8005fe6:	e71b      	b.n	8005e20 <__gethex+0x110>
 8005fe8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d0e1      	beq.n	8005fb2 <__gethex+0x2a2>
 8005fee:	e7f2      	b.n	8005fd6 <__gethex+0x2c6>
 8005ff0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1dd      	bne.n	8005fb2 <__gethex+0x2a2>
 8005ff6:	e7ee      	b.n	8005fd6 <__gethex+0x2c6>
 8005ff8:	1e67      	subs	r7, r4, #1
 8005ffa:	f1ba 0f00 	cmp.w	sl, #0
 8005ffe:	d132      	bne.n	8006066 <__gethex+0x356>
 8006000:	b127      	cbz	r7, 800600c <__gethex+0x2fc>
 8006002:	4639      	mov	r1, r7
 8006004:	4628      	mov	r0, r5
 8006006:	f000 fd42 	bl	8006a8e <__any_on>
 800600a:	4682      	mov	sl, r0
 800600c:	2301      	movs	r3, #1
 800600e:	117a      	asrs	r2, r7, #5
 8006010:	f007 071f 	and.w	r7, r7, #31
 8006014:	fa03 f707 	lsl.w	r7, r3, r7
 8006018:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800601c:	4621      	mov	r1, r4
 800601e:	421f      	tst	r7, r3
 8006020:	f04f 0702 	mov.w	r7, #2
 8006024:	4628      	mov	r0, r5
 8006026:	bf18      	it	ne
 8006028:	f04a 0a02 	orrne.w	sl, sl, #2
 800602c:	1b36      	subs	r6, r6, r4
 800602e:	f7ff fe25 	bl	8005c7c <rshift>
 8006032:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006036:	f1ba 0f00 	cmp.w	sl, #0
 800603a:	d045      	beq.n	80060c8 <__gethex+0x3b8>
 800603c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006040:	2b02      	cmp	r3, #2
 8006042:	d015      	beq.n	8006070 <__gethex+0x360>
 8006044:	2b03      	cmp	r3, #3
 8006046:	d017      	beq.n	8006078 <__gethex+0x368>
 8006048:	2b01      	cmp	r3, #1
 800604a:	d109      	bne.n	8006060 <__gethex+0x350>
 800604c:	f01a 0f02 	tst.w	sl, #2
 8006050:	d006      	beq.n	8006060 <__gethex+0x350>
 8006052:	f8d9 3000 	ldr.w	r3, [r9]
 8006056:	ea4a 0a03 	orr.w	sl, sl, r3
 800605a:	f01a 0f01 	tst.w	sl, #1
 800605e:	d10e      	bne.n	800607e <__gethex+0x36e>
 8006060:	f047 0710 	orr.w	r7, r7, #16
 8006064:	e030      	b.n	80060c8 <__gethex+0x3b8>
 8006066:	f04f 0a01 	mov.w	sl, #1
 800606a:	e7cf      	b.n	800600c <__gethex+0x2fc>
 800606c:	2701      	movs	r7, #1
 800606e:	e7e2      	b.n	8006036 <__gethex+0x326>
 8006070:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006072:	f1c3 0301 	rsb	r3, r3, #1
 8006076:	9315      	str	r3, [sp, #84]	; 0x54
 8006078:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800607a:	2b00      	cmp	r3, #0
 800607c:	d0f0      	beq.n	8006060 <__gethex+0x350>
 800607e:	2000      	movs	r0, #0
 8006080:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8006084:	f105 0314 	add.w	r3, r5, #20
 8006088:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800608c:	eb03 010a 	add.w	r1, r3, sl
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006096:	d01c      	beq.n	80060d2 <__gethex+0x3c2>
 8006098:	3201      	adds	r2, #1
 800609a:	601a      	str	r2, [r3, #0]
 800609c:	2f02      	cmp	r7, #2
 800609e:	f105 0314 	add.w	r3, r5, #20
 80060a2:	d138      	bne.n	8006116 <__gethex+0x406>
 80060a4:	f8d8 2000 	ldr.w	r2, [r8]
 80060a8:	3a01      	subs	r2, #1
 80060aa:	4296      	cmp	r6, r2
 80060ac:	d10a      	bne.n	80060c4 <__gethex+0x3b4>
 80060ae:	2201      	movs	r2, #1
 80060b0:	1171      	asrs	r1, r6, #5
 80060b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80060b6:	f006 061f 	and.w	r6, r6, #31
 80060ba:	fa02 f606 	lsl.w	r6, r2, r6
 80060be:	421e      	tst	r6, r3
 80060c0:	bf18      	it	ne
 80060c2:	4617      	movne	r7, r2
 80060c4:	f047 0720 	orr.w	r7, r7, #32
 80060c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80060ca:	601d      	str	r5, [r3, #0]
 80060cc:	9b06      	ldr	r3, [sp, #24]
 80060ce:	601c      	str	r4, [r3, #0]
 80060d0:	e6a6      	b.n	8005e20 <__gethex+0x110>
 80060d2:	f843 0b04 	str.w	r0, [r3], #4
 80060d6:	4299      	cmp	r1, r3
 80060d8:	d8da      	bhi.n	8006090 <__gethex+0x380>
 80060da:	68ab      	ldr	r3, [r5, #8]
 80060dc:	4599      	cmp	r9, r3
 80060de:	db12      	blt.n	8006106 <__gethex+0x3f6>
 80060e0:	6869      	ldr	r1, [r5, #4]
 80060e2:	9802      	ldr	r0, [sp, #8]
 80060e4:	3101      	adds	r1, #1
 80060e6:	f000 f90c 	bl	8006302 <_Balloc>
 80060ea:	4683      	mov	fp, r0
 80060ec:	692a      	ldr	r2, [r5, #16]
 80060ee:	f105 010c 	add.w	r1, r5, #12
 80060f2:	3202      	adds	r2, #2
 80060f4:	0092      	lsls	r2, r2, #2
 80060f6:	300c      	adds	r0, #12
 80060f8:	f000 f8f8 	bl	80062ec <memcpy>
 80060fc:	4629      	mov	r1, r5
 80060fe:	9802      	ldr	r0, [sp, #8]
 8006100:	f000 f933 	bl	800636a <_Bfree>
 8006104:	465d      	mov	r5, fp
 8006106:	692b      	ldr	r3, [r5, #16]
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	612a      	str	r2, [r5, #16]
 800610c:	2201      	movs	r2, #1
 800610e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006112:	615a      	str	r2, [r3, #20]
 8006114:	e7c2      	b.n	800609c <__gethex+0x38c>
 8006116:	692a      	ldr	r2, [r5, #16]
 8006118:	4591      	cmp	r9, r2
 800611a:	da0b      	bge.n	8006134 <__gethex+0x424>
 800611c:	2101      	movs	r1, #1
 800611e:	4628      	mov	r0, r5
 8006120:	f7ff fdac 	bl	8005c7c <rshift>
 8006124:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006128:	3401      	adds	r4, #1
 800612a:	429c      	cmp	r4, r3
 800612c:	f73f aedb 	bgt.w	8005ee6 <__gethex+0x1d6>
 8006130:	2701      	movs	r7, #1
 8006132:	e7c7      	b.n	80060c4 <__gethex+0x3b4>
 8006134:	f016 061f 	ands.w	r6, r6, #31
 8006138:	d0fa      	beq.n	8006130 <__gethex+0x420>
 800613a:	449a      	add	sl, r3
 800613c:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006140:	f000 f9a3 	bl	800648a <__hi0bits>
 8006144:	f1c6 0620 	rsb	r6, r6, #32
 8006148:	42b0      	cmp	r0, r6
 800614a:	dbe7      	blt.n	800611c <__gethex+0x40c>
 800614c:	e7f0      	b.n	8006130 <__gethex+0x420>

0800614e <L_shift>:
 800614e:	f1c2 0208 	rsb	r2, r2, #8
 8006152:	0092      	lsls	r2, r2, #2
 8006154:	b570      	push	{r4, r5, r6, lr}
 8006156:	f1c2 0620 	rsb	r6, r2, #32
 800615a:	6843      	ldr	r3, [r0, #4]
 800615c:	6804      	ldr	r4, [r0, #0]
 800615e:	fa03 f506 	lsl.w	r5, r3, r6
 8006162:	432c      	orrs	r4, r5
 8006164:	40d3      	lsrs	r3, r2
 8006166:	6004      	str	r4, [r0, #0]
 8006168:	f840 3f04 	str.w	r3, [r0, #4]!
 800616c:	4288      	cmp	r0, r1
 800616e:	d3f4      	bcc.n	800615a <L_shift+0xc>
 8006170:	bd70      	pop	{r4, r5, r6, pc}

08006172 <__match>:
 8006172:	b530      	push	{r4, r5, lr}
 8006174:	6803      	ldr	r3, [r0, #0]
 8006176:	f811 4b01 	ldrb.w	r4, [r1], #1
 800617a:	3301      	adds	r3, #1
 800617c:	b914      	cbnz	r4, 8006184 <__match+0x12>
 800617e:	6003      	str	r3, [r0, #0]
 8006180:	2001      	movs	r0, #1
 8006182:	bd30      	pop	{r4, r5, pc}
 8006184:	781a      	ldrb	r2, [r3, #0]
 8006186:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800618a:	2d19      	cmp	r5, #25
 800618c:	bf98      	it	ls
 800618e:	3220      	addls	r2, #32
 8006190:	42a2      	cmp	r2, r4
 8006192:	d0f0      	beq.n	8006176 <__match+0x4>
 8006194:	2000      	movs	r0, #0
 8006196:	bd30      	pop	{r4, r5, pc}

08006198 <__hexnan>:
 8006198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800619c:	2500      	movs	r5, #0
 800619e:	680b      	ldr	r3, [r1, #0]
 80061a0:	4682      	mov	sl, r0
 80061a2:	115f      	asrs	r7, r3, #5
 80061a4:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80061a8:	f013 031f 	ands.w	r3, r3, #31
 80061ac:	bf18      	it	ne
 80061ae:	3704      	addne	r7, #4
 80061b0:	1f3e      	subs	r6, r7, #4
 80061b2:	4690      	mov	r8, r2
 80061b4:	46b1      	mov	r9, r6
 80061b6:	4634      	mov	r4, r6
 80061b8:	46ab      	mov	fp, r5
 80061ba:	b087      	sub	sp, #28
 80061bc:	6801      	ldr	r1, [r0, #0]
 80061be:	9302      	str	r3, [sp, #8]
 80061c0:	f847 5c04 	str.w	r5, [r7, #-4]
 80061c4:	9501      	str	r5, [sp, #4]
 80061c6:	784a      	ldrb	r2, [r1, #1]
 80061c8:	1c4b      	adds	r3, r1, #1
 80061ca:	9303      	str	r3, [sp, #12]
 80061cc:	b342      	cbz	r2, 8006220 <__hexnan+0x88>
 80061ce:	4610      	mov	r0, r2
 80061d0:	9105      	str	r1, [sp, #20]
 80061d2:	9204      	str	r2, [sp, #16]
 80061d4:	f7ff fd87 	bl	8005ce6 <__hexdig_fun>
 80061d8:	2800      	cmp	r0, #0
 80061da:	d143      	bne.n	8006264 <__hexnan+0xcc>
 80061dc:	9a04      	ldr	r2, [sp, #16]
 80061de:	9905      	ldr	r1, [sp, #20]
 80061e0:	2a20      	cmp	r2, #32
 80061e2:	d818      	bhi.n	8006216 <__hexnan+0x7e>
 80061e4:	9b01      	ldr	r3, [sp, #4]
 80061e6:	459b      	cmp	fp, r3
 80061e8:	dd13      	ble.n	8006212 <__hexnan+0x7a>
 80061ea:	454c      	cmp	r4, r9
 80061ec:	d206      	bcs.n	80061fc <__hexnan+0x64>
 80061ee:	2d07      	cmp	r5, #7
 80061f0:	dc04      	bgt.n	80061fc <__hexnan+0x64>
 80061f2:	462a      	mov	r2, r5
 80061f4:	4649      	mov	r1, r9
 80061f6:	4620      	mov	r0, r4
 80061f8:	f7ff ffa9 	bl	800614e <L_shift>
 80061fc:	4544      	cmp	r4, r8
 80061fe:	d944      	bls.n	800628a <__hexnan+0xf2>
 8006200:	2300      	movs	r3, #0
 8006202:	f1a4 0904 	sub.w	r9, r4, #4
 8006206:	f844 3c04 	str.w	r3, [r4, #-4]
 800620a:	461d      	mov	r5, r3
 800620c:	464c      	mov	r4, r9
 800620e:	f8cd b004 	str.w	fp, [sp, #4]
 8006212:	9903      	ldr	r1, [sp, #12]
 8006214:	e7d7      	b.n	80061c6 <__hexnan+0x2e>
 8006216:	2a29      	cmp	r2, #41	; 0x29
 8006218:	d14a      	bne.n	80062b0 <__hexnan+0x118>
 800621a:	3102      	adds	r1, #2
 800621c:	f8ca 1000 	str.w	r1, [sl]
 8006220:	f1bb 0f00 	cmp.w	fp, #0
 8006224:	d044      	beq.n	80062b0 <__hexnan+0x118>
 8006226:	454c      	cmp	r4, r9
 8006228:	d206      	bcs.n	8006238 <__hexnan+0xa0>
 800622a:	2d07      	cmp	r5, #7
 800622c:	dc04      	bgt.n	8006238 <__hexnan+0xa0>
 800622e:	462a      	mov	r2, r5
 8006230:	4649      	mov	r1, r9
 8006232:	4620      	mov	r0, r4
 8006234:	f7ff ff8b 	bl	800614e <L_shift>
 8006238:	4544      	cmp	r4, r8
 800623a:	d928      	bls.n	800628e <__hexnan+0xf6>
 800623c:	4643      	mov	r3, r8
 800623e:	f854 2b04 	ldr.w	r2, [r4], #4
 8006242:	42a6      	cmp	r6, r4
 8006244:	f843 2b04 	str.w	r2, [r3], #4
 8006248:	d2f9      	bcs.n	800623e <__hexnan+0xa6>
 800624a:	2200      	movs	r2, #0
 800624c:	f843 2b04 	str.w	r2, [r3], #4
 8006250:	429e      	cmp	r6, r3
 8006252:	d2fb      	bcs.n	800624c <__hexnan+0xb4>
 8006254:	6833      	ldr	r3, [r6, #0]
 8006256:	b91b      	cbnz	r3, 8006260 <__hexnan+0xc8>
 8006258:	4546      	cmp	r6, r8
 800625a:	d127      	bne.n	80062ac <__hexnan+0x114>
 800625c:	2301      	movs	r3, #1
 800625e:	6033      	str	r3, [r6, #0]
 8006260:	2005      	movs	r0, #5
 8006262:	e026      	b.n	80062b2 <__hexnan+0x11a>
 8006264:	3501      	adds	r5, #1
 8006266:	2d08      	cmp	r5, #8
 8006268:	f10b 0b01 	add.w	fp, fp, #1
 800626c:	dd06      	ble.n	800627c <__hexnan+0xe4>
 800626e:	4544      	cmp	r4, r8
 8006270:	d9cf      	bls.n	8006212 <__hexnan+0x7a>
 8006272:	2300      	movs	r3, #0
 8006274:	2501      	movs	r5, #1
 8006276:	f844 3c04 	str.w	r3, [r4, #-4]
 800627a:	3c04      	subs	r4, #4
 800627c:	6822      	ldr	r2, [r4, #0]
 800627e:	f000 000f 	and.w	r0, r0, #15
 8006282:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006286:	6020      	str	r0, [r4, #0]
 8006288:	e7c3      	b.n	8006212 <__hexnan+0x7a>
 800628a:	2508      	movs	r5, #8
 800628c:	e7c1      	b.n	8006212 <__hexnan+0x7a>
 800628e:	9b02      	ldr	r3, [sp, #8]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d0df      	beq.n	8006254 <__hexnan+0xbc>
 8006294:	f04f 32ff 	mov.w	r2, #4294967295
 8006298:	f1c3 0320 	rsb	r3, r3, #32
 800629c:	fa22 f303 	lsr.w	r3, r2, r3
 80062a0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80062a4:	401a      	ands	r2, r3
 80062a6:	f847 2c04 	str.w	r2, [r7, #-4]
 80062aa:	e7d3      	b.n	8006254 <__hexnan+0xbc>
 80062ac:	3e04      	subs	r6, #4
 80062ae:	e7d1      	b.n	8006254 <__hexnan+0xbc>
 80062b0:	2004      	movs	r0, #4
 80062b2:	b007      	add	sp, #28
 80062b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080062b8 <__locale_ctype_ptr_l>:
 80062b8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80062bc:	4770      	bx	lr

080062be <__localeconv_l>:
 80062be:	30f0      	adds	r0, #240	; 0xf0
 80062c0:	4770      	bx	lr

080062c2 <__retarget_lock_acquire_recursive>:
 80062c2:	4770      	bx	lr

080062c4 <__retarget_lock_release>:
 80062c4:	4770      	bx	lr

080062c6 <__retarget_lock_release_recursive>:
 80062c6:	4770      	bx	lr

080062c8 <__ascii_mbtowc>:
 80062c8:	b082      	sub	sp, #8
 80062ca:	b901      	cbnz	r1, 80062ce <__ascii_mbtowc+0x6>
 80062cc:	a901      	add	r1, sp, #4
 80062ce:	b142      	cbz	r2, 80062e2 <__ascii_mbtowc+0x1a>
 80062d0:	b14b      	cbz	r3, 80062e6 <__ascii_mbtowc+0x1e>
 80062d2:	7813      	ldrb	r3, [r2, #0]
 80062d4:	600b      	str	r3, [r1, #0]
 80062d6:	7812      	ldrb	r2, [r2, #0]
 80062d8:	1c10      	adds	r0, r2, #0
 80062da:	bf18      	it	ne
 80062dc:	2001      	movne	r0, #1
 80062de:	b002      	add	sp, #8
 80062e0:	4770      	bx	lr
 80062e2:	4610      	mov	r0, r2
 80062e4:	e7fb      	b.n	80062de <__ascii_mbtowc+0x16>
 80062e6:	f06f 0001 	mvn.w	r0, #1
 80062ea:	e7f8      	b.n	80062de <__ascii_mbtowc+0x16>

080062ec <memcpy>:
 80062ec:	b510      	push	{r4, lr}
 80062ee:	1e43      	subs	r3, r0, #1
 80062f0:	440a      	add	r2, r1
 80062f2:	4291      	cmp	r1, r2
 80062f4:	d100      	bne.n	80062f8 <memcpy+0xc>
 80062f6:	bd10      	pop	{r4, pc}
 80062f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006300:	e7f7      	b.n	80062f2 <memcpy+0x6>

08006302 <_Balloc>:
 8006302:	b570      	push	{r4, r5, r6, lr}
 8006304:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006306:	4604      	mov	r4, r0
 8006308:	460e      	mov	r6, r1
 800630a:	b93d      	cbnz	r5, 800631c <_Balloc+0x1a>
 800630c:	2010      	movs	r0, #16
 800630e:	f7fe f9c3 	bl	8004698 <malloc>
 8006312:	6260      	str	r0, [r4, #36]	; 0x24
 8006314:	6045      	str	r5, [r0, #4]
 8006316:	6085      	str	r5, [r0, #8]
 8006318:	6005      	str	r5, [r0, #0]
 800631a:	60c5      	str	r5, [r0, #12]
 800631c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800631e:	68eb      	ldr	r3, [r5, #12]
 8006320:	b183      	cbz	r3, 8006344 <_Balloc+0x42>
 8006322:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800632a:	b9b8      	cbnz	r0, 800635c <_Balloc+0x5a>
 800632c:	2101      	movs	r1, #1
 800632e:	fa01 f506 	lsl.w	r5, r1, r6
 8006332:	1d6a      	adds	r2, r5, #5
 8006334:	0092      	lsls	r2, r2, #2
 8006336:	4620      	mov	r0, r4
 8006338:	f000 fbe9 	bl	8006b0e <_calloc_r>
 800633c:	b160      	cbz	r0, 8006358 <_Balloc+0x56>
 800633e:	6046      	str	r6, [r0, #4]
 8006340:	6085      	str	r5, [r0, #8]
 8006342:	e00e      	b.n	8006362 <_Balloc+0x60>
 8006344:	2221      	movs	r2, #33	; 0x21
 8006346:	2104      	movs	r1, #4
 8006348:	4620      	mov	r0, r4
 800634a:	f000 fbe0 	bl	8006b0e <_calloc_r>
 800634e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006350:	60e8      	str	r0, [r5, #12]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1e4      	bne.n	8006322 <_Balloc+0x20>
 8006358:	2000      	movs	r0, #0
 800635a:	bd70      	pop	{r4, r5, r6, pc}
 800635c:	6802      	ldr	r2, [r0, #0]
 800635e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006362:	2300      	movs	r3, #0
 8006364:	6103      	str	r3, [r0, #16]
 8006366:	60c3      	str	r3, [r0, #12]
 8006368:	bd70      	pop	{r4, r5, r6, pc}

0800636a <_Bfree>:
 800636a:	b570      	push	{r4, r5, r6, lr}
 800636c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800636e:	4606      	mov	r6, r0
 8006370:	460d      	mov	r5, r1
 8006372:	b93c      	cbnz	r4, 8006384 <_Bfree+0x1a>
 8006374:	2010      	movs	r0, #16
 8006376:	f7fe f98f 	bl	8004698 <malloc>
 800637a:	6270      	str	r0, [r6, #36]	; 0x24
 800637c:	6044      	str	r4, [r0, #4]
 800637e:	6084      	str	r4, [r0, #8]
 8006380:	6004      	str	r4, [r0, #0]
 8006382:	60c4      	str	r4, [r0, #12]
 8006384:	b13d      	cbz	r5, 8006396 <_Bfree+0x2c>
 8006386:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006388:	686a      	ldr	r2, [r5, #4]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006390:	6029      	str	r1, [r5, #0]
 8006392:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006396:	bd70      	pop	{r4, r5, r6, pc}

08006398 <__multadd>:
 8006398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800639c:	461f      	mov	r7, r3
 800639e:	4606      	mov	r6, r0
 80063a0:	460c      	mov	r4, r1
 80063a2:	2300      	movs	r3, #0
 80063a4:	690d      	ldr	r5, [r1, #16]
 80063a6:	f101 0e14 	add.w	lr, r1, #20
 80063aa:	f8de 0000 	ldr.w	r0, [lr]
 80063ae:	3301      	adds	r3, #1
 80063b0:	b281      	uxth	r1, r0
 80063b2:	fb02 7101 	mla	r1, r2, r1, r7
 80063b6:	0c00      	lsrs	r0, r0, #16
 80063b8:	0c0f      	lsrs	r7, r1, #16
 80063ba:	fb02 7000 	mla	r0, r2, r0, r7
 80063be:	b289      	uxth	r1, r1
 80063c0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80063c4:	429d      	cmp	r5, r3
 80063c6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80063ca:	f84e 1b04 	str.w	r1, [lr], #4
 80063ce:	dcec      	bgt.n	80063aa <__multadd+0x12>
 80063d0:	b1d7      	cbz	r7, 8006408 <__multadd+0x70>
 80063d2:	68a3      	ldr	r3, [r4, #8]
 80063d4:	429d      	cmp	r5, r3
 80063d6:	db12      	blt.n	80063fe <__multadd+0x66>
 80063d8:	6861      	ldr	r1, [r4, #4]
 80063da:	4630      	mov	r0, r6
 80063dc:	3101      	adds	r1, #1
 80063de:	f7ff ff90 	bl	8006302 <_Balloc>
 80063e2:	4680      	mov	r8, r0
 80063e4:	6922      	ldr	r2, [r4, #16]
 80063e6:	f104 010c 	add.w	r1, r4, #12
 80063ea:	3202      	adds	r2, #2
 80063ec:	0092      	lsls	r2, r2, #2
 80063ee:	300c      	adds	r0, #12
 80063f0:	f7ff ff7c 	bl	80062ec <memcpy>
 80063f4:	4621      	mov	r1, r4
 80063f6:	4630      	mov	r0, r6
 80063f8:	f7ff ffb7 	bl	800636a <_Bfree>
 80063fc:	4644      	mov	r4, r8
 80063fe:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006402:	3501      	adds	r5, #1
 8006404:	615f      	str	r7, [r3, #20]
 8006406:	6125      	str	r5, [r4, #16]
 8006408:	4620      	mov	r0, r4
 800640a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800640e <__s2b>:
 800640e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006412:	4615      	mov	r5, r2
 8006414:	2209      	movs	r2, #9
 8006416:	461f      	mov	r7, r3
 8006418:	3308      	adds	r3, #8
 800641a:	460c      	mov	r4, r1
 800641c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006420:	4606      	mov	r6, r0
 8006422:	2201      	movs	r2, #1
 8006424:	2100      	movs	r1, #0
 8006426:	429a      	cmp	r2, r3
 8006428:	db20      	blt.n	800646c <__s2b+0x5e>
 800642a:	4630      	mov	r0, r6
 800642c:	f7ff ff69 	bl	8006302 <_Balloc>
 8006430:	9b08      	ldr	r3, [sp, #32]
 8006432:	2d09      	cmp	r5, #9
 8006434:	6143      	str	r3, [r0, #20]
 8006436:	f04f 0301 	mov.w	r3, #1
 800643a:	6103      	str	r3, [r0, #16]
 800643c:	dd19      	ble.n	8006472 <__s2b+0x64>
 800643e:	f104 0909 	add.w	r9, r4, #9
 8006442:	46c8      	mov	r8, r9
 8006444:	442c      	add	r4, r5
 8006446:	f818 3b01 	ldrb.w	r3, [r8], #1
 800644a:	4601      	mov	r1, r0
 800644c:	3b30      	subs	r3, #48	; 0x30
 800644e:	220a      	movs	r2, #10
 8006450:	4630      	mov	r0, r6
 8006452:	f7ff ffa1 	bl	8006398 <__multadd>
 8006456:	45a0      	cmp	r8, r4
 8006458:	d1f5      	bne.n	8006446 <__s2b+0x38>
 800645a:	f1a5 0408 	sub.w	r4, r5, #8
 800645e:	444c      	add	r4, r9
 8006460:	1b2d      	subs	r5, r5, r4
 8006462:	1963      	adds	r3, r4, r5
 8006464:	42bb      	cmp	r3, r7
 8006466:	db07      	blt.n	8006478 <__s2b+0x6a>
 8006468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800646c:	0052      	lsls	r2, r2, #1
 800646e:	3101      	adds	r1, #1
 8006470:	e7d9      	b.n	8006426 <__s2b+0x18>
 8006472:	340a      	adds	r4, #10
 8006474:	2509      	movs	r5, #9
 8006476:	e7f3      	b.n	8006460 <__s2b+0x52>
 8006478:	f814 3b01 	ldrb.w	r3, [r4], #1
 800647c:	4601      	mov	r1, r0
 800647e:	3b30      	subs	r3, #48	; 0x30
 8006480:	220a      	movs	r2, #10
 8006482:	4630      	mov	r0, r6
 8006484:	f7ff ff88 	bl	8006398 <__multadd>
 8006488:	e7eb      	b.n	8006462 <__s2b+0x54>

0800648a <__hi0bits>:
 800648a:	0c02      	lsrs	r2, r0, #16
 800648c:	0412      	lsls	r2, r2, #16
 800648e:	4603      	mov	r3, r0
 8006490:	b9b2      	cbnz	r2, 80064c0 <__hi0bits+0x36>
 8006492:	0403      	lsls	r3, r0, #16
 8006494:	2010      	movs	r0, #16
 8006496:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800649a:	bf04      	itt	eq
 800649c:	021b      	lsleq	r3, r3, #8
 800649e:	3008      	addeq	r0, #8
 80064a0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80064a4:	bf04      	itt	eq
 80064a6:	011b      	lsleq	r3, r3, #4
 80064a8:	3004      	addeq	r0, #4
 80064aa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80064ae:	bf04      	itt	eq
 80064b0:	009b      	lsleq	r3, r3, #2
 80064b2:	3002      	addeq	r0, #2
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	db06      	blt.n	80064c6 <__hi0bits+0x3c>
 80064b8:	005b      	lsls	r3, r3, #1
 80064ba:	d503      	bpl.n	80064c4 <__hi0bits+0x3a>
 80064bc:	3001      	adds	r0, #1
 80064be:	4770      	bx	lr
 80064c0:	2000      	movs	r0, #0
 80064c2:	e7e8      	b.n	8006496 <__hi0bits+0xc>
 80064c4:	2020      	movs	r0, #32
 80064c6:	4770      	bx	lr

080064c8 <__lo0bits>:
 80064c8:	6803      	ldr	r3, [r0, #0]
 80064ca:	4601      	mov	r1, r0
 80064cc:	f013 0207 	ands.w	r2, r3, #7
 80064d0:	d00b      	beq.n	80064ea <__lo0bits+0x22>
 80064d2:	07da      	lsls	r2, r3, #31
 80064d4:	d423      	bmi.n	800651e <__lo0bits+0x56>
 80064d6:	0798      	lsls	r0, r3, #30
 80064d8:	bf49      	itett	mi
 80064da:	085b      	lsrmi	r3, r3, #1
 80064dc:	089b      	lsrpl	r3, r3, #2
 80064de:	2001      	movmi	r0, #1
 80064e0:	600b      	strmi	r3, [r1, #0]
 80064e2:	bf5c      	itt	pl
 80064e4:	600b      	strpl	r3, [r1, #0]
 80064e6:	2002      	movpl	r0, #2
 80064e8:	4770      	bx	lr
 80064ea:	b298      	uxth	r0, r3
 80064ec:	b9a8      	cbnz	r0, 800651a <__lo0bits+0x52>
 80064ee:	2010      	movs	r0, #16
 80064f0:	0c1b      	lsrs	r3, r3, #16
 80064f2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80064f6:	bf04      	itt	eq
 80064f8:	0a1b      	lsreq	r3, r3, #8
 80064fa:	3008      	addeq	r0, #8
 80064fc:	071a      	lsls	r2, r3, #28
 80064fe:	bf04      	itt	eq
 8006500:	091b      	lsreq	r3, r3, #4
 8006502:	3004      	addeq	r0, #4
 8006504:	079a      	lsls	r2, r3, #30
 8006506:	bf04      	itt	eq
 8006508:	089b      	lsreq	r3, r3, #2
 800650a:	3002      	addeq	r0, #2
 800650c:	07da      	lsls	r2, r3, #31
 800650e:	d402      	bmi.n	8006516 <__lo0bits+0x4e>
 8006510:	085b      	lsrs	r3, r3, #1
 8006512:	d006      	beq.n	8006522 <__lo0bits+0x5a>
 8006514:	3001      	adds	r0, #1
 8006516:	600b      	str	r3, [r1, #0]
 8006518:	4770      	bx	lr
 800651a:	4610      	mov	r0, r2
 800651c:	e7e9      	b.n	80064f2 <__lo0bits+0x2a>
 800651e:	2000      	movs	r0, #0
 8006520:	4770      	bx	lr
 8006522:	2020      	movs	r0, #32
 8006524:	4770      	bx	lr

08006526 <__i2b>:
 8006526:	b510      	push	{r4, lr}
 8006528:	460c      	mov	r4, r1
 800652a:	2101      	movs	r1, #1
 800652c:	f7ff fee9 	bl	8006302 <_Balloc>
 8006530:	2201      	movs	r2, #1
 8006532:	6144      	str	r4, [r0, #20]
 8006534:	6102      	str	r2, [r0, #16]
 8006536:	bd10      	pop	{r4, pc}

08006538 <__multiply>:
 8006538:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800653c:	4614      	mov	r4, r2
 800653e:	690a      	ldr	r2, [r1, #16]
 8006540:	6923      	ldr	r3, [r4, #16]
 8006542:	4689      	mov	r9, r1
 8006544:	429a      	cmp	r2, r3
 8006546:	bfbe      	ittt	lt
 8006548:	460b      	movlt	r3, r1
 800654a:	46a1      	movlt	r9, r4
 800654c:	461c      	movlt	r4, r3
 800654e:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006552:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006556:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800655a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800655e:	eb07 060a 	add.w	r6, r7, sl
 8006562:	429e      	cmp	r6, r3
 8006564:	bfc8      	it	gt
 8006566:	3101      	addgt	r1, #1
 8006568:	f7ff fecb 	bl	8006302 <_Balloc>
 800656c:	f100 0514 	add.w	r5, r0, #20
 8006570:	462b      	mov	r3, r5
 8006572:	2200      	movs	r2, #0
 8006574:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006578:	4543      	cmp	r3, r8
 800657a:	d316      	bcc.n	80065aa <__multiply+0x72>
 800657c:	f104 0214 	add.w	r2, r4, #20
 8006580:	f109 0114 	add.w	r1, r9, #20
 8006584:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8006588:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800658c:	9301      	str	r3, [sp, #4]
 800658e:	9c01      	ldr	r4, [sp, #4]
 8006590:	4613      	mov	r3, r2
 8006592:	4294      	cmp	r4, r2
 8006594:	d80c      	bhi.n	80065b0 <__multiply+0x78>
 8006596:	2e00      	cmp	r6, #0
 8006598:	dd03      	ble.n	80065a2 <__multiply+0x6a>
 800659a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d054      	beq.n	800664c <__multiply+0x114>
 80065a2:	6106      	str	r6, [r0, #16]
 80065a4:	b003      	add	sp, #12
 80065a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065aa:	f843 2b04 	str.w	r2, [r3], #4
 80065ae:	e7e3      	b.n	8006578 <__multiply+0x40>
 80065b0:	f8b3 a000 	ldrh.w	sl, [r3]
 80065b4:	3204      	adds	r2, #4
 80065b6:	f1ba 0f00 	cmp.w	sl, #0
 80065ba:	d020      	beq.n	80065fe <__multiply+0xc6>
 80065bc:	46ae      	mov	lr, r5
 80065be:	4689      	mov	r9, r1
 80065c0:	f04f 0c00 	mov.w	ip, #0
 80065c4:	f859 4b04 	ldr.w	r4, [r9], #4
 80065c8:	f8be b000 	ldrh.w	fp, [lr]
 80065cc:	b2a3      	uxth	r3, r4
 80065ce:	fb0a b303 	mla	r3, sl, r3, fp
 80065d2:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80065d6:	f8de 4000 	ldr.w	r4, [lr]
 80065da:	4463      	add	r3, ip
 80065dc:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80065e0:	fb0a c40b 	mla	r4, sl, fp, ip
 80065e4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80065ee:	454f      	cmp	r7, r9
 80065f0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80065f4:	f84e 3b04 	str.w	r3, [lr], #4
 80065f8:	d8e4      	bhi.n	80065c4 <__multiply+0x8c>
 80065fa:	f8ce c000 	str.w	ip, [lr]
 80065fe:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8006602:	f1b9 0f00 	cmp.w	r9, #0
 8006606:	d01f      	beq.n	8006648 <__multiply+0x110>
 8006608:	46ae      	mov	lr, r5
 800660a:	468c      	mov	ip, r1
 800660c:	f04f 0a00 	mov.w	sl, #0
 8006610:	682b      	ldr	r3, [r5, #0]
 8006612:	f8bc 4000 	ldrh.w	r4, [ip]
 8006616:	f8be b002 	ldrh.w	fp, [lr, #2]
 800661a:	b29b      	uxth	r3, r3
 800661c:	fb09 b404 	mla	r4, r9, r4, fp
 8006620:	44a2      	add	sl, r4
 8006622:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8006626:	f84e 3b04 	str.w	r3, [lr], #4
 800662a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800662e:	f8be 4000 	ldrh.w	r4, [lr]
 8006632:	0c1b      	lsrs	r3, r3, #16
 8006634:	fb09 4303 	mla	r3, r9, r3, r4
 8006638:	4567      	cmp	r7, ip
 800663a:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 800663e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006642:	d8e6      	bhi.n	8006612 <__multiply+0xda>
 8006644:	f8ce 3000 	str.w	r3, [lr]
 8006648:	3504      	adds	r5, #4
 800664a:	e7a0      	b.n	800658e <__multiply+0x56>
 800664c:	3e01      	subs	r6, #1
 800664e:	e7a2      	b.n	8006596 <__multiply+0x5e>

08006650 <__pow5mult>:
 8006650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006654:	4615      	mov	r5, r2
 8006656:	f012 0203 	ands.w	r2, r2, #3
 800665a:	4606      	mov	r6, r0
 800665c:	460f      	mov	r7, r1
 800665e:	d007      	beq.n	8006670 <__pow5mult+0x20>
 8006660:	4c21      	ldr	r4, [pc, #132]	; (80066e8 <__pow5mult+0x98>)
 8006662:	3a01      	subs	r2, #1
 8006664:	2300      	movs	r3, #0
 8006666:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800666a:	f7ff fe95 	bl	8006398 <__multadd>
 800666e:	4607      	mov	r7, r0
 8006670:	10ad      	asrs	r5, r5, #2
 8006672:	d035      	beq.n	80066e0 <__pow5mult+0x90>
 8006674:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006676:	b93c      	cbnz	r4, 8006688 <__pow5mult+0x38>
 8006678:	2010      	movs	r0, #16
 800667a:	f7fe f80d 	bl	8004698 <malloc>
 800667e:	6270      	str	r0, [r6, #36]	; 0x24
 8006680:	6044      	str	r4, [r0, #4]
 8006682:	6084      	str	r4, [r0, #8]
 8006684:	6004      	str	r4, [r0, #0]
 8006686:	60c4      	str	r4, [r0, #12]
 8006688:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800668c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006690:	b94c      	cbnz	r4, 80066a6 <__pow5mult+0x56>
 8006692:	f240 2171 	movw	r1, #625	; 0x271
 8006696:	4630      	mov	r0, r6
 8006698:	f7ff ff45 	bl	8006526 <__i2b>
 800669c:	2300      	movs	r3, #0
 800669e:	4604      	mov	r4, r0
 80066a0:	f8c8 0008 	str.w	r0, [r8, #8]
 80066a4:	6003      	str	r3, [r0, #0]
 80066a6:	f04f 0800 	mov.w	r8, #0
 80066aa:	07eb      	lsls	r3, r5, #31
 80066ac:	d50a      	bpl.n	80066c4 <__pow5mult+0x74>
 80066ae:	4639      	mov	r1, r7
 80066b0:	4622      	mov	r2, r4
 80066b2:	4630      	mov	r0, r6
 80066b4:	f7ff ff40 	bl	8006538 <__multiply>
 80066b8:	4681      	mov	r9, r0
 80066ba:	4639      	mov	r1, r7
 80066bc:	4630      	mov	r0, r6
 80066be:	f7ff fe54 	bl	800636a <_Bfree>
 80066c2:	464f      	mov	r7, r9
 80066c4:	106d      	asrs	r5, r5, #1
 80066c6:	d00b      	beq.n	80066e0 <__pow5mult+0x90>
 80066c8:	6820      	ldr	r0, [r4, #0]
 80066ca:	b938      	cbnz	r0, 80066dc <__pow5mult+0x8c>
 80066cc:	4622      	mov	r2, r4
 80066ce:	4621      	mov	r1, r4
 80066d0:	4630      	mov	r0, r6
 80066d2:	f7ff ff31 	bl	8006538 <__multiply>
 80066d6:	6020      	str	r0, [r4, #0]
 80066d8:	f8c0 8000 	str.w	r8, [r0]
 80066dc:	4604      	mov	r4, r0
 80066de:	e7e4      	b.n	80066aa <__pow5mult+0x5a>
 80066e0:	4638      	mov	r0, r7
 80066e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066e6:	bf00      	nop
 80066e8:	08007318 	.word	0x08007318

080066ec <__lshift>:
 80066ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066f0:	460c      	mov	r4, r1
 80066f2:	4607      	mov	r7, r0
 80066f4:	4616      	mov	r6, r2
 80066f6:	6923      	ldr	r3, [r4, #16]
 80066f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80066fc:	eb0a 0903 	add.w	r9, sl, r3
 8006700:	6849      	ldr	r1, [r1, #4]
 8006702:	68a3      	ldr	r3, [r4, #8]
 8006704:	f109 0501 	add.w	r5, r9, #1
 8006708:	42ab      	cmp	r3, r5
 800670a:	db31      	blt.n	8006770 <__lshift+0x84>
 800670c:	4638      	mov	r0, r7
 800670e:	f7ff fdf8 	bl	8006302 <_Balloc>
 8006712:	2200      	movs	r2, #0
 8006714:	4680      	mov	r8, r0
 8006716:	4611      	mov	r1, r2
 8006718:	f100 0314 	add.w	r3, r0, #20
 800671c:	4552      	cmp	r2, sl
 800671e:	db2a      	blt.n	8006776 <__lshift+0x8a>
 8006720:	6920      	ldr	r0, [r4, #16]
 8006722:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006726:	f104 0114 	add.w	r1, r4, #20
 800672a:	f016 021f 	ands.w	r2, r6, #31
 800672e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8006732:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8006736:	d022      	beq.n	800677e <__lshift+0x92>
 8006738:	2000      	movs	r0, #0
 800673a:	f1c2 0c20 	rsb	ip, r2, #32
 800673e:	680e      	ldr	r6, [r1, #0]
 8006740:	4096      	lsls	r6, r2
 8006742:	4330      	orrs	r0, r6
 8006744:	f843 0b04 	str.w	r0, [r3], #4
 8006748:	f851 0b04 	ldr.w	r0, [r1], #4
 800674c:	458e      	cmp	lr, r1
 800674e:	fa20 f00c 	lsr.w	r0, r0, ip
 8006752:	d8f4      	bhi.n	800673e <__lshift+0x52>
 8006754:	6018      	str	r0, [r3, #0]
 8006756:	b108      	cbz	r0, 800675c <__lshift+0x70>
 8006758:	f109 0502 	add.w	r5, r9, #2
 800675c:	3d01      	subs	r5, #1
 800675e:	4638      	mov	r0, r7
 8006760:	f8c8 5010 	str.w	r5, [r8, #16]
 8006764:	4621      	mov	r1, r4
 8006766:	f7ff fe00 	bl	800636a <_Bfree>
 800676a:	4640      	mov	r0, r8
 800676c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006770:	3101      	adds	r1, #1
 8006772:	005b      	lsls	r3, r3, #1
 8006774:	e7c8      	b.n	8006708 <__lshift+0x1c>
 8006776:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800677a:	3201      	adds	r2, #1
 800677c:	e7ce      	b.n	800671c <__lshift+0x30>
 800677e:	3b04      	subs	r3, #4
 8006780:	f851 2b04 	ldr.w	r2, [r1], #4
 8006784:	458e      	cmp	lr, r1
 8006786:	f843 2f04 	str.w	r2, [r3, #4]!
 800678a:	d8f9      	bhi.n	8006780 <__lshift+0x94>
 800678c:	e7e6      	b.n	800675c <__lshift+0x70>

0800678e <__mcmp>:
 800678e:	6903      	ldr	r3, [r0, #16]
 8006790:	690a      	ldr	r2, [r1, #16]
 8006792:	b530      	push	{r4, r5, lr}
 8006794:	1a9b      	subs	r3, r3, r2
 8006796:	d10c      	bne.n	80067b2 <__mcmp+0x24>
 8006798:	0092      	lsls	r2, r2, #2
 800679a:	3014      	adds	r0, #20
 800679c:	3114      	adds	r1, #20
 800679e:	1884      	adds	r4, r0, r2
 80067a0:	4411      	add	r1, r2
 80067a2:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80067a6:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80067aa:	4295      	cmp	r5, r2
 80067ac:	d003      	beq.n	80067b6 <__mcmp+0x28>
 80067ae:	d305      	bcc.n	80067bc <__mcmp+0x2e>
 80067b0:	2301      	movs	r3, #1
 80067b2:	4618      	mov	r0, r3
 80067b4:	bd30      	pop	{r4, r5, pc}
 80067b6:	42a0      	cmp	r0, r4
 80067b8:	d3f3      	bcc.n	80067a2 <__mcmp+0x14>
 80067ba:	e7fa      	b.n	80067b2 <__mcmp+0x24>
 80067bc:	f04f 33ff 	mov.w	r3, #4294967295
 80067c0:	e7f7      	b.n	80067b2 <__mcmp+0x24>

080067c2 <__mdiff>:
 80067c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067c6:	460d      	mov	r5, r1
 80067c8:	4607      	mov	r7, r0
 80067ca:	4611      	mov	r1, r2
 80067cc:	4628      	mov	r0, r5
 80067ce:	4614      	mov	r4, r2
 80067d0:	f7ff ffdd 	bl	800678e <__mcmp>
 80067d4:	1e06      	subs	r6, r0, #0
 80067d6:	d108      	bne.n	80067ea <__mdiff+0x28>
 80067d8:	4631      	mov	r1, r6
 80067da:	4638      	mov	r0, r7
 80067dc:	f7ff fd91 	bl	8006302 <_Balloc>
 80067e0:	2301      	movs	r3, #1
 80067e2:	6146      	str	r6, [r0, #20]
 80067e4:	6103      	str	r3, [r0, #16]
 80067e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ea:	bfa4      	itt	ge
 80067ec:	4623      	movge	r3, r4
 80067ee:	462c      	movge	r4, r5
 80067f0:	4638      	mov	r0, r7
 80067f2:	6861      	ldr	r1, [r4, #4]
 80067f4:	bfa6      	itte	ge
 80067f6:	461d      	movge	r5, r3
 80067f8:	2600      	movge	r6, #0
 80067fa:	2601      	movlt	r6, #1
 80067fc:	f7ff fd81 	bl	8006302 <_Balloc>
 8006800:	f04f 0c00 	mov.w	ip, #0
 8006804:	60c6      	str	r6, [r0, #12]
 8006806:	692b      	ldr	r3, [r5, #16]
 8006808:	6926      	ldr	r6, [r4, #16]
 800680a:	f104 0214 	add.w	r2, r4, #20
 800680e:	f105 0914 	add.w	r9, r5, #20
 8006812:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006816:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800681a:	f100 0114 	add.w	r1, r0, #20
 800681e:	f852 ab04 	ldr.w	sl, [r2], #4
 8006822:	f859 5b04 	ldr.w	r5, [r9], #4
 8006826:	fa1f f38a 	uxth.w	r3, sl
 800682a:	4463      	add	r3, ip
 800682c:	b2ac      	uxth	r4, r5
 800682e:	1b1b      	subs	r3, r3, r4
 8006830:	0c2c      	lsrs	r4, r5, #16
 8006832:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006836:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800683a:	b29b      	uxth	r3, r3
 800683c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006840:	45c8      	cmp	r8, r9
 8006842:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006846:	4696      	mov	lr, r2
 8006848:	f841 4b04 	str.w	r4, [r1], #4
 800684c:	d8e7      	bhi.n	800681e <__mdiff+0x5c>
 800684e:	45be      	cmp	lr, r7
 8006850:	d305      	bcc.n	800685e <__mdiff+0x9c>
 8006852:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006856:	b18b      	cbz	r3, 800687c <__mdiff+0xba>
 8006858:	6106      	str	r6, [r0, #16]
 800685a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800685e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006862:	b2a2      	uxth	r2, r4
 8006864:	4462      	add	r2, ip
 8006866:	1413      	asrs	r3, r2, #16
 8006868:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800686c:	b292      	uxth	r2, r2
 800686e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006872:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006876:	f841 2b04 	str.w	r2, [r1], #4
 800687a:	e7e8      	b.n	800684e <__mdiff+0x8c>
 800687c:	3e01      	subs	r6, #1
 800687e:	e7e8      	b.n	8006852 <__mdiff+0x90>

08006880 <__ulp>:
 8006880:	4b10      	ldr	r3, [pc, #64]	; (80068c4 <__ulp+0x44>)
 8006882:	400b      	ands	r3, r1
 8006884:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006888:	2b00      	cmp	r3, #0
 800688a:	dd02      	ble.n	8006892 <__ulp+0x12>
 800688c:	2000      	movs	r0, #0
 800688e:	4619      	mov	r1, r3
 8006890:	4770      	bx	lr
 8006892:	425b      	negs	r3, r3
 8006894:	151b      	asrs	r3, r3, #20
 8006896:	2b13      	cmp	r3, #19
 8006898:	f04f 0000 	mov.w	r0, #0
 800689c:	f04f 0100 	mov.w	r1, #0
 80068a0:	dc04      	bgt.n	80068ac <__ulp+0x2c>
 80068a2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80068a6:	fa42 f103 	asr.w	r1, r2, r3
 80068aa:	4770      	bx	lr
 80068ac:	2201      	movs	r2, #1
 80068ae:	3b14      	subs	r3, #20
 80068b0:	2b1e      	cmp	r3, #30
 80068b2:	bfce      	itee	gt
 80068b4:	4613      	movgt	r3, r2
 80068b6:	f1c3 031f 	rsble	r3, r3, #31
 80068ba:	fa02 f303 	lslle.w	r3, r2, r3
 80068be:	4618      	mov	r0, r3
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	7ff00000 	.word	0x7ff00000

080068c8 <__b2d>:
 80068c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068cc:	6907      	ldr	r7, [r0, #16]
 80068ce:	f100 0914 	add.w	r9, r0, #20
 80068d2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80068d6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80068da:	f1a7 0804 	sub.w	r8, r7, #4
 80068de:	4630      	mov	r0, r6
 80068e0:	f7ff fdd3 	bl	800648a <__hi0bits>
 80068e4:	f1c0 0320 	rsb	r3, r0, #32
 80068e8:	280a      	cmp	r0, #10
 80068ea:	600b      	str	r3, [r1, #0]
 80068ec:	491e      	ldr	r1, [pc, #120]	; (8006968 <__b2d+0xa0>)
 80068ee:	dc17      	bgt.n	8006920 <__b2d+0x58>
 80068f0:	45c1      	cmp	r9, r8
 80068f2:	bf28      	it	cs
 80068f4:	2200      	movcs	r2, #0
 80068f6:	f1c0 0e0b 	rsb	lr, r0, #11
 80068fa:	fa26 f30e 	lsr.w	r3, r6, lr
 80068fe:	bf38      	it	cc
 8006900:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006904:	ea43 0501 	orr.w	r5, r3, r1
 8006908:	f100 0315 	add.w	r3, r0, #21
 800690c:	fa06 f303 	lsl.w	r3, r6, r3
 8006910:	fa22 f20e 	lsr.w	r2, r2, lr
 8006914:	ea43 0402 	orr.w	r4, r3, r2
 8006918:	4620      	mov	r0, r4
 800691a:	4629      	mov	r1, r5
 800691c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006920:	45c1      	cmp	r9, r8
 8006922:	bf3a      	itte	cc
 8006924:	f1a7 0808 	subcc.w	r8, r7, #8
 8006928:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800692c:	2200      	movcs	r2, #0
 800692e:	f1b0 030b 	subs.w	r3, r0, #11
 8006932:	d015      	beq.n	8006960 <__b2d+0x98>
 8006934:	409e      	lsls	r6, r3
 8006936:	f1c3 0720 	rsb	r7, r3, #32
 800693a:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800693e:	fa22 f107 	lsr.w	r1, r2, r7
 8006942:	45c8      	cmp	r8, r9
 8006944:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8006948:	ea46 0501 	orr.w	r5, r6, r1
 800694c:	bf94      	ite	ls
 800694e:	2100      	movls	r1, #0
 8006950:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006954:	fa02 f003 	lsl.w	r0, r2, r3
 8006958:	40f9      	lsrs	r1, r7
 800695a:	ea40 0401 	orr.w	r4, r0, r1
 800695e:	e7db      	b.n	8006918 <__b2d+0x50>
 8006960:	ea46 0501 	orr.w	r5, r6, r1
 8006964:	4614      	mov	r4, r2
 8006966:	e7d7      	b.n	8006918 <__b2d+0x50>
 8006968:	3ff00000 	.word	0x3ff00000

0800696c <__d2b>:
 800696c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006970:	461c      	mov	r4, r3
 8006972:	2101      	movs	r1, #1
 8006974:	4690      	mov	r8, r2
 8006976:	9e08      	ldr	r6, [sp, #32]
 8006978:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800697a:	f7ff fcc2 	bl	8006302 <_Balloc>
 800697e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006982:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006986:	4607      	mov	r7, r0
 8006988:	bb34      	cbnz	r4, 80069d8 <__d2b+0x6c>
 800698a:	9201      	str	r2, [sp, #4]
 800698c:	f1b8 0f00 	cmp.w	r8, #0
 8006990:	d027      	beq.n	80069e2 <__d2b+0x76>
 8006992:	a802      	add	r0, sp, #8
 8006994:	f840 8d08 	str.w	r8, [r0, #-8]!
 8006998:	f7ff fd96 	bl	80064c8 <__lo0bits>
 800699c:	9900      	ldr	r1, [sp, #0]
 800699e:	b1f0      	cbz	r0, 80069de <__d2b+0x72>
 80069a0:	9a01      	ldr	r2, [sp, #4]
 80069a2:	f1c0 0320 	rsb	r3, r0, #32
 80069a6:	fa02 f303 	lsl.w	r3, r2, r3
 80069aa:	430b      	orrs	r3, r1
 80069ac:	40c2      	lsrs	r2, r0
 80069ae:	617b      	str	r3, [r7, #20]
 80069b0:	9201      	str	r2, [sp, #4]
 80069b2:	9b01      	ldr	r3, [sp, #4]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	bf14      	ite	ne
 80069b8:	2102      	movne	r1, #2
 80069ba:	2101      	moveq	r1, #1
 80069bc:	61bb      	str	r3, [r7, #24]
 80069be:	6139      	str	r1, [r7, #16]
 80069c0:	b1c4      	cbz	r4, 80069f4 <__d2b+0x88>
 80069c2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80069c6:	4404      	add	r4, r0
 80069c8:	6034      	str	r4, [r6, #0]
 80069ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80069ce:	6028      	str	r0, [r5, #0]
 80069d0:	4638      	mov	r0, r7
 80069d2:	b002      	add	sp, #8
 80069d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069d8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80069dc:	e7d5      	b.n	800698a <__d2b+0x1e>
 80069de:	6179      	str	r1, [r7, #20]
 80069e0:	e7e7      	b.n	80069b2 <__d2b+0x46>
 80069e2:	a801      	add	r0, sp, #4
 80069e4:	f7ff fd70 	bl	80064c8 <__lo0bits>
 80069e8:	2101      	movs	r1, #1
 80069ea:	9b01      	ldr	r3, [sp, #4]
 80069ec:	6139      	str	r1, [r7, #16]
 80069ee:	617b      	str	r3, [r7, #20]
 80069f0:	3020      	adds	r0, #32
 80069f2:	e7e5      	b.n	80069c0 <__d2b+0x54>
 80069f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80069f8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80069fc:	6030      	str	r0, [r6, #0]
 80069fe:	6918      	ldr	r0, [r3, #16]
 8006a00:	f7ff fd43 	bl	800648a <__hi0bits>
 8006a04:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006a08:	e7e1      	b.n	80069ce <__d2b+0x62>

08006a0a <__ratio>:
 8006a0a:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006a0e:	4688      	mov	r8, r1
 8006a10:	4669      	mov	r1, sp
 8006a12:	4681      	mov	r9, r0
 8006a14:	f7ff ff58 	bl	80068c8 <__b2d>
 8006a18:	460d      	mov	r5, r1
 8006a1a:	4604      	mov	r4, r0
 8006a1c:	a901      	add	r1, sp, #4
 8006a1e:	4640      	mov	r0, r8
 8006a20:	f7ff ff52 	bl	80068c8 <__b2d>
 8006a24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006a28:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006a2c:	9e00      	ldr	r6, [sp, #0]
 8006a2e:	1a9a      	subs	r2, r3, r2
 8006a30:	9b01      	ldr	r3, [sp, #4]
 8006a32:	1af3      	subs	r3, r6, r3
 8006a34:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	bfd6      	itet	le
 8006a3c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006a40:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 8006a44:	eb01 5103 	addle.w	r1, r1, r3, lsl #20
 8006a48:	4602      	mov	r2, r0
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	4629      	mov	r1, r5
 8006a50:	f7f9 fe68 	bl	8000724 <__aeabi_ddiv>
 8006a54:	b002      	add	sp, #8
 8006a56:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

08006a5a <__copybits>:
 8006a5a:	3901      	subs	r1, #1
 8006a5c:	b510      	push	{r4, lr}
 8006a5e:	1149      	asrs	r1, r1, #5
 8006a60:	6914      	ldr	r4, [r2, #16]
 8006a62:	3101      	adds	r1, #1
 8006a64:	f102 0314 	add.w	r3, r2, #20
 8006a68:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006a6c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006a70:	42a3      	cmp	r3, r4
 8006a72:	4602      	mov	r2, r0
 8006a74:	d303      	bcc.n	8006a7e <__copybits+0x24>
 8006a76:	2300      	movs	r3, #0
 8006a78:	428a      	cmp	r2, r1
 8006a7a:	d305      	bcc.n	8006a88 <__copybits+0x2e>
 8006a7c:	bd10      	pop	{r4, pc}
 8006a7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a82:	f840 2b04 	str.w	r2, [r0], #4
 8006a86:	e7f3      	b.n	8006a70 <__copybits+0x16>
 8006a88:	f842 3b04 	str.w	r3, [r2], #4
 8006a8c:	e7f4      	b.n	8006a78 <__copybits+0x1e>

08006a8e <__any_on>:
 8006a8e:	f100 0214 	add.w	r2, r0, #20
 8006a92:	6900      	ldr	r0, [r0, #16]
 8006a94:	114b      	asrs	r3, r1, #5
 8006a96:	4298      	cmp	r0, r3
 8006a98:	b510      	push	{r4, lr}
 8006a9a:	db11      	blt.n	8006ac0 <__any_on+0x32>
 8006a9c:	dd0a      	ble.n	8006ab4 <__any_on+0x26>
 8006a9e:	f011 011f 	ands.w	r1, r1, #31
 8006aa2:	d007      	beq.n	8006ab4 <__any_on+0x26>
 8006aa4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006aa8:	fa24 f001 	lsr.w	r0, r4, r1
 8006aac:	fa00 f101 	lsl.w	r1, r0, r1
 8006ab0:	428c      	cmp	r4, r1
 8006ab2:	d10b      	bne.n	8006acc <__any_on+0x3e>
 8006ab4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d803      	bhi.n	8006ac4 <__any_on+0x36>
 8006abc:	2000      	movs	r0, #0
 8006abe:	bd10      	pop	{r4, pc}
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	e7f7      	b.n	8006ab4 <__any_on+0x26>
 8006ac4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006ac8:	2900      	cmp	r1, #0
 8006aca:	d0f5      	beq.n	8006ab8 <__any_on+0x2a>
 8006acc:	2001      	movs	r0, #1
 8006ace:	bd10      	pop	{r4, pc}

08006ad0 <strncmp>:
 8006ad0:	b510      	push	{r4, lr}
 8006ad2:	b16a      	cbz	r2, 8006af0 <strncmp+0x20>
 8006ad4:	3901      	subs	r1, #1
 8006ad6:	1884      	adds	r4, r0, r2
 8006ad8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006adc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d103      	bne.n	8006aec <strncmp+0x1c>
 8006ae4:	42a0      	cmp	r0, r4
 8006ae6:	d001      	beq.n	8006aec <strncmp+0x1c>
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1f5      	bne.n	8006ad8 <strncmp+0x8>
 8006aec:	1a98      	subs	r0, r3, r2
 8006aee:	bd10      	pop	{r4, pc}
 8006af0:	4610      	mov	r0, r2
 8006af2:	bd10      	pop	{r4, pc}

08006af4 <__ascii_wctomb>:
 8006af4:	b149      	cbz	r1, 8006b0a <__ascii_wctomb+0x16>
 8006af6:	2aff      	cmp	r2, #255	; 0xff
 8006af8:	bf8b      	itete	hi
 8006afa:	238a      	movhi	r3, #138	; 0x8a
 8006afc:	700a      	strbls	r2, [r1, #0]
 8006afe:	6003      	strhi	r3, [r0, #0]
 8006b00:	2001      	movls	r0, #1
 8006b02:	bf88      	it	hi
 8006b04:	f04f 30ff 	movhi.w	r0, #4294967295
 8006b08:	4770      	bx	lr
 8006b0a:	4608      	mov	r0, r1
 8006b0c:	4770      	bx	lr

08006b0e <_calloc_r>:
 8006b0e:	b510      	push	{r4, lr}
 8006b10:	4351      	muls	r1, r2
 8006b12:	f7fd fdd1 	bl	80046b8 <_malloc_r>
 8006b16:	4604      	mov	r4, r0
 8006b18:	b198      	cbz	r0, 8006b42 <_calloc_r+0x34>
 8006b1a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006b1e:	f022 0203 	bic.w	r2, r2, #3
 8006b22:	3a04      	subs	r2, #4
 8006b24:	2a24      	cmp	r2, #36	; 0x24
 8006b26:	d81b      	bhi.n	8006b60 <_calloc_r+0x52>
 8006b28:	2a13      	cmp	r2, #19
 8006b2a:	d917      	bls.n	8006b5c <_calloc_r+0x4e>
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	2a1b      	cmp	r2, #27
 8006b30:	6001      	str	r1, [r0, #0]
 8006b32:	6041      	str	r1, [r0, #4]
 8006b34:	d807      	bhi.n	8006b46 <_calloc_r+0x38>
 8006b36:	f100 0308 	add.w	r3, r0, #8
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	601a      	str	r2, [r3, #0]
 8006b3e:	605a      	str	r2, [r3, #4]
 8006b40:	609a      	str	r2, [r3, #8]
 8006b42:	4620      	mov	r0, r4
 8006b44:	bd10      	pop	{r4, pc}
 8006b46:	2a24      	cmp	r2, #36	; 0x24
 8006b48:	6081      	str	r1, [r0, #8]
 8006b4a:	60c1      	str	r1, [r0, #12]
 8006b4c:	bf11      	iteee	ne
 8006b4e:	f100 0310 	addne.w	r3, r0, #16
 8006b52:	6101      	streq	r1, [r0, #16]
 8006b54:	f100 0318 	addeq.w	r3, r0, #24
 8006b58:	6141      	streq	r1, [r0, #20]
 8006b5a:	e7ee      	b.n	8006b3a <_calloc_r+0x2c>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	e7ec      	b.n	8006b3a <_calloc_r+0x2c>
 8006b60:	2100      	movs	r1, #0
 8006b62:	f7fd ffb5 	bl	8004ad0 <memset>
 8006b66:	e7ec      	b.n	8006b42 <_calloc_r+0x34>

08006b68 <_sbrk>:
 8006b68:	4b04      	ldr	r3, [pc, #16]	; (8006b7c <_sbrk+0x14>)
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	6819      	ldr	r1, [r3, #0]
 8006b6e:	b909      	cbnz	r1, 8006b74 <_sbrk+0xc>
 8006b70:	4903      	ldr	r1, [pc, #12]	; (8006b80 <_sbrk+0x18>)
 8006b72:	6019      	str	r1, [r3, #0]
 8006b74:	6818      	ldr	r0, [r3, #0]
 8006b76:	4402      	add	r2, r0
 8006b78:	601a      	str	r2, [r3, #0]
 8006b7a:	4770      	bx	lr
 8006b7c:	20000be4 	.word	0x20000be4
 8006b80:	20000bf8 	.word	0x20000bf8

08006b84 <_init>:
 8006b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b86:	bf00      	nop
 8006b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b8a:	bc08      	pop	{r3}
 8006b8c:	469e      	mov	lr, r3
 8006b8e:	4770      	bx	lr

08006b90 <_fini>:
 8006b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b92:	bf00      	nop
 8006b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b96:	bc08      	pop	{r3}
 8006b98:	469e      	mov	lr, r3
 8006b9a:	4770      	bx	lr
